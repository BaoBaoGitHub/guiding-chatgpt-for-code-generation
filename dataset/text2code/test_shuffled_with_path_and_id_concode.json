{"memberVariables": {"parentScope=0": "int", "functionBracePositions=new ArrayList()": "ArrayList", "funcObjects=new ObjArray()": "ObjArray", "functionNum=0": "int", "functionVarMappings=new ArrayList()": "ArrayList", "lastTokenCount=0": "int", "replacedTokens=new ArrayList()": "ArrayList"}, "code": ["void", "function", "(", "ScriptOrFnNode", "parseTree", ")", "{", "int", "level", "=", "-", "1", ";", "collectFuncNodes", "(", "parseTree", ",", "level", ",", "null", ")", ";", "}"], "memberFunctions": {"isInScopeChain": [["boolean", "String token"]], "reset": [["void"]], "leaveNestingLevel": [["void", "int braceNesting"]], "getMappedToken": [["String", "String token", "boolean hasNewMapping"]], "getPreviousTokenMapping": [["String", "String token", "boolean hasNewMapping"]], "collectFuncNodes": [["void", "ScriptOrFnNode parseTree", "int level", "ScriptOrFnNode parent"]], "sourceCompress": [["int", "String encodedSource", "int offset", "boolean asQuotedString", "StringBuffer sb", "int prevToken", "boolean inArgsList", "int currentLevel", "ScriptOrFnNode parseTree"]], "enterNestingLevel": [["void", "int braceNesting"]]}, "className": "TokenMapper", "renamed": ["void", "function", "(", "ScriptOrFnNode", "arg0", ")", "{", "int", "loc0", "=", "-", "1", ";", "collectFuncNodes", "(", "arg0", ",", "loc0", ",", "null", ")", ";", "}"], "nl": "Generate mappings for each Function node and parameters and variables names associated with it. ", "nlToks": ["Generate", "mappings", "for", "each", "Function", "node", "and", "parameters", "and", "variables", "names", "associated", "with", "it", "."], "path": "adamfisk/littleshoot-client/tree/master/server/static/build/src/main/webapp/dojo/util/shrinksafe/src/org/dojotoolkit/shrinksafe/TokenMapper.java", "idx": 0}
{"memberVariables": {"ZERO_HASH=new Sha256Hash(new byte[32])": "Sha256Hash", "bytes": "byte[]"}, "code": ["Sha256Hash", "function", "(", "File", "f", ")", "{", "FileInputStream", "in", "=", "new", "FileInputStream", "(", "f", ")", ";", "try", "{", "return", "create", "(", "ByteStreams", ".", "toByteArray", "(", "in", ")", ")", ";", "}", "finally", "{", "in", ".", "close", "(", ")", ";", "}", "}"], "memberFunctions": {"createDouble": [["Sha256Hash", "byte[] contents"]], "hashCode": [["int"]], "equals": [["boolean", "Object o"]], "create": [["Sha256Hash", "byte[] contents"]], "toBigInteger": [["BigInteger"]], "toString": [["String"]], "duplicate": [["Sha256Hash"]], "compareTo": [["int", "Sha256Hash o"]], "getBytes": [["byte[]"]]}, "className": "Sha256Hash", "renamed": ["Sha256Hash", "function", "(", "File", "arg0", ")", "{", "FileInputStream", "loc0", "=", "new", "FileInputStream", "(", "arg0", ")", ";", "try", "{", "return", "create", "(", "ByteStreams", ".", "toByteArray", "(", "loc0", ")", ")", ";", "}", "finally", "{", "loc0", ".", "close", "(", ")", ";", "}", "}"], "nl": "Returns a hash of the given files contents. Reads the file fully into memory before hashing so only use with small files.", "nlToks": ["Returns", "a", "hash", "of", "the", "given", "files", "contents", ".", "Reads", "the", "file", "fully", "into", "memory", "before", "hashing", "so", "only", "use", "with", "small", "files", "."], "path": "1000000000001/bitcoinj/tree/master/core/src/main/java/org/bitcoinj/core/Sha256Hash.java", "idx": 2}
{"memberVariables": {"LOG=Logger.getLogger(ItemUID.class)": "Logger", "MYCLASS=(new ItemUID()).getClass()": "Class", "id": "String"}, "code": ["String", "function", "(", "Object", "obj", ",", "boolean", "canCreate", ")", "{", "String", "s", "=", "readObjectID", "(", "obj", ")", ";", "if", "(", "s", "==", "null", "&&", "canCreate", ")", "{", "s", "=", "createObjectID", "(", "obj", ")", ";", "}", "return", "s", ";", "}"], "memberFunctions": {"readObjectID": [["String", "Object obj"]], "createObjectID": [["String", "Object obj"]], "generateID": [["String"]], "toString": [["String"]]}, "className": "ItemUID", "renamed": ["String", "function", "(", "Object", "arg0", ",", "boolean", "arg1", ")", "{", "String", "loc0", "=", "readObjectID", "(", "arg0", ")", ";", "if", "(", "loc0", "==", "null", "&&", "arg1", ")", "{", "loc0", "=", "createObjectID", "(", "arg0", ")", ";", "}", "return", "loc0", ";", "}"], "nl": "Obtains the ID of an object and returns it as a String. If canCreate is true it will try to create a new ID for the object if it has none.", "nlToks": ["Obtains", "the", "ID", "of", "an", "object", "and", "returns", "it", "as", "a", "String", ".", "If", "canCreate", "is", "true", "it", "will", "try", "to", "create", "a", "new", "ID", "for", "the", "object", "if", "it", "has", "none", "."], "path": "pichiliani/CoArgoUML/tree/master/v0.24/fonte/src/argouml-app/src/org/argouml/util/ItemUID.java", "idx": 3}
{"memberVariables": {}, "code": ["Matcher", "<", "T", ">", "function", "(", "T", "value", ")", "{", "return", "ComparatorMatcherBuilder", ".", "<", "T", ">", "usingNaturalOrdering", "(", ")", ".", "greaterThan", "(", "value", ")", ";", "}"], "memberFunctions": {"lessThan": [["Matcher<T>", "T value"]], "comparesEqualTo": [["Matcher<T>", "T value"]], "greaterThanOrEqualTo": [["Matcher<T>", "T value"]], "lessThanOrEqualTo": [["Matcher<T>", "T value"]]}, "className": "OrderingComparison", "renamed": ["Matcher", "<", "T", ">", "function", "(", "T", "arg0", ")", "{", "return", "ComparatorMatcherBuilder", ".", "<", "T", ">", "usingNaturalOrdering", "(", ")", ".", "greaterThan", "(", "arg0", ")", ";", "}"], "nl": "Creates a matcher of  {@link Comparable} object that matches when the examined object isgreater than the specified value, as reported by the compareTo method of the examined object. For example: assertThat(2, greaterThan(1))", "nlToks": ["Creates", "a", "matcher", "of", "-LCB-", "@link", "Comparable", "-RCB-", "object", "that", "matches", "when", "the", "examined", "object", "isgreater", "than", "the", "specified", "value", ",", "as", "reported", "by", "the", "compareTo", "method", "of", "the", "examined", "object", ".", "For", "example", ":", "assertThat", "-LRB-", "2", ",", "greaterThan", "-LRB-", "1", "-RRB-", "-RRB-"], "path": "plow/JavaHamcrest/tree/master/hamcrest-library/src/main/java/org/hamcrest/number/OrderingComparison.java", "idx": 4}
{"memberVariables": {"denom=1": "int", "num=1": "int"}, "code": ["int", "function", "(", ")", "{", "return", "denom", ";", "}"], "memberFunctions": {"isOne": [["boolean"]], "getScaled": [["int", "int dimension"]], "equals": [["boolean", "TJScalingFactor other"]], "getNum": [["int"]]}, "className": "TJScalingFactor", "renamed": ["int", "function", "(", ")", "{", "return", "denom", ";", "}"], "nl": "Returns denominator", "nlToks": ["Returns", "denominator"], "path": "princeofdream/USBCamera/tree/master/libuvccamera/src/main/jni/libjpeg-turbo-1.5.0/java/org/libjpegturbo/turbojpeg/TJScalingFactor.java", "idx": 5}
{"memberVariables": {"lat=0.0": "double", "id_str=null": "String", "screen_name=\"unknown\"": "String", "place_name=\"unknown\"": "String", "image=null": "String", "user_name=\"unknown@unknown\"": "String", "lng=0.0": "double", "created_at=null": "Date", "loc_radius=0": "int", "user_id=\"unknown\"": "String", "text=\"\"": "String", "extras=new ArrayList<String>()": "ArrayList<String>"}, "code": ["GenericJSONBuilder", "function", "(", "String", "link_", ")", "{", "image", "=", "link_", ";", "return", "this", ";", "}"], "memberFunctions": {"setIDstr": [["GenericJSONBuilder", "String id_str_"]], "setPlaceName": [["GenericJSONBuilder", "String name"]], "addText": [["GenericJSONBuilder", "String text_"]], "addField": [["GenericJSONBuilder", "String key", "String value"]], "insert": [["void", "Insertable msg"]], "setCoordinateRadius": [["GenericJSONBuilder", "int radius"]], "setAuthor": [["GenericJSONBuilder", "String author", "String domain"]], "builder": [["GenericJSONBuilder"]], "setCoordinate": [["GenericJSONBuilder", "double longtitude", "double latitude"]], "setCreatedTime": [["GenericJSONBuilder", "Date createdTime"]], "persist": [["void"]], "buildFieldJSON": [["String"]], "setUserid": [["GenericJSONBuilder", "String user_id_"]]}, "className": "DAOWrapper", "renamed": ["GenericJSONBuilder", "function", "(", "String", "arg0", ")", "{", "image", "=", "arg0", ";", "return", "this", ";", "}"], "nl": "Not required", "nlToks": ["Not", "required"], "path": "adarsh-ideal/loklak_server/tree/master/src/org/loklak/data/DAOWrapper.java", "idx": 6}
{"memberVariables": {"environments=null": "IEnvironments", "factories=new HashMap<String,XMPPConnectionFactory>()": "HashMap<String,XMPPConnectionFactory>", "config=null": "AutoSIMXMPPConfig"}, "code": ["void", "function", "(", "BundleContext", "context", ")", "{", "for", "(", "AutoSIMConnectionConfig", "connectionConfig", ":", "config", ".", "connections", ")", "{", "environments", ".", "deregisterConnectionFactory", "(", "connectionConfig", ".", "name", ")", ";", "factories", ".", "remove", "(", "connectionConfig", ".", "name", ")", ";", "}", "}"], "memberFunctions": {"start": [["void", "BundleContext context"]]}, "className": "XMPPServiceActivator", "renamed": ["void", "function", "(", "BundleContext", "arg0", ")", "{", "for", "(", "AutoSIMConnectionConfig", "loc0", ":", "config", ".", "connections", ")", "{", "environments", ".", "deregisterConnectionFactory", "(", "loc0", ".", "name", ")", ";", "factories", ".", "remove", "(", "loc0", ".", "name", ")", ";", "}", "}"], "nl": "Implements BundleActivator.stop(). Does nothing since the framework will automatically unregister any registered services.", "nlToks": ["Implements", "BundleActivator.stop", "-LRB-", "-RRB-", ".", "Does", "nothing", "since", "the", "framework", "will", "automatically", "unregister", "any", "registered", "services", "."], "path": "adityayadav76/internet_of_things_simulator/tree/master/AutoSIM-XMPP/src/com/automatski/autosim/xmpp/XMPPServiceActivator.java", "idx": 7}
{"memberVariables": {"mTestStream": "TestBufferedBlockInStream", "mBlockSize": "long", "mBufferSize": "long"}, "code": ["void", "function", "(", ")", "{", "mTestStream", ".", "seek", "(", "10", ")", ";", "Assert", ".", "assertEquals", "(", "10", ",", "mTestStream", ".", "read", "(", ")", ")", ";", "mTestStream", ".", "seek", "(", "2", ")", ";", "Assert", ".", "assertEquals", "(", "2", ",", "mTestStream", ".", "read", "(", ")", ")", ";", "mTestStream", ".", "seek", "(", "mBlockSize", ")", ";", "Assert", ".", "assertEquals", "(", "-", "1", ",", "mTestStream", ".", "read", "(", ")", ")", ";", "}"], "memberFunctions": {"before": [["void"]], "bufferRead": [["void"]], "skip": [["void"]], "bulkRead": [["void"]], "singleByteRead": [["void"]]}, "className": "BufferedBlockInStreamTest", "renamed": ["void", "function", "(", ")", "{", "mTestStream", ".", "seek", "(", "10", ")", ";", "Assert", ".", "assertEquals", "(", "10", ",", "mTestStream", ".", "read", "(", ")", ")", ";", "mTestStream", ".", "seek", "(", "2", ")", ";", "Assert", ".", "assertEquals", "(", "2", ",", "mTestStream", ".", "read", "(", ")", ")", ";", "mTestStream", ".", "seek", "(", "mBlockSize", ")", ";", "Assert", ".", "assertEquals", "(", "-", "1", ",", "mTestStream", ".", "read", "(", ")", ")", ";", "}"], "nl": "Tests for the  {@link BufferedBlockInStream#seek(long)} method.", "nlToks": ["Tests", "for", "the", "-LCB-", "@link", "BufferedBlockInStream", "#seek", "-LRB-", "long", "-RRB-", "-RCB-", "method", "."], "path": "poemlin/alluxio/tree/master/core/client/src/test/java/alluxio/client/block/BufferedBlockInStreamTest.java", "idx": 10}
{"memberVariables": {}, "code": ["void", "function", "(", ")", "{", "final", "CountDownLatch", "finalizerRan", "=", "new", "CountDownLatch", "(", "1", ")", ";", "WeakReference", "<", "Object", ">", "ref", "=", "new", "WeakReference", "<", "Object", ">", "(", "new", "Object", "(", ")", "{", "@", "Override", "protected", "void", "finalize", "(", ")", "{", "finalizerRan", ".", "countDown", "(", ")", ";", "}", "}", ")", ";", "await", "(", "finalizerRan", ")", ";", "awaitClear", "(", "ref", ")", ";", "System", ".", "runFinalization", "(", ")", ";", "}"], "memberFunctions": {"formatRuntimeException": [["RuntimeException", "String format", "Object... args"]], "await": [["void", "CountDownLatch latch"]], "createUnreachableLatchFinalizer": [["void", "final CountDownLatch latch"]], "timeoutSeconds": [["long"]], "isDone": [["boolean"]], "awaitDone": [["void", "Future<?> future"], ["void", "FinalizationPredicate predicate"]], "awaitClear": [["void", "final WeakReference<?> ref"]]}, "className": "GcFinalization", "renamed": ["void", "function", "(", ")", "{", "final", "CountDownLatch", "loc0", "=", "new", "CountDownLatch", "(", "1", ")", ";", "WeakReference", "<", "Object", ">", "loc1", "=", "new", "WeakReference", "<", "Object", ">", "(", "new", "Object", "(", ")", "{", "@", "Override", "protected", "void", "finalize", "(", ")", "{", "loc0", ".", "countDown", "(", ")", ";", "}", "}", ")", ";", "await", "(", "loc0", ")", ";", "awaitClear", "(", "loc1", ")", ";", "System", ".", "runFinalization", "(", ")", ";", "}"], "nl": "Tries to perform a \"full\" garbage collection cycle (including processing of weak references and invocation of finalize methods) and waits for it to complete.  Ensures that at least one weak reference has been cleared and one  {@code finalize} method has been run before thismethod returns.  This method may be useful when testing the garbage collection mechanism itself, or inhibiting a spontaneous GC initiation in subsequent code. In contrast, a plain call to  {@link java.lang.System#gc()} does not ensure finalizationprocessing and may run concurrently, for example, if the JVM flag  {@code -XX:+ExplicitGCInvokesConcurrent} is used.Whenever possible, it is preferable to test directly for some observable change resulting from GC, as with  {@link #awaitClear}.  Because there are no guarantees for the order of GC finalization processing, there may still be some unfinished work for the GC to do after this method returns. This method does not create any memory pressure as would be required to cause soft references to be processed.", "nlToks": ["Tries", "to", "perform", "a", "``", "full", "''", "garbage", "collection", "cycle", "-LRB-", "including", "processing", "of", "weak", "references", "and", "invocation", "of", "finalize", "methods", "-RRB-", "and", "waits", "for", "it", "to", "complete", ".", "Ensures", "that", "at", "least", "one", "weak", "reference", "has", "been", "cleared", "and", "one", "-LCB-", "@code", "finalize", "-RCB-", "method", "has", "been", "run", "before", "thismethod", "returns", ".", "This", "method", "may", "be", "useful", "when", "testing", "the", "garbage", "collection", "mechanism", "itself", ",", "or", "inhibiting", "a", "spontaneous", "GC", "initiation", "in", "subsequent", "code", ".", "In", "contrast", ",", "a", "plain", "call", "to", "-LCB-", "@link", "java.lang.System", "#gc", "-LRB-", "-RRB-", "-RCB-", "does", "not", "ensure", "finalizationprocessing", "and", "may", "run", "concurrently", ",", "for", "example", ",", "if", "the", "JVM", "flag", "-LCB-", "@code", "-", "XX", ":", "+", "ExplicitGCInvokesConcurrent", "-RCB-", "is", "used.Whenever", "possible", ",", "it", "is", "preferable", "to", "test", "directly", "for", "some", "observable", "change", "resulting", "from", "GC", ",", "as", "with", "-LCB-", "@link", "#awaitClear", "-RCB-", ".", "Because", "there", "are", "no", "guarantees", "for", "the", "order", "of", "GC", "finalization", "processing", ",", "there", "may", "still", "be", "some", "unfinished", "work", "for", "the", "GC", "to", "do", "after", "this", "method", "returns", ".", "This", "method", "does", "not", "create", "any", "memory", "pressure", "as", "would", "be", "required", "to", "cause", "soft", "references", "to", "be", "processed", "."], "path": "hazendaz/guava/tree/master/guava-testlib/src/com/google/common/testing/GcFinalization.java", "idx": 12}
{"memberVariables": {"mManager": "TransferManager", "BUCKET_NAME=\"testBucket\"": "String", "KEY=\"testKey\"": "String", "mStream": "S3ADirectOutputStream"}, "code": ["void", "function", "(", ")", "{", "mManager", "=", "Mockito", ".", "mock", "(", "TransferManager", ".", "class", ")", ";", "Upload", "result", "=", "Mockito", ".", "mock", "(", "Upload", ".", "class", ")", ";", "Mockito", ".", "when", "(", "mManager", ".", "upload", "(", "Mockito", ".", "any", "(", "PutObjectRequest", ".", "class", ")", ")", ")", ".", "thenReturn", "(", "result", ")", ";", "mStream", "=", "new", "S3ADirectOutputStream", "(", "BUCKET_NAME", ",", "KEY", ",", "mManager", ")", ";", "}"], "memberFunctions": {"close": [["void"]]}, "className": "S3ADirectOutputStreamTest", "renamed": ["void", "function", "(", ")", "{", "mManager", "=", "Mockito", ".", "mock", "(", "TransferManager", ".", "class", ")", ";", "Upload", "loc0", "=", "Mockito", ".", "mock", "(", "Upload", ".", "class", ")", ";", "Mockito", ".", "when", "(", "mManager", ".", "upload", "(", "Mockito", ".", "any", "(", "PutObjectRequest", ".", "class", ")", ")", ")", ".", "thenReturn", "(", "loc0", ")", ";", "mStream", "=", "new", "S3ADirectOutputStream", "(", "BUCKET_NAME", ",", "KEY", ",", "mManager", ")", ";", "}"], "nl": "Sets the properties and configuration before each test runs.", "nlToks": ["Sets", "the", "properties", "and", "configuration", "before", "each", "test", "runs", "."], "path": "poemlin/alluxio/tree/master/underfs/s3a/src/test/java/alluxio/underfs/s3a/S3ADirectOutputStreamTest.java", "idx": 14}
{"memberVariables": {"LINE_SEPARATOR=System.getProperty(\"line.separator\")": "String"}, "code": ["String", "function", "(", "Object", "o", ",", "String", "indent", ")", "{", "return", "getDocs", "(", "o", ",", "indent", ",", "\"/** \"", ",", "\" *  \"", ",", "\" */\"", ")", ";", "}"], "memberFunctions": {"setDocs": [["void", "Object o", "String s"]], "appendComment": [["int", "StringBuffer sb", "String prefix", "String comment", "int nlprefix"]], "hasDocs": [["boolean", "Object o"]], "getComments": [["String", "Object o"], ["String", "Object o", "String header", "String prefix", "String footer"]], "defaultFor": [["String", "Object o", "String indent"]]}, "className": "DocumentationManager", "renamed": ["String", "function", "(", "Object", "arg0", ",", "String", "arg1", ")", "{", "return", "getDocs", "(", "arg0", ",", "arg1", ",", "\"srini_string\"", ",", "\"srini_string\"", ",", "\"srini_string\"", ")", ";", "}"], "nl": "This function returns the documentation in C-style comment format.", "nlToks": ["This", "function", "returns", "the", "documentation", "in", "C-style", "comment", "format", "."], "path": "pichiliani/CoArgoUML/tree/master/v0.24/fonte/src/argouml-app/src/org/argouml/uml/DocumentationManager.java", "idx": 15}
{"memberVariables": {"LOG=LogUtils.getL7dLogger(AbstractStaticFailoverStrategy.class)": "Logger", "delayBetweenRetries": "long", "alternateAddresses": "List<String>"}, "code": ["Level", "function", "(", ")", "{", "return", "Level", ".", "WARNING", ";", "}"], "memberFunctions": {"selectAlternateAddress": [["String", "List<String> alternates"]], "setDelayBetweenRetries": [["void", "long delay"]], "getEndpoints": [["List<Endpoint>", "Exchange exchange", "boolean acceptCandidatesWithSameAddress"]], "getNextAlternate": [["T", "List<T> alternates"]], "getDelayBetweenRetries": [["long"]], "setAlternateAddresses": [["void", "List<String> alternateAddresses"]], "getAlternateEndpoints": [["List<Endpoint>", "Exchange exchange"]], "selectAlternateEndpoint": [["Endpoint", "List<Endpoint> alternates"]], "getAlternateAddresses": [["List<String>", "Exchange exchange"]]}, "className": "AbstractStaticFailoverStrategy", "renamed": ["Level", "function", "(", ")", "{", "return", "Level", ".", "WARNING", ";", "}"], "nl": "Get the log level for reporting the selection of the new alternative address or endpoint", "nlToks": ["Get", "the", "log", "level", "for", "reporting", "the", "selection", "of", "the", "new", "alternative", "address", "or", "endpoint"], "path": "primesign/cxf/tree/master/rt/features/clustering/src/main/java/org/apache/cxf/clustering/AbstractStaticFailoverStrategy.java", "idx": 17}
{"memberVariables": {"middle": "TSTNode", "data": "char", "left": "TSTNode", "root": "TSTNode", "right": "TSTNode", "al": "ArrayList<String>", "is_End_Of_String": "boolean"}, "code": ["boolean", "function", "(", "String", "word", ")", "{", "return", "search", "(", "root", ",", "word", ".", "toCharArray", "(", ")", ",", "0", ")", ";", "}"], "memberFunctions": {"traverse": [["void", "TSTNode key", "String str"]], "makeEmpty": [["void"]], "isEmpty": [["boolean"]], "insert": [["void", "String word"], ["TSTNode", "TSTNode key", "char[] word", "int pos"]], "toString": [["String"]], "main": [["void", "String[] args"]], "delete": [["void", "String word"], ["void", "TSTNode key", "char[] word", "int pos"]]}, "className": "TernarySearchTree", "renamed": ["boolean", "function", "(", "String", "arg0", ")", "{", "return", "search", "(", "root", ",", "arg0", ".", "toCharArray", "(", ")", ",", "0", ")", ";", "}"], "nl": "function to search for a word", "nlToks": ["function", "to", "search", "for", "a", "word"], "path": "piyushbajaj/Java_Tutorial_DS/tree/master/Trie/TernarySearchTree.java", "idx": 18}
{"memberVariables": {"tx": "Transaction", "ti": "TableInfo", "nextblknum": "int", "lhsscan": "Scan", "chunksize": "int", "filesize": "int", "prodscan": "Scan", "rhsscan=null": "Scan"}, "code": ["void", "function", "(", ")", "{", "prodscan", ".", "close", "(", ")", ";", "}"], "memberFunctions": {"next": [["boolean"]], "getInt": [["int", "String fldname"]], "getVal": [["Constant", "String fldname"]], "useNextChunk": [["boolean"]], "beforeFirst": [["void"]], "getString": [["String", "String fldname"]], "hasField": [["boolean", "String fldname"]]}, "className": "MultiBufferProductScan", "renamed": ["void", "function", "(", ")", "{", "prodscan", ".", "close", "(", ")", ";", "}"], "nl": "Closes the current scans.", "nlToks": ["Closes", "the", "current", "scans", "."], "path": "prerit2803/DBMSProject2/tree/master/simpledb/multibuffer/MultiBufferProductScan.java", "idx": 21}
{"memberVariables": {"userStoreManagers=new HashMap<String,Map<String,String>>()": "Map<String,Map<String,String>>"}, "code": ["Map", "<", "String", ",", "String", ">", "function", "(", "PropertyDTO", "[", "]", "properties", ")", "{", "Map", "<", "String", ",", "String", ">", "propertyMap", "=", "new", "HashMap", "<", "String", ",", "String", ">", "(", ")", ";", "for", "(", "PropertyDTO", "propertyDTO", ":", "properties", ")", "{", "if", "(", "propertyDTO", ".", "getValue", "(", ")", "!=", "null", ")", "{", "propertyMap", ".", "put", "(", "propertyDTO", ".", "getName", "(", ")", ",", "propertyDTO", ".", "getValue", "(", ")", ")", ";", "}", "}", "return", "propertyMap", ";", "}"], "memberFunctions": {"getAvailableDomainNames": [["Set<String>"]], "clearUserStoreManager": [["void"]], "addUserStoreManager": [["void", "PropertyDTO[] userStoreManager", "String domainName"]], "getUserStoreManager": [["Map<String,String>", "String domainName"]]}, "className": "UserStoreMgtDataKeeper", "renamed": ["Map", "<", "String", ",", "String", ">", "function", "(", "PropertyDTO", "[", "]", "arg0", ")", "{", "Map", "<", "String", ",", "String", ">", "loc0", "=", "new", "HashMap", "<", "String", ",", "String", ">", "(", ")", ";", "for", "(", "PropertyDTO", "loc1", ":", "arg0", ")", "{", "if", "(", "loc1", ".", "getValue", "(", ")", "!=", "null", ")", "{", "loc0", ".", "put", "(", "loc1", ".", "getName", "(", ")", ",", "loc1", ".", "getValue", "(", ")", ")", ";", "}", "}", "return", "loc0", ";", "}"], "nl": "Convert a given String[] propertyName#propertyValue to a Map", "nlToks": ["Convert", "a", "given", "String", "-LSB-", "-RSB-", "propertyName", "#propertyValue", "to", "a", "Map"], "path": "harsha1979/carbon-identity/tree/master/components/user-store/org.wso2.carbon.identity.user.store.configuration.ui/src/main/java/org/wso2/carbon/identity/user/store/configuration/ui/utils/UserStoreMgtDataKeeper.java", "idx": 22}
{"memberVariables": {"XML_NAMESPACE=\"http://www.w3.org/XML/1998/namespace\"": "String", "stream": "InputStream", "doc": "Document", "namespaces": "Map<String,String>"}, "code": ["String", "[", "]", "function", "(", "String", "expression", ",", "Map", "<", "String", ",", "String", ">", "namespaces", ")", "{", "return", "getNodes", "(", "expression", ",", "namespaces", ",", "String", ".", "class", ")", ";", "}"], "memberFunctions": {"getLinks": [["URI[]", "String expression", "Map<String,String> namespaces"]], "getPrefix": [["String", "String namespace"]], "getNodes": [["T[]", "String expression", "Class<T> cls"], ["T[]", "String expression", "Map<String,String> namespaces", "Class<T> cls"]], "setBuffering": [["void"]], "getValue": [["String", "String expression"], ["String", "String expression", "Map<String,String> namespaces"], ["T", "String expression", "Map<String,String> namespaces", "Class<T> cls"]], "getLink": [["URI", "String expression"], ["URI", "String expression", "Map<String,String> namespaces"]], "getNamespaceURI": [["String", "String prefix"]], "getPrefixes": [["Iterator<?>", "String namespace"]], "readPrimitiveValue": [["Object", "Node node", "Class<T> cls"]], "getNode": [["T", "String expression", "Class<T> cls"], ["T", "String expression", "Map<String,String> namespaces", "Class<T> cls"]], "getBaseURI": [["URI"]], "evaluate": [["Object", "String expression", "Map<String,String> namespaces", "QName type"]], "readNode": [["T", "Node node", "Class<T> cls"]]}, "className": "XMLSource", "renamed": ["String", "[", "]", "function", "(", "String", "arg0", ",", "Map", "<", "String", ",", "String", ">", "arg1", ")", "{", "return", "getNodes", "(", "arg0", ",", "arg1", ",", "String", ".", "class", ")", ";", "}"], "nl": "Find the attributes or simple/text nodes", "nlToks": ["Find", "the", "attributes", "or", "simple/text", "nodes"], "path": "primesign/cxf/tree/master/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/ext/xml/XMLSource.java", "idx": 24}
{"memberVariables": {"extensionInfo": "ExtensionInfo", "loader": "ClassFileLoader", "eq": "ErrorQueue", "outputFiles=new LinkedHashSet<>()": "Collection<JavaFileObject>", "allExtensions": "List<ExtensionInfo>", "jobs=new ArrayList<>()": "List<Job>"}, "code": ["boolean", "function", "(", "Collection", "<", "Source", ">", "sources", ")", "{", "return", "runToGoal", "(", "sources", ",", "new", "GoalFactory", "(", ")", "{", "@", "Override", "public", "Goal", "getGoal", "(", "Job", "job", ")", "{", "return", "sourceExtension", "(", ")", ".", "getValidationGoal", "(", "job", ")", ";", "}", "}", ")", ";", "}"], "memberFunctions": {"outputFiles": [["Collection<JavaFileObject>"]], "outputWidth": [["int"]], "loader": [["ClassFileLoader"]], "createCodeWriter": [["CodeWriter", "OutputStream w"], ["CodeWriter", "OutputStream w", "int width"], ["CodeWriter", "Writer w"], ["CodeWriter", "Writer w", "int width"]], "jobs": [["List<Job>"]], "errorQueue": [["ErrorQueue"]], "useFullyQualifiedNames": [["boolean"]], "compile": [["boolean", "Collection<FileSource> sources"]], "getGoal": [["Goal", "Job job"]], "sourceExtension": [["ExtensionInfo"]], "compileFiles": [["boolean", "Collection<String> filenames"]], "addExtension": [["void", "ExtensionInfo ext"]], "serializeClassInfo": [["boolean"]], "runToGoal": [["boolean", "Collection<? extends Source> sources", "GoalFactory goalFactory"]], "allExtensions": [["List<ExtensionInfo>"]]}, "className": "Compiler", "renamed": ["boolean", "function", "(", "Collection", "<", "Source", ">", "arg0", ")", "{", "return", "runToGoal", "(", "arg0", ",", "new", "GoalFactory", "(", ")", "{", "@", "Override", "public", "Goal", "getGoal", "(", "Job", "arg1", ")", "{", "return", "sourceExtension", "(", ")", ".", "getValidationGoal", "(", "arg1", ")", ";", "}", "}", ")", ";", "}"], "nl": "Validates the files listed in the set of Sources  {@code source} byrunning passes that are dependent on the validation goal. Returns true on success.", "nlToks": ["Validates", "the", "files", "listed", "in", "the", "set", "of", "Sources", "-LCB-", "@code", "source", "-RCB-", "byrunning", "passes", "that", "are", "dependent", "on", "the", "validation", "goal", ".", "Returns", "true", "on", "success", "."], "path": "polyglot-compiler/polyglot/tree/master/src/polyglot/frontend/Compiler.java", "idx": 26}
{"memberVariables": {"context": "Context"}, "code": ["void", "function", "(", "boolean", "value", ")", "{", "ContentResolver", "localContentResolver", "=", "context", ".", "getContentResolver", "(", ")", ";", "Settings", ".", "Secure", ".", "setLocationProviderEnabled", "(", "localContentResolver", ",", "LocationManager", ".", "GPS_PROVIDER", ",", "value", ")", ";", "}"], "memberFunctions": {"reboot": [["void"]], "getGPS": [["boolean"]]}, "className": "SystemCommands", "renamed": ["void", "function", "(", "boolean", "arg0", ")", "{", "ContentResolver", "loc0", "=", "context", ".", "getContentResolver", "(", ")", ";", "Settings", ".", "Secure", ".", "setLocationProviderEnabled", "(", "loc0", ",", "LocationManager", ".", "GPS_PROVIDER", ",", "arg0", ")", ";", "}"], "nl": "Enable/Disable GPS", "nlToks": ["Enable/Disable", "GPS"], "path": "0-kaladin/ad-away/tree/master/libraries/RootCommands/src/main/java/org/sufficientlysecure/rootcommands/SystemCommands.java", "idx": 27}
{"memberVariables": {"mTmpValue=new TypedValue()": "TypedValue"}, "code": ["boolean", "function", "(", "View", "view", ")", "{", "if", "(", "Build", ".", "VERSION", ".", "SDK_INT", ">=", "VERSION_CODES", ".", "JELLY_BEAN_MR1", ")", "{", "return", "view", ".", "getLayoutDirection", "(", ")", "==", "View", ".", "LAYOUT_DIRECTION_RTL", ";", "}", "else", "{", "return", "false", ";", "}", "}"], "memberFunctions": {"showSystemUI": [["void", "Activity activity"]], "getSystemBarHeightInDp": [["int", "Context context"]], "getStatusBarHeight": [["int", "Context context"]], "getStatusBarHeightInDp": [["int", "Context context"]], "getActionBarHeightInDp": [["int", "Context context"]], "hideSystemUI": [["void", "Activity activity"]], "getSystemBarHeight": [["int", "Context context"]], "pxToDp": [["int", "Context context", "int px"], ["int", "float px"]], "getActionBarHeight": [["int", "Context context"]], "getResourceValue": [["int", "Context context", "int resId"]], "findById": [["T", "View view", "int id"], ["T", "Activity activity", "int id"]], "dpToPx": [["int", "Context context", "int dp"], ["int", "float dp"]], "getScreenRawSize": [["Point", "Display display"]]}, "className": "ViewUtils", "renamed": ["boolean", "function", "(", "View", "arg0", ")", "{", "if", "(", "Build", ".", "VERSION", ".", "SDK_INT", ">=", "VERSION_CODES", ".", "JELLY_BEAN_MR1", ")", "{", "return", "arg0", ".", "getLayoutDirection", "(", ")", "==", "View", ".", "LAYOUT_DIRECTION_RTL", ";", "}", "else", "{", "return", "false", ";", "}", "}"], "nl": "23       Returns true if view's layout direction is right-to-left. 24       25       @param view the View whose layout is being considered 26", "nlToks": ["23", "Returns", "true", "if", "view", "'s", "layout", "direction", "is", "right-to-left", ".", "24", "25", "@param", "view", "the", "View", "whose", "layout", "is", "being", "considered", "26"], "path": "16ren/Android-Next/tree/master/core/src/main/java/com/mcxiaoke/next/utils/ViewUtils.java", "idx": 28}
{"memberVariables": {"lists=new Hashtable()": "Hashtable", "statuses=new Hashtable()": "Hashtable"}, "code": ["Checklist", "function", "(", "Object", "dm", ")", "{", "Checklist", "cl", ";", "java", ".", "lang", ".", "Class", "cls", "=", "dm", ".", "getClass", "(", ")", ";", "while", "(", "cls", "!=", "null", ")", "{", "cl", "=", "lookupChecklist", "(", "cls", ")", ";", "if", "(", "cl", "!=", "null", ")", "{", "return", "cl", ";", "}", "cls", "=", "cls", ".", "getSuperclass", "(", ")", ";", "}", "return", "null", ";", "}"], "memberFunctions": {"getStatusFor": [["ChecklistStatus", "Object dm"]], "lookupChecklist": [["Checklist", "Class cls"]], "register": [["void", "Object dm", "Checklist cl"]]}, "className": "CheckManager", "renamed": ["Checklist", "function", "(", "Object", "arg0", ")", "{", "Checklist", "loc0", ";", "java", ".", "lang", ".", "Class", "loc1", "=", "arg0", ".", "getClass", "(", ")", ";", "while", "(", "loc1", "!=", "null", ")", "{", "loc0", "=", "lookupChecklist", "(", "loc1", ")", ";", "if", "(", "loc0", "!=", "null", ")", "{", "return", "loc0", ";", "}", "loc1", "=", "loc1", ".", "getSuperclass", "(", ")", ";", "}", "return", "null", ";", "}"], "nl": "Gets the checklist for an element.", "nlToks": ["Gets", "the", "checklist", "for", "an", "element", "."], "path": "pichiliani/CoArgoUML/tree/master/v0.24/fonte/src/argouml-app/src/org/argouml/cognitive/checklist/CheckManager.java", "idx": 30}
{"memberVariables": {"instance": "Date", "cal": "GregorianCalendar"}, "code": ["void", "function", "(", ")", "{", "int", "day", "=", "0", ";", "try", "{", "instance", ".", "setDay", "(", "day", ")", ";", "fail", "(", "\"Did not throw exception\"", ")", ";", "}", "catch", "(", "IllegalArgumentException", "e", ")", "{", "}", "day", "=", "32", ";", "try", "{", "instance", ".", "setDay", "(", "day", ")", ";", "fail", "(", "\"Did not throw exception\"", ")", ";", "}", "catch", "(", "IllegalArgumentException", "e", ")", "{", "}", "}"], "memberFunctions": {"testConstructorWithString": [["void"]], "testSetMonth": [["void"]], "testSetYearThreeDigits": [["void"]], "testConstructor": [["void"]], "testToStringFourDigitYear": [["void"]], "testEqualsAfterInit": [["void"]], "testEqualsWrongType": [["void"]], "testSetYearTwoDigit": [["void"]], "testEqualsWhenChanged": [["void"]], "testToISO8601WithTime": [["void"]], "setUp": [["void"]], "testGetMonth": [["void"]], "testEqualsItself": [["void"]], "testSetYearNegative": [["void"]], "testConstructorWithValues": [["void"]], "testGetYear": [["void"]], "testToISO8601WithTimeAndZeroZone": [["void"]], "testToISO8601FourDigitYear": [["void"]], "testSetDay": [["void"]], "testSetYearFourDigit": [["void"]], "testToStringTwoDigitYear": [["void"]], "testToISO8601WithTimeAndPositiveOffset": [["void"]], "testToISO8601TwoDigitYear": [["void"]], "testSetYearFiveDigits": [["void"]], "testToISO8601WithTimeAndNegativeOffset": [["void"]], "testGetDay": [["void"]], "testSetMonthOutOfBounds": [["void"]]}, "className": "DateTest", "renamed": ["void", "function", "(", ")", "{", "int", "loc0", "=", "0", ";", "try", "{", "instance", ".", "setDay", "(", "loc0", ")", ";", "fail", "(", "\"srini_string\"", ")", ";", "}", "catch", "(", "IllegalArgumentException", "loc1", ")", "{", "}", "loc0", "=", "32", ";", "try", "{", "instance", ".", "setDay", "(", "loc0", ")", ";", "fail", "(", "\"srini_string\"", ")", ";", "}", "catch", "(", "IllegalArgumentException", "loc1", ")", "{", "}", "}"], "nl": "Test method for  {@link net.sf.marineapi.nmea.util.Date#setDay(int)}.", "nlToks": ["Test", "method", "for", "-LCB-", "@link", "net.sf.marineapi.nmea.util.Date", "#setDay", "-LRB-", "int", "-RRB-", "-RCB-", "."], "path": "pkoziol/marine-api/tree/master/src/test/java/net/sf/marineapi/nmea/util/DateTest.java", "idx": 32}
{"memberVariables": {"tiles": "Array<Array<Array<Card>>>", "HUMAN_PLAYER=1": "int", "name": "String", "id": "int", "COMPUTER_PLAYER=-1": "int"}, "code": ["int", "function", "(", "int", "lane", ",", "int", "player", ")", "{", "int", "tile", "=", "0", ";", "return", "tile", ";", "}"], "memberFunctions": {"playerBaseAttacked": [["int"]], "laneWithMoreEnemiesInvading": [["int", "int player"]], "nextAvailableLane": [["int", "int player"]], "read": [["void", "Json json", "JsonValue jsonData"]], "nextAvailableTile": [["int", "int lane", "int player"]], "laneWithMoreEnemies": [["int", "int player"]], "getName": [["String"]], "tileFurthestFromBase": [["int", "int lane", "int player"]], "enemyBaseAttacked": [["int"]], "getEnemyCards": [["Array<Card>"]], "cardOnMap": [["boolean", "Card c", "int lane", "int player"]], "addCard": [["void", "Card card", "int tile", "int lane"]], "getPlayerCards": [["Array<Card>"]], "setTiles": [["void", "Array<Array<Array<Card>>> tiles"]], "write": [["void", "Json json"]], "laneWithLessAllies": [["int", "int player"]], "getTiles": [["Array<Array<Array<Card>>>"]]}, "className": "BattleMap", "renamed": ["int", "function", "(", "int", "arg0", ",", "int", "arg1", ")", "{", "int", "loc0", "=", "0", ";", "return", "loc0", ";", "}"], "nl": "Returns the next available tile in the specified lane that is closest to the base. A tile is available if it's not occupied by a card.", "nlToks": ["Returns", "the", "next", "available", "tile", "in", "the", "specified", "lane", "that", "is", "closest", "to", "the", "base", ".", "A", "tile", "is", "available", "if", "it", "'s", "not", "occupied", "by", "a", "card", "."], "path": "prativa/shadowstruggles/tree/master/Shadow Struggles/model/br/edu/ifsp/pds/shadowstruggles/model/BattleMap.java", "idx": 34}
{"memberVariables": {}, "code": ["Matrix", "function", "(", "Matrix", "matrix", ")", "{", "return", "(", "transpose", "(", "cofactor", "(", "matrix", ")", ")", ".", "multiplyByConstant", "(", "1.0", "/", "determinant", "(", "matrix", ")", ")", ")", ";", "}"], "memberFunctions": {"changeSign": [["int", "int i"]], "add": [["Matrix", "Matrix matrix1", "Matrix matrix2"]], "cofactor": [["Matrix", "Matrix matrix"]], "subtract": [["Matrix", "Matrix matrix1", "Matrix matrix2"]], "transpose": [["Matrix", "Matrix matrix"]], "multiply": [["Matrix", "Matrix matrix1", "Matrix matrix2"]], "createSubMatrix": [["Matrix", "Matrix matrix", "int excluding_row", "int excluding_col"]], "determinant": [["double", "Matrix matrix"]]}, "className": "MatrixMathematics", "renamed": ["Matrix", "function", "(", "Matrix", "arg0", ")", "{", "return", "(", "transpose", "(", "cofactor", "(", "arg0", ")", ")", ".", "multiplyByConstant", "(", "1.0", "/", "determinant", "(", "arg0", ")", ")", ")", ";", "}"], "nl": "Inverse of a matrix - A-1  A = I where I is the identity matrix A matrix that have inverse is called non-singular or invertible. If the matrix does not have inverse it is called singular. For a singular matrix the values of the inverted matrix are either NAN or Infinity Only square matrices have inverse and the following method will throw exception if the matrix is not square.", "nlToks": ["Inverse", "of", "a", "matrix", "-", "A-1", "A", "=", "I", "where", "I", "is", "the", "identity", "matrix", "A", "matrix", "that", "have", "inverse", "is", "called", "non-singular", "or", "invertible", ".", "If", "the", "matrix", "does", "not", "have", "inverse", "it", "is", "called", "singular", ".", "For", "a", "singular", "matrix", "the", "values", "of", "the", "inverted", "matrix", "are", "either", "NAN", "or", "Infinity", "Only", "square", "matrices", "have", "inverse", "and", "the", "following", "method", "will", "throw", "exception", "if", "the", "matrix", "is", "not", "square", "."], "path": "poi233/GoGo/tree/master/gogo/src/main/java/com/example/cc/gogo/LinearRegression/MatrixMathematics.java", "idx": 35}
{"memberVariables": {"NOOP=new JobExitStatus(\"NOOP\")": "JobExitStatus", "FILES_AVAILABLE=new JobExitStatus(\"FILES_AVAILABLE\",\"Files avaialable to Process\")": "JobExitStatus", "CAPTURE_SOURCE_METADATA_ERRORS=new JobExitStatus(\"CAPTURE_SOURCE_METADATA_ERRORS\",\"There are some errors when capturing the file metadata from publisher\")": "JobExitStatus", "SOURCE_DELETION_ERRORS=new JobExitStatus(\"SOURCE_DELETION_ERRORS\",\"There are some errors when deleting the file from publisher\")": "JobExitStatus", "DOWNLOAD_ERRORS=new JobExitStatus(\"DOWNLOAD_ERRORS\",\"There are some errors when downloading the file from publisher\")": "JobExitStatus", "CONFIG_VALIDATION_FAIL=new JobExitStatus(\"CONFIG_VALIDATION_FAIL\",\"The required parameters are not available or Invalid Parameters are Provided\")": "JobExitStatus", "MOVEFILES_WORKAREA_ERRORS=new JobExitStatus(\"MOVEFILES_WORKAREA_ERRORS\",\"There are some files already exists in the destination\")": "JobExitStatus", "EXECUTING=new JobExitStatus(\"EXECUTING\")": "JobExitStatus", "DB_NOT_ACCESSABLE=new JobExitStatus(\"DB_NOT_ACCESSABLE\",\"Database is not accessible at this time. Please contact support immediately\")": "JobExitStatus", "ANOTHER_FETCHER_IS_RUNNING=new JobExitStatus(\"ANOTHER_FETCHER_IS_RUNNING\",\"Another Fetcher Already running\")": "JobExitStatus", "RUNFAILED=new JobExitStatus(\"RUNFAILED\",\"Current Run failed Due To Internal System Error\")": "JobExitStatus", "MULTIPLE_PARTIAL_ERRORS=new JobExitStatus(\"MULTIPLE_PARTIAL_ERRORS\",\"There are some errors while deleting or downloading the file from publisher\")": "JobExitStatus", "MOVEFILES_DESTINATION_ERRORS=new JobExitStatus(\"MOVEFILES_DESTINATION_ERRORS\",\"There are some files already exists in the destination\")": "JobExitStatus", "NO_NEW_FILES_FOUND=new JobExitStatus(\"NO_NEW_FILES_FOUND\",\"No new files found in the source\")": "JobExitStatus", "WORK_AREA_NOT_ACCESSABLE=new JobExitStatus(\"WORK_AREA_NOT_ACCESSABLE\",\"File system work area is not accessible. Please contact support immediately\")": "JobExitStatus", "PROCESS_VALIDATION_FAIL=new JobExitStatus(\"PROCESS_VALIDATION_FAIL\",\"Consistency check between work area and data unit failed. Please Contact Support immediately \")": "JobExitStatus", "DESTINATION_NOT_ACCESSABLE=new JobExitStatus(\"DESTINATION_NOT_ACCESSABLE\",\"Archive Filesystem(I Drive?) is not accessible. Please contact support immediately\")": "JobExitStatus", "UNKNOWN=new JobExitStatus(\"UNKNOWN\")": "JobExitStatus", "DELAYERING_ERRORS=new JobExitStatus(\"DELAYERING_ERRORS\",\"There are some errors when delayering the file from publisher\")": "JobExitStatus", "thisExitStatus": "ExitStatus", "partialExitCodes": "List<JobExitStatus>", "NO_FILES_FOUND=new JobExitStatus(\"NO_FILES_FOUND\",\"No files found in the source\")": "JobExitStatus", "SOURCE_NOT_ACCESSABLE=new JobExitStatus(\"SOURCE_NOT_ACCESSABLE\",\"Source is not accessible at this time. Please contact support immediately\")": "JobExitStatus", "COMPLETED=new JobExitStatus(\"COMPLETED\",\"Current Run was successful\")": "JobExitStatus"}, "code": ["String", "function", "(", ")", "{", "return", "thisExitStatus", ".", "getExitCode", "(", ")", ";", "}"], "memberFunctions": {"getPartialFailureCodes": [["List<JobExitStatus>"]], "hashCode": [["int"]], "equals": [["boolean", "Object obj"]], "getExitStatus": [["ExitStatus"]], "toString": [["String"]], "isPartialFailureCode": [["boolean", "ExitStatus exitStatus"], ["boolean", "JobExitStatus exitStatus"]], "getExitDescription": [["String"]]}, "className": "JobExitStatus", "renamed": ["String", "function", "(", ")", "{", "return", "thisExitStatus", ".", "getExitCode", "(", ")", ";", "}"], "nl": "Getter for the exit code (defaults to blank).", "nlToks": ["Getter", "for", "the", "exit", "code", "-LRB-", "defaults", "to", "blank", "-RRB-", "."], "path": "pkesireddy/portico_fletcher/tree/master/fetcher-master/fetcher-core/src/main/java/org/ithaka/cm/fetcher/core/jobs/JobExitStatus.java", "idx": 36}
{"memberVariables": {"nsh": "NamespaceHandler", "ui": "UserInterface", "uac": "UserAgentCallback"}, "code": ["boolean", "function", "(", "Object", "e", ")", "{", "return", "ui", ".", "isHover", "(", "(", "Element", ")", "e", ")", ";", "}"], "memberFunctions": {"getClass": [["String", "Object e"]], "isLink": [["boolean", "Object e"]], "getAttributeValue": [["String", "Object e", "String attrName"], ["String", "Object e", "String namespaceURI", "String attrName"]], "isVisited": [["boolean", "Object e"]], "isFocus": [["boolean", "Object e"]], "getLang": [["String", "Object e"]], "getID": [["String", "Object e"]], "getNonCssStyling": [["String", "Object e"]], "getElementStyling": [["String", "Object e"]], "isActive": [["boolean", "Object e"]]}, "className": "StandardAttributeResolver", "renamed": ["boolean", "function", "(", "Object", "arg0", ")", "{", "return", "ui", ".", "isHover", "(", "(", "Element", ")", "arg0", ")", ";", "}"], "nl": "Gets the hover attribute of the StandardAttributeResolver object", "nlToks": ["Gets", "the", "hover", "attribute", "of", "the", "StandardAttributeResolver", "object"], "path": "plutogeek/flyingsaucer/tree/master/flying-saucer-core/src/main/java/org/xhtmlrenderer/context/StandardAttributeResolver.java", "idx": 38}
{"memberVariables": {"signToken=true": "boolean", "conditionsProvider=new DefaultConditionsProvider()": "ConditionsProvider", "LOG=LogUtils.getL7dLogger(SCTSAMLTokenProvider.class)": "Logger", "attributeStatementProviders": "List<AttributeStatementProvider>", "subjectProvider=new DefaultSubjectProvider()": "SubjectProvider"}, "code": ["List", "<", "AttributeStatementProvider", ">", "function", "(", ")", "{", "return", "attributeStatementProviders", ";", "}"], "memberFunctions": {"canHandleToken": [["boolean", "String tokenType"], ["boolean", "String tokenType", "String realm"]], "createSamlToken": [["SamlAssertionWrapper", "TokenProviderParameters tokenParameters", "byte[] secret", "Document doc"]], "isSignToken": [["boolean"]], "setSubjectProvider": [["void", "SubjectProvider subjectProvider"]], "getConditionsProvider": [["ConditionsProvider"]], "testKeyType": [["void", "TokenProviderParameters tokenParameters"]], "createToken": [["TokenProviderResponse", "TokenProviderParameters tokenParameters"]], "setAttributeStatementProviders": [["void", "List<AttributeStatementProvider> attributeStatementProviders"]], "createCallbackHandler": [["SamlCallbackHandler", "TokenProviderParameters tokenParameters", "byte[] secret", "Document doc"]], "getSubjectProvider": [["SubjectProvider"]], "setConditionsProvider": [["void", "ConditionsProvider conditionsProvider"]], "setSignToken": [["void", "boolean signToken"]]}, "className": "SCTSAMLTokenProvider", "renamed": ["List", "<", "AttributeStatementProvider", ">", "function", "(", ")", "{", "return", "attributeStatementProviders", ";", "}"], "nl": "Get the List of AttributeStatementProviders.", "nlToks": ["Get", "the", "List", "of", "AttributeStatementProviders", "."], "path": "primesign/cxf/tree/master/services/sts/systests/advanced/src/test/java/org/apache/cxf/systest/sts/secure_conv/SCTSAMLTokenProvider.java", "idx": 39}
{"memberVariables": {"game": "ShadowStruggles", "textures": "Array<Asset>", "sounds": "Array<Asset>", "rpgMaps": "Array<Asset>", "assetName": "String", "textureRegions": "Array<Asset>", "LOG=DataManager.class.getName()": "String", "assetType": "String"}, "code": ["void", "function", "(", ")", "{", "if", "(", "this", ".", "sounds", "!=", "null", ")", "{", "for", "(", "Asset", "asset", ":", "this", ".", "sounds", ")", "{", "game", ".", "getAssets", "(", ")", ".", "unload", "(", "FileMap", ".", "resourcesToDirectory", ".", "get", "(", "asset", ".", "assetType", ")", "+", "asset", ".", "assetName", ")", ";", "}", "this", ".", "sounds", "=", "null", ";", "}", "}"], "memberFunctions": {"loadMaps": [["void"]], "getTextureRegion": [["TextureRegion", "String regionName", "String resourceType"]], "getTiledMap": [["TiledMap", "String mapName", "String resourceType"]], "disposeTextures": [["void"]], "disposeMaps": [["void"]], "getTexture": [["Texture", "String textureName", "String resourceType"]], "unloadSounds": [["void", "Array<Asset> soundsToLoad"]], "loadSounds": [["void"]], "equals": [["boolean", "Object obj"]], "setAssetsToLoad": [["void", "Array<Asset> textureRegions", "Array<Asset> textures", "Array<Asset> sounds", "Array<Asset> rpgMaps"]], "loadAssets": [["void"]], "dispose": [["void"]], "loadTextureAtlas": [["void"]], "createTextureAtlas": [["void"]], "disposeAtlas": [["void"]], "loadTextures": [["void"]]}, "className": "Loader", "renamed": ["void", "function", "(", ")", "{", "if", "(", "this", ".", "sounds", "!=", "null", ")", "{", "for", "(", "Asset", "loc0", ":", "this", ".", "sounds", ")", "{", "game", ".", "getAssets", "(", ")", ".", "unload", "(", "FileMap", ".", "resourcesToDirectory", ".", "get", "(", "loc0", ".", "assetType", ")", "+", "loc0", ".", "assetName", ")", ";", "}", "this", ".", "sounds", "=", "null", ";", "}", "}"], "nl": "Unloads the sounds from memory.", "nlToks": ["Unloads", "the", "sounds", "from", "memory", "."], "path": "prativa/shadowstruggles/tree/master/Shadow Struggles/src/br/edu/ifsp/pds/shadowstruggles/data/Loader.java", "idx": 40}
{"memberVariables": {"settings": "IStoredSettings", "runtimeManager": "IRuntimeManager", "projectConfigs": "FileBasedConfig", "logger=LoggerFactory.getLogger(getClass())": "Logger", "repositoryManager": "IRepositoryManager", "projectCache=new ConcurrentHashMap<String,ProjectModel>()": "Map<String,ProjectModel>", "userManager": "IUserManager", "projectMarkdownCache=new ObjectCache<String>()": "ObjectCache<String>", "projectRepositoriesMarkdownCache=new ObjectCache<String>()": "ObjectCache<String>"}, "code": ["ProjectModel", "function", "(", "String", "name", ",", "UserModel", "user", ")", "{", "for", "(", "ProjectModel", "project", ":", "getProjectModels", "(", "user", ",", "true", ")", ")", "{", "if", "(", "project", ".", "name", ".", "equalsIgnoreCase", "(", "name", ")", ")", "{", "return", "project", ";", "}", "}", "return", "null", ";", "}"], "memberFunctions": {"stop": [["ProjectManager"]], "reloadProjectMarkdown": [["void", "ProjectModel project"]], "start": [["ProjectManager"]], "getProjectConfigs": [["Map<String,ProjectModel>"]], "getProjectModels": [["List<ProjectModel>", "UserModel user", "boolean includeUsers"], ["List<ProjectModel>", "List<RepositoryModel> repositoryModels", "boolean includeUsers"]]}, "className": "ProjectManager", "renamed": ["ProjectModel", "function", "(", "String", "arg0", ",", "UserModel", "arg1", ")", "{", "for", "(", "ProjectModel", "loc0", ":", "getProjectModels", "(", "arg1", ",", "true", ")", ")", "{", "if", "(", "loc0", ".", "arg0", ".", "equalsIgnoreCase", "(", "arg0", ")", ")", "{", "return", "loc0", ";", "}", "}", "return", "null", ";", "}"], "nl": "Returns the project model for the specified user.", "nlToks": ["Returns", "the", "project", "model", "for", "the", "specified", "user", "."], "path": "pombreda/gitblit/tree/master/src/main/java/com/gitblit/manager/ProjectManager.java", "idx": 42}
{"memberVariables": {"r": "int", "b": "int", "namedColors=new HashMap<>()": "Map<RGB,String>", "g": "int"}, "code": ["String", "function", "(", "String", "hexString", ")", "{", "int", "hexColor", "=", "Integer", ".", "parseInt", "(", "hexString", ",", "16", ")", ";", "int", "r", "=", "(", "hexColor", "&", "0xFF0000", ")", ">>", "16", ";", "int", "g", "=", "(", "hexColor", "&", "0xFF00", ")", ">>", "8", ";", "int", "b", "=", "(", "hexColor", "&", "0xFF", ")", ";", "return", "getClosestNamedColor", "(", "r", ",", "g", ",", "b", ")", ";", "}"], "memberFunctions": {"hashCode": [["int"]], "equals": [["boolean", "Object object"]], "getColor": [["Color"]], "getNamedColor": [["Optional<String>", "int r", "int g", "int b"], ["Optional<String>", "String hexString"]], "calculateColorDistSq": [["double", "Color color0", "Color color1"]]}, "className": "ColorUtils", "renamed": ["String", "function", "(", "String", "arg0", ")", "{", "int", "loc0", "=", "Integer", ".", "parseInt", "(", "arg0", ",", "16", ")", ";", "int", "loc1", "=", "(", "loc0", "&", "0xFF0000", ")", ">>", "16", ";", "int", "loc2", "=", "(", "loc0", "&", "0xFF00", ")", ">>", "8", ";", "int", "loc3", "=", "(", "loc0", "&", "0xFF", ")", ";", "return", "getClosestNamedColor", "(", "loc1", ",", "loc2", ",", "loc3", ")", ";", "}"], "nl": "Get the color name of the color that is closest to the given hex color value (as a 6-digit hex String).", "nlToks": ["Get", "the", "color", "name", "of", "the", "color", "that", "is", "closest", "to", "the", "given", "hex", "color", "value", "-LRB-", "as", "a", "6-digit", "hex", "String", "-RRB-", "."], "path": "hastebrot/TestFX/tree/master/subprojects/testfx-core/src/main/java/org/testfx/util/ColorUtils.java", "idx": 43}
{"memberVariables": {"schema": "String", "name": "String", "LOG=Logger.getLogger(CLASS_NAME)": "Logger", "type": "String", "CLASS_NAME=SourceObject.class.getName()": "String", "revision": "String"}, "code": ["String", "function", "(", ")", "{", "String", "falseFilePath", "=", "String", ".", "format", "(", "\"/Database/%s/%s/%s%s\"", ",", "getSchema", "(", ")", ",", "getType", "(", ")", ",", "getName", "(", ")", ",", "getSuffixFromType", "(", ")", ")", ";", "return", "falseFilePath", ";", "}"], "memberFunctions": {"setName": [["void", "String name"]], "getName": [["String"]], "getType": [["String"]], "toString": [["String"]], "setRevision": [["void", "String revision"]], "getSuffixFromType": [["String"]], "setType": [["void", "String type"]], "setSchema": [["void", "String schema"]], "getSchema": [["String"]], "getRevision": [["String"]]}, "className": "SourceObject", "renamed": ["String", "function", "(", ")", "{", "String", "loc0", "=", "String", ".", "format", "(", "\"srini_string\"", ",", "getSchema", "(", ")", ",", "getType", "(", ")", ",", "getName", "(", ")", ",", "getSuffixFromType", "(", ")", ")", ";", "return", "loc0", ";", "}"], "nl": "Gets the data source as a pseudo file name (faux-file). Adding a suffix matching the source object type ensures that the appropriate language parser is used.", "nlToks": ["Gets", "the", "data", "source", "as", "a", "pseudo", "file", "name", "-LRB-", "faux-file", "-RRB-", ".", "Adding", "a", "suffix", "matching", "the", "source", "object", "type", "ensures", "that", "the", "appropriate", "language", "parser", "is", "used", "."], "path": "adangel/pmd/tree/master/pmd-core/src/main/java/net/sourceforge/pmd/util/database/SourceObject.java", "idx": 44}
{"memberVariables": {"addressHeader": "int", "INTERVAL=TARGET_TIMESPAN / TARGET_SPACING": "int", "alertSigningKey": "byte[]", "acceptableAddressCodes": "int[]", "packetMagic": "long", "p2shHeader": "int", "paramSet=Collections.synchronizedList(new ArrayList<NetworkParameters>())": "List<NetworkParameters>", "PROTOCOL_VERSION=70001": "int", "genesisBlock": "Block", "proofOfWorkLimit": "BigInteger", "subsidyDecreaseBlockCount": "int", "port": "int", "MAX_MONEY=new BigInteger(\"21000000\",10).multiply(COIN)": "BigInteger", "TARGET_SPACING=10 * 60": "int", "dnsSeeds": "String[]", "checkpoints=new HashMap<Integer,Sha256Hash>()": "Map<Integer,Sha256Hash>", "SATOSHI_KEY=Hex.decode(\"04fc9702847840aaf195de8442ebecedf5b095cdbb9bc716bda9110971b28a49e0ead8564ff0db22209e0374782c093bb899692d524e9d6a6956e7c5ecbcd68284\")": "byte[]", "interval": "int", "id": "String", "spendableCoinbaseDepth": "int", "dumpedPrivateKeyHeader": "int", "targetTimespan": "int", "TARGET_TIMESPAN=14 * 24 * 60* 60": "int", "BIP16_ENFORCE_TIME=1333238400": "int"}, "code": ["int", "function", "(", ")", "{", "return", "port", ";", "}"], "memberFunctions": {"regTests": [["NetworkParameters"]], "allowEmptyPeerChain": [["boolean"]], "getDumpedPrivateKeyHeader": [["int"]], "testNet2": [["NetworkParameters"]], "testNet3": [["NetworkParameters"]], "unitTests": [["NetworkParameters"]], "getId": [["String"]], "getAddressHeader": [["int"]], "getAcceptableAddressCodes": [["int[]"]], "prodNet": [["NetworkParameters"]], "fromID": [["NetworkParameters", "String id"]], "getTargetTimespan": [["int"]], "getDnsSeeds": [["String[]"]], "hashCode": [["int"]], "getSpendableCoinbaseDepth": [["int"]], "testNet": [["NetworkParameters"]], "calculateBlockPoWHash": [["Sha256Hash", "Block b"]], "getMaxMoney": [["BigInteger"]], "getParamsFromAddressByte": [["NetworkParameters", "int version"]], "registerParams": [["void", "NetworkParameters params"]], "isCheckpoint": [["boolean", "int height"]], "getP2SHHeader": [["int"]], "getInterval": [["int"]], "getRetargetBlockCount": [["int"], ["int", "StoredBlock cursor"]], "getGenesisBlock": [["Block"]], "getSubsidyDecreaseBlockCount": [["int"]], "createGenesis": [["Block", "NetworkParameters n"]], "getPacketMagic": [["long"]], "getAlertSigningKey": [["byte[]"]], "equals": [["boolean", "Object other"]], "passesCheckpoint": [["boolean", "int height", "Sha256Hash hash"]], "isAcceptableAddressVersion": [["boolean", "int version"]], "getURIScheme": [["String"]], "getProofOfWorkLimit": [["BigInteger"]]}, "className": "NetworkParameters", "renamed": ["int", "function", "(", ")", "{", "return", "port", ";", "}"], "nl": "Default TCP port on which to connect to nodes.", "nlToks": ["Default", "TCP", "port", "on", "which", "to", "connect", "to", "nodes", "."], "path": "plncoin/plncoin-and/tree/master/plncoinj/core/src/main/java/com/google/bitcoin/core/NetworkParameters.java", "idx": 45}
{"memberVariables": {"jedis": "Jedis"}, "code": ["Set", "<", "String", ">", "function", "(", ")", "{", "return", "jedis", ".", "keys", "(", "\"URLSet:*\"", ")", ";", "}"], "memberFunctions": {"add": [["void", "String term", "TermCounter tc"]], "isIndexed": [["boolean", "String url"]], "deleteAllKeys": [["void"]], "getCounts": [["Map<String,Integer>", "String term"]], "main": [["void", "String[] args"]], "printIndex": [["void"]], "termCounterKey": [["String", "String url"]], "termSet": [["Set<String>"]], "pushTermCounterToRedis": [["List<Object>", "TermCounter tc"]], "loadIndex": [["void", "JedisIndex index"]], "deleteTermCounters": [["void"]], "urlSetKey": [["String", "String term"]], "getCount": [["Integer", "String url", "String term"]], "indexPage": [["void", "String url", "Elements paragraphs"]], "deleteURLSets": [["void"]], "termCounterKeys": [["Set<String>"]], "getURLs": [["Set<String>", "String term"]], "getCountsFaster": [["Map<String,Integer>", "String term"]]}, "className": "JedisIndex", "renamed": ["Set", "<", "String", ">", "function", "(", ")", "{", "return", "jedis", ".", "keys", "(", "\"srini_string\"", ")", ";", "}"], "nl": "Returns URLSet keys for the terms that have been indexed. Should be used for development and testing, not production.", "nlToks": ["Returns", "URLSet", "keys", "for", "the", "terms", "that", "have", "been", "indexed", ".", "Should", "be", "used", "for", "development", "and", "testing", ",", "not", "production", "."], "path": "hayleycall/cs-application-backing-with-redis-lab-codeU/tree/master/javacs-lab10/src/com/flatironschool/javacs/JedisIndex.java", "idx": 46}
{"memberVariables": {"mManagerView": "BlockMetadataManagerView", "mDir": "StorageDir", "mBlocksToMoveOutSize=0L": "long", "mBlocksToMoveInSize=0L": "long", "mTierView": "StorageTierView", "mBlocksToMoveIn=new HashSet<>()": "Set<Long>", "mBlocksToMoveOut=new HashSet<>()": "Set<Long>"}, "code": ["void", "function", "(", ")", "{", "mBlocksToMoveIn", ".", "clear", "(", ")", ";", "mBlocksToMoveOut", ".", "clear", "(", ")", ";", "mBlocksToMoveInSize", "=", "mBlocksToMoveOutSize", "=", "0L", ";", "}"], "memberFunctions": {"getEvitableBytes": [["long"]], "getParentTierView": [["StorageTierView"]], "isMarkedToMoveOut": [["boolean", "long blockId"]], "markBlockMoveIn": [["void", "long blockId", "long blockSize"]], "createTempBlockMeta": [["TempBlockMeta", "long sessionId", "long blockId", "long initialBlockSize"]], "getDirViewIndex": [["int"]], "getCommittedBytes": [["long"]], "getEvictableBlocks": [["List<BlockMeta>"]], "getCapacityBytes": [["long"]], "getAvailableBytes": [["long"]], "toBlockStoreLocation": [["BlockStoreLocation"]], "markBlockMoveOut": [["void", "long blockId", "long blockSize"]]}, "className": "StorageDirView", "renamed": ["void", "function", "(", ")", "{", "mBlocksToMoveIn", ".", "clear", "(", ")", ";", "mBlocksToMoveOut", ".", "clear", "(", ")", ";", "mBlocksToMoveInSize", "=", "mBlocksToMoveOutSize", "=", "0L", ";", "}"], "nl": "Clears all marks about blocks to move in/out in this view.", "nlToks": ["Clears", "all", "marks", "about", "blocks", "to", "move", "in/out", "in", "this", "view", "."], "path": "poemlin/alluxio/tree/master/core/server/src/main/java/alluxio/worker/block/meta/StorageDirView.java", "idx": 47}
{"memberVariables": {"issuedAt=-1": "long", "scopes=Collections.emptyList()": "List<OAuthPermission>", "subject": "UserSubject", "client": "Client", "preAuthorized": "boolean", "tokenString": "String", "lifetime=-1": "long", "tokenSecret": "String"}, "code": ["UserSubject", "function", "(", ")", "{", "return", "subject", ";", "}"], "memberFunctions": {"setScopes": [["void", "List<OAuthPermission> scopes"]], "setPreAuthorized": [["void", "boolean preAuthorized"]], "setSubject": [["void", "UserSubject subject"]], "getTokenKey": [["String"]], "isPreAuthorized": [["boolean"]], "getLifetime": [["long"]], "getClient": [["Client"]], "getIssuedAt": [["long"]], "getTokenSecret": [["String"]], "getScopes": [["List<OAuthPermission>"]]}, "className": "Token", "renamed": ["UserSubject", "function", "(", ")", "{", "return", "subject", ";", "}"], "nl": "Returns a subject capturing the login name  the end user used to login to the resource server when authorizing a given client request", "nlToks": ["Returns", "a", "subject", "capturing", "the", "login", "name", "the", "end", "user", "used", "to", "login", "to", "the", "resource", "server", "when", "authorizing", "a", "given", "client", "request"], "path": "primesign/cxf/tree/master/rt/rs/security/oauth-parent/oauth/src/main/java/org/apache/cxf/rs/security/oauth/data/Token.java", "idx": 48}
{"memberVariables": {"formatOff": "int", "formatRepeatCount": "int", "format": "String"}, "code": ["int", "function", "(", "boolean", "advance", ")", "{", "int", "valueLen", "=", "getIntFromFormat", "(", "advance", ")", ";", "if", "(", "valueLen", "==", "0", ")", "{", "valueLen", "=", "1", ";", "}", "return", "valueLen", ";", "}"], "memberFunctions": {"checkType": [["void", "char asking", "boolean consume"]], "getType": [["char"]], "available": [["int"]], "reset": [["void"]], "toString": [["String"]], "consume": [["void"]], "getIntFromFormat": [["int", "boolean advance"]]}, "className": "PackFormatInputStream", "renamed": ["int", "function", "(", "boolean", "arg0", ")", "{", "int", "loc0", "=", "getIntFromFormat", "(", "arg0", ")", ";", "if", "(", "loc0", "==", "0", ")", "{", "loc0", "=", "1", ";", "}", "return", "loc0", ";", "}"], "nl": "Retrieve a length from the format string. Either for a repeat count or a string length. Return one if no explicit repeat count. \\param advance whether to move the stream position.", "nlToks": ["Retrieve", "a", "length", "from", "the", "format", "string", ".", "Either", "for", "a", "repeat", "count", "or", "a", "string", "length", ".", "Return", "one", "if", "no", "explicit", "repeat", "count", ".", "\\", "param", "advance", "whether", "to", "move", "the", "stream", "position", "."], "path": "pgunn/wiredtiger/tree/master/lang/java/src/com/wiredtiger/db/PackFormatInputStream.java", "idx": 49}
{"memberVariables": {"expectedDataUnitId": "Long", "seqNo": "Long", "dataSetId": "Long", "dataUnitId": "Long", "expectedValue": "String", "actualValue": "String", "expectedDataSetId": "Long", "errorCode": "String", "testId": "Long", "failedAttributeName": "String", "srcFileName": "String", "errorMsg": "String"}, "code": ["String", "function", "(", ")", "{", "return", "errorMsg", ";", "}"], "memberFunctions": {"setExpectedValue": [["void", "String expectedValue"]], "getExpectedValue": [["String"]], "getExpectedDataSetId": [["Long"]], "setExpectedDataSetId": [["void", "Long expectedDataSetId"]], "setActualValue": [["void", "String actualValue"]], "getDataSetId": [["Long"]], "setSrcFileName": [["void", "String srcFileName"]], "getExpectedDataUnitId": [["Long"]], "setExpectedDataUnitId": [["void", "Long expectedDataUnitId"]], "getSrcFileName": [["String"]], "getSeqNo": [["Long"]], "getFailedAttributeName": [["String"]], "setTestId": [["void", "Long testId"]], "setFailedAttributeName": [["void", "String failedAttributeName"]], "getTestId": [["Long"]], "setErrorCode": [["void", "String errorCode"]], "getActualValue": [["String"]], "getDataUnitId": [["Long"]], "setSeqNo": [["void", "Long seqNo"]], "setErrorMsg": [["void", "String errorMsg"]], "getErrorCode": [["String"]], "setDataUnitId": [["void", "Long dataUnitId"]], "setDataSetId": [["void", "Long dataSetId"]], "toString": [["String"]]}, "className": "TestResultDetailsDTO", "renamed": ["String", "function", "(", ")", "{", "return", "errorMsg", ";", "}"], "nl": "Gets the error msg.", "nlToks": ["Gets", "the", "error", "msg", "."], "path": "pkesireddy/portico_fletcher/tree/master/FetcherTesterService/src/main/java/org/ithaka/cm/fetchertester/model/TestResultDetailsDTO.java", "idx": 51}
{"memberVariables": {"_all=new HashMap<>(11)": "HashMap<String,symbol>"}, "code": ["boolean", "function", "(", "symbol", "sym", ")", "{", "return", "_all", ".", "containsKey", "(", "sym", ".", "name", "(", ")", ")", ";", "}"], "memberFunctions": {"add": [["boolean", "symbol sym"], ["boolean", "symbol_set other"]], "iterator": [["Iterator<symbol>"]], "size": [["int"]], "not_null": [["void", "Object obj"]], "hashCode": [["int"]], "is_superset_of": [["boolean", "symbol_set other"]], "equals": [["boolean", "symbol_set other"], ["boolean", "Object other"]], "is_subset_of": [["boolean", "symbol_set other"]], "toString": [["String"]], "remove": [["void", "symbol sym"], ["void", "symbol_set other"]]}, "className": "symbol_set", "renamed": ["boolean", "function", "(", "symbol", "arg0", ")", "{", "return", "_all", ".", "containsKey", "(", "arg0", ".", "name", "(", ")", ")", ";", "}"], "nl": "Determine if the set contains a particular symbol.", "nlToks": ["Determine", "if", "the", "set", "contains", "a", "particular", "symbol", "."], "path": "polyglot-compiler/polyglot/tree/master/tools/java_cup/src/java_cup/symbol_set.java", "idx": 52}
{"memberVariables": {"SPACE=' '": "char"}, "code": ["String", "function", "(", "Node", "n", ")", "{", "StringBuilder", "sb", "=", "new", "StringBuilder", "(", ")", ";", "for", "(", "Node", "child", ":", "new", "IterableNodeList", "(", "n", ".", "getChildNodes", "(", ")", ")", ")", "{", "if", "(", "child", "instanceof", "Text", "||", "child", "instanceof", "CDATASection", ")", "{", "String", "s", "=", "child", ".", "getNodeValue", "(", ")", ";", "if", "(", "s", "!=", "null", ")", "{", "sb", ".", "append", "(", "s", ")", ";", "}", "}", "}", "return", "sb", ".", "toString", "(", ")", ";", "}"], "memberFunctions": {"stripWhitespace": [["Node", "Node original"]], "getAttributes": [["Map<QName,String>", "Node n"]], "normalizeWhitespace": [["Node", "Node original"]], "normalize": [["String", "String s"]], "getQName": [["QName", "Node n"]], "handleWsRec": [["void", "Node n", "boolean normalize"]]}, "className": "Nodes", "renamed": ["String", "function", "(", "Node", "arg0", ")", "{", "StringBuilder", "loc0", "=", "new", "StringBuilder", "(", ")", ";", "for", "(", "Node", "loc1", ":", "new", "IterableNodeList", "(", "arg0", ".", "getChildNodes", "(", ")", ")", ")", "{", "if", "(", "loc1", "instanceof", "Text", "||", "loc1", "instanceof", "CDATASection", ")", "{", "String", "loc2", "=", "loc1", ".", "getNodeValue", "(", ")", ";", "if", "(", "loc2", "!=", "null", ")", "{", "loc0", ".", "append", "(", "loc2", ")", ";", "}", "}", "}", "return", "loc0", ".", "toString", "(", ")", ";", "}"], "nl": "Tries to merge all direct Text and CDATA children of the given Node and concatenates their value.", "nlToks": ["Tries", "to", "merge", "all", "direct", "Text", "and", "CDATA", "children", "of", "the", "given", "Node", "and", "concatenates", "their", "value", "."], "path": "phbenisc/xmlunit/tree/master/xmlunit-core/src/main/java/org/xmlunit/util/Nodes.java", "idx": 53}
{"memberVariables": {"nextId": "int", "instances=new IdentityHashMap<Object,String>()": "Map<Object,String>", "notMarshalled=new LinkedHashMap<String,Object>()": "Map<String,Object>"}, "code": ["MarshalRegistry", "function", "(", "Context", "context", ")", "{", "MarshalRegistry", "marshalRegistry", "=", "context", ".", "getProperty", "(", "MarshalRegistry", ".", "class", ")", ";", "if", "(", "marshalRegistry", "==", "null", ")", "{", "marshalRegistry", "=", "new", "MarshalRegistry", "(", ")", ";", "context", ".", "setProperty", "(", "marshalRegistry", ")", ";", "}", "return", "marshalRegistry", ";", "}"], "memberFunctions": {"getInstanceId": [["String", "Object instance"]], "iterator": [["Iterator<Object>"]]}, "className": "MarshalRegistry", "renamed": ["MarshalRegistry", "function", "(", "Context", "arg0", ")", "{", "MarshalRegistry", "loc0", "=", "arg0", ".", "getProperty", "(", "MarshalRegistry", ".", "class", ")", ";", "if", "(", "loc0", "==", "null", ")", "{", "loc0", "=", "new", "MarshalRegistry", "(", ")", ";", "arg0", ".", "setProperty", "(", "loc0", ")", ";", "}", "return", "loc0", ";", "}"], "nl": "Get the MarshalRegistry stored in the context, and if necessary create a new one.", "nlToks": ["Get", "the", "MarshalRegistry", "stored", "in", "the", "context", ",", "and", "if", "necessary", "create", "a", "new", "one", "."], "path": "primesign/cxf/tree/master/rt/databinding/aegis/src/main/java/org/apache/cxf/aegis/type/encoded/MarshalRegistry.java", "idx": 54}
{"memberVariables": {}, "code": ["List", "<", "T", ">", "function", "(", "T", "o1", ",", "T", "o2", ")", "{", "List", "<", "T", ">", "l", "=", "new", "ArrayList", "<", ">", "(", "2", ")", ";", "l", ".", "add", "(", "o1", ")", ";", "l", ".", "add", "(", "o2", ")", ";", "return", "l", ";", "}"], "memberFunctions": {"add": [["List<T>", "List<T> l", "T o"]], "firstOrElse": [["T", "Collection<U> l", "V alt"]], "equals": [["boolean", "Collection<T> a", "Collection<U> b"]], "nonNullList": [["List<T>", "List<T> l"]], "map": [["List<U>", "List<T> l", "Transformation<T,U> t"]], "pairs": [["Iterator<Pair<T,T>>", "Collection<T> l"]]}, "className": "CollectionUtil", "renamed": ["List", "<", "T", ">", "function", "(", "T", "arg0", ",", "T", "arg1", ")", "{", "List", "<", "T", ">", "loc0", "=", "new", "ArrayList", "<", ">", "(", "2", ")", ";", "loc0", ".", "add", "(", "arg0", ")", ";", "loc0", ".", "add", "(", "arg1", ")", ";", "return", "loc0", ";", "}"], "nl": "Return a list containing  {@code o1} and {@code o2}.", "nlToks": ["Return", "a", "list", "containing", "-LCB-", "@code", "o1", "-RCB-", "and", "-LCB-", "@code", "o2", "-RCB-", "."], "path": "polyglot-compiler/polyglot/tree/master/src/polyglot/util/CollectionUtil.java", "idx": 55}
{"memberVariables": {"template": "MetaData.Template", "workflowImpl": "MetaData.WorkflowImpl", "workflowImplId": "String", "parametersMetaData": "ParametersMetaData", "templateName": "String", "templateDescription": "String", "templateId": "String", "workflowImplName": "String", "workflowImplDescription": "String"}, "code": ["void", "function", "(", "ParametersMetaData", "value", ")", "{", "this", ".", "parametersMetaData", "=", "value", ";", "}"], "memberFunctions": {"getWorkflowImpl": [["MetaData.WorkflowImpl"]], "getTemplate": [["MetaData.Template"]], "setWorkflowImplId": [["void", "String value"]], "getParametersMetaData": [["ParametersMetaData"], ["ParametersMetaData"]], "setWorkflowImplName": [["void", "String value"]], "setTemplateId": [["void", "String value"], ["void", "String value"]], "getTemplateDescription": [["String"]], "setTemplateDescription": [["void", "String value"]], "setTemplateName": [["void", "String value"]], "getWorkflowImplName": [["String"]], "setTemplate": [["void", "MetaData.Template value"]], "getTemplateId": [["String"], ["String"]], "getWorkflowImplId": [["String"]], "getWorkflowImplDescription": [["String"]], "getTemplateName": [["String"]], "setWorkflowImpl": [["void", "MetaData.WorkflowImpl value"]], "setWorkflowImplDescription": [["void", "String value"]]}, "className": "MetaData", "renamed": ["void", "function", "(", "ParametersMetaData", "arg0", ")", "{", "this", ".", "parametersMetaData", "=", "arg0", ";", "}"], "nl": "Sets the value of the parametersMetaData property.", "nlToks": ["Sets", "the", "value", "of", "the", "parametersMetaData", "property", "."], "path": "harsha1979/carbon-identity/tree/master/components/workflow-mgt/org.wso2.carbon.identity.workflow.mgt/src/main/java/org/wso2/carbon/identity/workflow/mgt/bean/metadata/MetaData.java", "idx": 56}
{"memberVariables": {"serialVersionUID=-2570516012301142091L": "long", "aboutName=\"Dev module\"": "String", "LOG=Logger.getLogger(DeveloperModule.class)": "Logger"}, "code": ["List", "<", "AbstractArgoJPanel", ">", "function", "(", ")", "{", "List", "<", "AbstractArgoJPanel", ">", "result", "=", "new", "ArrayList", "<", "AbstractArgoJPanel", ">", "(", ")", ";", "result", ".", "add", "(", "TestPanel", ".", "getInstance", "(", ")", ")", ";", "return", "result", ";", "}"], "memberFunctions": {"getName": [["String"]], "getInfo": [["String", "int type"]], "enable": [["boolean"]], "disable": [["boolean"]]}, "className": "DeveloperModule", "renamed": ["List", "<", "AbstractArgoJPanel", ">", "function", "(", ")", "{", "List", "<", "AbstractArgoJPanel", ">", "loc0", "=", "new", "ArrayList", "<", "AbstractArgoJPanel", ">", "(", ")", ";", "loc0", ".", "add", "(", "TestPanel", ".", "getInstance", "(", ")", ")", ";", "return", "loc0", ";", "}"], "nl": "Return our details tab(s).  Proof of concept only.", "nlToks": ["Return", "our", "details", "tab", "-LRB-", "s", "-RRB-", ".", "Proof", "of", "concept", "only", "."], "path": "pichiliani/CoArgoUML/tree/master/v0.24/fonte/modules/dev/src/org/argouml/dev/DeveloperModule.java", "idx": 57}
{"memberVariables": {"writer": "XMLStreamWriter"}, "code": ["void", "function", "(", "byte", "[", "]", "data", ")", "{", "try", "{", "if", "(", "data", ".", "length", "!=", "0", ")", "{", "writer", ".", "writeStartElement", "(", "\"chars\"", ")", ";", "writer", ".", "writeCharacters", "(", "new", "String", "(", "data", ")", ")", ";", "writer", ".", "writeEndElement", "(", ")", ";", "}", "}", "catch", "(", "XMLStreamException", "ex", ")", "{", "throw", "new", "RuntimeException", "(", "ex", ")", ";", "}", "}"], "memberFunctions": {"processGroupStart": [["void"]], "processDocumentEnd": [["void"]], "processGroupEnd": [["void"]], "processCommand": [["void", "Command command", "int parameter", "boolean hasParameter", "boolean optional"]], "processString": [["void", "String string"]], "processDocumentStart": [["void"]], "processBinaryBytes": [["void", "byte[] data"]]}, "className": "RtfDumpListener", "renamed": ["void", "function", "(", "byte", "[", "]", "arg0", ")", "{", "try", "{", "if", "(", "arg0", ".", "length", "!=", "0", ")", "{", "writer", ".", "writeStartElement", "(", "\"srini_string\"", ")", ";", "writer", ".", "writeCharacters", "(", "new", "String", "(", "arg0", ")", ")", ";", "writer", ".", "writeEndElement", "(", ")", ";", "}", "}", "catch", "(", "XMLStreamException", "loc0", ")", "{", "throw", "new", "RuntimeException", "(", "loc0", ")", ";", "}", "}"], "nl": "Write character bytes - note that we cheat, we just convert them directly to a string for output with no regard to the encoding.", "nlToks": ["Write", "character", "bytes", "-", "note", "that", "we", "cheat", ",", "we", "just", "convert", "them", "directly", "to", "a", "string", "for", "output", "with", "no", "regard", "to", "the", "encoding", "."], "path": "harrisaoz/rtfparserkit/tree/master/RTF Parser Kit/src/main/java/com/rtfparserkit/utils/RtfDumpListener.java", "idx": 58}
{"memberVariables": {"serialVersionUID=1L": "long", "isSystemDerived": "String", "isActive": "String", "predecessorId": "BigDecimal", "srcFileName": "String", "successorId": "BigDecimal", "feedId": "BigDecimal", "checksum": "String", "transmissionDatasetId": "String", "comments": "String", "inactivationReasonType": "String", "isFormatValid": "String", "dataUnitId": "long", "receiptDate": "Timestamp", "srcUniqueFileName": "String", "createdDate": "Timestamp", "dataSetId": "Long", "fileSize": "BigDecimal", "destFileName": "String", "loadedInCats": "String", "checksumType": "String", "modifiedDate": "Timestamp", "runId": "BigDecimal", "isPrepopulated": "String", "isBulk": "String", "isUpdate": "String", "receiptDateType": "String", "status": "String"}, "code": ["String", "function", "(", ")", "{", "return", "this", ".", "isActive", ";", "}"], "memberFunctions": {"setIsSystemDerived": [["void", "String isSystemDerived"]], "setIsPrepopulated": [["void", "String isPrepopulated"]], "getStatus": [["String"]], "getIsUpdate": [["String"]], "getDataUnitId": [["long"]], "getFileSize": [["BigDecimal"]], "setInactivationReasonType": [["void", "String inactivationReasonType"]], "setDataUnitId": [["void", "long dataUnitId"]], "getComments": [["String"]], "getCreatedDate": [["Timestamp"]], "setFileSize": [["void", "BigDecimal fileSize"]], "getPredecessorId": [["BigDecimal"]], "setIsUpdate": [["void", "String isUpdate"]], "getReceiptDateType": [["String"]], "getFeedId": [["BigDecimal"]], "setReceiptDate": [["void", "Timestamp receiptDate"]], "getModifiedDate": [["Timestamp"]], "setSuccessorId": [["void", "BigDecimal successorId"]], "setDestFileName": [["void", "String destFileName"]], "setIsBulk": [["void", "String isBulk"]], "getIsFormatValid": [["String"]], "setDataSetId": [["void", "Long dataSetId"]], "setIsActive": [["void", "String isActive"]], "setChecksumType": [["void", "String checksumType"]], "setFeedId": [["void", "BigDecimal feedId"]], "getInactivationReasonType": [["String"]], "getSrcUniqueFileName": [["String"]], "getDataSetId": [["Long"]], "setReceiptDateType": [["void", "String receiptDateType"]], "getRunId": [["BigDecimal"]], "setSrcFileName": [["void", "String srcFileName"]], "getChecksumType": [["String"]], "getSrcFileName": [["String"]], "getChecksum": [["String"]], "getDestFileName": [["String"]], "getReceiptDate": [["Timestamp"]], "setTransmissionDatasetId": [["void", "String transmissionDatasetId"]], "getTransmissionDatasetId": [["String"]], "setComments": [["void", "String comments"]], "getLoadedInCats": [["String"]], "getSuccessorId": [["BigDecimal"]], "setLoadedInCats": [["void", "String loadedInCats"]], "getIsPrepopulated": [["String"]], "setSrcUniqueFileName": [["void", "String srcUniqueFileName"]], "setChecksum": [["void", "String checksum"]], "setIsFormatValid": [["void", "String isFormatValid"]], "getIsBulk": [["String"]], "setRunId": [["void", "BigDecimal runId"]], "setStatus": [["void", "String status"]], "setModifiedDate": [["void", "Timestamp modifiedDate"]], "setCreatedDate": [["void", "Timestamp createdDate"]], "setPredecessorId": [["void", "BigDecimal predecessorId"]], "getIsSystemDerived": [["String"]]}, "className": "PCLDataUnitEntity", "renamed": ["String", "function", "(", ")", "{", "return", "this", ".", "isActive", ";", "}"], "nl": "Gets the checks if is active.", "nlToks": ["Gets", "the", "checks", "if", "is", "active", "."], "path": "pkesireddy/portico_fletcher/tree/master/FetcherTesterService/src/main/java/org/ithaka/cm/fetchertester/entity/PCLDataUnitEntity.java", "idx": 60}
{"memberVariables": {}, "code": ["DataServer", "function", "(", "final", "InetSocketAddress", "dataAddress", ",", "final", "AlluxioWorkerService", "worker", ")", "{", "try", "{", "return", "CommonUtils", ".", "createNewClassInstance", "(", "Configuration", ".", "<", "DataServer", ">", "getClass", "(", "PropertyKey", ".", "WORKER_DATA_SERVER_CLASS", ")", ",", "new", "Class", "[", "]", "{", "InetSocketAddress", ".", "class", ",", "AlluxioWorkerService", ".", "class", "}", ",", "new", "Object", "[", "]", "{", "dataAddress", ",", "worker", "}", ")", ";", "}", "catch", "(", "Exception", "e", ")", "{", "throw", "Throwables", ".", "propagate", "(", "e", ")", ";", "}", "}"], "memberFunctions": {"getPort": [["int"]], "isClosed": [["boolean"]], "getBindHost": [["String"]]}, "className": "DataServer", "renamed": ["DataServer", "function", "(", "final", "InetSocketAddress", "arg0", ",", "final", "AlluxioWorkerService", "arg1", ")", "{", "try", "{", "return", "CommonUtils", ".", "createNewClassInstance", "(", "Configuration", ".", "<", "DataServer", ">", "getClass", "(", "PropertyKey", ".", "WORKER_DATA_SERVER_CLASS", ")", ",", "new", "Class", "[", "]", "{", "InetSocketAddress", ".", "class", ",", "AlluxioWorkerService", ".", "class", "}", ",", "new", "Object", "[", "]", "{", "arg0", ",", "arg1", "}", ")", ";", "}", "catch", "(", "Exception", "loc0", ")", "{", "throw", "Throwables", ".", "propagate", "(", "loc0", ")", ";", "}", "}"], "nl": "Factory for  {@link DataServer}.", "nlToks": ["Factory", "for", "-LCB-", "@link", "DataServer", "-RCB-", "."], "path": "poemlin/alluxio/tree/master/core/server/src/main/java/alluxio/worker/DataServer.java", "idx": 61}
{"memberVariables": {"keys": "List<ECKey>", "redeemScript": "Script"}, "code": ["ECKey", "function", "(", ")", "{", "for", "(", "ECKey", "key", ":", "keys", ")", "{", "try", "{", "if", "(", "key", ".", "getPrivKey", "(", ")", "!=", "null", ")", "return", "key", ";", "}", "catch", "(", "IllegalStateException", "e", ")", "{", "}", "catch", "(", "ECKey", ".", "MissingPrivateKeyException", "e", ")", "{", "}", "}", "return", "null", ";", "}"], "memberFunctions": {"of": [["RedeemData", "List<ECKey> keys", "Script redeemScript"], ["RedeemData", "ECKey key", "Script program"]]}, "className": "RedeemData", "renamed": ["ECKey", "function", "(", ")", "{", "for", "(", "ECKey", "loc0", ":", "keys", ")", "{", "try", "{", "if", "(", "loc0", ".", "getPrivKey", "(", ")", "!=", "null", ")", "return", "loc0", ";", "}", "catch", "(", "IllegalStateException", "loc1", ")", "{", "}", "catch", "(", "ECKey", ".", "MissingPrivateKeyException", "loc1", ")", "{", "}", "}", "return", "null", ";", "}"], "nl": "Returns the first key that has private bytes", "nlToks": ["Returns", "the", "first", "key", "that", "has", "private", "bytes"], "path": "1000000000001/bitcoinj/tree/master/core/src/main/java/org/bitcoinj/wallet/RedeemData.java", "idx": 62}
{"memberVariables": {"CONF_LOGGING_INTERVAL=CONF_PREFIX + \"logging.interval\"": "String", "JVM_INSTRUMENTATION_GROUP=\"jvm\"": "String", "log=XLog.getLog(\"oozieinstrumentation\")": "XLog", "instrumentation": "Instrumentation", "CONF_PREFIX=Service.CONF_PREFIX + \"InstrumentationService.\"": "String"}, "code": ["void", "function", "(", ")", "{", "instrumentation", "=", "null", ";", "}"], "memberFunctions": {"init": [["void", "Services services"]], "getInterface": [["Class<? extends Service>"]], "get": [["Instrumentation"]], "mapToString": [["String", "Map<String,String> map"]]}, "className": "InstrumentationService", "renamed": ["void", "function", "(", ")", "{", "instrumentation", "=", "null", ";", "}"], "nl": "Destroy the instrumentation service.", "nlToks": ["Destroy", "the", "instrumentation", "service", "."], "path": "pingpangkuangmo/oozie/tree/master/core/src/main/java/org/apache/oozie/service/InstrumentationService.java", "idx": 64}
{"memberVariables": {"acceptedC14nAlgorithms=new ArrayList<>()": "List<String>", "signatureAlgorithm=\"http://www.w3.org/2001/04/xmldsig-more#rsa-sha256\"": "String", "maximumKeySize=512": "long", "keySize=256": "long", "acceptedSignatureAlgorithms=new ArrayList<>()": "List<String>", "c14nAlgorithm=WSConstants.C14N_EXCL_OMIT_COMMENTS": "String", "digestAlgorithm=WSConstants.SHA256": "String", "minimumKeySize=128": "long", "useKeyValue": "boolean"}, "code": ["void", "function", "(", "long", "maximumKeySize", ")", "{", "this", ".", "maximumKeySize", "=", "maximumKeySize", ";", "}"], "memberFunctions": {"getC14nAlgorithm": [["String"]], "isUseKeyValue": [["boolean"]], "getAcceptedC14nAlgorithms": [["List<String>"]], "setUseKeyValue": [["void", "boolean useKeyValue"]], "getMinimumKeySize": [["long"]], "setAcceptedC14nAlgorithms": [["void", "List<String> acceptedC14nAlgorithms"]], "setC14nAlgorithm": [["void", "String c14nAlgorithm"]], "setDigestAlgorithm": [["void", "String digestAlgorithm"]], "setMinimumKeySize": [["void", "long minimumKeySize"]], "setAcceptedSignatureAlgorithms": [["void", "List<String> acceptedSignatureAlgorithms"]], "getDigestAlgorithm": [["String"]], "getAcceptedSignatureAlgorithms": [["List<String>"]], "getSignatureAlgorithm": [["String"]], "setSignatureAlgorithm": [["void", "String signatureAlgorithm"]], "getKeySize": [["long"]], "setKeySize": [["void", "long keySize"]], "getMaximumKeySize": [["long"]]}, "className": "SignatureProperties", "renamed": ["void", "function", "(", "long", "arg0", ")", "{", "this", ".", "maximumKeySize", "=", "arg0", ";", "}"], "nl": "Set the maximum key size to use when generating a symmetric key to sign an issued token. The requestor can specify a KeySize value to use. The default is 512 bits.", "nlToks": ["Set", "the", "maximum", "key", "size", "to", "use", "when", "generating", "a", "symmetric", "key", "to", "sign", "an", "issued", "token", ".", "The", "requestor", "can", "specify", "a", "KeySize", "value", "to", "use", ".", "The", "default", "is", "512", "bits", "."], "path": "primesign/cxf/tree/master/services/sts/sts-core/src/main/java/org/apache/cxf/sts/SignatureProperties.java", "idx": 66}
{"memberVariables": {"s": "Scan", "joinfield": "String", "idx": "Index", "ts": "TableScan"}, "code": ["Constant", "function", "(", "String", "fldname", ")", "{", "if", "(", "ts", ".", "hasField", "(", "fldname", ")", ")", "return", "ts", ".", "getVal", "(", "fldname", ")", ";", "else", "return", "s", ".", "getVal", "(", "fldname", ")", ";", "}"], "memberFunctions": {"next": [["boolean"]], "getInt": [["int", "String fldname"]], "resetIndex": [["void"]], "beforeFirst": [["void"]], "getString": [["String", "String fldname"]], "close": [["void"]], "hasField": [["boolean", "String fldname"]]}, "className": "IndexJoinScan", "renamed": ["Constant", "function", "(", "String", "arg0", ")", "{", "if", "(", "ts", ".", "hasField", "(", "arg0", ")", ")", "return", "ts", ".", "getVal", "(", "arg0", ")", ";", "else", "return", "s", ".", "getVal", "(", "arg0", ")", ";", "}"], "nl": "Returns the Constant value of the specified field.", "nlToks": ["Returns", "the", "Constant", "value", "of", "the", "specified", "field", "."], "path": "prerit2803/DBMSProject2/tree/master/simpledb/index/query/IndexJoinScan.java", "idx": 68}
{"memberVariables": {"INTERVAL=TARGET_TIMESPAN / TARGET_SPACING": "int", "ID_UNITTESTNET=\"org.bitcoinj.unittest\"": "String", "MAX_COINS=21000000": "long", "p2shHeader": "int", "PROTOCOL_VERSION=70001": "int", "maxTarget": "BigInteger", "TARGET_SPACING=10 * 60": "int", "dnsSeeds": "String[]", "id": "String", "spendableCoinbaseDepth": "int", "dumpedPrivateKeyHeader": "int", "targetTimespan": "int", "TARGET_TIMESPAN=14 * 24 * 60* 60": "int", "PAYMENT_PROTOCOL_ID_MAINNET=\"main\"": "String", "addressHeader": "int", "MAX_MONEY=COIN.multiply(MAX_COINS)": "Coin", "bip32HeaderPriv": "int", "alertSigningKey": "byte[]", "acceptableAddressCodes": "int[]", "bip32HeaderPub": "int", "ID_MAINNET=\"org.bitcoin.production\"": "String", "packetMagic": "long", "SATOSHI_KEY=Utils.HEX.decode(\"04fc9702847840aaf195de8442ebecedf5b095cdbb9bc716bda9110971b28a49e0ead8564ff0db22209e0374782c093bb899692d524e9d6a6956e7c5ecbcd68284\")": "byte[]", "genesisBlock": "Block", "PAYMENT_PROTOCOL_ID_TESTNET=\"test\"": "String", "subsidyDecreaseBlockCount": "int", "port": "int", "ID_TESTNET=\"org.bitcoin.test\"": "String", "checkpoints=new HashMap<Integer,Sha256Hash>()": "Map<Integer,Sha256Hash>", "interval": "int", "ID_REGTEST=\"org.bitcoin.regtest\"": "String", "BIP16_ENFORCE_TIME=1333238400": "int"}, "code": ["int", "function", "(", ")", "{", "return", "bip32HeaderPub", ";", "}"], "memberFunctions": {"regTests": [["NetworkParameters"]], "allowEmptyPeerChain": [["boolean"]], "getDumpedPrivateKeyHeader": [["int"]], "testNet2": [["NetworkParameters"]], "getBip32HeaderPriv": [["int"]], "testNet3": [["NetworkParameters"]], "unitTests": [["NetworkParameters"]], "getId": [["String"]], "getPaymentProtocolId": [["String"]], "getAddressHeader": [["int"]], "getAcceptableAddressCodes": [["int[]"]], "prodNet": [["NetworkParameters"]], "fromID": [["NetworkParameters", "String id"]], "getTargetTimespan": [["int"]], "getDnsSeeds": [["String[]"]], "hashCode": [["int"]], "getSpendableCoinbaseDepth": [["int"]], "testNet": [["NetworkParameters"]], "isCheckpoint": [["boolean", "int height"]], "getP2SHHeader": [["int"]], "getInterval": [["int"]], "getGenesisBlock": [["Block"]], "getSubsidyDecreaseBlockCount": [["int"]], "createGenesis": [["Block", "NetworkParameters n"]], "getMaxTarget": [["BigInteger"]], "getPacketMagic": [["long"]], "getPort": [["int"]], "getAlertSigningKey": [["byte[]"]], "equals": [["boolean", "Object o"]], "passesCheckpoint": [["boolean", "int height", "Sha256Hash hash"]], "fromPmtProtocolID": [["NetworkParameters", "String pmtProtocolId"]]}, "className": "NetworkParameters", "renamed": ["int", "function", "(", ")", "{", "return", "bip32HeaderPub", ";", "}"], "nl": "Returns the 4 byte header for BIP32 (HD) wallet - public key part.", "nlToks": ["Returns", "the", "4", "byte", "header", "for", "BIP32", "-LRB-", "HD", "-RRB-", "wallet", "-", "public", "key", "part", "."], "path": "1000000000001/bitcoinj/tree/master/core/src/main/java/org/bitcoinj/core/NetworkParameters.java", "idx": 69}
{"memberVariables": {"MICROCOIN=MILLICOIN.divide(1000)": "Coin", "SMALLEST_UNIT_EXPONENT=8": "int", "COIN_VALUE=LongMath.pow(10,SMALLEST_UNIT_EXPONENT)": "long", "SATOSHI=Coin.valueOf(1)": "Coin", "FRIENDLY_FORMAT=MonetaryFormat.BTC.minDecimals(2).repeatOptionalDecimals(1,6).postfixCode()": "MonetaryFormat", "COIN=Coin.valueOf(COIN_VALUE)": "Coin", "CENT=COIN.divide(100)": "Coin", "FIFTY_COINS=COIN.multiply(50)": "Coin", "NEGATIVE_SATOSHI=Coin.valueOf(-1)": "Coin", "MILLICOIN=COIN.divide(1000)": "Coin", "MAX_SATOSHIS=COIN_VALUE * NetworkParameters.MAX_COINS": "long", "ZERO=Coin.valueOf(0)": "Coin", "value": "long", "PLAIN_FORMAT=MonetaryFormat.BTC.minDecimals(0).repeatOptionalDecimals(1,8).noCode()": "MonetaryFormat"}, "code": ["long", "function", "(", ")", "{", "return", "value", ";", "}"], "memberFunctions": {"add": [["Coin", "final Coin value"]], "signum": [["int"]], "isNegative": [["boolean"]], "isLessThan": [["boolean", "Coin other"]], "valueOf": [["Coin", "final long satoshis"], ["Coin", "final int coins", "final int cents"]], "subtract": [["Coin", "final Coin value"]], "isGreaterThan": [["boolean", "Coin other"]], "isPositive": [["boolean"]], "toPlainString": [["String"]], "smallestUnitExponent": [["int"]], "compareTo": [["int", "final Coin other"]], "longValue": [["long"]], "parseCoin": [["Coin", "final String str"]], "toFriendlyString": [["String"]], "shiftLeft": [["Coin", "final int n"]], "shiftRight": [["Coin", "final int n"]], "divideAndRemainder": [["Coin[]", "final long divisor"]], "hashCode": [["int"]], "negate": [["Coin"]], "equals": [["boolean", "final Object o"]], "isZero": [["boolean"]], "divide": [["Coin", "final long divisor"], ["long", "final Coin divisor"]], "toString": [["String"]], "multiply": [["Coin", "final long factor"]]}, "className": "Coin", "renamed": ["long", "function", "(", ")", "{", "return", "value", ";", "}"], "nl": "Returns the number of satoshis of this monetary value.", "nlToks": ["Returns", "the", "number", "of", "satoshis", "of", "this", "monetary", "value", "."], "path": "1000000000001/bitcoinj/tree/master/core/src/main/java/org/bitcoinj/core/Coin.java", "idx": 70}
{"memberVariables": {"mMenuItem": "android.view.MenuItem"}, "code": ["MenuItem", "function", "(", "int", "resId", ")", "{", "if", "(", "mMenuItem", "!=", "null", ")", "{", "HoneycombMenuItem", ".", "setActionView", "(", "mMenuItem", ",", "resId", ")", ";", "}", "return", "this", ";", "}"], "memberFunctions": {"hasSubMenu": [["boolean"]], "getTitleCondensed": [["CharSequence"]], "getGroupId": [["int"]], "getItemId": [["int"]], "getActionView": [["View", "android.view.MenuItem item"], ["View"]], "getTitle": [["CharSequence"]], "setChecked": [["MenuItem", "boolean checked"]], "getAlphabeticShortcut": [["char"]], "setOnMenuItemClickListener": [["MenuItem", "android.view.MenuItem.OnMenuItemClickListener menuItemClickListener"], ["MenuItem", "OnMenuItemClickListener menuItemClickListener"]], "getIntent": [["Intent"]], "isCheckable": [["boolean"]], "setShortcut": [["MenuItem", "char numericChar", "char alphaChar"]], "setVisible": [["MenuItem", "boolean visible"]], "setShowAsAction": [["void", "android.view.MenuItem item", "int actionEnum"], ["void", "int actionEnum"]], "getSubMenu": [["SubMenu"]], "setIntent": [["MenuItem", "Intent intent"]], "setCheckable": [["MenuItem", "boolean checkable"]], "setAlphabeticShortcut": [["MenuItem", "char alphaChar"]], "setTitle": [["MenuItem", "CharSequence title"], ["MenuItem", "int title"]], "setNumericShortcut": [["MenuItem", "char numericChar"]], "isVisible": [["boolean"]], "isChecked": [["boolean"]], "setTitleCondensed": [["MenuItem", "CharSequence title"]], "getIcon": [["Drawable"]], "setIcon": [["MenuItem", "Drawable icon"], ["MenuItem", "int iconRes"]], "setEnabled": [["MenuItem", "boolean enabled"]], "getOrder": [["int"]], "isEnabled": [["boolean"]], "getNumericShortcut": [["char"]], "getMenuInfo": [["ContextMenuInfo"]]}, "className": "MenuItemWrapper", "renamed": ["MenuItem", "function", "(", "int", "arg0", ")", "{", "if", "(", "mMenuItem", "!=", "null", ")", "{", "HoneycombMenuItem", ".", "setActionView", "(", "mMenuItem", ",", "arg0", ")", ";", "}", "return", "this", ";", "}"], "nl": "Set an action view for this menu item. An action view will be displayed in place of an automatically generated menu item element in the UI when this item is shown as an action within a parent.", "nlToks": ["Set", "an", "action", "view", "for", "this", "menu", "item", ".", "An", "action", "view", "will", "be", "displayed", "in", "place", "of", "an", "automatically", "generated", "menu", "item", "element", "in", "the", "UI", "when", "this", "item", "is", "shown", "as", "an", "action", "within", "a", "parent", "."], "path": "prateeka/AndroidDev/tree/master/SherlockActionBar/src/com/actionbarsherlock/internal/view/menu/MenuItemWrapper.java", "idx": 71}
{"memberVariables": {"mockServerMessage=mock(ServerMessage.class)": "ServerMessage", "mockServerSession=mock(ServerSession.class)": "ServerSession", "testEventProperties": "HashMap<String,Object>", "MOCK_SESSION_ID=\"1234-5678-9012-3456\"": "String", "notificationController": "NotificationController"}, "code": ["void", "function", "(", ")", "{", "notificationController", ".", "deletePersistentNotification", "(", "null", ",", "mockServerMessage", ")", ";", "}"], "memberFunctions": {"testHandleEventThrowsIllegalArgumentExceptionOnEmptyUser": [["void"]], "testHandleEventThrowsIllegalArgumentExceptionOnEmptyApplication": [["void"]], "testDeregisterUserSessionWithNullServerSessonThrowsException": [["void"]], "testDeregisterUserSessionWithNullServerSessionIdThrowsException": [["void"]], "testHandleEventThrowsIllegalArgumentExceptionOnNullTitle": [["void"]], "testGetServerSessionByUserId": [["void"]], "tearDown": [["void"]], "testHandleEventThrowsIllegalArgumentExceptionOnEmptyTitle": [["void"]], "testDeregisterUserSessionRemovesUserFromKnownClients": [["void"]], "testHandleEventThrowsIllegalArgumentExceptionOnEmptyMessage": [["void"]], "testHandleEventThrowsIllegalArgumentExceptionOnNullApplication": [["void"]], "testDeletePersistentNotificationThrowsIllegalArgumentOnNullUserId": [["void"]], "testRegisterUserSessionWithNullServerSessionThrowsException": [["void"]], "testHandleEventThrowsIllegalArgumentExceptionOnNullUser": [["void"]], "testRegisterUserSession": [["void"]], "setUp": [["void"]], "testHandleEventThrowsIllegalArgumentExceptionOnNullTimestamp": [["void"]], "testRegisterUserSessionWithNullServerSessionIdThrowsException": [["void"]], "testHandleEventThrowsIllegalArgumentExceptionOnNullMessage": [["void"]]}, "className": "NotificationControllerTest", "renamed": ["void", "function", "(", ")", "{", "notificationController", ".", "deletePersistentNotification", "(", "null", ",", "mockServerMessage", ")", ";", "}"], "nl": "Test method for deletePersistentNotification(ServerSession serverSession, ServerMessage serverMessage) Verifies that  {@code IllegalArgumentException} is thrown when serverSession is null.", "nlToks": ["Test", "method", "for", "deletePersistentNotification", "-LRB-", "ServerSession", "serverSession", ",", "ServerMessage", "serverMessage", "-RRB-", "Verifies", "that", "-LCB-", "@code", "IllegalArgumentException", "-RCB-", "is", "thrown", "when", "serverSession", "is", "null", "."], "path": "pklinef/ddf-ui/tree/master/search-ui/search-endpoint/src/test/java/org/codice/ddf/ui/searchui/query/controller/NotificationControllerTest.java", "idx": 73}
{"memberVariables": {"offsetHours=0": "int", "offsetMinutes=0": "int", "seconds=0.0": "double", "minutes=0": "int", "hour=0": "int", "TIME_PATTERN=\"%02d:%02d:%02d%+03d:%02d\"": "String"}, "code": ["void", "function", "(", "double", "seconds", ")", "{", "if", "(", "seconds", "<", "0", "||", "seconds", ">=", "60", ")", "{", "throw", "new", "IllegalArgumentException", "(", "\"Invalid value for second (0 < seconds < 60)\"", ")", ";", "}", "this", ".", "seconds", "=", "seconds", ";", "}"], "memberFunctions": {"getOffsetHours": [["int"]], "toDate": [["Date", "Date d"]], "toISO8601": [["String"]], "setMinutes": [["void", "int minutes"]], "setHour": [["void", "int hour"]], "getMilliseconds": [["long"]], "setOffsetMinutes": [["void", "int minutes"]], "getMinutes": [["int"]], "getSeconds": [["double"]], "hashCode": [["int"]], "equals": [["boolean", "final Object obj"]], "getOffsetMinutes": [["int"]], "getHour": [["int"]], "toString": [["String"]], "setOffsetHours": [["void", "int hours"]], "setTime": [["void", "Date d"]]}, "className": "Time", "renamed": ["void", "function", "(", "double", "arg0", ")", "{", "if", "(", "arg0", "<", "0", "||", "arg0", ">=", "60", ")", "{", "throw", "new", "IllegalArgumentException", "(", "\"srini_string\"", ")", ";", "}", "this", ".", "seconds", "=", "arg0", ";", "}"], "nl": "Set seconds of minute.", "nlToks": ["Set", "seconds", "of", "minute", "."], "path": "pkoziol/marine-api/tree/master/src/main/java/net/sf/marineapi/nmea/util/Time.java", "idx": 75}
{"memberVariables": {"data": "byte[]", "offset=0": "int", "length": "int", "serviceID": "ServiceID", "capacity": "int", "address=null": "InetAddress"}, "code": ["void", "function", "(", "ServiceID", "aServiceID", ")", "{", "serviceID", "=", "aServiceID", ";", "}"], "memberFunctions": {"getServiceID": [["ServiceID"]], "setLengthOnly": [["void", "int len"]], "setLength": [["void", "int len"]], "setAddress": [["void", "InetAddress addr"]], "setData": [["void", "byte[] buf", "int anOffset", "int aLength"], ["void", "byte[] buf"]], "getSocketAddress": [["SocketAddress"]], "getOffset": [["int"]], "getLength": [["int"]], "getAddress": [["InetAddress"]], "setSocketAddress": [["void", "SocketAddress sockAddr"]], "getData": [["byte[]"]], "getCapacity": [["int"]]}, "className": "ServalDatagramPacket", "renamed": ["void", "function", "(", "ServiceID", "arg0", ")", "{", "serviceID", "=", "arg0", ";", "}"], "nl": "Sets the  {@code ServiceID} for this datagram packet.", "nlToks": ["Sets", "the", "-LCB-", "@code", "ServiceID", "-RCB-", "for", "this", "datagram", "packet", "."], "path": "princeton-sns/serval/tree/master/src/javasock/java/org/servalarch/net/ServalDatagramPacket.java", "idx": 77}
{"memberVariables": {"log=LoggerFactory.getLogger(SPVBlockStore.class)": "Logger", "lock=Threading.lock(\"SPVBlockStore\")": "ReentrantLock", "lastChainHead=null": "StoredBlock", "params": "NetworkParameters", "HEADER_MAGIC=\"SPVB\"": "String", "RECORD_SIZE=32 + StoredBlock.COMPACT_SERIALIZED_SIZE": "int", "FILE_PROLOGUE_BYTES=1024": "int", "notFoundCache=new LinkedHashMap<Sha256Hash,Object>(){\n  @Override protected boolean removeEldestEntry(  Map.Entry<Sha256Hash,Object> entry){\n    return size() > 100;\n  }\n}\n": "LinkedHashMap<Sha256Hash,Object>", "DEFAULT_NUM_HEADERS=5000": "int", "numHeaders": "int", "notFoundMarker=new Object()": "Object", "fileLock=null": "FileLock", "randomAccessFile=null": "RandomAccessFile", "buffer": "MappedByteBuffer", "blockCache=new LinkedHashMap<Sha256Hash,StoredBlock>(){\n  @Override protected boolean removeEldestEntry(  Map.Entry<Sha256Hash,StoredBlock> entry){\n    return size() > 2050;\n  }\n}\n": "LinkedHashMap<Sha256Hash,StoredBlock>"}, "code": ["int", "function", "(", ")", "{", "return", "RECORD_SIZE", "*", "numHeaders", "+", "FILE_PROLOGUE_BYTES", ";", "}"], "memberFunctions": {"removeEldestEntry": [["boolean", "Map.Entry<Sha256Hash,StoredBlock> entry"], ["boolean", "Map.Entry<Sha256Hash,Object> entry"]], "setRingCursor": [["void", "ByteBuffer buffer", "int newCursor"]], "getChainHead": [["StoredBlock"]], "setChainHead": [["void", "StoredBlock chainHead"]], "get": [["StoredBlock", "Sha256Hash hash"]], "getRingCursor": [["int", "ByteBuffer buffer"]], "initNewStore": [["void", "NetworkParameters params"]], "close": [["void"]], "put": [["void", "StoredBlock block"]]}, "className": "SPVBlockStore", "renamed": ["int", "function", "(", ")", "{", "return", "RECORD_SIZE", "*", "numHeaders", "+", "FILE_PROLOGUE_BYTES", ";", "}"], "nl": "Returns the size in bytes of the file that is used to store the chain with the current parameters.", "nlToks": ["Returns", "the", "size", "in", "bytes", "of", "the", "file", "that", "is", "used", "to", "store", "the", "chain", "with", "the", "current", "parameters", "."], "path": "plncoin/plncoin-and/tree/master/plncoinj/core/src/main/java/com/google/bitcoin/store/SPVBlockStore.java", "idx": 78}
{"memberVariables": {"mParents": "List<DirectedAcyclicGraphNode<T>>", "mChildren": "List<DirectedAcyclicGraphNode<T>>", "mPayload": "T"}, "code": ["T", "function", "(", ")", "{", "return", "mPayload", ";", "}"], "memberFunctions": {"getParents": [["List<DirectedAcyclicGraphNode<T>>"]], "getChildren": [["List<DirectedAcyclicGraphNode<T>>"]], "removeChild": [["void", "DirectedAcyclicGraphNode<T> child"]], "addParent": [["void", "DirectedAcyclicGraphNode<T> parent"]], "addChild": [["void", "DirectedAcyclicGraphNode<T> child"]]}, "className": "DirectedAcyclicGraphNode", "renamed": ["T", "function", "(", ")", "{", "return", "mPayload", ";", "}"], "nl": "Gets the payload of the node.", "nlToks": ["Gets", "the", "payload", "of", "the", "node", "."], "path": "poemlin/alluxio/tree/master/core/common/src/main/java/alluxio/collections/DirectedAcyclicGraphNode.java", "idx": 79}
{"memberVariables": {"ext": "String", "addedDate": "Date", "rating": "int", "previousPlayCounter": "int", "ratingModifDate": "Date", "lastPlayed": "Date", "relativeFullPath": "String", "updateRatingModifDate=false": "boolean", "idPath": "int", "filename": "String", "deleted": "boolean", "BPM=0": "float", "relativePath": "String", "idFile": "int", "sourceName": "String", "playCounter": "int"}, "code": ["String", "function", "(", ")", "{", "return", "DateTime", ".", "formatUTCtoSqlUTC", "(", "this", ".", "addedDate", ")", ";", "}"], "memberFunctions": {"getFormattedRatingModifDate": [["String"]], "setIdPath": [["void", "int idPath"]], "setAddedDate": [["void", "Date addedDate"]], "getSourceName": [["String"]], "equalsStats": [["boolean", "FileInfo thatFileInfo"]], "getIdFile": [["int"]], "compareTo": [["int", "Object o"]], "setFilename": [["void", "String filename"]], "setRelativePath": [["void", "String relativePath"]], "getPreviousPlayCounter": [["int"]], "isDeleted": [["boolean"]], "hashCode": [["int"]], "setPlayCounter": [["void", "int playCounter"]], "getLastPlayedLocalTime": [["String"]], "setBPM": [["void", "float BPM"]], "getRelativeFullPath": [["String"]], "getAddedDateLocalTime": [["String"]], "getBPM": [["float"]], "setIdFile": [["void", "int idFile"]], "getAddedDate": [["Date"]], "getExt": [["String"]], "getRatingModifDate": [["Date"]], "setLastPlayed": [["void", "Date lastPlayed"]], "setRelativeFullPath": [["void", "String relativeFullPath"]], "setPath": [["void", "String relativeFullPath"]], "setSourceName": [["void", "String sourceName"]], "getFilename": [["String"]], "getFormattedLastPlayed": [["String"]], "getLastPlayed": [["Date"]], "equals": [["boolean", "Object obj"]], "clone": [["Object"]], "toString": [["String"]], "setUpdateRatingModifDate": [["void", "boolean updateRatingModifDate"]], "getIdPath": [["int"]], "getRelativePath": [["String"]], "setRating": [["void", "int rating"]], "getPlayCounter": [["int"]], "getRating": [["int"]]}, "className": "FileInfo", "renamed": ["String", "function", "(", ")", "{", "return", "DateTime", ".", "formatUTCtoSqlUTC", "(", "this", ".", "addedDate", ")", ";", "}"], "nl": "Returns added date in \"yyyy-MM-dd HH:mm:ss\" format", "nlToks": ["Returns", "added", "date", "in", "``", "yyyy-MM-dd", "HH", ":", "mm", ":", "ss", "''", "format"], "path": "phramusca/JaMuz/tree/master/src/jamuz/FileInfo.java", "idx": 81}
{"memberVariables": {"mParents": "List<DirectedAcyclicGraphNode<T>>", "mChildren": "List<DirectedAcyclicGraphNode<T>>", "mPayload": "T"}, "code": ["List", "<", "DirectedAcyclicGraphNode", "<", "T", ">>", "function", "(", ")", "{", "return", "mChildren", ";", "}"], "memberFunctions": {"getParents": [["List<DirectedAcyclicGraphNode<T>>"]], "getPayload": [["T"]], "removeChild": [["void", "DirectedAcyclicGraphNode<T> child"]], "addParent": [["void", "DirectedAcyclicGraphNode<T> parent"]], "addChild": [["void", "DirectedAcyclicGraphNode<T> child"]]}, "className": "DirectedAcyclicGraphNode", "renamed": ["List", "<", "DirectedAcyclicGraphNode", "<", "T", ">>", "function", "(", ")", "{", "return", "mChildren", ";", "}"], "nl": "Gets the children nodes of the node.", "nlToks": ["Gets", "the", "children", "nodes", "of", "the", "node", "."], "path": "poemlin/alluxio/tree/master/core/common/src/main/java/alluxio/collections/DirectedAcyclicGraphNode.java", "idx": 82}
{"memberVariables": {"mOrientationProvider": "OrientationProvider", "mAdapter": "StickyRecyclerHeadersAdapter", "mDimensionCalculator": "DimensionCalculator", "mHeaderProvider": "HeaderProvider"}, "code": ["View", "function", "(", "RecyclerView", "parent", ",", "View", "firstHeader", ")", "{", "for", "(", "int", "i", "=", "0", ";", "i", "<", "parent", ".", "getChildCount", "(", ")", ";", "i", "++", ")", "{", "View", "child", "=", "parent", ".", "getChildAt", "(", "i", ")", ";", "if", "(", "!", "itemIsObscuredByHeader", "(", "parent", ",", "child", ",", "firstHeader", ",", "mOrientationProvider", ".", "getOrientation", "(", "parent", ")", ")", ")", "{", "return", "child", ";", "}", "}", "return", "null", ";", "}"], "memberFunctions": {"getListLeft": [["int", "RecyclerView view"]], "hasNewHeader": [["boolean", "int position"]], "getListTop": [["int", "RecyclerView view"]], "translateHeaderWithNextHeader": [["void", "RecyclerView recyclerView", "int orientation", "Rect translation", "View currentHeader", "View viewAfterNextHeader", "View nextHeader"]], "getDefaultHeaderOffset": [["Rect", "RecyclerView recyclerView", "View header", "View firstView", "int orientation"]], "isStickyHeaderBeingPushedOffscreen": [["boolean", "RecyclerView recyclerView", "View stickyHeader"]], "itemIsObscuredByHeader": [["boolean", "RecyclerView parent", "View item", "View header", "int orientation"]], "indexOutOfBounds": [["boolean", "int position"]], "getHeaderBounds": [["Rect", "RecyclerView recyclerView", "View header", "View firstView", "boolean firstHeader"]]}, "className": "HeaderPositionCalculator", "renamed": ["View", "function", "(", "RecyclerView", "arg0", ",", "View", "arg1", ")", "{", "for", "(", "int", "loc0", "=", "0", ";", "loc0", "<", "arg0", ".", "getChildCount", "(", ")", ";", "loc0", "++", ")", "{", "View", "loc1", "=", "arg0", ".", "getChildAt", "(", "loc0", ")", ";", "if", "(", "!", "itemIsObscuredByHeader", "(", "arg0", ",", "loc1", ",", "arg1", ",", "mOrientationProvider", ".", "getOrientation", "(", "arg0", ")", ")", ")", "{", "return", "loc1", ";", "}", "}", "return", "null", ";", "}"], "nl": "Returns the first item currently in the RecyclerView that is not obscured by a header.", "nlToks": ["Returns", "the", "first", "item", "currently", "in", "the", "RecyclerView", "that", "is", "not", "obscured", "by", "a", "header", "."], "path": "prashant31191/UltimateRecyclerView/tree/master/UltimateRecyclerView/ultimaterecyclerview/src/main/java/com/marshalchen/ultimaterecyclerview/stickyheadersrecyclerview/HeaderPositionCalculator.java", "idx": 83}
{"memberVariables": {"lastModifiedTimeStamp": "Date", "feedId": "Long", "createdBy": "String", "fetcherStartTimeStamp": "Date", "createTimeStamp": "Date", "testId": "Long", "runId": "Long", "fetcherEndTimeStamp": "Date", "regTestResultDetailsLst": "List<TestResultDetailsDTO>", "outcome": "OutcomeType", "runStatus": "RunStatusType", "errorMsg": "String"}, "code": ["void", "function", "(", "List", "<", "TestResultDetailsDTO", ">", "regTestResultDetailsLst", ")", "{", "this", ".", "regTestResultDetailsLst", "=", "regTestResultDetailsLst", ";", "}"], "memberFunctions": {"setLastModifiedTimeStamp": [["void", "Date lastModifiedTimeStamp"]], "getFetcherEndTimeStamp": [["Date"]], "setFeedId": [["void", "Long feedId"]], "setFetcherStartTimeStamp": [["void", "Date fetcherStartTimeStamp"]], "getLastModifiedTimeStamp": [["Date"]], "getOutcome": [["OutcomeType"]], "getRunId": [["Long"]], "getRegTestResultDetailsLst": [["List<TestResultDetailsDTO>"]], "getFeedId": [["Long"]], "setTestId": [["void", "Long testId"]], "getTestId": [["Long"]], "getFetcherStartTimeStamp": [["Date"]], "setRunId": [["void", "Long runId"]], "setErrorMsg": [["void", "String errorMsg"]], "setFetcherEndTimeStamp": [["void", "Date fetcherEndTimeStamp"]], "setCreateTimeStamp": [["void", "Date createTimeStamp"]], "setCreatedBy": [["void", "String createdBy"]], "getRunStatus": [["RunStatusType"]], "getCreateTimeStamp": [["Date"]], "setOutcome": [["void", "OutcomeType outcome"]], "toString": [["String"]], "getCreatedBy": [["String"]], "getErrorMsg": [["String"]], "setRunStatus": [["void", "RunStatusType runStatus"]]}, "className": "TestResultDTO", "renamed": ["void", "function", "(", "List", "<", "TestResultDetailsDTO", ">", "arg0", ")", "{", "this", ".", "regTestResultDetailsLst", "=", "arg0", ";", "}"], "nl": "Sets the reg test result details lst.", "nlToks": ["Sets", "the", "reg", "test", "result", "details", "lst", "."], "path": "pkesireddy/portico_fletcher/tree/master/FetcherTesterService/src/main/java/org/ithaka/cm/fetchertester/model/TestResultDTO.java", "idx": 84}
{"memberVariables": {"lastModifiedTimeStamp": "Timestamp", "fetcherStartTimestamp": "Timestamp", "createTimeStamp": "Timestamp", "serialVersionUID=1L": "long", "batchId": "BigDecimal", "errorMsg": "String", "outcomeType": "OutcomeType", "createdBy": "String", "feedId": "BigDecimal", "testId": "long", "runId": "BigDecimal", "fetcherEndTimeStamp": "Timestamp", "regPclTestResultDetails": "List<RegPCLTestResultDetailsEntity>", "runStatus": "RunStatusType"}, "code": ["long", "function", "(", ")", "{", "return", "this", ".", "testId", ";", "}"], "memberFunctions": {"setLastModifiedTimeStamp": [["void", "Timestamp lastModifiedTimeStamp"]], "setFeedId": [["void", "BigDecimal feedId"]], "setFetcherStartTimestamp": [["void", "Timestamp fetcherStartTimestamp"]], "getOutcomeType": [["OutcomeType"]], "updateLastModifiedTimeStamp": [["void"]], "updateCreateTimeStamp": [["void"]], "getRunId": [["BigDecimal"]], "setBatchId": [["void", "BigDecimal batchId"]], "getRegPclTestResultDetails": [["List<RegPCLTestResultDetailsEntity>"]], "setTestId": [["void", "long testId"]], "removeRegPclTestResultDetail": [["RegPCLTestResultDetailsEntity", "RegPCLTestResultDetailsEntity regPclTestResultDetail"]], "setRegPclTestResultDetails": [["void", "List<RegPCLTestResultDetailsEntity> regPclTestResultDetails"]], "setErrorMsg": [["void", "String errorMsg"]], "getRunStatus": [["RunStatusType"]], "addRegPclTestResultDetail": [["RegPCLTestResultDetailsEntity", "RegPCLTestResultDetailsEntity regPclTestResultDetail"]], "getErrorMsg": [["String"]], "setRunStatus": [["void", "RunStatusType runStatus"]], "getFetcherEndTimeStamp": [["Timestamp"]], "getLastModifiedTimeStamp": [["Timestamp"]], "getFeedId": [["BigDecimal"]], "setRunId": [["void", "BigDecimal runId"]], "getFetcherStartTimestamp": [["Timestamp"]], "setFetcherEndTimeStamp": [["void", "Timestamp fetcherEndTimeStamp"]], "setCreateTimeStamp": [["void", "Timestamp createTimeStamp"]], "setCreatedBy": [["void", "String createdBy"]], "getCreateTimeStamp": [["Timestamp"]], "getBatchId": [["BigDecimal"]], "setOutcomeType": [["void", "OutcomeType outcomeType"]], "getCreatedBy": [["String"]]}, "className": "RegPCLTestResultEntity", "renamed": ["long", "function", "(", ")", "{", "return", "this", ".", "testId", ";", "}"], "nl": "Gets the test id.", "nlToks": ["Gets", "the", "test", "id", "."], "path": "pkesireddy/portico_fletcher/tree/master/FetcherTesterService/src/main/java/org/ithaka/cm/fetchertester/entity/RegPCLTestResultEntity.java", "idx": 85}
{"memberVariables": {"time": "Time"}, "code": ["void", "function", "(", ")", "{", "Date", "now", "=", "new", "Date", "(", ")", ";", "time", ".", "setTime", "(", "now", ")", ";", "Date", "result", "=", "time", ".", "toDate", "(", "now", ")", ";", "assertEquals", "(", "now", ",", "result", ")", ";", "assertEquals", "(", "now", ".", "getTime", "(", ")", ",", "result", ".", "getTime", "(", ")", ")", ";", "}"], "memberFunctions": {"testParseTimeWithOneDecimal": [["void"]], "testSetNegativeMinutes": [["void"]], "testFormatTimeWithOneDecimal": [["void"]], "testSetMinutes": [["void"]], "testParseTimeWithoutDecimals": [["void"]], "testGetMinutes": [["void"]], "testParseTimeWithDecimals": [["void"]], "testSetInvalidSeconds": [["void"]], "testSetNegativeHour": [["void"]], "testToDate": [["void"]], "testGetSeconds": [["void"]], "testSetHour": [["void"]], "testGetHour": [["void"]], "testSetSeconds": [["void"]], "testSetTime": [["void"]], "testGetMilliseconds": [["void"]], "testSetInvalidHour": [["void"]], "testSetNegativeSeconds": [["void"]], "setUp": [["void"]], "testSetInvalidMinutes": [["void"]], "testFormatTimeNoDecimals": [["void"]], "testFormatTimeWithDecimals": [["void"]], "testEquals": [["void"]]}, "className": "TimeTest", "renamed": ["void", "function", "(", ")", "{", "Date", "loc0", "=", "new", "Date", "(", ")", ";", "time", ".", "setTime", "(", "loc0", ")", ";", "Date", "loc1", "=", "time", ".", "toDate", "(", "loc0", ")", ";", "assertEquals", "(", "loc0", ",", "loc1", ")", ";", "assertEquals", "(", "loc0", ".", "getTime", "(", ")", ",", "loc1", ".", "getTime", "(", ")", ")", ";", "}"], "nl": "Test method for setTime() and toDate() round-trip.", "nlToks": ["Test", "method", "for", "setTime", "-LRB-", "-RRB-", "and", "toDate", "-LRB-", "-RRB-", "round-trip", "."], "path": "pkoziol/marine-api/tree/master/src/test/java/net/sf/marineapi/nmea/util/TimeTest.java", "idx": 87}
{"memberVariables": {"endDate": "Timestamp", "feedConfigId": "BigDecimal", "resultCode": "String", "serialVersionUID=1L": "long", "resultMessage": "String", "fileCount": "BigDecimal", "maxReceiptDate": "Timestamp", "downloadSize": "BigDecimal", "feedId": "BigDecimal", "configInfo": "String", "runId": "long", "errors": "byte[]", "runStatus": "String", "startDate": "Timestamp"}, "code": ["void", "function", "(", "BigDecimal", "feedConfigId", ")", "{", "this", ".", "feedConfigId", "=", "feedConfigId", ";", "}"], "memberFunctions": {"getFeedConfigId": [["BigDecimal"]], "getStartDate": [["Timestamp"]], "setFeedId": [["void", "BigDecimal feedId"]], "getResultCode": [["String"]], "setMaxReceiptDate": [["void", "Timestamp maxReceiptDate"]], "getRunId": [["long"]], "getEndDate": [["Timestamp"]], "setErrors": [["void", "byte[] errors"]], "getConfigInfo": [["String"]], "setEndDate": [["void", "Timestamp endDate"]], "getErrors": [["byte[]"]], "setFileCount": [["void", "BigDecimal fileCount"]], "getDownloadSize": [["BigDecimal"]], "getResultMessage": [["String"]], "setResultMessage": [["void", "String resultMessage"]], "getFileCount": [["BigDecimal"]], "getRunStatus": [["String"]], "setRunStatus": [["void", "String runStatus"]], "setStartDate": [["void", "Timestamp startDate"]], "getFeedId": [["BigDecimal"]], "setResultCode": [["void", "String resultCode"]], "setRunId": [["void", "long runId"]], "getMaxReceiptDate": [["Timestamp"]], "setConfigInfo": [["void", "String configInfo"]], "setDownloadSize": [["void", "BigDecimal downloadSize"]]}, "className": "PCLFetcherRunRecorderEntity", "renamed": ["void", "function", "(", "BigDecimal", "arg0", ")", "{", "this", ".", "feedConfigId", "=", "arg0", ";", "}"], "nl": "Sets the feed config id.", "nlToks": ["Sets", "the", "feed", "config", "id", "."], "path": "pkesireddy/portico_fletcher/tree/master/FetcherTesterService/src/main/java/org/ithaka/cm/fetchertester/entity/PCLFetcherRunRecorderEntity.java", "idx": 89}
{"memberVariables": {"imageFormat": "String", "writeCompressionQuality": "float", "writeCompressionType": "String", "writeCompressionMode": "int", "DEFAULT_IMAGE_FORMAT=\"png\"": "String"}, "code": ["void", "function", "(", "String", "type", ")", "{", "this", ".", "writeCompressionType", "=", "type", ";", "}"], "memberFunctions": {"setWriteCompressionMode": [["void", "int mode"]], "newJpegWriter": [["FSImageWriter", "float quality"]], "setWriteCompressionQuality": [["void", "float q"]], "write": [["void", "BufferedImage bimg", "String filePath"], ["void", "BufferedImage bimg", "OutputStream os"]], "getImageWriteParameters": [["ImageWriteParam", "ImageWriter writer"]], "lookupImageWriterForFormat": [["ImageWriter", "String imageFormat"]]}, "className": "FSImageWriter", "renamed": ["void", "function", "(", "String", "arg0", ")", "{", "this", ".", "writeCompressionType", "=", "arg0", ";", "}"], "nl": "Compression type for images to be generated from this writer. See {@link javax.imageio.ImageWriteParam#setCompressionType(String)} for a description of what this meansand valid range of values.", "nlToks": ["Compression", "type", "for", "images", "to", "be", "generated", "from", "this", "writer", ".", "See", "-LCB-", "@link", "javax.imageio.ImageWriteParam", "#setCompressionType", "-LRB-", "String", "-RRB-", "-RCB-", "for", "a", "description", "of", "what", "this", "meansand", "valid", "range", "of", "values", "."], "path": "plutogeek/flyingsaucer/tree/master/flying-saucer-core/src/main/java/org/xhtmlrenderer/util/FSImageWriter.java", "idx": 91}
{"memberVariables": {}, "code": ["boolean", "function", "(", "Iterable", "<", "Range", "<", "C", ">>", "other", ")", "{", "for", "(", "Range", "<", "C", ">", "range", ":", "other", ")", "{", "if", "(", "!", "encloses", "(", "range", ")", ")", "{", "return", "false", ";", "}", "}", "return", "true", ";", "}"], "memberFunctions": {"add": [["void", "Range<C> range"]], "asDescendingSetOfRanges": [["Set<Range<C>>"]], "intersects": [["boolean", "Range<C> otherRange"]], "isEmpty": [["boolean"]], "clear": [["void"]], "subRangeSet": [["RangeSet<C>", "Range<C> view"]], "remove": [["void", "Range<C> range"]], "contains": [["boolean", "C value"]], "rangeContaining": [["Range<C>", "C value"]], "removeAll": [["void", "RangeSet<C> other"], ["void", "Iterable<Range<C>> ranges"]], "addAll": [["void", "RangeSet<C> other"], ["void", "Iterable<Range<C>> ranges"]], "hashCode": [["int"]], "equals": [["boolean", "@Nullable Object obj"]], "toString": [["String"]], "complement": [["RangeSet<C>"]], "encloses": [["boolean", "Range<C> otherRange"]], "asRanges": [["Set<Range<C>>"]], "span": [["Range<C>"]]}, "className": "RangeSet", "renamed": ["boolean", "function", "(", "Iterable", "<", "Range", "<", "C", ">>", "arg0", ")", "{", "for", "(", "Range", "<", "C", ">", "loc0", ":", "arg0", ")", "{", "if", "(", "!", "encloses", "(", "loc0", ")", ")", "{", "return", "false", ";", "}", "}", "return", "true", ";", "}"], "nl": "Returns  {@code true} if for each range in {@code other} there exists a member range in thisrange set which  {@linkplain Range#encloses encloses} it. Returns {@code true} if {@code other}is empty. This is equivalent to checking if this range set  {@link #encloses} each range in {@code other}.", "nlToks": ["Returns", "-LCB-", "@code", "true", "-RCB-", "if", "for", "each", "range", "in", "-LCB-", "@code", "other", "-RCB-", "there", "exists", "a", "member", "range", "in", "thisrange", "set", "which", "-LCB-", "@linkplain", "Range", "#encloses", "encloses", "-RCB-", "it", ".", "Returns", "-LCB-", "@code", "true", "-RCB-", "if", "-LCB-", "@code", "other", "-RCB-", "is", "empty", ".", "This", "is", "equivalent", "to", "checking", "if", "this", "range", "set", "-LCB-", "@link", "#encloses", "-RCB-", "each", "range", "in", "-LCB-", "@code", "other", "-RCB-", "."], "path": "hazendaz/guava/tree/master/guava/src/com/google/common/collect/RangeSet.java", "idx": 93}
{"memberVariables": {"functions": "Map<String,Method>", "current=new ThreadLocal<ELEvaluator>()": "ThreadLocal<ELEvaluator>", "context": "Context", "evaluator=new ExpressionEvaluatorImpl()": "ExpressionEvaluator", "vars": "Map<String,Object>"}, "code": ["void", "function", "(", "Map", "<", "String", ",", "Object", ">", "vars", ")", "{", "this", ".", "vars", ".", "putAll", "(", "vars", ")", ";", "}"], "memberFunctions": {"resolveFunction": [["Method", "String prefix", "String name"]], "addFunction": [["void", "String prefix", "String functionName", "Method method"]], "resolveVariable": [["Object", "String name"]], "setVariable": [["void", "String name", "Object value"], ["void", "String name", "Object value"]], "getCurrent": [["ELEvaluator"]], "getVariable": [["Object", "String name"], ["Object", "String name"]], "getContext": [["Context"]], "evaluate": [["T", "String expr", "Class<T> clazz"]]}, "className": "ELEvaluator", "renamed": ["void", "function", "(", "Map", "<", "String", ",", "Object", ">", "arg0", ")", "{", "this", ".", "vars", ".", "putAll", "(", "arg0", ")", ";", "}"], "nl": "Add variables to the context. ", "nlToks": ["Add", "variables", "to", "the", "context", "."], "path": "pingpangkuangmo/oozie/tree/master/core/src/main/java/org/apache/oozie/util/ELEvaluator.java", "idx": 95}
{"memberVariables": {"mode": "int", "buffer=null": "ByteBuffer", "allocator": "ByteBufferAllocator", "OUTPUT_MODE=1": "int", "INPUT_MODE=0": "int"}, "code": ["boolean", "function", "(", ")", "{", "setOutputMode", "(", ")", ";", "return", "this", ".", "buffer", ".", "hasRemaining", "(", ")", ";", "}"], "memberFunctions": {"expandCapacity": [["void", "int capacity"]], "setOutputMode": [["void"]], "expand": [["void"]], "setInputMode": [["void"]], "length": [["int"]], "available": [["int"]], "clear": [["void"]], "toString": [["String"]], "getMode": [["int"]], "ensureCapacity": [["void", "int requiredCapacity"]], "capacity": [["int"]]}, "className": "ExpandableBuffer", "renamed": ["boolean", "function", "(", ")", "{", "setOutputMode", "(", ")", ";", "return", "this", ".", "buffer", ".", "hasRemaining", "(", ")", ";", "}"], "nl": "Determines if the buffer contains data.", "nlToks": ["Determines", "if", "the", "buffer", "contains", "data", "."], "path": "pritamkhose/open-gpstracker.code/tree/master/external_sources/httpcore-4.1.1/httpcore-nio/src/main/java/org/apache/http/nio/util/ExpandableBuffer.java", "idx": 97}
{"memberVariables": {"blk": "Block", "oldval": "String", "offset": "int", "txnum": "int", "newval": "String"}, "code": ["int", "function", "(", ")", "{", "Object", "[", "]", "rec", "=", "new", "Object", "[", "]", "{", "SETSTRING", ",", "txnum", ",", "blk", ".", "fileName", "(", ")", ",", "blk", ".", "number", "(", ")", ",", "offset", ",", "oldval", ",", "newval", "}", ";", "return", "logMgr", ".", "append", "(", "rec", ")", ";", "}"], "memberFunctions": {"op": [["int"]], "undo": [["void", "int txnum"]], "toString": [["String"]], "redo": [["void", "int txnum"]], "txNumber": [["int"]]}, "className": "SetStringRecord", "renamed": ["int", "function", "(", ")", "{", "Object", "[", "]", "loc0", "=", "new", "Object", "[", "]", "{", "SETSTRING", ",", "txnum", ",", "blk", ".", "fileName", "(", ")", ",", "blk", ".", "number", "(", ")", ",", "offset", ",", "oldval", ",", "newval", "}", ";", "return", "logMgr", ".", "append", "(", "loc0", ")", ";", "}"], "nl": "Writes a setString record to the log. This log record contains the SETSTRING operator, followed by the transaction id, the filename, number, and offset of the modified block, and the previous string value at that offset.", "nlToks": ["Writes", "a", "setString", "record", "to", "the", "log", ".", "This", "log", "record", "contains", "the", "SETSTRING", "operator", ",", "followed", "by", "the", "transaction", "id", ",", "the", "filename", ",", "number", ",", "and", "offset", "of", "the", "modified", "block", ",", "and", "the", "previous", "string", "value", "at", "that", "offset", "."], "path": "prerit2803/DBMSProject2/tree/master/simpledb/tx/recovery/SetStringRecord.java", "idx": 98}
{"memberVariables": {"dataFlow=new ArrayList<>()": "List<DataFlowNode>", "continueBreakReturnStack=new Stack<>()": "Stack<StackObject>", "LOGGER=Logger.getLogger(Structure.class.getName())": "Logger", "dataFlowHandler": "DataFlowHandler", "braceStack=new Stack<>()": "Stack<StackObject>"}, "code": ["DataFlowNode", "function", "(", "Node", "node", ")", "{", "return", "dataFlowHandler", ".", "createDataFlowNode", "(", "dataFlow", ",", "node", ")", ";", "}"], "memberFunctions": {"getContinueBreakReturnStack": [["List<StackObject>"]], "createStartNode": [["DataFlowNode", "int line"]], "createEndNode": [["DataFlowNode", "int line"]], "getFirst": [["DataFlowNode"]], "getBraceStack": [["List<StackObject>"]], "dump": [["String"]], "getLast": [["DataFlowNode"]], "pushOnStack": [["void", "int type", "DataFlowNode node"]]}, "className": "Structure", "renamed": ["DataFlowNode", "function", "(", "Node", "arg0", ")", "{", "return", "dataFlowHandler", ".", "createDataFlowNode", "(", "dataFlow", ",", "arg0", ")", ";", "}"], "nl": "This class encapsulates the access to the DataFlowNode class. Is this worthwhile? TODO I think it's too confusing to have the DataFlowNode constructor add the created instance to the List. I think it'd be clearer if we did that more \"procedurally\", i.e., create the object, then add it to the list.", "nlToks": ["This", "class", "encapsulates", "the", "access", "to", "the", "DataFlowNode", "class", ".", "Is", "this", "worthwhile", "?", "TODO", "I", "think", "it", "'s", "too", "confusing", "to", "have", "the", "DataFlowNode", "constructor", "add", "the", "created", "instance", "to", "the", "List", ".", "I", "think", "it", "'d", "be", "clearer", "if", "we", "did", "that", "more", "``", "procedurally", "''", ",", "i.e.", ",", "create", "the", "object", ",", "then", "add", "it", "to", "the", "list", "."], "path": "adangel/pmd/tree/master/pmd-core/src/main/java/net/sourceforge/pmd/lang/dfa/Structure.java", "idx": 99}
{"memberVariables": {"sUserThreadLocal=new ThreadLocal<>()": "ThreadLocal<User>"}, "code": ["User", "function", "(", ")", "{", "if", "(", "!", "SecurityUtils", ".", "isAuthenticationEnabled", "(", ")", ")", "{", "throw", "new", "IOException", "(", "ExceptionMessage", ".", "AUTHENTICATION_IS_NOT_ENABLED", ".", "getMessage", "(", ")", ")", ";", "}", "return", "sUserThreadLocal", ".", "get", "(", ")", ";", "}"], "memberFunctions": {"set": [["void", "String userName"]], "remove": [["void"]]}, "className": "AuthenticatedClientUser", "renamed": ["User", "function", "(", ")", "{", "if", "(", "!", "SecurityUtils", ".", "isAuthenticationEnabled", "(", ")", ")", "{", "throw", "new", "IOException", "(", "ExceptionMessage", ".", "AUTHENTICATION_IS_NOT_ENABLED", ".", "getMessage", "(", ")", ")", ";", "}", "return", "sUserThreadLocal", ".", "get", "(", ")", ";", "}"], "nl": "Gets the  {@link User} from the {@link ThreadLocal} variable.", "nlToks": ["Gets", "the", "-LCB-", "@link", "User", "-RCB-", "from", "the", "-LCB-", "@link", "ThreadLocal", "-RCB-", "variable", "."], "path": "poemlin/alluxio/tree/master/core/common/src/main/java/alluxio/security/authentication/AuthenticatedClientUser.java", "idx": 101}
{"memberVariables": {"enableClaims=\"false\"": "String", "enableRecipients=\"false\"": "String", "selectedClaims=new ArrayList<String>()": "List<String>", "attributeConsumingServiceIndex=null": "String", "singleLogoutUrl=\"\"": "String", "enableAudiences=\"false\"": "String", "enableSignatureValidation=\"false\"": "String", "selectedAudiences=new ArrayList<String>()": "List<String>", "issuer=\"\"": "String", "certificateAlias=\"\"": "String", "isIdPInitSSOEnabled": "String", "assertionConsumerUrl=\"\"": "String", "enableAssertionSigning=\"false\"": "String", "enableSingleLogout=\"false\"": "String", "selectedRecipients=new ArrayList<String>()": "List<String>"}, "code": ["boolean", "function", "(", "String", "recipient", ")", "{", "if", "(", "selectedRecipients", ".", "contains", "(", "recipient", ")", ")", "{", "return", "false", ";", "}", "selectedRecipients", ".", "add", "(", "recipient", ")", ";", "return", "true", ";", "}"], "memberFunctions": {"getSelectedAudiences": [["List<String>"]], "setIdPInitSSOEnabled": [["void", "String idPInitSSOEnabled"]], "getAttributeConsumingServiceIndex": [["String"]], "getEnableClaims": [["String"]], "getSelectedClaimsAttay": [["String[]"]], "addAudienceToList": [["boolean", "String audience"]], "getSelectedAudiencesArray": [["String[]"]], "removeClaimFromList": [["void", "String claim"]], "getEnableSignatureValidation": [["String"]], "getSelectedClaims": [["List<String>"]], "removeRecipientFromList": [["void", "String recipient"]], "setEnableAssertionSigning": [["void", "String enableAssertionSigning"]], "getSelectedRecipients": [["List<String>"]], "setEnableSignatureValidation": [["void", "String enableSignatureValidation"]], "getAssertionConsumerUrl": [["String"]], "getIssuer": [["String"]], "getCertificateAlias": [["String"]], "setAttributeConsumingServiceIndex": [["void", "String attributeConsumingServiceIndex"]], "clearBean": [["void"]], "setSelectedAttributes": [["void", "List<String> selectedClaims"]], "getSingleLogoutUrl": [["String"]], "getSelectedRecipientsArray": [["String[]"]], "addClaimToList": [["boolean", "String claim"]], "setEnableAudiences": [["void", "String enableAudiences"]], "getEnableAssertionSigning": [["String"]], "setCertificateAlias": [["void", "String certificateAlias"]], "getEnableAudiences": [["String"]], "getEnableSingleLogout": [["String"]], "setIssuer": [["void", "String issuer"]], "setSingleLogoutUrl": [["void", "String singleLogoutUrl"]], "setEnableClaims": [["void", "String enableClaims"]], "setEnableRecipients": [["void", "String enableRecipients"]], "isIdPInitSSOEnabled": [["String"]], "getEnableRecipients": [["String"]], "removeAudienceFromList": [["void", "String audience"]], "setAssertionConsumerUrl": [["void", "String assertionConsumerUrl"]], "setEnableSingleLogout": [["void", "String enableSingleLogout"]]}, "className": "SAMLSSOProviderConfigBean", "renamed": ["boolean", "function", "(", "String", "arg0", ")", "{", "if", "(", "selectedRecipients", ".", "contains", "(", "arg0", ")", ")", "{", "return", "false", ";", "}", "selectedRecipients", ".", "add", "(", "arg0", ")", ";", "return", "true", ";", "}"], "nl": "add an recipient to the required recipients list", "nlToks": ["add", "an", "recipient", "to", "the", "required", "recipients", "list"], "path": "harsha1979/carbon-identity/tree/master/components/sso-saml/org.wso2.carbon.identity.sso.saml.ui/src/main/java/org/wso2/carbon/identity/sso/saml/ui/SAMLSSOProviderConfigBean.java", "idx": 102}
{"memberVariables": {"mException=ExpectedException.none()": "ExpectedException", "mTestFolder=new TemporaryFolder()": "TemporaryFolder"}, "code": ["void", "function", "(", ")", "{", "File", "ghostFile", "=", "new", "File", "(", "mTestFolder", ".", "getRoot", "(", ")", ",", "\"ghost.txt\"", ")", ";", "mException", ".", "expect", "(", "IOException", ".", "class", ")", ";", "FileUtils", ".", "delete", "(", "ghostFile", ".", "getAbsolutePath", "(", ")", ")", ";", "Assert", ".", "fail", "(", "\"deleting a non-existent file should have failed\"", ")", ";", "}"], "memberFunctions": {"deleteFile": [["void"]], "setLocalDirStickyBit": [["void"]], "getLocalFileMode": [["void"]], "changeNonExistentFile": [["void"]], "moveNonExistentFile": [["void"]], "moveFile": [["void"]], "createFile": [["void"]], "createStorageDirPath": [["void"]], "changeLocalDirPermissionTests": [["void"]], "concurrentCreateStorageDirPath": [["void"]], "createDir": [["void"]], "createBlockPath": [["void"]], "changeLocalFilePermission": [["void"]], "deletePathRecursively": [["void"]]}, "className": "FileUtilsTest", "renamed": ["void", "function", "(", ")", "{", "File", "loc0", "=", "new", "File", "(", "mTestFolder", ".", "getRoot", "(", ")", ",", "\"srini_string\"", ")", ";", "mException", ".", "expect", "(", "IOException", ".", "class", ")", ";", "FileUtils", ".", "delete", "(", "loc0", ".", "getAbsolutePath", "(", ")", ")", ";", "Assert", ".", "fail", "(", "\"srini_string\"", ")", ";", "}"], "nl": "Tests the  {@link FileUtils#delete(String)} method to throw an exception when trying to delete anon-existent file.", "nlToks": ["Tests", "the", "-LCB-", "@link", "FileUtils", "#delete", "-LRB-", "String", "-RRB-", "-RCB-", "method", "to", "throw", "an", "exception", "when", "trying", "to", "delete", "anon-existent", "file", "."], "path": "poemlin/alluxio/tree/master/core/common/src/test/java/alluxio/util/io/FileUtilsTest.java", "idx": 103}
{"memberVariables": {"fields=new HashMap<>()": "Map<FieldSignature,Set<String>>", "nestedClasses=new HashMap<>()": "Map<String,ClassStats>", "memo=new HashMap<>()": "Map<ClassMetricKey,Double>", "operations=new HashMap<>()": "Map<OperationSignature,Map<String,OperationStats>>"}, "code": ["boolean", "function", "(", "String", "name", ",", "OperationSigMask", "mask", ")", "{", "for", "(", "OperationSignature", "sig", ":", "operations", ".", "keySet", "(", ")", ")", "{", "if", "(", "mask", ".", "covers", "(", "sig", ")", ")", "{", "if", "(", "operations", ".", "get", "(", "sig", ")", ".", "containsKey", "(", "name", ")", ")", "{", "return", "true", ";", "}", "}", "}", "return", "false", ";", "}"], "memberFunctions": {"compute": [["double", "OperationMetricKey key", "ASTMethodOrConstructorDeclaration node", "String name", "boolean force"], ["double", "Metrics.ClassMetricKey key", "ASTClassOrInterfaceDeclaration node", "boolean force"]], "addOperation": [["void", "String name", "OperationSignature sig"]], "addField": [["void", "String name", "FieldSignature sig"]], "getNestedClassStats": [["ClassStats", "String className", "boolean createIfNotFound"]]}, "className": "ClassStats", "renamed": ["boolean", "function", "(", "String", "arg0", ",", "OperationSigMask", "arg1", ")", "{", "for", "(", "OperationSignature", "loc0", ":", "operations", ".", "keySet", "(", ")", ")", "{", "if", "(", "arg1", ".", "covers", "(", "loc0", ")", ")", "{", "if", "(", "operations", ".", "get", "(", "loc0", ")", ".", "containsKey", "(", "arg0", ")", ")", "{", "return", "true", ";", "}", "}", "}", "return", "false", ";", "}"], "nl": "Checks whether the class declares an operation by the name given which is covered by the signature mask.", "nlToks": ["Checks", "whether", "the", "class", "declares", "an", "operation", "by", "the", "name", "given", "which", "is", "covered", "by", "the", "signature", "mask", "."], "path": "adangel/pmd/tree/master/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/oom/ClassStats.java", "idx": 105}
{"memberVariables": {"settings": "IStoredSettings", "legacyBackingServices": "Map<String,String>", "runtimeManager": "IRuntimeManager", "logger=LoggerFactory.getLogger(getClass())": "Logger", "userService": "IUserService"}, "code": ["boolean", "function", "(", "Collection", "<", "UserModel", ">", "models", ")", "{", "return", "userService", ".", "updateUserModels", "(", "models", ")", ";", "}"], "memberFunctions": {"deleteRepositoryRole": [["boolean", "String role"]], "getAllUsernames": [["List<String>"]], "getAllUsers": [["List<UserModel>"]], "getUserModel": [["UserModel", "char[] cookie"], ["UserModel", "String username"]], "updateUserModel": [["boolean", "UserModel model"], ["boolean", "String username", "UserModel model"]], "getTeamModel": [["TeamModel", "String teamname"]], "updateTeamModel": [["boolean", "TeamModel model"], ["boolean", "String teamname", "TeamModel model"]], "isInternalAccount": [["boolean", "String username"]], "getTeamNamesForRepositoryRole": [["List<String>", "String role"]], "deleteTeam": [["boolean", "String teamname"]], "getUsernamesForRepositoryRole": [["List<String>", "String role"]], "deleteTeamModel": [["boolean", "TeamModel model"]], "start": [["UserManager"]], "setUserService": [["void", "IUserService userService"]], "createUserService": [["IUserService", "File realmFile"]], "getAllTeams": [["List<TeamModel>"]], "getCookie": [["String", "UserModel model"]], "deleteUserModel": [["boolean", "UserModel model"]], "stop": [["UserManager"]], "deleteUser": [["boolean", "String username"]], "setup": [["void", "IRuntimeManager runtimeManager"]], "renameRepositoryRole": [["boolean", "String oldRole", "String newRole"]], "getAllTeamNames": [["List<String>"]], "updateTeamModels": [["boolean", "Collection<TeamModel> models"]]}, "className": "UserManager", "renamed": ["boolean", "function", "(", "Collection", "<", "UserModel", ">", "arg0", ")", "{", "return", "userService", ".", "updateUserModels", "(", "arg0", ")", ";", "}"], "nl": "Updates/writes all specified user objects.", "nlToks": ["Updates/writes", "all", "specified", "user", "objects", "."], "path": "pombreda/gitblit/tree/master/src/main/java/com/gitblit/manager/UserManager.java", "idx": 106}
{"memberVariables": {"CLASSPATH_PREFIX=\"META-INF\"": "String", "config": "FilterConfig"}, "code": ["void", "function", "(", "String", "msg", ",", "Throwable", "t", ")", "{", "this", ".", "config", ".", "getServletContext", "(", ")", ".", "log", "(", "this", ".", "config", ".", "getFilterName", "(", ")", "+", "\": \"", "+", "msg", ",", "t", ")", ";", "}"], "memberFunctions": {"init": [["void", "FilterConfig filterConfig"]], "findResource": [["URL", "String path"]], "loadResource": [["String", "String path"]], "doFilter": [["void", "ServletRequest request", "ServletResponse response", "FilterChain chain"]], "destroy": [["void"]]}, "className": "ConcatFilter", "renamed": ["void", "function", "(", "String", "arg0", ",", "Throwable", "arg1", ")", "{", "this", ".", "config", ".", "getServletContext", "(", ")", ".", "log", "(", "this", ".", "config", ".", "getFilterName", "(", ")", "+", "\"srini_string\"", "+", "arg0", ",", "arg1", ")", ";", "}"], "nl": "logs the message and Throwable prepended by the filter name (copy of  {@link GenericServlet#log(String,Throwable)})", "nlToks": ["logs", "the", "message", "and", "Throwable", "prepended", "by", "the", "filter", "name", "-LRB-", "copy", "of", "-LCB-", "@link", "GenericServlet", "#log", "-LRB-", "String", ",", "Throwable", "-RRB-", "-RCB-", "-RRB-"], "path": "piejanssens/openui5/tree/master/src/testsuite-utils/src/main/java/com/sap/openui5/ConcatFilter.java", "idx": 110}
{"memberVariables": {"LOG=LoggerFactory.getLogger(JsonControllerUtils.class)": "Logger"}, "code": ["void", "function", "(", "final", "HttpServletRequest", "request", ",", "final", "HttpServletResponse", "response", ")", "{", "writeResponse", "(", "request", ",", "response", ",", "\"\"", ")", ";", "}"], "memberFunctions": {}, "className": "JsonControllerUtils", "renamed": ["void", "function", "(", "final", "HttpServletRequest", "arg0", ",", "final", "HttpServletResponse", "arg1", ")", "{", "writeResponse", "(", "arg0", ",", "arg1", ",", "\"srini_string\"", ")", ";", "}"], "nl": "Writes an empty response for calls that are purely one-way RPC.", "nlToks": ["Writes", "an", "empty", "response", "for", "calls", "that", "are", "purely", "one-way", "RPC", "."], "path": "adamfisk/littleshoot-client/tree/master/client/services/src/main/java/org/lastbamboo/client/handlers/JsonControllerUtils.java", "idx": 111}
{"memberVariables": {"consoleMode": "boolean", "logger=org.apache.log4j.Logger.getLogger(ProgressMonitor.class)": "org.apache.log4j.Logger", "maxValue": "int", "showProgress": "boolean", "progressMonitor=new ProgressMonitor()": "ProgressMonitor", "log=new StringBuffer()": "StringBuffer", "currentMessage": "String", "debugMessages=new ArrayList<>()": "List<String>", "warnings=new TreeSet<>()": "TreeSet<String>", "curValue": "int", "warningCounts=new HashMap<>()": "HashMap<String,Integer>"}, "code": ["void", "function", "(", "int", "curValue", ")", "{", "progressMonitor", ".", "curValue", "=", "curValue", ";", "}"], "memberFunctions": {"setConsoleModeAndParseShowProgress": [["void", "String[] args"]], "setShowProgress": [["void", "boolean showProgress"]], "setCurrentMessage": [["void", "String currentMessage"]], "getMaxValue": [["int"]], "getLog": [["String"]], "logWarning": [["void", "String warning"]], "getWarnings": [["ArrayList<String>"]], "logDebug": [["void", "String debugMessage"]], "getMessages": [["ArrayList<String>"]], "isConsoleMode": [["boolean"]], "getDebugMessages": [["List<String>"]], "setMaxValue": [["void", "int maxValue"]], "incrementCurValue": [["void"]], "isRunningOnServer": [["boolean"]], "getCurrentMessage": [["String"]], "setConsoleMode": [["void", "boolean consoleFlag"]], "getCurValue": [["int"]], "isShowProgress": [["boolean"]], "getPercentComplete": [["double"]]}, "className": "ProgressMonitor", "renamed": ["void", "function", "(", "int", "arg0", ")", "{", "progressMonitor", ".", "arg0", "=", "arg0", ";", "}"], "nl": "Sets the Current Value.", "nlToks": ["Sets", "the", "Current", "Value", "."], "path": "adamabeshouse/cbioportal/tree/master/core/src/main/java/org/mskcc/cbio/portal/util/ProgressMonitor.java", "idx": 112}
{"memberVariables": {"m_fileMapper": "FileMapper", "m_escapedJson": "String", "m_log=LoggerFactory.getLogger(getClass())": "Logger", "STOP_DOWNLOAD_DELETE_FILES=1": "int", "m_libTorrent": "JLibTorrent"}, "code": ["String", "function", "(", ")", "{", "return", "this", ".", "m_escapedJson", ";", "}"], "memberFunctions": {"addDownload": [["void", "final JSONArray array", "final Entry<URI,Pair<Downloader<MoverDState<Sha1DState<MsDState>>>,VisitableDownloader<MsDState>>> entry"]], "normalizeId": [["String", "final String id"]], "addComplete": [["boolean", "final JSONArray array", "final File file"]]}, "className": "JsonDownloadsVisitor", "renamed": ["String", "function", "(", ")", "{", "return", "this", ".", "m_escapedJson", ";", "}"], "nl": "Accessor for the JSON string.", "nlToks": ["Accessor", "for", "the", "JSON", "string", "."], "path": "adamfisk/littleshoot-client/tree/master/client/services/src/main/java/org/lastbamboo/client/services/JsonDownloadsVisitor.java", "idx": 113}
{"memberVariables": {"documentTraversal": "DocumentTraversal", "nodeTypes": "short[]", "rootNode": "Node"}, "code": ["void", "function", "(", "NodeTester", "tester", ",", "short", "[", "]", "nodeTypes", ")", "{", "NodeIterator", "iter", "=", "documentTraversal", ".", "createNodeIterator", "(", "rootNode", ",", "NodeFilter", ".", "SHOW_ALL", ",", "new", "NodeTypeNodeFilter", "(", "nodeTypes", ")", ",", "true", ")", ";", "for", "(", "Node", "nextNode", "=", "iter", ".", "nextNode", "(", ")", ";", "nextNode", "!=", "null", ";", "nextNode", "=", "iter", ".", "nextNode", "(", ")", ")", "{", "tester", ".", "testNode", "(", "nextNode", ",", "this", ")", ";", "}", "tester", ".", "noMoreNodes", "(", "this", ")", ";", "}"], "memberFunctions": {"acceptNode": [["short", "Node aNode"]], "getDocumentTraversal": [["DocumentTraversal", "Document document"]], "acceptNodeType": [["boolean", "short shortVal"]]}, "className": "NodeTest", "renamed": ["void", "function", "(", "NodeTester", "arg0", ",", "short", "[", "]", "arg1", ")", "{", "NodeIterator", "loc0", "=", "documentTraversal", ".", "createNodeIterator", "(", "rootNode", ",", "NodeFilter", ".", "SHOW_ALL", ",", "new", "NodeTypeNodeFilter", "(", "arg1", ")", ",", "true", ")", ";", "for", "(", "Node", "loc1", "=", "loc0", ".", "loc1", "(", ")", ";", "loc1", "!=", "null", ";", "loc1", "=", "loc0", ".", "loc1", "(", ")", ")", "{", "arg0", ".", "testNode", "(", "loc1", ",", "this", ")", ";", "}", "arg0", ".", "noMoreNodes", "(", "this", ")", ";", "}"], "nl": "Does this NodeTest pass using the specified NodeTester instance?", "nlToks": ["Does", "this", "NodeTest", "pass", "using", "the", "specified", "NodeTester", "instance", "?"], "path": "phbenisc/xmlunit/tree/master/xmlunit-legacy/src/main/java/org/custommonkey/xmlunit/NodeTest.java", "idx": 114}
{"memberVariables": {"BLOCK_WORKER_THRIFT_CLIENT_HEARTBEAT_POOL=new ConcurrentHashMapV8<>()": "ConcurrentHashMapV8<InetSocketAddress,BlockWorkerThriftClientPool>", "mBlockMasterClientPool": "BlockMasterClientPool", "mHasLocalWorker": "Boolean", "BLOCK_WORKER_THRIFT_CLIENT_POOL=new ConcurrentHashMapV8<>()": "ConcurrentHashMapV8<InetSocketAddress,BlockWorkerThriftClientPool>", "NETTY_CHANNEL_POOL_MAP=new ConcurrentHashMapV8<>()": "ConcurrentHashMapV8<InetSocketAddress,NettyChannelPool>", "CACHED_CONTEXTS=new ConcurrentHashMap<>()": "Map<InetSocketAddress,BlockStoreContext>"}, "code": ["BlockStoreContext", "function", "(", "InetSocketAddress", "masterAddress", ")", "{", "BlockStoreContext", "context", "=", "CACHED_CONTEXTS", ".", "get", "(", "masterAddress", ")", ";", "if", "(", "context", "==", "null", ")", "{", "context", "=", "new", "BlockStoreContext", "(", "masterAddress", ")", ";", "CACHED_CONTEXTS", ".", "put", "(", "masterAddress", ",", "context", ")", ";", "}", "return", "context", ";", "}"], "memberFunctions": {"acquireWorkerClient": [["BlockWorkerClient", "WorkerNetAddress address"]], "releaseBlockWorkerThriftClient": [["void", "InetSocketAddress address", "BlockWorkerClientService.Client client"]], "initializeGauges": [["void"]], "hasLocalWorker": [["boolean"]], "releaseBlockWorkerThriftClientHeartbeat": [["void", "InetSocketAddress address", "BlockWorkerClientService.Client client"]], "releaseWorkerClient": [["void", "BlockWorkerClient blockWorkerClient"]], "acquireMasterClientResource": [["CloseableResource<BlockMasterClient>"]], "releaseNettyChannel": [["void", "InetSocketAddress address", "Channel channel"]], "acquireBlockWorkerThriftClient": [["BlockWorkerClientService.Client", "final InetSocketAddress address"]], "getWorkerAddresses": [["List<WorkerNetAddress>", "String hostname"]], "acquireNettyChannel": [["Channel", "final InetSocketAddress address", "final Callable<Bootstrap> bootstrapBuilder"]], "acquireBlockWorkerThriftClientHeartbeat": [["BlockWorkerClientService.Client", "final InetSocketAddress address"]]}, "className": "BlockStoreContext", "renamed": ["BlockStoreContext", "function", "(", "InetSocketAddress", "arg0", ")", "{", "BlockStoreContext", "loc0", "=", "CACHED_CONTEXTS", ".", "get", "(", "arg0", ")", ";", "if", "(", "loc0", "==", "null", ")", "{", "loc0", "=", "new", "BlockStoreContext", "(", "arg0", ")", ";", "CACHED_CONTEXTS", ".", "put", "(", "arg0", ",", "loc0", ")", ";", "}", "return", "loc0", ";", "}"], "nl": "Gets a context with the specified master address from the cache if it's created before. Otherwise creates a new one and puts it in the cache.", "nlToks": ["Gets", "a", "context", "with", "the", "specified", "master", "address", "from", "the", "cache", "if", "it", "'s", "created", "before", ".", "Otherwise", "creates", "a", "new", "one", "and", "puts", "it", "in", "the", "cache", "."], "path": "poemlin/alluxio/tree/master/core/client/src/main/java/alluxio/client/block/BlockStoreContext.java", "idx": 115}
{"memberVariables": {"imageFormat": "String", "writeCompressionQuality": "float", "writeCompressionType": "String", "writeCompressionMode": "int", "DEFAULT_IMAGE_FORMAT=\"png\"": "String"}, "code": ["FSImageWriter", "function", "(", "float", "quality", ")", "{", "FSImageWriter", "writer", "=", "new", "FSImageWriter", "(", "\"jpg\"", ")", ";", "writer", ".", "setWriteCompressionMode", "(", "ImageWriteParam", ".", "MODE_EXPLICIT", ")", ";", "writer", ".", "setWriteCompressionType", "(", "\"JPEG\"", ")", ";", "writer", ".", "setWriteCompressionQuality", "(", "quality", ")", ";", "return", "writer", ";", "}"], "memberFunctions": {"setWriteCompressionMode": [["void", "int mode"]], "setWriteCompressionType": [["void", "String type"]], "setWriteCompressionQuality": [["void", "float q"]], "write": [["void", "BufferedImage bimg", "String filePath"], ["void", "BufferedImage bimg", "OutputStream os"]], "getImageWriteParameters": [["ImageWriteParam", "ImageWriter writer"]], "lookupImageWriterForFormat": [["ImageWriter", "String imageFormat"]]}, "className": "FSImageWriter", "renamed": ["FSImageWriter", "function", "(", "float", "arg0", ")", "{", "FSImageWriter", "loc0", "=", "new", "FSImageWriter", "(", "\"srini_string\"", ")", ";", "loc0", ".", "setWriteCompressionMode", "(", "ImageWriteParam", ".", "MODE_EXPLICIT", ")", ";", "loc0", ".", "setWriteCompressionType", "(", "\"srini_string\"", ")", ";", "loc0", ".", "setWriteCompressionQuality", "(", "arg0", ")", ";", "return", "loc0", ";", "}"], "nl": "Convenience method for initializing a writer for the JPEG image format.", "nlToks": ["Convenience", "method", "for", "initializing", "a", "writer", "for", "the", "JPEG", "image", "format", "."], "path": "plutogeek/flyingsaucer/tree/master/flying-saucer-core/src/main/java/org/xhtmlrenderer/util/FSImageWriter.java", "idx": 116}
{"memberVariables": {"OMA_REDIRECT_LINK=\"omaRedirect.do?\"": "String", "SITE_PARAM=\"site\"": "String"}, "code": ["String", "function", "(", "String", "omaUrl", ")", "{", "omaUrl", "=", "conditionallyPrependHttp", "(", "omaUrl", ")", ";", "URL", "url", "=", "new", "URL", "(", "omaUrl", ")", ";", "String", "site", "=", "url", ".", "getHost", "(", ")", ";", "String", "path", "=", "url", ".", "getPath", "(", ")", ";", "String", "query", "=", "url", ".", "getQuery", "(", ")", ";", "return", "OMA_REDIRECT_LINK", "+", "SITE_PARAM", "+", "\"=\"", "+", "site", "+", "path", "+", "\"&\"", "+", "query", ";", "}"], "memberFunctions": {"removePath": [["String", "String omaQueryString"]], "conditionallyPrependHttp": [["String", "String omaUrl"]], "createOmaLink": [["String", "String omaQueryString"]], "createQueryString": [["String", "ArrayList<String> keyList", "HashMap<String,String> paramMap"]], "getParameterMap": [["HashMap<String,String>", "String params[]"]], "getKeyList": [["ArrayList<String>", "HashMap<String,String> paramMap"]], "getDelimiter": [["String", "int i", "ArrayList<String> keyList"]]}, "className": "OmaLinkUtil", "renamed": ["String", "function", "(", "String", "arg0", ")", "{", "arg0", "=", "conditionallyPrependHttp", "(", "arg0", ")", ";", "URL", "loc0", "=", "new", "URL", "(", "arg0", ")", ";", "String", "loc1", "=", "loc0", ".", "getHost", "(", ")", ";", "String", "loc2", "=", "loc0", ".", "getPath", "(", ")", ";", "String", "loc3", "=", "loc0", ".", "getQuery", "(", ")", ";", "return", "OMA_REDIRECT_LINK", "+", "SITE_PARAM", "+", "\"srini_string\"", "+", "loc1", "+", "loc2", "+", "\"srini_string\"", "+", "loc3", ";", "}"], "nl": "Creates a Redirect Link from Portal to OMA. Incoming links look like this: http://mutationassessor.org/?cm=var&var=17,7517830,G,C&fts=all Outgoing links look like this: omaRedirect.do?path=/&cm=var&var=17,7517830,G,C&fts=all", "nlToks": ["Creates", "a", "Redirect", "Link", "from", "Portal", "to", "OMA", ".", "Incoming", "links", "look", "like", "this", ":", "http://mutationassessor.org/?cm=var&var=17,7517830,G,C&fts=all", "Outgoing", "links", "look", "like", "this", ":", "omaRedirect.do?path", "=", "/", "&", "cm", "=", "var", "&", "var", "=", "17,7517830", ",", "G", ",", "C", "&", "fts", "=", "all"], "path": "adamabeshouse/cbioportal/tree/master/core/src/main/java/org/mskcc/cbio/portal/util/OmaLinkUtil.java", "idx": 117}
{"memberVariables": {"LOG=LogUtils.getL7dLogger(JettyHTTPServerEngineFactory.class)": "Logger", "bus": "Bus", "mBeanContainer": "Container.Listener", "portMap=new ConcurrentHashMap<Integer,JettyHTTPServerEngine>()": "ConcurrentHashMap<Integer,JettyHTTPServerEngine>", "fallbackThreadingParameters": "ThreadingParameters", "FALLBACK_THREADING_PARAMS_KEY=0": "int", "threadingParametersMap=new TreeMap<String,ThreadingParameters>()": "Map<String,ThreadingParameters>", "tlsParametersMap=new TreeMap<String,TLSServerParameters>()": "Map<String,TLSServerParameters>", "lifeCycleManager": "BusLifeCycleManager"}, "code": ["void", "function", "(", "Map", "<", "String", ",", "ThreadingParameters", ">", "threadingParamsMap", ")", "{", "threadingParametersMap", "=", "threadingParamsMap", ";", "}"], "memberFunctions": {"setTlsServerParametersMap": [["void", "Map<String,TLSServerParameters> tlsParamsMap"]], "getMBeanServer": [["MBeanServer"]], "getBus": [["Bus"]], "retrieveJettyHTTPServerEngine": [["JettyHTTPServerEngine", "int port"]], "setEnginesList": [["void", "List<JettyHTTPServerEngine> enginesList"]], "initComplete": [["void"], ["void"]], "destroyForPort": [["void", "int port"]], "getThreadingParametersMap": [["Map<String,ThreadingParameters>"]], "isJetty8": [["boolean"]], "postShutdown": [["void"], ["void"]], "getMBeanContainer": [["Container.Listener"]], "getOrCreate": [["JettyHTTPServerEngine", "JettyHTTPServerEngineFactory factory", "String host", "int port", "TLSServerParameters tlsParams"]], "getTlsServerParametersMap": [["Map<String,TLSServerParameters>"]], "createJettyHTTPServerEngine": [["JettyHTTPServerEngine", "String host", "int port", "String protocol"], ["JettyHTTPServerEngine", "int port", "String protocol"]], "setBus": [["void", "Bus bus"]], "preShutdown": [["void"], ["void"]], "setTLSServerParametersForPort": [["void", "String host", "int port", "TLSServerParameters tlsParams"], ["void", "int port", "TLSServerParameters tlsParams"]]}, "className": "JettyHTTPServerEngineFactory", "renamed": ["void", "function", "(", "Map", "<", "String", ",", "ThreadingParameters", ">", "arg0", ")", "{", "threadingParametersMap", "=", "arg0", ";", "}"], "nl": "This call sets the ThreadingParameters for a JettyHTTPServerEngine", "nlToks": ["This", "call", "sets", "the", "ThreadingParameters", "for", "a", "JettyHTTPServerEngine"], "path": "primesign/cxf/tree/master/rt/transports/http-jetty/src/main/java/org/apache/cxf/transport/http_jetty/JettyHTTPServerEngineFactory.java", "idx": 118}
{"memberVariables": {"INSTANCE=new GeneratorManager()": "GeneratorManager", "LOG=Logger.getLogger(GeneratorManager.class)": "Logger", "currLanguage=null": "Language", "generators=new HashMap<Language,CodeGenerator>()": "Map<Language,CodeGenerator>"}, "code": ["void", "function", "(", "Language", "lang", ",", "CodeGenerator", "gen", ")", "{", "if", "(", "currLanguage", "==", "null", ")", "{", "currLanguage", "=", "lang", ";", "}", "generators", ".", "put", "(", "lang", ",", "gen", ")", ";", "ArgoEventPump", ".", "fireEvent", "(", "new", "ArgoGeneratorEvent", "(", "ArgoEventTypes", ".", "GENERATOR_ADDED", ",", "gen", ")", ")", ";", "LOG", ".", "debug", "(", "\"Added generator \"", "+", "gen", "+", "\" for \"", "+", "lang", ")", ";", "}"], "memberFunctions": {"getCodePath": [["String", "Object me"]], "getGenerator": [["CodeGenerator", "Language lang"], ["CodeGenerator", "String name"]], "getCurrLanguage": [["Language"]], "removeGenerator": [["CodeGenerator", "Language lang"], ["CodeGenerator", "String name"]], "getLanguages": [["Set<Language>"]], "getInstance": [["GeneratorManager"]], "findLanguage": [["Language", "String name"]], "getCurrGenerator": [["CodeGenerator"]], "getGenerators": [["Map<Language,CodeGenerator>"]]}, "className": "GeneratorManager", "renamed": ["void", "function", "(", "Language", "arg0", ",", "CodeGenerator", "arg1", ")", "{", "if", "(", "currLanguage", "==", "null", ")", "{", "currLanguage", "=", "arg0", ";", "}", "generators", ".", "put", "(", "arg0", ",", "arg1", ")", ";", "ArgoEventPump", ".", "fireEvent", "(", "new", "ArgoGeneratorEvent", "(", "ArgoEventTypes", ".", "GENERATOR_ADDED", ",", "arg1", ")", ")", ";", "LOG", ".", "debug", "(", "\"srini_string\"", "+", "arg1", "+", "\"srini_string\"", "+", "arg0", ")", ";", "}"], "nl": "Registers a new generator. If a generator with the same language is already registered, it's replaced by the new one.", "nlToks": ["Registers", "a", "new", "generator", ".", "If", "a", "generator", "with", "the", "same", "language", "is", "already", "registered", ",", "it", "'s", "replaced", "by", "the", "new", "one", "."], "path": "pichiliani/CoArgoUML/tree/master/v0.24/fonte/src/argouml-app/src/org/argouml/uml/generator/GeneratorManager.java", "idx": 120}
{"memberVariables": {"functions": "Map<String,Method>", "current=new ThreadLocal<ELEvaluator>()": "ThreadLocal<ELEvaluator>", "context": "Context", "evaluator=new ExpressionEvaluatorImpl()": "ExpressionEvaluator", "vars": "Map<String,Object>"}, "code": ["void", "function", "(", "String", "name", ",", "Object", "value", ")", "{", "context", ".", "setVariable", "(", "name", ",", "value", ")", ";", "}"], "memberFunctions": {"setVariables": [["void", "Map<String,Object> vars"]], "resolveFunction": [["Method", "String prefix", "String name"]], "addFunction": [["void", "String prefix", "String functionName", "Method method"]], "resolveVariable": [["Object", "String name"]], "getCurrent": [["ELEvaluator"]], "getVariable": [["Object", "String name"], ["Object", "String name"]], "getContext": [["Context"]], "evaluate": [["T", "String expr", "Class<T> clazz"]]}, "className": "ELEvaluator", "renamed": ["void", "function", "(", "String", "arg0", ",", "Object", "arg1", ")", "{", "context", ".", "setVariable", "(", "arg0", ",", "arg1", ")", ";", "}"], "nl": "Convenience method that sets a variable in the EL evaluator context. ", "nlToks": ["Convenience", "method", "that", "sets", "a", "variable", "in", "the", "EL", "evaluator", "context", "."], "path": "pingpangkuangmo/oozie/tree/master/core/src/main/java/org/apache/oozie/util/ELEvaluator.java", "idx": 121}
{"memberVariables": {"NONCOINBASE_HEIGHT=-200": "int", "serialVersionUID=-8744924157056340509L": "long", "index": "long", "value": "BigInteger", "scriptBytes": "byte[]", "hash": "Sha256Hash", "height": "int"}, "code": ["long", "function", "(", ")", "{", "return", "index", ";", "}"], "memberFunctions": {"getValue": [["BigInteger"]], "getHeight": [["int"]], "getHash": [["Sha256Hash"]], "hashCode": [["int"]], "serializeToStream": [["void", "OutputStream bos"]], "equals": [["boolean", "Object o"]], "toString": [["String"]], "getScriptBytes": [["byte[]"]]}, "className": "StoredTransactionOutput", "renamed": ["long", "function", "(", ")", "{", "return", "index", ";", "}"], "nl": "The index of this output in the transaction which holds it", "nlToks": ["The", "index", "of", "this", "output", "in", "the", "transaction", "which", "holds", "it"], "path": "plncoin/plncoin-and/tree/master/plncoinj/core/src/main/java/com/google/bitcoin/core/StoredTransactionOutput.java", "idx": 122}
{"memberVariables": {"xStartPos": "float", "lModelAmbient": "FloatBuffer", "zPos": "float", "yPos": "float", "MOVE_FORWARD_SPEED=0.25f": "float", "yStartPos": "float", "walkbiasangle": "float", "walkbias": "float", "BULLET_INTERVAL=0": "int", "bulletTime": "long", "MAX_BULLETS": "int", "ROTATE_SPEED=1.0f": "float", "monsters": "Monster[]", "xPos": "float", "MOVE_BACKWARD_SPEED=0.3f": "float", "MAX_MONSTERS=30": "int", "lightPosition": "FloatBuffer", "whiteLight": "FloatBuffer", "monstersLiving": "boolean[]", "heading=0.0f": "float", "STRAFE_SPEED=0.3f": "float", "zStartPos": "float", "bullets": "ArrayList<Bullet>"}, "code": ["void", "function", "(", ")", "{", "if", "(", "bulletTime", "-", "System", ".", "nanoTime", "(", ")", ">=", "BULLET_INTERVAL", "&&", "bullets", ".", "size", "(", ")", "<", "MAX_BULLETS", ")", "{", "bullets", ".", "add", "(", "new", "Bullet", "(", "xPos", ",", "yPos", ",", "zPos", ",", "heading", ")", ")", ";", "}", "}"], "memberFunctions": {"turnRight": [["void"]], "restart": [["void"]], "start": [["void"]], "update": [["void"]], "isFinished": [["boolean"]], "walkForwards": [["void"]], "renderFloor": [["void", "float x", "float y", "float z", "float width", "float length"]], "walkBackwards": [["void"]], "strafeLeft": [["void"]], "LoadFromFile": [["Level", "String filename"]], "strafeRight": [["void"]], "renderWalls": [["void", "float x", "float y", "float z", "float height", "float width", "float length"]], "turnLeft": [["void"]], "ReadFromXML": [["Level", "Element element"]], "render": [["void"]]}, "className": "Level", "renamed": ["void", "function", "(", ")", "{", "if", "(", "bulletTime", "-", "System", ".", "nanoTime", "(", ")", ">=", "BULLET_INTERVAL", "&&", "bullets", ".", "size", "(", ")", "<", "MAX_BULLETS", ")", "{", "bullets", ".", "add", "(", "new", "Bullet", "(", "xPos", ",", "yPos", ",", "zPos", ",", "heading", ")", ")", ";", "}", "}"], "nl": "Fire a bullet.", "nlToks": ["Fire", "a", "bullet", "."], "path": "philipwhiuk/3D-FPS-Game-Engine/tree/master/src/fps3d/Level.java", "idx": 123}
{"memberVariables": {}, "code": ["GetOfferDetailsResponse", ".", "Return", ".", "DetailOfferData", ".", "OfferDisplay", "function", "(", ")", "{", "return", "new", "GetOfferDetailsResponse", ".", "Return", ".", "DetailOfferData", ".", "OfferDisplay", "(", ")", ";", "}"], "memberFunctions": {"createGetOfferDetailsResponseReturnDetailOfferDataSourceGeos": [["GetOfferDetailsResponse.Return.DetailOfferData.SourceGeos"]], "createGetOfferDetailsResponseReturnDetailOfferDataSeo": [["GetOfferDetailsResponse.Return.DetailOfferData.Seo"]], "createGetOfferDetailsResponseReturnDetailOfferDataMerchantAddresses": [["GetOfferDetailsResponse.Return.DetailOfferData.Merchant.Addresses"]], "createGetOfferDetailsResponseReturnDetailOfferDataTargetGeosGeoCountry": [["GetOfferDetailsResponse.Return.DetailOfferData.TargetGeos.Geo.Country"]], "createGetOfferDetailsResponseReturnDetailOfferDataOfferMediaOfferImageEntry": [["GetOfferDetailsResponse.Return.DetailOfferData.OfferMedia.OfferImage.Entry"]], "createGetOfferDetailsResponseReturnDetailOfferDataTargetGeosGeo": [["GetOfferDetailsResponse.Return.DetailOfferData.TargetGeos.Geo"]], "createGetOfferDetailsResponseReturnDetailOfferDataOfferMedia": [["GetOfferDetailsResponse.Return.DetailOfferData.OfferMedia"]], "createGetOfferDetailsResponseReturnDetailOfferDataFulfillmentPartner": [["GetOfferDetailsResponse.Return.DetailOfferData.FulfillmentPartner"]], "createGetOfferDetailsResponseReturnDetailOfferDataOfferMediaOfferImageEntryValue": [["GetOfferDetailsResponse.Return.DetailOfferData.OfferMedia.OfferImage.Entry.Value"]], "createGetOfferDetailsResponseReturnDetailOfferDataProductsProduct": [["GetOfferDetailsResponse.Return.DetailOfferData.Products.Product"]], "createGetOfferDetailsResponseReturnDetailOfferDataRedemptionAddressesRedemptionAddress": [["GetOfferDetailsResponse.Return.DetailOfferData.RedemptionAddresses.RedemptionAddress"]], "createGetOfferDetailsResponseReturnDetailOfferDataSourceGeosGeoRegion": [["GetOfferDetailsResponse.Return.DetailOfferData.SourceGeos.Geo.Region"]], "createGetOfferDetailsResponseReturnDetailOfferDataTargetGeosGeoCity": [["GetOfferDetailsResponse.Return.DetailOfferData.TargetGeos.Geo.City"]], "createGetOfferDetailsResponseReturnDetailOfferData": [["GetOfferDetailsResponse.Return.DetailOfferData"]], "createGetOfferDetailsResponse": [["GetOfferDetailsResponse"]], "createGetOfferDetailsResponseReturnDetailOfferDataSourceGeosGeoCity": [["GetOfferDetailsResponse.Return.DetailOfferData.SourceGeos.Geo.City"]], "createGetOfferDetailsResponseReturnDetailOfferDataOfferMediaOfferImageEntryValueItem": [["GetOfferDetailsResponse.Return.DetailOfferData.OfferMedia.OfferImage.Entry.Value.Item"]], "createGetOfferDetailsResponseReturnDetailOfferDataProducts": [["GetOfferDetailsResponse.Return.DetailOfferData.Products"]], "createGetOfferDetailsResponseReturnDetailOfferDataOfferMediaOfferImage": [["GetOfferDetailsResponse.Return.DetailOfferData.OfferMedia.OfferImage"]], "createGetOfferDetailsResponseReturnDetailOfferDataRedemptionAddresses": [["GetOfferDetailsResponse.Return.DetailOfferData.RedemptionAddresses"]], "createGetOfferDetailsResponseReturn": [["GetOfferDetailsResponse.Return"]], "createGetOfferDetailsResponseReturnDetailOfferDataSourceGeosGeoCountry": [["GetOfferDetailsResponse.Return.DetailOfferData.SourceGeos.Geo.Country"]], "createGetOfferDetailsResponseReturnDetailOfferDataTargetGeos": [["GetOfferDetailsResponse.Return.DetailOfferData.TargetGeos"]], "createGetOfferDetailsResponseReturnDetailOfferDataTargetGeosGeoRegion": [["GetOfferDetailsResponse.Return.DetailOfferData.TargetGeos.Geo.Region"]], "createGetOfferDetailsResponseReturnDetailOfferDataMerchant": [["GetOfferDetailsResponse.Return.DetailOfferData.Merchant"]], "createGetOfferDetailsResponseReturnDetailOfferDataSourceGeosGeo": [["GetOfferDetailsResponse.Return.DetailOfferData.SourceGeos.Geo"]]}, "className": "ObjectFactory", "renamed": ["GetOfferDetailsResponse", ".", "Return", ".", "DetailOfferData", ".", "OfferDisplay", "function", "(", ")", "{", "return", "new", "GetOfferDetailsResponse", ".", "Return", ".", "DetailOfferData", ".", "OfferDisplay", "(", ")", ";", "}"], "nl": "Create an instance of  {@link GetOfferDetailsResponse.Return.DetailOfferData.OfferDisplay }", "nlToks": ["Create", "an", "instance", "of", "-LCB-", "@link", "GetOfferDetailsResponse.Return.DetailOfferData.OfferDisplay", "-RCB-"], "path": "priyankgandhi/mastercard/tree/master/eop-openapi-client/src/main/java/com/eop/api/offerdetail/gen/ObjectFactory.java", "idx": 124}
{"memberVariables": {"deliveryAssurance": "DeliveryAssurance", "inactivityTimeout": "Long", "acknowledgementInterval": "Long", "rmNamespace": "String", "sequenceTransportSecurityRequired": "boolean", "rm10AddressingNamespace": "String", "inOrder": "boolean", "exponentialBackoff": "boolean", "baseRetransmissionInterval": "Long", "sequenceSTRRequired": "boolean"}, "code": ["long", "function", "(", ")", "{", "return", "acknowledgementInterval", "==", "null", "?", "0", ":", "acknowledgementInterval", ".", "longValue", "(", ")", ";", "}"], "memberFunctions": {"setInactivityTimeout": [["void", "Long inactivityTimeout"]], "setRMNamespace": [["void", "String uri"]], "getInactivityTimeout": [["Long"]], "setAcknowledgementInterval": [["void", "Long acknowledgementInterval"]], "setDeliveryAssurance": [["void", "DeliveryAssurance deliveryAssurance"]], "getAcknowledgementInterval": [["Long"]], "setSequenceSTRRequired": [["void", "boolean sequenceSTRRequired"]], "isSequenceTransportSecurityRequired": [["boolean"]], "getAddressingNamespace": [["String"]], "setRM10AddressingNamespace": [["void", "String addrns"]], "getRMNamespace": [["String"]], "getProtocolVariation": [["ProtocolVariation"]], "getRM10AddressingNamespace": [["String"]], "isSequenceSTRRequired": [["boolean"]], "setExponentialBackoff": [["void", "boolean exponentialBackoff"]], "isExponentialBackoff": [["boolean"]], "getInactivityTimeoutTime": [["long"]], "setInOrder": [["void", "boolean inOrder"]], "getBaseRetransmissionInterval": [["Long"]], "isInOrder": [["boolean"]], "setSequenceTransportSecurityRequired": [["void", "boolean sequenceTransportSecurityRequired"]], "setBaseRetransmissionInterval": [["void", "Long baseRetransmissionInterval"]], "getDeliveryAssurance": [["DeliveryAssurance"]]}, "className": "RMConfiguration", "renamed": ["long", "function", "(", ")", "{", "return", "acknowledgementInterval", "==", "null", "?", "0", ":", "acknowledgementInterval", ".", "longValue", "(", ")", ";", "}"], "nl": "Get the number of milliseconds for the acknowledgment interval.", "nlToks": ["Get", "the", "number", "of", "milliseconds", "for", "the", "acknowledgment", "interval", "."], "path": "primesign/cxf/tree/master/rt/ws/rm/src/main/java/org/apache/cxf/ws/rm/RMConfiguration.java", "idx": 125}
{"memberVariables": {"eventHandlerFactory": "HandlerFactory", "server": "NioServer", "wallet": "Wallet", "broadcaster": "TransactionBroadcaster", "protobufHandlerListener": "ProtobufParser.Listener<Protos.TwoWayChannelMessage>", "socketProtobufHandler": "ProtobufParser<Protos.TwoWayChannelMessage>", "timeoutSeconds": "int", "paymentChannelManager": "PaymentChannelServer", "closeReason": "PaymentChannelCloseException.CloseReason", "minAcceptedChannelSize": "Coin", "eventHandler": "ServerConnectionEventHandler"}, "code": ["void", "function", "(", ")", "{", "server", ".", "stopAsync", "(", ")", ";", "server", ".", "awaitTerminated", "(", ")", ";", "}"], "memberFunctions": {"bindAndStart": [["void", "int port"]], "onNewConnection": [["ServerConnectionEventHandler", "SocketAddress clientAddress"]]}, "className": "PaymentChannelServerListener", "renamed": ["void", "function", "(", ")", "{", "server", ".", "stopAsync", "(", ")", ";", "server", ".", "awaitTerminated", "(", ")", ";", "}"], "nl": "Closes all client connections currently connected gracefully. Note that this does not settle the actual payment channels (and broadcast payment transactions), which must be done using the  {@link StoredPaymentChannelServerStates} which manages the states for the associatedwallet.", "nlToks": ["Closes", "all", "client", "connections", "currently", "connected", "gracefully", ".", "Note", "that", "this", "does", "not", "settle", "the", "actual", "payment", "channels", "-LRB-", "and", "broadcast", "payment", "transactions", "-RRB-", ",", "which", "must", "be", "done", "using", "the", "-LCB-", "@link", "StoredPaymentChannelServerStates", "-RCB-", "which", "manages", "the", "states", "for", "the", "associatedwallet", "."], "path": "1000000000001/bitcoinj/tree/master/core/src/main/java/org/bitcoinj/protocols/channels/PaymentChannelServerListener.java", "idx": 128}
{"memberVariables": {"types=\"types\"": "String", "verbose=\"verbose\"": "String", "reportTopics=new HashMap<>()": "Map<String,Integer>", "dataflow=\"dataflow\"": "String", "should_report=new Stack<>()": "Stack<String>", "frontend=\"frontend\"": "String", "imports=\"imports\"": "String", "eq": "ErrorQueue", "loader=\"loader\"": "String", "time=\"time\"": "String", "debug=\"debug\"": "String", "cfg=\"cfg\"": "String", "context=\"context\"": "String", "visit=\"visit\"": "String", "resolver=\"resolver\"": "String", "topics=new LinkedHashSet<>()": "Collection<String>", "serialize=\"serialize\"": "String", "noReporting=true": "boolean", "errors=\"errors\"": "String"}, "code": ["void", "function", "(", "int", "level", ",", "String", "message", ",", "Position", "pos", ")", "{", "StringBuffer", "buf", "=", "new", "StringBuffer", "(", "message", ".", "length", "(", ")", "+", "level", ")", ";", "for", "(", "int", "j", "=", "1", ";", "j", "<", "level", ";", "j", "++", ")", "{", "buf", ".", "append", "(", "\" \"", ")", ";", "}", "buf", ".", "append", "(", "message", ")", ";", "getQueue", "(", ")", ".", "enqueue", "(", "ErrorInfo", ".", "DEBUG", ",", "buf", ".", "toString", "(", ")", ",", "pos", ")", ";", "}"], "memberFunctions": {"should_report": [["boolean", "String topic", "int level"], ["boolean", "String[] topics", "int level"], ["boolean", "Collection<String> topics", "int level"]], "setQueue": [["void", "ErrorQueue eq"]], "level": [["int", "String name"]], "pushTopic": [["void", "String topic"]], "popTopic": [["void"]], "addTopic": [["void", "String topic", "int level"]], "getQueue": [["ErrorQueue"]], "setTopic": [["void", "String topic", "int level"]]}, "className": "Report", "renamed": ["void", "function", "(", "int", "arg0", ",", "String", "arg1", ",", "Position", "arg2", ")", "{", "StringBuffer", "loc0", "=", "new", "StringBuffer", "(", "arg1", ".", "length", "(", ")", "+", "arg0", ")", ";", "for", "(", "int", "loc1", "=", "1", ";", "loc1", "<", "arg0", ";", "loc1", "++", ")", "{", "loc0", ".", "append", "(", "\"srini_string\"", ")", ";", "}", "loc0", ".", "append", "(", "arg1", ")", ";", "getQueue", "(", ")", ".", "enqueue", "(", "ErrorInfo", ".", "DEBUG", ",", "loc0", ".", "toString", "(", ")", ",", "arg2", ")", ";", "}"], "nl": "This is the standard way to report debugging information in the compiler.  It reports a message of the specified level (which controls the presentation of the message. To test whether such message should be reported, use \"should_report\". NOTE: This is a change of spec from earlier versions of Report. NOTE: This version takes an explicit Position, so that position info gets properly associated with the ErrorInfo that gets created by enqueue().", "nlToks": ["This", "is", "the", "standard", "way", "to", "report", "debugging", "information", "in", "the", "compiler", ".", "It", "reports", "a", "message", "of", "the", "specified", "level", "-LRB-", "which", "controls", "the", "presentation", "of", "the", "message", ".", "To", "test", "whether", "such", "message", "should", "be", "reported", ",", "use", "``", "should_report", "''", ".", "NOTE", ":", "This", "is", "a", "change", "of", "spec", "from", "earlier", "versions", "of", "Report", ".", "NOTE", ":", "This", "version", "takes", "an", "explicit", "Position", ",", "so", "that", "position", "info", "gets", "properly", "associated", "with", "the", "ErrorInfo", "that", "gets", "created", "by", "enqueue", "-LRB-", "-RRB-", "."], "path": "polyglot-compiler/polyglot/tree/master/src/polyglot/main/Report.java", "idx": 130}
{"memberVariables": {"_SignCertificateResponse_QNAME=new QName(\"http://platformlayer.org/auth/v1.0\",\"signCertificateResponse\")": "QName", "_Access_QNAME=new QName(\"http://platformlayer.org/auth/v1.0\",\"access\")": "QName", "_CheckServiceAccessResponse_QNAME=new QName(\"http://platformlayer.org/auth/v1.0\",\"checkServiceAccessResponse\")": "QName", "_SignCertificateRequest_QNAME=new QName(\"http://platformlayer.org/auth/v1.0\",\"signCertificateRequest\")": "QName", "_CertificateChainInfo_QNAME=new QName(\"http://platformlayer.org/auth/v1.0\",\"certificateChainInfo\")": "QName", "_RegistrationRequest_QNAME=new QName(\"http://platformlayer.org/auth/v1.0\",\"registrationRequest\")": "QName", "_User_QNAME=new QName(\"http://platformlayer.org/auth/v1.0\",\"user\")": "QName", "_AuthenticateResponse_QNAME=new QName(\"http://platformlayer.org/auth/v1.0\",\"authenticateResponse\")": "QName", "_CheckServiceAccessRequest_QNAME=new QName(\"http://platformlayer.org/auth/v1.0\",\"checkServiceAccessRequest\")": "QName", "_ValidateTokenResponse_QNAME=new QName(\"http://platformlayer.org/auth/v1.0\",\"validateTokenResponse\")": "QName", "_AuthenticateRequest_QNAME=new QName(\"http://platformlayer.org/auth/v1.0\",\"authenticateRequest\")": "QName", "_Auth_QNAME=new QName(\"http://platformlayer.org/auth/v1.0\",\"auth\")": "QName", "_ValidateAccess_QNAME=new QName(\"http://platformlayer.org/auth/v1.0\",\"validateAccess\")": "QName", "_RegistrationResponse_QNAME=new QName(\"http://platformlayer.org/auth/v1.0\",\"registrationResponse\")": "QName", "_Roles_QNAME=new QName(\"http://platformlayer.org/auth/v1.0\",\"roles\")": "QName"}, "code": ["Access", "function", "(", ")", "{", "return", "new", "Access", "(", ")", ";", "}"], "memberFunctions": {"createValidateTokenResponse": [["ValidateTokenResponse"], ["JAXBElement<ValidateTokenResponse>", "ValidateTokenResponse value"]], "createCertificateChainInfo": [["CertificateChainInfo"], ["JAXBElement<CertificateChainInfo>", "CertificateChainInfo value"]], "createRoleList": [["RoleList"]], "createCheckServiceAccessRequest": [["CheckServiceAccessRequest"], ["JAXBElement<CheckServiceAccessRequest>", "CheckServiceAccessRequest value"]], "createRole": [["Role"]], "createToken": [["Token"]], "createCheckServiceAccessResponse": [["CheckServiceAccessResponse"], ["JAXBElement<CheckServiceAccessResponse>", "CheckServiceAccessResponse value"]], "createPasswordCredentials": [["PasswordCredentials"]], "createAuthenticateResponse": [["AuthenticateResponse"], ["JAXBElement<AuthenticateResponse>", "AuthenticateResponse value"]], "createValidateAccess": [["ValidateAccess"], ["JAXBElement<ValidateAccess>", "ValidateAccess value"]], "createAuthenticateRequest": [["AuthenticateRequest"], ["JAXBElement<AuthenticateRequest>", "AuthenticateRequest value"]], "createAuth": [["Auth"], ["JAXBElement<Auth>", "Auth value"]], "createCertificateInfo": [["CertificateInfo"]], "createUserValidation": [["UserValidation"]], "createCertificateCredentials": [["CertificateCredentials"]], "createRegistrationResponse": [["RegistrationResponse"], ["JAXBElement<RegistrationResponse>", "RegistrationResponse value"]], "createUser": [["User"], ["JAXBElement<User>", "User value"]], "createRoles": [["JAXBElement<RoleList>", "RoleList value"]], "createRegistrationRequest": [["RegistrationRequest"], ["JAXBElement<RegistrationRequest>", "RegistrationRequest value"]], "createProjectValidation": [["ProjectValidation"]], "createSignCertificateResponse": [["SignCertificateResponse"], ["JAXBElement<SignCertificateResponse>", "SignCertificateResponse value"]], "createSignCertificateRequest": [["SignCertificateRequest"], ["JAXBElement<SignCertificateRequest>", "SignCertificateRequest value"]]}, "className": "ObjectFactory", "renamed": ["Access", "function", "(", ")", "{", "return", "new", "Access", "(", ")", ";", "}"], "nl": "Create an instance of  {@link Access }", "nlToks": ["Create", "an", "instance", "of", "-LCB-", "@link", "Access", "-RCB-"], "path": "platformlayer/platformlayer/tree/master/auth/client/src/generated/xjc/org/platformlayer/auth/v1/ObjectFactory.java", "idx": 131}
{"memberVariables": {"expectedDataUnitId": "Long", "seqNo": "Long", "dataSetId": "Long", "dataUnitId": "Long", "expectedValue": "String", "actualValue": "String", "expectedDataSetId": "Long", "errorCode": "String", "testId": "Long", "failedAttributeName": "String", "srcFileName": "String", "errorMsg": "String"}, "code": ["void", "function", "(", "String", "failedAttributeName", ")", "{", "this", ".", "failedAttributeName", "=", "failedAttributeName", ";", "}"], "memberFunctions": {"setExpectedValue": [["void", "String expectedValue"]], "getExpectedValue": [["String"]], "getExpectedDataSetId": [["Long"]], "setExpectedDataSetId": [["void", "Long expectedDataSetId"]], "setActualValue": [["void", "String actualValue"]], "getDataSetId": [["Long"]], "setSrcFileName": [["void", "String srcFileName"]], "getExpectedDataUnitId": [["Long"]], "setExpectedDataUnitId": [["void", "Long expectedDataUnitId"]], "getSrcFileName": [["String"]], "getSeqNo": [["Long"]], "getFailedAttributeName": [["String"]], "setTestId": [["void", "Long testId"]], "getTestId": [["Long"]], "setErrorCode": [["void", "String errorCode"]], "getActualValue": [["String"]], "getDataUnitId": [["Long"]], "setSeqNo": [["void", "Long seqNo"]], "setErrorMsg": [["void", "String errorMsg"]], "getErrorCode": [["String"]], "setDataUnitId": [["void", "Long dataUnitId"]], "setDataSetId": [["void", "Long dataSetId"]], "toString": [["String"]], "getErrorMsg": [["String"]]}, "className": "TestResultDetailsDTO", "renamed": ["void", "function", "(", "String", "arg0", ")", "{", "this", ".", "failedAttributeName", "=", "arg0", ";", "}"], "nl": "Sets the failed attribute name.", "nlToks": ["Sets", "the", "failed", "attribute", "name", "."], "path": "pkesireddy/portico_fletcher/tree/master/FetcherTesterService/src/main/java/org/ithaka/cm/fetchertester/model/TestResultDetailsDTO.java", "idx": 132}
{"memberVariables": {}, "code": ["List", "<", "String", ">", "function", "(", "String", "user", ")", "{", "List", "<", "String", ">", "groups", "=", "CommonUtils", ".", "getUnixGroups", "(", "user", ")", ";", "return", "new", "ArrayList", "<", ">", "(", "new", "LinkedHashSet", "<", ">", "(", "groups", ")", ")", ";", "}"], "memberFunctions": {}, "className": "ShellBasedUnixGroupsMapping", "renamed": ["List", "<", "String", ">", "function", "(", "String", "arg0", ")", "{", "List", "<", "String", ">", "loc0", "=", "CommonUtils", ".", "getUnixGroups", "(", "arg0", ")", ";", "return", "new", "ArrayList", "<", ">", "(", "new", "LinkedHashSet", "<", ">", "(", "loc0", ")", ")", ";", "}"], "nl": "Returns list of groups for a user.", "nlToks": ["Returns", "list", "of", "groups", "for", "a", "user", "."], "path": "poemlin/alluxio/tree/master/core/common/src/main/java/alluxio/security/group/provider/ShellBasedUnixGroupsMapping.java", "idx": 133}
{"memberVariables": {"logger=LoggerFactory.getLogger(getClass())": "org.slf4j.Logger", "clientEndpoint": "UDPEndPoint", "clientSession": "ClientSession"}, "code": ["void", "function", "(", ")", "{", "clientSession", ".", "getSocket", "(", ")", ".", "flush", "(", ")", ";", "}"], "memberFunctions": {"sendBlocking": [["void", "byte[] data"]], "read": [["int", "byte[] data"]], "getStatistics": [["UDTStatistics"]], "getSocket": [["Socket"]], "getOutputStream": [["OutputStream"]], "getEndpoint": [["UDPEndPoint"]], "send": [["void", "byte[] data"]], "getInputStream": [["InputStream"]], "connect": [["void", "String host", "int port"], ["void", "InetAddress address", "int port"]], "shutdown": [["void"]]}, "className": "UDTClient", "renamed": ["void", "function", "(", ")", "{", "clientSession", ".", "getSocket", "(", ")", ".", "flush", "(", ")", ";", "}"], "nl": "flush outstanding data (and make sure it is acknowledged)", "nlToks": ["flush", "outstanding", "data", "-LRB-", "and", "make", "sure", "it", "is", "acknowledged", "-RRB-"], "path": "adamfisk/littleshoot-client/tree/master/common/udt/src/main/java/udt/UDTClient.java", "idx": 134}
{"memberVariables": {"HAS_REMOTE_CONTROL_APIS=Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH": "boolean", "mActualMetadataEditor": "Object", "METADATA_KEY_ARTWORK=100": "int", "mActualRemoteControlClient": "Object"}, "code": ["MetadataEditorCompat", "function", "(", "int", "key", ",", "String", "value", ")", "{", "if", "(", "HAS_REMOTE_CONTROL_APIS", ")", "{", "(", "(", "RemoteControlClient", ".", "MetadataEditor", ")", "mActualMetadataEditor", ")", ".", "putString", "(", "key", ",", "value", ")", ";", "}", "return", "this", ";", "}"], "memberFunctions": {"setPlaybackState": [["void", "int state"]], "putBitmap": [["MetadataEditorCompat", "int key", "Bitmap bitmap"]], "apply": [["void"]], "removeFromMediaRouter": [["void", "MediaRouter router"]], "clear": [["void"]], "addToMediaRouter": [["void", "MediaRouter router"]], "getActualRemoteControlClientObject": [["Object"]], "putLong": [["MetadataEditorCompat", "int key", "long value"]], "editMetadata": [["MetadataEditorCompat", "boolean startEmpty"]], "setTransportControlFlags": [["void", "int transportControlFlags"]]}, "className": "RemoteControlClientCompat", "renamed": ["MetadataEditorCompat", "function", "(", "int", "arg0", ",", "String", "arg1", ")", "{", "if", "(", "HAS_REMOTE_CONTROL_APIS", ")", "{", "(", "(", "RemoteControlClient", ".", "MetadataEditor", ")", "mActualMetadataEditor", ")", ".", "putString", "(", "arg0", ",", "arg1", ")", ";", "}", "return", "this", ";", "}"], "nl": "Adds textual information to be displayed. Note that none of the information added after {@link #apply()} has been called, will be displayed.", "nlToks": ["Adds", "textual", "information", "to", "be", "displayed", ".", "Note", "that", "none", "of", "the", "information", "added", "after", "-LCB-", "@link", "#apply", "-LRB-", "-RRB-", "-RCB-", "has", "been", "called", ",", "will", "be", "displayed", "."], "path": "phpeng-ms/CastCompanionLibrary-android/tree/master/src/com/google/android/libraries/cast/companionlibrary/remotecontrol/RemoteControlClientCompat.java", "idx": 135}
{"memberVariables": {"ourInstance=new GeneralMotorCon()": "GeneralMotorCon", "spin90Time=3000": "int", "TAG=\"GMC\"": "String", "batLvl=0": "int", "threadTimer=0": "long", "spinSpeed=2": "int", "cmd": "CommandManager", "hoverTime=2000": "int", "speed=10": "int", "spin90Speed=50": "int", "drone": "ARDrone", "spinTime=50": "int"}, "code": ["void", "function", "(", ")", "{", "SpaceXGUI", ".", "getInstance", "(", ")", ".", "appendToConsole", "(", "TAG", ",", "\" - landing\"", ")", ";", "cmd", ".", "landing", "(", ")", ".", "doFor", "(", "2000", ")", ";", "}"], "memberFunctions": {"spin90Left": [["void"]], "spinRight": [["void"]], "takeoff": [["void"]], "forward": [["void", "int time"]], "spinLeft": [["void"]], "right": [["void"]], "lowerAltitude": [["void"]], "spin90Right": [["void"]], "setDrone": [["void", "ARDrone drone"]], "left": [["void"]], "backward": [["void", "int time"]], "getInstance": [["GeneralMotorCon"]], "setBatLvl": [["void", "int batLvl"]], "waitFor": [["void", "int millis"]], "getBatLvl": [["int"]], "onStop": [["void"]], "raiseAltitude": [["void"]]}, "className": "GeneralMotorCon", "renamed": ["void", "function", "(", ")", "{", "SpaceXGUI", ".", "getInstance", "(", ")", ".", "appendToConsole", "(", "TAG", ",", "\"srini_string\"", ")", ";", "cmd", ".", "landing", "(", ")", ".", "doFor", "(", "2000", ")", ";", "}"], "nl": "Landing Land the drone", "nlToks": ["Landing", "Land", "the", "drone"], "path": "02343Gruppe2/02343_Ardrone/tree/master/src/algo/GeneralMotorCon.java", "idx": 136}
{"memberVariables": {"metadata": "Map<String,String>", "maxEntities": "int", "minEntities": "int", "name": "String", "cooldown": "int"}, "code": ["Builder", "function", "(", "Map", "<", "String", ",", "String", ">", "metadata", ")", "{", "this", ".", "metadata", "=", "metadata", ";", "return", "this", ";", "}"], "memberFunctions": {"toBuilder": [["Builder"]], "getMetadata": [["ImmutableMap<String,String>"]], "metadata": [["Builder", "Map<String,String> metadata"]], "getName": [["String"]], "getMaxEntities": [["int"]], "string": [["ToStringHelper"]], "minEntities": [["Builder", "int minEntities"]], "compareTo": [["int", "GroupConfiguration that"]], "getCooldown": [["int"]], "getMinEntities": [["int"]], "maxEntities": [["Builder", "int maxEntities"]], "build": [["GroupConfiguration"]], "hashCode": [["int"]], "equals": [["boolean", "Object obj"]], "builder": [["Builder"]], "name": [["Builder", "String name"]], "cooldown": [["Builder", "int cooldown"]], "fromGroupConfiguration": [["Builder", "GroupConfiguration in"]], "toString": [["String"]]}, "className": "GroupConfiguration", "renamed": ["Builder", "function", "(", "Map", "<", "String", ",", "String", ">", "arg0", ")", "{", "this", ".", "metadata", "=", "arg0", ";", "return", "this", ";", "}"], "nl": "Optional. This optional parameter specifies custom metadata for your group configuration. You can use the metadata parameter for customer automation, but it does not change any functionality in Auto Scale. There currently is no limitation on depth.", "nlToks": ["Optional", ".", "This", "optional", "parameter", "specifies", "custom", "metadata", "for", "your", "group", "configuration", ".", "You", "can", "use", "the", "metadata", "parameter", "for", "customer", "automation", ",", "but", "it", "does", "not", "change", "any", "functionality", "in", "Auto", "Scale", ".", "There", "currently", "is", "no", "limitation", "on", "depth", "."], "path": "pimenas/jclouds-labs-openstack/tree/master/rackspace-autoscale/src/main/java/org/jclouds/rackspace/autoscale/v1/domain/GroupConfiguration.java", "idx": 137}
{"memberVariables": {"EXAMPLE=\"$GPRMC,120044.567,A,6011.552,N,02501.941,E,000.0,360.0,160705,006.1,E,A*0B\"": "String", "rmc": "RMCParser", "empty": "RMCParser"}, "code": ["void", "function", "(", ")", "{", "assertTrue", "(", "rmc", ".", "getVariation", "(", ")", "<", "0", ")", ";", "assertEquals", "(", "CompassPoint", ".", "EAST", ",", "rmc", ".", "getDirectionOfVariation", "(", ")", ")", ";", "}"], "memberFunctions": {"testSetFaaModeWhenOmitted": [["void"]], "testSetDirectionOfVariationWithInvalidDirection": [["void"]], "testGetCorrectedCourse": [["void"]], "testGetDataStatus": [["void"]], "testConstructor": [["void"]], "testGetTime": [["void"]], "testSetCourse": [["void"]], "testSetFaaMode": [["void"]], "testSetVariation": [["void"]], "setUp": [["void"]], "testGetMonth": [["void"]], "testGetCourse": [["void"]], "testSetDate": [["void"]], "testGetYear": [["void"]], "testSetDataStatus": [["void"]], "testGetDate": [["void"]], "testGetMagneticVariation": [["void"]], "testSetPosition": [["void"]], "testGetPosition": [["void"]], "testSetDirectionOfVariation": [["void"]], "testSetTime": [["void"]], "testGetDay": [["void"]], "testGetSpeed": [["void"]], "testGetFaaMode": [["void"]], "testSetSpeed": [["void"]]}, "className": "RMCTest", "renamed": ["void", "function", "(", ")", "{", "assertTrue", "(", "rmc", ".", "getVariation", "(", ")", "<", "0", ")", ";", "assertEquals", "(", "CompassPoint", ".", "EAST", ",", "rmc", ".", "getDirectionOfVariation", "(", ")", ")", ";", "}"], "nl": "Test method for {@link net.sf.marineapi.nmea.parser.RMCParser#getDirectionOfVariation()}.", "nlToks": ["Test", "method", "for", "-LCB-", "@link", "net.sf.marineapi.nmea.parser.RMCParser", "#getDirectionOfVariation", "-LRB-", "-RRB-", "-RCB-", "."], "path": "pkoziol/marine-api/tree/master/src/test/java/net/sf/marineapi/nmea/parser/RMCTest.java", "idx": 139}
{"memberVariables": {"as": "AntiSamy", "servletUtil": "ServletXssUtil", "policy": "Policy"}, "code": ["String", "function", "(", "String", "dirty", ")", "{", "String", "clean", "=", "null", ";", "if", "(", "dirty", "!=", "null", ")", "{", "clean", "=", "StringEscapeUtils", ".", "escapeJavaScript", "(", "dirty", ")", ".", "replaceAll", "(", "\"(?i)javascript\"", ",", "\"\"", ")", ";", "}", "return", "clean", ";", "}"], "memberFunctions": {"getCleanInput": [["String", "HttpServletRequest httpServletRequest", "String parameter"], ["String", "String dirty"]], "getCleanerInput": [["String", "String dirty"], ["String", "HttpServletRequest request", "String parameter"]], "getInstance": [["ServletXssUtil"]]}, "className": "ServletXssUtil", "renamed": ["String", "function", "(", "String", "arg0", ")", "{", "String", "loc0", "=", "null", ";", "if", "(", "arg0", "!=", "null", ")", "{", "loc0", "=", "StringEscapeUtils", ".", "escapeJavaScript", "(", "arg0", ")", ".", "replaceAll", "(", "\"srini_string\"", ",", "\"srini_string\"", ")", ";", "}", "return", "loc0", ";", "}"], "nl": "Escapes JavaScript characters for the given string. Also strips all occurrences of the word \"javascript\" from the string.", "nlToks": ["Escapes", "JavaScript", "characters", "for", "the", "given", "string", ".", "Also", "strips", "all", "occurrences", "of", "the", "word", "``", "javascript", "''", "from", "the", "string", "."], "path": "adamabeshouse/cbioportal/tree/master/core/src/main/java/org/mskcc/cbio/portal/servlet/ServletXssUtil.java", "idx": 140}
{"memberVariables": {"identifier": "String", "wsseValueType": "String", "useKeyIdentifier": "boolean", "useDirectReference": "boolean", "wsse11TokenType": "String"}, "code": ["String", "function", "(", ")", "{", "return", "wsseValueType", ";", "}"], "memberFunctions": {"setWsse11TokenType": [["void", "String wsse11TokenType"]], "setWsseValueType": [["void", "String wsseValueType"]], "getWsse11TokenType": [["String"]], "getIdentifier": [["String"]], "setIdentifier": [["void", "String identifier"]], "setUseDirectReference": [["void", "boolean useDirectReference"]], "isUseKeyIdentifier": [["boolean"]], "isUseDirectReference": [["boolean"]], "setUseKeyIdentifier": [["void", "boolean useKeyIdentifier"]]}, "className": "TokenReference", "renamed": ["String", "function", "(", ")", "{", "return", "wsseValueType", ";", "}"], "nl": "Get the wsse ValueType attribute", "nlToks": ["Get", "the", "wsse", "ValueType", "attribute"], "path": "primesign/cxf/tree/master/services/sts/sts-core/src/main/java/org/apache/cxf/sts/token/provider/TokenReference.java", "idx": 142}
{"memberVariables": {"lat=0.0": "double", "id_str=null": "String", "screen_name=\"unknown\"": "String", "place_name=\"unknown\"": "String", "image=null": "String", "user_name=\"unknown@unknown\"": "String", "lng=0.0": "double", "created_at=null": "Date", "loc_radius=0": "int", "user_id=\"unknown\"": "String", "text=\"\"": "String", "extras=new ArrayList<String>()": "ArrayList<String>"}, "code": ["GenericJSONBuilder", "function", "(", "String", "user_id_", ")", "{", "user_id", "=", "user_id_", ";", "return", "this", ";", "}"], "memberFunctions": {"setIDstr": [["GenericJSONBuilder", "String id_str_"]], "setPlaceName": [["GenericJSONBuilder", "String name"]], "addText": [["GenericJSONBuilder", "String text_"]], "addField": [["GenericJSONBuilder", "String key", "String value"]], "insert": [["void", "Insertable msg"]], "setCoordinateRadius": [["GenericJSONBuilder", "int radius"]], "setAuthor": [["GenericJSONBuilder", "String author", "String domain"]], "builder": [["GenericJSONBuilder"]], "setCoordinate": [["GenericJSONBuilder", "double longtitude", "double latitude"]], "setCreatedTime": [["GenericJSONBuilder", "Date createdTime"]], "persist": [["void"]], "buildFieldJSON": [["String"]], "setImage": [["GenericJSONBuilder", "String link_"]]}, "className": "DAOWrapper", "renamed": ["GenericJSONBuilder", "function", "(", "String", "arg0", ")", "{", "user_id", "=", "arg0", ";", "return", "this", ";", "}"], "nl": "Not required", "nlToks": ["Not", "required"], "path": "adarsh-ideal/loklak_server/tree/master/src/org/loklak/data/DAOWrapper.java", "idx": 143}
{"memberVariables": {"resources": "List<Resource>", "LOGGER=LoggerFactory.getLogger(PropertyLoader.class)": "Logger", "bag=null": "Map<Object,Object>"}, "code": ["List", "<", "Resource", ">", "function", "(", ")", "{", "return", "resources", ";", "}"], "memberFunctions": {"getProperty": [["String", "String key"]], "loadProperties": [["void"]], "setResources": [["void", "List<Resource> resources"]]}, "className": "PropertyLoader", "renamed": ["List", "<", "Resource", ">", "function", "(", ")", "{", "return", "resources", ";", "}"], "nl": "Gets the resources.", "nlToks": ["Gets", "the", "resources", "."], "path": "pkesireddy/portico_fletcher/tree/master/FetcherTesterService/src/main/java/org/ithaka/cm/fetchertester/util/PropertyLoader.java", "idx": 144}
{"memberVariables": {"logger": "Logger", "overrides=new Properties()": "Properties", "removals=new TreeSet<String>()": "Set<String>"}, "code": ["boolean", "function", "(", "String", "key", ")", "{", "return", "getString", "(", "key", ",", "null", ")", "!=", "null", ";", "}"], "memberFunctions": {"read": [["Properties"]], "getFilesize": [["int", "String name", "int defaultValue"], ["long", "String key", "long defaultValue"]], "getSettings": [["Properties"]], "getInteger": [["int", "String name", "int defaultValue"]], "getString": [["String", "String name", "String defaultValue"]], "removeSetting": [["void", "String key"]], "saveSettings": [["boolean"], ["boolean", "Map<String,String> updatedSettings"]], "getMap": [["Map<String,String>", "String name"]], "getStrings": [["List<String>", "String name"], ["List<String>", "String name", "String separator"]], "overrideSetting": [["void", "String key", "String value"], ["void", "String key", "int value"], ["void", "String key", "boolean value"]], "getLong": [["long", "String name", "long defaultValue"]], "getChar": [["char", "String name", "char defaultValue"]], "getRequiredString": [["String", "String name"]], "getAllKeys": [["List<String>", "String startingWith"]], "merge": [["void", "IStoredSettings settings"]], "getBoolean": [["boolean", "String name", "boolean defaultValue"]], "getIntegers": [["List<Integer>", "String name"], ["List<Integer>", "String name", "String separator"]]}, "className": "IStoredSettings", "renamed": ["boolean", "function", "(", "String", "arg0", ")", "{", "return", "getString", "(", "arg0", ",", "null", ")", "!=", "null", ";", "}"], "nl": "Tests for the existence of a setting.", "nlToks": ["Tests", "for", "the", "existence", "of", "a", "setting", "."], "path": "pombreda/gitblit/tree/master/src/main/java/com/gitblit/IStoredSettings.java", "idx": 145}
{"memberVariables": {"types=new HashMap<String,ResourceTypeHandler>(4)": "Map<String,ResourceTypeHandler>", "FLASH=new ResourceTypeHandler(\"Flash\")": "ResourceTypeHandler", "MEDIA=new ResourceTypeHandler(\"Media\")": "ResourceTypeHandler", "FILE=new ResourceTypeHandler(\"File\")": "ResourceTypeHandler", "name": "String", "IMAGE=new ResourceTypeHandler(\"Image\")": "ResourceTypeHandler", "paths=new HashMap<ResourceTypeHandler,String>(4)": "Map<ResourceTypeHandler,String>"}, "code": ["ResourceTypeHandler", "function", "(", "final", "String", "name", ")", "{", "try", "{", "return", "ResourceTypeHandler", ".", "valueOf", "(", "name", ")", ";", "}", "catch", "(", "Exception", "e", ")", "{", "return", "null", ";", "}", "}"], "memberFunctions": {"getName": [["String"]], "valueOf": [["ResourceTypeHandler", "final String name"]], "hashCode": [["int"]], "isValid": [["boolean", "final String name"]], "equals": [["boolean", "Object obj"]], "getPath": [["String"]], "getDefaultResourceType": [["ResourceTypeHandler", "final String name"]], "toString": [["String"]]}, "className": "ResourceTypeHandler", "renamed": ["ResourceTypeHandler", "function", "(", "final", "String", "arg0", ")", "{", "try", "{", "return", "ResourceTypeHandler", ".", "valueOf", "(", "arg0", ")", ";", "}", "catch", "(", "Exception", "loc0", ")", "{", "return", "null", ";", "}", "}"], "nl": "A wrapper for  {@link #valueOf(String)}. It returns null instead of throwing an exception.", "nlToks": ["A", "wrapper", "for", "-LCB-", "@link", "#valueOf", "-LRB-", "String", "-RRB-", "-RCB-", ".", "It", "returns", "null", "instead", "of", "throwing", "an", "exception", "."], "path": "pobing/company/tree/master/maxcomy/src/net/fckeditor/handlers/ResourceTypeHandler.java", "idx": 146}
{"memberVariables": {}, "code": ["void", "function", "(", "Notation", "notation", ")", "{", "unhandled", "(", "notation", ")", ";", "}"], "memberFunctions": {"unhandled": [["void", "Node aNode"]], "testDocumentType": [["void", "DocumentType doctype"]], "testComment": [["void", "Comment comment"]], "testNode": [["void", "Node aNode", "NodeTest forTest"]], "testElement": [["void", "Element element"]], "testEntity": [["void", "Entity entity"]], "noMoreNodes": [["void", "NodeTest forTest"]], "testAttribute": [["void", "Attr attribute"]], "testText": [["void", "Text text"]], "testEntityReference": [["void", "EntityReference reference"]], "testCDATASection": [["void", "CDATASection cdata"]], "testProcessingInstruction": [["void", "ProcessingInstruction instr"]]}, "className": "AbstractNodeTester", "renamed": ["void", "function", "(", "Notation", "arg0", ")", "{", "unhandled", "(", "arg0", ")", ";", "}"], "nl": "Template delegator for testNode() method. OVERRIDE to add custom logic", "nlToks": ["Template", "delegator", "for", "testNode", "-LRB-", "-RRB-", "method", ".", "OVERRIDE", "to", "add", "custom", "logic"], "path": "phbenisc/xmlunit/tree/master/xmlunit-legacy/src/main/java/org/custommonkey/xmlunit/AbstractNodeTester.java", "idx": 147}
{"memberVariables": {"failed=new AtomicInteger()": "AtomicInteger", "totalElapsed=new AtomicLong()": "AtomicLong", "active=new AtomicInteger()": "AtomicInteger", "succeededMaxElapsed=new AtomicLong()": "AtomicLong", "SERVICE_STATISTICS=new ConcurrentHashMap<String,RpcStatus>()": "ConcurrentMap<String,RpcStatus>", "METHOD_STATISTICS=new ConcurrentHashMap<String,ConcurrentMap<String,RpcStatus>>()": "ConcurrentMap<String,ConcurrentMap<String,RpcStatus>>", "values=new ConcurrentHashMap<String,Object>()": "ConcurrentMap<String,Object>", "total=new AtomicLong()": "AtomicLong", "failedElapsed=new AtomicLong()": "AtomicLong", "maxElapsed=new AtomicLong()": "AtomicLong", "failedMaxElapsed=new AtomicLong()": "AtomicLong"}, "code": ["long", "function", "(", ")", "{", "long", "total", "=", "getTotal", "(", ")", ";", "if", "(", "total", "==", "0", ")", "{", "return", "0", ";", "}", "return", "getTotalElapsed", "(", ")", "/", "total", ";", "}"], "memberFunctions": {"getFailedAverageElapsed": [["long"]], "getSucceededMaxElapsed": [["long"]], "set": [["void", "String key", "Object value"]], "getSucceededElapsed": [["long"]], "getSucceeded": [["long"]], "getSucceededAverageElapsed": [["long"]], "getMaxElapsed": [["long"]], "getStatus": [["RpcStatus", "URL url"], ["RpcStatus", "URL url", "String methodName"]], "removeStatus": [["void", "URL url"], ["void", "URL url", "String methodName"]], "getAverageTps": [["long"]], "getFailedElapsed": [["long"]], "getFailedMaxElapsed": [["long"]], "get": [["Object", "String key"]], "endCount": [["void", "URL url", "String methodName", "long elapsed", "boolean succeeded"], ["void", "RpcStatus status", "long elapsed", "boolean succeeded"]], "getActive": [["int"]], "getTotal": [["long"]], "getTotalElapsed": [["long"]], "beginCount": [["void", "URL url", "String methodName"], ["void", "RpcStatus status"]], "getFailed": [["int"]]}, "className": "RpcStatus", "renamed": ["long", "function", "(", ")", "{", "long", "loc0", "=", "getTotal", "(", ")", ";", "if", "(", "loc0", "==", "0", ")", "{", "return", "0", ";", "}", "return", "getTotalElapsed", "(", ")", "/", "loc0", ";", "}"], "nl": "get average elapsed.", "nlToks": ["get", "average", "elapsed", "."], "path": "acupple/dubbo/tree/master/dubbo-rpc/dubbo-rpc-api/src/main/java/com/alibaba/dubbo/rpc/RpcStatus.java", "idx": 148}
{"memberVariables": {"errorLevelFolder=0": "int", "tooltip": "String", "errorLevel=0": "int", "value=\"\"": "String"}, "code": ["void", "function", "(", ")", "{", "this", ".", "errorLevel", "=", "0", ";", "}"], "memberFunctions": {"restoreFolderErrorLevel": [["void"]], "setKO": [["void"], ["void", "boolean match"]], "isWarning": [["boolean"]], "setErrorLevel": [["void", "int errorlevel"]], "getErrorLevel": [["int"]], "analyseTrack": [["String", "String tagValue", "String matchValue", "String field"]], "analyseTrackYear": [["String", "String tagValue", "String matchValue"]], "formatNumber": [["String", "int value"]], "colorField": [["String", "String text", "int errorLevel"], ["String", "String text", "int errorLevel", "boolean html"]], "getValue": [["String"]], "analyseTrackComment": [["String", "String tagValue", "String matchValue"]], "analyseTrackBpm": [["String", "Float tagValue", "Float matchValue"]], "hashCode": [["int"]], "setValue": [["void", "String value"]], "equals": [["boolean", "Object obj"]], "getDisplayToolTip": [["String"]], "toString": [["String"]], "isNotValid": [["boolean"]], "getDisplayColor": [["Color"]], "analyseTrackNumber": [["String", "String tagValue", "String matchValue"]], "getDisplayText": [["String"]], "setWarning": [["void"], ["void", "boolean match"]], "analyseTrackString": [["String", "String tagValue", "String matchValue"]], "isKO": [["boolean"]]}, "className": "FolderInfoResult", "renamed": ["void", "function", "(", ")", "{", "this", ".", "errorLevel", "=", "0", ";", "}"], "nl": "Sets result as OK.  Always for match, so not touching errorLevelFolder", "nlToks": ["Sets", "result", "as", "OK", ".", "Always", "for", "match", ",", "so", "not", "touching", "errorLevelFolder"], "path": "phramusca/JaMuz/tree/master/src/jamuz/process/check/FolderInfoResult.java", "idx": 149}
{"memberVariables": {"EXAMPLE=\"$GPRMB,A,0.00,R,,RUSKI,5536.200,N,01436.500,E,432.3,234.9,,V*58\"": "String", "rmb": "RMBSentence", "empty": "RMBSentence"}, "code": ["void", "function", "(", ")", "{", "try", "{", "rmb", ".", "setBearing", "(", "-", "0.001", ")", ";", "fail", "(", "\"Did not throw exception\"", ")", ";", "}", "catch", "(", "IllegalArgumentException", "e", ")", "{", "assertTrue", "(", "e", ".", "getMessage", "(", ")", ".", "contains", "(", "\"0..360\"", ")", ")", ";", "}", "}"], "memberFunctions": {"testGetVelocity": [["void"]], "testGetCrossTrackError": [["void"]], "testArrivalStatus": [["void"]], "testSetDestination": [["void"]], "testSetBearing": [["void"]], "testSetSteerToWithNull": [["void"]], "testSetOriginId": [["void"]], "testSetStatus": [["void"]], "testConstructor": [["void"]], "testGetBearing": [["void"]], "testSetSteerTo": [["void"]], "testGetSteerTo": [["void"]], "testSetVelocity": [["void"]], "testGetOriginId": [["void"]], "testSetVelocityWithNegativeValue": [["void"]], "setUp": [["void"]], "testGetStatus": [["void"]], "testSetBearingWithValueGreaterThanAllowed": [["void"]], "testGetRange": [["void"]], "testSetRange": [["void"]], "testGetDestination": [["void"]], "testSetCrossTrackError": [["void"]]}, "className": "RMBTest", "renamed": ["void", "function", "(", ")", "{", "try", "{", "rmb", ".", "setBearing", "(", "-", "0.001", ")", ";", "fail", "(", "\"srini_string\"", ")", ";", "}", "catch", "(", "IllegalArgumentException", "loc0", ")", "{", "assertTrue", "(", "loc0", ".", "getMessage", "(", ")", ".", "contains", "(", "\"srini_string\"", ")", ")", ";", "}", "}"], "nl": "Test method for {@link net.sf.marineapi.nmea.parser.RMBParser#setBearing(double)} .", "nlToks": ["Test", "method", "for", "-LCB-", "@link", "net.sf.marineapi.nmea.parser.RMBParser", "#setBearing", "-LRB-", "double", "-RRB-", "-RCB-", "."], "path": "pkoziol/marine-api/tree/master/src/test/java/net/sf/marineapi/nmea/parser/RMBTest.java", "idx": 152}
{"memberVariables": {"mFileSystemMaster": "FileSystemMaster"}, "code": ["AlluxioURI", "function", "(", "long", "fileId", ")", "{", "return", "mFileSystemMaster", ".", "getPath", "(", "fileId", ")", ";", "}"], "memberFunctions": {"getFileId": [["long", "AlluxioURI path"]], "getLostFiles": [["List<Long>"]], "getWorkerInfoList": [["List<WorkerInfo>"]], "getFileBlockInfoList": [["List<FileBlockInfo>", "AlluxioURI path"]], "getFileInfo": [["FileInfo", "long fileId"]], "getFilePersistenceState": [["PersistenceState", "long fileId"]]}, "className": "FileSystemMasterView", "renamed": ["AlluxioURI", "function", "(", "long", "arg0", ")", "{", "return", "mFileSystemMaster", ".", "getPath", "(", "arg0", ")", ";", "}"], "nl": "Gets the path of a file with the given id.", "nlToks": ["Gets", "the", "path", "of", "a", "file", "with", "the", "given", "id", "."], "path": "poemlin/alluxio/tree/master/core/server/src/main/java/alluxio/master/file/meta/FileSystemMasterView.java", "idx": 153}
{"memberVariables": {"ZERO_HASH=new Sha256Hash(new byte[32])": "Sha256Hash", "bytes": "byte[]"}, "code": ["int", "function", "(", ")", "{", "return", "(", "bytes", "[", "31", "]", "&", "0xFF", ")", "|", "(", "(", "bytes", "[", "30", "]", "&", "0xFF", ")", "<<", "8", ")", "|", "(", "(", "bytes", "[", "29", "]", "&", "0xFF", ")", "<<", "16", ")", "|", "(", "(", "bytes", "[", "28", "]", "&", "0xFF", ")", "<<", "24", ")", ";", "}"], "memberFunctions": {"createDouble": [["Sha256Hash", "byte[] contents"]], "hashFileContents": [["Sha256Hash", "File f"]], "equals": [["boolean", "Object o"]], "create": [["Sha256Hash", "byte[] contents"]], "toBigInteger": [["BigInteger"]], "toString": [["String"]], "duplicate": [["Sha256Hash"]], "compareTo": [["int", "Sha256Hash o"]], "getBytes": [["byte[]"]]}, "className": "Sha256Hash", "renamed": ["int", "function", "(", ")", "{", "return", "(", "bytes", "[", "31", "]", "&", "0xFF", ")", "|", "(", "(", "bytes", "[", "30", "]", "&", "0xFF", ")", "<<", "8", ")", "|", "(", "(", "bytes", "[", "29", "]", "&", "0xFF", ")", "<<", "16", ")", "|", "(", "(", "bytes", "[", "28", "]", "&", "0xFF", ")", "<<", "24", ")", ";", "}"], "nl": "Hash code of the byte array as calculated by  {@link Arrays#hashCode()}. Note the difference between a SHA256 secure bytes and the type of quick/dirty bytes used by the Java hashCode method which is designed for use in bytes tables.", "nlToks": ["Hash", "code", "of", "the", "byte", "array", "as", "calculated", "by", "-LCB-", "@link", "Arrays", "#hashCode", "-LRB-", "-RRB-", "-RCB-", ".", "Note", "the", "difference", "between", "a", "SHA256", "secure", "bytes", "and", "the", "type", "of", "quick/dirty", "bytes", "used", "by", "the", "Java", "hashCode", "method", "which", "is", "designed", "for", "use", "in", "bytes", "tables", "."], "path": "1000000000001/bitcoinj/tree/master/core/src/main/java/org/bitcoinj/core/Sha256Hash.java", "idx": 154}
{"memberVariables": {"INTEGER=3": "byte", "FIELD_REF=9": "byte", "DOUBLE=6": "byte", "UTF8=1": "byte", "STRING=8": "byte", "FLOAT=4": "byte", "METHOD_REF=10": "byte", "NAME_AND_TYPE=12": "byte", "METHOD_TYPE=16": "byte", "LONG=5": "byte", "tag": "int", "METHOD_HANDLE=15": "byte", "value": "Object", "INTERFACE_METHOD_REF=11": "byte", "CLASS=7": "byte", "INVOKE_DYNAMIC=18": "byte"}, "code": ["int", "function", "(", ")", "{", "return", "tag", ";", "}"], "memberFunctions": {"hashCode": [["int"]], "equals": [["boolean", "Object other"]], "value": [["Object"]]}, "className": "Constant", "renamed": ["int", "function", "(", ")", "{", "return", "tag", ";", "}"], "nl": "Get the tag of the constant.", "nlToks": ["Get", "the", "tag", "of", "the", "constant", "."], "path": "polyglot-compiler/polyglot/tree/master/src/polyglot/types/reflect/Constant.java", "idx": 155}
{"memberVariables": {"COMPACT_SERIALIZED_SIZE=Block.HEADER_SIZE + CHAIN_WORK_BYTES + 4": "int", "chainWork": "BigInteger", "CHAIN_WORK_BYTES=12": "int", "header": "Block", "serialVersionUID=-6097565241243701771L": "long", "EMPTY_BYTES=new byte[CHAIN_WORK_BYTES]": "byte[]", "height": "int"}, "code": ["Block", "function", "(", ")", "{", "return", "header", ";", "}"], "memberFunctions": {"getHeight": [["int"]], "getChainWork": [["BigInteger"]], "deserializeCompact": [["StoredBlock", "NetworkParameters params", "ByteBuffer buffer"]], "build": [["StoredBlock", "Block block"]], "serializeCompact": [["void", "ByteBuffer buffer"]], "hashCode": [["int"]], "equals": [["boolean", "Object other"]], "moreWorkThan": [["boolean", "StoredBlock other"]], "toString": [["String"]], "getPrev": [["StoredBlock", "BlockStore store"]]}, "className": "StoredBlock", "renamed": ["Block", "function", "(", ")", "{", "return", "header", ";", "}"], "nl": "The block header this object wraps. The referenced block object must not have any transactions in it.", "nlToks": ["The", "block", "header", "this", "object", "wraps", ".", "The", "referenced", "block", "object", "must", "not", "have", "any", "transactions", "in", "it", "."], "path": "plncoin/plncoin-and/tree/master/plncoinj/core/src/main/java/com/google/bitcoin/core/StoredBlock.java", "idx": 156}
{"memberVariables": {"request": "HttpServletRequest", "toolbarSet=PropertiesLoader.getProperty(\"fckeditor.toolbarSet\")": "String", "instanceName": "String", "height=PropertiesLoader.getProperty(\"fckeditor.height\")": "String", "basePath=PropertiesLoader.getProperty(\"fckeditor.basePath\")": "String", "config": "FCKeditorConfig", "value": "String", "width=PropertiesLoader.getProperty(\"fckeditor.width\")": "String"}, "code": ["FCKeditorConfig", "function", "(", ")", "{", "return", "config", ";", "}"], "memberFunctions": {"createHtml": [["String"]], "setInstanceName": [["void", "final String instanceName"]], "setValue": [["void", "final String value"]], "escapeXml": [["String", "String str"]], "createInputForVariable": [["String", "final String name", "final String id", "final String value"]], "toString": [["String"]], "setToolbarSet": [["void", "final String toolbarSet"]], "setBasePath": [["void", "final String basePath"]], "setWidth": [["void", "final String width"]], "setHeight": [["void", "final String height"]], "setConfig": [["void", "FCKeditorConfig config"]]}, "className": "FCKeditor", "renamed": ["FCKeditorConfig", "function", "(", ")", "{", "return", "config", ";", "}"], "nl": "Get the advanced configuration set. By adding elements to this collection you can override the settings specified in the config.js file.", "nlToks": ["Get", "the", "advanced", "configuration", "set", ".", "By", "adding", "elements", "to", "this", "collection", "you", "can", "override", "the", "settings", "specified", "in", "the", "config.js", "file", "."], "path": "pobing/company/tree/master/maxcomy/src/net/fckeditor/FCKeditor.java", "idx": 157}
{"memberVariables": {"additionDifference": "Difference", "deletionDifference": "Difference"}, "code": ["Difference", "function", "(", ")", "{", "return", "additionDifference", ";", "}"], "memberFunctions": {"getDeletionDifference": [["Difference"]], "setAdditionDifference": [["void", "Difference additionDifference"]], "setDeletionDifference": [["void", "Difference deletionDifference"]]}, "className": "HighLevelChangeRenaming", "renamed": ["Difference", "function", "(", ")", "{", "return", "additionDifference", ";", "}"], "nl": "Get the addition difference.", "nlToks": ["Get", "the", "addition", "difference", "."], "path": "plt-tud/r43ples/tree/master/src/main/java/de/tud/plt/r43ples/merging/model/structure/HighLevelChangeRenaming.java", "idx": 158}
{"memberVariables": {"LOG=Logger.getLogger(NotationNameImpl.class)": "Logger", "name": "String", "icon": "Icon", "notations=new ArrayList<NotationName>()": "ArrayList<NotationName>", "version": "String"}, "code": ["String", "function", "(", ")", "{", "return", "version", ";", "}"], "memberFunctions": {"getNotationNameString": [["String", "String k1", "String k2"]], "getName": [["String"]], "fireEvent": [["void", "int eventType", "NotationName nn"]], "removeNotation": [["boolean", "NotationName theNotation"]], "getIcon": [["Icon"]], "getConfigurationValue": [["String"]], "getTitle": [["String"]], "findNotation": [["NotationName", "String s"]], "getNotation": [["NotationName", "String k1"], ["NotationName", "String k1", "String k2"]], "getAvailableNotations": [["List<NotationName>"]], "toString": [["String"]], "makeNotation": [["NotationName", "String k1", "String k2", "Icon icon"]], "sameNotationAs": [["boolean", "NotationName nn"]]}, "className": "NotationNameImpl", "renamed": ["String", "function", "(", ")", "{", "return", "version", ";", "}"], "nl": "Accessor for the language version.", "nlToks": ["Accessor", "for", "the", "language", "version", "."], "path": "pichiliani/CoArgoUML/tree/master/v0.24/fonte/src/argouml-app/src/org/argouml/notation/NotationNameImpl.java", "idx": 159}
{"memberVariables": {"real_next": "int", "vstack": "Stack<Integer>", "real_stack": "Stack<Symbol>"}, "code": ["void", "function", "(", ")", "{", "Symbol", "stack_sym", ";", "if", "(", "real_next", ">=", "real_stack", ".", "size", "(", ")", ")", "return", ";", "stack_sym", "=", "real_stack", ".", "elementAt", "(", "real_stack", ".", "size", "(", ")", "-", "1", "-", "real_next", ")", ";", "real_next", "++", ";", "vstack", ".", "push", "(", "new", "Integer", "(", "stack_sym", ".", "parse_state", ")", ")", ";", "}"], "memberFunctions": {"pop": [["void"]], "top": [["int"]], "push": [["void", "int state_num"]], "empty": [["boolean"]]}, "className": "virtual_parse_stack", "renamed": ["void", "function", "(", ")", "{", "Symbol", "loc0", ";", "if", "(", "real_next", ">=", "real_stack", ".", "size", "(", ")", ")", "return", ";", "loc0", "=", "real_stack", ".", "elementAt", "(", "real_stack", ".", "size", "(", ")", "-", "1", "-", "real_next", ")", ";", "real_next", "++", ";", "vstack", ".", "push", "(", "new", "Integer", "(", "loc0", ".", "parse_state", ")", ")", ";", "}"], "nl": "Transfer an element from the real to the virtual stack.  This assumes  that the virtual stack is currently empty.", "nlToks": ["Transfer", "an", "element", "from", "the", "real", "to", "the", "virtual", "stack", ".", "This", "assumes", "that", "the", "virtual", "stack", "is", "currently", "empty", "."], "path": "polyglot-compiler/polyglot/tree/master/tools/java_cup/src/java_cup/runtime/virtual_parse_stack.java", "idx": 160}
{"memberVariables": {"future": "ListenableFuture<?>", "countDownLatch": "CountDownLatch"}, "code": ["void", "function", "(", "Object", "expectedData", ")", "{", "Assert", ".", "assertTrue", "(", "countDownLatch", ".", "await", "(", "1L", ",", "TimeUnit", ".", "SECONDS", ")", ")", ";", "try", "{", "Assert", ".", "assertEquals", "(", "expectedData", ",", "future", ".", "get", "(", ")", ")", ";", "}", "catch", "(", "ExecutionException", "e", ")", "{", "throw", "e", ".", "getCause", "(", ")", ";", "}", "}"], "memberFunctions": {"assertTimeout": [["void"]], "run": [["void"]], "assertException": [["void", "Throwable expectedCause"]]}, "className": "MockFutureListener", "renamed": ["void", "function", "(", "Object", "arg0", ")", "{", "Assert", ".", "assertTrue", "(", "countDownLatch", ".", "await", "(", "1L", ",", "TimeUnit", ".", "SECONDS", ")", ")", ";", "try", "{", "Assert", ".", "assertEquals", "(", "arg0", ",", "future", ".", "get", "(", ")", ")", ";", "}", "catch", "(", "ExecutionException", "loc0", ")", "{", "throw", "loc0", ".", "getCause", "(", ")", ";", "}", "}"], "nl": "Verify that the listener completes in a reasonable amount of time, and Asserts that the future returns the expected data.", "nlToks": ["Verify", "that", "the", "listener", "completes", "in", "a", "reasonable", "amount", "of", "time", ",", "and", "Asserts", "that", "the", "future", "returns", "the", "expected", "data", "."], "path": "hazendaz/guava/tree/master/guava-testlib/src/com/google/common/util/concurrent/testing/MockFutureListener.java", "idx": 161}
{"memberVariables": {"AMPLIFIED=true": "boolean", "DELETED=false": "boolean", "gisticID": "int", "peakStart": "int", "genes_in_ROI": "ArrayList<CanonicalGene>", "cytoband": "String", "amp": "boolean", "NO_SUCH_GISTIC=-1": "int", "cancerStudyId": "int", "chromosome": "int", "peakEnd": "int", "qValue": "double"}, "code": ["void", "function", "(", "int", "internalId", ")", "{", "this", ".", "gisticID", "=", "internalId", ";", "}"], "memberFunctions": {"setPeakEnd": [["void", "int peakEnd"]], "setAmp": [["void", "boolean amp"]], "getCytoband": [["String"]], "setPeakStart": [["void", "int peakStart"]], "getPeakStart": [["int"]], "setqValue": [["void", "double qValue"]], "getAmp": [["boolean"]], "getInternalId": [["int"]], "setGenes_in_ROI": [["void", "ArrayList<CanonicalGene> genes_in_ROI"]], "peakSize": [["int"]], "getCancerStudyId": [["int"]], "getChromosome": [["int"]], "getPeakEnd": [["int"]], "addGene": [["void", "CanonicalGene gene"]], "setCancerStudyId": [["void", "int cancerStudyId"]], "getqValue": [["double"]], "toString": [["String"]], "getGenes_in_ROI": [["ArrayList<CanonicalGene>"]], "setCytoband": [["void", "String cytoband"]], "setChromosome": [["void", "int chromosome"]]}, "className": "Gistic", "renamed": ["void", "function", "(", "int", "arg0", ")", "{", "this", ".", "gisticID", "=", "arg0", ";", "}"], "nl": "Sets the internal ID associated with this record", "nlToks": ["Sets", "the", "internal", "ID", "associated", "with", "this", "record"], "path": "adamabeshouse/cbioportal/tree/master/core/src/main/java/org/mskcc/cbio/portal/model/Gistic.java", "idx": 162}
{"memberVariables": {"asMap": "Map<K,Long>", "map": "ConcurrentHashMap<K,Long>"}, "code": ["long", "function", "(", "K", "key", ",", "long", "delta", ")", "{", "return", "accumulateAndGet", "(", "key", ",", "delta", ",", "Long", "::", "sum", ")", ";", "}"], "memberFunctions": {"getAndIncrement": [["long", "K key"]], "incrementAndGet": [["long", "K key"]], "createAsMap": [["Map<K,Long>"]], "asMap": [["Map<K,Long>"]], "removeIfZero": [["boolean", "K key"]], "replace": [["boolean", "K key", "long expectedOldValue", "long newValue"]], "decrementAndGet": [["long", "K key"]], "updateAndGet": [["long", "K key", "LongUnaryOperator updaterFunction"]], "sum": [["long"]], "put": [["long", "K key", "long newValue"]], "remove": [["long", "K key"], ["boolean", "K key", "long value"]], "removeAllZeros": [["void"]], "get": [["long", "K key"]], "putAll": [["void", "Map<? extends K,? extends Long> m"]], "create": [["AtomicLongMap<K>"], ["AtomicLongMap<K>", "Map<? extends K,? extends Long> m"]], "getAndAdd": [["long", "K key", "long delta"]], "getAndAccumulate": [["long", "K key", "long x", "LongBinaryOperator accumulatorFunction"]], "accumulateAndGet": [["long", "K key", "long x", "LongBinaryOperator accumulatorFunction"]], "containsKey": [["boolean", "Object key"]], "isEmpty": [["boolean"]], "clear": [["void"]], "size": [["int"]], "toString": [["String"]], "getAndUpdate": [["long", "K key", "LongUnaryOperator updaterFunction"]], "getAndDecrement": [["long", "K key"]], "putIfAbsent": [["long", "K key", "long newValue"]]}, "className": "AtomicLongMap", "renamed": ["long", "function", "(", "K", "arg0", ",", "long", "arg1", ")", "{", "return", "accumulateAndGet", "(", "arg0", ",", "arg1", ",", "Long", "::", "sum", ")", ";", "}"], "nl": "Adds  {@code delta} to the value currently associated with {@code key}, and returns the new value.", "nlToks": ["Adds", "-LCB-", "@code", "delta", "-RCB-", "to", "the", "value", "currently", "associated", "with", "-LCB-", "@code", "key", "-RCB-", ",", "and", "returns", "the", "new", "value", "."], "path": "hazendaz/guava/tree/master/guava/src/com/google/common/util/concurrent/AtomicLongMap.java", "idx": 163}
{"memberVariables": {"connected=false": "boolean"}, "code": ["void", "function", "(", "String", "[", "]", "args", ")", "{", "SshExample", "test", "=", "new", "SshExample", "(", ")", ";", "}"], "memberFunctions": {"connected": [["void", "SshConnectedEvent ev"]], "disconnected": [["void", "SshDisconnectedEvent ev"]], "dataReceived": [["void", "SshDataReceivedEvent ev"]]}, "className": "SshExample", "renamed": ["void", "function", "(", "String", "[", "]", "arg0", ")", "{", "SshExample", "loc0", "=", "new", "SshExample", "(", ")", ";", "}"], "nl": "Main method for SshExample", "nlToks": ["Main", "method", "for", "SshExample"], "path": "adilraja/ULMAN/tree/master/Prac/src/SshExample.java", "idx": 164}
{"memberVariables": {"activePlugins": "PluginContainer", "listeners": "List<PluginManagerListener>", "LOG=Logger.getLogger(PluginManager.class)": "Logger", "singleton=new PluginManager()": "PluginManager", "allPlugins": "PluginContainer"}, "code": ["void", "function", "(", "AbstractPlugin", "plugin", ")", "{", "plugin", ".", "removePluginObserver", "(", "this", ")", ";", "activePlugins", ".", "remove", "(", "plugin", ")", ";", "allPlugins", ".", "remove", "(", "plugin", ")", ";", "}"], "memberFunctions": {"notifyContainerChanged": [["void"]], "addPlugin": [["void", "AbstractPlugin plugin"]], "loadPlugins": [["void", "File file"]], "isActive": [["boolean", "AbstractPlugin plugin"]], "iterator": [["Iterator<AbstractPlugin>"]], "countActivePlugins": [["int"]], "getByName": [["AbstractPlugin", "String pluginName"]], "loadAvailablePlugins": [["void", "File pluginDir"]], "indexOf": [["int", "AbstractPlugin plugin"]], "addListener": [["void", "PluginManagerListener o"]], "removeAllPlugins": [["void"]], "getActivePluginIterator": [["Iterator<AbstractPlugin>"]], "setAllActive": [["void", "boolean active"]], "getByIndex": [["AbstractPlugin", "int index"]], "notifyActiveChanged": [["void", "AbstractPlugin plugin", "boolean active"]], "addToClasspath": [["void", "File file"]], "removeListener": [["void", "PluginManagerListener o"]], "pluginStateChanged": [["void", "AbstractPlugin plugin", "PluginState newState", "PluginState oldState"]], "indexOfActive": [["int", "AbstractPlugin plugin"]], "countPlugins": [["int"]], "savePlugins": [["void", "File file"]], "setActive": [["void", "AbstractPlugin plugin", "boolean active"]], "loadAvailableJars": [["void", "File jarDir"]], "getActive": [["AbstractPlugin", "int index"]], "getInstance": [["PluginManager"]], "currentPointsChanged": [["void", "AbstractPlugin plugin", "int newPoints"]]}, "className": "PluginManager", "renamed": ["void", "function", "(", "AbstractPlugin", "arg0", ")", "{", "arg0", ".", "removePluginObserver", "(", "this", ")", ";", "activePlugins", ".", "remove", "(", "arg0", ")", ";", "allPlugins", ".", "remove", "(", "arg0", ")", ";", "}"], "nl": "Remove plugin from available list", "nlToks": ["Remove", "plugin", "from", "available", "list"], "path": "0xwindows/WS-Attacker/tree/master/framework/src/main/java/wsattacker/main/plugin/PluginManager.java", "idx": 165}
{"memberVariables": {}, "code": ["List", "<", "String", ">", "function", "(", "String", "user", ")", "{", "return", "Lists", ".", "newArrayList", "(", "user", ")", ";", "}"], "memberFunctions": {}, "className": "IdentityUserGroupsMapping", "renamed": ["List", "<", "String", ">", "function", "(", "String", "arg0", ")", "{", "return", "Lists", ".", "newArrayList", "(", "arg0", ")", ";", "}"], "nl": "Returns list of groups for a user.", "nlToks": ["Returns", "list", "of", "groups", "for", "a", "user", "."], "path": "poemlin/alluxio/tree/master/core/common/src/main/java/alluxio/security/group/provider/IdentityUserGroupsMapping.java", "idx": 167}
{"memberVariables": {"shutdownInput": "boolean", "netImpl": "ServalNetworkStack", "streaming=true": "boolean", "localServiceID": "ServiceID", "address": "InetAddress", "remoteServiceID": "ServiceID", "fd": "FileDescriptor"}, "code": ["void", "function", "(", "ServiceID", "localServiceID", ",", "int", "bindBits", ")", "{", "bind", "(", "localServiceID", ",", "null", ",", "bindBits", ")", ";", "}"], "memberFunctions": {"getInetAddress": [["InetAddress"]], "getServiceID": [["ServiceID"]], "setOption": [["void", "int optID", "Object val"]], "available": [["int"]], "getOption": [["Object", "int optID"]], "getInputStream": [["InputStream"]], "listen": [["void", "int backlog"]], "shutdownOutput": [["void"]], "accept": [["void", "ServalSocketImpl newSocket"]], "shutdownInput": [["void"]], "setPerformancePreferences": [["void", "int connectionTime", "int latency", "int bandwidth"]], "sendUrgentData": [["void", "int value"]], "supportsUrgentData": [["boolean"]], "getLocalServiceID": [["ServiceID"]], "getFileDescriptor": [["FileDescriptor"]], "create": [["void", "boolean isStreaming"]], "getOutputStream": [["OutputStream"]], "toString": [["String"]], "close": [["void"]], "connect": [["void", "String service"], ["void", "ServiceID serviceID", "InetAddress address"], ["void", "ServiceID serviceID"], ["void", "SocketAddress remoteAddr", "int timeout"]]}, "className": "ServalSocketImpl", "renamed": ["void", "function", "(", "ServiceID", "arg0", ",", "int", "arg1", ")", "{", "bind", "(", "arg0", ",", "null", ",", "arg1", ")", ";", "}"], "nl": "Binds this socket to the specified local serviceID.", "nlToks": ["Binds", "this", "socket", "to", "the", "specified", "local", "serviceID", "."], "path": "princeton-sns/serval/tree/master/src/javasock/java/org/servalarch/net/ServalSocketImpl.java", "idx": 168}
{"memberVariables": {"instance": "LogEntryRequest"}, "code": ["void", "function", "(", ")", "{", "System", ".", "out", ".", "println", "(", "\"getResponseStringCsv\"", ")", ";", "String", "expResult", "=", "\"test\"", ";", "String", "result", "=", "instance", ".", "getResponseStringCsv", "(", ")", ";", "assertEquals", "(", "expResult", ",", "result", ")", ";", "}"], "memberFunctions": {"testGetTsSend": [["void"]], "testGetTsReceived": [["void"]], "testSetResponseString": [["void"]], "testGetResponseString": [["void"]], "testGetFaultFlag": [["void"]], "testSetFaultFlag": [["void"]], "testSetDuration": [["void"]], "testGetErrorFlag": [["void"]], "testSetThreadNumber": [["void"]], "testSetTsSend": [["void"]], "testSetTsReceived": [["void"]], "testGetDuration": [["void"]], "testGetThreadNumber": [["void"]]}, "className": "LogEntryRequestTest", "renamed": ["void", "function", "(", ")", "{", "System", ".", "out", ".", "println", "(", "\"srini_string\"", ")", ";", "String", "loc0", "=", "\"srini_string\"", ";", "String", "loc1", "=", "instance", ".", "getResponseStringCsv", "(", ")", ";", "assertEquals", "(", "loc0", ",", "loc1", ")", ";", "}"], "nl": "Test of getResponseStringCsv method, of class LogEntryRequest.", "nlToks": ["Test", "of", "getResponseStringCsv", "method", ",", "of", "class", "LogEntryRequest", "."], "path": "0xwindows/WS-Attacker/tree/master/plugins/Denial_of_Service/src/test/java/wsattacker/plugin/dos/dosExtension/logEntry/LogEntryRequestTest.java", "idx": 169}
{"memberVariables": {}, "code": ["TextButton", "function", "(", "TextButton", "actor", ",", "float", "x", ",", "float", "y", ",", "float", "width", ",", "float", "height", ",", "Skin", "skin", ")", "{", "actor", ".", "setX", "(", "x", ")", ";", "actor", ".", "setY", "(", "y", ")", ";", "actor", ".", "setWidth", "(", "width", ")", ";", "actor", ".", "setHeight", "(", "height", ")", ";", "actor", ".", "getLabel", "(", ")", ".", "setStyle", "(", "new", "LabelStyle", "(", "skin", ".", "getFont", "(", "\"andalus-font\"", ")", ",", "Color", ".", "BLACK", ")", ")", ";", "return", "actor", ";", "}"], "memberFunctions": {"defineLabel": [["Label", "Label actor", "float x", "float y", "float width", "float height"]], "defineImage": [["Image", "Image actor", "float x", "float y", "float width", "float height"], ["Image", "Image actor", "float x", "float y", "float width", "float height", "float scaleX", "float scaleY"]]}, "className": "ScreenUtils", "renamed": ["TextButton", "function", "(", "TextButton", "arg0", ",", "float", "arg1", ",", "float", "arg2", ",", "float", "arg3", ",", "float", "arg4", ",", "Skin", "arg5", ")", "{", "arg0", ".", "setX", "(", "arg1", ")", ";", "arg0", ".", "setY", "(", "arg2", ")", ";", "arg0", ".", "setWidth", "(", "arg3", ")", ";", "arg0", ".", "setHeight", "(", "arg4", ")", ";", "arg0", ".", "getLabel", "(", ")", ".", "setStyle", "(", "new", "LabelStyle", "(", "arg5", ".", "getFont", "(", "\"srini_string\"", ")", ",", "Color", ".", "BLACK", ")", ")", ";", "return", "arg0", ";", "}"], "nl": "Builds a TextButton according to the specified parameters, encapsulating its initialization.", "nlToks": ["Builds", "a", "TextButton", "according", "to", "the", "specified", "parameters", ",", "encapsulating", "its", "initialization", "."], "path": "prativa/shadowstruggles/tree/master/Shadow Struggles/src/br/edu/ifsp/pds/shadowstruggles/screens/utils/ScreenUtils.java", "idx": 171}
{"memberVariables": {"checkpoints=new TreeMap<Long,StoredBlock>()": "TreeMap<Long,StoredBlock>", "dataHash": "Sha256Hash", "TEXTUAL_MAGIC=\"TXT CHECKPOINTS 1\"": "String", "log=LoggerFactory.getLogger(CheckpointManager.class)": "Logger", "MAX_SIGNATURES=256": "int", "BINARY_MAGIC=\"CHECKPOINTS 1\"": "String", "params": "NetworkParameters", "BASE64=BaseEncoding.base64().omitPadding()": "BaseEncoding"}, "code": ["Sha256Hash", "function", "(", ")", "{", "return", "dataHash", ";", "}"], "memberFunctions": {"checkpoint": [["void", "NetworkParameters params", "InputStream checkpoints", "BlockStore store", "long time"]], "readTextual": [["Sha256Hash", "InputStream inputStream"]], "getCheckpointBefore": [["StoredBlock", "long time"]], "readBinary": [["Sha256Hash", "InputStream inputStream"]], "numCheckpoints": [["int"]]}, "className": "CheckpointManager", "renamed": ["Sha256Hash", "function", "(", ")", "{", "return", "dataHash", ";", "}"], "nl": "Returns a hash of the concatenated checkpoint data.", "nlToks": ["Returns", "a", "hash", "of", "the", "concatenated", "checkpoint", "data", "."], "path": "1000000000001/bitcoinj/tree/master/core/src/main/java/org/bitcoinj/core/CheckpointManager.java", "idx": 172}
{"memberVariables": {"intBuf": "byte[]", "MAX_INT_BYTES=21": "int", "format": "PackFormatInputStream", "packed": "ByteArrayOutputStream"}, "code": ["void", "function", "(", "long", "value", ")", "{", "format", ".", "checkType", "(", "'r'", ",", "true", ")", ";", "packLong", "(", "value", ",", "true", ")", ";", "}"], "memberFunctions": {"getValue": [["byte[]"]], "packLong": [["void", "long x", "boolean signed"]], "addShort": [["void", "short value"]], "reset": [["void"]], "getFormat": [["String"]], "addByte": [["void", "byte value"]], "addInt": [["void", "int value"]], "addLong": [["void", "long value"]], "addByteArray": [["void", "byte[] value"], ["void", "byte[] value", "int off", "int len"]], "addString": [["void", "String value"]]}, "className": "PackOutputStream", "renamed": ["void", "function", "(", "long", "arg0", ")", "{", "format", ".", "checkType", "(", "'r'", ",", "true", ")", ";", "packLong", "(", "arg0", ",", "true", ")", ";", "}"], "nl": "Add a record field to the stream. \\param value The record value to be added.", "nlToks": ["Add", "a", "record", "field", "to", "the", "stream", ".", "\\", "param", "value", "The", "record", "value", "to", "be", "added", "."], "path": "pgunn/wiredtiger/tree/master/lang/java/src/com/wiredtiger/db/PackOutputStream.java", "idx": 176}
{"memberVariables": {"hdm": "HDMSentence", "EXAMPLE=\"$GPHDM,90.0,M\"": "String"}, "code": ["void", "function", "(", ")", "{", "assertFalse", "(", "hdm", ".", "isTrue", "(", ")", ")", ";", "}"], "memberFunctions": {"testSetHeadingTooHigh": [["void"]], "testSetHeading": [["void"]], "setUp": [["void"]], "testGetHeading": [["void"]], "testSetNegativeHeading": [["void"]], "testConstructor": [["void"]]}, "className": "HDMTest", "renamed": ["void", "function", "(", ")", "{", "assertFalse", "(", "hdm", ".", "isTrue", "(", ")", ")", ";", "}"], "nl": "Test method for  {@link net.sf.marineapi.nmea.parser.HDTParser#isTrue()}.", "nlToks": ["Test", "method", "for", "-LCB-", "@link", "net.sf.marineapi.nmea.parser.HDTParser", "#isTrue", "-LRB-", "-RRB-", "-RCB-", "."], "path": "pkoziol/marine-api/tree/master/src/test/java/net/sf/marineapi/nmea/parser/HDMTest.java", "idx": 179}
{"memberVariables": {"visMask=new HashSet<>()": "Set<Signature.Visibility>"}, "code": ["void", "function", "(", "Signature", ".", "Visibility", "...", "visibilities", ")", "{", "visMask", ".", "removeAll", "(", "Arrays", ".", "asList", "(", "visibilities", ")", ")", ";", "}"], "memberFunctions": {"restrictVisibilitiesTo": [["void", "Signature.Visibility... visibilities"]], "coverAllVisibilities": [["void"]], "covers": [["boolean", "T sig"]]}, "className": "SigMask", "renamed": ["void", "function", "(", "Signature", ".", "Visibility", "...", "arg0", ")", "{", "visMask", ".", "removeAll", "(", "Arrays", ".", "asList", "(", "arg0", ")", ")", ";", "}"], "nl": "Forbid all mentioned visibilities.", "nlToks": ["Forbid", "all", "mentioned", "visibilities", "."], "path": "adangel/pmd/tree/master/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/oom/signature/SigMask.java", "idx": 183}
{"memberVariables": {"scanner=new Scanner(System.in)": "Scanner"}, "code": ["String", "function", "(", "String", "question", ")", "{", "System", ".", "out", ".", "print", "(", "question", ")", ";", "return", "scanner", ".", "nextLine", "(", ")", ";", "}"], "memberFunctions": {"getChar": [["char", "String question"], ["char", "String question", "char... characters"]], "getInt": [["int", "String question"], ["int", "String question", "int min"], ["int", "String question", "int max", "int min"]], "getStringIgnoreCase": [["String", "String question", "String... words"]], "getDouble": [["double", "String question"]], "getBoolean": [["boolean", "String question"]]}, "className": "RequestInput", "renamed": ["String", "function", "(", "String", "arg0", ")", "{", "System", ".", "out", ".", "print", "(", "arg0", ")", ";", "return", "scanner", ".", "nextLine", "(", ")", ";", "}"], "nl": "Method ask user for an input string", "nlToks": ["Method", "ask", "user", "for", "an", "input", "string"], "path": "100101Ed/mavne-play/tree/master/src/main/java/com/sqa/em/util/helper/RequestInput.java", "idx": 184}
{"memberVariables": {"MOUNT_SHARED_OPTION=Option.builder(\"shared\").required(false).hasArg(false).desc(\"shared\").build()": "Option", "mFileSystem": "FileSystem", "RECURSIVE_OPTION=Option.builder(\"R\").required(false).hasArg(false).desc(\"recursive\").build()": "Option", "FORCE_OPTION=Option.builder(\"f\").required(false).hasArg(false).desc(\"force\").build()": "Option", "PROPERTY_FILE_OPTION=Option.builder(\"P\").required(false).numberOfArgs(1).desc(\"properties file name\").build()": "Option", "READONLY_OPTION=Option.builder(\"readonly\").required(false).hasArg(false).desc(\"readonly\").build()": "Option"}, "code": ["Options", "function", "(", ")", "{", "return", "new", "Options", "(", ")", ";", "}"], "memberFunctions": {"parseAndValidateArgs": [["CommandLine", "String... args"]], "getNumOfArgs": [["int"]], "validateArgs": [["boolean", "String... args"]]}, "className": "AbstractShellCommand", "renamed": ["Options", "function", "(", ")", "{", "return", "new", "Options", "(", ")", ";", "}"], "nl": "Gets the supported Options of the command.", "nlToks": ["Gets", "the", "supported", "Options", "of", "the", "command", "."], "path": "poemlin/alluxio/tree/master/shell/src/main/java/alluxio/shell/command/AbstractShellCommand.java", "idx": 185}
{"memberVariables": {"vhw": "VHWParser", "EXAMPLE=\"$VWVHW,000.0,T,001.5,M,1.0,N,1.85,K\"": "String"}, "code": ["void", "function", "(", ")", "{", "vhw", ".", "setHeading", "(", "90.456", ")", ";", "assertEquals", "(", "90.5", ",", "vhw", ".", "getHeading", "(", ")", ",", "0.1", ")", ";", "}"], "memberFunctions": {"testGetSpeedKnots": [["void"]], "testSetMagneticHeading": [["void"]], "testGetMagneticHeading": [["void"]], "testConstructorTalkerId": [["void"]], "testIsTrue": [["void"]], "testSetSpeedKilometres": [["void"]], "setUp": [["void"]], "testSetSpeedKnots": [["void"]], "testGetHeading": [["void"]], "testGetSpeedKilometres": [["void"]], "testConstructorString": [["void"]]}, "className": "VHWTest", "renamed": ["void", "function", "(", ")", "{", "vhw", ".", "setHeading", "(", "90.456", ")", ";", "assertEquals", "(", "90.5", ",", "vhw", ".", "getHeading", "(", ")", ",", "0.1", ")", ";", "}"], "nl": "Test method for {@link net.sf.marineapi.nmea.parser.VHWParser#setHeading(double)}.", "nlToks": ["Test", "method", "for", "-LCB-", "@link", "net.sf.marineapi.nmea.parser.VHWParser", "#setHeading", "-LRB-", "double", "-RRB-", "-RCB-", "."], "path": "pkoziol/marine-api/tree/master/src/test/java/net/sf/marineapi/nmea/parser/VHWTest.java", "idx": 187}
{"memberVariables": {"varIndexHash": "Hashtable<Variable,Integer>", "variables": "List<Variable>", "cnet": "Hashtable<Variable,List<Constraint>>", "domains": "List<Domain>", "constraints": "List<Constraint>"}, "code": ["Variable", "function", "(", "Variable", "var", ",", "Constraint", "constraint", ")", "{", "List", "<", "Variable", ">", "scope", "=", "constraint", ".", "getScope", "(", ")", ";", "if", "(", "scope", ".", "size", "(", ")", "==", "2", ")", "{", "if", "(", "var", "==", "scope", ".", "get", "(", "0", ")", ")", "return", "scope", ".", "get", "(", "1", ")", ";", "else", "if", "(", "var", "==", "scope", ".", "get", "(", "1", ")", ")", "return", "scope", ".", "get", "(", "0", ")", ";", "}", "return", "null", ";", "}"], "memberFunctions": {"getDomain": [["Domain", "Variable var"]], "getConstraints": [["List<Constraint>"], ["List<Constraint>", "Variable var"]], "getVariables": [["List<Variable>"]], "removeValueFromDomain": [["void", "Variable var", "Object value"]], "setDomain": [["void", "Variable var", "Domain domain"]], "addConstraint": [["void", "Constraint constraint"]], "indexOf": [["int", "Variable var"]], "copyDomains": [["CSP"]]}, "className": "CSP", "renamed": ["Variable", "function", "(", "Variable", "arg0", ",", "Constraint", "arg1", ")", "{", "List", "<", "Variable", ">", "loc0", "=", "arg1", ".", "getScope", "(", ")", ";", "if", "(", "loc0", ".", "size", "(", ")", "==", "2", ")", "{", "if", "(", "arg0", "==", "loc0", ".", "get", "(", "0", ")", ")", "return", "loc0", ".", "get", "(", "1", ")", ";", "else", "if", "(", "arg0", "==", "loc0", ".", "get", "(", "1", ")", ")", "return", "loc0", ".", "get", "(", "0", ")", ";", "}", "return", "null", ";", "}"], "nl": "Returns for binary constraints the other variable from the scope.", "nlToks": ["Returns", "for", "binary", "constraints", "the", "other", "variable", "from", "the", "scope", "."], "path": "peterplupo/ia201102/tree/master/trabalho1/aima-core/src/main/java/aima/core/search/csp/CSP.java", "idx": 188}
{"memberVariables": {"volume": "int", "occupancy": "double", "measurement_date": "Timestamp", "lane_id": "int", "id": "long", "speed": "double", "quality": "int"}, "code": ["double", "function", "(", ")", "{", "return", "occupancy", ";", "}"], "memberFunctions": {"setOccupancy": [["void", "double occupancy"]], "getMeasurement_date": [["Timestamp"]], "getLane_id": [["int"]], "getId": [["long"]], "setVolume": [["void", "int volume"]], "setLane_id": [["void", "int lane_id"]], "setSpeed": [["void", "double speed"]], "getVolume": [["int"]], "setQuality": [["void", "int quality"]], "getQuality": [["int"]], "getSpeed": [["double"]], "setMeasurement_date": [["void", "Timestamp measurement_date"]], "setId": [["void", "long id"]], "toString": [["String"]]}, "className": "LaneData", "renamed": ["double", "function", "(", ")", "{", "return", "occupancy", ";", "}"], "nl": "Gets the occupancy.", "nlToks": ["Gets", "the", "occupancy", "."], "path": "pfontana3w2/DataScienceProject/tree/master/TrafficVolumePrediction_0.5/src/gov/nist/dataeval/db/bean/LaneData.java", "idx": 190}
{"memberVariables": {"SK_CLASSIFIER=new ScopeKindEnum(\"sk_classifier\")": "ScopeKindEnum", "typeName": "java.util.List", "SK_INSTANCE=new ScopeKindEnum(\"sk_instance\")": "ScopeKindEnum", "literalName": "java.lang.String"}, "code": ["java", ".", "lang", ".", "String", "function", "(", ")", "{", "return", "literalName", ";", "}"], "memberFunctions": {"readResolve": [["java.lang.Object"]], "forName": [["ScopeKind", "java.lang.String name"]], "refTypeName": [["java.util.List"]], "hashCode": [["int"]], "equals": [["boolean", "java.lang.Object o"]]}, "className": "ScopeKindEnum", "renamed": ["java", ".", "lang", ".", "String", "function", "(", ")", "{", "return", "literalName", ";", "}"], "nl": "Returns a string representation of the enumeration value.", "nlToks": ["Returns", "a", "string", "representation", "of", "the", "enumeration", "value", "."], "path": "pichiliani/CoArgoUML/tree/master/v0.24/fonte/src/argouml-core-model-mdr/build/java/org/omg/uml/foundation/datatypes/ScopeKindEnum.java", "idx": 193}
{"memberVariables": {"dim": "Dimension", "panel": "XHTMLPanel"}, "code": ["void", "function", "(", "Document", "doc", ",", "String", "base_url", ")", "{", "panel", ".", "setDocument", "(", "doc", ",", "base_url", ")", ";", "}"], "memberFunctions": {"layout": [["void", "Graphics2D g2", "Dimension dim"]], "renderToImageAutoSize": [["BufferedImage", "String url", "int width"], ["BufferedImage", "String url", "int width", "int bufferedImageType"]], "setSharedContext": [["void", "SharedContext ctx"]], "getMinimumSize": [["Rectangle"]], "getPanel": [["XHTMLPanel"]], "getSharedContext": [["SharedContext"]], "render": [["void", "Graphics2D g2"]], "renderToImage": [["BufferedImage", "String url", "int width", "int height"], ["BufferedImage", "String url", "int width", "int height", "int bufferedImageType"]]}, "className": "Graphics2DRenderer", "renamed": ["void", "function", "(", "Document", "arg0", ",", "String", "arg1", ")", "{", "panel", ".", "setDocument", "(", "arg0", ",", "arg1", ")", ";", "}"], "nl": "Sets the document to render, lays it out, and renders it.", "nlToks": ["Sets", "the", "document", "to", "render", ",", "lays", "it", "out", ",", "and", "renders", "it", "."], "path": "plutogeek/flyingsaucer/tree/master/flying-saucer-core/src/main/java/org/xhtmlrenderer/simple/Graphics2DRenderer.java", "idx": 194}
{"memberVariables": {"item": "ToDoItem"}, "code": ["String", "function", "(", ")", "{", "return", "TodoParser", ".", "encode", "(", "item", ".", "getHeadline", "(", ")", ")", ";", "}"], "memberFunctions": {"getPriority": [["String"]], "getMoreInfoURL": [["String"]], "getDescription": [["String"]]}, "className": "ToDoItemXMLHelper", "renamed": ["String", "function", "(", ")", "{", "return", "TodoParser", ".", "encode", "(", "item", ".", "getHeadline", "(", ")", ")", ";", "}"], "nl": "Encodes the headline of this ToDoItem in an XML safe way and returns the new String. The String can be regained by running the returned String through {@link TodoParser#decode(String)}.", "nlToks": ["Encodes", "the", "headline", "of", "this", "ToDoItem", "in", "an", "XML", "safe", "way", "and", "returns", "the", "new", "String", ".", "The", "String", "can", "be", "regained", "by", "running", "the", "returned", "String", "through", "-LCB-", "@link", "TodoParser", "#decode", "-LRB-", "String", "-RRB-", "-RCB-", "."], "path": "pichiliani/CoArgoUML/tree/master/v0.24/fonte/src/argouml-app/build/classes/org/argouml/persistence/ToDoItemXMLHelper.java", "idx": 195}
{"memberVariables": {"customers": "List<Customer>"}, "code": ["String", "function", "(", ")", "{", "StringBuffer", "str", "=", "new", "StringBuffer", "(", "\"Customer Summary\"", ")", ";", "for", "(", "Customer", "c", ":", "customers", ")", "{", "str", ".", "append", "(", "\"  - \"", "+", "c", ".", "getName", "(", ")", "+", "\" (\"", "+", "format", "(", "c", ".", "getNumberOfAccounts", "(", ")", ",", "\"account\"", ")", "+", "\")\"", ")", ";", "}", "return", "str", ".", "toString", "(", ")", ";", "}"], "memberFunctions": {"addCustomer": [["void", "Customer customer"]], "totalInterestPaid": [["double"]], "format": [["String", "int number", "String word"]]}, "className": "Bank", "renamed": ["String", "function", "(", ")", "{", "StringBuffer", "loc0", "=", "new", "StringBuffer", "(", "\"srini_string\"", ")", ";", "for", "(", "Customer", "loc1", ":", "customers", ")", "{", "loc0", ".", "append", "(", "\"srini_string\"", "+", "loc1", ".", "getName", "(", ")", "+", "\"srini_string\"", "+", "format", "(", "loc1", ".", "getNumberOfAccounts", "(", ")", ",", "\"srini_string\"", ")", "+", "\"srini_string\"", ")", ";", "}", "return", "loc0", ".", "toString", "(", ")", ";", "}"], "nl": "This methods return the account number summary for all existing user that registered in the bank.", "nlToks": ["This", "methods", "return", "the", "account", "number", "summary", "for", "all", "existing", "user", "that", "registered", "in", "the", "bank", "."], "path": "harry0704/my-bank/tree/master/src/main/java/com/abc/Bank.java", "idx": 197}
{"memberVariables": {"count=0": "long", "max=NaN": "double", "mean=0.0": "double", "sumOfSquaresOfDeltas=0.0": "double", "min=NaN": "double"}, "code": ["double", "function", "(", ")", "{", "checkState", "(", "count", "!=", "0", ")", ";", "return", "min", ";", "}"], "memberFunctions": {"add": [["void", "double value"]], "sumOfSquaresOfDeltas": [["double"]], "max": [["double"]], "count": [["long"]], "sampleVariance": [["double"]], "sum": [["double"]], "populationVariance": [["double"]], "sampleStandardDeviation": [["double"]], "calculateNewMeanNonFinite": [["double", "double previousMean", "double value"]], "addAll": [["void", "Iterable<? extends Number> values"], ["void", "Iterator<? extends Number> values"], ["void", "double... values"], ["void", "int... values"], ["void", "long... values"], ["void", "Stats values"]], "mean": [["double"]], "populationStandardDeviation": [["double"]], "snapshot": [["Stats"]]}, "className": "StatsAccumulator", "renamed": ["double", "function", "(", ")", "{", "checkState", "(", "count", "!=", "0", ")", ";", "return", "min", ";", "}"], "nl": "Returns the lowest value in the dataset. The count must be non-zero. Non-finite values If the dataset contains  {@link Double#NaN} then the result is {@link Double#NaN}. If it contains  {@link Double#NEGATIVE_INFINITY} and not {@link Double#NaN} then the result is{@link Double#NEGATIVE_INFINITY}. If it contains  {@link Double#POSITIVE_INFINITY} and finitevalues only then the result is the lowest finite value. If it contains {@link Double#POSITIVE_INFINITY} only then the result is {@link Double#POSITIVE_INFINITY}.", "nlToks": ["Returns", "the", "lowest", "value", "in", "the", "dataset", ".", "The", "count", "must", "be", "non-zero", ".", "Non-finite", "values", "If", "the", "dataset", "contains", "-LCB-", "@link", "Double", "#NaN", "-RCB-", "then", "the", "result", "is", "-LCB-", "@link", "Double", "#NaN", "-RCB-", ".", "If", "it", "contains", "-LCB-", "@link", "Double", "#NEGATIVE_INFINITY", "-RCB-", "and", "not", "-LCB-", "@link", "Double", "#NaN", "-RCB-", "then", "the", "result", "is", "-LCB-", "@link", "Double", "#NEGATIVE_INFINITY", "-RCB-", ".", "If", "it", "contains", "-LCB-", "@link", "Double", "#POSITIVE_INFINITY", "-RCB-", "and", "finitevalues", "only", "then", "the", "result", "is", "the", "lowest", "finite", "value", ".", "If", "it", "contains", "-LCB-", "@link", "Double", "#POSITIVE_INFINITY", "-RCB-", "only", "then", "the", "result", "is", "-LCB-", "@link", "Double", "#POSITIVE_INFINITY", "-RCB-", "."], "path": "hazendaz/guava/tree/master/guava/src/com/google/common/math/StatsAccumulator.java", "idx": 199}
{"memberVariables": {"dev": "Device"}, "code": ["void", "function", "(", ")", "{", "System", ".", "out", ".", "println", "(", "\"getDeviceBlock\"", ")", ";", "Device", "instance", "=", "null", ";", "DeviceBlock", "expResult", "=", "null", ";", "DeviceBlock", "result", "=", "instance", ".", "getDeviceBlock", "(", ")", ";", "assertEquals", "(", "expResult", ",", "result", ")", ";", "fail", "(", "\"The test case is a prototype.\"", ")", ";", "}"], "memberFunctions": {"testGetType": [["void"]], "setUpClass": [["void"]], "testGetDeviceName_0args": [["void"]], "testAddToPane": [["void"]], "testGetAddress": [["void"]], "tearDownClass": [["void"]], "tearDown": [["void"]], "testGetDeviceNames": [["void"]], "testAddCapabilities": [["void"]], "testToString": [["void"]], "testGetImgName": [["void"]], "testAddCapability": [["void"]], "testGetDeviceName_Locale": [["void"]], "setUp": [["void"]], "testGetImage": [["void"]], "testGetDeviceID": [["void"]], "testGetCapabilityBlock": [["void"]], "testGetCapabilities": [["void"]], "testRemoveCapability": [["void"]]}, "className": "DeviceTest", "renamed": ["void", "function", "(", ")", "{", "System", ".", "out", ".", "println", "(", "\"srini_string\"", ")", ";", "Device", "loc0", "=", "null", ";", "DeviceBlock", "loc1", "=", "null", ";", "DeviceBlock", "loc2", "=", "loc0", ".", "getDeviceBlock", "(", ")", ";", "assertEquals", "(", "loc1", ",", "loc2", ")", ";", "fail", "(", "\"srini_string\"", ")", ";", "}"], "nl": "Test of getDeviceBlock method, of class Device.", "nlToks": ["Test", "of", "getDeviceBlock", "method", ",", "of", "class", "Device", "."], "path": "hashinisenaratne/SIFEB/tree/master/Visual Programming Editor/SiFEB_VE/test/com/sifeb/ve/DeviceTest.java", "idx": 200}
{"memberVariables": {"ourInstance=new GeneralMotorCon()": "GeneralMotorCon", "spin90Time=3000": "int", "TAG=\"GMC\"": "String", "batLvl=0": "int", "threadTimer=0": "long", "spinSpeed=2": "int", "cmd": "CommandManager", "hoverTime=2000": "int", "speed=10": "int", "spin90Speed=50": "int", "drone": "ARDrone", "spinTime=50": "int"}, "code": ["void", "function", "(", ")", "{", "SpaceXGUI", ".", "getInstance", "(", ")", ".", "appendToConsole", "(", "TAG", ",", "\" - lowering altitude\"", ")", ";", "cmd", ".", "down", "(", "speed", ")", ".", "doFor", "(", "1000", ")", ";", "cmd", ".", "hover", "(", ")", ".", "doFor", "(", "hoverTime", ")", ";", "}"], "memberFunctions": {"spin90Left": [["void"]], "spinRight": [["void"]], "takeoff": [["void"]], "forward": [["void", "int time"]], "spinLeft": [["void"]], "right": [["void"]], "spin90Right": [["void"]], "landing": [["void"]], "setDrone": [["void", "ARDrone drone"]], "left": [["void"]], "backward": [["void", "int time"]], "getInstance": [["GeneralMotorCon"]], "setBatLvl": [["void", "int batLvl"]], "waitFor": [["void", "int millis"]], "getBatLvl": [["int"]], "onStop": [["void"]], "raiseAltitude": [["void"]]}, "className": "GeneralMotorCon", "renamed": ["void", "function", "(", ")", "{", "SpaceXGUI", ".", "getInstance", "(", ")", ".", "appendToConsole", "(", "TAG", ",", "\"srini_string\"", ")", ";", "cmd", ".", "down", "(", "speed", ")", ".", "doFor", "(", "1000", ")", ";", "cmd", ".", "hover", "(", ")", ".", "doFor", "(", "hoverTime", ")", ";", "}"], "nl": "Lower Altitude lowering the altitude a little bit", "nlToks": ["Lower", "Altitude", "lowering", "the", "altitude", "a", "little", "bit"], "path": "02343Gruppe2/02343_Ardrone/tree/master/src/algo/GeneralMotorCon.java", "idx": 201}
{"memberVariables": {"buffer=new byte[INITIAL_BUFFER_CAPACITY]": "byte[]", "INITIAL_BUFFER_CAPACITY=10240": "int", "bufferSize": "int"}, "code": ["void", "function", "(", ")", "{", "bufferSize", "=", "0", ";", "}"], "memberFunctions": {"add": [["void", "int b"]], "toArray": [["byte[]"]], "isEmpty": [["boolean"]], "toString": [["String"]]}, "className": "ByteBuffer", "renamed": ["void", "function", "(", ")", "{", "bufferSize", "=", "0", ";", "}"], "nl": "Clear the buffer.", "nlToks": ["Clear", "the", "buffer", "."], "path": "harrisaoz/rtfparserkit/tree/master/RTF Parser Kit/src/main/java/com/rtfparserkit/parser/raw/ByteBuffer.java", "idx": 203}
{"memberVariables": {"addressHeader": "int", "INTERVAL=TARGET_TIMESPAN / TARGET_SPACING": "int", "alertSigningKey": "byte[]", "acceptableAddressCodes": "int[]", "packetMagic": "long", "p2shHeader": "int", "paramSet=Collections.synchronizedList(new ArrayList<NetworkParameters>())": "List<NetworkParameters>", "PROTOCOL_VERSION=70001": "int", "genesisBlock": "Block", "proofOfWorkLimit": "BigInteger", "subsidyDecreaseBlockCount": "int", "port": "int", "MAX_MONEY=new BigInteger(\"21000000\",10).multiply(COIN)": "BigInteger", "TARGET_SPACING=10 * 60": "int", "dnsSeeds": "String[]", "checkpoints=new HashMap<Integer,Sha256Hash>()": "Map<Integer,Sha256Hash>", "SATOSHI_KEY=Hex.decode(\"04fc9702847840aaf195de8442ebecedf5b095cdbb9bc716bda9110971b28a49e0ead8564ff0db22209e0374782c093bb899692d524e9d6a6956e7c5ecbcd68284\")": "byte[]", "interval": "int", "id": "String", "spendableCoinbaseDepth": "int", "dumpedPrivateKeyHeader": "int", "targetTimespan": "int", "TARGET_TIMESPAN=14 * 24 * 60* 60": "int", "BIP16_ENFORCE_TIME=1333238400": "int"}, "code": ["byte", "[", "]", "function", "(", ")", "{", "return", "alertSigningKey", ";", "}"], "memberFunctions": {"regTests": [["NetworkParameters"]], "allowEmptyPeerChain": [["boolean"]], "getDumpedPrivateKeyHeader": [["int"]], "testNet2": [["NetworkParameters"]], "testNet3": [["NetworkParameters"]], "unitTests": [["NetworkParameters"]], "getId": [["String"]], "getAddressHeader": [["int"]], "getAcceptableAddressCodes": [["int[]"]], "prodNet": [["NetworkParameters"]], "fromID": [["NetworkParameters", "String id"]], "getTargetTimespan": [["int"]], "getDnsSeeds": [["String[]"]], "hashCode": [["int"]], "getSpendableCoinbaseDepth": [["int"]], "testNet": [["NetworkParameters"]], "calculateBlockPoWHash": [["Sha256Hash", "Block b"]], "getMaxMoney": [["BigInteger"]], "getParamsFromAddressByte": [["NetworkParameters", "int version"]], "registerParams": [["void", "NetworkParameters params"]], "isCheckpoint": [["boolean", "int height"]], "getP2SHHeader": [["int"]], "getInterval": [["int"]], "getRetargetBlockCount": [["int"], ["int", "StoredBlock cursor"]], "getGenesisBlock": [["Block"]], "getSubsidyDecreaseBlockCount": [["int"]], "createGenesis": [["Block", "NetworkParameters n"]], "getPacketMagic": [["long"]], "getPort": [["int"]], "equals": [["boolean", "Object other"]], "passesCheckpoint": [["boolean", "int height", "Sha256Hash hash"]], "isAcceptableAddressVersion": [["boolean", "int version"]], "getURIScheme": [["String"]], "getProofOfWorkLimit": [["BigInteger"]]}, "className": "NetworkParameters", "renamed": ["byte", "[", "]", "function", "(", ")", "{", "return", "alertSigningKey", ";", "}"], "nl": "The key used to sign  {@link com.google.bitcoin.core.AlertMessage}s. You can use  {@link com.google.bitcoin.core.ECKey#verify(byte[],byte[],byte[])} to verifysignatures using it.", "nlToks": ["The", "key", "used", "to", "sign", "-LCB-", "@link", "com.google.bitcoin.core.AlertMessage", "-RCB-", "s", ".", "You", "can", "use", "-LCB-", "@link", "com.google.bitcoin.core.ECKey", "#verify", "-LRB-", "byte", "-LSB-", "-RSB-", ",", "byte", "-LSB-", "-RSB-", ",", "byte", "-LSB-", "-RSB-", "-RRB-", "-RCB-", "to", "verifysignatures", "using", "it", "."], "path": "plncoin/plncoin-and/tree/master/plncoinj/core/src/main/java/com/google/bitcoin/core/NetworkParameters.java", "idx": 205}
{"memberVariables": {"mEntries=new ArrayList<E>()": "List<E>", "instances=new HashMap<String,SQLiteUriMatcher>()": "Map<String,SQLiteUriMatcher>", "mBaseContentUri": "Uri", "mAuthority": "String", "mUriMatcher=new UriMatcher(UriMatcher.NO_MATCH)": "UriMatcher", "TAG=SQLiteUriMatcher.class.getSimpleName()": "String"}, "code": ["String", "function", "(", "Uri", "uri", ")", "{", "E", "entry", "=", "getMatcherEntry", "(", "uri", ")", ";", "return", "entry", ".", "getBaseType", "(", ")", ".", "getType", "(", ")", "+", "\"/\"", "+", "entry", ".", "getSubType", "(", ")", ";", "}"], "memberFunctions": {"createMatcherEntry": [["E", "String path"], ["E", "String path", "SQLiteMatcherEntry.Type baseType", "String subType"]], "addSQLBuilderCallback": [["void", "String path", "SQLiteMatcherEntry.SQLBuilderCallback callback"], ["void", "String path", "SQLiteMatcherEntry.Type baseType", "String subType", "SQLiteMatcherEntry.SQLBuilderCallback callback"]], "getMatcherEntry": [["E", "Uri uri"]], "getEntries": [["List<E>"]], "addTablesSQL": [["void", "String path", "String tablesSQL"], ["void", "String path", "SQLiteMatcherEntry.Type baseType", "String subType", "String tablesSQL"]], "addMatherEntry": [["void", "E matcherEntry"]], "addRawSQL": [["void", "String path", "String rawSQL"], ["void", "String path", "SQLiteMatcherEntry.Type baseType", "String subType", "String rawSQL"]], "getInstance": [["U", "Class<U> clazz", "String authority"]], "instantiate": [["void"]]}, "className": "SQLiteUriMatcher", "renamed": ["String", "function", "(", "Uri", "arg0", ")", "{", "E", "loc0", "=", "getMatcherEntry", "(", "arg0", ")", ";", "return", "loc0", ".", "getBaseType", "(", ")", ".", "getType", "(", ")", "+", "\"srini_string\"", "+", "loc0", ".", "getSubType", "(", ")", ";", "}"], "nl": "Get full MIME type for the specified URI", "nlToks": ["Get", "full", "MIME", "type", "for", "the", "specified", "URI"], "path": "pop1030123/android-atleap/tree/master/atleap-core/src/main/java/com/blandware/android/atleap/provider/sqlite/SQLiteUriMatcher.java", "idx": 206}
{"memberVariables": {}, "code": ["void", "function", "(", "final", "short", "x", ",", "final", "OutputStream", "os", ")", "{", "os", ".", "write", "(", "(", "byte", ")", "x", ")", ";", "os", ".", "write", "(", "(", "byte", ")", "(", "x", ">>", "8", ")", ")", ";", "}"], "memberFunctions": {"leb2int": [["int", "final byte[] x", "final int offset"]], "leb2short": [["short", "final byte[] x", "final int offset"]], "int2leb": [["void", "final int x", "final OutputStream os"], ["void", "final int x", "final byte[] buf", "final int offset"]], "beb2short": [["short", "final byte[] x", "final int offset"]], "ubyte2int": [["int", "final byte x"]]}, "className": "ByteOrder", "renamed": ["void", "function", "(", "final", "short", "arg0", ",", "final", "OutputStream", "arg1", ")", "{", "arg1", ".", "write", "(", "(", "byte", ")", "arg0", ")", ";", "arg1", ".", "write", "(", "(", "byte", ")", "(", "arg0", ">>", "8", ")", ")", ";", "}"], "nl": "Short to little-endian bytes: writes x to given stream.", "nlToks": ["Short", "to", "little-endian", "bytes", ":", "writes", "x", "to", "given", "stream", "."], "path": "adamfisk/littleshoot-client/tree/master/client/util/src/main/java/org/lastbamboo/client/util/ByteOrder.java", "idx": 207}
{"memberVariables": {}, "code": ["void", "function", "(", "double", "gamma", ",", "D1Matrix64F", "u", ",", "D1Matrix64F", "x", ",", "D1Matrix64F", "y", ")", "{", "int", "n", "=", "u", ".", "getNumElements", "(", ")", ";", "double", "sum", "=", "0", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "n", ";", "i", "++", ")", "{", "sum", "+=", "u", ".", "get", "(", "i", ")", "*", "x", ".", "get", "(", "i", ")", ";", "}", "for", "(", "int", "i", "=", "0", ";", "i", "<", "n", ";", "i", "++", ")", "{", "y", ".", "set", "(", "i", ",", "x", ".", "get", "(", "i", ")", "+", "gamma", "*", "u", ".", "get", "(", "i", ")", "*", "sum", ")", ";", "}", "}"], "memberFunctions": {"mult": [["void", "DenseMatrix64F x", "DenseMatrix64F y", "DenseMatrix64F A"]], "innerProdA": [["double", "D1Matrix64F x", "D1Matrix64F A", "D1Matrix64F y"]], "innerProdTranA": [["double", "D1Matrix64F x", "D1Matrix64F A", "D1Matrix64F y"]], "addOuterProd": [["void", "double gamma", "D1Matrix64F x", "D1Matrix64F y", "RowD1Matrix64F A"]], "rank1Update": [["void", "double gamma", "DenseMatrix64F A", "DenseMatrix64F u", "DenseMatrix64F w", "DenseMatrix64F B"], ["void", "double gamma", "DenseMatrix64F A", "DenseMatrix64F u", "DenseMatrix64F w"]], "innerProd": [["double", "D1Matrix64F x", "D1Matrix64F y"]], "outerProd": [["void", "D1Matrix64F x", "D1Matrix64F y", "RowD1Matrix64F A"]]}, "className": "VectorVectorMult", "renamed": ["void", "function", "(", "double", "arg0", ",", "D1Matrix64F", "arg1", ",", "D1Matrix64F", "arg2", ",", "D1Matrix64F", "arg3", ")", "{", "int", "loc0", "=", "arg1", ".", "getNumElements", "(", ")", ";", "double", "loc1", "=", "0", ";", "for", "(", "int", "loc2", "=", "0", ";", "loc2", "<", "loc0", ";", "loc2", "++", ")", "{", "loc1", "+=", "arg1", ".", "get", "(", "loc2", ")", "*", "arg2", ".", "get", "(", "loc2", ")", ";", "}", "for", "(", "int", "loc2", "=", "0", ";", "loc2", "<", "loc0", ";", "loc2", "++", ")", "{", "arg3", ".", "set", "(", "loc2", ",", "arg2", ".", "get", "(", "loc2", ")", "+", "arg0", "*", "arg1", ".", "get", "(", "loc2", ")", "*", "loc1", ")", ";", "}", "}"], "nl": " Multiplies a householder reflection against a vector:  y = (I + &gamma; u uT)x   The Householder reflection is used in some implementations of QR decomposition. ", "nlToks": ["Multiplies", "a", "householder", "reflection", "against", "a", "vector", ":", "y", "=", "-LRB-", "I", "+", "&", "gamma", ";", "u", "uT", "-RRB-", "x", "The", "Householder", "reflection", "is", "used", "in", "some", "implementations", "of", "QR", "decomposition", "."], "path": "adamaulia/efficient-java-matrix-library/tree/master/src/org/ejml/alg/dense/mult/VectorVectorMult.java", "idx": 208}
{"memberVariables": {"LOGGER=LoggerFactory.getLogger(CompressionUtils.class)": "Logger"}, "code": ["boolean", "function", "(", "Repository", "repository", ",", "String", "basePath", ",", "String", "objectId", ",", "OutputStream", "os", ")", "{", "return", "tar", "(", "CompressorStreamFactory", ".", "XZ", ",", "repository", ",", "basePath", ",", "objectId", ",", "os", ")", ";", "}"], "memberFunctions": {"zip": [["boolean", "Repository repository", "String basePath", "String objectId", "OutputStream os"]], "gz": [["boolean", "Repository repository", "String basePath", "String objectId", "OutputStream os"]], "tar": [["boolean", "Repository repository", "String basePath", "String objectId", "OutputStream os"], ["boolean", "String algorithm", "Repository repository", "String basePath", "String objectId", "OutputStream os"]], "error": [["void", "Throwable t", "Repository repository", "String pattern", "Object... objects"]], "bzip2": [["boolean", "Repository repository", "String basePath", "String objectId", "OutputStream os"]]}, "className": "CompressionUtils", "renamed": ["boolean", "function", "(", "Repository", "arg0", ",", "String", "arg1", ",", "String", "arg2", ",", "OutputStream", "arg3", ")", "{", "return", "tar", "(", "CompressorStreamFactory", ".", "XZ", ",", "arg0", ",", "arg1", ",", "arg2", ",", "arg3", ")", ";", "}"], "nl": "tar.xz the contents of the tree at the (optionally) specified revision and the (optionally) specified basepath to the supplied outputstream.", "nlToks": ["tar.xz", "the", "contents", "of", "the", "tree", "at", "the", "-LRB-", "optionally", "-RRB-", "specified", "revision", "and", "the", "-LRB-", "optionally", "-RRB-", "specified", "basepath", "to", "the", "supplied", "outputstream", "."], "path": "pombreda/gitblit/tree/master/src/main/java/com/gitblit/utils/CompressionUtils.java", "idx": 210}
{"memberVariables": {"FIQL=DEFAULT_LANGUAGE": "String", "DEFAULT_LANGUAGE=\"FIQL\"": "String"}, "code": ["SearchConditionBuilder", "function", "(", "String", "language", ")", "{", "return", "instance", "(", "language", ",", "Collections", ".", "<", "String", ",", "String", ">", "emptyMap", "(", ")", ")", ";", "}"], "memberFunctions": {"query": [["String"]]}, "className": "SearchConditionBuilder", "renamed": ["SearchConditionBuilder", "function", "(", "String", "arg0", ")", "{", "return", "instance", "(", "arg0", ",", "Collections", ".", "<", "String", ",", "String", ">", "emptyMap", "(", ")", ")", ";", "}"], "nl": "Creates instance of builder for specific language.", "nlToks": ["Creates", "instance", "of", "builder", "for", "specific", "language", "."], "path": "primesign/cxf/tree/master/rt/rs/extensions/search/src/main/java/org/apache/cxf/jaxrs/ext/search/client/SearchConditionBuilder.java", "idx": 213}
{"memberVariables": {}, "code": ["void", "function", "(", "Node", "node", ",", "Set", "<", "T", ">", "nodes", ",", "Class", "<", "T", ">", "clazz", ")", "{", "if", "(", "null", "!=", "node", ")", "{", "if", "(", "(", "null", "==", "clazz", ")", "||", "(", "clazz", ".", "equals", "(", "node", ".", "getClass", "(", ")", ")", ")", ")", "{", "nodes", ".", "add", "(", "(", "T", ")", "node", ")", ";", "}", "for", "(", "int", "i", "=", "0", ";", "i", "<", "node", ".", "jjtGetNumChildren", "(", ")", ";", "i", "++", ")", "{", "addNodeAndSubnodes", "(", "node", ".", "jjtGetChild", "(", "i", ")", ",", "nodes", ",", "clazz", ")", ";", "}", "}", "}"], "memberFunctions": {"getNodes": [["Set<T>", "Class<T> clazz", "String source"]], "assertNumberOfNodes": [["void", "Class<T> clazz", "String source", "int number"]], "getNodesOfType": [["Set<T>", "Class<T> clazz", "Set<JspNode> allNodes"]]}, "className": "AbstractJspNodesTst", "renamed": ["void", "function", "(", "Node", "arg0", ",", "Set", "<", "T", ">", "arg1", ",", "Class", "<", "T", ">", "arg2", ")", "{", "if", "(", "null", "!=", "arg0", ")", "{", "if", "(", "(", "null", "==", "arg2", ")", "||", "(", "arg2", ".", "equals", "(", "arg0", ".", "getClass", "(", ")", ")", ")", ")", "{", "arg1", ".", "add", "(", "(", "T", ")", "arg0", ")", ";", "}", "for", "(", "int", "loc0", "=", "0", ";", "loc0", "<", "arg0", ".", "jjtGetNumChildren", "(", ")", ";", "loc0", "++", ")", "{", "addNodeAndSubnodes", "(", "arg0", ".", "jjtGetChild", "(", "loc0", ")", ",", "arg1", ",", "arg2", ")", ";", "}", "}", "}"], "nl": "Add the given node and its subnodes to the set of nodes. If clazz is not null, only nodes of the given class are put in the set of nodes.", "nlToks": ["Add", "the", "given", "node", "and", "its", "subnodes", "to", "the", "set", "of", "nodes", ".", "If", "clazz", "is", "not", "null", ",", "only", "nodes", "of", "the", "given", "class", "are", "put", "in", "the", "set", "of", "nodes", "."], "path": "adangel/pmd/tree/master/pmd-jsp/src/test/java/net/sourceforge/pmd/lang/jsp/ast/AbstractJspNodesTst.java", "idx": 214}
{"memberVariables": {"view": "HandwriterView", "mRectF=new RectF()": "RectF", "mRect=new Rect()": "Rect"}, "code": ["boolean", "function", "(", "MotionEvent", "event", ")", "{", "return", "!", "view", ".", "onlyPenInput", "||", "(", "view", ".", "onlyPenInput", "&&", "!", "Hardware", ".", "isPenEvent", "(", "event", ")", ")", ";", "}"], "memberFunctions": {"getOnlyPenInput": [["boolean"]], "getScaledPenThickness": [["float"]], "onTouchEvent": [["boolean", "MotionEvent event"]], "getPage": [["Page"]], "getDoubleTapWhileWriting": [["boolean"]], "getMoveGestureWhileWriting": [["boolean"]], "drawPinchZoomPreview": [["void", "Canvas canvas", "Bitmap bitmap", "float oldX1", "float newX1", "float oldX2", "float newX2", "float oldY1", "float newY1", "float oldY2", "float newY2"]], "destroy": [["void"]], "pinchZoomTransform": [["Transformation", "final Transformation transformation", "float oldX1", "float newX1", "float oldX2", "float newX2", "float oldY1", "float newY1", "float oldY2", "float newY2"]], "draw": [["void", "Canvas canvas", "Bitmap bitmap"]], "useForWriting": [["boolean", "MotionEvent event"]], "redraw": [["void"]], "pinchZoomScaleFactor": [["float", "float oldX1", "float newX1", "float oldX2", "float newX2", "float oldY1", "float newY1", "float oldY2", "float newY2"]], "interrupt": [["void"]], "getContext": [["Context"]], "getMoveGestureMinDistance": [["int"]]}, "className": "TouchHandlerABC", "renamed": ["boolean", "function", "(", "MotionEvent", "arg0", ")", "{", "return", "!", "view", ".", "onlyPenInput", "||", "(", "view", ".", "onlyPenInput", "&&", "!", "Hardware", ".", "isPenEvent", "(", "arg0", ")", ")", ";", "}"], "nl": "Whether to use the MotionEvent as finger touch", "nlToks": ["Whether", "to", "use", "the", "MotionEvent", "as", "finger", "touch"], "path": "praveensubramaniam/android-quill/tree/master/src/name/vbraun/view/write/TouchHandlerABC.java", "idx": 215}
{"memberVariables": {"LOG=LogUtils.getL7dLogger(AbstractOAuthService.class)": "Logger", "mc": "MessageContext", "dataProvider": "OAuthDataProvider", "writeOptionalParameters=true": "boolean", "blockUnsecureRequests": "boolean", "dataProviderContextMethod": "Method"}, "code": ["void", "function", "(", ")", "{", "if", "(", "!", "mc", ".", "getSecurityContext", "(", ")", ".", "isSecure", "(", ")", ")", "{", "LOG", ".", "warning", "(", "\"Unsecure HTTP, Transport Layer Security is recommended\"", ")", ";", "if", "(", "blockUnsecureRequests", ")", "{", "throw", "ExceptionUtils", ".", "toBadRequestException", "(", "null", ",", "null", ")", ";", "}", "}", "}"], "memberFunctions": {"isWriteOptionalParameters": [["boolean"]], "setMessageContext": [["void", "MessageContext context"]], "setBlockUnsecureRequests": [["void", "boolean blockUnsecureRequests"]], "getDataProvider": [["OAuthDataProvider"]], "getQueryParameters": [["MultivaluedMap<String,String>"]], "getValidClient": [["Client", "MultivaluedMap<String,String> params"], ["Client", "String clientId"]], "reportInvalidRequestError": [["void", "String errorDescription"], ["void", "String errorDescription", "MediaType mt"], ["void", "OAuthError entity"], ["void", "OAuthError entity", "MediaType mt"]], "setDataProvider": [["void", "OAuthDataProvider dataProvider"]], "setWriteOptionalParameters": [["void", "boolean write"]], "getMessageContext": [["MessageContext"]]}, "className": "AbstractOAuthService", "renamed": ["void", "function", "(", ")", "{", "if", "(", "!", "mc", ".", "getSecurityContext", "(", ")", ".", "isSecure", "(", ")", ")", "{", "LOG", ".", "warning", "(", "\"srini_string\"", ")", ";", "if", "(", "blockUnsecureRequests", ")", "{", "throw", "ExceptionUtils", ".", "toBadRequestException", "(", "null", ",", "null", ")", ";", "}", "}", "}"], "nl": "HTTPS is the default transport for OAuth 2.0 services. By default this method will issue a warning for open  endpoints", "nlToks": ["HTTPS", "is", "the", "default", "transport", "for", "OAuth", "2.0", "services", ".", "By", "default", "this", "method", "will", "issue", "a", "warning", "for", "open", "endpoints"], "path": "primesign/cxf/tree/master/rt/rs/security/oauth-parent/oauth2/src/main/java/org/apache/cxf/rs/security/oauth2/services/AbstractOAuthService.java", "idx": 216}
{"memberVariables": {"configurationContext=null": "ConfigurationContext", "WORKERS_MAX_THREADS=5": "int", "serverCredentials": "XMPPServerCredentials", "WORKER_KEEP_ALIVE=60L": "long", "connectionFactories=new HashMap()": "Map", "TIME_UNIT=TimeUnit.SECONDS": "TimeUnit", "log=LogFactory.getLog(XMPPListener.class)": "Log", "workerPool": "ExecutorService", "xmppConnection=null": "XMPPConnection"}, "code": ["void", "function", "(", ")", "{", "if", "(", "workerPool", "!=", "null", "&&", "!", "workerPool", ".", "isShutdown", "(", ")", ")", "{", "workerPool", ".", "shutdown", "(", ")", ";", "}", "}"], "memberFunctions": {"init": [["void", "ConfigurationContext configurationCtx", "TransportInDescription transportIn"]], "getEPRForService": [["EndpointReference", "String serviceName", "String ip"]], "initializeConnectionFactories": [["void", "TransportInDescription transportIn"]], "start": [["void"]], "destroy": [["void"]], "getSessionContext": [["SessionContext", "MessageContext messageContext"]], "getEPRsForService": [["EndpointReference[]", "String serviceName", "String ip"]]}, "className": "XMPPListener", "renamed": ["void", "function", "(", ")", "{", "if", "(", "workerPool", "!=", "null", "&&", "!", "workerPool", ".", "isShutdown", "(", ")", ")", "{", "workerPool", ".", "shutdown", "(", ")", ";", "}", "}"], "nl": "Stop XMPP listener & disconnect from all XMPP Servers", "nlToks": ["Stop", "XMPP", "listener", "&", "disconnect", "from", "all", "XMPP", "Servers"], "path": "harsha89/wso2-axis2-transports/tree/master/modules/xmpp/src/org/apache/axis2/transport/xmpp/XMPPListener.java", "idx": 220}
{"memberVariables": {"mMap=new HashMap<String,Object>()": "Map<String,Object>"}, "code": ["String", "function", "(", "String", "key", ")", "{", "Object", "tmp", "=", "mMap", ".", "get", "(", "key", ")", ";", "return", "tmp", "==", "null", "?", "null", ":", "tmp", ".", "toString", "(", ")", ";", "}"], "memberFunctions": {"getObject": [["JSONObject", "String key"]], "keys": [["Iterator<String>"]], "getDouble": [["double", "String key", "double def"]], "getArray": [["JSONArray", "String key"]], "getFloat": [["float", "String key", "float def"]], "put": [["void", "String name", "Object value"]], "writeJSON": [["void", "JSONConverter jc", "JSONWriter jb", "boolean writeClass"]], "getLong": [["long", "String key", "long def"]], "getInt": [["int", "String key", "int def"]], "contains": [["boolean", "String key"]], "get": [["Object", "String key"]], "putAll": [["void", "String[] names", "Object[] values"], ["void", "Map<String,Object> map"]], "getBoolean": [["boolean", "String key", "boolean def"]]}, "className": "JSONObject", "renamed": ["String", "function", "(", "String", "arg0", ")", "{", "Object", "loc0", "=", "mMap", ".", "get", "(", "arg0", ")", ";", "return", "loc0", "==", "null", "?", "null", ":", "loc0", ".", "toString", "(", ")", ";", "}"], "nl": "get string value.", "nlToks": ["get", "string", "value", "."], "path": "acupple/dubbo/tree/master/dubbo-common/src/main/java/com/alibaba/dubbo/common/json/JSONObject.java", "idx": 221}
{"memberVariables": {"listeners": "List", "line": "SourceDataLine", "filePath": "String", "playerThread": "Thread", "decoder": "FLACDecoder", "fmt": "AudioFormat", "info": "DataLine.Info"}, "code": ["void", "function", "(", "ByteData", "pcm", ")", "{", "line", ".", "write", "(", "pcm", ".", "getData", "(", ")", ",", "0", ",", "pcm", ".", "getLen", "(", ")", ")", ";", "}"], "memberFunctions": {"play": [["void"], ["String", "String filePath"]], "processStreamInfo": [["void", "StreamInfo streamInfo"]], "stop": [["void"]], "update": [["void", "LineEvent event"]], "run": [["void"]], "removeListener": [["void", "LineListener listener"]], "decode": [["void", "String inFileName"]], "addListener": [["void", "LineListener listener"]]}, "className": "PlayerFlac", "renamed": ["void", "function", "(", "ByteData", "arg0", ")", "{", "line", ".", "write", "(", "arg0", ".", "getData", "(", ")", ",", "0", ",", "arg0", ".", "getLen", "(", ")", ")", ";", "}"], "nl": "Process the decoded PCM bytes.", "nlToks": ["Process", "the", "decoded", "PCM", "bytes", "."], "path": "phramusca/JaMuz/tree/master/src/jamuz/player/PlayerFlac.java", "idx": 222}
{"memberVariables": {"originallyEncodedSize": "int", "value": "long"}, "code": ["int", "function", "(", ")", "{", "return", "sizeOf", "(", "value", ")", ";", "}"], "memberFunctions": {"encode": [["byte[]"]], "sizeOf": [["int", "int value"], ["int", "long value"]], "getOriginalSizeInBytes": [["int"]]}, "className": "VarInt", "renamed": ["int", "function", "(", ")", "{", "return", "sizeOf", "(", "value", ")", ";", "}"], "nl": "Gets the minimum encoded size of the value stored in this VarInt", "nlToks": ["Gets", "the", "minimum", "encoded", "size", "of", "the", "value", "stored", "in", "this", "VarInt"], "path": "plncoin/plncoin-and/tree/master/plncoinj/core/src/main/java/com/google/bitcoin/core/VarInt.java", "idx": 224}
{"memberVariables": {"names=new HashMap<Class<? extends Message>,String>()": "Map<Class<? extends Message>,String>", "size": "int", "log=LoggerFactory.getLogger(BitcoinSerializer.class)": "Logger", "parseLazy=false": "boolean", "HEADER_LENGTH=COMMAND_LEN + 4 + 4": "int", "checksum": "byte[]", "header": "byte[]", "params": "NetworkParameters", "COMMAND_LEN=12": "int", "command": "String", "parseRetain=false": "boolean"}, "code": ["boolean", "function", "(", ")", "{", "return", "parseRetain", ";", "}"], "memberFunctions": {"seekPastMagicBytes": [["void", "ByteBuffer in"]], "serialize": [["void", "String name", "byte[] message", "OutputStream out"], ["void", "Message message", "OutputStream out"]], "makeMessage": [["Message", "String command", "int length", "byte[] payloadBytes", "byte[] hash", "byte[] checksum"]], "deserializePayload": [["Message", "BitcoinPacketHeader header", "ByteBuffer in"]], "isParseLazyMode": [["boolean"]], "deserializeHeader": [["BitcoinPacketHeader", "ByteBuffer in"]], "deserialize": [["Message", "ByteBuffer in"]]}, "className": "BitcoinSerializer", "renamed": ["boolean", "function", "(", ")", "{", "return", "parseRetain", ";", "}"], "nl": "Whether the serializer will produce cached mode Messages", "nlToks": ["Whether", "the", "serializer", "will", "produce", "cached", "mode", "Messages"], "path": "1000000000001/bitcoinj/tree/master/core/src/main/java/org/bitcoinj/core/BitcoinSerializer.java", "idx": 227}
{"memberVariables": {"endDate": "Timestamp", "feedConfigId": "BigDecimal", "resultCode": "String", "serialVersionUID=1L": "long", "resultMessage": "String", "fileCount": "BigDecimal", "maxReceiptDate": "Timestamp", "downloadSize": "BigDecimal", "feedId": "BigDecimal", "configInfo": "String", "runId": "long", "errors": "byte[]", "runStatus": "String", "startDate": "Timestamp"}, "code": ["void", "function", "(", "String", "runStatus", ")", "{", "this", ".", "runStatus", "=", "runStatus", ";", "}"], "memberFunctions": {"getFeedConfigId": [["BigDecimal"]], "getStartDate": [["Timestamp"]], "setFeedId": [["void", "BigDecimal feedId"]], "getResultCode": [["String"]], "setFeedConfigId": [["void", "BigDecimal feedConfigId"]], "setMaxReceiptDate": [["void", "Timestamp maxReceiptDate"]], "getRunId": [["long"]], "getEndDate": [["Timestamp"]], "setErrors": [["void", "byte[] errors"]], "getConfigInfo": [["String"]], "setEndDate": [["void", "Timestamp endDate"]], "getErrors": [["byte[]"]], "setFileCount": [["void", "BigDecimal fileCount"]], "getDownloadSize": [["BigDecimal"]], "getResultMessage": [["String"]], "setResultMessage": [["void", "String resultMessage"]], "getFileCount": [["BigDecimal"]], "getRunStatus": [["String"]], "setStartDate": [["void", "Timestamp startDate"]], "getFeedId": [["BigDecimal"]], "setResultCode": [["void", "String resultCode"]], "setRunId": [["void", "long runId"]], "getMaxReceiptDate": [["Timestamp"]], "setConfigInfo": [["void", "String configInfo"]], "setDownloadSize": [["void", "BigDecimal downloadSize"]]}, "className": "PCLFetcherRunRecorderEntity", "renamed": ["void", "function", "(", "String", "arg0", ")", "{", "this", ".", "runStatus", "=", "arg0", ";", "}"], "nl": "Sets the run status.", "nlToks": ["Sets", "the", "run", "status", "."], "path": "pkesireddy/portico_fletcher/tree/master/FetcherTesterService/src/main/java/org/ithaka/cm/fetchertester/entity/PCLFetcherRunRecorderEntity.java", "idx": 228}
{"memberVariables": {"ourInstance=new GeneralMotorCon()": "GeneralMotorCon", "spin90Time=3000": "int", "TAG=\"GMC\"": "String", "batLvl=0": "int", "threadTimer=0": "long", "spinSpeed=2": "int", "cmd": "CommandManager", "hoverTime=2000": "int", "speed=10": "int", "spin90Speed=50": "int", "drone": "ARDrone", "spinTime=50": "int"}, "code": ["void", "function", "(", ")", "{", "SpaceXGUI", ".", "getInstance", "(", ")", ".", "appendToConsole", "(", "TAG", ",", "\" - spinning 90 right\"", ")", ";", "cmd", ".", "setLedsAnimation", "(", "LEDAnimation", ".", "BLINK_RED", ",", "3", ",", "(", "spinTime", "/", "1000", ")", ")", ";", "cmd", ".", "spinRight", "(", "spin90Speed", ")", ".", "doFor", "(", "spin90Time", ")", ";", "cmd", ".", "hover", "(", ")", ".", "doFor", "(", "hoverTime", ")", ";", "}"], "memberFunctions": {"spin90Left": [["void"]], "spinRight": [["void"]], "takeoff": [["void"]], "forward": [["void", "int time"]], "spinLeft": [["void"]], "right": [["void"]], "lowerAltitude": [["void"]], "landing": [["void"]], "setDrone": [["void", "ARDrone drone"]], "left": [["void"]], "backward": [["void", "int time"]], "getInstance": [["GeneralMotorCon"]], "setBatLvl": [["void", "int batLvl"]], "waitFor": [["void", "int millis"]], "getBatLvl": [["int"]], "onStop": [["void"]], "raiseAltitude": [["void"]]}, "className": "GeneralMotorCon", "renamed": ["void", "function", "(", ")", "{", "SpaceXGUI", ".", "getInstance", "(", ")", ".", "appendToConsole", "(", "TAG", ",", "\"srini_string\"", ")", ";", "cmd", ".", "setLedsAnimation", "(", "LEDAnimation", ".", "BLINK_RED", ",", "3", ",", "(", "spinTime", "/", "1000", ")", ")", ";", "cmd", ".", "spinRight", "(", "spin90Speed", ")", ".", "doFor", "(", "spin90Time", ")", ";", "cmd", ".", "hover", "(", ")", ".", "doFor", "(", "hoverTime", ")", ";", "}"], "nl": "Spin 90 Right Spin the drone 90 degrees to the right", "nlToks": ["Spin", "90", "Right", "Spin", "the", "drone", "90", "degrees", "to", "the", "right"], "path": "02343Gruppe2/02343_Ardrone/tree/master/src/algo/GeneralMotorCon.java", "idx": 229}
{"memberVariables": {"approvedSiteService": "ApprovedSiteService", "byClientIdCache=createByClientIdCache()": "Supplier<Map<Long,Integer>>", "clientService": "ClientDetailsEntityService", "summaryCache=createSummaryCache()": "Supplier<Map<String,Integer>>"}, "code": ["Map", "<", "Long", ",", "Integer", ">", "function", "(", ")", "{", "Map", "<", "Long", ",", "Integer", ">", "counts", "=", "new", "HashMap", "<", ">", "(", ")", ";", "Collection", "<", "ClientDetailsEntity", ">", "clients", "=", "clientService", ".", "getAllClients", "(", ")", ";", "for", "(", "ClientDetailsEntity", "client", ":", "clients", ")", "{", "counts", ".", "put", "(", "client", ".", "getId", "(", ")", ",", "0", ")", ";", "}", "return", "counts", ";", "}"], "memberFunctions": {"getCountForClientId": [["Integer", "Long id"]], "computeSummaryStats": [["Map<String,Integer>"]], "computeByClientId": [["Map<Long,Integer>"]], "resetCache": [["void"]], "getByClientId": [["Map<Long,Integer>"]], "createByClientIdCache": [["Supplier<Map<Long,Integer>>"]], "getSummaryStats": [["Map<String,Integer>"]], "createSummaryCache": [["Supplier<Map<String,Integer>>"]]}, "className": "DefaultStatsService", "renamed": ["Map", "<", "Long", ",", "Integer", ">", "function", "(", ")", "{", "Map", "<", "Long", ",", "Integer", ">", "loc0", "=", "new", "HashMap", "<", ">", "(", ")", ";", "Collection", "<", "ClientDetailsEntity", ">", "loc1", "=", "clientService", ".", "getAllClients", "(", ")", ";", "for", "(", "ClientDetailsEntity", "loc2", ":", "loc1", ")", "{", "loc0", ".", "put", "(", "loc2", ".", "getId", "(", ")", ",", "0", ")", ";", "}", "return", "loc0", ";", "}"], "nl": "Create a new map of all client ids set to zero", "nlToks": ["Create", "a", "new", "map", "of", "all", "client", "ids", "set", "to", "zero"], "path": "adilansari/OpenID-Connect-Java-Spring-Server/tree/master/openid-connect-server/src/main/java/org/mitre/openid/connect/service/impl/DefaultStatsService.java", "idx": 230}
{"memberVariables": {"OPEN=\"[\"": "String", "expression": "String", "PI=\"processing-instruction()\"": "String", "TEXT=\"text()\"": "String", "type": "short", "EMPTY=\"\"": "String", "uri2Prefix": "Map<String,String>", "attributes=new HashMap<QName,Level>()": "Map<QName,Level>", "path=new LinkedList<Level>()": "Deque<Level>", "SEP=\"/\"": "String", "COMMENT=\"comment()\"": "String", "xpath": "String", "ATTR=\"@\"": "String", "children=new ArrayList<Level>()": "List<Level>", "name": "QName", "CLOSE=\"]\"": "String"}, "code": ["XPathContext", "function", "(", ")", "{", "try", "{", "XPathContext", "c", "=", "(", "XPathContext", ")", "super", ".", "clone", "(", ")", ";", "c", ".", "path", "=", "new", "LinkedList", "<", "Level", ">", "(", ")", ";", "for", "(", "Level", "l", ":", "path", ")", "{", "c", ".", "path", ".", "addLast", "(", "l", ".", "clone", "(", ")", ")", ";", "}", "return", "c", ";", "}", "catch", "(", "CloneNotSupportedException", "e", ")", "{", "throw", "new", "RuntimeException", "(", "\"XPathContext cannot be cloned?\"", ",", "e", ")", ";", "}", "}"], "memberFunctions": {"navigateToParent": [["void"]], "getName": [["String", "QName name"], ["QName"], ["QName"]], "appendChildren": [["void", "Iterable<? extends NodeInfo> children"]], "invert": [["Map<String,String>", "Map<String,String> m"]], "addAttribute": [["void", "QName attribute"]], "getType": [["short"], ["short"]], "addAttributes": [["void", "Iterable<? extends QName> attributes"]], "add1OrIncrement": [["int", "String name", "Map<String,Integer> map"]], "getXPath": [["String"], ["String", "Iterator<Level> dIterator"]], "navigateToChild": [["void", "int index"]], "setChildren": [["void", "Iterable<? extends NodeInfo> children"]], "navigateToAttribute": [["void", "QName attribute"]]}, "className": "XPathContext", "renamed": ["XPathContext", "function", "(", ")", "{", "try", "{", "XPathContext", "loc0", "=", "(", "XPathContext", ")", "super", ".", "clone", "(", ")", ";", "loc0", ".", "path", "=", "new", "LinkedList", "<", "Level", ">", "(", ")", ";", "for", "(", "Level", "loc1", ":", "path", ")", "{", "loc0", ".", "path", ".", "addLast", "(", "loc1", ".", "clone", "(", ")", ")", ";", "}", "return", "loc0", ";", "}", "catch", "(", "CloneNotSupportedException", "loc0", ")", "{", "throw", "new", "RuntimeException", "(", "\"srini_string\"", ",", "loc0", ")", ";", "}", "}"], "nl": "Creates a deep copy of this XPathContext.", "nlToks": ["Creates", "a", "deep", "copy", "of", "this", "XPathContext", "."], "path": "phbenisc/xmlunit/tree/master/xmlunit-core/src/main/java/org/xmlunit/diff/XPathContext.java", "idx": 231}
{"memberVariables": {"mKeyCount": "int", "BUCKET_SIZE_BYTES=Constants.BYTES_IN_INTEGER + 1": "int", "mBuf": "ByteBuffer", "INDEX_HASHER_SEED=0x1311": "int", "FINGERPRINT_HASHER_SEED=0x7a91": "int", "FINGERPRINT_HASHER=Hashing.murmur3_32(FINGERPRINT_HASHER_SEED)": "HashFunction", "INDEX_HASHER=Hashing.murmur3_32(INDEX_HASHER_SEED)": "HashFunction", "mHashTableBuf": "ByteBuffer", "MAX_PROBES=50": "int", "mNumBuckets": "int"}, "code": ["int", "function", "(", "byte", "[", "]", "key", ")", "{", "int", "v", "=", "INDEX_HASHER", ".", "hashBytes", "(", "key", ")", ".", "asInt", "(", ")", "%", "mNumBuckets", ";", "return", "(", "v", ">=", "0", ")", "?", "v", ":", "-", "v", ";", "}"], "memberFunctions": {"keyCount": [["int"]], "keyIterator": [["Iterator<ByteBuffer>", "final PayloadReader reader"]], "bucketOffset": [["int", "ByteBuffer key", "PayloadReader reader"]], "createEmptyIndex": [["LinearProbingIndex"]], "loadFromByteArray": [["LinearProbingIndex", "ByteBuffer buffer"]], "byteCount": [["int"]], "get": [["ByteBuffer", "ByteBuffer key", "PayloadReader reader"]], "fingerprintHash": [["byte", "byte[] key"], ["byte", "ByteBuffer key"]], "nextKey": [["ByteBuffer", "ByteBuffer currentKey", "PayloadReader reader"]], "put": [["boolean", "byte[] key", "byte[] value", "PayloadWriter writer"]], "getBytes": [["byte[]"]]}, "className": "LinearProbingIndex", "renamed": ["int", "function", "(", "byte", "[", "]", "arg0", ")", "{", "int", "loc0", "=", "INDEX_HASHER", ".", "hashBytes", "(", "arg0", ")", ".", "asInt", "(", ")", "%", "mNumBuckets", ";", "return", "(", "loc0", ">=", "0", ")", "?", "loc0", ":", "-", "loc0", ";", "}"], "nl": "Hashes a key in byte array to a bucket index in non-negative integer value.", "nlToks": ["Hashes", "a", "key", "in", "byte", "array", "to", "a", "bucket", "index", "in", "non-negative", "integer", "value", "."], "path": "poemlin/alluxio/tree/master/keyvalue/client/src/main/java/alluxio/client/keyvalue/LinearProbingIndex.java", "idx": 232}
{"memberVariables": {"instance=SentenceFactory.getInstance()": "SentenceFactory"}, "code": ["void", "function", "(", ")", "{", "assertTrue", "(", "instance", ".", "hasParser", "(", "\"GLL\"", ")", ")", ";", "assertFalse", "(", "instance", ".", "hasParser", "(", "\"ABC\"", ")", ")", ";", "}"], "memberFunctions": {"testRegisterInvalidParser": [["void"]], "testUnregisterParser": [["void"]], "testListParsers": [["void"]], "testCreateParserWithNull": [["void"]], "testCreateEmptyParserWithSentenceIdStr": [["void"]], "testCreateEmptyCustomParser": [["void"]], "testCreateParserWithUnregistered": [["void"]], "testCreateEmptyParserWithSentenceId": [["void"]], "testCreateCustomParser": [["void"]], "testRegisterParserWithAlternativeBeginChar": [["void"]], "testSupportedTypesRegistered": [["void"]], "testCreateParser": [["void"]], "testCreateParserWithRandom": [["void"]], "setUp": [["void"]], "testGetInstance": [["void"]], "testCreateParserWithEmptyString": [["void"]]}, "className": "SentenceFactoryTest", "renamed": ["void", "function", "(", ")", "{", "assertTrue", "(", "instance", ".", "hasParser", "(", "\"srini_string\"", ")", ")", ";", "assertFalse", "(", "instance", ".", "hasParser", "(", "\"srini_string\"", ")", ")", ";", "}"], "nl": "Test method for {@link net.sf.marineapi.nmea.parser.SentenceFactory#hasParser(java.lang.String)}.", "nlToks": ["Test", "method", "for", "-LCB-", "@link", "net.sf.marineapi.nmea.parser.SentenceFactory", "#hasParser", "-LRB-", "java.lang.String", "-RRB-", "-RCB-", "."], "path": "pkoziol/marine-api/tree/master/src/test/java/net/sf/marineapi/nmea/parser/SentenceFactoryTest.java", "idx": 233}
{"memberVariables": {"commaSeparatedValuesPattern=Pattern.compile(\"\\\\s*,\\\\s*\")": "Pattern", "log=Loggers.getLogger(this.getClass())": "ESLogger", "remoteIpHeader=\"X-Forwarded-For\"": "String", "internalProxies=Pattern.compile(\"10\\\\.\\\\d{1,3}\\\\.\\\\d{1,3}\\\\.\\\\d{1,3}|\" + \"192\\\\.168\\\\.\\\\d{1,3}\\\\.\\\\d{1,3}|\" + \"169\\\\.254\\\\.\\\\d{1,3}\\\\.\\\\d{1,3}|\"+ \"127\\\\.\\\\d{1,3}\\\\.\\\\d{1,3}\\\\.\\\\d{1,3}|\"+ \"172\\\\.1[6-9]{1}\\\\.\\\\d{1,3}\\\\.\\\\d{1,3}|\"+ \"172\\\\.2[0-9]{1}\\\\.\\\\d{1,3}\\\\.\\\\d{1,3}|\"+ \"172\\\\.3[0-1]{1}\\\\.\\\\d{1,3}\\\\.\\\\d{1,3}\")": "Pattern", "trustedProxies=null": "Pattern", "proxiesHeader=\"X-Forwarded-By\"": "String"}, "code": ["void", "function", "(", "String", "proxiesHeader", ")", "{", "this", ".", "proxiesHeader", "=", "proxiesHeader", ";", "}"], "memberFunctions": {"listToCommaDelimitedString": [["String", "List<String> stringList"]], "getProxiesHeader": [["String"]], "getTrustedProxies": [["String"]], "setInternalProxies": [["void", "String internalProxies"]], "setTrustedProxies": [["void", "String trustedProxies"]], "commaDelimitedListToStringArray": [["String[]", "String commaDelimitedStrings"]], "detect": [["String", "final NettyHttpRequest request"]], "getRemoteIpHeader": [["String"]], "getInternalProxies": [["String"]], "setRemoteIpHeader": [["void", "String remoteIpHeader"]]}, "className": "RemoteIpDetector", "renamed": ["void", "function", "(", "String", "arg0", ")", "{", "this", ".", "proxiesHeader", "=", "arg0", ";", "}"], "nl": " The proxiesHeader directive specifies a header into which mod_remoteip will collect a list of all of the intermediate client IP addresses trusted to resolve the actual remote IP. Note that intermediate RemoteIPTrustedProxy addresses are recorded in this header, while any intermediate RemoteIPInternalProxy addresses are discarded.   Name of the http header that holds the list of trusted proxies that has been traversed by the http request.   The value of this header can be comma delimited.   Default value : X-Forwarded-By ", "nlToks": ["The", "proxiesHeader", "directive", "specifies", "a", "header", "into", "which", "mod_remoteip", "will", "collect", "a", "list", "of", "all", "of", "the", "intermediate", "client", "IP", "addresses", "trusted", "to", "resolve", "the", "actual", "remote", "IP", ".", "Note", "that", "intermediate", "RemoteIPTrustedProxy", "addresses", "are", "recorded", "in", "this", "header", ",", "while", "any", "intermediate", "RemoteIPInternalProxy", "addresses", "are", "discarded", ".", "Name", "of", "the", "http", "header", "that", "holds", "the", "list", "of", "trusted", "proxies", "that", "has", "been", "traversed", "by", "the", "http", "request", ".", "The", "value", "of", "this", "header", "can", "be", "comma", "delimited", ".", "Default", "value", ":", "X-Forwarded-By"], "path": "0xwindows/search-guard/tree/master/src/main/java/com/floragunn/searchguard/http/RemoteIpDetector.java", "idx": 235}
{"memberVariables": {"OPEN=\"[\"": "String", "expression": "String", "PI=\"processing-instruction()\"": "String", "TEXT=\"text()\"": "String", "type": "short", "EMPTY=\"\"": "String", "uri2Prefix": "Map<String,String>", "attributes=new HashMap<QName,Level>()": "Map<QName,Level>", "path=new LinkedList<Level>()": "Deque<Level>", "SEP=\"/\"": "String", "COMMENT=\"comment()\"": "String", "xpath": "String", "ATTR=\"@\"": "String", "children=new ArrayList<Level>()": "List<Level>", "name": "QName", "CLOSE=\"]\"": "String"}, "code": ["String", "function", "(", ")", "{", "return", "getXPath", "(", "path", ".", "descendingIterator", "(", ")", ")", ";", "}"], "memberFunctions": {"navigateToParent": [["void"]], "getName": [["String", "QName name"], ["QName"], ["QName"]], "appendChildren": [["void", "Iterable<? extends NodeInfo> children"]], "invert": [["Map<String,String>", "Map<String,String> m"]], "addAttribute": [["void", "QName attribute"]], "getType": [["short"], ["short"]], "addAttributes": [["void", "Iterable<? extends QName> attributes"]], "clone": [["XPathContext"], ["Level"]], "add1OrIncrement": [["int", "String name", "Map<String,Integer> map"]], "navigateToChild": [["void", "int index"]], "setChildren": [["void", "Iterable<? extends NodeInfo> children"]], "navigateToAttribute": [["void", "QName attribute"]]}, "className": "XPathContext", "renamed": ["String", "function", "(", ")", "{", "return", "getXPath", "(", "path", ".", "descendingIterator", "(", ")", ")", ";", "}"], "nl": "Stringifies the XPath of the current node.", "nlToks": ["Stringifies", "the", "XPath", "of", "the", "current", "node", "."], "path": "phbenisc/xmlunit/tree/master/xmlunit-core/src/main/java/org/xmlunit/diff/XPathContext.java", "idx": 236}
{"memberVariables": {"serialVersionUID=1L": "long", "isSystemDerived": "String", "isActive": "String", "predecessorId": "BigDecimal", "srcFileName": "String", "successorId": "BigDecimal", "feedId": "BigDecimal", "checksum": "String", "transmissionDatasetId": "String", "comments": "String", "inactivationReasonType": "String", "isFormatValid": "String", "dataUnitId": "long", "receiptDate": "Timestamp", "srcUniqueFileName": "String", "createdDate": "Timestamp", "dataSetId": "Long", "fileSize": "BigDecimal", "destFileName": "String", "loadedInCats": "String", "checksumType": "String", "modifiedDate": "Timestamp", "runId": "BigDecimal", "isPrepopulated": "String", "isBulk": "String", "isUpdate": "String", "receiptDateType": "String", "status": "String"}, "code": ["void", "function", "(", "BigDecimal", "runId", ")", "{", "this", ".", "runId", "=", "runId", ";", "}"], "memberFunctions": {"setIsSystemDerived": [["void", "String isSystemDerived"]], "setIsPrepopulated": [["void", "String isPrepopulated"]], "getStatus": [["String"]], "getIsUpdate": [["String"]], "getDataUnitId": [["long"]], "getFileSize": [["BigDecimal"]], "setInactivationReasonType": [["void", "String inactivationReasonType"]], "setDataUnitId": [["void", "long dataUnitId"]], "getComments": [["String"]], "getCreatedDate": [["Timestamp"]], "setFileSize": [["void", "BigDecimal fileSize"]], "getPredecessorId": [["BigDecimal"]], "setIsUpdate": [["void", "String isUpdate"]], "getReceiptDateType": [["String"]], "getFeedId": [["BigDecimal"]], "setReceiptDate": [["void", "Timestamp receiptDate"]], "getModifiedDate": [["Timestamp"]], "setSuccessorId": [["void", "BigDecimal successorId"]], "setDestFileName": [["void", "String destFileName"]], "setIsBulk": [["void", "String isBulk"]], "getIsFormatValid": [["String"]], "setDataSetId": [["void", "Long dataSetId"]], "setIsActive": [["void", "String isActive"]], "setChecksumType": [["void", "String checksumType"]], "setFeedId": [["void", "BigDecimal feedId"]], "getInactivationReasonType": [["String"]], "getSrcUniqueFileName": [["String"]], "getDataSetId": [["Long"]], "setReceiptDateType": [["void", "String receiptDateType"]], "getRunId": [["BigDecimal"]], "setSrcFileName": [["void", "String srcFileName"]], "getChecksumType": [["String"]], "getSrcFileName": [["String"]], "getChecksum": [["String"]], "getDestFileName": [["String"]], "getReceiptDate": [["Timestamp"]], "setTransmissionDatasetId": [["void", "String transmissionDatasetId"]], "getTransmissionDatasetId": [["String"]], "setComments": [["void", "String comments"]], "getLoadedInCats": [["String"]], "getSuccessorId": [["BigDecimal"]], "setLoadedInCats": [["void", "String loadedInCats"]], "getIsPrepopulated": [["String"]], "setSrcUniqueFileName": [["void", "String srcUniqueFileName"]], "setChecksum": [["void", "String checksum"]], "setIsFormatValid": [["void", "String isFormatValid"]], "getIsBulk": [["String"]], "setStatus": [["void", "String status"]], "getIsActive": [["String"]], "setModifiedDate": [["void", "Timestamp modifiedDate"]], "setCreatedDate": [["void", "Timestamp createdDate"]], "setPredecessorId": [["void", "BigDecimal predecessorId"]], "getIsSystemDerived": [["String"]]}, "className": "PCLDataUnitEntity", "renamed": ["void", "function", "(", "BigDecimal", "arg0", ")", "{", "this", ".", "runId", "=", "arg0", ";", "}"], "nl": "Sets the run id.", "nlToks": ["Sets", "the", "run", "id", "."], "path": "pkesireddy/portico_fletcher/tree/master/FetcherTesterService/src/main/java/org/ithaka/cm/fetchertester/entity/PCLDataUnitEntity.java", "idx": 238}
{"memberVariables": {"_the_production": "production", "_core_hash_cache": "int", "_symbol_after_dot=null": "symbol", "_dot_pos": "int"}, "code": ["boolean", "function", "(", ")", "{", "assert", "_dot_pos", "<=", "_the_production", ".", "rhs_length", "(", ")", ";", "return", "_dot_pos", "==", "_the_production", ".", "rhs_length", "(", ")", ";", "}"], "memberFunctions": {"shift_core": [["lr_item_core"]], "symbol_after_dot": [["symbol"]], "obj_hash": [["int"]], "to_simple_string": [["String"]], "dot_pos": [["int"]], "hashCode": [["int"]], "equals": [["boolean", "lr_item_core other"], ["boolean", "Object other"]], "toString": [["String"]], "dot_before_nt": [["non_terminal"]], "the_production": [["production"]], "core_hashCode": [["int"]], "core_equals": [["boolean", "lr_item_core other"]]}, "className": "lr_item_core", "renamed": ["boolean", "function", "(", ")", "{", "assert", "_dot_pos", "<=", "_the_production", ".", "rhs_length", "(", ")", ";", "return", "_dot_pos", "==", "_the_production", ".", "rhs_length", "(", ")", ";", "}"], "nl": "Is the dot at the end of the production?", "nlToks": ["Is", "the", "dot", "at", "the", "end", "of", "the", "production", "?"], "path": "polyglot-compiler/polyglot/tree/master/tools/java_cup/src/java_cup/lr_item_core.java", "idx": 239}
{"memberVariables": {}, "code": ["void", "function", "(", ")", "{", "CompleteFileOptions", "options", "=", "CompleteFileOptions", ".", "defaults", "(", ")", ";", "Assert", ".", "assertEquals", "(", "0", ",", "options", ".", "getUfsLength", "(", ")", ")", ";", "}"], "memberFunctions": {"toThrift": [["void"]], "fields": [["void"]], "equalsTest": [["void"]]}, "className": "CompleteFileOptionsTest", "renamed": ["void", "function", "(", ")", "{", "CompleteFileOptions", "loc0", "=", "CompleteFileOptions", ".", "defaults", "(", ")", ";", "Assert", ".", "assertEquals", "(", "0", ",", "loc0", ".", "getUfsLength", "(", ")", ")", ";", "}"], "nl": "Tests that building a  {@link CompleteFileOptions} with the defaults works.", "nlToks": ["Tests", "that", "building", "a", "-LCB-", "@link", "CompleteFileOptions", "-RCB-", "with", "the", "defaults", "works", "."], "path": "poemlin/alluxio/tree/master/core/client/src/test/java/alluxio/client/file/options/CompleteFileOptionsTest.java", "idx": 241}
{"memberVariables": {"m_key": "String", "NOT_SHARED=new Permission(\"private\")": "Permission", "FRIENDS=new Permission(\"friends\")": "Permission", "m_permissionIndex=0": "int", "ALL=new Permission(\"all\")": "Permission", "serialVersionUID=-7697805723630402867L": "long", "FRIEND_FRIEND=new Permission(\"friend-friend\")": "Permission", "PUBLIC=new Permission(\"public\")": "Permission", "FRIEND_PUBLIC=new Permission(\"friend-public\")": "Permission", "PERMISSIONS=new HashMap()": "Map", "m_id": "int"}, "code": ["Permission", "function", "(", "final", "int", "id", ")", "{", "return", "(", "Permission", ")", "PERMISSIONS", ".", "get", "(", "new", "Integer", "(", "id", ")", ")", ";", "}"], "memberFunctions": {"getKey": [["String"]], "getID": [["int"]], "toString": [["String"]]}, "className": "Permission", "renamed": ["Permission", "function", "(", "final", "int", "arg0", ")", "{", "return", "(", "Permission", ")", "PERMISSIONS", ".", "get", "(", "new", "Integer", "(", "arg0", ")", ")", ";", "}"], "nl": "Utility method for accessing Permission instances by their  permission id.  This is used internally by Hibernate to map database  values to instances of this class.  Normal application code should  never call this method.", "nlToks": ["Utility", "method", "for", "accessing", "Permission", "instances", "by", "their", "permission", "id", ".", "This", "is", "used", "internally", "by", "Hibernate", "to", "map", "database", "values", "to", "instances", "of", "this", "class", ".", "Normal", "application", "code", "should", "never", "call", "this", "method", "."], "path": "adamfisk/littleshoot-client/tree/master/client/resource/src/main/java/org/lastbamboo/client/resource/Permission.java", "idx": 242}
{"memberVariables": {"context": "Context", "listener": "DuplicateProviderListener<T,DuplicateProvider<T>>", "cancelled": "boolean"}, "code": ["void", "function", "(", ")", "{", "cancelled", "=", "true", ";", "}"], "memberFunctions": {"fetchItems": [["void"]], "isCancelled": [["boolean"]], "getReadPermissions": [["String[]"]], "getCursorSelection": [["String"]], "deletePairs": [["void", "Collection<DuplicateItemPair<T>> pairs"]], "getContentUri": [["Uri"]], "empty": [["String", "Cursor cursor", "int index"]], "getItems": [["List<T>"]], "onPreExecute": [["void"]], "populateItem": [["void", "Cursor cursor", "T item"]], "getCursorProjection": [["String[]"]], "deleteItem": [["boolean", "T item"], ["boolean", "ContentResolver cr", "T item"]], "createItem": [["T", "Cursor cursor"]], "setListener": [["void", "DuplicateProviderListener<T,DuplicateProvider<T>> listener"]], "deleteItems": [["void", "Collection<T> items"]], "onPostExecute": [["void"]], "getListener": [["DuplicateProviderListener<T,DuplicateProvider<T>>"]], "getContext": [["Context"]], "getDeletePermissions": [["String[]"]]}, "className": "DuplicateProvider", "renamed": ["void", "function", "(", ")", "{", "cancelled", "=", "true", ";", "}"], "nl": "Cancel all operations.", "nlToks": ["Cancel", "all", "operations", "."], "path": "pnemonic78/RemoveDuplicates/tree/master/duplicates-android/app/src/main/java/com/github/duplicates/DuplicateProvider.java", "idx": 243}
{"memberVariables": {"gson=new Gson()": "Gson", "logger=LoggerFactory.getLogger(JsonUtils.class)": "Logger"}, "code": ["JsonElement", "function", "(", "Set", "<", "String", ">", "value", ")", "{", "return", "getAsArray", "(", "value", ",", "false", ")", ";", "}"], "memberFunctions": {"readMap": [["Map", "JsonReader reader"]], "getAsDate": [["Date", "JsonObject o", "String member"]], "getAsEncryptionMethodList": [["List<EncryptionMethod>", "JsonObject o", "String member"]], "readSet": [["Set", "JsonReader reader"]], "getAsString": [["String", "JsonObject o", "String member"]], "getAsJweEncryptionMethod": [["EncryptionMethod", "JsonObject o", "String member"]], "getAsStringSet": [["Set<String>", "JsonObject o", "String member"]], "getAsJweAlgorithmList": [["List<JWEAlgorithm>", "JsonObject o", "String member"]], "writeNullSafeArray": [["void", "JsonWriter writer", "Set<String> items"]], "getAsLong": [["Long", "JsonObject o", "String member"]], "getAsBoolean": [["Boolean", "JsonObject o", "String member"]], "getAsJwsAlgorithm": [["JWSAlgorithm", "JsonObject o", "String member"]], "getAsJweAlgorithm": [["JWEAlgorithm", "JsonObject o", "String member"]], "getAsJwsAlgorithmList": [["List<JWSAlgorithm>", "JsonObject o", "String member"]], "getAsStringList": [["List<String>", "JsonObject o", "String member"]]}, "className": "JsonUtils", "renamed": ["JsonElement", "function", "(", "Set", "<", "String", ">", "arg0", ")", "{", "return", "getAsArray", "(", "arg0", ",", "false", ")", ";", "}"], "nl": "Translate a set of strings to a JSON array, empty array returned as null", "nlToks": ["Translate", "a", "set", "of", "strings", "to", "a", "JSON", "array", ",", "empty", "array", "returned", "as", "null"], "path": "adilansari/OpenID-Connect-Java-Spring-Server/tree/master/openid-connect-common/src/main/java/org/mitre/util/JsonUtils.java", "idx": 244}
{"memberVariables": {"vhw": "VHWParser", "EXAMPLE=\"$VWVHW,000.0,T,001.5,M,1.0,N,1.85,K\"": "String"}, "code": ["void", "function", "(", ")", "{", "assertEquals", "(", "1.85", ",", "vhw", ".", "getSpeedKmh", "(", ")", ",", "0.01", ")", ";", "}"], "memberFunctions": {"testGetSpeedKnots": [["void"]], "testSetMagneticHeading": [["void"]], "testGetMagneticHeading": [["void"]], "testConstructorTalkerId": [["void"]], "testIsTrue": [["void"]], "testSetHeading": [["void"]], "testSetSpeedKilometres": [["void"]], "setUp": [["void"]], "testSetSpeedKnots": [["void"]], "testGetHeading": [["void"]], "testConstructorString": [["void"]]}, "className": "VHWTest", "renamed": ["void", "function", "(", ")", "{", "assertEquals", "(", "1.85", ",", "vhw", ".", "getSpeedKmh", "(", ")", ",", "0.01", ")", ";", "}"], "nl": "Test method for {@link net.sf.marineapi.nmea.parser.VHWParser#getSpeedKmh()}.", "nlToks": ["Test", "method", "for", "-LCB-", "@link", "net.sf.marineapi.nmea.parser.VHWParser", "#getSpeedKmh", "-LRB-", "-RRB-", "-RCB-", "."], "path": "pkoziol/marine-api/tree/master/src/test/java/net/sf/marineapi/nmea/parser/VHWTest.java", "idx": 245}
{"memberVariables": {"mId": "int"}, "code": ["void", "function", "(", ")", "{", "}"], "memberFunctions": {"encode": [["void", "ByteBuf out"]], "createFrameDecoder": [["ByteToMessageDecoder"]], "getType": [["Type"]], "getPayloadDataBuffer": [["DataBuffer"]], "getId": [["int"]], "decodeMessage": [["RPCMessage", "RPCMessage.Type type", "ByteBuf in"]], "hasPayload": [["boolean"]], "decode": [["Type", "ByteBuf in"]], "getEncodedLength": [["int"]]}, "className": "RPCMessage", "renamed": ["void", "function", "(", ")", "{", "}"], "nl": "Validate the message. Throws an Exception if the message is invalid.", "nlToks": ["Validate", "the", "message", ".", "Throws", "an", "Exception", "if", "the", "message", "is", "invalid", "."], "path": "poemlin/alluxio/tree/master/core/common/src/main/java/alluxio/network/protocol/RPCMessage.java", "idx": 246}
{"memberVariables": {"s1": "Scan", "s2": "Scan"}, "code": ["boolean", "function", "(", "String", "fldname", ")", "{", "return", "s1", ".", "hasField", "(", "fldname", ")", "||", "s2", ".", "hasField", "(", "fldname", ")", ";", "}"], "memberFunctions": {"next": [["boolean"]], "getInt": [["int", "String fldname"]], "getVal": [["Constant", "String fldname"]], "beforeFirst": [["void"]], "getString": [["String", "String fldname"]], "close": [["void"]]}, "className": "ProductScan", "renamed": ["boolean", "function", "(", "String", "arg0", ")", "{", "return", "s1", ".", "hasField", "(", "arg0", ")", "||", "s2", ".", "hasField", "(", "arg0", ")", ";", "}"], "nl": "Returns true if the specified field is in either of the underlying scans.", "nlToks": ["Returns", "true", "if", "the", "specified", "field", "is", "in", "either", "of", "the", "underlying", "scans", "."], "path": "prerit2803/DBMSProject2/tree/master/simpledb/query/ProductScan.java", "idx": 247}
{"memberVariables": {"EMAIL=\"email_address\"": "String"}, "code": ["void", "function", "(", "String", "emailAddress", ",", "HttpServletRequest", "request", ")", "{", "request", ".", "getSession", "(", ")", ".", "setAttribute", "(", "EMAIL", ",", "emailAddress", ")", ";", "}"], "memberFunctions": {"isUserAuthenticated": [["boolean", "HttpServletRequest request"]], "logoutUser": [["void", "HttpServletRequest request"]], "getEmailId": [["String", "HttpServletRequest request"]]}, "className": "UserInfo", "renamed": ["void", "function", "(", "String", "arg0", ",", "HttpServletRequest", "arg1", ")", "{", "arg1", ".", "getSession", "(", ")", ".", "setAttribute", "(", "EMAIL", ",", "arg0", ")", ";", "}"], "nl": "Registers the Users Session as Authenticated.", "nlToks": ["Registers", "the", "Users", "Session", "as", "Authenticated", "."], "path": "adamabeshouse/cbioportal/tree/master/core/src/main/java/org/mskcc/cbio/portal/util/UserInfo.java", "idx": 249}
{"memberVariables": {"handlerClass": "FullyQualifiedClassType", "soapRole": "List<CString>", "initParam": "List<ParamValueType>", "displayName": "List<DisplayNameType>", "soapHeader": "List<XsdQNameType>", "icon": "List<IconType>", "description": "List<DescriptionType>", "handlerName": "CString", "id": "java.lang.String"}, "code": ["FullyQualifiedClassType", "function", "(", ")", "{", "return", "handlerClass", ";", "}"], "memberFunctions": {"getInitParam": [["List<ParamValueType>"]], "getDisplayName": [["List<DisplayNameType>"]], "setHandlerClass": [["void", "FullyQualifiedClassType value"]], "setHandlerName": [["void", "CString value"]], "setId": [["void", "java.lang.String value"]], "getHandlerName": [["CString"]], "getId": [["java.lang.String"]], "getSoapRole": [["List<CString>"]], "getDescription": [["List<DescriptionType>"]], "getSoapHeader": [["List<XsdQNameType>"]], "getIcon": [["List<IconType>"]]}, "className": "PortComponentHandlerType", "renamed": ["FullyQualifiedClassType", "function", "(", ")", "{", "return", "handlerClass", ";", "}"], "nl": "Gets the value of the handlerClass property.", "nlToks": ["Gets", "the", "value", "of", "the", "handlerClass", "property", "."], "path": "primesign/cxf/tree/master/rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/handler/types/PortComponentHandlerType.java", "idx": 250}
{"memberVariables": {"oldRevisionGraphMap=new HashMap<String,String>()": "HashMap<String,String>", "logger=Logger.getLogger(StrategyManagement.class)": "Logger", "revisionInformation": "String"}, "code": ["void", "function", "(", "String", "graph", ",", "String", "format", ")", "{", "revisionInformation", "=", "RevisionManagement", ".", "getRevisionInformation", "(", "graph", ",", "format", ")", ";", "}"], "memberFunctions": {"getaddSetUri": [["String", "String revisionGraph", "String revisionUri"]], "saveGraphVorMergingInMap": [["void", "String graph", "String format"]], "getPatchUserUri": [["String", "String revisionGraph", "String commitUri"]], "getRevisionNumber": [["String", "String revisionGraph", "String revisionUri"]], "getCommitUri": [["String", "String revisionGraph", "String revisionUri"]], "isFastForward": [["boolean", "String revisionGraph", "String revisionBranchA", "String revisionBranchB"]], "createAddedOrRemovedTripleSet": [["LinkedList<String>", "String addedOrRemovedDelta"]], "loadGraphVorMerging": [["String"]], "getPatchMessage": [["String", "String revisionGraph", "String commitUri"]], "getdeleteSetUri": [["String", "String revisionGraph", "String revisionUri"]], "loadGraphVorMergingFromMap": [["String", "String graphName"]], "createRebaseQuery": [["String", "String graphName", "String sdd", "String user", "String commitMessage", "String branchNameA", "String branchNameB", "RebaseQueryTypeEnum type", "String triples"]]}, "className": "StrategyManagement", "renamed": ["void", "function", "(", "String", "arg0", ",", "String", "arg1", ")", "{", "revisionInformation", "=", "RevisionManagement", ".", "getRevisionInformation", "(", "arg0", ",", "arg1", ")", ";", "}"], "nl": "save old revision information of Graph", "nlToks": ["save", "old", "revision", "information", "of", "Graph"], "path": "plt-tud/r43ples/tree/master/src/main/java/de/tud/plt/r43ples/merging/management/StrategyManagement.java", "idx": 251}
{"memberVariables": {"default_reduce": "int", "reduction_count[]=null": "int", "under_term[]": "parse_action", "_size=0": "int"}, "code": ["int", "function", "(", ")", "{", "return", "_size", ";", "}"], "memberFunctions": {"clear": [["void"]], "compute_default": [["void"]]}, "className": "parse_action_row", "renamed": ["int", "function", "(", ")", "{", "return", "_size", ";", "}"], "nl": "Number of columns (terminals) in every row.", "nlToks": ["Number", "of", "columns", "-LRB-", "terminals", "-RRB-", "in", "every", "row", "."], "path": "polyglot-compiler/polyglot/tree/master/tools/java_cup/src/java_cup/parse_action_row.java", "idx": 252}
{"memberVariables": {"DEFAULT_ATTACHMENT_TENSION=70": "int", "mListeners=new CopyOnWriteArrayList<SpringListener>()": "CopyOnWriteArrayList<SpringListener>", "mAttachmentSpringConfig": "SpringConfig", "DEFAULT_ATTACHMENT_FRICTION=10": "int", "DEFAULT_MAIN_TENSION=40": "int", "mControlSpringIndex=-1": "int", "registry=SpringConfigRegistry.getInstance()": "SpringConfigRegistry", "mMainSpringConfig": "SpringConfig", "mSpringSystem=SpringSystem.create()": "SpringSystem", "DEFAULT_MAIN_FRICTION=6": "int", "mSprings=new CopyOnWriteArrayList<Spring>()": "CopyOnWriteArrayList<Spring>", "id=0": "int"}, "code": ["Spring", "function", "(", ")", "{", "return", "mSprings", ".", "get", "(", "mControlSpringIndex", ")", ";", "}"], "memberFunctions": {"getMainSpringConfig": [["SpringConfig"]], "getAllSprings": [["List<Spring>"]], "setControlSpringIndex": [["SpringChain", "int i"]], "onSpringActivate": [["void", "Spring spring"]], "onSpringAtRest": [["void", "Spring spring"]], "create": [["SpringChain"], ["SpringChain", "int mainTension", "int mainFriction", "int attachmentTension", "int attachmentFriction"]], "onSpringUpdate": [["void", "Spring spring"]], "addSpring": [["SpringChain", "final SpringListener listener"]], "onSpringEndStateChange": [["void", "Spring spring"]], "getAttachmentSpringConfig": [["SpringConfig"]]}, "className": "SpringChain", "renamed": ["Spring", "function", "(", ")", "{", "return", "mSprings", ".", "get", "(", "mControlSpringIndex", ")", ";", "}"], "nl": "Retrieve the control spring so you can manipulate it to drive the positions of the other springs.", "nlToks": ["Retrieve", "the", "control", "spring", "so", "you", "can", "manipulate", "it", "to", "drive", "the", "positions", "of", "the", "other", "springs", "."], "path": "adilek/rebound/tree/master/rebound-android/src/main/java/com/facebook/rebound/SpringChain.java", "idx": 253}
{"memberVariables": {"extensionInfo": "ExtensionInfo", "loader": "ClassFileLoader", "eq": "ErrorQueue", "outputFiles=new LinkedHashSet<>()": "Collection<JavaFileObject>", "allExtensions": "List<ExtensionInfo>", "jobs=new ArrayList<>()": "List<Job>"}, "code": ["ExtensionInfo", "function", "(", ")", "{", "return", "extensionInfo", ";", "}"], "memberFunctions": {"outputFiles": [["Collection<JavaFileObject>"]], "outputWidth": [["int"]], "loader": [["ClassFileLoader"]], "createCodeWriter": [["CodeWriter", "OutputStream w"], ["CodeWriter", "OutputStream w", "int width"], ["CodeWriter", "Writer w"], ["CodeWriter", "Writer w", "int width"]], "jobs": [["List<Job>"]], "errorQueue": [["ErrorQueue"]], "useFullyQualifiedNames": [["boolean"]], "compile": [["boolean", "Collection<FileSource> sources"]], "getGoal": [["Goal", "Job job"]], "compileFiles": [["boolean", "Collection<String> filenames"]], "addExtension": [["void", "ExtensionInfo ext"]], "serializeClassInfo": [["boolean"]], "runToGoal": [["boolean", "Collection<? extends Source> sources", "GoalFactory goalFactory"]], "validate": [["boolean", "Collection<Source> sources"]], "allExtensions": [["List<ExtensionInfo>"]]}, "className": "Compiler", "renamed": ["ExtensionInfo", "function", "(", ")", "{", "return", "extensionInfo", ";", "}"], "nl": "Get information about the language extension being compiled.", "nlToks": ["Get", "information", "about", "the", "language", "extension", "being", "compiled", "."], "path": "polyglot-compiler/polyglot/tree/master/src/polyglot/frontend/Compiler.java", "idx": 256}
{"memberVariables": {"EXAMPLE=\"$GPRMB,A,0.00,R,,RUSKI,5536.200,N,01436.500,E,432.3,234.9,,V*58\"": "String", "rmb": "RMBSentence", "empty": "RMBSentence"}, "code": ["void", "function", "(", ")", "{", "try", "{", "empty", "=", "new", "RMBParser", "(", "TalkerId", ".", "GP", ")", ";", "rmb", "=", "new", "RMBParser", "(", "EXAMPLE", ")", ";", "}", "catch", "(", "Exception", "e", ")", "{", "fail", "(", "e", ".", "getMessage", "(", ")", ")", ";", "}", "}"], "memberFunctions": {"testGetVelocity": [["void"]], "testGetCrossTrackError": [["void"]], "testArrivalStatus": [["void"]], "testSetDestination": [["void"]], "testSetBearing": [["void"]], "testSetSteerToWithNull": [["void"]], "testSetOriginId": [["void"]], "testSetStatus": [["void"]], "testConstructor": [["void"]], "testGetBearing": [["void"]], "testSetBearingWithNegativeValue": [["void"]], "testSetSteerTo": [["void"]], "testGetSteerTo": [["void"]], "testSetVelocity": [["void"]], "testGetOriginId": [["void"]], "testSetVelocityWithNegativeValue": [["void"]], "testGetStatus": [["void"]], "testSetBearingWithValueGreaterThanAllowed": [["void"]], "testGetRange": [["void"]], "testSetRange": [["void"]], "testGetDestination": [["void"]], "testSetCrossTrackError": [["void"]]}, "className": "RMBTest", "renamed": ["void", "function", "(", ")", "{", "try", "{", "empty", "=", "new", "RMBParser", "(", "TalkerId", ".", "GP", ")", ";", "rmb", "=", "new", "RMBParser", "(", "EXAMPLE", ")", ";", "}", "catch", "(", "Exception", "loc0", ")", "{", "fail", "(", "loc0", ".", "getMessage", "(", ")", ")", ";", "}", "}"], "nl": "setUp", "nlToks": ["setUp"], "path": "pkoziol/marine-api/tree/master/src/test/java/net/sf/marineapi/nmea/parser/RMBTest.java", "idx": 258}
{"memberVariables": {"issuedAt=-1": "long", "scopes=Collections.emptyList()": "List<OAuthPermission>", "subject": "UserSubject", "client": "Client", "preAuthorized": "boolean", "tokenString": "String", "lifetime=-1": "long", "tokenSecret": "String"}, "code": ["void", "function", "(", "List", "<", "OAuthPermission", ">", "scopes", ")", "{", "this", ".", "scopes", "=", "scopes", ";", "}"], "memberFunctions": {"getSubject": [["UserSubject"]], "setPreAuthorized": [["void", "boolean preAuthorized"]], "setSubject": [["void", "UserSubject subject"]], "getTokenKey": [["String"]], "isPreAuthorized": [["boolean"]], "getLifetime": [["long"]], "getClient": [["Client"]], "getIssuedAt": [["long"]], "getTokenSecret": [["String"]], "getScopes": [["List<OAuthPermission>"]]}, "className": "Token", "renamed": ["void", "function", "(", "List", "<", "OAuthPermission", ">", "arg0", ")", "{", "this", ".", "scopes", "=", "arg0", ";", "}"], "nl": "Sets a list of opaque permissions/scopes", "nlToks": ["Sets", "a", "list", "of", "opaque", "permissions/scopes"], "path": "primesign/cxf/tree/master/rt/rs/security/oauth-parent/oauth/src/main/java/org/apache/cxf/rs/security/oauth/data/Token.java", "idx": 259}
{"memberVariables": {"log=LoggerFactory.getLogger(IngredientService.class)": "Logger", "ingredientRepository": "IngredientRepository", "max_suggest=5": "int"}, "code": ["Page", "<", "Ingredient", ">", "function", "(", "Pageable", "pageable", ")", "{", "log", ".", "debug", "(", "\"Request to get all Ingredients\"", ")", ";", "Page", "<", "Ingredient", ">", "result", "=", "ingredientRepository", ".", "findAll", "(", "pageable", ")", ";", "return", "result", ";", "}"], "memberFunctions": {"getAutoSuggest": [["List<String>", "String ingredientName"]], "save": [["Ingredient", "Ingredient ingredient"], ["List<Ingredient>", "List<Ingredient> ingredients"]], "findOne": [["Ingredient", "String id"]], "delete": [["void", "String id"]]}, "className": "IngredientService", "renamed": ["Page", "<", "Ingredient", ">", "function", "(", "Pageable", "arg0", ")", "{", "log", ".", "debug", "(", "\"srini_string\"", ")", ";", "Page", "<", "Ingredient", ">", "loc0", "=", "ingredientRepository", ".", "findAll", "(", "arg0", ")", ";", "return", "loc0", ";", "}"], "nl": "Get all the ingredients.", "nlToks": ["Get", "all", "the", "ingredients", "."], "path": "pigkey/kitchen/tree/master/app/src/main/java/com/kitchen/app/service/IngredientService.java", "idx": 260}
{"memberVariables": {"NA_LONG=Long.MIN_VALUE": "long", "NA_STRING=\"NA\"": "String", "NA_INT=-1": "int", "NA_FLOAT=-1": "float"}, "code": ["String", "function", "(", "int", "index", ",", "String", "[", "]", "parts", ")", "{", "try", "{", "if", "(", "index", "<", "0", ")", "{", "return", "\"\"", ";", "}", "return", "parts", "[", "index", "]", ".", "trim", "(", ")", ";", "}", "catch", "(", "ArrayIndexOutOfBoundsException", "e", ")", "{", "throw", "new", "RuntimeException", "(", "\"Unexpected error while parsing column nr: \"", "+", "(", "index", "+", "1", ")", ",", "e", ")", ";", "}", "}"], "memberFunctions": {"getPartPercentage": [["Float", "int index", "String[] parts"]], "getPartFloat": [["Float", "int index", "String[] parts"]], "adjustDataLine": [["String", "String dataLine", "int headerCount"]], "getPartString": [["String", "int index", "String[] parts"]], "getPartLong": [["Long", "int index", "String[] parts"]], "getPartFloat2": [["Float", "int index", "String[] parts"]], "getPartInt": [["Integer", "int index", "String[] parts"]]}, "className": "TabDelimitedFileUtil", "renamed": ["String", "function", "(", "int", "arg0", ",", "String", "[", "]", "arg1", ")", "{", "try", "{", "if", "(", "arg0", "<", "0", ")", "{", "return", "\"srini_string\"", ";", "}", "return", "arg1", "[", "arg0", "]", ".", "trim", "(", ")", ";", "}", "catch", "(", "ArrayIndexOutOfBoundsException", "loc0", ")", "{", "throw", "new", "RuntimeException", "(", "\"srini_string\"", "+", "(", "arg0", "+", "1", ")", ",", "loc0", ")", ";", "}", "}"], "nl": "Return the trimmed string from the column, or an empty string if -1. Require the column to exist before the end of the data line. This can be used instead of getPartString() if NA may be a meaningful value and the file is expected to have been validated.", "nlToks": ["Return", "the", "trimmed", "string", "from", "the", "column", ",", "or", "an", "empty", "string", "if", "-1", ".", "Require", "the", "column", "to", "exist", "before", "the", "end", "of", "the", "data", "line", ".", "This", "can", "be", "used", "instead", "of", "getPartString", "-LRB-", "-RRB-", "if", "NA", "may", "be", "a", "meaningful", "value", "and", "the", "file", "is", "expected", "to", "have", "been", "validated", "."], "path": "adamabeshouse/cbioportal/tree/master/core/src/main/java/org/mskcc/cbio/maf/TabDelimitedFileUtil.java", "idx": 261}
{"memberVariables": {"timeoutTimer=new Timer(\"AbstractTimeoutHandler timeouts\",true)": "Timer", "timeoutTask": "TimerTask", "timeoutEnabled=true": "boolean", "timeoutMillis=0": "long"}, "code": ["void", "function", "(", "int", "timeoutMillis", ")", "{", "this", ".", "timeoutMillis", "=", "timeoutMillis", ";", "resetTimeout", "(", ")", ";", "}"], "memberFunctions": {"resetTimeout": [["void"]], "setTimeoutEnabled": [["void", "boolean timeoutEnabled"]], "timeoutOccurred": [["void"]]}, "className": "AbstractTimeoutHandler", "renamed": ["void", "function", "(", "int", "arg0", ")", "{", "this", ".", "timeoutMillis", "=", "arg0", ";", "resetTimeout", "(", ")", ";", "}"], "nl": "Sets the receive timeout to the given number of milliseconds, automatically killing the connection if no messages are received for this long A timeout of 0 is interpreted as no timeout. The default is for timeoutEnabled to be true but timeoutMillis to be set to 0 (ie disabled). This call will reset the current progress towards the timeout.", "nlToks": ["Sets", "the", "receive", "timeout", "to", "the", "given", "number", "of", "milliseconds", ",", "automatically", "killing", "the", "connection", "if", "no", "messages", "are", "received", "for", "this", "long", "A", "timeout", "of", "0", "is", "interpreted", "as", "no", "timeout", ".", "The", "default", "is", "for", "timeoutEnabled", "to", "be", "true", "but", "timeoutMillis", "to", "be", "set", "to", "0", "-LRB-", "ie", "disabled", "-RRB-", ".", "This", "call", "will", "reset", "the", "current", "progress", "towards", "the", "timeout", "."], "path": "1000000000001/bitcoinj/tree/master/core/src/main/java/org/bitcoinj/net/AbstractTimeoutHandler.java", "idx": 268}
{"memberVariables": {"LOGIN_MESSAGE=\"Thanks for logging in!\"": "String", "rootFolder": "BoxFolder", "MISSING_FOLDER_MESSAGE=\"This folder is not located in your box account\"": "String", "currentFolder": "BoxFolder", "devToken": "String", "tb": "TextBot", "INDENT_APPEND=\"    \"": "String"}, "code": ["void", "function", "(", "BoxFolder", "folder", ",", "int", "depth", ")", "{", "String", "indent", "=", "\"\"", ";", "for", "(", "BoxItem", ".", "Info", "itemInfo", ":", "folder", ")", "{", "for", "(", "int", "i", "=", "0", ";", "i", "<", "depth", ";", "i", "++", ")", "{", "indent", "+=", "INDENT_APPEND", ";", "}", "if", "(", "itemInfo", "instanceof", "BoxFolder", ".", "Info", ")", "{", "BoxFolder", "childFolder", "=", "(", "BoxFolder", ")", "itemInfo", ".", "getResource", "(", ")", ";", "listFolder", "(", "childFolder", ",", "depth", "+", "1", ")", ";", "}", "}", "}"], "memberFunctions": {"goToFolder": [["void", "String name"]], "uploadFile": [["void", "String filePath", "String name"]], "downloadFromCurrent": [["void", "String name", "String location"]], "createNewFolder": [["void", "String name"]], "deleteFolder": [["void", "String name"]], "uploadFolder": [["void", "String folder"], ["void", "BoxFolder current", "File folder"]], "listFolders": [["void"]], "notify": [["void", "String message"]], "getCurrentFiles": [["List<String>"]], "uploadFileToFolder": [["void", "String filePath", "String folderName", "String name"]], "getFolder": [["BoxFolder", "String name"], ["BoxFolder", "BoxFolder current", "String name"]], "setUpNotifications": [["void", "String resources", "String accountSID", "String authToken", "String number"]], "goToRootFolder": [["void"]]}, "className": "CloudStorage", "renamed": ["void", "function", "(", "BoxFolder", "arg0", ",", "int", "arg1", ")", "{", "String", "loc0", "=", "\"srini_string\"", ";", "for", "(", "BoxItem", ".", "Info", "loc1", ":", "arg0", ")", "{", "for", "(", "int", "loc2", "=", "0", ";", "loc2", "<", "arg1", ";", "loc2", "++", ")", "{", "loc0", "+=", "INDENT_APPEND", ";", "}", "if", "(", "loc1", "instanceof", "BoxFolder", ".", "Info", ")", "{", "BoxFolder", "loc2", "=", "(", "BoxFolder", ")", "loc1", ".", "getResource", "(", ")", ";", "listFolder", "(", "loc2", ",", "arg1", "+", "1", ")", ";", "}", "}", "}"], "nl": "Recurisvely lists folders in the Box account. Primarily used for debugging.", "nlToks": ["Recurisvely", "lists", "folders", "in", "the", "Box", "account", ".", "Primarily", "used", "for", "debugging", "."], "path": "adamtache/tower-defense-engine/tree/master/src/utility/CloudStorage.java", "idx": 269}
{"memberVariables": {"dbuf": "ByteBuffer", "BUFFER_SIZE_LOWER_BOUND=4096": "int", "socket": "Socket", "log=LoggerFactory.getLogger(BlockingClient.class)": "org.slf4j.Logger", "BUFFER_SIZE_UPPER_BOUND=65536": "int", "vCloseRequested=false": "boolean"}, "code": ["void", "function", "(", ")", "{", "try", "{", "vCloseRequested", "=", "true", ";", "socket", ".", "close", "(", ")", ";", "}", "catch", "(", "IOException", "e", ")", "{", "throw", "new", "RuntimeException", "(", "e", ")", ";", "}", "}"], "memberFunctions": {"writeBytes": [["void", "byte[] message"]]}, "className": "BlockingClient", "renamed": ["void", "function", "(", ")", "{", "try", "{", "vCloseRequested", "=", "true", ";", "socket", ".", "close", "(", ")", ";", "}", "catch", "(", "IOException", "loc0", ")", "{", "throw", "new", "RuntimeException", "(", "loc0", ")", ";", "}", "}"], "nl": "Closes the connection to the server, triggering the  {@link StreamParser#connectionClosed()}event on the network-handling thread where all callbacks occur.", "nlToks": ["Closes", "the", "connection", "to", "the", "server", ",", "triggering", "the", "-LCB-", "@link", "StreamParser", "#connectionClosed", "-LRB-", "-RRB-", "-RCB-", "event", "on", "the", "network-handling", "thread", "where", "all", "callbacks", "occur", "."], "path": "1000000000001/bitcoinj/tree/master/core/src/main/java/org/bitcoinj/net/BlockingClient.java", "idx": 270}
{"memberVariables": {"DIR_NAME=\"USBCameraTest\"": "String", "mOutputPath": "String", "mMediaMuxer": "MediaMuxer", "mStatredCount": "int", "DEBUG=true": "boolean", "TAG=\"MediaMuxerWrapper\"": "String", "mDateTimeFormat=new SimpleDateFormat(\"yyyy-MM-dd-HH-mm-ss\",Locale.US)": "SimpleDateFormat", "mIsStarted": "boolean", "mEncoderCount": "int", "mAudioEncoder": "MediaEncoder", "mVideoEncoder": "MediaEncoder"}, "code": ["int", "function", "(", "final", "MediaFormat", "format", ")", "{", "if", "(", "mIsStarted", ")", "throw", "new", "IllegalStateException", "(", "\"muxer already started\"", ")", ";", "final", "int", "trackIx", "=", "mMediaMuxer", ".", "addTrack", "(", "format", ")", ";", "if", "(", "DEBUG", ")", "Log", ".", "i", "(", "TAG", ",", "\"addTrack:trackNum=\"", "+", "mEncoderCount", "+", "\",trackIx=\"", "+", "trackIx", "+", "\",format=\"", "+", "format", ")", ";", "return", "trackIx", ";", "}"], "memberFunctions": {"prepare": [["void"]], "getDateTimeString": [["String"]], "stop": [["void"]], "addEncoder": [["void", "final MediaEncoder encoder"]], "startRecording": [["void"]], "start": [["boolean"]], "getCaptureFile": [["File", "final String type", "final String ext"]], "isStarted": [["boolean"]], "getOutputPath": [["String"]], "stopRecording": [["void"]], "writeSampleData": [["void", "final int trackIndex", "final ByteBuffer byteBuf", "final MediaCodec.BufferInfo bufferInfo"]]}, "className": "MediaMuxerWrapper", "renamed": ["int", "function", "(", "final", "MediaFormat", "arg0", ")", "{", "if", "(", "mIsStarted", ")", "throw", "new", "IllegalStateException", "(", "\"srini_string\"", ")", ";", "final", "int", "loc0", "=", "mMediaMuxer", ".", "addTrack", "(", "arg0", ")", ";", "if", "(", "DEBUG", ")", "Log", ".", "i", "(", "TAG", ",", "\"srini_string\"", "+", "mEncoderCount", "+", "\"srini_string\"", "+", "loc0", "+", "\"srini_string\"", "+", "arg0", ")", ";", "return", "loc0", ";", "}"], "nl": "assign encoder to muxer", "nlToks": ["assign", "encoder", "to", "muxer"], "path": "princeofdream/USBCamera/tree/master/usbCameraCommon/src/main/java/com/serenegiant/encoder/MediaMuxerWrapper.java", "idx": 272}
{"memberVariables": {"mDuration": "int", "mInterpolator": "Interpolator", "mFinal": "float", "mFinished": "boolean", "mDurationReciprocal": "float", "mStart": "float", "mStartTime": "long", "mCurr": "float", "mDeltaX": "float"}, "code": ["float", "function", "(", ")", "{", "return", "mFinal", ";", "}"], "memberFunctions": {"abortAnimation": [["void"]], "forceFinished": [["void", "boolean finished"]], "extendDuration": [["void", "int extend"]], "timePassed": [["int"]], "getDuration": [["int"]], "getStart": [["float"]], "getCurr": [["float"]], "startScroll": [["void", "float start", "float delta", "int duration"]], "isFinished": [["boolean"]], "setFinal": [["void", "float newVal"]], "computeScrollOffset": [["boolean"]]}, "className": "FloatScroller", "renamed": ["float", "function", "(", ")", "{", "return", "mFinal", ";", "}"], "nl": "Returns where the scroll will end. Valid only for \"fling\" scrolls.", "nlToks": ["Returns", "where", "the", "scroll", "will", "end", ".", "Valid", "only", "for", "``", "fling", "''", "scrolls", "."], "path": "adament67/testproject/tree/master/Android Projects/studio/EstiloRobe/_1800flowers_lib_menudrawer/src/main/java/net/simonvt/menudrawer/FloatScroller.java", "idx": 273}
{"memberVariables": {}, "code": ["void", "function", "(", "Map", "map", ")", "{", "notEmpty", "(", "map", ",", "\"[Assertion failed] - this map must not be empty; it must contain at least one entry\"", ")", ";", "}"], "memberFunctions": {"isTrue": [["void", "boolean expression", "String message"], ["void", "boolean expression"]], "isAssignable": [["void", "Class<?> superType", "Class<?> subType"], ["void", "Class<?> superType", "Class<?> subType", "String message"]], "notNull": [["void", "Object object", "String message"], ["void", "Object object"]], "isNull": [["void", "Object object", "String message"], ["void", "Object object"]], "noNullElements": [["void", "Object[] array", "String message"], ["void", "Object[] array"]], "isInstanceOf": [["void", "Class<?> clazz", "Object obj"], ["void", "Class<?> type", "Object obj", "String message"]], "state": [["void", "boolean expression", "String message"], ["void", "boolean expression"]]}, "className": "Assert", "renamed": ["void", "function", "(", "Map", "arg0", ")", "{", "notEmpty", "(", "arg0", ",", "\"srini_string\"", ")", ";", "}"], "nl": "Assert that a Map has entries; that is, it must not be  {@code null}and must have at least one entry. Assert.notEmpty(map);", "nlToks": ["Assert", "that", "a", "Map", "has", "entries", ";", "that", "is", ",", "it", "must", "not", "be", "-LCB-", "@code", "null", "-RCB-", "and", "must", "have", "at", "least", "one", "entry", ".", "Assert.notEmpty", "-LRB-", "map", "-RRB-", ";"], "path": "16ren/Android-Next/tree/master/bus/src/main/java/com/mcxiaoke/next/bus/support/Assert.java", "idx": 274}
{"memberVariables": {"mockServerMessage=mock(ServerMessage.class)": "ServerMessage", "mockServerSession=mock(ServerSession.class)": "ServerSession", "testEventProperties": "HashMap<String,Object>", "MOCK_SESSION_ID=\"1234-5678-9012-3456\"": "String", "notificationController": "NotificationController"}, "code": ["void", "function", "(", ")", "{", "notificationController", ".", "registerUserSession", "(", "null", ",", "mockServerMessage", ")", ";", "}"], "memberFunctions": {"testHandleEventThrowsIllegalArgumentExceptionOnEmptyUser": [["void"]], "testHandleEventThrowsIllegalArgumentExceptionOnEmptyApplication": [["void"]], "testDeregisterUserSessionWithNullServerSessonThrowsException": [["void"]], "testDeregisterUserSessionWithNullServerSessionIdThrowsException": [["void"]], "testHandleEventThrowsIllegalArgumentExceptionOnNullTitle": [["void"]], "testGetServerSessionByUserId": [["void"]], "tearDown": [["void"]], "testHandleEventThrowsIllegalArgumentExceptionOnEmptyTitle": [["void"]], "testDeletePersistentNotificationThrowsIllegalArgumentOnNullServerSession": [["void"]], "testDeregisterUserSessionRemovesUserFromKnownClients": [["void"]], "testHandleEventThrowsIllegalArgumentExceptionOnEmptyMessage": [["void"]], "testHandleEventThrowsIllegalArgumentExceptionOnNullApplication": [["void"]], "testDeletePersistentNotificationThrowsIllegalArgumentOnNullUserId": [["void"]], "testHandleEventThrowsIllegalArgumentExceptionOnNullUser": [["void"]], "testRegisterUserSession": [["void"]], "setUp": [["void"]], "testHandleEventThrowsIllegalArgumentExceptionOnNullTimestamp": [["void"]], "testRegisterUserSessionWithNullServerSessionIdThrowsException": [["void"]], "testHandleEventThrowsIllegalArgumentExceptionOnNullMessage": [["void"]]}, "className": "NotificationControllerTest", "renamed": ["void", "function", "(", ")", "{", "notificationController", ".", "registerUserSession", "(", "null", ",", "mockServerMessage", ")", ";", "}"], "nl": "Test method for {@link NotificationController#registerUserSession(ServerSession,ServerMessage)}. Verifies that method throws  {@code NullPointerException} when ServerSession is null.", "nlToks": ["Test", "method", "for", "-LCB-", "@link", "NotificationController", "#registerUserSession", "-LRB-", "ServerSession", ",", "ServerMessage", "-RRB-", "-RCB-", ".", "Verifies", "that", "method", "throws", "-LCB-", "@code", "NullPointerException", "-RCB-", "when", "ServerSession", "is", "null", "."], "path": "pklinef/ddf-ui/tree/master/search-ui/search-endpoint/src/test/java/org/codice/ddf/ui/searchui/query/controller/NotificationControllerTest.java", "idx": 275}
{"memberVariables": {"step=0": "int", "panels=new ArrayList<JPanel>()": "List<JPanel>", "started=false": "boolean", "finished=false": "boolean", "item=null": "WizardItem"}, "code": ["void", "function", "(", "int", "oldStep", ")", "{", "}"], "memberFunctions": {"next": [["void"]], "removePanel": [["void", "int s"]], "getCurrentPanel": [["JPanel"]], "canGoBack": [["boolean"]], "canFinish": [["boolean"]], "getStep": [["int"]], "makePanel": [["JPanel", "int newStep"]], "back": [["void"]], "getNumSteps": [["int"]], "isStarted": [["boolean"]], "setToDoItem": [["void", "WizardItem i"]], "isFinished": [["boolean"]], "getProgress": [["int"]], "getToDoItem": [["WizardItem"]], "canGoNext": [["boolean"]], "finish": [["void"]], "getPanel": [["JPanel", "int s"]], "doAction": [["void", "int oldStep"], ["void"]]}, "className": "Wizard", "renamed": ["void", "function", "(", "int", "arg0", ")", "{", "}"], "nl": "Undo the action done after the given step. For example, when the given step is 0, nothing was done, so nothing can be undone; and when the given step is 1, undo the first action.  Undo allows users to work part way through fixing a problem, see the partial result, and explore a different alternative.", "nlToks": ["Undo", "the", "action", "done", "after", "the", "given", "step", ".", "For", "example", ",", "when", "the", "given", "step", "is", "0", ",", "nothing", "was", "done", ",", "so", "nothing", "can", "be", "undone", ";", "and", "when", "the", "given", "step", "is", "1", ",", "undo", "the", "first", "action", ".", "Undo", "allows", "users", "to", "work", "part", "way", "through", "fixing", "a", "problem", ",", "see", "the", "partial", "result", ",", "and", "explore", "a", "different", "alternative", "."], "path": "pichiliani/CoArgoUML/tree/master/v0.24/fonte/src/argouml-app/src/org/argouml/cognitive/critics/Wizard.java", "idx": 276}
{"memberVariables": {"value": "String", "key": "String"}, "code": ["int", "function", "(", "Tag", "tag", ")", "{", "int", "keyResult", ";", "keyResult", "=", "this", ".", "key", ".", "compareTo", "(", "tag", ".", "key", ")", ";", "if", "(", "keyResult", "!=", "0", ")", "{", "return", "keyResult", ";", "}", "return", "this", ".", "value", ".", "compareTo", "(", "tag", ".", "value", ")", ";", "}"], "memberFunctions": {"getKey": [["String"]], "getValue": [["String"]], "toString": [["String"]]}, "className": "Tag", "renamed": ["int", "function", "(", "Tag", "arg0", ")", "{", "int", "loc0", ";", "loc0", "=", "this", ".", "key", ".", "compareTo", "(", "arg0", ".", "key", ")", ";", "if", "(", "loc0", "!=", "0", ")", "{", "return", "loc0", ";", "}", "return", "this", ".", "value", ".", "compareTo", "(", "arg0", ".", "value", ")", ";", "}"], "nl": "Compares this tag to the specified tag. The tag comparison is based on a comparison of key and value in that order.", "nlToks": ["Compares", "this", "tag", "to", "the", "specified", "tag", ".", "The", "tag", "comparison", "is", "based", "on", "a", "comparison", "of", "key", "and", "value", "in", "that", "order", "."], "path": "peterplupo/ia201102/tree/master/trabalho1/aimax-osm/src/main/java/aimax/osm/reader/Tag.java", "idx": 277}
{"memberVariables": {"mHasAliasesSet": "boolean", "END=7": "int", "mDefaultSpacing=null": "float[]", "LEFT=0": "int", "VERTICAL=4": "int", "mValueFlags=0": "int", "RIGHT=2": "int", "ALL=8": "int", "TOP=1": "int", "START=6": "int", "BOTTOM=3": "int", "sFlagsMap={1,2,4,8,16,32,64,128,256}": "int[]", "mSpacing=newFullSpacingArray()": "float[]", "HORIZONTAL=5": "int"}, "code": ["boolean", "function", "(", "int", "spacingType", ",", "float", "value", ")", "{", "if", "(", "mDefaultSpacing", "==", "null", ")", "{", "mDefaultSpacing", "=", "newSpacingResultArray", "(", ")", ";", "}", "if", "(", "!", "FloatUtil", ".", "floatsEqual", "(", "mDefaultSpacing", "[", "spacingType", "]", ",", "value", ")", ")", "{", "mDefaultSpacing", "[", "spacingType", "]", "=", "value", ";", "return", "true", ";", "}", "return", "false", ";", "}"], "memberFunctions": {"set": [["boolean", "int spacingType", "float value"]], "newFullSpacingArray": [["float[]"]], "get": [["float", "int spacingType"]], "reset": [["void"]], "newSpacingResultArray": [["float[]"], ["float[]", "float defaultValue"]], "getRaw": [["float", "int spacingType"]], "getWithFallback": [["float", "int spacingType", "int fallbackType"]]}, "className": "Spacing", "renamed": ["boolean", "function", "(", "int", "arg0", ",", "float", "arg1", ")", "{", "if", "(", "mDefaultSpacing", "==", "null", ")", "{", "mDefaultSpacing", "=", "newSpacingResultArray", "(", ")", ";", "}", "if", "(", "!", "FloatUtil", ".", "floatsEqual", "(", "mDefaultSpacing", "[", "arg0", "]", ",", "arg1", ")", ")", "{", "mDefaultSpacing", "[", "arg0", "]", "=", "arg1", ";", "return", "true", ";", "}", "return", "false", ";", "}"], "nl": "Set a default spacing value. This is used as a fallback when no spacing has been set for a particular direction.", "nlToks": ["Set", "a", "default", "spacing", "value", ".", "This", "is", "used", "as", "a", "fallback", "when", "no", "spacing", "has", "been", "set", "for", "a", "particular", "direction", "."], "path": "plrthink/react-native/tree/master/ReactAndroid/src/main/java/com/facebook/csslayout/Spacing.java", "idx": 279}
{"memberVariables": {"HELPER": "ClasspathScanner", "ALL_CLASS_FILES=ALL_FILES + \".class\"": "String", "CLASSPATH_URL_SCHEME=\"classpath:\"": "String", "ALL_FILES=\"**/*\"": "String", "WILDCARD=\"*\"": "String", "PACKAGES_TO_SKIP={\"org.apache.cxf\"}": "String[]"}, "code": ["List", "<", "URL", ">", "function", "(", "String", "basePackage", ",", "String", "extension", ")", "{", "return", "findResources", "(", "basePackage", ",", "extension", ",", "null", ")", ";", "}"], "memberFunctions": {"parsePackages": [["Set<String>", "final String packagesAsCsv"]], "getClasspathScanner": [["ClasspathScanner"]], "findClassesInternal": [["Map<Class<? extends Annotation>,Collection<Class<?>>>", "Collection<String> basePackages", "List<Class<? extends Annotation>> annotations", "ClassLoader loader"]], "findClasses": [["Map<Class<? extends Annotation>,Collection<Class<?>>>", "String basePackage", "Class<? extends Annotation>... annotations"], ["Map<Class<? extends Annotation>,Collection<Class<?>>>", "Collection<String> basePackages", "Class<? extends Annotation>... annotations"], ["Map<Class<? extends Annotation>,Collection<Class<?>>>", "Collection<String> basePackages", "List<Class<? extends Annotation>> annotations"], ["Map<Class<? extends Annotation>,Collection<Class<?>>>", "Collection<String> basePackages", "List<Class<? extends Annotation>> annotations", "ClassLoader loader"]], "findResourcesInternal": [["List<URL>", "Collection<String> basePackages", "String extension", "ClassLoader loader"]]}, "className": "ClasspathScanner", "renamed": ["List", "<", "URL", ">", "function", "(", "String", "arg0", ",", "String", "arg1", ")", "{", "return", "findResources", "(", "arg0", ",", "arg1", ",", "null", ")", ";", "}"], "nl": "Scans list of base packages for all resources with the given extension.", "nlToks": ["Scans", "list", "of", "base", "packages", "for", "all", "resources", "with", "the", "given", "extension", "."], "path": "primesign/cxf/tree/master/core/src/main/java/org/apache/cxf/common/util/ClasspathScanner.java", "idx": 280}
{"memberVariables": {"OPEN=\"[\"": "String", "expression": "String", "PI=\"processing-instruction()\"": "String", "TEXT=\"text()\"": "String", "type": "short", "EMPTY=\"\"": "String", "uri2Prefix": "Map<String,String>", "attributes=new HashMap<QName,Level>()": "Map<QName,Level>", "path=new LinkedList<Level>()": "Deque<Level>", "SEP=\"/\"": "String", "COMMENT=\"comment()\"": "String", "xpath": "String", "ATTR=\"@\"": "String", "children=new ArrayList<Level>()": "List<Level>", "name": "QName", "CLOSE=\"]\"": "String"}, "code": ["void", "function", "(", "QName", "attribute", ")", "{", "Level", "current", "=", "path", ".", "getLast", "(", ")", ";", "current", ".", "attributes", ".", "put", "(", "attribute", ",", "new", "Level", "(", "ATTR", "+", "getName", "(", "attribute", ")", ")", ")", ";", "}"], "memberFunctions": {"navigateToParent": [["void"]], "getName": [["String", "QName name"], ["QName"], ["QName"]], "appendChildren": [["void", "Iterable<? extends NodeInfo> children"]], "invert": [["Map<String,String>", "Map<String,String> m"]], "getType": [["short"], ["short"]], "addAttributes": [["void", "Iterable<? extends QName> attributes"]], "clone": [["XPathContext"], ["Level"]], "add1OrIncrement": [["int", "String name", "Map<String,Integer> map"]], "getXPath": [["String"], ["String", "Iterator<Level> dIterator"]], "navigateToChild": [["void", "int index"]], "setChildren": [["void", "Iterable<? extends NodeInfo> children"]], "navigateToAttribute": [["void", "QName attribute"]]}, "className": "XPathContext", "renamed": ["void", "function", "(", "QName", "arg0", ")", "{", "Level", "loc0", "=", "path", ".", "getLast", "(", ")", ";", "loc0", ".", "attributes", ".", "put", "(", "arg0", ",", "new", "Level", "(", "ATTR", "+", "getName", "(", "arg0", ")", ")", ")", ";", "}"], "nl": "Adds knowledge about a single attribute of the current node.", "nlToks": ["Adds", "knowledge", "about", "a", "single", "attribute", "of", "the", "current", "node", "."], "path": "phbenisc/xmlunit/tree/master/xmlunit-core/src/main/java/org/xmlunit/diff/XPathContext.java", "idx": 281}
{"memberVariables": {"defaultContentTypeProperty": "String", "rules=new ArrayList<ContentTypeRule>()": "List<ContentTypeRule>"}, "code": ["ContentTypeInfo", "function", "(", "Message", "message", ")", "{", "for", "(", "ContentTypeRule", "rule", ":", "rules", ")", "{", "ContentTypeInfo", "contentTypeInfo", "=", "rule", ".", "getContentType", "(", "message", ")", ";", "if", "(", "contentTypeInfo", "!=", "null", ")", "{", "return", "contentTypeInfo", ";", "}", "}", "return", "null", ";", "}"], "memberFunctions": {"getDefaultContentTypeProperty": [["String"]], "addRule": [["void", "ContentTypeRule rule"]]}, "className": "ContentTypeRuleSet", "renamed": ["ContentTypeInfo", "function", "(", "Message", "arg0", ")", "{", "for", "(", "ContentTypeRule", "loc0", ":", "rules", ")", "{", "ContentTypeInfo", "loc1", "=", "loc0", ".", "getContentType", "(", "arg0", ")", ";", "if", "(", "loc1", "!=", "null", ")", "{", "return", "loc1", ";", "}", "}", "return", "null", ";", "}"], "nl": "Determine the content type of the given message. This method will try the registered rules in turn until the first rule matches.", "nlToks": ["Determine", "the", "content", "type", "of", "the", "given", "message", ".", "This", "method", "will", "try", "the", "registered", "rules", "in", "turn", "until", "the", "first", "rule", "matches", "."], "path": "harsha89/wso2-axis2-transports/tree/master/modules/msmq/src/main/java/org/apache/axis2/transport/msmq/ctype/ContentTypeRuleSet.java", "idx": 286}
{"memberVariables": {}, "code": ["GetOfferDetailsResponse", ".", "Return", ".", "DetailOfferData", ".", "FulfillmentPartner", "function", "(", ")", "{", "return", "new", "GetOfferDetailsResponse", ".", "Return", ".", "DetailOfferData", ".", "FulfillmentPartner", "(", ")", ";", "}"], "memberFunctions": {"createGetOfferDetailsResponseReturnDetailOfferDataSourceGeos": [["GetOfferDetailsResponse.Return.DetailOfferData.SourceGeos"]], "createGetOfferDetailsResponseReturnDetailOfferDataSeo": [["GetOfferDetailsResponse.Return.DetailOfferData.Seo"]], "createGetOfferDetailsResponseReturnDetailOfferDataMerchantAddresses": [["GetOfferDetailsResponse.Return.DetailOfferData.Merchant.Addresses"]], "createGetOfferDetailsResponseReturnDetailOfferDataTargetGeosGeoCountry": [["GetOfferDetailsResponse.Return.DetailOfferData.TargetGeos.Geo.Country"]], "createGetOfferDetailsResponseReturnDetailOfferDataOfferMediaOfferImageEntry": [["GetOfferDetailsResponse.Return.DetailOfferData.OfferMedia.OfferImage.Entry"]], "createGetOfferDetailsResponseReturnDetailOfferDataTargetGeosGeo": [["GetOfferDetailsResponse.Return.DetailOfferData.TargetGeos.Geo"]], "createGetOfferDetailsResponseReturnDetailOfferDataOfferMedia": [["GetOfferDetailsResponse.Return.DetailOfferData.OfferMedia"]], "createGetOfferDetailsResponseReturnDetailOfferDataOfferMediaOfferImageEntryValue": [["GetOfferDetailsResponse.Return.DetailOfferData.OfferMedia.OfferImage.Entry.Value"]], "createGetOfferDetailsResponseReturnDetailOfferDataProductsProduct": [["GetOfferDetailsResponse.Return.DetailOfferData.Products.Product"]], "createGetOfferDetailsResponseReturnDetailOfferDataRedemptionAddressesRedemptionAddress": [["GetOfferDetailsResponse.Return.DetailOfferData.RedemptionAddresses.RedemptionAddress"]], "createGetOfferDetailsResponseReturnDetailOfferDataSourceGeosGeoRegion": [["GetOfferDetailsResponse.Return.DetailOfferData.SourceGeos.Geo.Region"]], "createGetOfferDetailsResponseReturnDetailOfferDataTargetGeosGeoCity": [["GetOfferDetailsResponse.Return.DetailOfferData.TargetGeos.Geo.City"]], "createGetOfferDetailsResponseReturnDetailOfferData": [["GetOfferDetailsResponse.Return.DetailOfferData"]], "createGetOfferDetailsResponse": [["GetOfferDetailsResponse"]], "createGetOfferDetailsResponseReturnDetailOfferDataSourceGeosGeoCity": [["GetOfferDetailsResponse.Return.DetailOfferData.SourceGeos.Geo.City"]], "createGetOfferDetailsResponseReturnDetailOfferDataOfferMediaOfferImageEntryValueItem": [["GetOfferDetailsResponse.Return.DetailOfferData.OfferMedia.OfferImage.Entry.Value.Item"]], "createGetOfferDetailsResponseReturnDetailOfferDataProducts": [["GetOfferDetailsResponse.Return.DetailOfferData.Products"]], "createGetOfferDetailsResponseReturnDetailOfferDataOfferMediaOfferImage": [["GetOfferDetailsResponse.Return.DetailOfferData.OfferMedia.OfferImage"]], "createGetOfferDetailsResponseReturnDetailOfferDataRedemptionAddresses": [["GetOfferDetailsResponse.Return.DetailOfferData.RedemptionAddresses"]], "createGetOfferDetailsResponseReturn": [["GetOfferDetailsResponse.Return"]], "createGetOfferDetailsResponseReturnDetailOfferDataSourceGeosGeoCountry": [["GetOfferDetailsResponse.Return.DetailOfferData.SourceGeos.Geo.Country"]], "createGetOfferDetailsResponseReturnDetailOfferDataTargetGeos": [["GetOfferDetailsResponse.Return.DetailOfferData.TargetGeos"]], "createGetOfferDetailsResponseReturnDetailOfferDataTargetGeosGeoRegion": [["GetOfferDetailsResponse.Return.DetailOfferData.TargetGeos.Geo.Region"]], "createGetOfferDetailsResponseReturnDetailOfferDataMerchant": [["GetOfferDetailsResponse.Return.DetailOfferData.Merchant"]], "createGetOfferDetailsResponseReturnDetailOfferDataSourceGeosGeo": [["GetOfferDetailsResponse.Return.DetailOfferData.SourceGeos.Geo"]], "createGetOfferDetailsResponseReturnDetailOfferDataOfferDisplay": [["GetOfferDetailsResponse.Return.DetailOfferData.OfferDisplay"]]}, "className": "ObjectFactory", "renamed": ["GetOfferDetailsResponse", ".", "Return", ".", "DetailOfferData", ".", "FulfillmentPartner", "function", "(", ")", "{", "return", "new", "GetOfferDetailsResponse", ".", "Return", ".", "DetailOfferData", ".", "FulfillmentPartner", "(", ")", ";", "}"], "nl": "Create an instance of  {@link GetOfferDetailsResponse.Return.DetailOfferData.FulfillmentPartner }", "nlToks": ["Create", "an", "instance", "of", "-LCB-", "@link", "GetOfferDetailsResponse.Return.DetailOfferData.FulfillmentPartner", "-RCB-"], "path": "priyankgandhi/mastercard/tree/master/eop-openapi-client/src/main/java/com/eop/api/offerdetail/gen/ObjectFactory.java", "idx": 287}
{"memberVariables": {"serialVersionUID=1L": "long", "items": "ItemList<T>", "status": "ResponseStatus"}, "code": ["void", "function", "(", "ItemList", "<", "T", ">", "items", ")", "{", "this", ".", "items", "=", "items", ";", "}"], "memberFunctions": {"getItems": [["ItemList<T>"]], "toString": [["String"]], "getStatus": [["ResponseStatus"]], "setStatus": [["void", "ResponseStatus status"]]}, "className": "SimpleResponse", "renamed": ["void", "function", "(", "ItemList", "<", "T", ">", "arg0", ")", "{", "this", ".", "items", "=", "arg0", ";", "}"], "nl": "Sets the items.", "nlToks": ["Sets", "the", "items", "."], "path": "pkesireddy/portico_fletcher/tree/master/FetcherTesterService/src/main/java/org/ithaka/cm/fetchertester/model/SimpleResponse.java", "idx": 288}
{"memberVariables": {"mRoots": "List<DirectedAcyclicGraphNode<T>>", "mIndex": "Map<T,DirectedAcyclicGraphNode<T>>"}, "code": ["boolean", "function", "(", "T", "payload", ")", "{", "if", "(", "!", "contains", "(", "payload", ")", ")", "{", "return", "false", ";", "}", "return", "mRoots", ".", "contains", "(", "mIndex", ".", "get", "(", "payload", ")", ")", ";", "}"], "memberFunctions": {"add": [["void", "T payload", "List<T> parents"]], "deleteLeaf": [["void", "T payload"]], "getParents": [["List<T>", "T payload"]], "sortTopologically": [["List<T>", "Set<T> payloads"]], "getChildren": [["List<T>", "T payload"]], "contains": [["boolean", "T payload"]], "getRoots": [["List<T>"]], "getAllInTopologicalOrder": [["List<T>"]]}, "className": "DirectedAcyclicGraph", "renamed": ["boolean", "function", "(", "T", "arg0", ")", "{", "if", "(", "!", "contains", "(", "arg0", ")", ")", "{", "return", "false", ";", "}", "return", "mRoots", ".", "contains", "(", "mIndex", ".", "get", "(", "arg0", ")", ")", ";", "}"], "nl": "Checks if a given payload is in a root of the DAG.", "nlToks": ["Checks", "if", "a", "given", "payload", "is", "in", "a", "root", "of", "the", "DAG", "."], "path": "poemlin/alluxio/tree/master/core/common/src/main/java/alluxio/collections/DirectedAcyclicGraph.java", "idx": 289}
{"memberVariables": {}, "code": ["long", "function", "(", "String", "pathUri", ")", "{", "long", "len", "=", "-", "1", ";", "FileStatus", "fileStatus", "=", "getFileStatus", "(", "pathUri", ")", ";", "if", "(", "fileStatus", "!=", "null", ")", "{", "len", "=", "fileStatus", ".", "getLen", "(", ")", ";", "}", "return", "len", ";", "}"], "memberFunctions": {"fs_dirSize": [["long", "String pathUri"]], "getFileStatus": [["FileStatus", "String pathUri"]], "fs_blockSize": [["long", "String pathUri"]], "getFileSystem": [["FileSystem", "URI uri"]], "fs_isDir": [["boolean", "String pathUri"]], "fs_exists": [["boolean", "String pathUri"]]}, "className": "FsELFunctions", "renamed": ["long", "function", "(", "String", "arg0", ")", "{", "long", "loc0", "=", "-", "1", ";", "FileStatus", "loc1", "=", "getFileStatus", "(", "arg0", ")", ";", "if", "(", "loc1", "!=", "null", ")", "{", "loc0", "=", "loc1", ".", "getLen", "(", ")", ";", "}", "return", "loc0", ";", "}"], "nl": "Return the len of a file.", "nlToks": ["Return", "the", "len", "of", "a", "file", "."], "path": "pingpangkuangmo/oozie/tree/master/core/src/main/java/org/apache/oozie/action/hadoop/FsELFunctions.java", "idx": 291}
{"memberVariables": {"instance=SentenceFactory.getInstance()": "SentenceFactory"}, "code": ["void", "function", "(", ")", "{", "List", "<", "String", ">", "types", "=", "instance", ".", "listParsers", "(", ")", ";", "assertEquals", "(", "SentenceId", ".", "values", "(", ")", ".", "length", ",", "types", ".", "size", "(", ")", ")", ";", "for", "(", "SentenceId", "id", ":", "SentenceId", ".", "values", "(", ")", ")", "{", "assertTrue", "(", "types", ".", "contains", "(", "id", ".", "name", "(", ")", ")", ")", ";", "}", "}"], "memberFunctions": {"testRegisterInvalidParser": [["void"]], "testHasParser": [["void"]], "testUnregisterParser": [["void"]], "testCreateParserWithNull": [["void"]], "testCreateEmptyParserWithSentenceIdStr": [["void"]], "testCreateEmptyCustomParser": [["void"]], "testCreateParserWithUnregistered": [["void"]], "testCreateEmptyParserWithSentenceId": [["void"]], "testCreateCustomParser": [["void"]], "testRegisterParserWithAlternativeBeginChar": [["void"]], "testSupportedTypesRegistered": [["void"]], "testCreateParser": [["void"]], "testCreateParserWithRandom": [["void"]], "setUp": [["void"]], "testGetInstance": [["void"]], "testCreateParserWithEmptyString": [["void"]]}, "className": "SentenceFactoryTest", "renamed": ["void", "function", "(", ")", "{", "List", "<", "String", ">", "loc0", "=", "instance", ".", "listParsers", "(", ")", ";", "assertEquals", "(", "SentenceId", ".", "values", "(", ")", ".", "length", ",", "loc0", ".", "size", "(", ")", ")", ";", "for", "(", "SentenceId", "loc1", ":", "SentenceId", ".", "values", "(", ")", ")", "{", "assertTrue", "(", "loc0", ".", "contains", "(", "loc1", ".", "name", "(", ")", ")", ")", ";", "}", "}"], "nl": "Test method for {@link net.sf.marineapi.nmea.parser.SentenceFactory#createParser(TalkerId,SentenceId) .}", "nlToks": ["Test", "method", "for", "-LCB-", "@link", "net.sf.marineapi.nmea.parser.SentenceFactory", "#createParser", "-LRB-", "TalkerId", ",", "SentenceId", "-RRB-", ".", "-RCB-"], "path": "pkoziol/marine-api/tree/master/src/test/java/net/sf/marineapi/nmea/parser/SentenceFactoryTest.java", "idx": 292}
{"memberVariables": {"tStart": "long", "qStart": "long", "tStop": "long", "blockSize": "int"}, "code": ["long", "function", "(", ")", "{", "return", "tStop", ";", "}"], "memberFunctions": {"getQStart": [["long"]], "getTStart": [["long"]], "getBlockSize": [["int"]]}, "className": "Mapping", "renamed": ["long", "function", "(", ")", "{", "return", "tStop", ";", "}"], "nl": "Gets the Global Chromosomal Stop.", "nlToks": ["Gets", "the", "Global", "Chromosomal", "Stop", "."], "path": "adamabeshouse/cbioportal/tree/master/core/src/main/java/org/mskcc/cbio/portal/mapback/Mapping.java", "idx": 294}
{"memberVariables": {"mTextView": "TextView", "mAnimation": "Animation", "mCurrentCount": "int", "mHandler=new Handler()": "Handler", "mStartCount": "int", "mListener": "CountDownListener", "mCountDown=new Runnable(){\n  public void run(){\n    if (mCurrentCount > 0) {\n      mTextView.setText(mCurrentCount + \"s\");\n      mTextView.startAnimation(mAnimation);\n      mCurrentCount--;\n    }\n else {\n      mTextView.setVisibility(View.GONE);\n      if (mListener != null)       mListener.onCountDownEnd(CountDownAnimation.this);\n    }\n  }\n}\n": "Runnable"}, "code": ["int", "function", "(", ")", "{", "return", "mStartCount", ";", "}"], "memberFunctions": {"cancel": [["void"]], "getAnimation": [["Animation"]], "start": [["void"]], "onCountDownEnd": [["void", "CountDownAnimation animation"]], "run": [["void"]], "setCountDownListener": [["void", "CountDownListener listener"]], "setStartCount": [["void", "int startCount"]], "setAnimation": [["void", "Animation animation"]]}, "className": "CountDownAnimation", "renamed": ["int", "function", "(", ")", "{", "return", "mStartCount", ";", "}"], "nl": "Returns the starting count number for the count down animation.", "nlToks": ["Returns", "the", "starting", "count", "number", "for", "the", "count", "down", "animation", "."], "path": "1054353861/MediaclForUser/tree/master/MediaclForUser/app/src/main/java/com/android/mediaclforuser/view/CountDownAnimation.java", "idx": 295}
{"memberVariables": {"ii": "IndexInfo", "p1": "Plan", "p2": "Plan", "joinfield": "String", "sch=new Schema()": "Schema"}, "code": ["int", "function", "(", ")", "{", "return", "p1", ".", "recordsOutput", "(", ")", "*", "ii", ".", "recordsOutput", "(", ")", ";", "}"], "memberFunctions": {"schema": [["Schema"]], "blocksAccessed": [["int"]], "distinctValues": [["int", "String fldname"]], "open": [["Scan"]]}, "className": "IndexJoinPlan", "renamed": ["int", "function", "(", ")", "{", "return", "p1", ".", "recordsOutput", "(", ")", "*", "ii", ".", "recordsOutput", "(", ")", ";", "}"], "nl": "Estimates the number of output records in the join. The formula is:  R(indexjoin(p1,p2,idx)) = R(p1)R(idx) ", "nlToks": ["Estimates", "the", "number", "of", "output", "records", "in", "the", "join", ".", "The", "formula", "is", ":", "R", "-LRB-", "indexjoin", "-LRB-", "p1", ",", "p2", ",", "idx", "-RRB-", "-RRB-", "=", "R", "-LRB-", "p1", "-RRB-", "R", "-LRB-", "idx", "-RRB-"], "path": "prerit2803/DBMSProject2/tree/master/simpledb/index/query/IndexJoinPlan.java", "idx": 297}
{"memberVariables": {"spaceDelimited": "boolean", "SINCE=\"SINCE\"": "String", "defaultValue": "String", "caseSensitive": "boolean", "SPACE_DELIMITED=\"SPACE-DELIMITED\"": "String", "description": "String", "serialVersionUID=1L": "long", "RESTART_REQUIRED=\"RESTART REQUIRED\"": "String", "restartRequired": "boolean", "name": "String", "CASE_SENSITIVE=\"CASE-SENSITIVE\"": "String", "currentValue": "String", "since": "String"}, "code": ["List", "<", "String", ">", "function", "(", ")", "{", "return", "getStrings", "(", "\" \"", ")", ";", "}"], "memberFunctions": {"getChar": [["char", "char defaultValue"]], "getBoolean": [["boolean", "boolean defaultValue"]], "getInteger": [["int", "int defaultValue"]], "getString": [["String", "String defaultValue"]], "getMap": [["Map<String,String>"]], "isDefaultValue": [["boolean"]]}, "className": "SettingModel", "renamed": ["List", "<", "String", ">", "function", "(", ")", "{", "return", "getStrings", "(", "\"srini_string\"", ")", ";", "}"], "nl": "Returns a list of space-separated strings from the specified key.", "nlToks": ["Returns", "a", "list", "of", "space-separated", "strings", "from", "the", "specified", "key", "."], "path": "pombreda/gitblit/tree/master/src/main/java/com/gitblit/models/SettingModel.java", "idx": 298}
{"memberVariables": {"events=new ArrayList<SentenceEvent>()": "List<SentenceEvent>", "reader": "SentenceReader", "listeners=new ArrayList<ProviderListener<T>>()": "List<ProviderListener<T>>"}, "code": ["void", "function", "(", ")", "{", "events", ".", "clear", "(", ")", ";", "}"], "memberFunctions": {"fireProviderEvent": [["void", "T event"]], "readingStopped": [["void"]], "hasAll": [["boolean", "String... id"]], "createProviderEvent": [["T"]], "isReady": [["boolean"]], "isValid": [["boolean"]], "hasOne": [["boolean", "String... id"]], "readingStarted": [["void"]], "removeListener": [["void", "ProviderListener<T> listener"]], "readingPaused": [["void"]], "sentenceRead": [["void", "SentenceEvent event"]], "getSentences": [["List<Sentence>"]], "addListener": [["void", "ProviderListener<T> listener"]], "validate": [["boolean"]]}, "className": "AbstractProvider", "renamed": ["void", "function", "(", ")", "{", "events", ".", "clear", "(", ")", ";", "}"], "nl": "Clears the list of collected events.", "nlToks": ["Clears", "the", "list", "of", "collected", "events", "."], "path": "pkoziol/marine-api/tree/master/src/main/java/net/sf/marineapi/provider/AbstractProvider.java", "idx": 299}
{"memberVariables": {"mClientRWLock": "ClientRWLock", "mReadLock": "Lock", "mWriteLock": "Lock"}, "code": ["void", "function", "(", ")", "{", "mClientRWLock", "=", "new", "ClientRWLock", "(", ")", ";", "mReadLock", "=", "mClientRWLock", ".", "readLock", "(", ")", ";", "mWriteLock", "=", "mClientRWLock", ".", "writeLock", "(", ")", ";", "}"], "memberFunctions": {"unlock": [["void"]], "lockInterruptibly": [["void"]], "notSameLock": [["void"]], "referenceCounting": [["void"]], "tryLockTestFail": [["void"]]}, "className": "ClientRWLockTest", "renamed": ["void", "function", "(", ")", "{", "mClientRWLock", "=", "new", "ClientRWLock", "(", ")", ";", "mReadLock", "=", "mClientRWLock", ".", "readLock", "(", ")", ";", "mWriteLock", "=", "mClientRWLock", ".", "writeLock", "(", ")", ";", "}"], "nl": "Sets up the constructors before a test run.", "nlToks": ["Sets", "up", "the", "constructors", "before", "a", "test", "run", "."], "path": "poemlin/alluxio/tree/master/core/server/src/test/java/alluxio/worker/block/ClientRWLockTest.java", "idx": 301}
{"memberVariables": {"offsetHours=0": "int", "offsetMinutes=0": "int", "seconds=0.0": "double", "minutes=0": "int", "hour=0": "int", "TIME_PATTERN=\"%02d:%02d:%02d%+03d:%02d\"": "String"}, "code": ["void", "function", "(", "int", "hour", ")", "{", "if", "(", "hour", "<", "0", "||", "hour", ">", "23", ")", "{", "throw", "new", "IllegalArgumentException", "(", "\"Valid hour value is between 0..23\"", ")", ";", "}", "this", ".", "hour", "=", "hour", ";", "}"], "memberFunctions": {"getOffsetHours": [["int"]], "toDate": [["Date", "Date d"]], "toISO8601": [["String"]], "setMinutes": [["void", "int minutes"]], "getMilliseconds": [["long"]], "setOffsetMinutes": [["void", "int minutes"]], "getMinutes": [["int"]], "getSeconds": [["double"]], "hashCode": [["int"]], "setSeconds": [["void", "double seconds"]], "equals": [["boolean", "final Object obj"]], "getOffsetMinutes": [["int"]], "getHour": [["int"]], "toString": [["String"]], "setOffsetHours": [["void", "int hours"]], "setTime": [["void", "Date d"]]}, "className": "Time", "renamed": ["void", "function", "(", "int", "arg0", ")", "{", "if", "(", "arg0", "<", "0", "||", "arg0", ">", "23", ")", "{", "throw", "new", "IllegalArgumentException", "(", "\"srini_string\"", ")", ";", "}", "this", ".", "hour", "=", "arg0", ";", "}"], "nl": "Set the hour of day.", "nlToks": ["Set", "the", "hour", "of", "day", "."], "path": "pkoziol/marine-api/tree/master/src/main/java/net/sf/marineapi/nmea/util/Time.java", "idx": 302}
{"memberVariables": {}, "code": ["Evictor", "function", "(", "BlockMetadataManagerView", "view", ",", "Allocator", "allocator", ")", "{", "try", "{", "return", "CommonUtils", ".", "createNewClassInstance", "(", "Configuration", ".", "<", "Evictor", ">", "getClass", "(", "PropertyKey", ".", "WORKER_EVICTOR_CLASS", ")", ",", "new", "Class", "[", "]", "{", "BlockMetadataManagerView", ".", "class", ",", "Allocator", ".", "class", "}", ",", "new", "Object", "[", "]", "{", "view", ",", "allocator", "}", ")", ";", "}", "catch", "(", "Exception", "e", ")", "{", "throw", "Throwables", ".", "propagate", "(", "e", ")", ";", "}", "}"], "memberFunctions": {"freeSpaceWithView": [["EvictionPlan", "long availableBytes", "BlockStoreLocation location", "BlockMetadataManagerView view"]]}, "className": "Evictor", "renamed": ["Evictor", "function", "(", "BlockMetadataManagerView", "arg0", ",", "Allocator", "arg1", ")", "{", "try", "{", "return", "CommonUtils", ".", "createNewClassInstance", "(", "Configuration", ".", "<", "Evictor", ">", "getClass", "(", "PropertyKey", ".", "WORKER_EVICTOR_CLASS", ")", ",", "new", "Class", "[", "]", "{", "BlockMetadataManagerView", ".", "class", ",", "Allocator", ".", "class", "}", ",", "new", "Object", "[", "]", "{", "arg0", ",", "arg1", "}", ")", ";", "}", "catch", "(", "Exception", "loc0", ")", "{", "throw", "Throwables", ".", "propagate", "(", "loc0", ")", ";", "}", "}"], "nl": "Factory for  {@link Evictor}.", "nlToks": ["Factory", "for", "-LCB-", "@link", "Evictor", "-RCB-", "."], "path": "poemlin/alluxio/tree/master/core/server/src/main/java/alluxio/worker/block/evictor/Evictor.java", "idx": 303}
{"memberVariables": {"issuedAt=-1": "long", "scopes=Collections.emptyList()": "List<OAuthPermission>", "subject": "UserSubject", "client": "Client", "preAuthorized": "boolean", "tokenString": "String", "lifetime=-1": "long", "tokenSecret": "String"}, "code": ["long", "function", "(", ")", "{", "return", "issuedAt", ";", "}"], "memberFunctions": {"setScopes": [["void", "List<OAuthPermission> scopes"]], "getSubject": [["UserSubject"]], "setPreAuthorized": [["void", "boolean preAuthorized"]], "setSubject": [["void", "UserSubject subject"]], "getTokenKey": [["String"]], "isPreAuthorized": [["boolean"]], "getLifetime": [["long"]], "getClient": [["Client"]], "getTokenSecret": [["String"]], "getScopes": [["List<OAuthPermission>"]]}, "className": "Token", "renamed": ["long", "function", "(", ")", "{", "return", "issuedAt", ";", "}"], "nl": "Returns the time (in seconds) when this token was issued at", "nlToks": ["Returns", "the", "time", "-LRB-", "in", "seconds", "-RRB-", "when", "this", "token", "was", "issued", "at"], "path": "primesign/cxf/tree/master/rt/rs/security/oauth-parent/oauth/src/main/java/org/apache/cxf/rs/security/oauth/data/Token.java", "idx": 305}
{"memberVariables": {"filter": "Predicate<? super T>", "iterated=false": "boolean", "i": "Iterator<T>", "mapper": "Mapper<? super F,T>", "lookAhead=null": "T", "element": "E"}, "code": ["List", "<", "E", ">", "function", "(", "Iterable", "<", "E", ">", "i", ")", "{", "ArrayList", "<", "E", ">", "a", "=", "new", "ArrayList", "<", "E", ">", "(", ")", ";", "for", "(", "E", "e", ":", "i", ")", "{", "a", ".", "add", "(", "e", ")", ";", "}", "return", "a", ";", "}"], "memberFunctions": {"singleton": [["Iterable<E>", "final E single"]], "filter": [["Iterable<T>", "final Iterable<T> sequence", "final Predicate<? super T> filter"]], "all": [["boolean", "final Iterable<T> sequence", "final Predicate<? super T> predicate"]], "next": [["E"], ["T"], ["T"]], "cast": [["Iterable<E>", "final Iterable i"]], "count": [["int", "Iterable seq"]], "hasNext": [["boolean"], ["boolean"], ["boolean"]], "map": [["Iterable<T>", "final Iterable<F> from", "final Mapper<? super F,T> mapper"]], "any": [["boolean", "final Iterable<T> sequence", "final Predicate<? super T> predicate"]], "remove": [["void"], ["void"], ["void"]]}, "className": "Linqy", "renamed": ["List", "<", "E", ">", "function", "(", "Iterable", "<", "E", ">", "arg0", ")", "{", "ArrayList", "<", "E", ">", "loc0", "=", "new", "ArrayList", "<", "E", ">", "(", ")", ";", "for", "(", "E", "loc1", ":", "arg0", ")", "{", "loc0", ".", "add", "(", "loc1", ")", ";", "}", "return", "loc0", ";", "}"], "nl": "Turns the iterable into a list.", "nlToks": ["Turns", "the", "iterable", "into", "a", "list", "."], "path": "phbenisc/xmlunit/tree/master/xmlunit-core/src/main/java/org/xmlunit/util/Linqy.java", "idx": 307}
{"memberVariables": {"log=LogFactory.getLog(PortalUserJDBCDAO.class)": "Log", "namedParameterJdbcTemplate": "NamedParameterJdbcTemplate"}, "code": ["UserAuthorities", "function", "(", "final", "String", "username", ")", "{", "if", "(", "log", ".", "isDebugEnabled", "(", ")", ")", "{", "log", ".", "debug", "(", "\"getPortalUserAuthorities, username: \"", "+", "username", ")", ";", "}", "Collection", "<", "String", ">", "userAuthorities", "=", "getUserAuthorities", "(", "username", ")", ";", "return", "(", "userAuthorities", ".", "size", "(", ")", ">", "0", ")", "?", "new", "UserAuthorities", "(", "username", ",", "userAuthorities", ")", ":", "null", ";", "}"], "memberFunctions": {"getUserAuthorities": [["Collection<String>", "final String username"]], "addPortalUser": [["void", "User user"]], "addPortalUserAuthorities": [["void", "UserAuthorities userAuthorities"]], "getPortalUser": [["User", "final String username"]]}, "className": "PortalUserJDBCDAO", "renamed": ["UserAuthorities", "function", "(", "final", "String", "arg0", ")", "{", "if", "(", "log", ".", "isDebugEnabled", "(", ")", ")", "{", "log", ".", "debug", "(", "\"srini_string\"", "+", "arg0", ")", ";", "}", "Collection", "<", "String", ">", "loc0", "=", "getUserAuthorities", "(", "arg0", ")", ";", "return", "(", "loc0", ".", "size", "(", ")", ">", "0", ")", "?", "new", "UserAuthorities", "(", "arg0", ",", "loc0", ")", ":", "null", ";", "}"], "nl": "Implementation of  {@code PortalUserDAO}", "nlToks": ["Implementation", "of", "-LCB-", "@code", "PortalUserDAO", "-RCB-"], "path": "adamabeshouse/cbioportal/tree/master/core/src/main/java/org/mskcc/cbio/portal/dao/internal/PortalUserJDBCDAO.java", "idx": 308}
{"memberVariables": {}, "code": ["EigenDecomposition", "<", "DenseMatrix64F", ">", "function", "(", "int", "matrixSize", ",", "boolean", "needVectors", ")", "{", "return", "new", "SwitchingEigenDecomposition", "(", "matrixSize", ",", "needVectors", ",", "1e-8", ")", ";", "}"], "memberFunctions": {"svd": [["SingularValueDecomposition<DenseMatrix64F>", "int numRows", "int numCols", "boolean needU", "boolean needV", "boolean compact"]], "tridiagonal": [["TridiagonalSimilarDecomposition<DenseMatrix64F>", "int matrixSize"]], "qr": [["QRDecomposition<DenseMatrix64F>", "int numRows", "int numCols"]], "decomposeSafe": [["boolean", "DecompositionInterface<T> decomp", "T M"]], "lu": [["LUDecomposition<DenseMatrix64F>", "int numRows", "int numCol"]], "chol": [["CholeskyDecomposition<DenseMatrix64F>", "int matrixSize", "boolean lower"]], "cholLDL": [["CholeskyDecompositionLDL_D64", "int matrixSize"]], "qrp": [["QRPDecomposition<DenseMatrix64F>", "int numRows", "int numCols"]], "quality": [["double", "DenseMatrix64F orig", "SingularValueDecomposition<DenseMatrix64F> svd"], ["double", "DenseMatrix64F orig", "DenseMatrix64F U", "DenseMatrix64F W", "DenseMatrix64F Vt"], ["double", "DenseMatrix64F orig", "EigenDecomposition<DenseMatrix64F> eig"]]}, "className": "DecompositionFactory", "renamed": ["EigenDecomposition", "<", "DenseMatrix64F", ">", "function", "(", "int", "arg0", ",", "boolean", "arg1", ")", "{", "return", "new", "SwitchingEigenDecomposition", "(", "arg0", ",", "arg1", ",", "1e-8", ")", ";", "}"], "nl": " Returns an  {@link EigenDecomposition} that has been optimized for the specified matrix size.If the input matrix is symmetric within tolerance then the symmetric algorithm will be used, otherwise a general purpose eigenvalue decomposition is used. ", "nlToks": ["Returns", "an", "-LCB-", "@link", "EigenDecomposition", "-RCB-", "that", "has", "been", "optimized", "for", "the", "specified", "matrix", "size.If", "the", "input", "matrix", "is", "symmetric", "within", "tolerance", "then", "the", "symmetric", "algorithm", "will", "be", "used", ",", "otherwise", "a", "general", "purpose", "eigenvalue", "decomposition", "is", "used", "."], "path": "adamaulia/efficient-java-matrix-library/tree/master/src/org/ejml/factory/DecompositionFactory.java", "idx": 310}
{"memberVariables": {"matchListeners=new CopyOnWriteArrayList<ComparisonListener>()": "List<ComparisonListener>", "compListeners=new CopyOnWriteArrayList<ComparisonListener>()": "List<ComparisonListener>", "diffListeners=new CopyOnWriteArrayList<ComparisonListener>()": "List<ComparisonListener>"}, "code": ["void", "function", "(", "ComparisonListener", "l", ")", "{", "compListeners", ".", "add", "(", "l", ")", ";", "}"], "memberFunctions": {"addDifferenceListener": [["void", "ComparisonListener l"]], "addMatchListener": [["void", "ComparisonListener l"]], "fire": [["void", "Comparison comparison", "ComparisonResult outcome", "List<ComparisonListener> listeners"]], "fireComparisonPerformed": [["void", "Comparison comparison", "ComparisonResult outcome"]]}, "className": "ComparisonListenerSupport", "renamed": ["void", "function", "(", "ComparisonListener", "arg0", ")", "{", "compListeners", ".", "add", "(", "arg0", ")", ";", "}"], "nl": "Registers a listener that is notified of each comparison.", "nlToks": ["Registers", "a", "listener", "that", "is", "notified", "of", "each", "comparison", "."], "path": "phbenisc/xmlunit/tree/master/xmlunit-core/src/main/java/org/xmlunit/diff/ComparisonListenerSupport.java", "idx": 311}
{"memberVariables": {"mId": "int"}, "code": ["int", "function", "(", ")", "{", "return", "mId", ";", "}"], "memberFunctions": {"encode": [["void", "ByteBuf out"]], "createFrameDecoder": [["ByteToMessageDecoder"]], "getType": [["Type"]], "getPayloadDataBuffer": [["DataBuffer"]], "decodeMessage": [["RPCMessage", "RPCMessage.Type type", "ByteBuf in"]], "hasPayload": [["boolean"]], "decode": [["Type", "ByteBuf in"]], "getEncodedLength": [["int"]], "validate": [["void"]]}, "className": "RPCMessage", "renamed": ["int", "function", "(", ")", "{", "return", "mId", ";", "}"], "nl": "Returns the int identifier of the type. Note: This is only used for getting the int representation of the type for {@link alluxio.worker.DataServerMessage}, since that class needs to manually encode all messages.  {@link alluxio.worker.DataServerMessage} and this method should no longer be neededwhen the client is converted to use Netty.", "nlToks": ["Returns", "the", "int", "identifier", "of", "the", "type", ".", "Note", ":", "This", "is", "only", "used", "for", "getting", "the", "int", "representation", "of", "the", "type", "for", "-LCB-", "@link", "alluxio.worker.DataServerMessage", "-RCB-", ",", "since", "that", "class", "needs", "to", "manually", "encode", "all", "messages", ".", "-LCB-", "@link", "alluxio.worker.DataServerMessage", "-RCB-", "and", "this", "method", "should", "no", "longer", "be", "neededwhen", "the", "client", "is", "converted", "to", "use", "Netty", "."], "path": "poemlin/alluxio/tree/master/core/common/src/main/java/alluxio/network/protocol/RPCMessage.java", "idx": 312}
{"memberVariables": {}, "code": ["Matrix", "function", "(", "Matrix", "matrix", ")", "{", "Matrix", "mat", "=", "new", "Matrix", "(", "matrix", ".", "getNrows", "(", ")", ",", "matrix", ".", "getNcols", "(", ")", ")", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "matrix", ".", "getNrows", "(", ")", ";", "i", "++", ")", "{", "for", "(", "int", "j", "=", "0", ";", "j", "<", "matrix", ".", "getNcols", "(", ")", ";", "j", "++", ")", "{", "mat", ".", "setValueAt", "(", "i", ",", "j", ",", "changeSign", "(", "i", ")", "*", "changeSign", "(", "j", ")", "*", "determinant", "(", "createSubMatrix", "(", "matrix", ",", "i", ",", "j", ")", ")", ")", ";", "}", "}", "return", "mat", ";", "}"], "memberFunctions": {"changeSign": [["int", "int i"]], "add": [["Matrix", "Matrix matrix1", "Matrix matrix2"]], "inverse": [["Matrix", "Matrix matrix"]], "subtract": [["Matrix", "Matrix matrix1", "Matrix matrix2"]], "transpose": [["Matrix", "Matrix matrix"]], "multiply": [["Matrix", "Matrix matrix1", "Matrix matrix2"]], "createSubMatrix": [["Matrix", "Matrix matrix", "int excluding_row", "int excluding_col"]], "determinant": [["double", "Matrix matrix"]]}, "className": "MatrixMathematics", "renamed": ["Matrix", "function", "(", "Matrix", "arg0", ")", "{", "Matrix", "loc0", "=", "new", "Matrix", "(", "arg0", ".", "getNrows", "(", ")", ",", "arg0", ".", "getNcols", "(", ")", ")", ";", "for", "(", "int", "loc1", "=", "0", ";", "loc1", "<", "arg0", ".", "getNrows", "(", ")", ";", "loc1", "++", ")", "{", "for", "(", "int", "loc2", "=", "0", ";", "loc2", "<", "arg0", ".", "getNcols", "(", ")", ";", "loc2", "++", ")", "{", "loc0", ".", "setValueAt", "(", "loc1", ",", "loc2", ",", "changeSign", "(", "loc1", ")", "*", "changeSign", "(", "loc2", ")", "*", "determinant", "(", "createSubMatrix", "(", "arg0", ",", "loc1", ",", "loc2", ")", ")", ")", ";", "}", "}", "return", "loc0", ";", "}"], "nl": "The cofactor of a matrix", "nlToks": ["The", "cofactor", "of", "a", "matrix"], "path": "poi233/GoGo/tree/master/gogo/src/main/java/com/example/cc/gogo/LinearRegression/MatrixMathematics.java", "idx": 313}
{"memberVariables": {"defaultExpireTime=300000": "int", "httpClient=HttpClientBuilder.create().useSystemProperties().build()": "HttpClient", "auth": "OAuth2Authentication", "authCache=new HashMap<>()": "Map<String,TokenCacheObject>", "factory=new HttpComponentsClientHttpRequestFactory(httpClient)": "HttpComponentsClientHttpRequestFactory", "token": "OAuth2AccessToken", "introspectionConfigurationService": "IntrospectionConfigurationService", "forceCacheExpireTime=false": "boolean", "cacheNonExpiringTokens=false": "boolean", "cacheExpire": "Date", "cacheTokens=true": "boolean", "logger=LoggerFactory.getLogger(IntrospectingTokenService.class)": "Logger", "introspectionAuthorityGranter=new SimpleIntrospectionAuthorityGranter()": "IntrospectionAuthorityGranter"}, "code": ["void", "function", "(", "boolean", "cacheTokens", ")", "{", "this", ".", "cacheTokens", "=", "cacheTokens", ";", "}"], "memberFunctions": {"getDefaultExpireTime": [["int"]], "isCacheNonExpiringTokens": [["boolean"]], "createAccessToken": [["OAuth2AccessToken", "final JsonObject token", "final String tokenString"]], "setForceCacheExpireTime": [["void", "boolean forceCacheExpireTime"]], "setIntrospectionAuthorityGranter": [["void", "IntrospectionAuthorityGranter introspectionAuthorityGranter"]], "loadAuthentication": [["OAuth2Authentication", "String accessToken"]], "setDefaultExpireTime": [["void", "int defaultExpireTime"]], "parseToken": [["TokenCacheObject", "String accessToken"]], "setCacheNonExpiringTokens": [["void", "boolean cacheNonExpiringTokens"]], "createAuthentication": [["Authentication", "JsonObject token"]], "getIntrospectionConfigurationService": [["IntrospectionConfigurationService"]], "isForceCacheExpireTime": [["boolean"]], "createStoredRequest": [["OAuth2Request", "final JsonObject token"]], "isCacheTokens": [["boolean"]], "setIntrospectionConfigurationService": [["void", "IntrospectionConfigurationService introspectionUrlProvider"]], "getIntrospectionAuthorityGranter": [["IntrospectionAuthorityGranter"]], "readAccessToken": [["OAuth2AccessToken", "String accessToken"]], "checkCache": [["TokenCacheObject", "String key"]]}, "className": "IntrospectingTokenService", "renamed": ["void", "function", "(", "boolean", "arg0", ")", "{", "this", ".", "cacheTokens", "=", "arg0", ";", "}"], "nl": "Configure if the client should cache tokens locally or not", "nlToks": ["Configure", "if", "the", "client", "should", "cache", "tokens", "locally", "or", "not"], "path": "adilansari/OpenID-Connect-Java-Spring-Server/tree/master/openid-connect-client/src/main/java/org/mitre/oauth2/introspectingfilter/IntrospectingTokenService.java", "idx": 314}
{"memberVariables": {}, "code": ["boolean", "function", "(", "final", "File", "file", ",", "final", "String", "pattern", ")", "{", "Pattern", "regexp", "=", "Pattern", ".", "compile", "(", "pattern", ")", ";", "Matcher", "matcher", "=", "regexp", ".", "matcher", "(", "\"\"", ")", ";", "FileIterable", "it", "=", "new", "FileIterable", "(", "file", ")", ";", "for", "(", "String", "line", ":", "it", ")", "{", "matcher", ".", "reset", "(", "line", ")", ";", "if", "(", "matcher", ".", "find", "(", ")", ")", "{", "return", "true", ";", "}", "}", "return", "false", ";", "}"], "memberFunctions": {"getFileNameWithoutExtension": [["String", "String fileName"]], "readFilelist": [["String", "File filelist"]], "normalizeFilename": [["String", "String fileName"]], "collectFiles": [["List<DataSource>", "String fileLocations", "FilenameFilter filenameFilter"]], "collect": [["List<DataSource>", "List<DataSource> dataSources", "String fileLocation", "FilenameFilter filenameFilter"]]}, "className": "FileUtil", "renamed": ["boolean", "function", "(", "final", "File", "arg0", ",", "final", "String", "arg1", ")", "{", "Pattern", "loc0", "=", "Pattern", ".", "compile", "(", "arg1", ")", ";", "Matcher", "loc1", "=", "loc0", ".", "loc1", "(", "\"srini_string\"", ")", ";", "FileIterable", "loc2", "=", "new", "FileIterable", "(", "arg0", ")", ";", "for", "(", "String", "loc3", ":", "loc2", ")", "{", "loc1", ".", "reset", "(", "loc3", ")", ";", "if", "(", "loc1", ".", "find", "(", ")", ")", "{", "return", "true", ";", "}", "}", "return", "false", ";", "}"], "nl": "Handy method to find a certain pattern into a file. While this method lives in the FileUtils, it was designed with with unit test in mind (to check result redirected into a file)", "nlToks": ["Handy", "method", "to", "find", "a", "certain", "pattern", "into", "a", "file", ".", "While", "this", "method", "lives", "in", "the", "FileUtils", ",", "it", "was", "designed", "with", "with", "unit", "test", "in", "mind", "-LRB-", "to", "check", "result", "redirected", "into", "a", "file", "-RRB-"], "path": "adangel/pmd/tree/master/pmd-core/src/main/java/net/sourceforge/pmd/util/FileUtil.java", "idx": 315}
{"memberVariables": {"processor=null": "DAVProcessor", "context=null": "ServletContext", "logger=null": "DAVLogger", "repository=null": "DAVRepository", "config=null": "ServletConfig"}, "code": ["ServletConfig", "function", "(", ")", "{", "return", "(", "this", ".", "config", ")", ";", "}"], "memberFunctions": {"init": [["void", "ServletConfig config"]], "getServletContext": [["ServletContext"]], "service": [["void", "ServletRequest request", "ServletResponse response"]], "getRepositoryKey": [["String", "String servletName"]], "destroy": [["void"]], "getServletInfo": [["String"]], "notify": [["void", "DAVResource resource", "int event"]]}, "className": "DAVServlet", "renamed": ["ServletConfig", "function", "(", ")", "{", "return", "(", "this", ".", "config", ")", ";", "}"], "nl": "Return the  {@link ServletConfig} associated with this instance.", "nlToks": ["Return", "the", "-LCB-", "@link", "ServletConfig", "-RCB-", "associated", "with", "this", "instance", "."], "path": "pfumagalli/webdav/tree/master/src/main/java/it/could/webdav/DAVServlet.java", "idx": 316}
{"memberVariables": {"p": "Plan", "comp": "RecordComparator", "tx": "Transaction", "sch": "Schema"}, "code": ["Schema", "function", "(", ")", "{", "return", "sch", ";", "}"], "memberFunctions": {"splitIntoRuns": [["List<TempTable>", "Scan src"]], "blocksAccessed": [["int"]], "distinctValues": [["int", "String fldname"]], "recordsOutput": [["int"]], "copy": [["boolean", "Scan src", "UpdateScan dest"]], "doAMergeIteration": [["List<TempTable>", "List<TempTable> runs"]], "mergeTwoRuns": [["TempTable", "TempTable p1", "TempTable p2"]], "open": [["Scan"]]}, "className": "SortPlan", "renamed": ["Schema", "function", "(", ")", "{", "return", "sch", ";", "}"], "nl": "Returns the schema of the sorted table, which is the same as in the underlying query.", "nlToks": ["Returns", "the", "schema", "of", "the", "sorted", "table", ",", "which", "is", "the", "same", "as", "in", "the", "underlying", "query", "."], "path": "prerit2803/DBMSProject2/tree/master/simpledb/materialize/SortPlan.java", "idx": 317}
{"memberVariables": {"instance": "LogEntryRequest"}, "code": ["void", "function", "(", ")", "{", "System", ".", "out", ".", "println", "(", "\"setDuration\"", ")", ";", "long", "duration", "=", "100L", ";", "instance", ".", "setDuration", "(", "duration", ")", ";", "}"], "memberFunctions": {"testGetResponseStringCsv": [["void"]], "testGetTsSend": [["void"]], "testGetTsReceived": [["void"]], "testSetResponseString": [["void"]], "testGetResponseString": [["void"]], "testGetFaultFlag": [["void"]], "testSetFaultFlag": [["void"]], "testGetErrorFlag": [["void"]], "testSetThreadNumber": [["void"]], "testSetTsSend": [["void"]], "testSetTsReceived": [["void"]], "testGetDuration": [["void"]], "testGetThreadNumber": [["void"]]}, "className": "LogEntryRequestTest", "renamed": ["void", "function", "(", ")", "{", "System", ".", "out", ".", "println", "(", "\"srini_string\"", ")", ";", "long", "loc0", "=", "100L", ";", "instance", ".", "setDuration", "(", "loc0", ")", ";", "}"], "nl": "Test of setDuration method, of class LogEntryRequest.", "nlToks": ["Test", "of", "setDuration", "method", ",", "of", "class", "LogEntryRequest", "."], "path": "0xwindows/WS-Attacker/tree/master/plugins/Denial_of_Service/src/test/java/wsattacker/plugin/dos/dosExtension/logEntry/LogEntryRequestTest.java", "idx": 318}
{"memberVariables": {"s": "Scan", "joinfield": "String", "idx": "Index", "ts": "TableScan"}, "code": ["boolean", "function", "(", ")", "{", "while", "(", "true", ")", "{", "if", "(", "idx", ".", "next", "(", ")", ")", "{", "ts", ".", "moveToRid", "(", "idx", ".", "getDataRid", "(", ")", ")", ";", "return", "true", ";", "}", "if", "(", "!", "s", ".", "next", "(", ")", ")", "return", "false", ";", "resetIndex", "(", ")", ";", "}", "}"], "memberFunctions": {"getInt": [["int", "String fldname"]], "getVal": [["Constant", "String fldname"]], "resetIndex": [["void"]], "beforeFirst": [["void"]], "getString": [["String", "String fldname"]], "close": [["void"]], "hasField": [["boolean", "String fldname"]]}, "className": "IndexJoinScan", "renamed": ["boolean", "function", "(", ")", "{", "while", "(", "true", ")", "{", "if", "(", "idx", ".", "next", "(", ")", ")", "{", "ts", ".", "moveToRid", "(", "idx", ".", "getDataRid", "(", ")", ")", ";", "return", "true", ";", "}", "if", "(", "!", "s", ".", "next", "(", ")", ")", "return", "false", ";", "resetIndex", "(", ")", ";", "}", "}"], "nl": "Moves the scan to the next record. The method moves to the next index record, if possible. Otherwise, it moves to the next LHS record and the first index record. If there are no more LHS records, the method returns false.", "nlToks": ["Moves", "the", "scan", "to", "the", "next", "record", ".", "The", "method", "moves", "to", "the", "next", "index", "record", ",", "if", "possible", ".", "Otherwise", ",", "it", "moves", "to", "the", "next", "LHS", "record", "and", "the", "first", "index", "record", ".", "If", "there", "are", "no", "more", "LHS", "records", ",", "the", "method", "returns", "false", "."], "path": "prerit2803/DBMSProject2/tree/master/simpledb/index/query/IndexJoinScan.java", "idx": 321}
{"memberVariables": {"yStats=new StatsAccumulator()": "StatsAccumulator", "sumOfProductsOfDeltas=0.0": "double", "xStats=new StatsAccumulator()": "StatsAccumulator"}, "code": ["double", "function", "(", ")", "{", "checkState", "(", "count", "(", ")", "!=", "0", ")", ";", "return", "sumOfProductsOfDeltas", "/", "count", "(", ")", ";", "}"], "memberFunctions": {"add": [["void", "double x", "double y"]], "yStats": [["Stats"]], "addAll": [["void", "PairedStats values"]], "sampleCovariance": [["double"]], "ensurePositive": [["double", "double value"]], "ensureInUnitRange": [["double", "double value"]], "count": [["long"]], "pearsonsCorrelationCoefficient": [["double"]], "leastSquaresFit": [["LinearTransformation"]], "xStats": [["Stats"]], "snapshot": [["PairedStats"]]}, "className": "PairedStatsAccumulator", "renamed": ["double", "function", "(", ")", "{", "checkState", "(", "count", "(", ")", "!=", "0", ")", ";", "return", "sumOfProductsOfDeltas", "/", "count", "(", ")", ";", "}"], "nl": "Returns the population covariance of the values. The count must be non-zero. This is guaranteed to return zero if the dataset contains a single pair of finite values. It is not guaranteed to return zero when the dataset consists of the same pair of values multiple times, due to numerical errors. Non-finite values If the dataset contains any non-finite values ( {@link Double#POSITIVE_INFINITY}, {@link Double#NEGATIVE_INFINITY}, or  {@link Double#NaN}) then the result is  {@link Double#NaN}.", "nlToks": ["Returns", "the", "population", "covariance", "of", "the", "values", ".", "The", "count", "must", "be", "non-zero", ".", "This", "is", "guaranteed", "to", "return", "zero", "if", "the", "dataset", "contains", "a", "single", "pair", "of", "finite", "values", ".", "It", "is", "not", "guaranteed", "to", "return", "zero", "when", "the", "dataset", "consists", "of", "the", "same", "pair", "of", "values", "multiple", "times", ",", "due", "to", "numerical", "errors", ".", "Non-finite", "values", "If", "the", "dataset", "contains", "any", "non-finite", "values", "-LRB-", "-LCB-", "@link", "Double", "#POSITIVE_INFINITY", "-RCB-", ",", "-LCB-", "@link", "Double", "#NEGATIVE_INFINITY", "-RCB-", ",", "or", "-LCB-", "@link", "Double", "#NaN", "-RCB-", "-RRB-", "then", "the", "result", "is", "-LCB-", "@link", "Double", "#NaN", "-RCB-", "."], "path": "hazendaz/guava/tree/master/guava/src/com/google/common/math/PairedStatsAccumulator.java", "idx": 324}
{"memberVariables": {"EXAMPLE=\"$GPZDA,032915,07,08,2004,00,00*4D\"": "String", "zda": "ZDAParser", "empty": "ZDAParser"}, "code": ["void", "function", "(", ")", "{", "assertEquals", "(", "0", ",", "zda", ".", "getLocalZoneMinutes", "(", ")", ")", ";", "}"], "memberFunctions": {"testGetYear": [["void"]], "testGetDate": [["void"]], "testSetTimeAndLocalZone": [["void"]], "testConstructor": [["void"]], "testGetTime": [["void"]], "testToDate": [["void"]], "testSetLocalZoneMinutes": [["void"]], "testSetLocalZoneHours": [["void"]], "testSetTime": [["void"]], "testGetDay": [["void"]], "setUp": [["void"]], "testGetMonth": [["void"]], "testSetDate": [["void"]], "testGetLocalZoneHours": [["void"]]}, "className": "ZDATest", "renamed": ["void", "function", "(", ")", "{", "assertEquals", "(", "0", ",", "zda", ".", "getLocalZoneMinutes", "(", ")", ")", ";", "}"], "nl": "Test method for {@link net.sf.marineapi.nmea.parser.ZDAParser#getLocalZoneMinutes()}.", "nlToks": ["Test", "method", "for", "-LCB-", "@link", "net.sf.marineapi.nmea.parser.ZDAParser", "#getLocalZoneMinutes", "-LRB-", "-RRB-", "-RCB-", "."], "path": "pkoziol/marine-api/tree/master/src/test/java/net/sf/marineapi/nmea/parser/ZDATest.java", "idx": 326}
{"memberVariables": {"totalElapsedMinutes": "Long", "testResultLst": "List<TestResultDTO>", "startTime": "String", "endTime": "String", "batchId": "Long", "batchStatus": "String", "totalElapsedSeconds": "Long"}, "code": ["void", "function", "(", "String", "startTime", ")", "{", "this", ".", "startTime", "=", "startTime", ";", "}"], "memberFunctions": {"setBatchStatus": [["void", "String batchStatus"]], "getTotalElapsedSeconds": [["Long"]], "setBatchId": [["void", "Long batchId"]], "setTotalElapsedMinutes": [["void", "Long totalElapsedMinutes"]], "setTestResultLst": [["void", "List<TestResultDTO> testResultLst"]], "getEndTime": [["String"]], "getTotalElapsedMinutes": [["Long"]], "setEndTime": [["void", "String endTime"]], "getBatchId": [["Long"]], "setTotalElapsedSeconds": [["void", "Long totalElapsedSeconds"]], "toString": [["String"]], "getStartTime": [["String"]], "getTestResultLst": [["List<TestResultDTO>"]], "getBatchStatus": [["String"]]}, "className": "TestResultsDTO", "renamed": ["void", "function", "(", "String", "arg0", ")", "{", "this", ".", "startTime", "=", "arg0", ";", "}"], "nl": "Sets the start time.", "nlToks": ["Sets", "the", "start", "time", "."], "path": "pkesireddy/portico_fletcher/tree/master/FetcherTesterService/src/main/java/org/ithaka/cm/fetchertester/model/TestResultsDTO.java", "idx": 327}
{"memberVariables": {"length": "int", "type": "int", "info=new HashMap<String,FieldInfo>()": "Map<String,FieldInfo>"}, "code": ["boolean", "function", "(", "String", "fldname", ")", "{", "return", "fields", "(", ")", ".", "contains", "(", "fldname", ")", ";", "}"], "memberFunctions": {"add": [["void", "String fldname", "Schema sch"]], "addStringField": [["void", "String fldname", "int length"]], "addAll": [["void", "Schema sch"]], "addField": [["void", "String fldname", "int type", "int length"]], "addIntField": [["void", "String fldname"]], "length": [["int", "String fldname"]], "fields": [["Collection<String>"]], "type": [["int", "String fldname"]]}, "className": "Schema", "renamed": ["boolean", "function", "(", "String", "arg0", ")", "{", "return", "fields", "(", ")", ".", "contains", "(", "arg0", ")", ";", "}"], "nl": "Returns true if the specified field is in the schema", "nlToks": ["Returns", "true", "if", "the", "specified", "field", "is", "in", "the", "schema"], "path": "prerit2803/DBMSProject2/tree/master/simpledb/record/Schema.java", "idx": 328}
{"memberVariables": {"mFiles": "Set<InodeFile>", "sTtlIntervalMs=Configuration.getInt(PropertyKey.MASTER_TTL_CHECKER_INTERVAL_MS)": "long", "mTtlIntervalStartTimeMs": "long"}, "code": ["boolean", "function", "(", "Object", "o", ")", "{", "if", "(", "this", "==", "o", ")", "{", "return", "true", ";", "}", "if", "(", "!", "(", "o", "instanceof", "TtlBucket", ")", ")", "{", "return", "false", ";", "}", "TtlBucket", "that", "=", "(", "TtlBucket", ")", "o", ";", "return", "mTtlIntervalStartTimeMs", "==", "that", ".", "mTtlIntervalStartTimeMs", ";", "}"], "memberFunctions": {"removeFile": [["void", "InodeFile file"]], "getTtlIntervalMs": [["long"]], "hashCode": [["int"]], "compareTo": [["int", "TtlBucket ttlBucket"]], "getFiles": [["Set<InodeFile>"]], "getTtlIntervalStartTimeMs": [["long"]], "getTtlIntervalEndTimeMs": [["long"]], "addFile": [["void", "InodeFile file"]]}, "className": "TtlBucket", "renamed": ["boolean", "function", "(", "Object", "arg0", ")", "{", "if", "(", "this", "==", "arg0", ")", "{", "return", "true", ";", "}", "if", "(", "!", "(", "arg0", "instanceof", "TtlBucket", ")", ")", "{", "return", "false", ";", "}", "TtlBucket", "loc0", "=", "(", "TtlBucket", ")", "arg0", ";", "return", "mTtlIntervalStartTimeMs", "==", "loc0", ".", "mTtlIntervalStartTimeMs", ";", "}"], "nl": "Compares to a specific object.", "nlToks": ["Compares", "to", "a", "specific", "object", "."], "path": "poemlin/alluxio/tree/master/core/server/src/main/java/alluxio/master/file/meta/TtlBucket.java", "idx": 329}
{"memberVariables": {"mat": "DenseMatrix64F", "eig": "EigenDecomposition<DenseMatrix64F>"}, "code": ["int", "function", "(", ")", "{", "return", "eig", ".", "getNumberOfEigenvalues", "(", ")", ";", "}"], "memberFunctions": {"getEigenvalue": [["Complex64F", "int index"]], "getEigenVector": [["T", "int index"]], "getEVD": [["EigenDecomposition"]], "getIndexMax": [["int"]], "getIndexMin": [["int"]], "quality": [["double"]]}, "className": "SimpleEVD", "renamed": ["int", "function", "(", ")", "{", "return", "eig", ".", "getNumberOfEigenvalues", "(", ")", ";", "}"], "nl": "Returns the number of eigenvalues/eigenvectors.  This is the matrix's dimension.", "nlToks": ["Returns", "the", "number", "of", "eigenvalues/eigenvectors", ".", "This", "is", "the", "matrix", "'s", "dimension", "."], "path": "adamaulia/efficient-java-matrix-library/tree/master/src/org/ejml/simple/SimpleEVD.java", "idx": 330}
{"memberVariables": {"_SignCertificateResponse_QNAME=new QName(\"http://platformlayer.org/auth/v1.0\",\"signCertificateResponse\")": "QName", "_Access_QNAME=new QName(\"http://platformlayer.org/auth/v1.0\",\"access\")": "QName", "_CheckServiceAccessResponse_QNAME=new QName(\"http://platformlayer.org/auth/v1.0\",\"checkServiceAccessResponse\")": "QName", "_SignCertificateRequest_QNAME=new QName(\"http://platformlayer.org/auth/v1.0\",\"signCertificateRequest\")": "QName", "_CertificateChainInfo_QNAME=new QName(\"http://platformlayer.org/auth/v1.0\",\"certificateChainInfo\")": "QName", "_RegistrationRequest_QNAME=new QName(\"http://platformlayer.org/auth/v1.0\",\"registrationRequest\")": "QName", "_User_QNAME=new QName(\"http://platformlayer.org/auth/v1.0\",\"user\")": "QName", "_AuthenticateResponse_QNAME=new QName(\"http://platformlayer.org/auth/v1.0\",\"authenticateResponse\")": "QName", "_CheckServiceAccessRequest_QNAME=new QName(\"http://platformlayer.org/auth/v1.0\",\"checkServiceAccessRequest\")": "QName", "_ValidateTokenResponse_QNAME=new QName(\"http://platformlayer.org/auth/v1.0\",\"validateTokenResponse\")": "QName", "_AuthenticateRequest_QNAME=new QName(\"http://platformlayer.org/auth/v1.0\",\"authenticateRequest\")": "QName", "_Auth_QNAME=new QName(\"http://platformlayer.org/auth/v1.0\",\"auth\")": "QName", "_ValidateAccess_QNAME=new QName(\"http://platformlayer.org/auth/v1.0\",\"validateAccess\")": "QName", "_RegistrationResponse_QNAME=new QName(\"http://platformlayer.org/auth/v1.0\",\"registrationResponse\")": "QName", "_Roles_QNAME=new QName(\"http://platformlayer.org/auth/v1.0\",\"roles\")": "QName"}, "code": ["CheckServiceAccessRequest", "function", "(", ")", "{", "return", "new", "CheckServiceAccessRequest", "(", ")", ";", "}"], "memberFunctions": {"createValidateTokenResponse": [["ValidateTokenResponse"], ["JAXBElement<ValidateTokenResponse>", "ValidateTokenResponse value"]], "createCertificateChainInfo": [["CertificateChainInfo"], ["JAXBElement<CertificateChainInfo>", "CertificateChainInfo value"]], "createRoleList": [["RoleList"]], "createRole": [["Role"]], "createToken": [["Token"]], "createCheckServiceAccessResponse": [["CheckServiceAccessResponse"], ["JAXBElement<CheckServiceAccessResponse>", "CheckServiceAccessResponse value"]], "createPasswordCredentials": [["PasswordCredentials"]], "createAuthenticateResponse": [["AuthenticateResponse"], ["JAXBElement<AuthenticateResponse>", "AuthenticateResponse value"]], "createValidateAccess": [["ValidateAccess"], ["JAXBElement<ValidateAccess>", "ValidateAccess value"]], "createAuthenticateRequest": [["AuthenticateRequest"], ["JAXBElement<AuthenticateRequest>", "AuthenticateRequest value"]], "createAuth": [["Auth"], ["JAXBElement<Auth>", "Auth value"]], "createCertificateInfo": [["CertificateInfo"]], "createUserValidation": [["UserValidation"]], "createCertificateCredentials": [["CertificateCredentials"]], "createRegistrationResponse": [["RegistrationResponse"], ["JAXBElement<RegistrationResponse>", "RegistrationResponse value"]], "createUser": [["User"], ["JAXBElement<User>", "User value"]], "createRoles": [["JAXBElement<RoleList>", "RoleList value"]], "createRegistrationRequest": [["RegistrationRequest"], ["JAXBElement<RegistrationRequest>", "RegistrationRequest value"]], "createAccess": [["Access"], ["JAXBElement<Access>", "Access value"]], "createProjectValidation": [["ProjectValidation"]], "createSignCertificateResponse": [["SignCertificateResponse"], ["JAXBElement<SignCertificateResponse>", "SignCertificateResponse value"]], "createSignCertificateRequest": [["SignCertificateRequest"], ["JAXBElement<SignCertificateRequest>", "SignCertificateRequest value"]]}, "className": "ObjectFactory", "renamed": ["CheckServiceAccessRequest", "function", "(", ")", "{", "return", "new", "CheckServiceAccessRequest", "(", ")", ";", "}"], "nl": "Create an instance of  {@link CheckServiceAccessRequest }", "nlToks": ["Create", "an", "instance", "of", "-LCB-", "@link", "CheckServiceAccessRequest", "-RCB-"], "path": "platformlayer/platformlayer/tree/master/auth/client/src/generated/xjc/org/platformlayer/auth/v1/ObjectFactory.java", "idx": 331}
{"memberVariables": {"feedId": "String", "destFileName": "String", "testId": "String"}, "code": ["void", "function", "(", "String", "feedId", ")", "{", "this", ".", "feedId", "=", "feedId", ";", "}"], "memberFunctions": {"setDestFileName": [["void", "String destFileName"]], "toString": [["String"]], "getFeedId": [["String"]], "setTestId": [["void", "String testId"]], "getTestId": [["String"]], "getDestFileName": [["String"]]}, "className": "DestinationFileExistsDTO", "renamed": ["void", "function", "(", "String", "arg0", ")", "{", "this", ".", "feedId", "=", "arg0", ";", "}"], "nl": "Sets the feed id.", "nlToks": ["Sets", "the", "feed", "id", "."], "path": "pkesireddy/portico_fletcher/tree/master/FetcherTesterService/src/main/java/org/ithaka/cm/fetchertester/model/DestinationFileExistsDTO.java", "idx": 334}
{"memberVariables": {"logger=Logger.getLogger(AbstractExecutionThreadService.class.getName())": "Logger", "delegate=new AbstractService(){\n  @Override protected final void doStart(){\n    Executor executor=MoreExecutors.renamingDecorator(executor(),new Supplier<String>(){\n      @Override public String get(){\n        return serviceName();\n      }\n    }\n);\n    executor.execute(new Runnable(){\n      @Override public void run(){\n        try {\n          startUp();\n          notifyStarted();\n          if (isRunning()) {\n            try {\n              AbstractExecutionThreadService.this.run();\n            }\n catch (            Throwable t) {\n              try {\n                shutDown();\n              }\n catch (              Exception ignored) {\n                logger.log(Level.WARNING,\"Error while attempting to shut down the service after failure.\",ignored);\n              }\n              notifyFailed(t);\n              return;\n            }\n          }\n          shutDown();\n          notifyStopped();\n        }\n catch (        Throwable t) {\n          notifyFailed(t);\n        }\n      }\n    }\n);\n  }\n  @Override protected void doStop(){\n    triggerShutdown();\n  }\n  @Override public String toString(){\n    return AbstractExecutionThreadService.this.toString();\n  }\n}\n": "Service"}, "code": ["void", "function", "(", ")", "{", "}"], "memberFunctions": {"doStop": [["void"]], "run": [["void"]], "failureCause": [["Throwable"]], "serviceName": [["String"]], "startAsync": [["Service"]], "shutDown": [["void"]], "isRunning": [["boolean"]], "startUp": [["void"]], "executor": [["Executor"]], "doStart": [["void"]], "awaitTerminated": [["void"], ["void", "long timeout", "TimeUnit unit"]], "stopAsync": [["Service"]], "toString": [["String"], ["String"]], "state": [["State"]], "awaitRunning": [["void"], ["void", "long timeout", "TimeUnit unit"]], "addListener": [["void", "Listener listener", "Executor executor"]]}, "className": "AbstractExecutionThreadService", "renamed": ["void", "function", "(", ")", "{", "}"], "nl": "Invoked to request the service to stop. By default this method does nothing.", "nlToks": ["Invoked", "to", "request", "the", "service", "to", "stop", ".", "By", "default", "this", "method", "does", "nothing", "."], "path": "hazendaz/guava/tree/master/guava/src/com/google/common/util/concurrent/AbstractExecutionThreadService.java", "idx": 335}
{"memberVariables": {"gammasV[]": "double", "min": "int", "gammasU[]": "double", "b[]": "double", "u[]": "double", "UBV": "DenseMatrix64F", "m": "int", "n": "int"}, "code": ["double", "[", "]", "function", "(", ")", "{", "return", "gammasU", ";", "}"], "memberFunctions": {"init": [["void", "DenseMatrix64F A"]], "handleV": [["DenseMatrix64F", "DenseMatrix64F V", "boolean transpose", "boolean compact", "int m", "int n", "int min"]], "handleU": [["DenseMatrix64F", "DenseMatrix64F U", "boolean transpose", "boolean compact", "int m", "int n", "int min"]], "decompose": [["boolean", "DenseMatrix64F A"]], "getDiagonal": [["void", "double[] diag", "double[] off"]], "_decompose": [["boolean"]], "inputModified": [["boolean"]], "getU": [["DenseMatrix64F", "DenseMatrix64F U", "boolean transpose", "boolean compact"]], "getV": [["DenseMatrix64F", "DenseMatrix64F V", "boolean transpose", "boolean compact"]], "handleB": [["DenseMatrix64F", "DenseMatrix64F B", "boolean compact", "int m", "int n", "int min"]], "computeV": [["void", "int k"]], "computeU": [["void", "int k"]], "getUBV": [["DenseMatrix64F"]], "getB": [["DenseMatrix64F", "DenseMatrix64F B", "boolean compact"]], "getGammasV": [["double[]"]]}, "className": "BidiagonalDecompositionRow_D64", "renamed": ["double", "[", "]", "function", "(", ")", "{", "return", "gammasU", ";", "}"], "nl": "Returns gammas from the householder operations for the U matrix.", "nlToks": ["Returns", "gammas", "from", "the", "householder", "operations", "for", "the", "U", "matrix", "."], "path": "adamaulia/efficient-java-matrix-library/tree/master/src/org/ejml/alg/dense/decomposition/bidiagonal/BidiagonalDecompositionRow_D64.java", "idx": 336}
{"memberVariables": {}, "code": ["Bounds", "function", "(", "Node", "node", ")", "{", "return", "node", ".", "getBoundsInParent", "(", ")", ";", "}"], "memberFunctions": {"translateBounds": [["Bounds", "Bounds bounds", "Point2D offset"]], "nodeBoundsInScene": [["Bounds", "Node node"]], "areBoundsVisible": [["boolean", "Bounds bounds"]], "makeSceneBounds": [["Bounds", "Scene scene"]], "bounds": [["Bounds", "double minX", "double minY", "double width", "double height"], ["Bounds", "Point2D point"], ["Bounds", "Dimension2D dimension"], ["Bounds", "Rectangle2D region"], ["Bounds", "Scene scene"], ["Bounds", "Window window"]], "nodeBoundsInLocal": [["Bounds", "Node node"]], "limitToVisibleBounds": [["Bounds", "Bounds boundsInScene", "Scene scene"]], "intersectBounds": [["Bounds", "Bounds a", "Bounds b"]], "byOffset": [["Point2D", "double x", "double y"]], "nodeBounds": [["Bounds", "Node node"]], "boundsOnScreen": [["Bounds", "Node node"], ["Bounds", "Bounds boundsInScene", "Scene scene"], ["Bounds", "Bounds boundsInWindow", "Window window"], ["Bounds", "Bounds boundsOnScreen", "Rectangle2D screenRegion"]]}, "className": "BoundsQueryUtils", "renamed": ["Bounds", "function", "(", "Node", "arg0", ")", "{", "return", "arg0", ".", "getBoundsInParent", "(", ")", ";", "}"], "nl": "Retrieve the physical transformed bounds (geom + effect + clip + transform) of a Node.", "nlToks": ["Retrieve", "the", "physical", "transformed", "bounds", "-LRB-", "geom", "+", "effect", "+", "clip", "+", "transform", "-RRB-", "of", "a", "Node", "."], "path": "hastebrot/TestFX/tree/master/subprojects/testfx-core/src/main/java/org/testfx/util/BoundsQueryUtils.java", "idx": 337}
{"memberVariables": {"mapType": "MapType"}, "code": ["void", "function", "(", "MapType", "value", ")", "{", "this", ".", "mapType", "=", "value", ";", "}"], "memberFunctions": {"getMapType": [["MapType"]]}, "className": "InputData", "renamed": ["void", "function", "(", "MapType", "arg0", ")", "{", "this", ".", "mapType", "=", "arg0", ";", "}"], "nl": "Sets the value of the mapType property.", "nlToks": ["Sets", "the", "value", "of", "the", "mapType", "property", "."], "path": "harsha1979/carbon-identity/tree/master/components/workflow-mgt/org.wso2.carbon.identity.workflow.mgt/src/main/java/org/wso2/carbon/identity/workflow/mgt/bean/metadata/InputData.java", "idx": 338}
{"memberVariables": {"MAX_NODE_NAME_LEN=50": "int"}, "code": ["int", "function", "(", "int", "value", ",", "String", "name", ")", "{", "if", "(", "value", "<=", "0", ")", "{", "throw", "new", "IllegalArgumentException", "(", "XLog", ".", "format", "(", "\"parameter [{0}] = [{1}] must be greater than zero\"", ",", "name", ",", "value", ")", ")", ";", "}", "return", "value", ";", "}"], "memberFunctions": {"checkInteger": [["int", "String val", "String name"]], "validateActionName": [["String", "String actionName"]], "notNull": [["T", "T obj", "String name"]], "checkUTC": [["Date", "String date", "String name"]], "checkGEZero": [["int", "int value", "String name"]], "isMember": [["boolean", "String item", "String[] members", "String name"]], "notEmpty": [["String", "String str", "String name"]], "notEmptyElements": [["List<String>", "List<String> list", "String name"]], "checkTimeZone": [["TimeZone", "String tzStr", "String name"]], "notNullElements": [["List<T>", "List<T> list", "String name"]], "isValidIdentifier": [["boolean", "String token"]]}, "className": "ParamChecker", "renamed": ["int", "function", "(", "int", "arg0", ",", "String", "arg1", ")", "{", "if", "(", "arg0", "<=", "0", ")", "{", "throw", "new", "IllegalArgumentException", "(", "XLog", ".", "format", "(", "\"srini_string\"", ",", "arg1", ",", "arg0", ")", ")", ";", "}", "return", "arg0", ";", "}"], "nl": "Check whether the value is greater than or equals 0.", "nlToks": ["Check", "whether", "the", "value", "is", "greater", "than", "or", "equals", "0", "."], "path": "pingpangkuangmo/oozie/tree/master/core/src/main/java/org/apache/oozie/util/ParamChecker.java", "idx": 339}
{"memberVariables": {"mThrown=ExpectedException.none()": "ExpectedException"}, "code": ["void", "function", "(", ")", "{", "String", "notExistClass", "=", "\"alluxio.test.custom.provider\"", ";", "mThrown", ".", "expect", "(", "RuntimeException", ".", "class", ")", ";", "mThrown", ".", "expectMessage", "(", "notExistClass", "+", "\" not found\"", ")", ";", "new", "CustomAuthenticationProvider", "(", "notExistClass", ")", ";", "}"], "memberFunctions": {"authenticate": [["void", "String user", "String password"]], "mockCustomProvider": [["void"]], "classNotProvider": [["void"]]}, "className": "CustomAuthenticationProviderTest", "renamed": ["void", "function", "(", ")", "{", "String", "loc0", "=", "\"srini_string\"", ";", "mThrown", ".", "expect", "(", "RuntimeException", ".", "class", ")", ";", "mThrown", ".", "expectMessage", "(", "loc0", "+", "\"srini_string\"", ")", ";", "new", "CustomAuthenticationProvider", "(", "loc0", ")", ";", "}"], "nl": "Tests the  {@link CustomAuthenticationProvider#CustomAuthenticationProvider(String)}constructor to throw an exception when the class cannot be found.", "nlToks": ["Tests", "the", "-LCB-", "@link", "CustomAuthenticationProvider", "#CustomAuthenticationProvider", "-LRB-", "String", "-RRB-", "-RCB-", "constructor", "to", "throw", "an", "exception", "when", "the", "class", "can", "not", "be", "found", "."], "path": "poemlin/alluxio/tree/master/core/common/src/test/java/alluxio/security/authentication/CustomAuthenticationProviderTest.java", "idx": 340}
{"memberVariables": {"stormConf=new HashMap<>()": "Map<String,Object>", "applicationContextMock": "ApplicationContext", "tupleMock": "Tuple", "outputCollectorMock": "OutputCollector", "outputFieldsDeclarerMock": "OutputFieldsDeclarer", "outputFieldsCaptor": "ArgumentCaptor<Fields>", "topologyContextMock": "TopologyContext"}, "code": ["void", "function", "(", ")", "{", "SpringBolt", "subject", "=", "new", "SpringBolt", "(", "TestBean", ".", "class", ",", "\"nullObject()\"", ",", "\"y\"", ")", ";", "subject", ".", "setScatterOutput", "(", "true", ")", ";", "run", "(", "subject", ")", ";", "verify", "(", "outputCollectorMock", ")", ".", "ack", "(", "tupleMock", ")", ";", "verifyNoMoreInteractions", "(", "outputCollectorMock", ")", ";", "}"], "memberFunctions": {"executionException": [["void"]], "init": [["void"]], "prototypeIntegrationRun": [["void"]], "sideOperation": [["void"]], "cleanup": [["void"]], "run": [["void", "SpringBolt subject"]], "pipe": [["void"]], "bindingException": [["void"]], "frameworkError": [["void"]], "multiplexPassThroughWithScatter": [["void"]], "passThroughOverlap": [["void"]]}, "className": "SpringBoltTest", "renamed": ["void", "function", "(", ")", "{", "SpringBolt", "loc0", "=", "new", "SpringBolt", "(", "TestBean", ".", "class", ",", "\"srini_string\"", ",", "\"srini_string\"", ")", ";", "loc0", ".", "setScatterOutput", "(", "true", ")", ";", "run", "(", "loc0", ")", ";", "verify", "(", "outputCollectorMock", ")", ".", "ack", "(", "tupleMock", ")", ";", "verifyNoMoreInteractions", "(", "outputCollectorMock", ")", ";", "}"], "nl": "Tests a null return.", "nlToks": ["Tests", "a", "null", "return", "."], "path": "politie/breeze/tree/master/src/test/java/eu/icolumbo/breeze/SpringBoltTest.java", "idx": 341}
{"memberVariables": {"URL_FORM_PARAMETER_OTHER_SAFE_CHARS=\"-_.*\"": "String", "URL_FORM_PARAMETER_ESCAPER=new PercentEscaper(URL_FORM_PARAMETER_OTHER_SAFE_CHARS,true)": "Escaper", "URL_FRAGMENT_ESCAPER=new PercentEscaper(URL_PATH_OTHER_SAFE_CHARS_LACKING_PLUS + \"+/?\",false)": "Escaper", "URL_PATH_SEGMENT_ESCAPER=new PercentEscaper(URL_PATH_OTHER_SAFE_CHARS_LACKING_PLUS + \"+\",false)": "Escaper", "URL_PATH_OTHER_SAFE_CHARS_LACKING_PLUS=\"-._~\" + \"!$'()*,;&=\" + \"@:\"": "String"}, "code": ["Escaper", "function", "(", ")", "{", "return", "URL_PATH_SEGMENT_ESCAPER", ";", "}"], "memberFunctions": {"urlFragmentEscaper": [["Escaper"]], "urlFormParameterEscaper": [["Escaper"]]}, "className": "UrlEscapers", "renamed": ["Escaper", "function", "(", ")", "{", "return", "URL_PATH_SEGMENT_ESCAPER", ";", "}"], "nl": "Returns an  {@link Escaper} instance that escapes strings so they can be safely included inURL path segments. The returned escaper escapes all non-ASCII characters, even though many of these are accepted in modern URLs. (If the escaper were to leave these characters unescaped, they would be escaped by the consumer at parse time, anyway.) Additionally, the escaper escapes the slash character (\"/\"). While slashes are acceptable in URL paths, they are considered by the specification to be separators between \"path segments.\" This implies that, if you wish for your path to contain slashes, you must escape each segment separately and then join them. When escaping a String, the following rules apply:  The alphanumeric characters \"a\" through \"z\", \"A\" through \"Z\" and \"0\" through \"9\" remain the same. The unreserved characters \".\", \"-\", \"~\", and \"_\" remain the same. The general delimiters \"@\" and \":\" remain the same. The subdelimiters \"!\", \"$\", \"&amp;\", \"'\", \"(\", \")\", \"\", \"+\", \",\", \";\", and \"=\" remain the same. The space character \" \" is converted into %20. All other characters are converted into one or more bytes using UTF-8 encoding and each byte is then represented by the 3-character string \"%XY\", where \"XY\" is the two-digit, uppercase, hexadecimal representation of the byte value.  Note: Unlike other escapers, URL escapers produce uppercase hexadecimal sequences.", "nlToks": ["Returns", "an", "-LCB-", "@link", "Escaper", "-RCB-", "instance", "that", "escapes", "strings", "so", "they", "can", "be", "safely", "included", "inURL", "path", "segments", ".", "The", "returned", "escaper", "escapes", "all", "non-ASCII", "characters", ",", "even", "though", "many", "of", "these", "are", "accepted", "in", "modern", "URLs", ".", "-LRB-", "If", "the", "escaper", "were", "to", "leave", "these", "characters", "unescaped", ",", "they", "would", "be", "escaped", "by", "the", "consumer", "at", "parse", "time", ",", "anyway", ".", "-RRB-", "Additionally", ",", "the", "escaper", "escapes", "the", "slash", "character", "-LRB-", "''", "/", "''", "-RRB-", ".", "While", "slashes", "are", "acceptable", "in", "URL", "paths", ",", "they", "are", "considered", "by", "the", "specification", "to", "be", "separators", "between", "``", "path", "segments", ".", "''", "This", "implies", "that", ",", "if", "you", "wish", "for", "your", "path", "to", "contain", "slashes", ",", "you", "must", "escape", "each", "segment", "separately", "and", "then", "join", "them", ".", "When", "escaping", "a", "String", ",", "the", "following", "rules", "apply", ":", "The", "alphanumeric", "characters", "``", "a", "''", "through", "``", "z", "''", ",", "``", "A", "''", "through", "``", "Z", "''", "and", "``", "0", "''", "through", "``", "9", "''", "remain", "the", "same", ".", "The", "unreserved", "characters", "''", ".", "''", ",", "''", "-", "''", ",", "''", "~", "''", ",", "and", "''", "_", "''", "remain", "the", "same", ".", "The", "general", "delimiters", "''", "@", "''", "and", "''", ":", "''", "remain", "the", "same", ".", "The", "subdelimiters", "''", "!", "''", ",", "``", "$", "''", ",", "''", "&", "''", ",", "''", "'", "''", ",", "''", "-LRB-", "''", ",", "''", "-RRB-", "''", ",", "''", "''", ",", "''", "+", "''", ",", "''", ",", "''", ",", "''", ";", "''", ",", "and", "''", "=", "''", "remain", "the", "same", ".", "The", "space", "character", "''", "''", "is", "converted", "into", "%", "20", ".", "All", "other", "characters", "are", "converted", "into", "one", "or", "more", "bytes", "using", "UTF-8", "encoding", "and", "each", "byte", "is", "then", "represented", "by", "the", "3-character", "string", "''", "%", "XY", "''", ",", "where", "``", "XY", "''", "is", "the", "two-digit", ",", "uppercase", ",", "hexadecimal", "representation", "of", "the", "byte", "value", ".", "Note", ":", "Unlike", "other", "escapers", ",", "URL", "escapers", "produce", "uppercase", "hexadecimal", "sequences", "."], "path": "hazendaz/guava/tree/master/guava/src/com/google/common/net/UrlEscapers.java", "idx": 342}
{"memberVariables": {"expectedDataUnitId": "Long", "seqNo": "Long", "dataSetId": "Long", "dataUnitId": "Long", "expectedValue": "String", "actualValue": "String", "expectedDataSetId": "Long", "errorCode": "String", "testId": "Long", "failedAttributeName": "String", "srcFileName": "String", "errorMsg": "String"}, "code": ["Long", "function", "(", ")", "{", "return", "seqNo", ";", "}"], "memberFunctions": {"setExpectedValue": [["void", "String expectedValue"]], "getExpectedValue": [["String"]], "getExpectedDataSetId": [["Long"]], "setExpectedDataSetId": [["void", "Long expectedDataSetId"]], "setActualValue": [["void", "String actualValue"]], "getDataSetId": [["Long"]], "setSrcFileName": [["void", "String srcFileName"]], "getExpectedDataUnitId": [["Long"]], "setExpectedDataUnitId": [["void", "Long expectedDataUnitId"]], "getSrcFileName": [["String"]], "getFailedAttributeName": [["String"]], "setTestId": [["void", "Long testId"]], "setFailedAttributeName": [["void", "String failedAttributeName"]], "getTestId": [["Long"]], "setErrorCode": [["void", "String errorCode"]], "getActualValue": [["String"]], "getDataUnitId": [["Long"]], "setSeqNo": [["void", "Long seqNo"]], "setErrorMsg": [["void", "String errorMsg"]], "getErrorCode": [["String"]], "setDataUnitId": [["void", "Long dataUnitId"]], "setDataSetId": [["void", "Long dataSetId"]], "toString": [["String"]], "getErrorMsg": [["String"]]}, "className": "TestResultDetailsDTO", "renamed": ["Long", "function", "(", ")", "{", "return", "seqNo", ";", "}"], "nl": "Gets the seq no.", "nlToks": ["Gets", "the", "seq", "no", "."], "path": "pkesireddy/portico_fletcher/tree/master/FetcherTesterService/src/main/java/org/ithaka/cm/fetchertester/model/TestResultDetailsDTO.java", "idx": 344}
{"memberVariables": {"mWriter": "ByteBuffer", "mBuffer": "byte[]"}, "code": ["BufferedByteWriter", "function", "(", "byte", "value", ")", "{", "ensureCapacity", "(", "3", ")", ";", "mWriter", ".", "putShort", "(", "(", "short", ")", "0", ")", ";", "mWriter", ".", "put", "(", "value", ")", ";", "return", "this", ";", "}"], "memberFunctions": {"putLen8": [["BufferedByteWriter", "byte[] value"]], "put16": [["BufferedByteWriter", "byte value"], ["BufferedByteWriter", "short value"]], "putLen16": [["BufferedByteWriter", "byte[] value"]], "toByteArray": [["byte[]"]], "ensureCapacity": [["void", "int required"]], "put64": [["BufferedByteWriter", "byte value"], ["BufferedByteWriter", "short value"], ["BufferedByteWriter", "int value"], ["BufferedByteWriter", "long value"]], "put": [["BufferedByteWriter", "byte[] value"], ["BufferedByteWriter", "byte value"]], "put32": [["BufferedByteWriter", "byte value"], ["BufferedByteWriter", "short value"], ["BufferedByteWriter", "int value"]]}, "className": "BufferedByteWriter", "renamed": ["BufferedByteWriter", "function", "(", "byte", "arg0", ")", "{", "ensureCapacity", "(", "3", ")", ";", "mWriter", ".", "putShort", "(", "(", "short", ")", "0", ")", ";", "mWriter", ".", "put", "(", "arg0", ")", ";", "return", "this", ";", "}"], "nl": "Write 24-bit of the given value in big-endian order to the buffer", "nlToks": ["Write", "24-bit", "of", "the", "given", "value", "in", "big-endian", "order", "to", "the", "buffer"], "path": "prathyks/strongswan/tree/master/src/frontends/android/app/src/main/java/org/strongswan/android/utils/BufferedByteWriter.java", "idx": 345}
{"memberVariables": {"LOG=LogFactory.getLog(JdbcUtil.class)": "Log", "activeConnectionCount=new HashMap<String,Integer>()": "Map<String,Integer>", "ds": "DataSource"}, "code": ["void", "function", "(", "Class", "clazz", ",", "Connection", "con", ",", "PreparedStatement", "ps", ",", "ResultSet", "rs", ")", "{", "closeAll", "(", "clazz", ".", "getName", "(", ")", ",", "con", ",", "rs", ")", ";", "}"], "memberFunctions": {"getDataSource": [["DataSource"]], "readLongFromResultSet": [["Long", "ResultSet rs", "String column"]], "logMessage": [["void", "String message"]], "disableForeignKeyCheck": [["void", "Connection con"]], "initDataSource": [["DataSource"]], "readIntegerFromResultSet": [["Integer", "ResultSet rs", "String column"]], "enableForeignKeyCheck": [["void", "Connection con"]], "setDataSource": [["void", "DataSource value"]], "getDbConnection": [["Connection", "Class clazz"], ["Connection", "String requester"]], "readDoubleFromResultSet": [["Double", "ResultSet rs", "String column"]], "closeConnection": [["void", "Class clazz", "Connection con"], ["void", "String requester", "Connection con"]]}, "className": "JdbcUtil", "renamed": ["void", "function", "(", "Class", "arg0", ",", "Connection", "arg1", ",", "PreparedStatement", "arg2", ",", "ResultSet", "arg3", ")", "{", "closeAll", "(", "arg0", ".", "getName", "(", ")", ",", "arg1", ",", "arg3", ")", ";", "}"], "nl": "Frees Database Connection.", "nlToks": ["Frees", "Database", "Connection", "."], "path": "adamabeshouse/cbioportal/tree/master/core/src/main/java/org/mskcc/cbio/portal/dao/JdbcUtil.java", "idx": 346}
{"memberVariables": {"edgeOffset=0": "int", "figure=null": "FigNode", "UPLINK_FACTOR=5": "float", "uplinks=new ArrayList<ClassdiagramNode>()": "List<ClassdiagramNode>", "rank=NORANK": "int", "downlinks=new ArrayList<ClassdiagramNode>()": "List<ClassdiagramNode>", "NORANK=-1": "int", "column=NOCOLUMN": "int", "placementHint=-1": "int", "weight=NOWEIGHT": "float", "NOCOLUMN=-1": "int", "NOWEIGHT=-1": "int"}, "code": ["void", "function", "(", "ClassdiagramNode", "newUplink", ")", "{", "uplinks", ".", "add", "(", "newUplink", ")", ";", "}"], "memberFunctions": {"getUplinks": [["Vector<ClassdiagramNode>"]], "getLocation": [["Point"]], "isComment": [["boolean"]], "getUpNodes": [["List<ClassdiagramNode>"]], "getWeight": [["float"]], "getFigure": [["FigNode"]], "getDownlinks": [["Vector<ClassdiagramNode>"]], "compareTo": [["int", "Object arg0"]], "setColumn": [["void", "int newColumn"]], "addDownlink": [["void", "ClassdiagramNode newDownlink"]], "setLocation": [["void", "Point newLocation"]], "setEdgeOffset": [["void", "int newOffset"]], "isStandalone": [["boolean"]], "getColumn": [["int"]], "getSubtreeWeight": [["float"]], "calculateWeight": [["float"]], "setRank": [["void", "int newRank"]], "addRank": [["void", "int n"]], "getTypeOrderNumer": [["int"]], "getEdgeOffset": [["int"]], "getRank": [["int"]], "setWeight": [["void", "float w"]], "isPackage": [["boolean"]], "getLevel": [["int"]], "getSize": [["Dimension"]], "setPlacementHint": [["void", "int hint"]], "getPlacementHint": [["int"]], "setFigure": [["void", "FigNode newFigure"]], "getDownNodes": [["List<ClassdiagramNode>"]]}, "className": "ClassdiagramNode", "renamed": ["void", "function", "(", "ClassdiagramNode", "arg0", ")", "{", "uplinks", ".", "add", "(", "arg0", ")", ";", "}"], "nl": "Add an uplink to this node.", "nlToks": ["Add", "an", "uplink", "to", "this", "node", "."], "path": "pichiliani/CoArgoUML/tree/master/v0.24/fonte/src/argouml-app/src/org/argouml/uml/diagram/static_structure/layout/ClassdiagramNode.java", "idx": 347}
{"memberVariables": {"mTestTier": "StorageTier", "TEST_TIER_LEVEL=0": "int", "mThrown=ExpectedException.none()": "ExpectedException", "mTestFolder=new TemporaryFolder()": "TemporaryFolder", "mTestTierView": "StorageTierView"}, "code": ["void", "function", "(", ")", "{", "Assert", ".", "assertEquals", "(", "TieredBlockStoreTestUtils", ".", "TIER_PATH", "[", "TEST_TIER_LEVEL", "]", ".", "length", ",", "mTestTierView", ".", "getDirViews", "(", ")", ".", "size", "(", ")", ")", ";", "}"], "memberFunctions": {"getDirView": [["void"]], "before": [["void"]], "getDirViewBadIndex": [["void"]], "getTierViewAlias": [["void"]], "getTierViewOrdinal": [["void"]]}, "className": "StorageTierViewTest", "renamed": ["void", "function", "(", ")", "{", "Assert", ".", "assertEquals", "(", "TieredBlockStoreTestUtils", ".", "TIER_PATH", "[", "TEST_TIER_LEVEL", "]", ".", "length", ",", "mTestTierView", ".", "getDirViews", "(", ")", ".", "size", "(", ")", ")", ";", "}"], "nl": "Tests the  {@link StorageTierView#getDirViews()} method.", "nlToks": ["Tests", "the", "-LCB-", "@link", "StorageTierView", "#getDirViews", "-LRB-", "-RRB-", "-RCB-", "method", "."], "path": "poemlin/alluxio/tree/master/core/server/src/test/java/alluxio/worker/block/meta/StorageTierViewTest.java", "idx": 350}
{"memberVariables": {"item": "Integer", "sumIutilP=0": "int", "sumIutilN=0": "int", "periodsElements": "List<Element>[]", "periodsSumIutilRutil[]": "int"}, "code": ["boolean", "function", "(", "int", "period", ")", "{", "return", "periodsElements", "[", "period", "]", "!=", "null", "&&", "periodsElements", "[", "period", "]", ".", "size", "(", ")", "!=", "0", ";", "}"], "memberFunctions": {"getElementsOfPeriod": [["List<Element>", "int period"]], "getSumIRUtilsInPeriod": [["double", "int period"]], "addElement": [["void", "Element element", "int period"]], "construct": [["void", "int period", "List<Element> pElements", "List<Element> pXElements", "List<Element> pYElements"], ["void", "int period", "List<Element> pXElements", "List<Element> pYElements"]], "findElementWithTID": [["Element", "List<Element> list", "int tid"]]}, "className": "UtilityList", "renamed": ["boolean", "function", "(", "int", "arg0", ")", "{", "return", "periodsElements", "[", "arg0", "]", "!=", "null", "&&", "periodsElements", "[", "arg0", "]", ".", "size", "(", ")", "!=", "0", ";", "}"], "nl": "Check if this itemset appears in a given period", "nlToks": ["Check", "if", "this", "itemset", "appears", "in", "a", "given", "period"], "path": "prateek96/Data_Mining_Assignments/tree/master/Assignment_1/Assignment-1.7/FOSHU Modify/src/foshu/UtilityList.java", "idx": 351}
{"memberVariables": {"mirror": "boolean", "mergeAccounts": "boolean", "notifyOnError": "boolean", "serialVersionUID=1L": "long", "url": "String", "token": "String", "frequency": "String", "results=new ConcurrentHashMap<String,FederationPullStatus>()": "Map<String,FederationPullStatus>", "folder": "String", "name": "String", "sendStatus": "boolean", "lastPull": "Date", "bare": "boolean", "exclusions=new ArrayList<String>()": "List<String>", "nextPull": "Date", "inclusions=new ArrayList<String>()": "List<String>", "status": "FederationPullStatus"}, "code": ["boolean", "function", "(", ")", "{", "return", "!", "url", ".", "toLowerCase", "(", ")", ".", "startsWith", "(", "\"http://\"", ")", "&&", "!", "url", ".", "toLowerCase", "(", ")", ".", "startsWith", "(", "\"https://\"", ")", ";", "}"], "memberFunctions": {"getStatusList": [["List<RepositoryStatus>"]], "updateStatus": [["void", "RepositoryModel repository", "FederationPullStatus status"]], "getLowestStatus": [["FederationPullStatus"]], "toString": [["String"]], "compareTo": [["int", "FederationModel o"], ["int", "RepositoryStatus o"]], "isIncluded": [["boolean", "RepositoryModel repository"]]}, "className": "FederationModel", "renamed": ["boolean", "function", "(", ")", "{", "return", "!", "url", ".", "toLowerCase", "(", ")", ".", "startsWith", "(", "\"srini_string\"", ")", "&&", "!", "url", ".", "toLowerCase", "(", ")", ".", "startsWith", "(", "\"srini_string\"", ")", ";", "}"], "nl": "Returns true if this registration represents the result data sent by a pulling Gitblit instance.", "nlToks": ["Returns", "true", "if", "this", "registration", "represents", "the", "result", "data", "sent", "by", "a", "pulling", "Gitblit", "instance", "."], "path": "pombreda/gitblit/tree/master/src/main/java/com/gitblit/models/FederationModel.java", "idx": 352}
{"memberVariables": {"chunks": "List<ScriptChunk>"}, "code": ["Script", "function", "(", "ECKey", "key", ")", "{", "return", "new", "ScriptBuilder", "(", ")", ".", "data", "(", "key", ".", "getPubKey", "(", ")", ")", ".", "op", "(", "OP_CHECKSIG", ")", ".", "build", "(", ")", ";", "}"], "memberFunctions": {"op": [["ScriptBuilder", "int opcode"], ["ScriptBuilder", "int index", "int opcode"]], "updateScriptWithSignature": [["Script", "Script scriptSig", "byte[] signature", "int targetIndex", "int sigsPrefixCount", "int sigsSuffixCount"]], "createOpReturnScript": [["Script", "byte[] data"]], "data": [["ScriptBuilder", "byte[] data"], ["ScriptBuilder", "int index", "byte[] data"]], "createMultiSigInputScriptBytes": [["Script", "List<byte[]> signatures"], ["Script", "List<byte[]> signatures", "@Nullable byte[] multisigProgramBytes"]], "smallNum": [["ScriptBuilder", "int num"], ["ScriptBuilder", "int index", "int num"]], "createRedeemScript": [["Script", "int threshold", "List<ECKey> pubkeys"]], "addChunk": [["ScriptBuilder", "ScriptChunk chunk"], ["ScriptBuilder", "int index", "ScriptChunk chunk"]], "createInputScript": [["Script", "@Nullable TransactionSignature signature", "ECKey pubKey"], ["Script", "@Nullable TransactionSignature signature"]], "createMultiSigInputScript": [["Script", "List<TransactionSignature> signatures"], ["Script", "TransactionSignature... signatures"]], "createMultiSigOutputScript": [["Script", "int threshold", "List<ECKey> pubkeys"]], "build": [["Script"]], "createP2SHMultiSigInputScript": [["Script", "@Nullable List<TransactionSignature> signatures", "Script multisigProgram"]], "createP2SHOutputScript": [["Script", "byte[] hash"], ["Script", "Script redeemScript"], ["Script", "int threshold", "List<ECKey> pubkeys"]]}, "className": "ScriptBuilder", "renamed": ["Script", "function", "(", "ECKey", "arg0", ")", "{", "return", "new", "ScriptBuilder", "(", ")", ".", "data", "(", "arg0", ".", "getPubKey", "(", ")", ")", ".", "op", "(", "OP_CHECKSIG", ")", ".", "build", "(", ")", ";", "}"], "nl": "Creates a scriptPubKey that encodes payment to the given raw public key.", "nlToks": ["Creates", "a", "scriptPubKey", "that", "encodes", "payment", "to", "the", "given", "raw", "public", "key", "."], "path": "1000000000001/bitcoinj/tree/master/core/src/main/java/org/bitcoinj/script/ScriptBuilder.java", "idx": 353}
{"memberVariables": {"serialVersionUID=-7581093305228232025L": "long", "cookies": "TreeSet<Cookie>"}, "code": ["void", "function", "(", "Cookie", "[", "]", "cookies", ")", "{", "if", "(", "cookies", "!=", "null", ")", "{", "for", "(", "Cookie", "cooky", ":", "cookies", ")", "{", "this", ".", "addCookie", "(", "cooky", ")", ";", "}", "}", "}"], "memberFunctions": {"addCookie": [["void", "Cookie cookie"]], "clearExpired": [["boolean", "final Date date"]], "getCookies": [["List<Cookie>"]], "clear": [["void"]], "toString": [["String"]]}, "className": "BasicCookieStore", "renamed": ["void", "function", "(", "Cookie", "[", "]", "arg0", ")", "{", "if", "(", "arg0", "!=", "null", ")", "{", "for", "(", "Cookie", "loc0", ":", "arg0", ")", "{", "this", ".", "addCookie", "(", "loc0", ")", ";", "}", "}", "}"], "nl": "Adds an array of  {@link Cookie HTTP cookies}. Cookies are added individually and in the given array order. If any of the given cookies has already expired it will not be added, but existing values will still be removed.", "nlToks": ["Adds", "an", "array", "of", "-LCB-", "@link", "Cookie", "HTTP", "cookies", "-RCB-", ".", "Cookies", "are", "added", "individually", "and", "in", "the", "given", "array", "order", ".", "If", "any", "of", "the", "given", "cookies", "has", "already", "expired", "it", "will", "not", "be", "added", ",", "but", "existing", "values", "will", "still", "be", "removed", "."], "path": "pritamkhose/open-gpstracker.code/tree/master/external_sources/httpclient-4.1.1/httpclient/src/main/java/org/apache/ogt/http/impl/client/BasicCookieStore.java", "idx": 356}
{"memberVariables": {"x": "double", "y": "double"}, "code": ["double", "function", "(", ")", "{", "return", "x", ";", "}"], "memberFunctions": {"getY": [["double"]], "distance": [["double", "Point2D pt"]]}, "className": "Point2D", "renamed": ["double", "function", "(", ")", "{", "return", "x", ";", "}"], "nl": "Returns the X coordinate of this Point2D in double precision.", "nlToks": ["Returns", "the", "X", "coordinate", "of", "this", "Point2D", "in", "double", "precision", "."], "path": "peterplupo/ia201102/tree/master/trabalho1/aima-core/src/main/java/aima/core/util/datastructure/Point2D.java", "idx": 357}
{"memberVariables": {"ALPHANUM=\"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\"": "String", "RANDOM=new Random()": "Random", "LOG=LoggerFactory.getLogger(Constants.LOGGER_TYPE)": "Logger"}, "code": ["String", "function", "(", "List", "<", "T", ">", "list", ")", "{", "StringBuilder", "sb", "=", "new", "StringBuilder", "(", ")", ";", "for", "(", "T", "s", ":", "list", ")", "{", "if", "(", "sb", ".", "length", "(", ")", "!=", "0", ")", "{", "sb", ".", "append", "(", "\" \"", ")", ";", "}", "sb", ".", "append", "(", "s", ")", ";", "}", "return", "sb", ".", "toString", "(", ")", ";", "}"], "memberFunctions": {"createNewClassInstance": [["T", "Class<T> cls", "Class<?>[] ctorClassArgs", "Object[] ctorArgs"]], "isUfsObjectStorage": [["boolean", "String ufsAddress"]], "randomString": [["String", "int length"]], "argsToString": [["String", "String separator", "T... args"]], "sleepMs": [["void", "long timeMs"], ["void", "Logger logger", "long timeMs"]], "stripPrefixIfPresent": [["String", "final String key", "final String prefix"]], "toStringArray": [["String[]", "ArrayList<String> src"]], "getUnixGroups": [["List<String>", "String user"]], "getCurrentMs": [["long"]], "getPrimaryGroupName": [["String", "String userName"]], "stripSuffixIfPresent": [["String", "final String key", "final String suffix"]], "getValueFromStaticMapping": [["String", "String mapping", "String key"]], "warmUpLoop": [["void"]], "waitFor": [["void", "String description", "Function<Void,Boolean> condition", "int timeoutMs"]], "getGroups": [["List<String>", "String userName"]], "randomBytes": [["byte[]", "int length"]]}, "className": "CommonUtils", "renamed": ["String", "function", "(", "List", "<", "T", ">", "arg0", ")", "{", "StringBuilder", "loc0", "=", "new", "StringBuilder", "(", ")", ";", "for", "(", "T", "loc1", ":", "arg0", ")", "{", "if", "(", "loc0", ".", "length", "(", ")", "!=", "0", ")", "{", "loc0", ".", "append", "(", "\"srini_string\"", ")", ";", "}", "loc0", ".", "append", "(", "loc1", ")", ";", "}", "return", "loc0", ".", "toString", "(", ")", ";", "}"], "nl": "Converts a list of objects to a string.", "nlToks": ["Converts", "a", "list", "of", "objects", "to", "a", "string", "."], "path": "poemlin/alluxio/tree/master/core/common/src/main/java/alluxio/util/CommonUtils.java", "idx": 362}
{"memberVariables": {"DELETED=new Object()": "Object", "_size": "int", "_values": "int[]", "_mask": "int", "NULL=0xdeadbeef": "int", "_keys": "Object[]"}, "code": ["int", "function", "(", ")", "{", "return", "_size", ";", "}"], "memberFunctions": {"get": [["int", "Object key"]], "clear": [["void"]], "resize": [["void", "int newSize"]], "toString": [["String"]], "put": [["int", "Object key", "int value"]], "remove": [["int", "Object key"]]}, "className": "IdentityIntMap", "renamed": ["int", "function", "(", ")", "{", "return", "_size", ";", "}"], "nl": "Returns the current number of entries in the map.", "nlToks": ["Returns", "the", "current", "number", "of", "entries", "in", "the", "map", "."], "path": "acupple/dubbo/tree/master/hessian-lite/src/main/java/com/alibaba/com/caucho/hessian/util/IdentityIntMap.java", "idx": 363}
{"memberVariables": {"originalMatrix": "QMatrix", "positions": "List<MatrixPosition>"}, "code": ["int", "[", "]", "function", "(", ")", "{", "return", "originalMatrix", ".", "itemNames", ";", "}"], "memberFunctions": {"getLocalSequenceUtility": [["int", "MatrixPosition position"]], "getItemUtility": [["int", "MatrixPosition position"], ["int", "int row", "int column"]], "getRemainingUtility": [["int", "int row", "int column"]]}, "className": "QMatrixProjection", "renamed": ["int", "[", "]", "function", "(", ")", "{", "return", "originalMatrix", ".", "itemNames", ";", "}"], "nl": "Get the array of items stored in the original Q-matrix", "nlToks": ["Get", "the", "array", "of", "items", "stored", "in", "the", "original", "Q-matrix"], "path": "prateek96/Data_Mining_Assignments/tree/master/Assignment_1/Assignment 1.12/QMatrixProjection.java", "idx": 364}
{"memberVariables": {"mClientBootstrap": "Callable<Bootstrap>", "mReadResponse=null": "RPCBlockReadResponse", "NETTY_BLOCK_READ_FAILURES=MetricsSystem.clientCounter(\"NettyBlockReadFailures\")": "Counter", "LOG=LoggerFactory.getLogger(Constants.LOGGER_TYPE)": "Logger", "NETTY_BLOCK_READ_OPS=MetricsSystem.clientCounter(\"NettyBlockReadOps\")": "Counter"}, "code": ["void", "function", "(", ")", "{", "if", "(", "mReadResponse", "!=", "null", ")", "{", "mReadResponse", ".", "getPayloadDataBuffer", "(", ")", ".", "release", "(", ")", ";", "mReadResponse", "=", "null", ";", "}", "}"], "memberFunctions": {"readRemoteBlock": [["ByteBuffer", "InetSocketAddress address", "long blockId", "long offset", "long length", "long lockId", "long sessionId"]]}, "className": "NettyRemoteBlockReader", "renamed": ["void", "function", "(", ")", "{", "if", "(", "mReadResponse", "!=", "null", ")", "{", "mReadResponse", ".", "getPayloadDataBuffer", "(", ")", ".", "release", "(", ")", ";", "mReadResponse", "=", "null", ";", "}", "}"], "nl": "{@inheritDoc}Release the underlying buffer of previous/current read response.", "nlToks": ["-LCB-", "@inheritDoc", "-RCB-", "Release", "the", "underlying", "buffer", "of", "previous/current", "read", "response", "."], "path": "poemlin/alluxio/tree/master/core/client/src/main/java/alluxio/client/netty/NettyRemoteBlockReader.java", "idx": 365}
{"memberVariables": {"theTarget": "Entity", "lastAttackedItem": "Item", "activated": "boolean"}, "code": ["boolean", "function", "(", "EntityMobWithInventory", "mob", ")", "{", "if", "(", "theTarget", "==", "null", ")", "{", "return", "false", ";", "}", "if", "(", "theTarget", ".", "getEntityId", "(", ")", "==", "mob", ".", "getEntityId", "(", ")", ")", "{", "mob", ".", "setAttackTarget", "(", "null", ")", ";", "return", "false", ";", "}", "if", "(", "mob", ".", "getDistanceToEntity", "(", "theTarget", ")", ">", "30.0D", ")", "{", "return", "false", ";", "}", "return", "true", ";", "}"], "memberFunctions": {"updateLastTarget": [["void"]], "getLastTarget": [["Entity", "EntityMobWithInventory mob"]]}, "className": "PlayerLastAttackedTarget", "renamed": ["boolean", "function", "(", "EntityMobWithInventory", "arg0", ")", "{", "if", "(", "theTarget", "==", "null", ")", "{", "return", "false", ";", "}", "if", "(", "theTarget", ".", "getEntityId", "(", ")", "==", "arg0", ".", "getEntityId", "(", ")", ")", "{", "arg0", ".", "setAttackTarget", "(", "null", ")", ";", "return", "false", ";", "}", "if", "(", "arg0", ".", "getDistanceToEntity", "(", "theTarget", ")", ">", "30.0D", ")", "{", "return", "false", ";", "}", "return", "true", ";", "}"], "nl": "Returns whether the EntityAIBase should begin execution.", "nlToks": ["Returns", "whether", "the", "EntityAIBase", "should", "begin", "execution", "."], "path": "pregnantboy/fyp/tree/master/forge/src/main/java/fuzzyMod/targetTasks/PlayerLastAttackedTarget.java", "idx": 366}
{"memberVariables": {"c": "double", "eigenSmall=new EigenvalueSmall()": "EigenvalueSmall", "numSplits": "int", "numExceptional": "int", "bulge": "double", "steps": "int", "N": "int", "c2": "double", "cs": "double", "Q": "DenseMatrix64F", "splits[]": "int", "rand=new Random(0x34671e)": "Random", "s": "double", "diag[]": "double", "x1": "int", "x2": "int", "off[]": "double", "lastExceptional": "int", "s2": "double"}, "code": ["void", "function", "(", ")", "{", "numExceptional", "++", ";", "double", "mag", "=", "0.05", "*", "numExceptional", ";", "if", "(", "mag", ">", "1.0", ")", "mag", "=", "1.0", ";", "double", "theta", "=", "2.0", "*", "(", "rand", ".", "nextDouble", "(", ")", "-", "0.5", ")", "*", "mag", ";", "performImplicitSingleStep", "(", "theta", ",", "true", ")", ";", "lastExceptional", "=", "steps", ";", "}"], "memberFunctions": {"computeWilkinsonShift": [["double"]], "eigenvalue2by2": [["void", "int x1"]], "nextSplit": [["boolean"]], "createBulge": [["void", "int x1", "double p", "boolean byAngle"]], "copyDiag": [["double[]", "double[] ret"]], "incrementSteps": [["void"]], "computeRotation": [["void", "double run", "double rise"]], "printMatrix": [["void"]], "swapOff": [["double[]", "double off[]"]], "createBulge2by2": [["void", "int x1", "double p", "boolean byAngle"]], "isZero": [["boolean", "int index"]], "setQ": [["void", "DenseMatrix64F q"]], "removeBulge": [["void", "int x1"]], "copyEigenvalues": [["double[]", "double[] ret"]], "removeBulgeEnd": [["void", "int x1"]], "init": [["void", "double diag[]", "double off[]", "int numCols"]], "computeShift": [["double"]], "swapDiag": [["double[]", "double diag[]"]], "setSubmatrix": [["void", "int x1", "int x2"]], "getMatrixSize": [["int"]], "updateQ": [["void", "int m", "int n", "double c", "double s"]], "copyOff": [["double[]", "double[] ret"]], "resetSteps": [["void"]], "reset": [["void", "int N"]], "performImplicitSingleStep": [["void", "double lambda", "boolean byAngle"]]}, "className": "SymmetricQREigenHelper", "renamed": ["void", "function", "(", ")", "{", "numExceptional", "++", ";", "double", "loc0", "=", "0.05", "*", "numExceptional", ";", "if", "(", "loc0", ">", "1.0", ")", "loc0", "=", "1.0", ";", "double", "loc1", "=", "2.0", "*", "(", "rand", ".", "nextDouble", "(", ")", "-", "0.5", ")", "*", "loc0", ";", "performImplicitSingleStep", "(", "loc1", ",", "true", ")", ";", "lastExceptional", "=", "steps", ";", "}"], "nl": "Perform a shift in a random direction that is of the same magnitude as the elements in the matrix.", "nlToks": ["Perform", "a", "shift", "in", "a", "random", "direction", "that", "is", "of", "the", "same", "magnitude", "as", "the", "elements", "in", "the", "matrix", "."], "path": "adamaulia/efficient-java-matrix-library/tree/master/src/org/ejml/alg/dense/decomposition/eig/symm/SymmetricQREigenHelper.java", "idx": 368}
{"memberVariables": {"hashcode_cache=null": "Integer", "_all=new HashMap<>(11)": "HashMap<lalr_item,lalr_item>"}, "code": ["boolean", "function", "(", "lalr_item", "itm", ")", "{", "return", "_all", ".", "containsKey", "(", "itm", ")", ";", "}"], "memberFunctions": {"add": [["lalr_item", "lalr_item itm"], ["void", "lalr_item_set other"]], "not_null": [["void", "Object obj"]], "is_superset_of": [["boolean", "lalr_item_set other"]], "remove": [["void", "lalr_item itm"], ["void", "lalr_item_set other"]], "iterator": [["Iterator<lalr_item>"]], "size": [["int"]], "find": [["lalr_item", "lalr_item itm"]], "hashCode": [["int"]], "get_one": [["lalr_item"]], "equals": [["boolean", "lalr_item_set other"], ["boolean", "Object other"]], "is_subset_of": [["boolean", "lalr_item_set other"]], "compute_closure": [["void"]], "toString": [["String"]]}, "className": "lalr_item_set", "renamed": ["boolean", "function", "(", "lalr_item", "arg0", ")", "{", "return", "_all", ".", "containsKey", "(", "arg0", ")", ";", "}"], "nl": "Does the set contain a particular item?", "nlToks": ["Does", "the", "set", "contain", "a", "particular", "item", "?"], "path": "polyglot-compiler/polyglot/tree/master/tools/java_cup/src/java_cup/lalr_item_set.java", "idx": 369}
{"memberVariables": {}, "code": ["RemoteBlockWriter", "function", "(", ")", "{", "try", "{", "return", "CommonUtils", ".", "createNewClassInstance", "(", "Configuration", ".", "<", "RemoteBlockWriter", ">", "getClass", "(", "PropertyKey", ".", "USER_BLOCK_REMOTE_WRITER_CLASS", ")", ",", "null", ",", "null", ")", ";", "}", "catch", "(", "Exception", "e", ")", "{", "throw", "Throwables", ".", "propagate", "(", "e", ")", ";", "}", "}"], "memberFunctions": {"write": [["void", "byte[] bytes", "int offset", "int length"]], "open": [["void", "InetSocketAddress address", "long blockId", "long sessionId"]]}, "className": "RemoteBlockWriter", "renamed": ["RemoteBlockWriter", "function", "(", ")", "{", "try", "{", "return", "CommonUtils", ".", "createNewClassInstance", "(", "Configuration", ".", "<", "RemoteBlockWriter", ">", "getClass", "(", "PropertyKey", ".", "USER_BLOCK_REMOTE_WRITER_CLASS", ")", ",", "null", ",", "null", ")", ";", "}", "catch", "(", "Exception", "loc0", ")", "{", "throw", "Throwables", ".", "propagate", "(", "loc0", ")", ";", "}", "}"], "nl": "Factory for  {@link RemoteBlockWriter}.", "nlToks": ["Factory", "for", "-LCB-", "@link", "RemoteBlockWriter", "-RCB-", "."], "path": "poemlin/alluxio/tree/master/core/client/src/main/java/alluxio/client/RemoteBlockWriter.java", "idx": 370}
{"memberVariables": {"EPSILON=0.00001": "double"}, "code": ["boolean", "function", "(", "double", "a", ",", "double", "b", ",", "double", "epsilon", ")", "{", "return", "a", "==", "b", "?", "true", ":", "Math", ".", "abs", "(", "a", "-", "b", ")", "<", "epsilon", ";", "}"], "memberFunctions": {}, "className": "DoubleUtil", "renamed": ["boolean", "function", "(", "double", "arg0", ",", "double", "arg1", ",", "double", "arg2", ")", "{", "return", "arg0", "==", "arg1", "?", "true", ":", "Math", ".", "abs", "(", "arg0", "-", "arg1", ")", "<", "arg2", ";", "}"], "nl": "Returns true if two doubles are considered equal. Tests if the absolute difference between the two doubles has a difference less then a given double (epsilon). Determining the given epsilon is highly dependant on the precision of the doubles that are being compared.", "nlToks": ["Returns", "true", "if", "two", "doubles", "are", "considered", "equal", ".", "Tests", "if", "the", "absolute", "difference", "between", "the", "two", "doubles", "has", "a", "difference", "less", "then", "a", "given", "double", "-LRB-", "epsilon", "-RRB-", ".", "Determining", "the", "given", "epsilon", "is", "highly", "dependant", "on", "the", "precision", "of", "the", "doubles", "that", "are", "being", "compared", "."], "path": "adamabeshouse/cbioportal/tree/master/core/src/main/java/org/mskcc/cbio/portal/util/DoubleUtil.java", "idx": 371}
{"memberVariables": {"chain": "CertificateChainInfo"}, "code": ["CertificateChainInfo", "function", "(", ")", "{", "return", "chain", ";", "}"], "memberFunctions": {"setChain": [["void", "CertificateChainInfo value"]]}, "className": "CheckServiceAccessRequest", "renamed": ["CertificateChainInfo", "function", "(", ")", "{", "return", "chain", ";", "}"], "nl": "Gets the value of the chain property.", "nlToks": ["Gets", "the", "value", "of", "the", "chain", "property", "."], "path": "platformlayer/platformlayer/tree/master/auth/client/src/generated/xjc/org/platformlayer/auth/v1/CheckServiceAccessRequest.java", "idx": 372}
{"memberVariables": {"NOOP=new JobExitStatus(\"NOOP\")": "JobExitStatus", "FILES_AVAILABLE=new JobExitStatus(\"FILES_AVAILABLE\",\"Files avaialable to Process\")": "JobExitStatus", "CAPTURE_SOURCE_METADATA_ERRORS=new JobExitStatus(\"CAPTURE_SOURCE_METADATA_ERRORS\",\"There are some errors when capturing the file metadata from publisher\")": "JobExitStatus", "SOURCE_DELETION_ERRORS=new JobExitStatus(\"SOURCE_DELETION_ERRORS\",\"There are some errors when deleting the file from publisher\")": "JobExitStatus", "DOWNLOAD_ERRORS=new JobExitStatus(\"DOWNLOAD_ERRORS\",\"There are some errors when downloading the file from publisher\")": "JobExitStatus", "CONFIG_VALIDATION_FAIL=new JobExitStatus(\"CONFIG_VALIDATION_FAIL\",\"The required parameters are not available or Invalid Parameters are Provided\")": "JobExitStatus", "MOVEFILES_WORKAREA_ERRORS=new JobExitStatus(\"MOVEFILES_WORKAREA_ERRORS\",\"There are some files already exists in the destination\")": "JobExitStatus", "EXECUTING=new JobExitStatus(\"EXECUTING\")": "JobExitStatus", "DB_NOT_ACCESSABLE=new JobExitStatus(\"DB_NOT_ACCESSABLE\",\"Database is not accessible at this time. Please contact support immediately\")": "JobExitStatus", "ANOTHER_FETCHER_IS_RUNNING=new JobExitStatus(\"ANOTHER_FETCHER_IS_RUNNING\",\"Another Fetcher Already running\")": "JobExitStatus", "RUNFAILED=new JobExitStatus(\"RUNFAILED\",\"Current Run failed Due To Internal System Error\")": "JobExitStatus", "MULTIPLE_PARTIAL_ERRORS=new JobExitStatus(\"MULTIPLE_PARTIAL_ERRORS\",\"There are some errors while deleting or downloading the file from publisher\")": "JobExitStatus", "MOVEFILES_DESTINATION_ERRORS=new JobExitStatus(\"MOVEFILES_DESTINATION_ERRORS\",\"There are some files already exists in the destination\")": "JobExitStatus", "NO_NEW_FILES_FOUND=new JobExitStatus(\"NO_NEW_FILES_FOUND\",\"No new files found in the source\")": "JobExitStatus", "WORK_AREA_NOT_ACCESSABLE=new JobExitStatus(\"WORK_AREA_NOT_ACCESSABLE\",\"File system work area is not accessible. Please contact support immediately\")": "JobExitStatus", "PROCESS_VALIDATION_FAIL=new JobExitStatus(\"PROCESS_VALIDATION_FAIL\",\"Consistency check between work area and data unit failed. Please Contact Support immediately \")": "JobExitStatus", "DESTINATION_NOT_ACCESSABLE=new JobExitStatus(\"DESTINATION_NOT_ACCESSABLE\",\"Archive Filesystem(I Drive?) is not accessible. Please contact support immediately\")": "JobExitStatus", "UNKNOWN=new JobExitStatus(\"UNKNOWN\")": "JobExitStatus", "DELAYERING_ERRORS=new JobExitStatus(\"DELAYERING_ERRORS\",\"There are some errors when delayering the file from publisher\")": "JobExitStatus", "thisExitStatus": "ExitStatus", "partialExitCodes": "List<JobExitStatus>", "NO_FILES_FOUND=new JobExitStatus(\"NO_FILES_FOUND\",\"No files found in the source\")": "JobExitStatus", "SOURCE_NOT_ACCESSABLE=new JobExitStatus(\"SOURCE_NOT_ACCESSABLE\",\"Source is not accessible at this time. Please contact support immediately\")": "JobExitStatus", "COMPLETED=new JobExitStatus(\"COMPLETED\",\"Current Run was successful\")": "JobExitStatus"}, "code": ["int", "function", "(", ")", "{", "return", "toString", "(", ")", ".", "hashCode", "(", ")", ";", "}"], "memberFunctions": {"getPartialFailureCodes": [["List<JobExitStatus>"]], "equals": [["boolean", "Object obj"]], "getExitStatus": [["ExitStatus"]], "toString": [["String"]], "isPartialFailureCode": [["boolean", "ExitStatus exitStatus"], ["boolean", "JobExitStatus exitStatus"]], "getExitCode": [["String"]], "getExitDescription": [["String"]]}, "className": "JobExitStatus", "renamed": ["int", "function", "(", ")", "{", "return", "toString", "(", ")", ".", "hashCode", "(", ")", ";", "}"], "nl": "Compatible with the equals implementation.", "nlToks": ["Compatible", "with", "the", "equals", "implementation", "."], "path": "pkesireddy/portico_fletcher/tree/master/fetcher-master/fetcher-core/src/main/java/org/ithaka/cm/fetcher/core/jobs/JobExitStatus.java", "idx": 376}
{"memberVariables": {"QS=63": "byte", "CR=13": "byte", "COLON=58": "byte", "HT=9": "byte", "FOWARD_SLASH=47": "byte", "PERCENT=37": "byte", "LF=10": "byte", "US_ASCII_CHARSET_NAME=\"US-ASCII\"": "String", "BACK_SLASH=92": "byte", "AMP=38": "byte", "COMMA=44": "byte", "HEX_DEC={-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,00,01,02,03,04,05,06,07,8,9,-1,-1,-1,-1,-1,-1,-1,10,11,12,13,14,15,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,10,11,12,13,14,15,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}": "int[]", "PLUS=43": "byte", "HTTP_CONTROLS=new boolean[128]": "boolean[]", "SEMI_COLON=59": "byte", "CRLF_BYTES=new byte[]{CR,LF}": "byte[]", "SPACE=32": "byte", "DEFAULT_CHARACTER_ENCODING=\"ISO-8859-1\"": "String", "EQUALS=61": "byte", "QUOTE=34": "byte", "HTTP_SEPARATORS=new boolean[128]": "boolean[]"}, "code": ["boolean", "function", "(", "byte", "b", ")", "{", "return", "b", "==", "SPACE", "||", "b", "==", "HT", ";", "}"], "memberFunctions": {"hexAsciiToDecimal": [["int", "final byte b"]], "appendCRLF": [["void", "ByteBuffer buffer"]], "isHttpControl": [["boolean", "byte b"]], "pushBack": [["void", "ByteBuffer buffer"]], "appendString": [["void", "final ByteBuffer buffer", "final String string"]], "isHttpSeparator": [["boolean", "byte b"]], "isHex": [["boolean", "byte b"]], "getAsciiBytes": [["byte[]", "final String str"]]}, "className": "MinaCodecUtils", "renamed": ["boolean", "function", "(", "byte", "arg0", ")", "{", "return", "arg0", "==", "SPACE", "||", "arg0", "==", "HT", ";", "}"], "nl": "Determines whether a specified (US-ASCII) character is an HTTP whitespace character (Space or Horizontal tab)", "nlToks": ["Determines", "whether", "a", "specified", "-LRB-", "US-ASCII", "-RRB-", "character", "is", "an", "HTTP", "whitespace", "character", "-LRB-", "Space", "or", "Horizontal", "tab", "-RRB-"], "path": "adamfisk/littleshoot-client/tree/master/common/util/mina/src/main/java/org/lastbamboo/common/util/mina/MinaCodecUtils.java", "idx": 377}
{"memberVariables": {"sdkInited=false": "boolean", "userProvider": "EaseUserProfileProvider", "settingsProvider": "EaseSettingsProvider", "activityList=new ArrayList<Activity>()": "List<Activity>", "emojiconInfoProvider": "EaseEmojiconInfoProvider", "instance=null": "EaseUI", "TAG=EaseUI.class.getSimpleName()": "String", "appContext=null": "Context", "notifier=null": "EaseNotifier"}, "code": ["EaseUI", "function", "(", ")", "{", "if", "(", "instance", "==", "null", ")", "{", "instance", "=", "new", "EaseUI", "(", ")", ";", "}", "return", "instance", ";", "}"], "memberFunctions": {"setSettingsProvider": [["void", "EaseSettingsProvider settingsProvider"]], "getNotifier": [["EaseNotifier"]], "getUser": [["EaseUser", "String username"]], "setEmojiconInfoProvider": [["void", "EaseEmojiconInfoProvider emojiconInfoProvider"]], "initNotifier": [["void"]], "isMsgSoundAllowed": [["boolean", "EMMessage message"], ["boolean", "EMMessage message"]], "getSettingsProvider": [["EaseSettingsProvider"]], "getEmojiconInfo": [["EaseEmojicon", "String emojiconIdentityCode"]], "getEmojiconInfoProvider": [["EaseEmojiconInfoProvider"]], "initChatOptions": [["EMOptions"]], "init": [["boolean", "Context context", "EMOptions options"]], "getAppName": [["String", "int pID"]], "setUserProfileProvider": [["void", "EaseUserProfileProvider userProvider"]], "pushActivity": [["void", "Activity activity"]], "isMsgVibrateAllowed": [["boolean", "EMMessage message"], ["boolean", "EMMessage message"]], "getAppUser": [["User", "String username"]], "registerMessageListener": [["void"]], "getTextEmojiconMapping": [["Map<String,Object>"]], "isMsgNotifyAllowed": [["boolean", "EMMessage message"], ["boolean", "EMMessage message"]], "hasForegroundActivies": [["boolean"]], "isSpeakerOpened": [["boolean"], ["boolean"]], "popActivity": [["void", "Activity activity"]], "getUserProfileProvider": [["EaseUserProfileProvider"]], "getContext": [["Context"]], "createNotifier": [["EaseNotifier"]]}, "className": "EaseUI", "renamed": ["EaseUI", "function", "(", ")", "{", "if", "(", "instance", "==", "null", ")", "{", "instance", "=", "new", "EaseUI", "(", ")", ";", "}", "return", "instance", ";", "}"], "nl": "get instance of EaseUI", "nlToks": ["get", "instance", "of", "EaseUI"], "path": "15109237255/SuperWeChat/tree/master/easeui/src/com/hyphenate/easeui/controller/EaseUI.java", "idx": 378}
{"memberVariables": {"_serializerFactory": "SerializerFactory", "_defaultSerializerFactory": "SerializerFactory", "log=Logger.getLogger(HessianFactory.class.getName())": "Logger", "_freeHessianInput=new HessianFreeList<HessianInput>(32)": "HessianFreeList<HessianInput>", "_freeHessianOutput=new HessianFreeList<HessianOutput>(32)": "HessianFreeList<HessianOutput>", "_freeHessian2Input=new HessianFreeList<Hessian2Input>(32)": "HessianFreeList<Hessian2Input>", "_freeHessian2Output=new HessianFreeList<Hessian2Output>(32)": "HessianFreeList<Hessian2Output>"}, "code": ["void", "function", "(", "Hessian2Output", "out", ")", "{", "if", "(", "out", "==", "null", ")", "{", "return", ";", "}", "out", ".", "free", "(", ")", ";", "_freeHessian2Output", ".", "free", "(", "out", ")", ";", "}"], "memberFunctions": {"createHessian2Input": [["Hessian2Input", "InputStream is"]], "freeHessian2StreamingInput": [["void", "Hessian2StreamingInput in"]], "createHessian2Output": [["Hessian2Output", "OutputStream os"]], "createHessian2StreamingOutput": [["Hessian2StreamingOutput", "OutputStream os"]], "freeHessian2StreamingOutput": [["void", "Hessian2StreamingOutput out"]], "setSerializerFactory": [["void", "SerializerFactory factory"]], "createHessian2DebugOutput": [["OutputStream", "OutputStream os", "Logger log", "Level level"]], "getSerializerFactory": [["SerializerFactory"]], "createHessian2StreamingInput": [["Hessian2StreamingInput", "InputStream is"]], "createHessianOutput": [["HessianOutput", "OutputStream os"]], "createHessianInput": [["HessianInput", "InputStream is"]], "freeHessian2Input": [["void", "Hessian2Input in"]]}, "className": "HessianFactory", "renamed": ["void", "function", "(", "Hessian2Output", "arg0", ")", "{", "if", "(", "arg0", "==", "null", ")", "{", "return", ";", "}", "arg0", ".", "free", "(", ")", ";", "_freeHessian2Output", ".", "free", "(", "arg0", ")", ";", "}"], "nl": "Frees a Hessian 2.0 serializer", "nlToks": ["Frees", "a", "Hessian", "2.0", "serializer"], "path": "007slm/citrus/tree/master/common/hessian/src/main/java/com/alibaba/citrus/hessian/io/HessianFactory.java", "idx": 379}
{"memberVariables": {"ALREADY_EXPIRED_EXPIRATION_TIME=MIN_DATE": "Date", "expires": "Date", "EXPIRES_IN_KEY=\"expires_in\"": "String", "lastRefresh": "Date", "DEFAULT_ACCESS_TOKEN_SOURCE=AccessTokenSource.FACEBOOK_APPLICATION_WEB": "AccessTokenSource", "DEFAULT_LAST_REFRESH_TIME=new Date()": "Date", "ACCESS_TOKEN_KEY=\"access_token\"": "String", "serialVersionUID=1L": "long", "source": "AccessTokenSource", "token": "String", "DEFAULT_EXPIRATION_TIME=MAX_DATE": "Date", "serialVersionUID=-2488473066578201069L": "long", "permissions": "List<String>", "MIN_DATE=new Date(Long.MIN_VALUE)": "Date", "MAX_DATE=new Date(Long.MAX_VALUE)": "Date"}, "code": ["Date", "function", "(", ")", "{", "return", "this", ".", "expires", ";", "}"], "memberFunctions": {"createFromNativeLogin": [["AccessToken", "Bundle bundle", "AccessTokenSource source"]], "readResolve": [["Object"]], "getPermissions": [["List<String>"]], "tokenToString": [["String"]], "writeReplace": [["Object"]], "createFromNativeLinkingIntent": [["AccessToken", "Intent intent"]], "isInvalid": [["boolean"]], "createNew": [["AccessToken", "List<String> requestedPermissions", "String accessToken", "Date expires", "AccessTokenSource source"]], "readObject": [["void", "ObjectInputStream stream"]], "getBundleLongAsDate": [["Date", "Bundle bundle", "String key", "Date dateBase"]], "createFromExistingAccessToken": [["AccessToken", "String accessToken", "Date expirationTime", "Date lastRefreshTime", "AccessTokenSource accessTokenSource", "List<String> permissions"]], "createFromBundle": [["AccessToken", "List<String> requestedPermissions", "Bundle bundle", "AccessTokenSource source", "Date expirationBase"]], "appendPermissions": [["void", "StringBuilder builder"]], "getSource": [["AccessTokenSource"]], "createFromTokenWithRefreshedPermissions": [["AccessToken", "AccessToken token", "List<String> permissions"]], "getToken": [["String"]], "toCacheBundle": [["Bundle"]], "createEmptyToken": [["AccessToken", "List<String> permissions"]], "createFromString": [["AccessToken", "String token", "List<String> permissions", "AccessTokenSource source"]], "getLastRefresh": [["Date"]], "toString": [["String"]], "createFromCache": [["AccessToken", "Bundle bundle"]], "createFromRefresh": [["AccessToken", "AccessToken current", "Bundle bundle"]], "createFromWebBundle": [["AccessToken", "List<String> requestedPermissions", "Bundle bundle", "AccessTokenSource source"]]}, "className": "AccessToken", "renamed": ["Date", "function", "(", ")", "{", "return", "this", ".", "expires", ";", "}"], "nl": "Gets the date at which the access token expires.", "nlToks": ["Gets", "the", "date", "at", "which", "the", "access", "token", "expires", "."], "path": "planktons/CrazyHero/tree/master/Assets/Plugins/Android/facebook/src/com/facebook/AccessToken.java", "idx": 381}
{"memberVariables": {"mThrown=ExpectedException.none()": "ExpectedException", "mHandler": "ClientHandler", "mContext": "ChannelHandlerContext"}, "code": ["void", "function", "(", ")", "{", "final", "RPCMessage", "message", "=", "new", "RPCBlockReadRequest", "(", "0", ",", "0", ",", "0", ",", "0", ",", "0", ")", ";", "mThrown", ".", "expect", "(", "IllegalArgumentException", ".", "class", ")", ";", "mThrown", ".", "expectMessage", "(", "ExceptionMessage", ".", "NO_RPC_HANDLER", ".", "getMessage", "(", "message", ".", "getType", "(", ")", ")", ")", ";", "mHandler", ".", "channelRead0", "(", "mContext", ",", "message", ")", ";", "}"], "memberFunctions": {"exceptionCaughtClosesContext": [["void"]], "before": [["void"]], "channelRead0ResponseReceived": [["void"]], "addListener": [["void"]]}, "className": "ClientHandlerTest", "renamed": ["void", "function", "(", ")", "{", "final", "RPCMessage", "loc0", "=", "new", "RPCBlockReadRequest", "(", "0", ",", "0", ",", "0", ",", "0", ",", "0", ")", ";", "mThrown", ".", "expect", "(", "IllegalArgumentException", ".", "class", ")", ";", "mThrown", ".", "expectMessage", "(", "ExceptionMessage", ".", "NO_RPC_HANDLER", ".", "getMessage", "(", "loc0", ".", "getType", "(", ")", ")", ")", ";", "mHandler", ".", "channelRead0", "(", "mContext", ",", "loc0", ")", ";", "}"], "nl": "Makes sure that an  {@link IllegalArgumentException} is thrown when the message isnot a  {@link alluxio.network.protocol.RPCResponse}.", "nlToks": ["Makes", "sure", "that", "an", "-LCB-", "@link", "IllegalArgumentException", "-RCB-", "is", "thrown", "when", "the", "message", "isnot", "a", "-LCB-", "@link", "alluxio.network.protocol.RPCResponse", "-RCB-", "."], "path": "poemlin/alluxio/tree/master/core/client/src/test/java/alluxio/client/netty/ClientHandlerTest.java", "idx": 382}
{"memberVariables": {"federationPullResults=new ConcurrentHashMap<String,FederationModel>()": "Map<String,FederationModel>", "notificationManager": "INotificationManager", "settings": "IStoredSettings", "federationRegistrations=Collections.synchronizedList(new ArrayList<FederationModel>())": "List<FederationModel>", "runtimeManager": "IRuntimeManager", "logger=LoggerFactory.getLogger(getClass())": "Logger", "repositoryManager": "IRepositoryManager"}, "code": ["File", "function", "(", ")", "{", "return", "runtimeManager", ".", "getFileOrFolder", "(", "Keys", ".", "federation", ".", "proposalsFolder", ",", "\"${baseFolder}/proposals\"", ")", ";", "}"], "memberFunctions": {"deletePendingFederationProposal": [["boolean", "FederationProposal proposal"]], "authenticate": [["UserModel", "HttpServletRequest httpRequest"]], "getFederationRegistration": [["FederationModel", "String url", "String name"]], "getFederationUser": [["UserModel"]], "acknowledgeFederationStatus": [["boolean", "String identification", "FederationModel registration"]], "getPendingFederationProposals": [["List<FederationProposal>"]], "getFederationResultRegistrations": [["List<FederationModel>"]], "start": [["FederationManager"]], "canFederate": [["boolean"]], "getPendingFederationProposal": [["FederationProposal", "String token"]], "getRepositories": [["Map<String,RepositoryModel>", "String gitblitUrl", "String token"]], "stop": [["FederationManager"]], "getFederationSets": [["List<FederationSet>", "String gitblitUrl"]], "submitFederationProposal": [["boolean", "FederationProposal proposal", "String gitblitUrl"]], "getFederationToken": [["String", "FederationToken type"], ["String", "String value"]], "createFederationProposal": [["FederationProposal", "String gitblitUrl", "String token"]], "getFederationRegistrations": [["List<FederationModel>"]], "getFederationTokens": [["List<String>"]], "validateFederationRequest": [["boolean", "FederationRequest req", "String token"]]}, "className": "FederationManager", "renamed": ["File", "function", "(", ")", "{", "return", "runtimeManager", ".", "getFileOrFolder", "(", "Keys", ".", "federation", ".", "proposalsFolder", ",", "\"srini_string\"", ")", ";", "}"], "nl": "Returns the path of the proposals folder. This method checks to see if Gitblit is running on a cloud service and may return an adjusted path.", "nlToks": ["Returns", "the", "path", "of", "the", "proposals", "folder", ".", "This", "method", "checks", "to", "see", "if", "Gitblit", "is", "running", "on", "a", "cloud", "service", "and", "may", "return", "an", "adjusted", "path", "."], "path": "pombreda/gitblit/tree/master/src/main/java/com/gitblit/manager/FederationManager.java", "idx": 383}
{"memberVariables": {"conduitSelector": "ConduitSelector", "requestContext=new HashMap<String,Object>()": "Map<String,Object>", "bus": "Bus", "inInterceptors=new ModCountCopyOnWriteArrayList<Interceptor<? extends Message>>()": "List<Interceptor<? extends Message>>", "synchronousTimeout=60000": "long", "outInterceptors=new ModCountCopyOnWriteArrayList<Interceptor<? extends Message>>()": "List<Interceptor<? extends Message>>", "LOG=LogUtils.getL7dLogger(ClientConfiguration.class)": "Logger", "inFault=new ModCountCopyOnWriteArrayList<Interceptor<? extends Message>>()": "List<Interceptor<? extends Message>>", "responseContext=new HashMap<String,Object>()": "Map<String,Object>", "outFault=new ModCountCopyOnWriteArrayList<Interceptor<? extends Message>>()": "List<Interceptor<? extends Message>>"}, "code": ["Bus", "function", "(", ")", "{", "return", "bus", ";", "}"], "memberFunctions": {"getOutFaultInterceptors": [["List<Interceptor<? extends Message>>"]], "getEndpoint": [["Endpoint"]], "getSynchronousTimeout": [["long"]], "setConduitSelector": [["void", "ConduitSelector cs"]], "setOutInterceptors": [["void", "List<Interceptor<? extends Message>> interceptors"]], "getInInterceptors": [["List<Interceptor<? extends Message>>"]], "getResponseContext": [["Map<String,Object>"]], "isResponseExpectedForOneway": [["boolean"]], "setOutFaultInterceptors": [["void", "List<Interceptor<? extends Message>> interceptors"]], "getHttpConduit": [["HTTPConduit"]], "getConduit": [["Conduit"]], "setSynchronousTimeout": [["void", "long synchronousTimeout"]], "getConduitSelector": [["ConduitSelector"]], "getInFaultInterceptors": [["List<Interceptor<? extends Message>>"]], "getOutInterceptors": [["List<Interceptor<? extends Message>>"]], "setInInterceptors": [["void", "List<Interceptor<? extends Message>> interceptors"]], "getRequestContext": [["Map<String,Object>"]], "setInFaultInterceptors": [["void", "List<Interceptor<? extends Message>> interceptors"]], "setBus": [["void", "Bus bus"]], "prepareConduitSelector": [["void", "Message message"]]}, "className": "ClientConfiguration", "renamed": ["Bus", "function", "(", ")", "{", "return", "bus", ";", "}"], "nl": "Gets the bus", "nlToks": ["Gets", "the", "bus"], "path": "primesign/cxf/tree/master/rt/rs/client/src/main/java/org/apache/cxf/jaxrs/client/ClientConfiguration.java", "idx": 384}
{"memberVariables": {"HOUR=60 * MINUTE": "Integer", "MINUTE=1": "Integer"}, "code": ["ELEvaluator", "function", "(", "Configuration", "conf", ",", "String", "group", ")", "{", "ELEvaluator", "eval", "=", "Services", ".", "get", "(", ")", ".", "get", "(", "ELService", ".", "class", ")", ".", "createEvaluator", "(", "group", ")", ";", "setConfigToEval", "(", "eval", ",", "conf", ")", ";", "return", "eval", ";", "}"], "memberFunctions": {"createLazyEvaluator": [["ELEvaluator", "Date actualTime", "Date nominalTime", "Element dEvent", "Configuration conf"]], "make2Digits": [["String", "int num"]], "createSLAEvaluator": [["ELEvaluator", "Date nominalTime", "Configuration conf"]], "setConfigToEval": [["void", "ELEvaluator eval", "Configuration conf"]], "createELEvaluatorForDataEcho": [["ELEvaluator", "Configuration conf", "String group", "HashMap<String,String> dataNameList"]], "createURIELEvaluator": [["ELEvaluator", "String strDate"]], "getDSObject": [["SyncCoordDataset", "Element eData"]], "createInstancesELEvaluator": [["ELEvaluator", "Element event", "SyncCoordAction appInst", "Configuration conf"], ["ELEvaluator", "String tag", "Element event", "SyncCoordAction appInst", "Configuration conf"]], "createDataEvaluator": [["ELEvaluator", "Element eJob", "Configuration conf", "String actionId"]]}, "className": "CoordELEvaluator", "renamed": ["ELEvaluator", "function", "(", "Configuration", "arg0", ",", "String", "arg1", ")", "{", "ELEvaluator", "loc0", "=", "Services", ".", "get", "(", ")", ".", "get", "(", "ELService", ".", "class", ")", ".", "createEvaluator", "(", "arg1", ")", ";", "setConfigToEval", "(", "loc0", ",", "arg0", ")", ";", "return", "loc0", ";", "}"], "nl": "Create an evaluator to be used in resolving configuration vars and frequency constant/functions (used in Stage 1)", "nlToks": ["Create", "an", "evaluator", "to", "be", "used", "in", "resolving", "configuration", "vars", "and", "frequency", "constant/functions", "-LRB-", "used", "in", "Stage", "1", "-RRB-"], "path": "pingpangkuangmo/oozie/tree/master/core/src/main/java/org/apache/oozie/coord/CoordELEvaluator.java", "idx": 385}
{"memberVariables": {"fields=new HashMap<>()": "Map<FieldSignature,Set<String>>", "nestedClasses=new HashMap<>()": "Map<String,ClassStats>", "memo=new HashMap<>()": "Map<ClassMetricKey,Double>", "operations=new HashMap<>()": "Map<OperationSignature,Map<String,OperationStats>>"}, "code": ["double", "function", "(", "Metrics", ".", "ClassMetricKey", "key", ",", "ASTClassOrInterfaceDeclaration", "node", ",", "boolean", "force", ")", "{", "Double", "prev", "=", "memo", ".", "get", "(", "key", ")", ";", "if", "(", "!", "force", "&&", "prev", "!=", "null", ")", "{", "return", "prev", ";", "}", "ClassMetric", "metric", "=", "key", ".", "getCalculator", "(", ")", ";", "double", "val", "=", "metric", ".", "computeFor", "(", "node", ",", "Metrics", ".", "getTopLevelPackageStats", "(", ")", ")", ";", "memo", ".", "put", "(", "key", ",", "val", ")", ";", "return", "val", ";", "}"], "memberFunctions": {"addOperation": [["void", "String name", "OperationSignature sig"]], "addField": [["void", "String name", "FieldSignature sig"]], "getNestedClassStats": [["ClassStats", "String className", "boolean createIfNotFound"]], "hasMatchingSig": [["boolean", "String name", "OperationSigMask mask"], ["boolean", "String name", "FieldSigMask mask"]]}, "className": "ClassStats", "renamed": ["double", "function", "(", "Metrics", ".", "ClassMetricKey", "arg0", ",", "ASTClassOrInterfaceDeclaration", "arg1", ",", "boolean", "arg2", ")", "{", "Double", "loc0", "=", "memo", ".", "get", "(", "arg0", ")", ";", "if", "(", "!", "arg2", "&&", "loc0", "!=", "null", ")", "{", "return", "loc0", ";", "}", "ClassMetric", "loc1", "=", "arg0", ".", "getCalculator", "(", ")", ";", "double", "loc2", "=", "loc1", ".", "computeFor", "(", "arg1", ",", "Metrics", ".", "getTopLevelPackageStats", "(", ")", ")", ";", "memo", ".", "put", "(", "arg0", ",", "loc2", ")", ";", "return", "loc2", ";", "}"], "nl": "Computes the value of a metric for an operation.", "nlToks": ["Computes", "the", "value", "of", "a", "metric", "for", "an", "operation", "."], "path": "adangel/pmd/tree/master/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/oom/ClassStats.java", "idx": 387}
{"memberVariables": {"properties=new HashMap<String,Object>()": "Map<String,Object>", "OUT_MESSAGE=2": "int", "receiver": "String", "sender": "String", "IN_MESSAGE=1": "int", "content": "String", "direction": "int"}, "code": ["String", "function", "(", ")", "{", "return", "sender", ";", "}"], "memberFunctions": {"getReceiver": [["String"]], "getDirection": [["int"]], "getContent": [["String"]], "getProperties": [["Map<String,Object>"]], "addProperty": [["void", "String key", "Object value"]]}, "className": "SMSMessage", "renamed": ["String", "function", "(", ")", "{", "return", "sender", ";", "}"], "nl": "Retuen the Phone Number of the Sender", "nlToks": ["Retuen", "the", "Phone", "Number", "of", "the", "Sender"], "path": "harsha89/wso2-axis2-transports/tree/master/modules/sms/src/main/java/org/apache/axis2/transport/sms/SMSMessage.java", "idx": 388}
{"memberVariables": {"endDate": "Date", "authorExclusions": "Set<String>", "authorMetrics": "Map<String,Metric>", "commits": "Set<RepositoryCommit>", "serialVersionUID=1L": "long", "repositoryMetrics": "Map<String,Metric>", "startDate": "Date"}, "code": ["RepositoryCommit", "function", "(", "String", "repository", ",", "String", "branch", ",", "RevCommit", "commit", ")", "{", "RepositoryCommit", "commitModel", "=", "new", "RepositoryCommit", "(", "repository", ",", "branch", ",", "commit", ")", ";", "return", "addCommit", "(", "commitModel", ")", ";", "}"], "memberFunctions": {"excludeAuthors": [["void", "Collection<String> authors"]], "getAuthorMetrics": [["Map<String,Metric>"]], "getCommitCount": [["int"]], "getCommits": [["List<RepositoryCommit>"]], "getRepositoryMetrics": [["Map<String,Metric>"]], "compareTo": [["int", "Activity o"]]}, "className": "Activity", "renamed": ["RepositoryCommit", "function", "(", "String", "arg0", ",", "String", "arg1", ",", "RevCommit", "arg2", ")", "{", "RepositoryCommit", "loc0", "=", "new", "RepositoryCommit", "(", "arg0", ",", "arg1", ",", "arg2", ")", ";", "return", "addCommit", "(", "loc0", ")", ";", "}"], "nl": "Adds a commit to the activity object as long as the commit is not a duplicate.", "nlToks": ["Adds", "a", "commit", "to", "the", "activity", "object", "as", "long", "as", "the", "commit", "is", "not", "a", "duplicate", "."], "path": "pombreda/gitblit/tree/master/src/main/java/com/gitblit/models/Activity.java", "idx": 389}
{"memberVariables": {"steps=new Array<Step>()": "Array<Step>", "x": "int", "y": "int"}, "code": ["boolean", "function", "(", "int", "x", ",", "int", "y", ")", "{", "return", "steps", ".", "contains", "(", "new", "Step", "(", "x", ",", "y", ")", ",", "false", ")", ";", "}"], "memberFunctions": {"getX": [["int", "int index"], ["int"]], "getY": [["int", "int index"], ["int"]], "prependStep": [["void", "int x", "int y"]], "hashCode": [["int"]], "getStep": [["Step", "int index"]], "equals": [["boolean", "Object other"]], "getSteps": [["Array<Step>"]], "getLength": [["int"]], "toString": [["String"]], "appendStep": [["void", "int x", "int y"]]}, "className": "Path", "renamed": ["boolean", "function", "(", "int", "arg0", ",", "int", "arg1", ")", "{", "return", "steps", ".", "contains", "(", "new", "Step", "(", "arg0", ",", "arg1", ")", ",", "false", ")", ";", "}"], "nl": "Check if this path contains the given step", "nlToks": ["Check", "if", "this", "path", "contains", "the", "given", "step"], "path": "prativa/shadowstruggles/tree/master/Shadow Struggles/model/br/edu/ifsp/pds/shadowstruggles/model/rpg/pathfinder/Path.java", "idx": 390}
{"memberVariables": {"isRaw": "boolean", "intBuf": "byte[]", "MAX_INT_BYTES=21": "int", "format": "PackFormatInputStream", "packed": "ByteArrayOutputStream"}, "code": ["void", "function", "(", "int", "value", ")", "{", "format", ".", "checkType", "(", "'i'", ",", "true", ")", ";", "packLong", "(", "value", ",", "true", ")", ";", "}"], "memberFunctions": {"getValue": [["byte[]"]], "packLong": [["void", "long x", "boolean signed"]], "addShort": [["void", "short value"]], "reset": [["void"]], "getFormat": [["String"]], "addByte": [["void", "byte value"]], "addLong": [["void", "long value"]], "addRecord": [["void", "long value"]], "addByteArray": [["void", "byte[] value"], ["void", "byte[] value", "int off", "int len"]], "addString": [["void", "String value"]]}, "className": "PackOutputStream", "renamed": ["void", "function", "(", "int", "arg0", ")", "{", "format", ".", "checkType", "(", "'i'", ",", "true", ")", ";", "packLong", "(", "arg0", ",", "true", ")", ";", "}"], "nl": "Add an integer field to the stream. \\param value The integer value to be added.", "nlToks": ["Add", "an", "integer", "field", "to", "the", "stream", ".", "\\", "param", "value", "The", "integer", "value", "to", "be", "added", "."], "path": "adamlsd/mongo/tree/master/src/third_party/wiredtiger/lang/java/src/com/wiredtiger/db/PackOutputStream.java", "idx": 391}
{"memberVariables": {"COORD_PURGE_LIMIT=CONF_PREFIX + \"coord.purge.limit\"": "String", "olderThan": "int", "CONF_OLDER_THAN=CONF_PREFIX + \"older.than\"": "String", "coordOlderThan": "int", "CONF_PURGE_INTERVAL=CONF_PREFIX + \"purge.interval\"": "String", "limit": "int", "CONF_PREFIX=Service.CONF_PREFIX + \"PurgeService.\"": "String", "COORD_CONF_OLDER_THAN=CONF_PREFIX + \"coord.older.than\"": "String"}, "code": ["void", "function", "(", ")", "{", "}"], "memberFunctions": {"init": [["void", "Services services"]], "getInterface": [["Class<? extends Service>"]], "run": [["void"]]}, "className": "PurgeService", "renamed": ["void", "function", "(", ")", "{", "}"], "nl": "Destroy the Purge Jobs Service.", "nlToks": ["Destroy", "the", "Purge", "Jobs", "Service", "."], "path": "pingpangkuangmo/oozie/tree/master/core/src/main/java/org/apache/oozie/service/PurgeService.java", "idx": 393}
{"memberVariables": {"protocol_": "TProtocol", "trans_": "TMemoryInputTransport"}, "code": ["Integer", "function", "(", "byte", "[", "]", "bytes", ",", "TFieldIdEnum", "fieldIdPathFirst", ",", "TFieldIdEnum", "...", "fieldIdPathRest", ")", "{", "return", "(", "Integer", ")", "partialDeserializeField", "(", "TType", ".", "I32", ",", "bytes", ",", "fieldIdPathFirst", ",", "fieldIdPathRest", ")", ";", "}"], "memberFunctions": {"partialDeserializeI64": [["Long", "byte[] bytes", "TFieldIdEnum fieldIdPathFirst", "TFieldIdEnum... fieldIdPathRest"]], "partialDeserializeByte": [["Byte", "byte[] bytes", "TFieldIdEnum fieldIdPathFirst", "TFieldIdEnum... fieldIdPathRest"]], "partialDeserializeSetFieldIdInUnion": [["Short", "byte[] bytes", "TFieldIdEnum fieldIdPathFirst", "TFieldIdEnum... fieldIdPathRest"]], "partialDeserializeByteArray": [["ByteBuffer", "byte[] bytes", "TFieldIdEnum fieldIdPathFirst", "TFieldIdEnum... fieldIdPathRest"]], "partialDeserializeField": [["Object", "byte ttype", "byte[] bytes", "TFieldIdEnum fieldIdPathFirst", "TFieldIdEnum... fieldIdPathRest"]], "partialDeserializeBool": [["Boolean", "byte[] bytes", "TFieldIdEnum fieldIdPathFirst", "TFieldIdEnum... fieldIdPathRest"]], "partialDeserialize": [["void", "TBase tb", "byte[] bytes", "TFieldIdEnum fieldIdPathFirst", "TFieldIdEnum... fieldIdPathRest"]], "partialDeserializeDouble": [["Double", "byte[] bytes", "TFieldIdEnum fieldIdPathFirst", "TFieldIdEnum... fieldIdPathRest"]], "partialDeserializeI16": [["Short", "byte[] bytes", "TFieldIdEnum fieldIdPathFirst", "TFieldIdEnum... fieldIdPathRest"]], "partialDeserializeString": [["String", "byte[] bytes", "TFieldIdEnum fieldIdPathFirst", "TFieldIdEnum... fieldIdPathRest"]], "fromString": [["void", "TBase base", "String data"]], "locateField": [["TField", "byte[] bytes", "TFieldIdEnum fieldIdPathFirst", "TFieldIdEnum... fieldIdPathRest"]], "deserialize": [["void", "TBase base", "byte[] bytes"], ["void", "TBase base", "byte[] bytes", "int offset", "int length"], ["void", "TBase base", "String data", "String charset"]]}, "className": "TDeserializer", "renamed": ["Integer", "function", "(", "byte", "[", "]", "arg0", ",", "TFieldIdEnum", "arg1", ",", "TFieldIdEnum", "...", "arg2", ")", "{", "return", "(", "Integer", ")", "partialDeserializeField", "(", "TType", ".", "I32", ",", "arg0", ",", "arg1", ",", "arg2", ")", ";", "}"], "nl": "Deserialize only an i32 field (addressed by recursively using field id) from a byte record.", "nlToks": ["Deserialize", "only", "an", "i32", "field", "-LRB-", "addressed", "by", "recursively", "using", "field", "id", "-RRB-", "from", "a", "byte", "record", "."], "path": "adityayadav76/internet_of_things_simulator/tree/master/AutoSIM-Automatski/src/org/apache/thrift/TDeserializer.java", "idx": 394}
{"memberVariables": {"mine": "MineOres", "mob": "EntityMobWithInventory", "harvest": "HarvestCrops", "taskMode": "int", "arrow": "ArrowAttack", "shortmine": "BuildMine", "largefarm": "BuildFarm", "longmine": "BuildMine", "runaway": "RunAway", "smallhouse": "BuildHouse", "buildspeed": "int", "smallfarm": "BuildFarm", "sow": "SowSeeds", "loot": "StoreLoot", "melee": "MeleeAttack", "largehouse": "BuildHouse", "fireball": "FireballAttack"}, "code": ["void", "function", "(", "int", "mode", ")", "{", "taskMode", "=", "mode", ";", "}"], "memberFunctions": {"targeter": [["Entity", "int mode"]], "nextStep": [["void"]], "isBuilding": [["boolean"]]}, "className": "FuzzyTasker", "renamed": ["void", "function", "(", "int", "arg0", ")", "{", "taskMode", "=", "arg0", ";", "}"], "nl": "Set the index of the current task.", "nlToks": ["Set", "the", "index", "of", "the", "current", "task", "."], "path": "pregnantboy/fyp/tree/master/forge/src/main/java/fuzzyMod/fuzzyLogic/FuzzyTasker.java", "idx": 396}
{"memberVariables": {"status=-1": "int", "INFINITY=Integer.MAX_VALUE": "int", "request=null": "HttpServletRequest", "base=null": "URI", "response=null": "HttpServletResponse"}, "code": ["Date", "function", "(", ")", "{", "String", "name", "=", "\"If-Modified-Since\"", ";", "if", "(", "this", ".", "request", ".", "getHeader", "(", "name", ")", "==", "null", ")", "return", "null", ";", "return", "new", "Date", "(", "this", ".", "request", ".", "getDateHeader", "(", "name", ")", ")", ";", "}"], "memberFunctions": {"lookup": [["URI", "DAVResource resource"]], "getDepth": [["int"]], "read": [["InputStream"]], "getNormalizedPath": [["String"]], "getDestination": [["URI"]], "getMethod": [["String"]], "getStatus": [["int"]], "hasRequestBody": [["boolean"]], "setStatus": [["void", "int status"]], "setHeader": [["void", "String name", "String value"]], "getOverwrite": [["boolean"]], "getOriginalPath": [["String"]], "setContentType": [["void", "String type"]], "write": [["OutputStream"], ["PrintWriter", "String encoding"]]}, "className": "DAVTransaction", "renamed": ["Date", "function", "(", ")", "{", "String", "loc0", "=", "\"srini_string\"", ";", "if", "(", "this", ".", "request", ".", "getHeader", "(", "loc0", ")", "==", "null", ")", "return", "null", ";", "return", "new", "Date", "(", "this", ".", "request", ".", "getDateHeader", "(", "loc0", ")", ")", ";", "}"], "nl": "Check if the client requested a date-based conditional operation.", "nlToks": ["Check", "if", "the", "client", "requested", "a", "date-based", "conditional", "operation", "."], "path": "pfumagalli/webdav/tree/master/src/main/java/it/could/webdav/DAVTransaction.java", "idx": 397}
{"memberVariables": {"phase": "String", "before=new SortedArraySet<String>()": "Set<String>", "after=new SortedArraySet<String>()": "Set<String>", "id": "String"}, "code": ["void", "function", "(", "Collection", "<", "String", ">", "i", ")", "{", "after", ".", "addAll", "(", "i", ")", ";", "}"], "memberFunctions": {"isGET": [["boolean", "T message"]], "addBefore": [["void", "Collection<String> i"], ["void", "String i"]], "isRequestor": [["boolean", "T message"]], "getAfter": [["Set<String>"]], "getBefore": [["Set<String>"]], "getAdditionalInterceptors": [["Collection<PhaseInterceptor<? extends Message>>"]], "handleFault": [["void", "T message"]], "setBefore": [["void", "Collection<String> i"]], "setAfter": [["void", "Collection<String> i"]], "getId": [["String"]], "getPhase": [["String"]]}, "className": "AbstractPhaseInterceptor", "renamed": ["void", "function", "(", "Collection", "<", "String", ">", "arg0", ")", "{", "after", ".", "addAll", "(", "arg0", ")", ";", "}"], "nl": "Specifies that the current interceptor needs to be added to the  interceptor chain after the specified collection of interceptors.", "nlToks": ["Specifies", "that", "the", "current", "interceptor", "needs", "to", "be", "added", "to", "the", "interceptor", "chain", "after", "the", "specified", "collection", "of", "interceptors", "."], "path": "primesign/cxf/tree/master/core/src/main/java/org/apache/cxf/phase/AbstractPhaseInterceptor.java", "idx": 398}
{"memberVariables": {"messageNumber": "long", "to": "String", "attachments=Collections.emptyList()": "List<InputStream>", "content": "InputStream"}, "code": ["void", "function", "(", "String", "t", ")", "{", "to", "=", "t", ";", "}"], "memberFunctions": {"getAttachments": [["List<InputStream>"]], "setAttachments": [["void", "List<InputStream> attaches"]], "setContent": [["void", "InputStream in"]], "setMessageNumber": [["void", "long mn"]], "getContent": [["InputStream"]], "getTo": [["String"]], "getMessageNumber": [["long"]]}, "className": "RMMessage", "renamed": ["void", "function", "(", "String", "arg0", ")", "{", "to", "=", "arg0", ";", "}"], "nl": "Sets the to address of this message.", "nlToks": ["Sets", "the", "to", "address", "of", "this", "message", "."], "path": "primesign/cxf/tree/master/rt/ws/rm/src/main/java/org/apache/cxf/ws/rm/persistence/RMMessage.java", "idx": 399}
{"memberVariables": {"mob": "EntityMobWithInventory", "path": "PathEntity", "ticker": "int", "world": "World", "runSpeed": "double", "destination": "Vec3", "source": "Entity", "destinationSet": "boolean"}, "code": ["void", "function", "(", "Entity", "source", ")", "{", "this", ".", "source", "=", "source", ";", "}"], "memberFunctions": {"moveToBlock": [["void"]], "nextStep": [["void"]], "setDestination": [["void"]]}, "className": "RunAway", "renamed": ["void", "function", "(", "Entity", "arg0", ")", "{", "this", ".", "source", "=", "arg0", ";", "}"], "nl": "Set the target to run away from.", "nlToks": ["Set", "the", "target", "to", "run", "away", "from", "."], "path": "pregnantboy/fyp/tree/master/forge/src/main/java/fuzzyMod/tasks/RunAway.java", "idx": 401}
{"memberVariables": {"VALUE1=\"value1\".getBytes()": "byte[]", "KEY1=\"key1\".getBytes()": "byte[]", "mThrown=ExpectedException.none()": "ExpectedException", "mOutStream=new ByteArrayOutStream()": "ByteArrayOutStream", "mWriter=new BaseKeyValuePartitionWriter(mOutStream)": "BaseKeyValuePartitionWriter", "VALUE2=\"value2_bar\".getBytes()": "byte[]", "KEY2=\"key2_foo\".getBytes()": "byte[]"}, "code": ["void", "function", "(", ")", "{", "mWriter", ".", "close", "(", ")", ";", "Assert", ".", "assertTrue", "(", "mOutStream", ".", "isClosed", "(", ")", ")", ";", "Assert", ".", "assertFalse", "(", "mOutStream", ".", "isCanceled", "(", ")", ")", ";", "mWriter", ".", "close", "(", ")", ";", "Assert", ".", "assertTrue", "(", "mOutStream", ".", "isClosed", "(", ")", ")", ";", "Assert", ".", "assertFalse", "(", "mOutStream", ".", "isCanceled", "(", ")", ")", ";", "}"], "memberFunctions": {"keyCount": [["void"]], "byteCount": [["void"]], "closeAfterCancel": [["void"]], "putAndGet": [["void"]], "canPutKeyValue": [["void"]], "putAfterCancel": [["void"]], "putAfterClose": [["void"]], "put": [["void"]]}, "className": "BaseKeyValuePartitionWriterTest", "renamed": ["void", "function", "(", ")", "{", "mWriter", ".", "close", "(", ")", ";", "Assert", ".", "assertTrue", "(", "mOutStream", ".", "isClosed", "(", ")", ")", ";", "Assert", ".", "assertFalse", "(", "mOutStream", ".", "isCanceled", "(", ")", ")", ";", "mWriter", ".", "close", "(", ")", ";", "Assert", ".", "assertTrue", "(", "mOutStream", ".", "isClosed", "(", ")", ")", ";", "Assert", ".", "assertFalse", "(", "mOutStream", ".", "isCanceled", "(", ")", ")", ";", "}"], "nl": "Tests  {@link BaseKeyValuePartitionWriter#close()} after{@link BaseKeyValuePartitionWriter#close()}, expecting a close is a no-op after the previous close.", "nlToks": ["Tests", "-LCB-", "@link", "BaseKeyValuePartitionWriter", "#close", "-LRB-", "-RRB-", "-RCB-", "after", "-LCB-", "@link", "BaseKeyValuePartitionWriter", "#close", "-LRB-", "-RRB-", "-RCB-", ",", "expecting", "a", "close", "is", "a", "no-op", "after", "the", "previous", "close", "."], "path": "poemlin/alluxio/tree/master/keyvalue/client/src/test/java/alluxio/client/keyvalue/BaseKeyValuePartitionWriterTest.java", "idx": 402}
{"memberVariables": {"HAS_REMOTE_CONTROL_APIS=Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH": "boolean", "mActualMetadataEditor": "Object", "METADATA_KEY_ARTWORK=100": "int", "mActualRemoteControlClient": "Object"}, "code": ["MetadataEditorCompat", "function", "(", "boolean", "startEmpty", ")", "{", "Object", "metadataEditor", ";", "if", "(", "HAS_REMOTE_CONTROL_APIS", ")", "{", "metadataEditor", "=", "(", "(", "RemoteControlClient", ")", "mActualRemoteControlClient", ")", ".", "editMetadata", "(", "startEmpty", ")", ";", "}", "else", "{", "metadataEditor", "=", "null", ";", "}", "return", "new", "MetadataEditorCompat", "(", "metadataEditor", ")", ";", "}"], "memberFunctions": {"setPlaybackState": [["void", "int state"]], "putBitmap": [["MetadataEditorCompat", "int key", "Bitmap bitmap"]], "apply": [["void"]], "removeFromMediaRouter": [["void", "MediaRouter router"]], "putString": [["MetadataEditorCompat", "int key", "String value"]], "clear": [["void"]], "addToMediaRouter": [["void", "MediaRouter router"]], "getActualRemoteControlClientObject": [["Object"]], "putLong": [["MetadataEditorCompat", "int key", "long value"]], "setTransportControlFlags": [["void", "int transportControlFlags"]]}, "className": "RemoteControlClientCompat", "renamed": ["MetadataEditorCompat", "function", "(", "boolean", "arg0", ")", "{", "Object", "loc0", ";", "if", "(", "HAS_REMOTE_CONTROL_APIS", ")", "{", "loc0", "=", "(", "(", "RemoteControlClient", ")", "mActualRemoteControlClient", ")", ".", "editMetadata", "(", "arg0", ")", ";", "}", "else", "{", "loc0", "=", "null", ";", "}", "return", "new", "MetadataEditorCompat", "(", "loc0", ")", ";", "}"], "nl": "Creates a  {@link android.media.RemoteControlClient.MetadataEditor}.", "nlToks": ["Creates", "a", "-LCB-", "@link", "android.media.RemoteControlClient.MetadataEditor", "-RCB-", "."], "path": "phpeng-ms/CastCompanionLibrary-android/tree/master/src/com/google/android/libraries/cast/companionlibrary/remotecontrol/RemoteControlClientCompat.java", "idx": 403}
{"memberVariables": {"VocabularySize": "int", "CountofWordsInTwenties": "int", "CountofWordsInThirties": "int", "stopWord": "StopWord", "CountofWordsInTeens": "int"}, "code": ["void", "function", "(", "PersonBlogs", "pbBlogs", ",", "HashMap", "<", "String", ",", "HashMap", "<", "String", ",", "Integer", ">>", "naiveBayesMap", ")", "{", "String", "AgeClass", "=", "pbBlogs", ".", "getBloggerAgeClass", "(", ")", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "pbBlogs", ".", "getPosts", "(", ")", ".", "size", "(", ")", ";", "i", "++", ")", "{", "String", "post", "=", "pbBlogs", ".", "getPosts", "(", ")", ".", "get", "(", "i", ")", ";", "String", "[", "]", "cleanPostTokens", "=", "NaiveBayesTrain", ".", "cleanPost", "(", "post", ")", ";", "updateNaiveBayesMapForSinglePost", "(", "cleanPostTokens", ",", "naiveBayesMap", ",", "AgeClass", ")", ";", "}", "}"], "memberFunctions": {"updateNaiveBayesMapForSinglePost": [["void", "String[] cleanPostTokens", "HashMap<String,HashMap<String,Integer>> naiveBayesMap", "String ageClass"]], "getCountofWordsInTeens": [["int"]], "setCountofWordsInThirties": [["void", "int countofWordsInThirties"]], "trainNaiveBayes": [["HashMap<String,HashMap<String,Integer>>", "File cleanXmlFolder", "int numberoftraingposts"]], "updateClassWordCount": [["void", "String ageClass"]], "setVocabularySize": [["void", "int vocabularySize"]], "setCountofWordsInTwenties": [["void", "int countofWordsInTwenties"]], "getVocabularySize": [["int"]], "cleanPost": [["String[]", "String post"]], "removePuctuationMarks": [["String", "String post"]], "setCountofWordsInTeens": [["void", "int countofWordsInTeens"]], "getCountofWordsInTwenties": [["int"]], "getCountofWordsInThirties": [["int"]]}, "className": "NaiveBayesTrain", "renamed": ["void", "function", "(", "PersonBlogs", "arg0", ",", "HashMap", "<", "String", ",", "HashMap", "<", "String", ",", "Integer", ">>", "arg1", ")", "{", "String", "loc0", "=", "arg0", ".", "getBloggerAgeClass", "(", ")", ";", "for", "(", "int", "loc1", "=", "0", ";", "loc1", "<", "arg0", ".", "getPosts", "(", ")", ".", "size", "(", ")", ";", "loc1", "++", ")", "{", "String", "loc2", "=", "arg0", ".", "getPosts", "(", ")", ".", "get", "(", "loc1", ")", ";", "String", "[", "]", "loc3", "=", "NaiveBayesTrain", ".", "cleanPost", "(", "loc2", ")", ";", "updateNaiveBayesMapForSinglePost", "(", "loc3", ",", "arg1", ",", "loc0", ")", ";", "}", "}"], "nl": "Given a persons blogs updates the naive bayes map of word probabilities", "nlToks": ["Given", "a", "persons", "blogs", "updates", "the", "naive", "bayes", "map", "of", "word", "probabilities"], "path": "prap19/Sem3_SourceCode/tree/master/AgeAttribution/src/edu/nlp/ageattr/Baseline/NaiveBayesTrain.java", "idx": 405}
{"memberVariables": {}, "code": ["String", "function", "(", "long", "startTimeNs", ",", "String", "message", ")", "{", "return", "message", "+", "\" took \"", "+", "(", "System", ".", "nanoTime", "(", ")", "-", "startTimeNs", ")", "+", "\" ns.\"", ";", "}"], "memberFunctions": {"getSizeFromBytes": [["String", "long bytes"]], "parseSpaceSize": [["long", "String spaceSize"]], "parametersToString": [["String", "Object... objs"]], "byteBufferToString": [["String", "ByteBuffer buf"]], "formatMode": [["String", "short mode", "boolean directory"]], "formatTimeTakenMs": [["String", "long startTimeMs", "String message"]], "byteArrayToHexString": [["String", "byte[] bytes"], ["String", "byte[] bytes", "String prefix", "String separator"]]}, "className": "FormatUtils", "renamed": ["String", "function", "(", "long", "arg0", ",", "String", "arg1", ")", "{", "return", "arg1", "+", "\"srini_string\"", "+", "(", "System", ".", "nanoTime", "(", ")", "-", "arg0", ")", "+", "\"srini_string\"", ";", "}"], "nl": "Formats time elapsed since the given start time (in nanoseconds).", "nlToks": ["Formats", "time", "elapsed", "since", "the", "given", "start", "time", "-LRB-", "in", "nanoseconds", "-RRB-", "."], "path": "poemlin/alluxio/tree/master/core/common/src/main/java/alluxio/util/FormatUtils.java", "idx": 408}
{"memberVariables": {"HEADER_CACHE_CONTROL=\"Cache-Control\"": "String", "LOG=LoggerFactory.getLogger(ControllerUtils.class)": "Logger", "HEADER_PRAGMA=\"Pragma\"": "String"}, "code": ["void", "function", "(", "final", "HttpServletRequest", "request", ")", "{", "LOG", ".", "debug", "(", "getRequestHeaders", "(", "request", ")", ".", "toString", "(", ")", ")", ";", "}"], "memberFunctions": {"toHeaderMap": [["Map<String,String>", "final HttpServletRequest request"]], "preventCaching": [["void", "final HttpServletResponse response"]], "getRequestHeaders": [["String", "final HttpServletRequest request"]], "populate": [["void", "final Object bean", "final Map<String,String> params", "final Collection<String> required"], ["void", "final Object bean", "final Map<String,String> params"], ["void", "final Object bean", "final Map<String,String> params", "final String... required"], ["void", "final Object bean", "final HttpServletRequest request"], ["void", "final Object bean", "final HttpServletRequest request", "final String... required"]], "toParamMap": [["Map<String,String>", "final HttpServletRequest request"]], "sign": [["String", "final HttpServletRequest request", "final String baseUrl", "final Map<String,String> paramMap"]], "createCookieMap": [["Map<String,String>", "final HttpServletRequest request"]], "hasParam": [["boolean", "final HttpServletRequest request", "final String paramName"]], "printCookies": [["void", "final HttpServletRequest request"]], "getKeyName": [["String", "final HttpServletRequest request"]], "verifyMethod": [["boolean", "final HttpServletRequest request", "final HttpServletResponse response", "final String... methods"]], "signatureMatches": [["boolean", "final HttpServletRequest request", "final String key"]]}, "className": "ControllerUtils", "renamed": ["void", "function", "(", "final", "HttpServletRequest", "arg0", ")", "{", "LOG", ".", "debug", "(", "getRequestHeaders", "(", "arg0", ")", ".", "toString", "(", ")", ")", ";", "}"], "nl": "Prints request headers.", "nlToks": ["Prints", "request", "headers", "."], "path": "adamfisk/littleshoot-client/tree/master/client/services/src/main/java/org/lastbamboo/client/handlers/ControllerUtils.java", "idx": 409}
{"memberVariables": {"mReader": "JournalReader", "mLatestSequenceNumber=0": "long", "mMaster": "Master", "mJournal": "Journal", "LOG=LoggerFactory.getLogger(Constants.LOGGER_TYPE)": "Logger"}, "code": ["void", "function", "(", "boolean", "applyToMaster", ")", "{", "LOG", ".", "info", "(", "\"{}: Loading checkpoint file: {}\"", ",", "mMaster", ".", "getName", "(", ")", ",", "mJournal", ".", "getCheckpointFilePath", "(", ")", ")", ";", "JournalInputStream", "is", "=", "mReader", ".", "getCheckpointInputStream", "(", ")", ";", "if", "(", "applyToMaster", ")", "{", "mMaster", ".", "processJournalCheckpoint", "(", "is", ")", ";", "}", "mLatestSequenceNumber", "=", "is", ".", "getLatestSequenceNumber", "(", ")", ";", "is", ".", "close", "(", ")", ";", "}"], "memberFunctions": {"getLatestSequenceNumber": [["long"]], "isValid": [["boolean"]], "checkpointExists": [["boolean"]], "processNextJournalLogFiles": [["int"]]}, "className": "JournalTailer", "renamed": ["void", "function", "(", "boolean", "arg0", ")", "{", "LOG", ".", "info", "(", "\"srini_string\"", ",", "mMaster", ".", "getName", "(", ")", ",", "mJournal", ".", "getCheckpointFilePath", "(", ")", ")", ";", "JournalInputStream", "loc0", "=", "mReader", ".", "getCheckpointInputStream", "(", ")", ";", "if", "(", "arg0", ")", "{", "mMaster", ".", "processJournalCheckpoint", "(", "loc0", ")", ";", "}", "mLatestSequenceNumber", "=", "loc0", ".", "getLatestSequenceNumber", "(", ")", ";", "loc0", ".", "close", "(", ")", ";", "}"], "nl": "Loads and (optionally) processes the journal checkpoint file.", "nlToks": ["Loads", "and", "-LRB-", "optionally", "-RRB-", "processes", "the", "journal", "checkpoint", "file", "."], "path": "poemlin/alluxio/tree/master/core/server/src/main/java/alluxio/master/journal/JournalTailer.java", "idx": 410}
{"memberVariables": {"mCurrPressure": "float", "mCurrEvent": "MotionEvent", "PRESSURE_THRESHOLD=0.67f": "float", "mPrevPressure": "float", "mGestureInProgress": "boolean", "mPrevEvent": "MotionEvent", "mContext": "Context", "mTimeDelta": "long"}, "code": ["long", "function", "(", ")", "{", "return", "mTimeDelta", ";", "}"], "memberFunctions": {"updateStateByEvent": [["void", "MotionEvent curr"]], "handleStartProgressEvent": [["void", "int actionCode", "MotionEvent event"]], "onTouchEvent": [["boolean", "MotionEvent event"]], "resetState": [["void"]], "handleInProgressEvent": [["void", "int actionCode", "MotionEvent event"]], "isInProgress": [["boolean"]], "getEventTime": [["long"]]}, "className": "BaseGestureDetector", "renamed": ["long", "function", "(", ")", "{", "return", "mTimeDelta", ";", "}"], "nl": "Return the time difference in milliseconds between the previous accepted GestureDetector event and the current GestureDetector event.", "nlToks": ["Return", "the", "time", "difference", "in", "milliseconds", "between", "the", "previous", "accepted", "GestureDetector", "event", "and", "the", "current", "GestureDetector", "event", "."], "path": "0brauliofonseca/PhotoEditor/tree/master/library/src/main/java/com/almeros/android/multitouch/BaseGestureDetector.java", "idx": 411}
{"memberVariables": {"logger=LoggerFactory.getLogger(getClass())": "org.slf4j.Logger", "clientEndpoint": "UDPEndPoint", "clientSession": "ClientSession"}, "code": ["void", "function", "(", "byte", "[", "]", "data", ")", "{", "clientSession", ".", "getSocket", "(", ")", ".", "doWrite", "(", "data", ")", ";", "}"], "memberFunctions": {"sendBlocking": [["void", "byte[] data"]], "read": [["int", "byte[] data"]], "flush": [["void"]], "getStatistics": [["UDTStatistics"]], "getSocket": [["Socket"]], "getOutputStream": [["OutputStream"]], "getEndpoint": [["UDPEndPoint"]], "getInputStream": [["InputStream"]], "connect": [["void", "String host", "int port"], ["void", "InetAddress address", "int port"]], "shutdown": [["void"]]}, "className": "UDTClient", "renamed": ["void", "function", "(", "byte", "[", "]", "arg0", ")", "{", "clientSession", ".", "getSocket", "(", ")", ".", "doWrite", "(", "arg0", ")", ";", "}"], "nl": "sends the given data asynchronously", "nlToks": ["sends", "the", "given", "data", "asynchronously"], "path": "adamfisk/littleshoot-client/tree/master/common/udt/src/main/java/udt/UDTClient.java", "idx": 412}
{"memberVariables": {"instance": "GSASentence", "EXAMPLE=\"$GPGSA,A,3,02,,,07,,09,24,26,,,,,1.6,1.6,1.0*3D\"": "String", "empty": "GSASentence"}, "code": ["void", "function", "(", ")", "{", "String", "[", "]", "ids", "=", "{", "\"02\"", ",", "\"04\"", ",", "\"06\"", ",", "\"08\"", ",", "\"10\"", ",", "\"12\"", "}", ";", "instance", ".", "setSatelliteIds", "(", "ids", ")", ";", "String", "[", "]", "satellites", "=", "instance", ".", "getSatelliteIds", "(", ")", ";", "assertEquals", "(", "ids", ".", "length", ",", "satellites", ".", "length", ")", ";", "int", "i", "=", "0", ";", "for", "(", "String", "id", ":", "ids", ")", "{", "assertEquals", "(", "id", ",", "satellites", "[", "i", "++", "]", ")", ";", "}", "}"], "memberFunctions": {"testGetFixStatus": [["void"]], "testSetFixStatus": [["void"]], "testGetPositionDOP": [["void"]], "testGetSatelliteIds": [["void"]], "testConstructor": [["void"]], "testGetHorizontalDOP": [["void"]], "testSetPositionDOP": [["void"]], "testGetVerticalDOP": [["void"]], "testSetFaaMode": [["void"]], "testSetHorizontalDOP": [["void"]], "setUp": [["void"]], "testGetFaaMode": [["void"]], "testSetVerticalDOP": [["void"]]}, "className": "GSATest", "renamed": ["void", "function", "(", ")", "{", "String", "[", "]", "loc0", "=", "{", "\"srini_string\"", ",", "\"srini_string\"", ",", "\"srini_string\"", ",", "\"srini_string\"", ",", "\"srini_string\"", ",", "\"srini_string\"", "}", ";", "instance", ".", "setSatelliteIds", "(", "loc0", ")", ";", "String", "[", "]", "loc1", "=", "instance", ".", "getSatelliteIds", "(", ")", ";", "assertEquals", "(", "loc0", ".", "length", ",", "loc1", ".", "length", ")", ";", "int", "loc2", "=", "0", ";", "for", "(", "String", "loc3", ":", "loc0", ")", "{", "assertEquals", "(", "loc3", ",", "loc1", "[", "loc2", "++", "]", ")", ";", "}", "}"], "nl": "Test method for {@link net.sf.marineapi.nmea.parser.GSAParser#setSatellitesIds(String[])}.", "nlToks": ["Test", "method", "for", "-LCB-", "@link", "net.sf.marineapi.nmea.parser.GSAParser", "#setSatellitesIds", "-LRB-", "String", "-LSB-", "-RSB-", "-RRB-", "-RCB-", "."], "path": "pkoziol/marine-api/tree/master/src/test/java/net/sf/marineapi/nmea/parser/GSATest.java", "idx": 413}
{"memberVariables": {"logger=LoggerFactory.getLogger(getClass())": "org.slf4j.Logger", "clientEndpoint": "UDPEndPoint", "clientSession": "ClientSession"}, "code": ["void", "function", "(", "String", "host", ",", "int", "port", ")", "{", "connect", "(", "InetAddress", ".", "getByName", "(", "host", ")", ",", "port", ")", ";", "}"], "memberFunctions": {"sendBlocking": [["void", "byte[] data"]], "read": [["int", "byte[] data"]], "flush": [["void"]], "getStatistics": [["UDTStatistics"]], "getSocket": [["Socket"]], "getOutputStream": [["OutputStream"]], "getEndpoint": [["UDPEndPoint"]], "send": [["void", "byte[] data"]], "getInputStream": [["InputStream"]], "shutdown": [["void"]]}, "className": "UDTClient", "renamed": ["void", "function", "(", "String", "arg0", ",", "int", "arg1", ")", "{", "connect", "(", "InetAddress", ".", "getByName", "(", "arg0", ")", ",", "arg1", ")", ";", "}"], "nl": "establishes a connection to the given server.  Starts the sender thread.", "nlToks": ["establishes", "a", "connection", "to", "the", "given", "server", ".", "Starts", "the", "sender", "thread", "."], "path": "adamfisk/littleshoot-client/tree/master/common/udt/src/main/java/udt/UDTClient.java", "idx": 415}
{"memberVariables": {"coinbase": "boolean", "serialVersionUID=-8744924157056340509L": "long", "index": "long", "value": "Coin", "scriptBytes": "byte[]", "hash": "Sha256Hash", "height": "int"}, "code": ["long", "function", "(", ")", "{", "return", "index", ";", "}"], "memberFunctions": {"getValue": [["Coin"]], "getHeight": [["int"]], "getHash": [["Sha256Hash"]], "isCoinbase": [["boolean"]], "hashCode": [["int"]], "serializeToStream": [["void", "OutputStream bos"]], "equals": [["boolean", "Object o"]], "toString": [["String"]], "getScriptBytes": [["byte[]"]]}, "className": "StoredTransactionOutput", "renamed": ["long", "function", "(", ")", "{", "return", "index", ";", "}"], "nl": "The index of this output in the transaction which holds it.", "nlToks": ["The", "index", "of", "this", "output", "in", "the", "transaction", "which", "holds", "it", "."], "path": "1000000000001/bitcoinj/tree/master/core/src/main/java/org/bitcoinj/core/StoredTransactionOutput.java", "idx": 416}
{"memberVariables": {"dataval": "Constant", "blocknum": "int"}, "code": ["Constant", "function", "(", ")", "{", "return", "dataval", ";", "}"], "memberFunctions": {"blockNumber": [["int"]]}, "className": "DirEntry", "renamed": ["Constant", "function", "(", ")", "{", "return", "dataval", ";", "}"], "nl": "Returns the dataval component of the entry", "nlToks": ["Returns", "the", "dataval", "component", "of", "the", "entry"], "path": "prerit2803/DBMSProject2/tree/master/simpledb/index/btree/DirEntry.java", "idx": 418}
{"memberVariables": {"identifier": "String", "wsseValueType": "String", "useKeyIdentifier": "boolean", "useDirectReference": "boolean", "wsse11TokenType": "String"}, "code": ["void", "function", "(", "String", "wsseValueType", ")", "{", "this", ".", "wsseValueType", "=", "wsseValueType", ";", "}"], "memberFunctions": {"setWsse11TokenType": [["void", "String wsse11TokenType"]], "getWsse11TokenType": [["String"]], "getIdentifier": [["String"]], "setIdentifier": [["void", "String identifier"]], "setUseDirectReference": [["void", "boolean useDirectReference"]], "isUseKeyIdentifier": [["boolean"]], "getWsseValueType": [["String"]], "isUseDirectReference": [["boolean"]], "setUseKeyIdentifier": [["void", "boolean useKeyIdentifier"]]}, "className": "TokenReference", "renamed": ["void", "function", "(", "String", "arg0", ")", "{", "this", ".", "wsseValueType", "=", "arg0", ";", "}"], "nl": "Set the wsse ValueType attribute", "nlToks": ["Set", "the", "wsse", "ValueType", "attribute"], "path": "primesign/cxf/tree/master/services/sts/sts-core/src/main/java/org/apache/cxf/sts/token/provider/TokenReference.java", "idx": 419}
{"memberVariables": {}, "code": ["Map", "<", "String", ",", "String", ">", "function", "(", "Parcel", "in", ")", "{", "if", "(", "in", "==", "null", ")", "{", "return", "null", ";", "}", "int", "size", "=", "in", ".", "readInt", "(", ")", ";", "if", "(", "size", "==", "-", "1", ")", "{", "return", "null", ";", "}", "Map", "<", "String", ",", "String", ">", "map", "=", "new", "HashMap", "<", "String", ",", "String", ">", "(", ")", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "size", ";", "i", "++", ")", "{", "String", "key", "=", "in", ".", "readString", "(", ")", ";", "map", ".", "put", "(", "key", ",", "in", ".", "readString", "(", ")", ")", ";", "}", "return", "map", ";", "}"], "memberFunctions": {"writeHashMap": [["void", "Map<K,V> map", "Parcel out", "int flags"]], "writeHashMapStringAndString": [["void", "Map<String,String> map", "Parcel out", "int flags"]], "readHashMapStringKey": [["Map<String,V>", "Parcel in", "ClassLoader loader"]], "readHashMap": [["Map<K,V>", "Parcel in", "ClassLoader loader"]], "readBoolean": [["boolean", "Parcel in"]], "writeHashMapStringKey": [["void", "Map<String,V> map", "Parcel out", "int flags"]], "writeBoolean": [["void", "boolean b", "Parcel out"]]}, "className": "UtilParcel", "renamed": ["Map", "<", "String", ",", "String", ">", "function", "(", "Parcel", "arg0", ")", "{", "if", "(", "arg0", "==", "null", ")", "{", "return", "null", ";", "}", "int", "loc0", "=", "arg0", ".", "readInt", "(", ")", ";", "if", "(", "loc0", "==", "-", "1", ")", "{", "return", "null", ";", "}", "Map", "<", "String", ",", "String", ">", "loc1", "=", "new", "HashMap", "<", "String", ",", "String", ">", "(", ")", ";", "for", "(", "int", "loc2", "=", "0", ";", "loc2", "<", "loc0", ";", "loc2", "++", ")", "{", "String", "loc3", "=", "arg0", ".", "readString", "(", ")", ";", "loc1", ".", "put", "(", "loc3", ",", "arg0", ".", "readString", "(", ")", ")", ";", "}", "return", "loc1", ";", "}"], "nl": "Read a HashMap from a Parcel, class of key and value are both String", "nlToks": ["Read", "a", "HashMap", "from", "a", "Parcel", ",", "class", "of", "key", "and", "value", "are", "both", "String"], "path": "13383848500/dashihui/tree/master/MIT-Afford/app/src/main/java/com/dashihui/afford/util/parcel/UtilParcel.java", "idx": 420}
{"memberVariables": {"A": "DenseMatrix64F", "d": "DenseMatrix64F", "jacobian": "DenseMatrix64F", "finalCost": "double", "H": "DenseMatrix64F", "tempDH": "DenseMatrix64F", "initialLambda": "double", "initialCost": "double", "tempParam": "DenseMatrix64F", "temp0": "DenseMatrix64F", "negDelta": "DenseMatrix64F", "temp1": "DenseMatrix64F", "DELTA=1e-8": "double", "func": "Function", "param": "DenseMatrix64F"}, "code": ["void", "function", "(", "DenseMatrix64F", "A", ",", "DenseMatrix64F", "H", ",", "double", "lambda", ")", "{", "final", "int", "numParam", "=", "param", ".", "getNumElements", "(", ")", ";", "A", ".", "set", "(", "H", ")", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "numParam", ";", "i", "++", ")", "{", "A", ".", "set", "(", "i", ",", "i", ",", "A", ".", "get", "(", "i", ",", "i", ")", "+", "lambda", ")", ";", "}", "}"], "memberFunctions": {"compute": [["void", "DenseMatrix64F param", "DenseMatrix64F x", "DenseMatrix64F y"]], "cost": [["double", "DenseMatrix64F param", "DenseMatrix64F X", "DenseMatrix64F Y"]], "optimize": [["boolean", "DenseMatrix64F initParam", "DenseMatrix64F X", "DenseMatrix64F Y"]], "adjustParam": [["boolean", "DenseMatrix64F X", "DenseMatrix64F Y", "double prevCost"]], "getParameters": [["DenseMatrix64F"]], "computeNumericalJacobian": [["void", "DenseMatrix64F param", "DenseMatrix64F pt", "DenseMatrix64F deriv"]], "getInitialCost": [["double"]], "computeDandH": [["void", "DenseMatrix64F param", "DenseMatrix64F x", "DenseMatrix64F y"]], "configure": [["void", "DenseMatrix64F initParam", "DenseMatrix64F X", "DenseMatrix64F Y"]], "getFinalCost": [["double"]]}, "className": "LevenbergMarquardt", "renamed": ["void", "function", "(", "DenseMatrix64F", "arg0", ",", "DenseMatrix64F", "arg1", ",", "double", "arg2", ")", "{", "final", "int", "loc0", "=", "param", ".", "getNumElements", "(", ")", ";", "arg0", ".", "set", "(", "arg1", ")", ";", "for", "(", "int", "loc1", "=", "0", ";", "loc1", "<", "loc0", ";", "loc1", "++", ")", "{", "arg0", ".", "set", "(", "loc1", ",", "loc1", ",", "arg0", ".", "get", "(", "loc1", ",", "loc1", ")", "+", "arg2", ")", ";", "}", "}"], "nl": "A = H + lambdaI   where I is an identity matrix.", "nlToks": ["A", "=", "H", "+", "lambdaI", "where", "I", "is", "an", "identity", "matrix", "."], "path": "adamaulia/efficient-java-matrix-library/tree/master/examples/src/org/ejml/example/LevenbergMarquardt.java", "idx": 424}
{"memberVariables": {"date": "Date", "number": "Integer", "singleNestedComplexNode": "ComplexNode", "nestedComplexNodes": "List<ComplexNode>", "_double": "Double", "serialVersionUID=1L": "long", "id": "String", "decimal": "BigDecimal"}, "code": ["void", "function", "(", "ComplexNode", "value", ")", "{", "this", ".", "singleNestedComplexNode", "=", "value", ";", "}"], "memberFunctions": {"getNumber": [["Integer"]], "setDouble": [["void", "Double value"]], "getDecimal": [["BigDecimal"]], "setDecimal": [["void", "BigDecimal value"]], "getNestedComplexNodes": [["List<ComplexNode>"]], "getDouble": [["Double"]], "setId": [["void", "String value"]], "setDate": [["void", "Date value"]], "getId": [["String"]], "getDate": [["Date"]], "getSingleNestedComplexNode": [["ComplexNode"]], "setNumber": [["void", "Integer value"]]}, "className": "ComplexNode", "renamed": ["void", "function", "(", "ComplexNode", "arg0", ")", "{", "this", ".", "singleNestedComplexNode", "=", "arg0", ";", "}"], "nl": "Sets the value of the singleNestedComplexNode property.", "nlToks": ["Sets", "the", "value", "of", "the", "singleNestedComplexNode", "property", "."], "path": "phbenisc/xmlunit/tree/master/xmlunit-core/src/test/java/org/xmlunit/builder/jaxb/ComplexNode.java", "idx": 425}
{"memberVariables": {"LOGIN_MESSAGE=\"Thanks for logging in!\"": "String", "rootFolder": "BoxFolder", "MISSING_FOLDER_MESSAGE=\"This folder is not located in your box account\"": "String", "currentFolder": "BoxFolder", "devToken": "String", "tb": "TextBot", "INDENT_APPEND=\"    \"": "String"}, "code": ["BoxFolder", "function", "(", "String", "name", ")", "{", "return", "this", ".", "getFolder", "(", "rootFolder", ",", "name", ")", ";", "}"], "memberFunctions": {"goToFolder": [["void", "String name"]], "uploadFile": [["void", "String filePath", "String name"]], "downloadFromCurrent": [["void", "String name", "String location"]], "createNewFolder": [["void", "String name"]], "deleteFolder": [["void", "String name"]], "listFolder": [["void", "BoxFolder folder", "int depth"]], "uploadFolder": [["void", "String folder"], ["void", "BoxFolder current", "File folder"]], "listFolders": [["void"]], "notify": [["void", "String message"]], "getCurrentFiles": [["List<String>"]], "uploadFileToFolder": [["void", "String filePath", "String folderName", "String name"]], "setUpNotifications": [["void", "String resources", "String accountSID", "String authToken", "String number"]], "goToRootFolder": [["void"]]}, "className": "CloudStorage", "renamed": ["BoxFolder", "function", "(", "String", "arg0", ")", "{", "return", "this", ".", "getFolder", "(", "rootFolder", ",", "arg0", ")", ";", "}"], "nl": "Returns a specific folder in the Box account", "nlToks": ["Returns", "a", "specific", "folder", "in", "the", "Box", "account"], "path": "adamtache/tower-defense-engine/tree/master/src/utility/CloudStorage.java", "idx": 426}
{"memberVariables": {"name": "String", "units": "String", "type": "String", "value": "Double"}, "code": ["void", "function", "(", "String", "units", ")", "{", "this", ".", "units", "=", "units", ";", "}"], "memberFunctions": {"setName": [["void", "String name"]], "getValue": [["double"]], "getName": [["String"]], "getType": [["String"]], "setValue": [["void", "double value"]], "getUnits": [["String"]], "isEmpty": [["boolean"]], "setType": [["void", "String type"]]}, "className": "Measurement", "renamed": ["void", "function", "(", "String", "arg0", ")", "{", "this", ".", "units", "=", "arg0", ";", "}"], "nl": "Sets the units of measurement.", "nlToks": ["Sets", "the", "units", "of", "measurement", "."], "path": "pkoziol/marine-api/tree/master/src/main/java/net/sf/marineapi/nmea/util/Measurement.java", "idx": 432}
{"memberVariables": {"i": "int", "ZERO=new ChildNumber(0)": "ChildNumber", "ONE=new ChildNumber(1)": "ChildNumber", "ZERO_HARDENED=new ChildNumber(0,true)": "ChildNumber", "HARDENED_BIT=0x80000000": "int"}, "code": ["int", "function", "(", ")", "{", "return", "i", ";", "}"], "memberFunctions": {"getI": [["int"]], "hashCode": [["int"]], "num": [["int"]], "equals": [["boolean", "Object o"]], "hasHardenedBit": [["boolean", "int a"]], "isHardened": [["boolean"]], "toString": [["String"]]}, "className": "ChildNumber", "renamed": ["int", "function", "(", ")", "{", "return", "i", ";", "}"], "nl": "Returns the uint32 encoded form of the path element, including the most significant bit.", "nlToks": ["Returns", "the", "uint32", "encoded", "form", "of", "the", "path", "element", ",", "including", "the", "most", "significant", "bit", "."], "path": "1000000000001/bitcoinj/tree/master/core/src/main/java/org/bitcoinj/crypto/ChildNumber.java", "idx": 435}
{"memberVariables": {"webEngine": "WebEngine"}, "code": ["void", "function", "(", "String", "url", ")", "{", "webEngine", ".", "load", "(", "url", ")", ";", "}"], "memberFunctions": {"loadContent": [["void", "String content"]], "setOnAlert": [["void", "EventHandler<WebEvent<String>> eventHandler"]], "executeScript": [["Object", "String command"]], "getLoadWorker": [["Worker<Void>"]], "setOnError": [["void", "EventHandler<WebErrorEvent> eventHandler"]]}, "className": "JavaFxWebEngine", "renamed": ["void", "function", "(", "String", "arg0", ")", "{", "webEngine", ".", "load", "(", "arg0", ")", ";", "}"], "nl": "Loads the specified URL", "nlToks": ["Loads", "the", "specified", "URL"], "path": "presly808/GMapsFx/tree/master/src/main/java/com/lynden/gmapsfx/javascript/JavaFxWebEngine.java", "idx": 436}
{"memberVariables": {"propertyChangeSupport=new PropertyChangeSupport(this)": "PropertyChangeSupport"}, "code": ["void", "function", "(", "PropertyChangeListener", "listener", ")", "{", "propertyChangeSupport", ".", "addPropertyChangeListener", "(", "listener", ")", ";", "}"], "memberFunctions": {"getPropertyChangeListeners": [["PropertyChangeListener[]"], ["PropertyChangeListener[]", "String propertyName"]], "firePropertyChange": [["void", "String propertyName", "Object oldValue", "Object newValue"], ["void", "PropertyChangeEvent evt"]], "fireIndexedPropertyChange": [["void", "String propertyName", "int index", "Object oldValue", "Object newValue"]], "removePropertyChangeListener": [["void", "PropertyChangeListener listener"], ["void", "String propertyName", "PropertyChangeListener listener"]], "hasPropertyChangeListeners": [["boolean", "String propertyName"]]}, "className": "AbstractBean", "renamed": ["void", "function", "(", "PropertyChangeListener", "arg0", ")", "{", "propertyChangeSupport", ".", "addPropertyChangeListener", "(", "arg0", ")", ";", "}"], "nl": "Add PropertyChangeListener.", "nlToks": ["Add", "PropertyChangeListener", "."], "path": "0xwindows/WS-Attacker/tree/master/framework/src/main/java/wsattacker/main/composition/AbstractBean.java", "idx": 437}
{"memberVariables": {"xmiId": "String", "systemId": "String"}, "code": ["String", "function", "(", ")", "{", "return", "xmiId", ";", "}"], "memberFunctions": {"getSystemId": [["String"]]}, "className": "XmiReference", "renamed": ["String", "function", "(", ")", "{", "return", "xmiId", ";", "}"], "nl": "Get the xmi.id for the reference. This must be unique within the given XMI file (system ID), but is not guaranteed to be globally unique.", "nlToks": ["Get", "the", "xmi.id", "for", "the", "reference", ".", "This", "must", "be", "unique", "within", "the", "given", "XMI", "file", "-LRB-", "system", "ID", "-RRB-", ",", "but", "is", "not", "guaranteed", "to", "be", "globally", "unique", "."], "path": "pichiliani/CoArgoUML/tree/master/v0.24/fonte/src/argouml-core-model-mdr/src/org/argouml/model/mdr/XmiReference.java", "idx": 439}
{"memberVariables": {"fileSystemWorkAreaServiceImpl": "IFileSystemWorkAreaService", "logger=LoggerUtil.getLogger(FinalizeFetchingProcessActivity.class)": "Logger", "fetcherRunRecorderServiceImpl": "IFetcherRunRecorderService", "fetcherWorkAreaServiceImpl": "IFetcherWorkAreaService"}, "code": ["boolean", "function", "(", "ActivityRequest", "activityRequest", ")", "{", "if", "(", "activityRequest", "==", "null", ")", "{", "return", "false", ";", "}", "if", "(", "activityRequest", ".", "getFeedId", "(", ")", "==", "null", ")", "{", "return", "false", ";", "}", "return", "activityRequest", ".", "getConfigProperties", "(", ")", "!=", "null", ";", "}"], "memberFunctions": {"releaseResources": [["void", "ActivityRequest activityRequest"]], "perform": [["ActivityResponse", "ActivityRequest activityRequest"]]}, "className": "FinalizeFetchingProcessActivity", "renamed": ["boolean", "function", "(", "ActivityRequest", "arg0", ")", "{", "if", "(", "arg0", "==", "null", ")", "{", "return", "false", ";", "}", "if", "(", "arg0", ".", "getFeedId", "(", ")", "==", "null", ")", "{", "return", "false", ";", "}", "return", "arg0", ".", "getConfigProperties", "(", ")", "!=", "null", ";", "}"], "nl": "Validate the incoming request for mandatory parameters.", "nlToks": ["Validate", "the", "incoming", "request", "for", "mandatory", "parameters", "."], "path": "pkesireddy/portico_fletcher/tree/master/fetcher-master/fetcher-core/src/main/java/org/ithaka/cm/fetcher/core/activites/FinalizeFetchingProcessActivity.java", "idx": 440}
{"memberVariables": {"mCheckpointPath": "String", "mCheckpointRead=false": "boolean", "mCurrentLogNumber=Journal.FIRST_COMPLETED_LOG_NUMBER": "long", "mCheckpointOpenedTime=-1": "long", "mJournal": "Journal", "mUfs": "UnderFileSystem", "mCheckpointLastModifiedTime=-1": "long", "LOG=LoggerFactory.getLogger(Constants.LOGGER_TYPE)": "Logger"}, "code": ["boolean", "function", "(", ")", "{", "return", "mCheckpointRead", "&&", "(", "mCheckpointOpenedTime", "==", "mCheckpointLastModifiedTime", ")", ";", "}"], "memberFunctions": {"getNextInputStream": [["JournalInputStream"]], "getCheckpointInputStream": [["JournalInputStream"]], "getCheckpointLastModifiedTimeMs": [["long"]]}, "className": "JournalReader", "renamed": ["boolean", "function", "(", ")", "{", "return", "mCheckpointRead", "&&", "(", "mCheckpointOpenedTime", "==", "mCheckpointLastModifiedTime", ")", ";", "}"], "nl": "Checks to see if the journal checkpoint has not been updated. If it has been updated since the creation of this reader, this reader is no longer valid.", "nlToks": ["Checks", "to", "see", "if", "the", "journal", "checkpoint", "has", "not", "been", "updated", ".", "If", "it", "has", "been", "updated", "since", "the", "creation", "of", "this", "reader", ",", "this", "reader", "is", "no", "longer", "valid", "."], "path": "poemlin/alluxio/tree/master/core/server/src/main/java/alluxio/master/journal/JournalReader.java", "idx": 444}
{"memberVariables": {"EXAMPLE=\"$GPRMC,120044.567,A,6011.552,N,02501.941,E,000.0,360.0,160705,006.1,E,A*0B\"": "String", "rmc": "RMCParser", "empty": "RMCParser"}, "code": ["void", "function", "(", ")", "{", "Time", "t", "=", "rmc", ".", "getTime", "(", ")", ";", "assertNotNull", "(", "t", ")", ";", "assertEquals", "(", "12", ",", "t", ".", "getHour", "(", ")", ")", ";", "assertEquals", "(", "0", ",", "t", ".", "getMinutes", "(", ")", ")", ";", "assertEquals", "(", "44.567", ",", "t", ".", "getSeconds", "(", ")", ",", "0.001", ")", ";", "}"], "memberFunctions": {"testSetFaaModeWhenOmitted": [["void"]], "testSetDirectionOfVariationWithInvalidDirection": [["void"]], "testGetCorrectedCourse": [["void"]], "testGetDataStatus": [["void"]], "testConstructor": [["void"]], "testSetCourse": [["void"]], "testSetFaaMode": [["void"]], "testSetVariation": [["void"]], "setUp": [["void"]], "testGetMonth": [["void"]], "testGetCourse": [["void"]], "testSetDate": [["void"]], "testGetYear": [["void"]], "testSetDataStatus": [["void"]], "testGetDirectionOfVariation": [["void"]], "testGetDate": [["void"]], "testGetMagneticVariation": [["void"]], "testSetPosition": [["void"]], "testGetPosition": [["void"]], "testSetDirectionOfVariation": [["void"]], "testSetTime": [["void"]], "testGetDay": [["void"]], "testGetSpeed": [["void"]], "testGetFaaMode": [["void"]], "testSetSpeed": [["void"]]}, "className": "RMCTest", "renamed": ["void", "function", "(", ")", "{", "Time", "loc0", "=", "rmc", ".", "getTime", "(", ")", ";", "assertNotNull", "(", "loc0", ")", ";", "assertEquals", "(", "12", ",", "loc0", ".", "getHour", "(", ")", ")", ";", "assertEquals", "(", "0", ",", "loc0", ".", "getMinutes", "(", ")", ")", ";", "assertEquals", "(", "44.567", ",", "loc0", ".", "getSeconds", "(", ")", ",", "0.001", ")", ";", "}"], "nl": "Test method for  {@link net.sf.marineapi.nmea.parser.RMCParser#getTime()}.", "nlToks": ["Test", "method", "for", "-LCB-", "@link", "net.sf.marineapi.nmea.parser.RMCParser", "#getTime", "-LRB-", "-RRB-", "-RCB-", "."], "path": "pkoziol/marine-api/tree/master/src/test/java/net/sf/marineapi/nmea/parser/RMCTest.java", "idx": 445}
{"memberVariables": {"DEFAULT_LOCK_TIMEOUT=\"oozie.command.default.lock.timeout\"": "String", "LOG=XLog.getLog(XCommand.class)": "XLog", "dryrun=false": "boolean", "logInfo": "XLog.Info", "priority": "int", "type": "String", "commandQueue": "Map<Long,List<XCommand<?>>>", "used=false": "boolean", "name": "String", "createdTime": "long", "lock": "MemoryLocks.LockToken", "INSTRUMENTATION_GROUP=\"commands\"": "String", "instrumentation": "Instrumentation"}, "code": ["void", "function", "(", ")", "{", "}"], "memberFunctions": {"loadState": [["void"]], "getName": [["String"]], "getLockTimeOut": [["long"]], "releaseLock": [["void"]], "eagerVerifyPrecondition": [["void"]], "execute": [["T"]], "resetUsed": [["void"]], "getEntityKey": [["String"]], "getInstrumentation": [["Instrumentation"]], "call": [["T"]], "verifyPrecondition": [["void"]], "isLockRequired": [["boolean"]], "getType": [["String"]], "acquireLock": [["void"]], "getPriority": [["int"]], "getCreatedTime": [["long"]], "queue": [["void", "XCommand<?> command"], ["void", "XCommand<?> command", "long msDelay"]]}, "className": "XCommand", "renamed": ["void", "function", "(", ")", "{", "}"], "nl": "Load the necessary state to perform an eager precondition check.  This implementation does a NOP.  Subclasses should override this method and load the state needed to do an eager precondition check.  A trivial implementation is calling {link #loadState}.", "nlToks": ["Load", "the", "necessary", "state", "to", "perform", "an", "eager", "precondition", "check", ".", "This", "implementation", "does", "a", "NOP", ".", "Subclasses", "should", "override", "this", "method", "and", "load", "the", "state", "needed", "to", "do", "an", "eager", "precondition", "check", ".", "A", "trivial", "implementation", "is", "calling", "-LCB-", "link", "#loadState", "-RCB-", "."], "path": "pingpangkuangmo/oozie/tree/master/core/src/main/java/org/apache/oozie/command/XCommand.java", "idx": 448}
{"memberVariables": {"MAX_PARAMETER_LENGTH=20": "int", "parsingHex": "boolean", "MAX_COMMAND_LENGTH=30": "int", "listener": "IRtfListener", "groupDepth": "int", "source": "IRtfSource", "buffer": "ByteBuffer"}, "code": ["void", "function", "(", ")", "{", "handleCharacterData", "(", ")", ";", "listener", ".", "processGroupEnd", "(", ")", ";", "groupDepth", "--", ";", "}"], "memberFunctions": {"handleCommand": [["void"], ["void", "StringBuilder commandBuffer", "int parameter", "boolean hasParameter"]], "handleCharacterData": [["void"]], "handleCharacterByte": [["void", "int ch"]], "parse": [["void", "IRtfSource source", "IRtfListener listener"]], "handleGroupStart": [["void"]], "handleBinaryData": [["void", "int size"]]}, "className": "RawRtfParser", "renamed": ["void", "function", "(", ")", "{", "handleCharacterData", "(", ")", ";", "listener", ".", "processGroupEnd", "(", ")", ";", "groupDepth", "--", ";", "}"], "nl": "Inform the listener of a group end.", "nlToks": ["Inform", "the", "listener", "of", "a", "group", "end", "."], "path": "harrisaoz/rtfparserkit/tree/master/RTF Parser Kit/src/main/java/com/rtfparserkit/parser/raw/RawRtfParser.java", "idx": 449}
{"memberVariables": {"preview": "Book", "QUILL_EXTENSION=\".quill\"": "String", "data=new LinkedList<BookPreview>()": "LinkedList<BookPreview>", "instance": "Bookshelf", "TAG=\"BookPreview\"": "String", "TAG=\"Bookshelf\"": "String", "storage": "Storage", "currentBook": "Book", "uuid": "UUID"}, "code": ["void", "function", "(", ")", "{", "File", "dir", "=", "storage", ".", "getBackupDir", "(", ")", ";", "if", "(", "dir", "==", "null", ")", "return", ";", "backup", "(", "dir", ")", ";", "}"], "memberFunctions": {"compare": [["int", "BookPreview lhs", "BookPreview rhs"]], "getPreview": [["BookPreview", "UUID uuid"], ["BookPreview", "Book book"]], "reloadPreview": [["void", "Book book"]], "backupDescription": [["void", "File dir"]], "setCurrentBook": [["void", "BookPreview nb"], ["void", "BookPreview nb", "boolean saveCurrent"]], "assertNoCurrentBook": [["void"]], "importBook": [["void", "File file"]], "getThumbnail": [["Bitmap", "int width", "int height"]], "deleteBook": [["void", "UUID uuid"]], "exportBook": [["void", "UUID uuid", "File file"]], "getTitle": [["String"]], "reload": [["void"]], "getUUID": [["UUID"]], "getBookshelf": [["Bookshelf"]], "newBook": [["void", "String title"]], "sortBookPreviewList": [["void"]], "getCount": [["int"]], "importBookDirectory": [["void", "File dir", "UUID uuid"]], "getSummary": [["String"]], "getCurrentBookPreview": [["BookPreview"]], "deleteFromStorage": [["void"]], "getCurrentBook": [["Book"]], "getLastModifiedTime": [["Time"]], "getBookPreviewList": [["LinkedList<BookPreview>"]], "exportCurrentBook": [["void", "File file"]], "createFirstNotebook": [["void"]], "finalize": [["void", "Storage storage"]], "initialize": [["void", "Storage storage"]]}, "className": "Bookshelf", "renamed": ["void", "function", "(", ")", "{", "File", "loc0", "=", "storage", ".", "getBackupDir", "(", ")", ";", "if", "(", "loc0", "==", "null", ")", "return", ";", "backup", "(", "loc0", ")", ";", "}"], "nl": "Backup all notebooks", "nlToks": ["Backup", "all", "notebooks"], "path": "praveensubramaniam/android-quill/tree/master/src/com/write/Quill/data/Bookshelf.java", "idx": 450}
{"memberVariables": {"dirTi": "TableInfo", "tx": "Transaction", "leaf=null": "BTreeLeaf", "leafTi": "TableInfo", "rootblk": "Block"}, "code": ["void", "function", "(", "Constant", "dataval", ",", "RID", "datarid", ")", "{", "beforeFirst", "(", "dataval", ")", ";", "DirEntry", "e", "=", "leaf", ".", "insert", "(", "datarid", ")", ";", "leaf", ".", "close", "(", ")", ";", "if", "(", "e", "==", "null", ")", "return", ";", "BTreeDir", "root", "=", "new", "BTreeDir", "(", "rootblk", ",", "dirTi", ",", "tx", ")", ";", "DirEntry", "e2", "=", "root", ".", "insert", "(", "e", ")", ";", "if", "(", "e2", "!=", "null", ")", "root", ".", "makeNewRoot", "(", "e2", ")", ";", "root", ".", "close", "(", ")", ";", "}"], "memberFunctions": {"next": [["boolean"]], "beforeFirst": [["void", "Constant searchkey"]], "searchCost": [["int", "int numblocks", "int rpb"]], "delete": [["void", "Constant dataval", "RID datarid"]], "close": [["void"]], "getDataRid": [["RID"]]}, "className": "BTreeIndex", "renamed": ["void", "function", "(", "Constant", "arg0", ",", "RID", "arg1", ")", "{", "beforeFirst", "(", "arg0", ")", ";", "DirEntry", "loc0", "=", "leaf", ".", "insert", "(", "arg1", ")", ";", "leaf", ".", "close", "(", ")", ";", "if", "(", "loc0", "==", "null", ")", "return", ";", "BTreeDir", "loc1", "=", "new", "BTreeDir", "(", "rootblk", ",", "dirTi", ",", "tx", ")", ";", "DirEntry", "loc2", "=", "loc1", ".", "insert", "(", "loc0", ")", ";", "if", "(", "loc2", "!=", "null", ")", "loc1", ".", "makeNewRoot", "(", "loc2", ")", ";", "loc1", ".", "close", "(", ")", ";", "}"], "nl": "Inserts the specified record into the index. The method first traverses the directory to find the appropriate leaf page; then it inserts the record into the leaf. If the insertion causes the leaf to split, then the method calls insert on the root, passing it the directory entry of the new leaf page. If the root node splits, then makeNewRoot is called.", "nlToks": ["Inserts", "the", "specified", "record", "into", "the", "index", ".", "The", "method", "first", "traverses", "the", "directory", "to", "find", "the", "appropriate", "leaf", "page", ";", "then", "it", "inserts", "the", "record", "into", "the", "leaf", ".", "If", "the", "insertion", "causes", "the", "leaf", "to", "split", ",", "then", "the", "method", "calls", "insert", "on", "the", "root", ",", "passing", "it", "the", "directory", "entry", "of", "the", "new", "leaf", "page", ".", "If", "the", "root", "node", "splits", ",", "then", "makeNewRoot", "is", "called", "."], "path": "prerit2803/DBMSProject2/tree/master/simpledb/index/btree/BTreeIndex.java", "idx": 451}
{"memberVariables": {"PRIMITIVE_TYPE_NAMES=new TypeMap(new Class[]{int.class,byte.class,long.class,short.class,float.class,double.class,char.class,boolean.class})": "TypeMap", "TYPES_BY_NAME=new TypeMap(new Class[]{Integer.class,Byte.class,Long.class,Short.class,Float.class,Double.class,Character.class,Boolean.class,BigDecimal.class,String.class,Object.class,Class.class})": "TypeMap", "SHORT_NAMES_BY_TYPE=computeClassShortNames()": "Map<Class<?>,String>", "EMPTY_CLASS_ARRAY=new Class[0]": "Class<?>[]"}, "code": ["Map", "<", "Class", "<", "?", ">", ",", "String", ">", "function", "(", ")", "{", "Map", "<", "Class", "<", "?", ">", ",", "String", ">", "map", "=", "new", "HashMap", "<", ">", "(", ")", ";", "map", ".", "putAll", "(", "PRIMITIVE_TYPE_NAMES", ".", "asInverseWithShortName", "(", ")", ")", ";", "map", ".", "putAll", "(", "TYPES_BY_NAME", ".", "asInverseWithShortName", "(", ")", ")", ";", "return", "map", ";", "}"], "memberFunctions": {"getPrimitiveTypeFor": [["Class<?>", "String name"]], "asMethodGroupsByTypeName": [["Map<String,List<Method>>", "Method[] methods"]], "getClassShortNames": [["Map<Class<?>,String>"]], "methodFor": [["Method", "Class<?> clasz", "String methodName", "Class<?>[] paramTypes"]], "getTypeFor": [["Class<?>", "String shortName"]], "asShortestName": [["String", "Class<?> type"]], "withoutPackageName": [["String", "String fullTypeName"]]}, "className": "ClassUtil", "renamed": ["Map", "<", "Class", "<", "?", ">", ",", "String", ">", "function", "(", ")", "{", "Map", "<", "Class", "<", "?", ">", ",", "String", ">", "loc0", "=", "new", "HashMap", "<", ">", "(", ")", ";", "loc0", ".", "putAll", "(", "PRIMITIVE_TYPE_NAMES", ".", "asInverseWithShortName", "(", ")", ")", ";", "loc0", ".", "putAll", "(", "TYPES_BY_NAME", ".", "asInverseWithShortName", "(", ")", ")", ";", "return", "loc0", ";", "}"], "nl": "Return a map of all the short names of classes we maintain mappings for. The names are keyed by the classes themselves.", "nlToks": ["Return", "a", "map", "of", "all", "the", "short", "names", "of", "classes", "we", "maintain", "mappings", "for", ".", "The", "names", "are", "keyed", "by", "the", "classes", "themselves", "."], "path": "adangel/pmd/tree/master/pmd-core/src/main/java/net/sourceforge/pmd/util/ClassUtil.java", "idx": 454}
{"memberVariables": {"returnEntropy=true": "boolean", "lifetime=60L * 30L": "long", "LOG=LogUtils.getL7dLogger(SCTProvider.class)": "Logger"}, "code": ["void", "function", "(", "boolean", "returnEntropy", ")", "{", "this", ".", "returnEntropy", "=", "returnEntropy", ";", "}"], "memberFunctions": {"canHandleToken": [["boolean", "String tokenType"], ["boolean", "String tokenType", "String realm"]], "isReturnEntropy": [["boolean"]], "getLifetime": [["long"]], "getWSCVersion": [["int", "String tokenType"]], "setLifetime": [["void", "long lifetime"]], "createToken": [["TokenProviderResponse", "TokenProviderParameters tokenParameters"]]}, "className": "SCTProvider", "renamed": ["void", "function", "(", "boolean", "arg0", ")", "{", "this", ".", "returnEntropy", "=", "arg0", ";", "}"], "nl": "Set whether Entropy is returned to the client or not", "nlToks": ["Set", "whether", "Entropy", "is", "returned", "to", "the", "client", "or", "not"], "path": "primesign/cxf/tree/master/services/sts/sts-core/src/main/java/org/apache/cxf/sts/token/provider/SCTProvider.java", "idx": 456}
{"memberVariables": {"status=-1": "int", "INFINITY=Integer.MAX_VALUE": "int", "request=null": "HttpServletRequest", "base=null": "URI", "response=null": "HttpServletResponse"}, "code": ["String", "function", "(", ")", "{", "return", "this", ".", "request", ".", "getMethod", "(", ")", ";", "}"], "memberFunctions": {"lookup": [["URI", "DAVResource resource"]], "getDepth": [["int"]], "read": [["InputStream"]], "getNormalizedPath": [["String"]], "getDestination": [["URI"]], "getStatus": [["int"]], "hasRequestBody": [["boolean"]], "setStatus": [["void", "int status"]], "setHeader": [["void", "String name", "String value"]], "getOverwrite": [["boolean"]], "getOriginalPath": [["String"]], "setContentType": [["void", "String type"]], "write": [["OutputStream"], ["PrintWriter", "String encoding"]], "getIfModifiedSince": [["Date"]]}, "className": "DAVTransaction", "renamed": ["String", "function", "(", ")", "{", "return", "this", ".", "request", ".", "getMethod", "(", ")", ";", "}"], "nl": "Return the path originally requested by the client.", "nlToks": ["Return", "the", "path", "originally", "requested", "by", "the", "client", "."], "path": "pfumagalli/webdav/tree/master/src/main/java/it/could/webdav/DAVTransaction.java", "idx": 457}
{"memberVariables": {"serialVersionUID=-8866246036237312215L": "long", "interfaceAdapterCache": "HashMap<Class<?>,Object>", "cachingIsEnabled=true": "boolean", "classTable": "HashMap<Class<?>,JavaMembers>", "AKEY=\"ClassCache\"": "Object", "generatedClassSerial": "int", "classAdapterCache": "HashMap<JavaAdapter.JavaAdapterSignature,Class<?>>"}, "code": ["int", "function", "(", ")", "{", "return", "++", "generatedClassSerial", ";", "}"], "memberFunctions": {"clearCaches": [["void"]], "isInvokerOptimizationEnabled": [["boolean"]], "isCachingEnabled": [["boolean"]], "get": [["ClassCache", "Scriptable scope"]], "setCachingEnabled": [["void", "boolean enabled"]], "getClassCacheMap": [["Map<Class<?>,JavaMembers>"]], "getInterfaceAdapter": [["Object", "Class<?> cl"]], "setInvokerOptimizationEnabled": [["void", "boolean enabled"]], "associate": [["boolean", "ScriptableObject topScope"]], "getInterfaceAdapterCacheMap": [["Map<JavaAdapter.JavaAdapterSignature,Class<?>>"]], "cacheInterfaceAdapter": [["void", "Class<?> cl", "Object iadapter"]]}, "className": "ClassCache", "renamed": ["int", "function", "(", ")", "{", "return", "++", "generatedClassSerial", ";", "}"], "nl": "Internal engine method to return serial number for generated classes to ensure name uniqueness.", "nlToks": ["Internal", "engine", "method", "to", "return", "serial", "number", "for", "generated", "classes", "to", "ensure", "name", "uniqueness", "."], "path": "adamfisk/littleshoot-client/tree/master/bin/rhino1_7R2/src/org/mozilla/javascript/ClassCache.java", "idx": 458}
{"memberVariables": {"_stack_type": "String", "_name": "String", "_index": "int", "_use_count=0": "int"}, "code": ["int", "function", "(", ")", "{", "return", "_index", ";", "}"], "memberFunctions": {"use_count": [["int"]], "stack_type": [["String"]], "name": [["String"]], "is_non_term": [["boolean"]], "note_use": [["void"]], "toString": [["String"]]}, "className": "symbol", "renamed": ["int", "function", "(", ")", "{", "return", "_index", ";", "}"], "nl": "Index of this symbol (terminal or non terminal) in the parse tables. Note: indexes are unique among terminals and unique among non terminals, however, a terminal may have the same index as a non-terminal, etc.", "nlToks": ["Index", "of", "this", "symbol", "-LRB-", "terminal", "or", "non", "terminal", "-RRB-", "in", "the", "parse", "tables", ".", "Note", ":", "indexes", "are", "unique", "among", "terminals", "and", "unique", "among", "non", "terminals", ",", "however", ",", "a", "terminal", "may", "have", "the", "same", "index", "as", "a", "non-terminal", ",", "etc.", "."], "path": "polyglot-compiler/polyglot/tree/master/tools/java_cup/src/java_cup/symbol.java", "idx": 460}
{"memberVariables": {}, "code": ["String", "function", "(", "String", "defaultFile", ")", "{", "return", "selectile", "(", "defaultFile", ",", "new", "ArrayList", "<", ">", "(", ")", ",", "\"Select file\"", ")", ";", "}"], "memberFunctions": {"enableComponents": [["void", "Container container", "boolean enable"]], "selectTab": [["void", "JTabbedPane tabbedPane", "String title"]], "selectFolder": [["String", "String defaultFolder", "String title"]]}, "className": "Swing", "renamed": ["String", "function", "(", "String", "arg0", ")", "{", "return", "selectile", "(", "arg0", ",", "new", "ArrayList", "<", ">", "(", ")", ",", "\"srini_string\"", ")", ";", "}"], "nl": "Select a folder (open a folder chooser GUI)", "nlToks": ["Select", "a", "folder", "-LRB-", "open", "a", "folder", "chooser", "GUI", "-RRB-"], "path": "phramusca/JaMuz/tree/master/src/jamuz/utils/Swing.java", "idx": 461}
{"memberVariables": {}, "code": ["String", "function", "(", "final", "HttpParams", "params", ")", "{", "if", "(", "params", "==", "null", ")", "{", "throw", "new", "IllegalArgumentException", "(", "\"HTTP parameters may not be null\"", ")", ";", "}", "String", "charset", "=", "(", "String", ")", "params", ".", "getParameter", "(", "CoreProtocolPNames", ".", "HTTP_CONTENT_CHARSET", ")", ";", "if", "(", "charset", "==", "null", ")", "{", "charset", "=", "HTTP", ".", "DEFAULT_CONTENT_CHARSET", ";", "}", "return", "charset", ";", "}"], "memberFunctions": {"getVersion": [["ProtocolVersion", "final HttpParams params"]], "useExpectContinue": [["boolean", "final HttpParams params"]], "setHttpElementCharset": [["void", "final HttpParams params", "final String charset"]], "setVersion": [["void", "final HttpParams params", "final ProtocolVersion version"]], "getUserAgent": [["String", "final HttpParams params"]], "setUserAgent": [["void", "final HttpParams params", "final String useragent"]], "setUseExpectContinue": [["void", "final HttpParams params", "boolean b"]], "getHttpElementCharset": [["String", "final HttpParams params"]], "setContentCharset": [["void", "final HttpParams params", "final String charset"]]}, "className": "HttpProtocolParams", "renamed": ["String", "function", "(", "final", "HttpParams", "arg0", ")", "{", "if", "(", "arg0", "==", "null", ")", "{", "throw", "new", "IllegalArgumentException", "(", "\"srini_string\"", ")", ";", "}", "String", "loc0", "=", "(", "String", ")", "arg0", ".", "getParameter", "(", "CoreProtocolPNames", ".", "HTTP_CONTENT_CHARSET", ")", ";", "if", "(", "loc0", "==", "null", ")", "{", "loc0", "=", "HTTP", ".", "DEFAULT_CONTENT_CHARSET", ";", "}", "return", "loc0", ";", "}"], "nl": "Obtains value of the  {@link CoreProtocolPNames#HTTP_CONTENT_CHARSET} parameter.If not set, defaults to ISO-8859-1.", "nlToks": ["Obtains", "value", "of", "the", "-LCB-", "@link", "CoreProtocolPNames", "#HTTP_CONTENT_CHARSET", "-RCB-", "parameter.If", "not", "set", ",", "defaults", "to", "ISO-8859-1", "."], "path": "pritamkhose/open-gpstracker.code/tree/master/external_sources/httpcore-4.1.1/httpcore/src/main/java/org/apache/ogt/http/params/HttpProtocolParams.java", "idx": 463}
{"memberVariables": {"handler": "IParserEventHandler", "GROUP_END=new GroupEndEvent()": "IParserEvent", "GROUP_START=new GroupStartEvent()": "IParserEvent", "DOCUMENT_START=new DocumentStartEvent()": "IParserEvent", "handlerStack=new ArrayDeque<IParserEventHandler>()": "Deque<IParserEventHandler>", "m_fontEncodings=new HashMap<Integer,String>()": "Map<Integer,String>", "stack=new ArrayDeque<ParserState>()": "Deque<ParserState>", "DOCUMENT_END=new DocumentEndEvent()": "IParserEvent", "state=new ParserState()": "ParserState", "skipBytes": "int"}, "code": ["void", "function", "(", "int", "parameter", ")", "{", "if", "(", "parameter", "<", "0", ")", "{", "parameter", "+=", "65536", ";", "}", "processCharacter", "(", "(", "char", ")", "parameter", ")", ";", "skipBytes", "=", "state", ".", "unicodeAlternateSkipCount", ";", "}"], "memberFunctions": {"processCharacter": [["void", "char c"]], "processUpr": [["void", "IParserEvent command"]], "handleEvent": [["void", "IParserEvent event"]], "processDocumentEnd": [["void"]], "processGroupEnd": [["void"]], "processCommand": [["void", "Command command", "int parameter", "boolean hasParameter", "boolean optional"]], "parse": [["void", "IRtfSource source", "IRtfListener listener"]], "processCharacterBytes": [["void", "byte[] data"]], "processString": [["void", "String string"]], "processDocumentStart": [["void"]], "processUnicodeAlternateSkipCount": [["void", "int parameter"]], "handleCommand": [["void", "Command command", "int parameter", "boolean hasParameter", "boolean optional"]], "processGroupStart": [["void"]], "processFont": [["void", "int parameter"]], "processEncoding": [["void", "Command command", "boolean hasParameter", "int parameter"]], "currentEncoding": [["String"]], "processBinaryBytes": [["void", "byte[] data"]], "processFontCharset": [["void", "int parameter"]]}, "className": "StandardRtfParser", "renamed": ["void", "function", "(", "int", "arg0", ")", "{", "if", "(", "arg0", "<", "0", ")", "{", "arg0", "+=", "65536", ";", "}", "processCharacter", "(", "(", "char", ")", "arg0", ")", ";", "skipBytes", "=", "state", ".", "unicodeAlternateSkipCount", ";", "}"], "nl": "Process an RTF command parameter representing a Unicode character.", "nlToks": ["Process", "an", "RTF", "command", "parameter", "representing", "a", "Unicode", "character", "."], "path": "harrisaoz/rtfparserkit/tree/master/RTF Parser Kit/src/main/java/com/rtfparserkit/parser/standard/StandardRtfParser.java", "idx": 465}
{"memberVariables": {"mockServerMessage=mock(ServerMessage.class)": "ServerMessage", "mockServerSession=mock(ServerSession.class)": "ServerSession", "testEventProperties": "HashMap<String,Object>", "MOCK_SESSION_ID=\"1234-5678-9012-3456\"": "String", "acitivityController": "ActivityController"}, "code": ["void", "function", "(", ")", "{", "acitivityController", ".", "registerUserSession", "(", "null", ",", "mockServerMessage", ")", ";", "}"], "memberFunctions": {"testHandleEventThrowsIllegalArgumentExceptionOnEmptyUser": [["void"]], "testHandleEventThrowsIllegalArgumentExceptionOnEmptyApplication": [["void"]], "testDeregisterUserSessionWithNullServerSessonThrowsException": [["void"]], "testDeregisterUserSessionWithNullServerSessionIdThrowsException": [["void"]], "testGetServerSessionByUserId": [["void"]], "tearDown": [["void"]], "testDeregisterUserSessionRemovesUserFromKnownClients": [["void"]], "testHandleEventThrowsIllegalArgumentExceptionOnEmptyMessage": [["void"]], "testHandleEventThrowsIllegalArgumentExceptionOnNullApplication": [["void"]], "testHandleEventThrowsIllegalArgumentExceptionOnNullUser": [["void"]], "testRegisterUserSession": [["void"]], "setUp": [["void"]], "testHandleEventThrowsIllegalArgumentExceptionOnNullTimestamp": [["void"]], "testRegisterUserSessionWithNullServerSessionIdThrowsException": [["void"]], "testHandleEventThrowsIllegalArgumentExceptionOnNullMessage": [["void"]]}, "className": "ActivityControllerTest", "renamed": ["void", "function", "(", ")", "{", "acitivityController", ".", "registerUserSession", "(", "null", ",", "mockServerMessage", ")", ";", "}"], "nl": "Test method for  {@link ActivityController#registerUserSession(ServerSession,ServerMessage)}. Verifies that method throws  {@code NullPointerException} when ServerSession is null.", "nlToks": ["Test", "method", "for", "-LCB-", "@link", "ActivityController", "#registerUserSession", "-LRB-", "ServerSession", ",", "ServerMessage", "-RRB-", "-RCB-", ".", "Verifies", "that", "method", "throws", "-LCB-", "@code", "NullPointerException", "-RCB-", "when", "ServerSession", "is", "null", "."], "path": "pklinef/ddf-ui/tree/master/search-ui/search-endpoint/src/test/java/org/codice/ddf/ui/searchui/query/controller/ActivityControllerTest.java", "idx": 466}
{"memberVariables": {"SOAP_ENCODING_REF_1_2=new QName(SOAP_ENCODING_NS_1_2,\"ref\")": "QName", "SOAP_ENCODING_ID_1_1=new QName(\"id\")": "QName", "SOAP_ENCODING_ID_1_2=new QName(SOAP_ENCODING_NS_1_2,\"id\")": "QName", "SOAP_ENCODING_REF_1_1=new QName(\"href\")": "QName", "SOAP_ENCODING_NS_1_2=Soap12.getInstance().getSoapEncodingStyle()": "String"}, "code": ["void", "function", "(", "MessageWriter", "writer", ",", "String", "refId", ")", "{", "if", "(", "refId", "==", "null", ")", "{", "throw", "new", "NullPointerException", "(", "\"refId is null\"", ")", ";", "}", "writeAttribute", "(", "writer", ",", "SOAP_ENCODING_REF_1_1", ",", "refId", ")", ";", "}"], "memberFunctions": {"writeId": [["void", "MessageWriter writer", "String id"]], "readId": [["String", "MessageReader reader"]], "readAttributeValue": [["String", "MessageReader reader", "QName name"]], "readRef": [["String", "MessageReader reader"]], "writeAttribute": [["void", "MessageWriter writer", "QName name", "String value"]]}, "className": "SoapEncodingUtil", "renamed": ["void", "function", "(", "MessageWriter", "arg0", ",", "String", "arg1", ")", "{", "if", "(", "arg1", "==", "null", ")", "{", "throw", "new", "NullPointerException", "(", "\"srini_string\"", ")", ";", "}", "writeAttribute", "(", "arg0", ",", "SOAP_ENCODING_REF_1_1", ",", "arg1", ")", ";", "}"], "nl": "Writes a SOAP 1.1 ref attribute.", "nlToks": ["Writes", "a", "SOAP", "1.1", "ref", "attribute", "."], "path": "primesign/cxf/tree/master/rt/databinding/aegis/src/main/java/org/apache/cxf/aegis/type/encoded/SoapEncodingUtil.java", "idx": 470}
{"memberVariables": {"TAB=\"\\t\"": "String", "GENE_SYMBOL=0": "int", "warningList=new ArrayList<String>()": "ArrayList<String>", "ID_ENTREZ_GENE=1": "int", "uri": "URI", "content": "String"}, "code": ["String", "function", "(", ")", "{", "return", "this", ".", "content", ";", "}"], "memberFunctions": {"getAlleleCount": [["String", "Integer count"]], "getWarnings": [["ArrayList<String>"]], "getColumnHeaders": [["String"]], "getMutationData": [["List<ExtendedMutation>", "GeneticProfile profile", "List<String> geneList", "Set<String> sampleIdSet", "XDebug xdebug"]], "getProfileData": [["String", "String geneticProfileId", "List<String> targetGeneList", "List<String> targetSampleList"]], "getURI": [["URI"]]}, "className": "GetMutationData", "renamed": ["String", "function", "(", ")", "{", "return", "this", ".", "content", ";", "}"], "nl": "Gets Full Content retrieved from the CGDS.", "nlToks": ["Gets", "Full", "Content", "retrieved", "from", "the", "CGDS", "."], "path": "adamabeshouse/cbioportal/tree/master/core/src/main/java/org/mskcc/cbio/portal/web_api/GetMutationData.java", "idx": 472}
{"memberVariables": {"summary": "Summary", "config": "Config", "testCase": "List<TestCase>"}, "code": ["void", "function", "(", "Config", "value", ")", "{", "this", ".", "config", "=", "value", ";", "}"], "memberFunctions": {"setSummary": [["void", "Summary value"]], "getSummary": [["Summary"]], "getConfig": [["Config"]], "getTestCase": [["List<TestCase>"]]}, "className": "TestReport", "renamed": ["void", "function", "(", "Config", "arg0", ")", "{", "this", ".", "config", "=", "arg0", ";", "}"], "nl": "Sets the value of the config property.", "nlToks": ["Sets", "the", "value", "of", "the", "config", "property", "."], "path": "prabalbsws/selenium_automation/tree/master/src/newpojo/TestReport.java", "idx": 473}
{"memberVariables": {"_link": "String", "_rss_link": "String", "_title": "String", "_id": "Integer", "_image": "String", "_description": "String"}, "code": ["Integer", "function", "(", ")", "{", "return", "this", ".", "_id", ";", "}"], "memberFunctions": {"setLink": [["void", "String link"]], "getLink": [["String"]], "getTitle": [["String"]], "setRSSLink": [["void", "String rss_link"]], "setId": [["void", "Integer id"]], "setTitle": [["void", "String title"]], "setDescription": [["void", "String description"]], "getRSSLink": [["String"]], "getDescription": [["String"]], "getImage": [["String"]], "setImage": [["void", "String image"]]}, "className": "WebSite", "renamed": ["Integer", "function", "(", ")", "{", "return", "this", ".", "_id", ";", "}"], "nl": "All get methods", "nlToks": ["All", "get", "methods"], "path": "adament67/testproject/tree/master/Android Projects/studio/EstiloRobe/estiloRobe/src/main/java/com/stylist/rssfeed/WebSite.java", "idx": 474}
{"memberVariables": {}, "code": ["BrowseOffersResponse", ".", "Return", "function", "(", ")", "{", "return", "new", "BrowseOffersResponse", ".", "Return", "(", ")", ";", "}"], "memberFunctions": {"createBrowseOffersResponseReturnOfferDataSeo": [["BrowseOffersResponse.Return.OfferData.Seo"]], "createBrowseOffersResponseReturnOfferDataGeoRegionCountryState": [["BrowseOffersResponse.Return.OfferData.Geo.Region.Country.State"]], "createBrowseOffersResponseReturnOfferDataOfferMedia": [["BrowseOffersResponse.Return.OfferData.OfferMedia"]], "createBrowseOffersResponse": [["BrowseOffersResponse"]], "createBrowseOffersResponseReturnOfferDataGeoRegionCountry": [["BrowseOffersResponse.Return.OfferData.Geo.Region.Country"]], "createBrowseOffersResponseReturnOfferDataOfferMediaOfferImageEntryValue": [["BrowseOffersResponse.Return.OfferData.OfferMedia.OfferImage.Entry.Value"]], "createBrowseOffersResponseReturnOfferData": [["BrowseOffersResponse.Return.OfferData"]], "createBrowseOffersResponseReturnOfferDataMerchant": [["BrowseOffersResponse.Return.OfferData.Merchant"]], "createBrowseOffersResponseReturnOfferDataOfferMediaOfferImageEntry": [["BrowseOffersResponse.Return.OfferData.OfferMedia.OfferImage.Entry"]], "createBrowseOffersResponseReturnOfferDataOfferMediaOfferImage": [["BrowseOffersResponse.Return.OfferData.OfferMedia.OfferImage"]], "createBrowseOffersResponseReturnOfferDataOfferMediaOfferImageEntryValueItem": [["BrowseOffersResponse.Return.OfferData.OfferMedia.OfferImage.Entry.Value.Item"]], "createBrowseOffersResponseReturnOfferDataGeo": [["BrowseOffersResponse.Return.OfferData.Geo"]], "createBrowseOffersResponseReturnOfferDataGeoRegion": [["BrowseOffersResponse.Return.OfferData.Geo.Region"]]}, "className": "ObjectFactory", "renamed": ["BrowseOffersResponse", ".", "Return", "function", "(", ")", "{", "return", "new", "BrowseOffersResponse", ".", "Return", "(", ")", ";", "}"], "nl": "Create an instance of  {@link BrowseOffersResponse.Return }", "nlToks": ["Create", "an", "instance", "of", "-LCB-", "@link", "BrowseOffersResponse.Return", "-RCB-"], "path": "priyankgandhi/mastercard/tree/master/eop-openapi-client/src/main/java/com/eop/api/search/gen/ObjectFactory.java", "idx": 476}
{"memberVariables": {"CREATOR=new Creator<LikeContent>(){\n  public LikeContent createFromParcel(  final Parcel in){\n    return new LikeContent(in);\n  }\n  public LikeContent[] newArray(  final int size){\n    return new LikeContent[size];\n  }\n}\n": "Creator<LikeContent>", "objectId": "String", "objectType": "String"}, "code": ["Builder", "function", "(", "final", "String", "objectType", ")", "{", "this", ".", "objectType", "=", "objectType", ";", "return", "this", ";", "}"], "memberFunctions": {"readFrom": [["Builder", "final LikeContent content"], ["Builder", "final Parcel parcel"]], "build": [["LikeContent"]], "getObjectType": [["String"]], "newArray": [["LikeContent[]", "final int size"]], "createFromParcel": [["LikeContent", "final Parcel in"]], "setObjectId": [["Builder", "final String objectId"]], "describeContents": [["int"]], "writeToParcel": [["void", "final Parcel out", "final int flags"]], "getObjectId": [["String"]]}, "className": "LikeContent", "renamed": ["Builder", "function", "(", "final", "String", "arg0", ")", "{", "this", ".", "objectType", "=", "arg0", ";", "return", "this", ";", "}"], "nl": "Sets the type of the object for the LikeView", "nlToks": ["Sets", "the", "type", "of", "the", "object", "for", "the", "LikeView"], "path": "adament67/testproject/tree/master/Android Projects/studio/EstiloRobe/facebook/src/main/java/com/facebook/share/internal/LikeContent.java", "idx": 478}
{"memberVariables": {"chunks": "List<ScriptChunk>"}, "code": ["Script", "function", "(", "byte", "[", "]", "hash", ")", "{", "checkArgument", "(", "hash", ".", "length", "==", "20", ")", ";", "return", "new", "ScriptBuilder", "(", ")", ".", "op", "(", "OP_HASH160", ")", ".", "data", "(", "hash", ")", ".", "op", "(", "OP_EQUAL", ")", ".", "build", "(", ")", ";", "}"], "memberFunctions": {"op": [["ScriptBuilder", "int opcode"], ["ScriptBuilder", "int index", "int opcode"]], "updateScriptWithSignature": [["Script", "Script scriptSig", "byte[] signature", "int targetIndex", "int sigsPrefixCount", "int sigsSuffixCount"]], "createOpReturnScript": [["Script", "byte[] data"]], "data": [["ScriptBuilder", "byte[] data"], ["ScriptBuilder", "int index", "byte[] data"]], "createMultiSigInputScriptBytes": [["Script", "List<byte[]> signatures"], ["Script", "List<byte[]> signatures", "@Nullable byte[] multisigProgramBytes"]], "smallNum": [["ScriptBuilder", "int num"], ["ScriptBuilder", "int index", "int num"]], "createRedeemScript": [["Script", "int threshold", "List<ECKey> pubkeys"]], "addChunk": [["ScriptBuilder", "ScriptChunk chunk"], ["ScriptBuilder", "int index", "ScriptChunk chunk"]], "createInputScript": [["Script", "@Nullable TransactionSignature signature", "ECKey pubKey"], ["Script", "@Nullable TransactionSignature signature"]], "createOutputScript": [["Script", "Address to"], ["Script", "ECKey key"]], "createMultiSigInputScript": [["Script", "List<TransactionSignature> signatures"], ["Script", "TransactionSignature... signatures"]], "createMultiSigOutputScript": [["Script", "int threshold", "List<ECKey> pubkeys"]], "build": [["Script"]], "createP2SHMultiSigInputScript": [["Script", "@Nullable List<TransactionSignature> signatures", "Script multisigProgram"]]}, "className": "ScriptBuilder", "renamed": ["Script", "function", "(", "byte", "[", "]", "arg0", ")", "{", "checkArgument", "(", "arg0", ".", "length", "==", "20", ")", ";", "return", "new", "ScriptBuilder", "(", ")", ".", "op", "(", "OP_HASH160", ")", ".", "data", "(", "arg0", ")", ".", "op", "(", "OP_EQUAL", ")", ".", "build", "(", ")", ";", "}"], "nl": "Creates a scriptPubKey that sends to the given script hash. Read BIP 16 to learn more about this kind of script.", "nlToks": ["Creates", "a", "scriptPubKey", "that", "sends", "to", "the", "given", "script", "hash", ".", "Read", "BIP", "16", "to", "learn", "more", "about", "this", "kind", "of", "script", "."], "path": "1000000000001/bitcoinj/tree/master/core/src/main/java/org/bitcoinj/script/ScriptBuilder.java", "idx": 480}
{"memberVariables": {"log=LogFactory.getLog(EndpointUtil.class)": "Log"}, "code": ["String", "function", "(", ")", "{", "return", "getOAuthServerConfiguration", "(", ")", ".", "getOpenIDConnectUserInfoEndpointAccessTokenValidator", "(", ")", ";", "}"], "memberFunctions": {"getOAuthServerConfiguration": [["OAuthServerConfiguration"]], "getHostName": [["String"]], "getUserInfoResponseBuilder": [["String"]], "getLoginPageURL": [["String", "String clientId", "String sessionDataKey", "boolean forceAuthenticate", "boolean checkAuthentication", "Set<String> scopes"], ["String", "String clientId", "String sessionDataKey", "boolean forceAuthenticate", "boolean checkAuthentication", "Set<String> scopes", "Map<String,String[]> reqParams"]], "getRealmInfo": [["String"]], "getUserInfoClaimDialect": [["String"]], "getOAuth2TokenValidationService": [["OAuth2TokenValidationService"]], "getUserInfoRequestValidator": [["String"]], "getErrorPageURL": [["String", "String errorCode", "String errorMessage", "String appName", "String redirectUri"]], "getUserInfoClaimRetriever": [["String"]], "extractCredentialsFromAuthzHeader": [["String[]", "String authorizationHeader"]], "getUserConsentURL": [["String", "OAuth2Parameters params", "String loggedInUser", "String sessionDataKey", "boolean isOIDC"]], "getScope": [["String", "OAuth2Parameters params"]], "getOAuth2Service": [["OAuth2Service"]]}, "className": "EndpointUtil", "renamed": ["String", "function", "(", ")", "{", "return", "getOAuthServerConfiguration", "(", ")", ".", "getOpenIDConnectUserInfoEndpointAccessTokenValidator", "(", ")", ";", "}"], "nl": "Returns the access token validator class name", "nlToks": ["Returns", "the", "access", "token", "validator", "class", "name"], "path": "harsha1979/carbon-identity/tree/master/components/oauth/org.wso2.carbon.identity.oauth.endpoint/src/main/java/org/wso2/carbon/identity/oauth/endpoint/util/EndpointUtil.java", "idx": 481}
{"memberVariables": {"types=new HashMap<String,ResourceTypeHandler>(4)": "Map<String,ResourceTypeHandler>", "FLASH=new ResourceTypeHandler(\"Flash\")": "ResourceTypeHandler", "MEDIA=new ResourceTypeHandler(\"Media\")": "ResourceTypeHandler", "FILE=new ResourceTypeHandler(\"File\")": "ResourceTypeHandler", "name": "String", "IMAGE=new ResourceTypeHandler(\"Image\")": "ResourceTypeHandler", "paths=new HashMap<ResourceTypeHandler,String>(4)": "Map<ResourceTypeHandler,String>"}, "code": ["ResourceTypeHandler", "function", "(", "final", "String", "name", ")", "{", "ResourceTypeHandler", "rt", "=", "getResourceType", "(", "name", ")", ";", "return", "rt", "==", "null", "?", "FILE", ":", "rt", ";", "}"], "memberFunctions": {"getName": [["String"]], "valueOf": [["ResourceTypeHandler", "final String name"]], "hashCode": [["int"]], "isValid": [["boolean", "final String name"]], "getResourceType": [["ResourceTypeHandler", "final String name"]], "equals": [["boolean", "Object obj"]], "getPath": [["String"]], "toString": [["String"]]}, "className": "ResourceTypeHandler", "renamed": ["ResourceTypeHandler", "function", "(", "final", "String", "arg0", ")", "{", "ResourceTypeHandler", "loc0", "=", "getResourceType", "(", "arg0", ")", ";", "return", "loc0", "==", "null", "?", "FILE", ":", "loc0", ";", "}"], "nl": "Tries to determine ResourceType from string and return  {@link #FILE} ifprovided string is invalid.", "nlToks": ["Tries", "to", "determine", "ResourceType", "from", "string", "and", "return", "-LCB-", "@link", "#FILE", "-RCB-", "ifprovided", "string", "is", "invalid", "."], "path": "pobing/company/tree/master/maxcomy/src/net/fckeditor/handlers/ResourceTypeHandler.java", "idx": 482}
{"memberVariables": {"mAnimationQueue=new LinkedList<Double>()": "Queue<Double>", "mRunning": "boolean", "mChoreographer": "ChoreographerCompat", "mPendingQueue=new LinkedList<Double>()": "Queue<Double>", "mTempValues=new ArrayList<Double>()": "ArrayList<Double>", "mCallbacks=new ArrayList<Callback>()": "List<Callback>", "mChoreographerCallback": "ChoreographerCompat.FrameCallback"}, "code": ["void", "function", "(", "Double", "value", ")", "{", "mPendingQueue", ".", "add", "(", "value", ")", ";", "runIfIdle", "(", ")", ";", "}"], "memberFunctions": {"clearValues": [["void"]], "addAllValues": [["void", "Collection<Double> values"]], "onFrame": [["void", "Double value"], ["void", "long frameTimeNanos"]], "clearCallbacks": [["void"]], "removeCallback": [["void", "Callback callback"]], "runIfIdle": [["void"]], "addCallback": [["void", "Callback callback"]]}, "className": "AnimationQueue", "renamed": ["void", "function", "(", "Double", "arg0", ")", "{", "mPendingQueue", ".", "add", "(", "arg0", ")", ";", "runIfIdle", "(", ")", ";", "}"], "nl": "Add a single value to the pending animation queue.", "nlToks": ["Add", "a", "single", "value", "to", "the", "pending", "animation", "queue", "."], "path": "adilek/rebound/tree/master/rebound-android/src/main/java/com/facebook/rebound/AnimationQueue.java", "idx": 484}
{"memberVariables": {"uiStack": "UIStack"}, "code": ["JPanel", "function", "(", ")", "{", "return", "uiStack", ".", "getLastElement", "(", ")", ";", "}"], "memberFunctions": {"restart": [["JPanel"]], "show": [["void"]], "addPanel": [["void", "JPanel panel"]], "back": [["JPanel"], ["JPanel", "int n"]]}, "className": "JStackCore", "renamed": ["JPanel", "function", "(", ")", "{", "return", "uiStack", ".", "getLastElement", "(", ")", ";", "}"], "nl": "Gets the current panel of your stack.", "nlToks": ["Gets", "the", "current", "panel", "of", "your", "stack", "."], "path": "porthunt/NovaUI/tree/master/src/controller/JStackCore.java", "idx": 485}
{"memberVariables": {}, "code": ["LinearSolver", "<", "DenseMatrix64F", ">", "function", "(", "boolean", "computeNorm2", ",", "boolean", "computeQ", ")", "{", "QRColPivDecompositionHouseholderColumn_D64", "decomposition", "=", "new", "QRColPivDecompositionHouseholderColumn_D64", "(", ")", ";", "if", "(", "computeQ", ")", "return", "new", "SolvePseudoInverseQrp", "(", "decomposition", ",", "computeNorm2", ")", ";", "else", "return", "new", "LinearSolverQrpHouseCol", "(", "decomposition", ",", "computeNorm2", ")", ";", "}"], "memberFunctions": {"leastSquares": [["LinearSolver<DenseMatrix64F>", "int numRows", "int numCols"]], "general": [["LinearSolver<DenseMatrix64F>", "int numRows", "int numCols"]], "pseudoInverse": [["LinearSolver<DenseMatrix64F>", "boolean useSVD"]], "linear": [["LinearSolver<DenseMatrix64F>", "int matrixSize"]], "symmPosDef": [["LinearSolver<DenseMatrix64F>", "int matrixWidth"]], "adjustable": [["AdjustableLinearSolver"]]}, "className": "LinearSolverFactory", "renamed": ["LinearSolver", "<", "DenseMatrix64F", ">", "function", "(", "boolean", "arg0", ",", "boolean", "arg1", ")", "{", "QRColPivDecompositionHouseholderColumn_D64", "loc0", "=", "new", "QRColPivDecompositionHouseholderColumn_D64", "(", ")", ";", "if", "(", "arg1", ")", "return", "new", "SolvePseudoInverseQrp", "(", "loc0", ",", "arg0", ")", ";", "else", "return", "new", "LinearSolverQrpHouseCol", "(", "loc0", ",", "arg0", ")", ";", "}"], "nl": " Linear solver which uses QR pivot decomposition.  These solvers can handle singular systems and should never fail.  For singular systems, the solution might not be as accurate as a pseudo inverse that uses SVD.   For singular systems there are multiple correct solutions.  The optimal 2-norm solution is the solution vector with the minimal 2-norm and is unique.  If the optimal solution is not computed then the basic solution is returned.  See  {@link org.ejml.alg.dense.linsol.qr.BaseLinearSolverQrp}for details.  There is only a runtime difference for small matrices, 2-norm solution is slower.   Two different solvers are available.  Compute Q will compute the Q matrix once then use it multiple times. If the solution for a single vector is being found then this should be set to false.  If the pseudo inverse is being found or the solution matrix has more than one columns AND solve is being called numerous multiples times then this should be set to true. ", "nlToks": ["Linear", "solver", "which", "uses", "QR", "pivot", "decomposition", ".", "These", "solvers", "can", "handle", "singular", "systems", "and", "should", "never", "fail", ".", "For", "singular", "systems", ",", "the", "solution", "might", "not", "be", "as", "accurate", "as", "a", "pseudo", "inverse", "that", "uses", "SVD", ".", "For", "singular", "systems", "there", "are", "multiple", "correct", "solutions", ".", "The", "optimal", "2-norm", "solution", "is", "the", "solution", "vector", "with", "the", "minimal", "2-norm", "and", "is", "unique", ".", "If", "the", "optimal", "solution", "is", "not", "computed", "then", "the", "basic", "solution", "is", "returned", ".", "See", "-LCB-", "@link", "org.ejml.alg.dense.linsol.qr.BaseLinearSolverQrp", "-RCB-", "for", "details", ".", "There", "is", "only", "a", "runtime", "difference", "for", "small", "matrices", ",", "2-norm", "solution", "is", "slower", ".", "Two", "different", "solvers", "are", "available", ".", "Compute", "Q", "will", "compute", "the", "Q", "matrix", "once", "then", "use", "it", "multiple", "times", ".", "If", "the", "solution", "for", "a", "single", "vector", "is", "being", "found", "then", "this", "should", "be", "set", "to", "false", ".", "If", "the", "pseudo", "inverse", "is", "being", "found", "or", "the", "solution", "matrix", "has", "more", "than", "one", "columns", "AND", "solve", "is", "being", "called", "numerous", "multiples", "times", "then", "this", "should", "be", "set", "to", "true", "."], "path": "adamaulia/efficient-java-matrix-library/tree/master/src/org/ejml/factory/LinearSolverFactory.java", "idx": 486}
{"memberVariables": {"acceptedC14nAlgorithms=new ArrayList<>()": "List<String>", "signatureAlgorithm=\"http://www.w3.org/2001/04/xmldsig-more#rsa-sha256\"": "String", "maximumKeySize=512": "long", "keySize=256": "long", "acceptedSignatureAlgorithms=new ArrayList<>()": "List<String>", "c14nAlgorithm=WSConstants.C14N_EXCL_OMIT_COMMENTS": "String", "digestAlgorithm=WSConstants.SHA256": "String", "minimumKeySize=128": "long", "useKeyValue": "boolean"}, "code": ["List", "<", "String", ">", "function", "(", ")", "{", "return", "acceptedC14nAlgorithms", ";", "}"], "memberFunctions": {"getC14nAlgorithm": [["String"]], "isUseKeyValue": [["boolean"]], "setUseKeyValue": [["void", "boolean useKeyValue"]], "getMinimumKeySize": [["long"]], "setAcceptedC14nAlgorithms": [["void", "List<String> acceptedC14nAlgorithms"]], "setC14nAlgorithm": [["void", "String c14nAlgorithm"]], "setDigestAlgorithm": [["void", "String digestAlgorithm"]], "setMinimumKeySize": [["void", "long minimumKeySize"]], "setAcceptedSignatureAlgorithms": [["void", "List<String> acceptedSignatureAlgorithms"]], "getDigestAlgorithm": [["String"]], "getAcceptedSignatureAlgorithms": [["List<String>"]], "getSignatureAlgorithm": [["String"]], "setSignatureAlgorithm": [["void", "String signatureAlgorithm"]], "getKeySize": [["long"]], "setMaximumKeySize": [["void", "long maximumKeySize"]], "setKeySize": [["void", "long keySize"]], "getMaximumKeySize": [["long"]]}, "className": "SignatureProperties", "renamed": ["List", "<", "String", ">", "function", "(", ")", "{", "return", "acceptedC14nAlgorithms", ";", "}"], "nl": "Get the list of accepted c14n algorithms. A request can contain a wst:CanonicalizationAlgorithm uri to use for c14n in an issued token. The algorithm specified must be contained in this list. The default algorithms are C14N_EXCL_OMIT_COMMENTS.", "nlToks": ["Get", "the", "list", "of", "accepted", "c14n", "algorithms", ".", "A", "request", "can", "contain", "a", "wst", ":", "CanonicalizationAlgorithm", "uri", "to", "use", "for", "c14n", "in", "an", "issued", "token", ".", "The", "algorithm", "specified", "must", "be", "contained", "in", "this", "list", ".", "The", "default", "algorithms", "are", "C14N_EXCL_OMIT_COMMENTS", "."], "path": "primesign/cxf/tree/master/services/sts/sts-core/src/main/java/org/apache/cxf/sts/SignatureProperties.java", "idx": 489}
{"memberVariables": {"serialVersionUID=1L": "long", "isSystemDerived": "String", "isActive": "String", "predecessorId": "BigDecimal", "srcFileName": "String", "successorId": "BigDecimal", "feedId": "BigDecimal", "checksum": "String", "transmissionDatasetId": "String", "comments": "String", "inactivationReasonType": "String", "isFormatValid": "String", "dataUnitId": "long", "receiptDate": "Timestamp", "srcUniqueFileName": "String", "createdDate": "Timestamp", "dataSetId": "Long", "fileSize": "BigDecimal", "destFileName": "String", "loadedInCats": "String", "checksumType": "String", "modifiedDate": "Timestamp", "runId": "BigDecimal", "isPrepopulated": "String", "isBulk": "String", "isUpdate": "String", "receiptDateType": "String", "status": "String"}, "code": ["BigDecimal", "function", "(", ")", "{", "return", "this", ".", "successorId", ";", "}"], "memberFunctions": {"setIsSystemDerived": [["void", "String isSystemDerived"]], "setIsPrepopulated": [["void", "String isPrepopulated"]], "getStatus": [["String"]], "getIsUpdate": [["String"]], "getDataUnitId": [["long"]], "getFileSize": [["BigDecimal"]], "setInactivationReasonType": [["void", "String inactivationReasonType"]], "setDataUnitId": [["void", "long dataUnitId"]], "getComments": [["String"]], "getCreatedDate": [["Timestamp"]], "setFileSize": [["void", "BigDecimal fileSize"]], "getPredecessorId": [["BigDecimal"]], "setIsUpdate": [["void", "String isUpdate"]], "getReceiptDateType": [["String"]], "getFeedId": [["BigDecimal"]], "setReceiptDate": [["void", "Timestamp receiptDate"]], "getModifiedDate": [["Timestamp"]], "setSuccessorId": [["void", "BigDecimal successorId"]], "setDestFileName": [["void", "String destFileName"]], "setIsBulk": [["void", "String isBulk"]], "getIsFormatValid": [["String"]], "setDataSetId": [["void", "Long dataSetId"]], "setIsActive": [["void", "String isActive"]], "setChecksumType": [["void", "String checksumType"]], "setFeedId": [["void", "BigDecimal feedId"]], "getInactivationReasonType": [["String"]], "getSrcUniqueFileName": [["String"]], "getDataSetId": [["Long"]], "setReceiptDateType": [["void", "String receiptDateType"]], "getRunId": [["BigDecimal"]], "setSrcFileName": [["void", "String srcFileName"]], "getChecksumType": [["String"]], "getSrcFileName": [["String"]], "getChecksum": [["String"]], "getDestFileName": [["String"]], "getReceiptDate": [["Timestamp"]], "setTransmissionDatasetId": [["void", "String transmissionDatasetId"]], "getTransmissionDatasetId": [["String"]], "setComments": [["void", "String comments"]], "getLoadedInCats": [["String"]], "setLoadedInCats": [["void", "String loadedInCats"]], "getIsPrepopulated": [["String"]], "setSrcUniqueFileName": [["void", "String srcUniqueFileName"]], "setChecksum": [["void", "String checksum"]], "setIsFormatValid": [["void", "String isFormatValid"]], "getIsBulk": [["String"]], "setRunId": [["void", "BigDecimal runId"]], "setStatus": [["void", "String status"]], "getIsActive": [["String"]], "setModifiedDate": [["void", "Timestamp modifiedDate"]], "setCreatedDate": [["void", "Timestamp createdDate"]], "setPredecessorId": [["void", "BigDecimal predecessorId"]], "getIsSystemDerived": [["String"]]}, "className": "PCLDataUnitEntity", "renamed": ["BigDecimal", "function", "(", ")", "{", "return", "this", ".", "successorId", ";", "}"], "nl": "Gets the successor id.", "nlToks": ["Gets", "the", "successor", "id", "."], "path": "pkesireddy/portico_fletcher/tree/master/FetcherTesterService/src/main/java/org/ithaka/cm/fetchertester/entity/PCLDataUnitEntity.java", "idx": 490}
{"memberVariables": {"feedId": "String", "destFileName": "String", "testId": "String"}, "code": ["String", "function", "(", ")", "{", "return", "feedId", ";", "}"], "memberFunctions": {"setDestFileName": [["void", "String destFileName"]], "setFeedId": [["void", "String feedId"]], "toString": [["String"]], "setTestId": [["void", "String testId"]], "getTestId": [["String"]], "getDestFileName": [["String"]]}, "className": "DestinationFileExistsDTO", "renamed": ["String", "function", "(", ")", "{", "return", "feedId", ";", "}"], "nl": "Gets the feed id.", "nlToks": ["Gets", "the", "feed", "id", "."], "path": "pkesireddy/portico_fletcher/tree/master/FetcherTesterService/src/main/java/org/ithaka/cm/fetchertester/model/DestinationFileExistsDTO.java", "idx": 491}
{"memberVariables": {"LOG=Logger.getLogger(NotationNameImpl.class)": "Logger", "name": "String", "icon": "Icon", "notations=new ArrayList<NotationName>()": "ArrayList<NotationName>", "version": "String"}, "code": ["List", "<", "NotationName", ">", "function", "(", ")", "{", "return", "Collections", ".", "unmodifiableList", "(", "notations", ")", ";", "}"], "memberFunctions": {"getVersion": [["String"]], "getNotationNameString": [["String", "String k1", "String k2"]], "getName": [["String"]], "fireEvent": [["void", "int eventType", "NotationName nn"]], "removeNotation": [["boolean", "NotationName theNotation"]], "getIcon": [["Icon"]], "getConfigurationValue": [["String"]], "getTitle": [["String"]], "findNotation": [["NotationName", "String s"]], "getNotation": [["NotationName", "String k1"], ["NotationName", "String k1", "String k2"]], "toString": [["String"]], "makeNotation": [["NotationName", "String k1", "String k2", "Icon icon"]], "sameNotationAs": [["boolean", "NotationName nn"]]}, "className": "NotationNameImpl", "renamed": ["List", "<", "NotationName", ">", "function", "(", ")", "{", "return", "Collections", ".", "unmodifiableList", "(", "notations", ")", ";", "}"], "nl": "Get all of the registered notations.", "nlToks": ["Get", "all", "of", "the", "registered", "notations", "."], "path": "pichiliani/CoArgoUML/tree/master/v0.24/fonte/src/argouml-app/src/org/argouml/notation/NotationNameImpl.java", "idx": 492}
{"memberVariables": {"valueLen": "int", "format": "PackFormatInputStream", "valueOff": "int", "value": "byte[]"}, "code": ["void", "function", "(", "byte", "[", "]", "dest", ",", "int", "off", ",", "int", "len", ")", "{", "format", ".", "checkType", "(", "'U'", ",", "false", ")", ";", "getByteArrayInternal", "(", "getByteArrayLength", "(", ")", ",", "dest", ",", "off", ",", "len", ")", ";", "}"], "memberFunctions": {"getByteArrayInternal": [["void", "int itemLen", "byte[] dest", "int off", "int destLen"]], "getByteArrayLength": [["int"]], "getByte": [["byte"]], "getShort": [["short"]], "getString": [["String"]], "getLong": [["long"]], "getValue": [["byte[]"]], "getInt": [["int"]], "unpackInt": [["int", "boolean signed"]], "unpackShort": [["short", "boolean signed"]], "getFormat": [["String"]], "getRecord": [["long"]], "unpackLong": [["long", "boolean signed"]]}, "className": "PackInputStream", "renamed": ["void", "function", "(", "byte", "[", "]", "arg0", ",", "int", "arg1", ",", "int", "arg2", ")", "{", "format", ".", "checkType", "(", "'U'", ",", "false", ")", ";", "getByteArrayInternal", "(", "getByteArrayLength", "(", ")", ",", "arg0", ",", "arg1", ",", "arg2", ")", ";", "}"], "nl": "Retrieves a byte array field from the stream. \\param dest The byte array where the returned value will be stored. \\param off Offset into the destination buffer to start copying into. \\param len The length should be large enough to store the entire data item, if it is not, a truncated value will be returned.", "nlToks": ["Retrieves", "a", "byte", "array", "field", "from", "the", "stream", ".", "\\", "param", "dest", "The", "byte", "array", "where", "the", "returned", "value", "will", "be", "stored", ".", "\\", "param", "off", "Offset", "into", "the", "destination", "buffer", "to", "start", "copying", "into", ".", "\\", "param", "len", "The", "length", "should", "be", "large", "enough", "to", "store", "the", "entire", "data", "item", ",", "if", "it", "is", "not", ",", "a", "truncated", "value", "will", "be", "returned", "."], "path": "pgunn/wiredtiger/tree/master/lang/java/src/com/wiredtiger/db/PackInputStream.java", "idx": 496}
{"memberVariables": {"enemy": "Enemy", "rules": "DefaultRules", "playerDeck": "Deck", "selectedCard": "Card", "playerHandCards": "Array<Card>", "enemyDeck": "Deck", "playerField": "Field", "enemyHandCards": "Array<Card>", "enemyField": "Field", "playerDestroyedCards": "Array<Card>", "id": "int", "tutorial": "boolean", "map": "BattleMap", "rewards": "Array<Modifier>", "enemyDestroyedCards": "Array<Card>"}, "code": ["boolean", "function", "(", "String", "cardName", ")", "{", "boolean", "b", "=", "false", ";", "for", "(", "Card", "c", ":", "enemyHandCards", ")", "{", "if", "(", "c", ".", "getName", "(", ")", ".", "equals", "(", "cardName", ")", ")", "{", "b", "=", "true", ";", "}", "}", "return", "b", ";", "}"], "memberFunctions": {"addPlayerHandCard": [["void", "Card card"]], "getPlayerDeck": [["Deck"]], "getPlayerField": [["Field"]], "setPlayerHandCards": [["void", "Array<Card> playerHandCards"]], "setEnemyHandCards": [["void", "Array<Card> enemyHandCards"]], "getId": [["int"]], "getEnemyField": [["Field"]], "setEnemyDestroyedCards": [["void", "Array<Card> enemyDestroyedCards"]], "getEnemyHandCards": [["Array<Card>"]], "getSelectedCard": [["Card"]], "getEnemyDeck": [["Deck"]], "setMap": [["void", "BattleMap map"]], "getRules": [["DefaultRules"]], "setRules": [["void", "DefaultRules rules"]], "setPlayerField": [["void", "Field playerField"]], "write": [["void", "Json json"]], "setPlayerDestroyedCards": [["void", "Array<Card> playerDestroyedCards"]], "getEnemyDestroyedCards": [["Array<Card>"]], "read": [["void", "Json json", "JsonValue jsonData"]], "getPlayerHandCards": [["Array<Card>"]], "addEnemyHandCard": [["void", "Card card"]], "setPlayerDeck": [["void", "Deck playerDeck"]], "setEnemy": [["void", "Enemy enemy"]], "getCardFromEnemy": [["Card", "String string"]], "setSelectedCard": [["void", "Card selectedCard"]], "setEnemyDeck": [["void", "Deck enemyDeck"]], "getMap": [["BattleMap"]], "getEnemy": [["Enemy"]], "getPlayerDestroyedCards": [["Array<Card>"]], "setEnemyField": [["void", "Field enemyField"]]}, "className": "BattlePlatform", "renamed": ["boolean", "function", "(", "String", "arg0", ")", "{", "boolean", "loc0", "=", "false", ";", "for", "(", "Card", "loc1", ":", "enemyHandCards", ")", "{", "if", "(", "loc1", ".", "getName", "(", ")", ".", "equals", "(", "arg0", ")", ")", "{", "loc0", "=", "true", ";", "}", "}", "return", "loc0", ";", "}"], "nl": "Checks for a card on the enemy hand.", "nlToks": ["Checks", "for", "a", "card", "on", "the", "enemy", "hand", "."], "path": "prativa/shadowstruggles/tree/master/Shadow Struggles/model/br/edu/ifsp/pds/shadowstruggles/model/BattlePlatform.java", "idx": 497}
{"memberVariables": {"serialVersionUID=1L": "long", "isSystemDerived": "String", "isActive": "String", "predecessorId": "BigDecimal", "srcFileName": "String", "successorId": "BigDecimal", "feedId": "BigDecimal", "checksum": "String", "transmissionDatasetId": "String", "comments": "String", "inactivationReasonType": "String", "isFormatValid": "String", "dataUnitId": "long", "receiptDate": "Timestamp", "srcUniqueFileName": "String", "createdDate": "Timestamp", "dataSetId": "Long", "fileSize": "BigDecimal", "destFileName": "String", "loadedInCats": "String", "checksumType": "String", "modifiedDate": "Timestamp", "runId": "BigDecimal", "isPrepopulated": "String", "isBulk": "String", "isUpdate": "String", "receiptDateType": "String", "status": "String"}, "code": ["String", "function", "(", ")", "{", "return", "this", ".", "receiptDateType", ";", "}"], "memberFunctions": {"setIsSystemDerived": [["void", "String isSystemDerived"]], "setIsPrepopulated": [["void", "String isPrepopulated"]], "getStatus": [["String"]], "getIsUpdate": [["String"]], "getDataUnitId": [["long"]], "getFileSize": [["BigDecimal"]], "setInactivationReasonType": [["void", "String inactivationReasonType"]], "setDataUnitId": [["void", "long dataUnitId"]], "getComments": [["String"]], "getCreatedDate": [["Timestamp"]], "setFileSize": [["void", "BigDecimal fileSize"]], "getPredecessorId": [["BigDecimal"]], "setIsUpdate": [["void", "String isUpdate"]], "getFeedId": [["BigDecimal"]], "setReceiptDate": [["void", "Timestamp receiptDate"]], "getModifiedDate": [["Timestamp"]], "setSuccessorId": [["void", "BigDecimal successorId"]], "setDestFileName": [["void", "String destFileName"]], "setIsBulk": [["void", "String isBulk"]], "getIsFormatValid": [["String"]], "setDataSetId": [["void", "Long dataSetId"]], "setIsActive": [["void", "String isActive"]], "setChecksumType": [["void", "String checksumType"]], "setFeedId": [["void", "BigDecimal feedId"]], "getInactivationReasonType": [["String"]], "getSrcUniqueFileName": [["String"]], "getDataSetId": [["Long"]], "setReceiptDateType": [["void", "String receiptDateType"]], "getRunId": [["BigDecimal"]], "setSrcFileName": [["void", "String srcFileName"]], "getChecksumType": [["String"]], "getSrcFileName": [["String"]], "getChecksum": [["String"]], "getDestFileName": [["String"]], "getReceiptDate": [["Timestamp"]], "setTransmissionDatasetId": [["void", "String transmissionDatasetId"]], "getTransmissionDatasetId": [["String"]], "setComments": [["void", "String comments"]], "getLoadedInCats": [["String"]], "getSuccessorId": [["BigDecimal"]], "setLoadedInCats": [["void", "String loadedInCats"]], "getIsPrepopulated": [["String"]], "setSrcUniqueFileName": [["void", "String srcUniqueFileName"]], "setChecksum": [["void", "String checksum"]], "setIsFormatValid": [["void", "String isFormatValid"]], "getIsBulk": [["String"]], "setRunId": [["void", "BigDecimal runId"]], "setStatus": [["void", "String status"]], "getIsActive": [["String"]], "setModifiedDate": [["void", "Timestamp modifiedDate"]], "setCreatedDate": [["void", "Timestamp createdDate"]], "setPredecessorId": [["void", "BigDecimal predecessorId"]], "getIsSystemDerived": [["String"]]}, "className": "PCLDataUnitEntity", "renamed": ["String", "function", "(", ")", "{", "return", "this", ".", "receiptDateType", ";", "}"], "nl": "Gets the receipt date type.", "nlToks": ["Gets", "the", "receipt", "date", "type", "."], "path": "pkesireddy/portico_fletcher/tree/master/FetcherTesterService/src/main/java/org/ithaka/cm/fetchertester/entity/PCLDataUnitEntity.java", "idx": 498}
{"memberVariables": {"executorService=Executors.newCachedThreadPool(runnable -> {\n  Thread thread=new Thread(runnable);\n  thread.setDaemon(true);\n  return thread;\n}\n)": "ExecutorService", "CONDITION_SLEEP_IN_MILLIS=10": "long", "SEMAPHORE_LOOPS_COUNT=5": "int", "SEMAPHORE_SLEEP_IN_MILLIS=10": "long"}, "code": ["void", "function", "(", "int", "attemptsCount", ")", "{", "for", "(", "int", "attempt", "=", "0", ";", "attempt", "<", "attemptsCount", ";", "attempt", "++", ")", "{", "blockFxThreadWithSemaphore", "(", ")", ";", "sleep", "(", "SEMAPHORE_SLEEP_IN_MILLIS", ",", "MILLISECONDS", ")", ";", "}", "}"], "memberFunctions": {"callConditionAndReturnResult": [["boolean", "Callable<Boolean> condition"]], "runOnFxThread": [["void", "Runnable runnable"]], "callCallableAndSetFuture": [["void", "Callable<T> callable", "SettableFuture<T> future"]], "sleepWithException": [["void", "long duration", "TimeUnit timeUnit"]], "waitForAsyncFx": [["void", "long millis", "Runnable runnable"], ["T", "long millis", "Callable<T> callable"]], "sleep": [["void", "long duration", "TimeUnit timeUnit"]], "waitForMillis": [["T", "long millis", "Future<T> future"]], "async": [["Future<Void>", "Runnable runnable"], ["Future<T>", "Callable<T> callable"]], "runOnThread": [["void", "Runnable runnable", "ExecutorService executorService"]], "asyncFx": [["Future<Void>", "Runnable runnable"], ["Future<T>", "Callable<T> callable"]], "blockFxThreadWithSemaphore": [["void"]], "waitFor": [["T", "Future<T> future"], ["T", "long timeout", "TimeUnit timeUnit", "Future<T> future"], ["void", "long timeout", "TimeUnit timeUnit", "Callable<Boolean> condition"], ["void", "long timeout", "TimeUnit timeUnit", "ObservableBooleanValue booleanValue"]], "waitForAsync": [["void", "long millis", "Runnable runnable"], ["T", "long millis", "Callable<T> callable"]]}, "className": "WaitForAsyncUtils", "renamed": ["void", "function", "(", "int", "arg0", ")", "{", "for", "(", "int", "loc0", "=", "0", ";", "loc0", "<", "arg0", ";", "loc0", "++", ")", "{", "blockFxThreadWithSemaphore", "(", ")", ";", "sleep", "(", "SEMAPHORE_SLEEP_IN_MILLIS", ",", "MILLISECONDS", ")", ";", "}", "}"], "nl": "Waits the given  {@code int} attempts for the event queue of JavaFX Application Thread to becompleted, as well as any new events triggered on it.", "nlToks": ["Waits", "the", "given", "-LCB-", "@code", "int", "-RCB-", "attempts", "for", "the", "event", "queue", "of", "JavaFX", "Application", "Thread", "to", "becompleted", ",", "as", "well", "as", "any", "new", "events", "triggered", "on", "it", "."], "path": "hastebrot/TestFX/tree/master/subprojects/testfx-core/src/main/java/org/testfx/util/WaitForAsyncUtils.java", "idx": 500}
{"memberVariables": {"unAttachedReference": "TokenReference", "expires": "Date", "tokenId": "String", "created": "Date", "lifetime": "long", "attachedReference": "TokenReference", "token": "Element"}, "code": ["long", "function", "(", ")", "{", "return", "lifetime", ";", "}"], "memberFunctions": {"setAttachedReference": [["void", "TokenReference attachedReference"]], "getTokenId": [["String"]], "getUnAttachedReference": [["TokenReference"]], "setExpires": [["void", "Date expires"]], "getCreated": [["Date"]], "setCreated": [["void", "Date created"]], "setUnattachedReference": [["void", "TokenReference unattachedReference"]], "setToken": [["void", "Element token"]], "getToken": [["Element"]], "setLifetime": [["void", "long lifetime"]], "setTokenId": [["void", "String tokenId"]], "getExpires": [["Date"]], "getAttachedReference": [["TokenReference"]]}, "className": "TokenRenewerResponse", "renamed": ["long", "function", "(", ")", "{", "return", "lifetime", ";", "}"], "nl": "Get the lifetime of the Token to be returned in seconds", "nlToks": ["Get", "the", "lifetime", "of", "the", "Token", "to", "be", "returned", "in", "seconds"], "path": "primesign/cxf/tree/master/services/sts/sts-core/src/main/java/org/apache/cxf/sts/token/renewer/TokenRenewerResponse.java", "idx": 501}
{"memberVariables": {"parent": "JsonTray", "credential": "ClientCredential", "json": "JSONObject"}, "code": ["boolean", "function", "(", "String", "key", ")", "{", "return", "this", ".", "json", ".", "has", "(", "key", ")", ";", "}"], "memberFunctions": {"checkExpireTime": [["boolean"]], "getIdentity": [["ClientIdentity"]], "get": [["Object", "String key"]], "setExpireTime": [["void", "long time"]], "getBoolean": [["boolean", "String key"], ["boolean", "String key", "boolean defVal"]], "setIdentity": [["Authentication", "@Nonnull ClientIdentity id"]], "getString": [["String", "String key"], ["String", "String key", "String defVal"]], "delete": [["void"]], "put": [["void", "String key", "Object value"]], "remove": [["void", "String key"]]}, "className": "Authentication", "renamed": ["boolean", "function", "(", "String", "arg0", ")", "{", "return", "this", ".", "json", ".", "has", "(", "arg0", ")", ";", "}"], "nl": "Check the internal JSONObject for a key", "nlToks": ["Check", "the", "internal", "JSONObject", "for", "a", "key"], "path": "adarsh-ideal/loklak_server/tree/master/src/org/loklak/server/Authentication.java", "idx": 503}
{"memberVariables": {"xPosition": "int", "canvas": "Canvas", "ySpeed=1": "int", "ballDegradation=2": "int", "color": "Color", "diameter": "int", "yPosition": "int", "groundPosition": "int", "GRAVITY=3": "int", "circle": "Ellipse2D.Double"}, "code": ["void", "function", "(", ")", "{", "canvas", ".", "setForegroundColor", "(", "color", ")", ";", "canvas", ".", "fillCircle", "(", "xPosition", ",", "yPosition", ",", "diameter", ")", ";", "}"], "memberFunctions": {"erase": [["void"]], "move": [["void"]], "getXPosition": [["int"]], "getYPosition": [["int"]]}, "className": "BouncingBall", "renamed": ["void", "function", "(", ")", "{", "canvas", ".", "setForegroundColor", "(", "color", ")", ";", "canvas", ".", "fillCircle", "(", "xPosition", ",", "yPosition", ",", "diameter", ")", ";", "}"], "nl": "Draw this ball at its current position onto the canvas.", "nlToks": ["Draw", "this", "ball", "at", "its", "current", "position", "onto", "the", "canvas", "."], "path": "pizcogirl/100/tree/master/BouncingBall.java", "idx": 504}
{"memberVariables": {"DEFAULT_MODEL_IMPLEMENTATION=\"org.argouml.model.mdr.MDRModelImplementation\"": "String"}, "code": ["void", "function", "(", ")", "{", "initializeModelImplementation", "(", "\"org.argouml.model.mdr.MDRModelImplementation\"", ")", ";", "}"], "memberFunctions": {"initializeEUML": [["void"]], "initializeModelImplementation": [["ModelImplementation", "String name"]], "initializeDefault": [["void"]]}, "className": "InitializeModel", "renamed": ["void", "function", "(", ")", "{", "initializeModelImplementation", "(", "\"srini_string\"", ")", ";", "}"], "nl": "Initialize the Model subsystem with the MDR ModelImplementation.", "nlToks": ["Initialize", "the", "Model", "subsystem", "with", "the", "MDR", "ModelImplementation", "."], "path": "pichiliani/CoArgoUML/tree/master/v0.24/fonte/src/argouml-core-model/tests/org/argouml/model/InitializeModel.java", "idx": 505}
{"memberVariables": {"salt=0x9e3779b9": "int", "gen": "AtomicInteger"}, "code": ["int", "function", "(", "final", "int", "salt", ",", "final", "int", "in", ")", "{", "short", "v0", "=", "hi16", "(", "in", ")", ";", "short", "v1", "=", "lo16", "(", "in", ")", ";", "v0", "+=", "(", "(", "v1", "<<", "2", ")", "+", "0", "^", "v1", ")", "+", "(", "salt", "^", "(", "v1", ">>>", "3", ")", ")", "+", "1", ";", "v1", "+=", "(", "(", "v0", "<<", "2", ")", "+", "2", "^", "v0", ")", "+", "(", "salt", "^", "(", "v0", ">>>", "3", ")", ")", "+", "3", ";", "return", "result", "(", "v0", ",", "v1", ")", ";", "}"], "memberFunctions": {"next": [["int"]], "result": [["int", "final short v0", "final short v1"]], "hi16": [["short", "final int in"]], "unmix": [["int", "final int in"]], "format": [["String", "int id"]], "lo16": [["short", "final int in"]]}, "className": "IdGenerator", "renamed": ["int", "function", "(", "final", "int", "arg0", ",", "final", "int", "arg1", ")", "{", "short", "loc0", "=", "hi16", "(", "arg1", ")", ";", "short", "loc1", "=", "lo16", "(", "arg1", ")", ";", "loc0", "+=", "(", "(", "loc1", "<<", "2", ")", "+", "0", "^", "loc1", ")", "+", "(", "arg0", "^", "(", "loc1", ">>>", "3", ")", ")", "+", "1", ";", "loc1", "+=", "(", "(", "loc0", "<<", "2", ")", "+", "2", "^", "loc0", ")", "+", "(", "arg0", "^", "(", "loc0", ">>>", "3", ")", ")", "+", "3", ";", "return", "result", "(", "loc0", ",", "loc1", ")", ";", "}"], "nl": "A very simple bit permutation to mask a simple incrementer.", "nlToks": ["A", "very", "simple", "bit", "permutation", "to", "mask", "a", "simple", "incrementer", "."], "path": "pombreda/gitblit/tree/master/src/main/java/com/gitblit/utils/IdGenerator.java", "idx": 506}
{"memberVariables": {"PWD=new File(\".\")": "File", "parameters=new HashMap<String,Object>()": "Map<String,Object>", "transformation": "Transformation"}, "code": ["Object", "function", "(", "String", "name", ")", "{", "return", "parameters", ".", "get", "(", "name", ")", ";", "}"], "memberFunctions": {"withExceptionHandling": [["R", "Trans<R> trans"]], "setOutputProperties": [["void", "Properties outputProperties"]], "transform": [["R"]], "transformTo": [["void", "final Result result"]], "getDefaultSystemId": [["String"]], "setParameter": [["void", "String name", "Object value"]], "setErrorListener": [["void", "ErrorListener errorListener"]], "setOutputProperty": [["void", "String name", "String value"]], "clearParameters": [["void"]], "getResultDocument": [["Document"]], "getResultString": [["String"]], "setURIResolver": [["void", "URIResolver uriResolver"]], "provideSystemIdIfRequired": [["void", "Source source"]]}, "className": "Transform", "renamed": ["Object", "function", "(", "String", "arg0", ")", "{", "return", "parameters", ".", "get", "(", "arg0", ")", ";", "}"], "nl": "See a parameter used for the transformation", "nlToks": ["See", "a", "parameter", "used", "for", "the", "transformation"], "path": "phbenisc/xmlunit/tree/master/xmlunit-legacy/src/main/java/org/custommonkey/xmlunit/Transform.java", "idx": 507}
{"memberVariables": {"lastModifiedTimeStamp": "Timestamp", "fetcherStartTimestamp": "Timestamp", "createTimeStamp": "Timestamp", "serialVersionUID=1L": "long", "batchId": "BigDecimal", "errorMsg": "String", "outcomeType": "OutcomeType", "createdBy": "String", "feedId": "BigDecimal", "testId": "long", "runId": "BigDecimal", "fetcherEndTimeStamp": "Timestamp", "regPclTestResultDetails": "List<RegPCLTestResultDetailsEntity>", "runStatus": "RunStatusType"}, "code": ["String", "function", "(", ")", "{", "return", "this", ".", "createdBy", ";", "}"], "memberFunctions": {"setLastModifiedTimeStamp": [["void", "Timestamp lastModifiedTimeStamp"]], "setFeedId": [["void", "BigDecimal feedId"]], "setFetcherStartTimestamp": [["void", "Timestamp fetcherStartTimestamp"]], "getOutcomeType": [["OutcomeType"]], "updateLastModifiedTimeStamp": [["void"]], "updateCreateTimeStamp": [["void"]], "getRunId": [["BigDecimal"]], "setBatchId": [["void", "BigDecimal batchId"]], "getRegPclTestResultDetails": [["List<RegPCLTestResultDetailsEntity>"]], "setTestId": [["void", "long testId"]], "getTestId": [["long"]], "removeRegPclTestResultDetail": [["RegPCLTestResultDetailsEntity", "RegPCLTestResultDetailsEntity regPclTestResultDetail"]], "setRegPclTestResultDetails": [["void", "List<RegPCLTestResultDetailsEntity> regPclTestResultDetails"]], "setErrorMsg": [["void", "String errorMsg"]], "getRunStatus": [["RunStatusType"]], "addRegPclTestResultDetail": [["RegPCLTestResultDetailsEntity", "RegPCLTestResultDetailsEntity regPclTestResultDetail"]], "getErrorMsg": [["String"]], "setRunStatus": [["void", "RunStatusType runStatus"]], "getFetcherEndTimeStamp": [["Timestamp"]], "getLastModifiedTimeStamp": [["Timestamp"]], "getFeedId": [["BigDecimal"]], "setRunId": [["void", "BigDecimal runId"]], "getFetcherStartTimestamp": [["Timestamp"]], "setFetcherEndTimeStamp": [["void", "Timestamp fetcherEndTimeStamp"]], "setCreateTimeStamp": [["void", "Timestamp createTimeStamp"]], "setCreatedBy": [["void", "String createdBy"]], "getCreateTimeStamp": [["Timestamp"]], "getBatchId": [["BigDecimal"]], "setOutcomeType": [["void", "OutcomeType outcomeType"]]}, "className": "RegPCLTestResultEntity", "renamed": ["String", "function", "(", ")", "{", "return", "this", ".", "createdBy", ";", "}"], "nl": "Gets the created by.", "nlToks": ["Gets", "the", "created", "by", "."], "path": "pkesireddy/portico_fletcher/tree/master/FetcherTesterService/src/main/java/org/ithaka/cm/fetchertester/entity/RegPCLTestResultEntity.java", "idx": 508}
{"memberVariables": {"mine": "MineOres", "mob": "EntityMobWithInventory", "harvest": "HarvestCrops", "taskMode": "int", "arrow": "ArrowAttack", "shortmine": "BuildMine", "largefarm": "BuildFarm", "longmine": "BuildMine", "runaway": "RunAway", "smallhouse": "BuildHouse", "buildspeed": "int", "smallfarm": "BuildFarm", "sow": "SowSeeds", "loot": "StoreLoot", "melee": "MeleeAttack", "largehouse": "BuildHouse", "fireball": "FireballAttack"}, "code": ["boolean", "function", "(", ")", "{", "if", "(", "shortmine", ".", "isBuilding", "(", ")", "||", "longmine", ".", "isBuilding", "(", ")", "||", "smallfarm", ".", "isBuilding", "(", ")", "||", "largefarm", ".", "isBuilding", "(", ")", "||", "smallhouse", ".", "isBuilding", "(", ")", "||", "largehouse", ".", "isBuilding", "(", ")", ")", "{", "return", "true", ";", "}", "return", "false", ";", "}"], "memberFunctions": {"targeter": [["Entity", "int mode"]], "setTask": [["void", "int mode"]], "nextStep": [["void"]]}, "className": "FuzzyTasker", "renamed": ["boolean", "function", "(", ")", "{", "if", "(", "shortmine", ".", "isBuilding", "(", ")", "||", "longmine", ".", "isBuilding", "(", ")", "||", "smallfarm", ".", "isBuilding", "(", ")", "||", "largefarm", ".", "isBuilding", "(", ")", "||", "smallhouse", ".", "isBuilding", "(", ")", "||", "largehouse", ".", "isBuilding", "(", ")", ")", "{", "return", "true", ";", "}", "return", "false", ";", "}"], "nl": "Returns true of the mob is currently building a structure. This is mainly used to prevent a mob from starting to mine or farm when it has not finished building a structure.", "nlToks": ["Returns", "true", "of", "the", "mob", "is", "currently", "building", "a", "structure", ".", "This", "is", "mainly", "used", "to", "prevent", "a", "mob", "from", "starting", "to", "mine", "or", "farm", "when", "it", "has", "not", "finished", "building", "a", "structure", "."], "path": "pregnantboy/fyp/tree/master/forge/src/main/java/fuzzyMod/fuzzyLogic/FuzzyTasker.java", "idx": 511}
{"memberVariables": {"data": "byte[]", "startLocationInProgram": "int", "opcode": "int"}, "code": ["int", "function", "(", ")", "{", "checkState", "(", "isOpCode", "(", ")", ")", ";", "return", "Script", ".", "decodeFromOpN", "(", "opcode", ")", ";", "}"], "memberFunctions": {"equalsOpCode": [["boolean", "int opcode"]], "getStartLocationInProgram": [["int"]], "isPushData": [["boolean"]], "hashCode": [["int"]], "isShortestPossiblePushData": [["boolean"]], "equals": [["boolean", "Object o"]], "isOpCode": [["boolean"]], "toString": [["String"]], "write": [["void", "OutputStream stream"]]}, "className": "ScriptChunk", "renamed": ["int", "function", "(", ")", "{", "checkState", "(", "isOpCode", "(", ")", ")", ";", "return", "Script", ".", "decodeFromOpN", "(", "opcode", ")", ";", "}"], "nl": "If this chunk is an OP_N opcode returns the equivalent integer value.", "nlToks": ["If", "this", "chunk", "is", "an", "OP_N", "opcode", "returns", "the", "equivalent", "integer", "value", "."], "path": "1000000000001/bitcoinj/tree/master/core/src/main/java/org/bitcoinj/script/ScriptChunk.java", "idx": 514}
{"memberVariables": {"log=LoggerFactory.getLogger(BookService.class)": "Logger", "bookRepository": "BookRepository"}, "code": ["Book", "function", "(", "Book", "book", ")", "{", "log", ".", "debug", "(", "\"Request to save Book : {}\"", ",", "book", ")", ";", "Book", "result", "=", "bookRepository", ".", "save", "(", "book", ")", ";", "return", "result", ";", "}"], "memberFunctions": {"findOne": [["Book", "String id"]], "findAll": [["Page<Book>", "Pageable pageable"]], "delete": [["void", "String id"]]}, "className": "BookService", "renamed": ["Book", "function", "(", "Book", "arg0", ")", "{", "log", ".", "debug", "(", "\"srini_string\"", ",", "arg0", ")", ";", "Book", "loc0", "=", "bookRepository", ".", "save", "(", "arg0", ")", ";", "return", "loc0", ";", "}"], "nl": "Save a book.", "nlToks": ["Save", "a", "book", "."], "path": "pigkey/kitchen/tree/master/app/src/main/java/com/kitchen/app/service/BookService.java", "idx": 515}
{"memberVariables": {"framerate": "int", "cameraIPAddress": "String", "channel": "String", "cameraPort": "int", "compression": "int", "resolution": "String", "url": "URL"}, "code": ["void", "function", "(", ")", "{", "URLConnection", "connection", "=", "null", ";", "url", "=", "new", "URL", "(", "composeURL", "(", "\"MJPEG\"", ")", ")", ";", "connection", "=", "url", ".", "openConnection", "(", ")", ";", "connection", ".", "connect", "(", ")", ";", "DataInputStream", "input", "=", "new", "DataInputStream", "(", "new", "BufferedInputStream", "(", "connection", ".", "getInputStream", "(", ")", ")", ")", ";", "}"], "memberFunctions": {"getURL": [["URL"]], "halt": [["void"]], "movePanTilt": [["void", "String direction"]], "composeURL": [["String", "String streamType"]], "runUrl": [["void", "String command"]], "setIPAddress": [["void", "String ipaddress", "int port"]], "moveZoom": [["void", "int z"]]}, "className": "Camera", "renamed": ["void", "function", "(", ")", "{", "URLConnection", "loc0", "=", "null", ";", "url", "=", "new", "URL", "(", "composeURL", "(", "\"srini_string\"", ")", ")", ";", "loc0", "=", "url", ".", "openConnection", "(", ")", ";", "loc0", ".", "connect", "(", ")", ";", "DataInputStream", "loc1", "=", "new", "DataInputStream", "(", "new", "BufferedInputStream", "(", "loc0", ".", "getInputStream", "(", ")", ")", ")", ";", "}"], "nl": "Starts the video stream", "nlToks": ["Starts", "the", "video", "stream"], "path": "priaonehaha/android-axis/tree/master/axis/src/axis/android/Camera.java", "idx": 518}
{"memberVariables": {"rules=new ArrayList<TreeModel>()": "List<TreeModel>", "name": "String", "goRules": "List<TreeModel>"}, "code": ["void", "function", "(", "TreeModel", "tm", ")", "{", "if", "(", "goRules", ".", "contains", "(", "tm", ")", ")", "{", "return", ";", "}", "goRules", ".", "add", "(", "tm", ")", ";", "}"], "memberFunctions": {"setName": [["void", "String s"]], "removeSubTreeModel": [["void", "TreeModel tm"]], "getName": [["String"]], "getSubTreeModels": [["Vector<TreeModel>"]], "getGoRuleList": [["List<TreeModel>"]], "toString": [["String"]], "registerRule": [["void", "TreeModel rule"]], "getGoRules": [["Vector<TreeModel>"]], "getSubTreeModelList": [["List<TreeModel>"]]}, "className": "PerspectiveSupport", "renamed": ["void", "function", "(", "TreeModel", "arg0", ")", "{", "if", "(", "goRules", ".", "contains", "(", "arg0", ")", ")", "{", "return", ";", "}", "goRules", ".", "add", "(", "arg0", ")", ";", "}"], "nl": "Adds a rule to the perspective that will generate child nodes for any given parent node.", "nlToks": ["Adds", "a", "rule", "to", "the", "perspective", "that", "will", "generate", "child", "nodes", "for", "any", "given", "parent", "node", "."], "path": "pichiliani/CoArgoUML/tree/master/v0.24/fonte/src/argouml-app/src/org/argouml/ui/PerspectiveSupport.java", "idx": 521}
{"memberVariables": {"endDate": "Timestamp", "feedConfigId": "BigDecimal", "resultCode": "String", "serialVersionUID=1L": "long", "resultMessage": "String", "fileCount": "BigDecimal", "maxReceiptDate": "Timestamp", "downloadSize": "BigDecimal", "feedId": "BigDecimal", "configInfo": "String", "runId": "long", "errors": "byte[]", "runStatus": "String", "startDate": "Timestamp"}, "code": ["void", "function", "(", "String", "resultMessage", ")", "{", "this", ".", "resultMessage", "=", "resultMessage", ";", "}"], "memberFunctions": {"getFeedConfigId": [["BigDecimal"]], "getStartDate": [["Timestamp"]], "setFeedId": [["void", "BigDecimal feedId"]], "getResultCode": [["String"]], "setFeedConfigId": [["void", "BigDecimal feedConfigId"]], "setMaxReceiptDate": [["void", "Timestamp maxReceiptDate"]], "getRunId": [["long"]], "getEndDate": [["Timestamp"]], "setErrors": [["void", "byte[] errors"]], "getConfigInfo": [["String"]], "setEndDate": [["void", "Timestamp endDate"]], "getErrors": [["byte[]"]], "setFileCount": [["void", "BigDecimal fileCount"]], "getDownloadSize": [["BigDecimal"]], "getResultMessage": [["String"]], "getFileCount": [["BigDecimal"]], "getRunStatus": [["String"]], "setRunStatus": [["void", "String runStatus"]], "setStartDate": [["void", "Timestamp startDate"]], "getFeedId": [["BigDecimal"]], "setResultCode": [["void", "String resultCode"]], "setRunId": [["void", "long runId"]], "getMaxReceiptDate": [["Timestamp"]], "setConfigInfo": [["void", "String configInfo"]], "setDownloadSize": [["void", "BigDecimal downloadSize"]]}, "className": "PCLFetcherRunRecorderEntity", "renamed": ["void", "function", "(", "String", "arg0", ")", "{", "this", ".", "resultMessage", "=", "arg0", ";", "}"], "nl": "Sets the result message.", "nlToks": ["Sets", "the", "result", "message", "."], "path": "pkesireddy/portico_fletcher/tree/master/FetcherTesterService/src/main/java/org/ithaka/cm/fetchertester/entity/PCLFetcherRunRecorderEntity.java", "idx": 523}
{"memberVariables": {"mData=null": "ByteBuffer", "REQUEST_HEADER_LENGTH=HEADER_PREFIX_LENGTH + 40": "int", "RESPONSE_HEADER_LENGTH=HEADER_PREFIX_LENGTH + 26": "int", "ERROR_RESPONSE_HEADER_LENGTH=HEADER_PREFIX_LENGTH + 2": "int", "mOffset": "long", "mStatus": "RPCResponse.Status", "mLockId=-1L": "long", "mToSendData": "boolean", "mLength": "long", "mBlockId": "long", "HEADER_PREFIX_LENGTH=12": "int", "mSessionId": "long", "mMessageType": "RPCMessage.Type", "mIsMessageReady": "boolean", "mHeader": "ByteBuffer", "LOG=LoggerFactory.getLogger(Constants.LOGGER_TYPE)": "Logger"}, "code": ["long", "function", "(", ")", "{", "checkReady", "(", ")", ";", "return", "mSessionId", ";", "}"], "memberFunctions": {"checkReady": [["void"]], "getOffset": [["long"]], "setLockId": [["void", "long lockId"]], "getStatus": [["RPCResponse.Status"]], "createBlockResponseMessage": [["DataServerMessage", "boolean toSend", "long blockId", "ByteBuffer data"], ["DataServerMessage", "boolean toSend", "long blockId", "long offset", "long len", "ByteBuffer data"]], "finishSending": [["boolean"]], "getLockId": [["long"]], "recv": [["int", "SocketChannel socketChannel"]], "getBlockId": [["long"]], "generateHeader": [["void"]], "getReadOnlyData": [["ByteBuffer"]], "getLength": [["long"]], "isSend": [["void", "boolean isSend"]], "createBlockRequestMessage": [["DataServerMessage"], ["DataServerMessage", "long blockId", "long offset", "long len", "long lockId", "long sessionId"]], "close": [["void"]], "send": [["void", "SocketChannel socketChannel"]], "isMessageReady": [["boolean"]]}, "className": "DataServerMessage", "renamed": ["long", "function", "(", ")", "{", "checkReady", "(", ")", ";", "return", "mSessionId", ";", "}"], "nl": "Gets the sessionId of the worker making the request. Make sure the message is ready before calling this method.", "nlToks": ["Gets", "the", "sessionId", "of", "the", "worker", "making", "the", "request", ".", "Make", "sure", "the", "message", "is", "ready", "before", "calling", "this", "method", "."], "path": "poemlin/alluxio/tree/master/core/common/src/main/java/alluxio/worker/DataServerMessage.java", "idx": 525}
{"memberVariables": {"mThrown=ExpectedException.none()": "ExpectedException"}, "code": ["void", "function", "(", ")", "{", "Assert", ".", "assertEquals", "(", "\"rwxrwxrwx\"", ",", "new", "Mode", "(", "(", "short", ")", "0777", ")", ".", "toString", "(", ")", ")", ";", "Assert", ".", "assertEquals", "(", "\"rw-r-----\"", ",", "new", "Mode", "(", "(", "short", ")", "0640", ")", ".", "toString", "(", ")", ")", ";", "Assert", ".", "assertEquals", "(", "\"rw-------\"", ",", "new", "Mode", "(", "(", "short", ")", "0600", ")", ".", "toString", "(", ")", ")", ";", "Assert", ".", "assertEquals", "(", "\"---------\"", ",", "new", "Mode", "(", "(", "short", ")", "0000", ")", ".", "toString", "(", ")", ")", ";", "}"], "memberFunctions": {"umaskExceedLength": [["void"]], "setOwnerBits": [["void"]], "umask": [["void"]], "fromShort": [["void"]], "equals": [["void"]], "setGroupBits": [["void"]], "setOtherBits": [["void"]], "after": [["void"]], "copyConstructor": [["void"]], "umaskNotInteger": [["void"]], "toShort": [["void"]], "createNoAccess": [["void"]]}, "className": "ModeTest", "renamed": ["void", "function", "(", ")", "{", "Assert", ".", "assertEquals", "(", "\"srini_string\"", ",", "new", "Mode", "(", "(", "short", ")", "0777", ")", ".", "toString", "(", ")", ")", ";", "Assert", ".", "assertEquals", "(", "\"srini_string\"", ",", "new", "Mode", "(", "(", "short", ")", "0640", ")", ".", "toString", "(", ")", ")", ";", "Assert", ".", "assertEquals", "(", "\"srini_string\"", ",", "new", "Mode", "(", "(", "short", ")", "0600", ")", ".", "toString", "(", ")", ")", ";", "Assert", ".", "assertEquals", "(", "\"srini_string\"", ",", "new", "Mode", "(", "(", "short", ")", "0000", ")", ".", "toString", "(", ")", ")", ";", "}"], "nl": "Tests the  {@link Mode#toString()} method.", "nlToks": ["Tests", "the", "-LCB-", "@link", "Mode", "#toString", "-LRB-", "-RRB-", "-RCB-", "method", "."], "path": "poemlin/alluxio/tree/master/core/common/src/test/java/alluxio/security/authorization/ModeTest.java", "idx": 526}
{"memberVariables": {}, "code": ["void", "function", "(", "double", "gamma", ",", "DenseMatrix64F", "A", ",", "DenseMatrix64F", "u", ",", "DenseMatrix64F", "w", ")", "{", "int", "n", "=", "u", ".", "getNumElements", "(", ")", ";", "int", "matrixIndex", "=", "0", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "n", ";", "i", "++", ")", "{", "double", "elementU", "=", "u", ".", "data", "[", "i", "]", ";", "for", "(", "int", "j", "=", "0", ";", "j", "<", "n", ";", "j", "++", ")", "{", "A", ".", "data", "[", "matrixIndex", "++", "]", "+=", "gamma", "*", "elementU", "*", "w", ".", "data", "[", "j", "]", ";", "}", "}", "}"], "memberFunctions": {"mult": [["void", "DenseMatrix64F x", "DenseMatrix64F y", "DenseMatrix64F A"]], "householder": [["void", "double gamma", "D1Matrix64F u", "D1Matrix64F x", "D1Matrix64F y"]], "innerProdA": [["double", "D1Matrix64F x", "D1Matrix64F A", "D1Matrix64F y"]], "innerProdTranA": [["double", "D1Matrix64F x", "D1Matrix64F A", "D1Matrix64F y"]], "addOuterProd": [["void", "double gamma", "D1Matrix64F x", "D1Matrix64F y", "RowD1Matrix64F A"]], "innerProd": [["double", "D1Matrix64F x", "D1Matrix64F y"]], "outerProd": [["void", "D1Matrix64F x", "D1Matrix64F y", "RowD1Matrix64F A"]]}, "className": "VectorVectorMult", "renamed": ["void", "function", "(", "double", "arg0", ",", "DenseMatrix64F", "arg1", ",", "DenseMatrix64F", "arg2", ",", "DenseMatrix64F", "arg3", ")", "{", "int", "loc0", "=", "arg2", ".", "getNumElements", "(", ")", ";", "int", "loc1", "=", "0", ";", "for", "(", "int", "loc2", "=", "0", ";", "loc2", "<", "loc0", ";", "loc2", "++", ")", "{", "double", "loc3", "=", "arg2", ".", "data", "[", "loc2", "]", ";", "for", "(", "int", "loc4", "=", "0", ";", "loc4", "<", "loc0", ";", "loc4", "++", ")", "{", "arg1", ".", "data", "[", "loc1", "++", "]", "+=", "arg0", "*", "loc3", "*", "arg3", ".", "data", "[", "loc4", "]", ";", "}", "}", "}"], "nl": " Performs a rank one update on matrix A using vectors u and w.  The results are stored in A.  A = A + &gamma; u wT   This is called a rank1 update because the matrix u wT has a rank of 1. ", "nlToks": ["Performs", "a", "rank", "one", "update", "on", "matrix", "A", "using", "vectors", "u", "and", "w", ".", "The", "results", "are", "stored", "in", "A", ".", "A", "=", "A", "+", "&", "gamma", ";", "u", "wT", "This", "is", "called", "a", "rank1", "update", "because", "the", "matrix", "u", "wT", "has", "a", "rank", "of", "1", "."], "path": "adamaulia/efficient-java-matrix-library/tree/master/src/org/ejml/alg/dense/mult/VectorVectorMult.java", "idx": 529}
{"memberVariables": {"factory": "SentenceFactory", "instance": "HeadingProvider", "event": "HeadingEvent"}, "code": ["void", "function", "(", ")", "{", "Sentence", "s", "=", "factory", ".", "createParser", "(", "HDGTest", ".", "EXAMPLE", ")", ";", "assertNull", "(", "event", ")", ";", "instance", ".", "sentenceRead", "(", "new", "SentenceEvent", "(", "this", ",", "s", ")", ")", ";", "assertNotNull", "(", "event", ")", ";", "assertEquals", "(", "123.4", ",", "event", ".", "getHeading", "(", ")", ",", "0.1", ")", ";", "assertFalse", "(", "event", ".", "isTrue", "(", ")", ")", ";", "}"], "memberFunctions": {"providerUpdate": [["void", "HeadingEvent evt"]], "testHDMSentenceRead": [["void"]], "setUp": [["void"]], "testHDTSentenceRead": [["void"]], "tearDown": [["void"]]}, "className": "HeadingProviderTest", "renamed": ["void", "function", "(", ")", "{", "Sentence", "loc0", "=", "factory", ".", "createParser", "(", "HDGTest", ".", "EXAMPLE", ")", ";", "assertNull", "(", "event", ")", ";", "instance", ".", "sentenceRead", "(", "new", "SentenceEvent", "(", "this", ",", "loc0", ")", ")", ";", "assertNotNull", "(", "event", ")", ";", "assertEquals", "(", "123.4", ",", "event", ".", "getHeading", "(", ")", ",", "0.1", ")", ";", "assertFalse", "(", "event", ".", "isTrue", "(", ")", ")", ";", "}"], "nl": "Test method for {@link net.sf.marineapi.provider.AbstractProvider#sentenceRead(net.sf.marineapi.nmea.event.SentenceEvent)}.", "nlToks": ["Test", "method", "for", "-LCB-", "@link", "net.sf.marineapi.provider.AbstractProvider", "#sentenceRead", "-LRB-", "net.sf.marineapi.nmea.event.SentenceEvent", "-RRB-", "-RCB-", "."], "path": "pkoziol/marine-api/tree/master/src/test/java/net/sf/marineapi/provider/HeadingProviderTest.java", "idx": 530}
{"memberVariables": {"acceptedC14nAlgorithms=new ArrayList<>()": "List<String>", "signatureAlgorithm=\"http://www.w3.org/2001/04/xmldsig-more#rsa-sha256\"": "String", "maximumKeySize=512": "long", "keySize=256": "long", "acceptedSignatureAlgorithms=new ArrayList<>()": "List<String>", "c14nAlgorithm=WSConstants.C14N_EXCL_OMIT_COMMENTS": "String", "digestAlgorithm=WSConstants.SHA256": "String", "minimumKeySize=128": "long", "useKeyValue": "boolean"}, "code": ["void", "function", "(", "String", "c14nAlgorithm", ")", "{", "this", ".", "c14nAlgorithm", "=", "c14nAlgorithm", ";", "}"], "memberFunctions": {"getC14nAlgorithm": [["String"]], "isUseKeyValue": [["boolean"]], "getAcceptedC14nAlgorithms": [["List<String>"]], "setUseKeyValue": [["void", "boolean useKeyValue"]], "getMinimumKeySize": [["long"]], "setAcceptedC14nAlgorithms": [["void", "List<String> acceptedC14nAlgorithms"]], "setDigestAlgorithm": [["void", "String digestAlgorithm"]], "setMinimumKeySize": [["void", "long minimumKeySize"]], "setAcceptedSignatureAlgorithms": [["void", "List<String> acceptedSignatureAlgorithms"]], "getDigestAlgorithm": [["String"]], "getAcceptedSignatureAlgorithms": [["List<String>"]], "getSignatureAlgorithm": [["String"]], "setSignatureAlgorithm": [["void", "String signatureAlgorithm"]], "getKeySize": [["long"]], "setMaximumKeySize": [["void", "long maximumKeySize"]], "setKeySize": [["void", "long keySize"]], "getMaximumKeySize": [["long"]]}, "className": "SignatureProperties", "renamed": ["void", "function", "(", "String", "arg0", ")", "{", "this", ".", "c14nAlgorithm", "=", "arg0", ";", "}"], "nl": "Set the c14n algorithm to use", "nlToks": ["Set", "the", "c14n", "algorithm", "to", "use"], "path": "primesign/cxf/tree/master/services/sts/sts-core/src/main/java/org/apache/cxf/sts/SignatureProperties.java", "idx": 531}
{"memberVariables": {"LOG=LoggerFactory.getLogger(Constants.LOGGER_TYPE)": "Logger"}, "code": ["Response", "function", "(", "String", "message", ")", "{", "return", "Response", ".", "serverError", "(", ")", ".", "entity", "(", "message", ")", ".", "build", "(", ")", ";", "}"], "memberFunctions": {"call": [["Response", "RestUtils.RestCallable<T> callable"], ["T"]], "createResponse": [["Response", "Object object"]]}, "className": "RestUtils", "renamed": ["Response", "function", "(", "String", "arg0", ")", "{", "return", "Response", ".", "serverError", "(", ")", ".", "entity", "(", "arg0", ")", ".", "build", "(", ")", ";", "}"], "nl": "Creates an error response using the given message.", "nlToks": ["Creates", "an", "error", "response", "using", "the", "given", "message", "."], "path": "poemlin/alluxio/tree/master/core/server/src/main/java/alluxio/RestUtils.java", "idx": 532}
{"memberVariables": {"filter": "Predicate<? super T>", "iterated=false": "boolean", "i": "Iterator<T>", "mapper": "Mapper<? super F,T>", "lookAhead=null": "T", "element": "E"}, "code": ["Iterable", "<", "E", ">", "function", "(", "final", "Iterable", "i", ")", "{", "return", "map", "(", "i", ",", "new", "Mapper", "<", "Object", ",", "E", ">", "(", ")", "{", "public", "E", "apply", "(", "Object", "o", ")", "{", "return", "(", "E", ")", "o", ";", "}", "}", ")", ";", "}"], "memberFunctions": {"singleton": [["Iterable<E>", "final E single"]], "filter": [["Iterable<T>", "final Iterable<T> sequence", "final Predicate<? super T> filter"]], "all": [["boolean", "final Iterable<T> sequence", "final Predicate<? super T> predicate"]], "next": [["E"], ["T"], ["T"]], "count": [["int", "Iterable seq"]], "hasNext": [["boolean"], ["boolean"], ["boolean"]], "map": [["Iterable<T>", "final Iterable<F> from", "final Mapper<? super F,T> mapper"]], "any": [["boolean", "final Iterable<T> sequence", "final Predicate<? super T> predicate"]], "asList": [["List<E>", "Iterable<E> i"]], "remove": [["void"], ["void"], ["void"]]}, "className": "Linqy", "renamed": ["Iterable", "<", "E", ">", "function", "(", "final", "Iterable", "arg0", ")", "{", "return", "map", "(", "arg0", ",", "new", "Mapper", "<", "Object", ",", "E", ">", "(", ")", "{", "public", "E", "apply", "(", "Object", "arg1", ")", "{", "return", "(", "E", ")", "arg1", ";", "}", "}", ")", ";", "}"], "nl": "Turns an iterable into its type-safe cousin.", "nlToks": ["Turns", "an", "iterable", "into", "its", "type-safe", "cousin", "."], "path": "phbenisc/xmlunit/tree/master/xmlunit-core/src/main/java/org/xmlunit/util/Linqy.java", "idx": 533}
{"memberVariables": {"conduitSelector": "ConduitSelector", "requestContext=new HashMap<String,Object>()": "Map<String,Object>", "bus": "Bus", "inInterceptors=new ModCountCopyOnWriteArrayList<Interceptor<? extends Message>>()": "List<Interceptor<? extends Message>>", "synchronousTimeout=60000": "long", "outInterceptors=new ModCountCopyOnWriteArrayList<Interceptor<? extends Message>>()": "List<Interceptor<? extends Message>>", "LOG=LogUtils.getL7dLogger(ClientConfiguration.class)": "Logger", "inFault=new ModCountCopyOnWriteArrayList<Interceptor<? extends Message>>()": "List<Interceptor<? extends Message>>", "responseContext=new HashMap<String,Object>()": "Map<String,Object>", "outFault=new ModCountCopyOnWriteArrayList<Interceptor<? extends Message>>()": "List<Interceptor<? extends Message>>"}, "code": ["Map", "<", "String", ",", "Object", ">", "function", "(", ")", "{", "return", "responseContext", ";", "}"], "memberFunctions": {"getBus": [["Bus"]], "getOutFaultInterceptors": [["List<Interceptor<? extends Message>>"]], "getEndpoint": [["Endpoint"]], "getSynchronousTimeout": [["long"]], "setConduitSelector": [["void", "ConduitSelector cs"]], "setOutInterceptors": [["void", "List<Interceptor<? extends Message>> interceptors"]], "getInInterceptors": [["List<Interceptor<? extends Message>>"]], "isResponseExpectedForOneway": [["boolean"]], "setOutFaultInterceptors": [["void", "List<Interceptor<? extends Message>> interceptors"]], "getHttpConduit": [["HTTPConduit"]], "getConduit": [["Conduit"]], "setSynchronousTimeout": [["void", "long synchronousTimeout"]], "getConduitSelector": [["ConduitSelector"]], "getInFaultInterceptors": [["List<Interceptor<? extends Message>>"]], "getOutInterceptors": [["List<Interceptor<? extends Message>>"]], "setInInterceptors": [["void", "List<Interceptor<? extends Message>> interceptors"]], "getRequestContext": [["Map<String,Object>"]], "setInFaultInterceptors": [["void", "List<Interceptor<? extends Message>> interceptors"]], "setBus": [["void", "Bus bus"]], "prepareConduitSelector": [["void", "Message message"]]}, "className": "ClientConfiguration", "renamed": ["Map", "<", "String", ",", "Object", ">", "function", "(", ")", "{", "return", "responseContext", ";", "}"], "nl": "Get the map of properties which affect the responses only.  These additional properties may be optionally set after a  proxy or WebClient has been created.", "nlToks": ["Get", "the", "map", "of", "properties", "which", "affect", "the", "responses", "only", ".", "These", "additional", "properties", "may", "be", "optionally", "set", "after", "a", "proxy", "or", "WebClient", "has", "been", "created", "."], "path": "primesign/cxf/tree/master/rt/rs/client/src/main/java/org/apache/cxf/jaxrs/client/ClientConfiguration.java", "idx": 534}
{"memberVariables": {"ZERO_HASH=new Sha256Hash(new byte[32])": "Sha256Hash", "bytes": "byte[]"}, "code": ["Sha256Hash", "function", "(", "byte", "[", "]", "contents", ")", "{", "try", "{", "MessageDigest", "digest", "=", "MessageDigest", ".", "getInstance", "(", "\"SHA-256\"", ")", ";", "return", "new", "Sha256Hash", "(", "digest", ".", "digest", "(", "contents", ")", ")", ";", "}", "catch", "(", "NoSuchAlgorithmException", "e", ")", "{", "throw", "new", "RuntimeException", "(", "e", ")", ";", "}", "}"], "memberFunctions": {"createDouble": [["Sha256Hash", "byte[] contents"]], "hashFileContents": [["Sha256Hash", "File f"]], "hashCode": [["int"]], "equals": [["boolean", "Object other"]], "toBigInteger": [["BigInteger"]], "toString": [["String"]], "duplicate": [["Sha256Hash"]], "compareTo": [["int", "Object o"]], "getBytes": [["byte[]"]]}, "className": "Sha256Hash", "renamed": ["Sha256Hash", "function", "(", "byte", "[", "]", "arg0", ")", "{", "try", "{", "MessageDigest", "loc0", "=", "MessageDigest", ".", "getInstance", "(", "\"srini_string\"", ")", ";", "return", "new", "Sha256Hash", "(", "loc0", ".", "loc0", "(", "arg0", ")", ")", ";", "}", "catch", "(", "NoSuchAlgorithmException", "loc0", ")", "{", "throw", "new", "RuntimeException", "(", "loc0", ")", ";", "}", "}"], "nl": "Calculates the (one-time) hash of contents and returns it as a new wrapped hash.", "nlToks": ["Calculates", "the", "-LRB-", "one-time", "-RRB-", "hash", "of", "contents", "and", "returns", "it", "as", "a", "new", "wrapped", "hash", "."], "path": "plncoin/plncoin-and/tree/master/plncoinj/core/src/main/java/com/google/bitcoin/core/Sha256Hash.java", "idx": 536}
{"memberVariables": {"OOZIE_HOME_DIR=\"oozie.home.dir\"": "String", "CONF_SYSTEM_ID=\"oozie.system.id\"": "String", "systemId": "String", "SERVICES": "Services", "CONF_SERVICE_CLASSES=\"oozie.services\"": "String", "CONF_SYSTEM_MODE=\"oozie.systemmode\"": "String", "conf": "Configuration", "services=new LinkedHashMap<Class<? extends Service>,Service>()": "Map<Class<? extends Service>,Service>", "oozieHome": "String", "CONF_DELETE_RUNTIME_DIR=\"oozie.delete.runtime.dir.on.shutdown\"": "String", "CONF_SERVICE_EXT_CLASSES=\"oozie.services.ext\"": "String", "systemMode": "SYSTEM_MODE", "runtimeDir": "String", "MAX_SYSTEM_ID_LEN=10": "int"}, "code": ["T", "function", "(", "Class", "<", "T", ">", "serviceKlass", ")", "{", "return", "(", "T", ")", "services", ".", "get", "(", "serviceKlass", ")", ";", "}"], "memberFunctions": {"getRuntimeDir": [["String"]], "init": [["void"]], "setService": [["void", "Class<? extends Service> klass"]], "getSystemId": [["String"]], "setServiceInternal": [["void", "Class<? extends Service> klass", "boolean logging"]], "getConf": [["Configuration"]], "setOozieHome": [["void"]], "getSystemMode": [["SYSTEM_MODE"]], "setSystemMode": [["void", "SYSTEM_MODE sysMode"]], "destroy": [["void"]], "createRuntimeDir": [["String"]], "getOozieHome": [["String"]]}, "className": "Services", "renamed": ["T", "function", "(", "Class", "<", "T", ">", "arg0", ")", "{", "return", "(", "T", ")", "services", ".", "get", "(", "arg0", ")", ";", "}"], "nl": "Return a service by its public interface.", "nlToks": ["Return", "a", "service", "by", "its", "public", "interface", "."], "path": "pingpangkuangmo/oozie/tree/master/core/src/main/java/org/apache/oozie/service/Services.java", "idx": 537}
{"memberVariables": {"newValue": "Object", "column": "int", "action": "Action", "row": "int", "oldValue": "Object", "table": "JTable"}, "code": ["int", "function", "(", ")", "{", "return", "row", ";", "}"], "memberFunctions": {"processEditingStarted": [["void"]], "getTable": [["JTable"]], "getColumn": [["int"]], "propertyChange": [["void", "PropertyChangeEvent e"]], "run": [["void"]], "getOldValue": [["Object"]], "processEditingStopped": [["void"]], "getNewValue": [["Object"]]}, "className": "TableCellListener", "renamed": ["int", "function", "(", ")", "{", "return", "row", ";", "}"], "nl": "Get the row that was last edited", "nlToks": ["Get", "the", "row", "that", "was", "last", "edited"], "path": "phramusca/JaMuz/tree/master/src/jamuz/gui/swing/TableCellListener.java", "idx": 538}
{"memberVariables": {"address": "AddressType"}, "code": ["String", "function", "(", ")", "{", "String", "result", "=", "\"\"", ";", "try", "{", "result", "=", "address", ".", "getPostalZone", "(", ")", ".", "getValue", "(", ")", ";", "}", "catch", "(", "NullPointerException", "npe", ")", "{", "}", "return", "result", ";", "}"], "memberFunctions": {"getState": [["String"]], "getStreet": [["String"]], "getCity": [["String"]]}, "className": "AddressFacade", "renamed": ["String", "function", "(", ")", "{", "String", "loc0", "=", "\"srini_string\"", ";", "try", "{", "loc0", "=", "address", ".", "getPostalZone", "(", ")", ".", "getValue", "(", ")", ";", "}", "catch", "(", "NullPointerException", "loc1", ")", "{", "}", "return", "loc0", ";", "}"], "nl": "getZip returns a String</code representing the postal zone in a UBL address.", "nlToks": ["getZip", "returns", "a", "String", "<", "/", "code", "representing", "the", "postal", "zone", "in", "a", "UBL", "address", "."], "path": "pmeijer/meta-core/tree/master/meta/DesignDataPackage/tools/jaxb-ri-2.2.6/samples/ubl/src/samples/ubl/report/facade/AddressFacade.java", "idx": 539}
{"memberVariables": {"appName=\"JaMuz\"": "String", "logger=null": "Logger"}, "code": ["void", "function", "(", "String", "methodName", ",", "String", "sql", ",", "Exception", "ex", ")", "{", "popupError", "(", "Inter", ".", "get", "(", "\"Error.SQLException\"", ")", "+", "\":  \"", "+", "methodName", "+", "\" \"", "+", "sql", "+", "\":  \"", "+", "ex", ".", "toString", "(", ")", ")", ";", "}"], "memberFunctions": {"setLogger": [["void", "Logger logger"]], "popupError": [["void", "String str"]], "warning": [["void", "String str"]], "info": [["void", "String str"]]}, "className": "Popup", "renamed": ["void", "function", "(", "String", "arg0", ",", "String", "arg1", ",", "Exception", "arg2", ")", "{", "popupError", "(", "Inter", ".", "get", "(", "\"srini_string\"", ")", "+", "\"srini_string\"", "+", "arg0", "+", "\"srini_string\"", "+", "arg1", "+", "\"srini_string\"", "+", "arg2", ".", "toString", "(", ")", ")", ";", "}"], "nl": "Popup an SQL error", "nlToks": ["Popup", "an", "SQL", "error"], "path": "phramusca/JaMuz/tree/master/src/jamuz/utils/Popup.java", "idx": 540}
{"memberVariables": {"CHILD_AXIS=1": "int", "HOVER_PSEUDOCLASS=4": "int", "selectorID": "int", "siblingSelector=null": "Selector", "_name": "String", "_axis": "int", "FOCUS_PSEUDOCLASS=16": "int", "_pc=0": "int", "ACTIVE_PSEUDOCLASS=8": "int", "selectorCount=0": "int", "DESCENDANT_AXIS=0": "int", "VISITED_PSEUDOCLASS=2": "int", "_parent": "Ruleset", "IMMEDIATE_SIBLING_AXIS=2": "int", "_specificityD": "int", "_pe": "String", "_specificityC": "int", "_specificityB": "int", "chainedSelector=null": "Selector", "_pos": "int", "_namespaceURI": "String", "conditions": "java.util.List"}, "code": ["void", "function", "(", "String", "lang", ")", "{", "_specificityC", "++", ";", "addCondition", "(", "Condition", ".", "createLangCondition", "(", "lang", ")", ")", ";", "}"], "memberFunctions": {"setName": [["void", "String name"]], "addClassCondition": [["void", "String className"]], "addAttributeSubstringCondition": [["void", "String namespaceURI", "String name", "String value"]], "addNthChildCondition": [["void", "String number"]], "setPseudoElement": [["void", "String pseudoElement"]], "addAttributeMatchesListCondition": [["void", "String namespaceURI", "String name", "String value"]], "addAttributeEqualsCondition": [["void", "String namespaceURI", "String name", "String value"]], "addCondition": [["void", "Condition c"]], "addEvenChildCondition": [["void"]], "addIDCondition": [["void", "String id"]], "addAttributePrefixCondition": [["void", "String namespaceURI", "String name", "String value"]], "setPos": [["void", "int pos"]], "addLinkCondition": [["void"]], "addLastChildCondition": [["void"]], "matchesDynamic": [["boolean", "Object e", "AttributeResolver attRes", "TreeResolver treeRes"]], "setChainedSelector": [["void", "Selector selector"]], "setNamespaceURI": [["void", "String namespaceURI"]], "getSpecificityD": [["int"]], "addUnsupportedCondition": [["void"]], "getSpecificityC": [["int"]], "getChainedSelector": [["Selector"]], "getSpecificityB": [["int"]], "setParent": [["void", "Ruleset ruleset"]], "addAttributeExistsCondition": [["void", "String namespaceURI", "String name"]], "addFirstChildCondition": [["void"]], "getElementStylingOrder": [["String"]], "setSiblingSelector": [["void", "Selector selector"]], "addAttributeSuffixCondition": [["void", "String namespaceURI", "String name", "String value"]], "getSelectorID": [["int"]], "getAxis": [["int"]], "setAxis": [["void", "int axis"]], "addAttributeMatchesFirstPartCondition": [["void", "String namespaceURI", "String name", "String value"]], "getPseudoElement": [["String"]], "getRuleset": [["Ruleset"]], "matches": [["boolean", "Object e", "AttributeResolver attRes", "TreeResolver treeRes"]], "addOddChildCondition": [["void"]], "setPseudoClass": [["void", "int pc"]], "isPseudoClass": [["boolean", "int pc"]], "getOrder": [["String"]], "getAppropriateSibling": [["Object", "Object e", "TreeResolver treeRes"]], "setSpecificityB": [["void", "int b"]], "setSpecificityC": [["void", "int c"]], "setSpecificityD": [["void", "int d"]]}, "className": "Selector", "renamed": ["void", "function", "(", "String", "arg0", ")", "{", "_specificityC", "++", ";", "addCondition", "(", "Condition", ".", "createLangCondition", "(", "arg0", ")", ")", ";", "}"], "nl": "the CSS condition :lang(Xx)", "nlToks": ["the", "CSS", "condition", ":", "lang", "-LRB-", "Xx", "-RRB-"], "path": "plutogeek/flyingsaucer/tree/master/flying-saucer-core/src/main/java/org/xhtmlrenderer/css/newmatch/Selector.java", "idx": 542}
{"memberVariables": {}, "code": ["long", "function", "(", "JSONObject", "map", ",", "String", "name", ")", "{", "Long", "l", "=", "(", "Long", ")", "map", ".", "get", "(", "name", ")", ";", "return", "(", "l", "!=", "null", ")", "?", "l", ":", "0", ";", "}"], "memberFunctions": {"parseDateRfc822": [["Date", "String str"]], "getListString": [["List<String>", "JSONObject json", "String name"]], "formatDateRfc822": [["String", "Date date"]]}, "className": "JsonUtils", "renamed": ["long", "function", "(", "JSONObject", "arg0", ",", "String", "arg1", ")", "{", "Long", "loc0", "=", "(", "Long", ")", "arg0", ".", "get", "(", "arg1", ")", ";", "return", "(", "loc0", "!=", "null", ")", "?", "loc0", ":", "0", ";", "}"], "nl": "Return a long value from a JSONObject.", "nlToks": ["Return", "a", "long", "value", "from", "a", "JSONObject", "."], "path": "pingpangkuangmo/oozie/tree/master/client/src/main/java/org/apache/oozie/client/rest/JsonUtils.java", "idx": 544}
{"memberVariables": {"interactionType": "String", "experimentTypes": "String", "geneB": "long", "pmids": "String", "geneA": "long", "source": "String"}, "code": ["void", "function", "(", "String", "expTypes", ")", "{", "this", ".", "experimentTypes", "=", "expTypes", ";", "}"], "memberFunctions": {"setSource": [["void", "String s"]], "toSif": [["String"]], "setGeneA": [["void", "long entrezGeneId"]], "setGeneB": [["void", "long entrezGeneID"]], "getInteractionType": [["String"]], "getGeneA": [["long"]], "getGeneB": [["long"]], "setPmids": [["void", "String p"]], "getSource": [["String"]], "toString": [["String"]], "setInteractionType": [["void", "String type"]], "getExperimentTypes": [["String"]], "getPmids": [["String"]]}, "className": "Interaction", "renamed": ["void", "function", "(", "String", "arg0", ")", "{", "this", ".", "experimentTypes", "=", "arg0", ";", "}"], "nl": "Sets the Experiment Types.", "nlToks": ["Sets", "the", "Experiment", "Types", "."], "path": "adamabeshouse/cbioportal/tree/master/core/src/main/java/org/mskcc/cbio/portal/model/Interaction.java", "idx": 545}
{"memberVariables": {"certificateCredentials": "CertificateCredentials", "user": "UserValidation", "passwordCredentials": "PasswordCredentials", "token": "Token"}, "code": ["PasswordCredentials", "function", "(", ")", "{", "return", "passwordCredentials", ";", "}"], "memberFunctions": {"setToken": [["void", "Token value"]], "getToken": [["Token"]], "getUser": [["UserValidation"]], "setPasswordCredentials": [["void", "PasswordCredentials value"]], "getCertificateCredentials": [["CertificateCredentials"]], "setCertificateCredentials": [["void", "CertificateCredentials value"]], "setUser": [["void", "UserValidation value"]]}, "className": "Auth", "renamed": ["PasswordCredentials", "function", "(", ")", "{", "return", "passwordCredentials", ";", "}"], "nl": "Gets the value of the passwordCredentials property.", "nlToks": ["Gets", "the", "value", "of", "the", "passwordCredentials", "property", "."], "path": "platformlayer/platformlayer/tree/master/auth/client/src/generated/xjc/org/platformlayer/auth/v1/Auth.java", "idx": 547}
{"memberVariables": {"reason": "String", "feedId": "String", "testId": "String", "batchId": "String", "runStatus": "String"}, "code": ["String", "function", "(", ")", "{", "return", "reason", ";", "}"], "memberFunctions": {"setFeedId": [["void", "String feedId"]], "isFeedRunnable": [["boolean"]], "getRunStatus": [["String"]], "setReason": [["void", "String reason"]], "getBatchId": [["String"]], "toString": [["String"]], "getFeedId": [["String"]], "setBatchId": [["void", "String batchId"]], "setTestId": [["void", "String testId"]], "getTestId": [["String"]], "setRunStatus": [["void", "String runStatus"]]}, "className": "FeedConfigResponse", "renamed": ["String", "function", "(", ")", "{", "return", "reason", ";", "}"], "nl": "Gets the reason.", "nlToks": ["Gets", "the", "reason", "."], "path": "pkesireddy/portico_fletcher/tree/master/FetcherTesterService/src/main/java/org/ithaka/cm/fetchertester/model/FeedConfigResponse.java", "idx": 548}
{"memberVariables": {"rand=new Random(121342)": "Random"}, "code": ["void", "function", "(", ")", "{", "CheckMatrixMultShape", "check", "=", "new", "CheckMatrixMultShape", "(", "MatrixMatrixMult", ".", "class", ")", ";", "check", ".", "checkAll", "(", ")", ";", "}"], "memberFunctions": {"checkAllAgainstKnown": [["void"]], "checkResults": [["void", "DenseMatrix64F a_orig", "DenseMatrix64F b_orig", "DenseMatrix64F c_orig", "DenseMatrix64F r_orig"]], "checkAgainstRandomDiffShapes": [["void"]], "invoke": [["void", "Method func", "double alpha", "DenseMatrix64F a", "DenseMatrix64F b", "DenseMatrix64F c"]], "transpose": [["void", "DenseMatrix64F a"]], "checkInputInstance": [["void"]]}, "className": "TestMatrixMatrixMult", "renamed": ["void", "function", "(", ")", "{", "CheckMatrixMultShape", "loc0", "=", "new", "CheckMatrixMultShape", "(", "MatrixMatrixMult", ".", "class", ")", ";", "loc0", ".", "checkAll", "(", ")", ";", "}"], "nl": "Checks to see that it only accepts input matrices that have compatible shapes", "nlToks": ["Checks", "to", "see", "that", "it", "only", "accepts", "input", "matrices", "that", "have", "compatible", "shapes"], "path": "adamaulia/efficient-java-matrix-library/tree/master/test/org/ejml/alg/dense/mult/TestMatrixMatrixMult.java", "idx": 550}
{"memberVariables": {"PROPS=new ArrayList()": "List"}, "code": ["void", "function", "(", ")", "{", "for", "(", "int", "i", "=", "0", ";", "i", "<", "PROPS", ".", "size", "(", ")", ";", "i", "++", ")", "(", "(", "AbstractSettings", ")", "PROPS", ".", "get", "(", "i", ")", ")", ".", "revertToDefault", "(", ")", ";", "}"], "memberFunctions": {"reload": [["void"]], "addSettings": [["void", "AbstractSettings setting"]], "save": [["void"]], "setShouldSave": [["void", "boolean shouldSave"]], "removeSettings": [["void", "AbstractSettings setting"]]}, "className": "SettingsHandler", "renamed": ["void", "function", "(", ")", "{", "for", "(", "int", "loc0", "=", "0", ";", "loc0", "<", "PROPS", ".", "size", "(", ")", ";", "loc0", "++", ")", "(", "(", "AbstractSettings", ")", "PROPS", ".", "get", "(", "loc0", ")", ")", ".", "revertToDefault", "(", ")", ";", "}"], "nl": "Revert all settings to their default value.", "nlToks": ["Revert", "all", "settings", "to", "their", "default", "value", "."], "path": "adamfisk/littleshoot-client/tree/master/client/util/src/main/java/org/lastbamboo/client/util/settings/SettingsHandler.java", "idx": 551}
{"memberVariables": {"SINGLETON=new ArgoEventPump()": "ArgoEventPump", "listeners": "List<Pair>", "LOG=Logger.getLogger(ArgoEventPump.class)": "Logger", "listener": "ArgoEventListener", "eventType": "int"}, "code": ["void", "function", "(", "ArgoDiagramAppearanceEvent", "event", ",", "ArgoDiagramAppearanceEventListener", "listener", ")", "{", "switch", "(", "event", ".", "getEventType", "(", ")", ")", "{", "case", "ArgoEventTypes", ".", "DIAGRAM_FONT_CHANGED", ":", "listener", ".", "diagramFontChanged", "(", "event", ")", ";", "break", ";", "default", ":", "LOG", ".", "error", "(", "\"Invalid event:\"", "+", "event", ".", "getEventType", "(", ")", ")", ";", "break", ";", "}", "}"], "memberFunctions": {"doAddListener": [["void", "int event", "ArgoEventListener listener"]], "handleFireGeneratorEvent": [["void", "ArgoGeneratorEvent event", "ArgoGeneratorEventListener listener"]], "fireEvent": [["void", "ArgoEvent event"]], "removeListener": [["void", "ArgoEventListener listener"], ["void", "int event", "ArgoEventListener listener"]], "handleFireStatusEvent": [["void", "ArgoStatusEvent event", "ArgoStatusEventListener listener"]], "getEventType": [["int"]], "doRemoveListener": [["void", "int event", "ArgoEventListener listener"]], "handleFireEvent": [["void", "ArgoEvent event", "ArgoEventListener listener"]], "hashCode": [["int"]], "handleFireProfileEvent": [["void", "ArgoProfileEvent event", "ArgoProfileEventListener listener"]], "equals": [["boolean", "Object o"]], "handleFireHelpEvent": [["void", "ArgoHelpEvent event", "ArgoHelpEventListener listener"]], "handleFireNotationEvent": [["void", "ArgoNotationEvent event", "ArgoNotationEventListener listener"]], "toString": [["String"]], "getInstance": [["ArgoEventPump"]], "doFireEvent": [["void", "ArgoEvent event"]], "getListener": [["ArgoEventListener"]], "addListener": [["void", "ArgoEventListener listener"], ["void", "int event", "ArgoEventListener listener"]]}, "className": "ArgoEventPump", "renamed": ["void", "function", "(", "ArgoDiagramAppearanceEvent", "arg0", ",", "ArgoDiagramAppearanceEventListener", "arg1", ")", "{", "switch", "(", "arg0", ".", "getEventType", "(", ")", ")", "{", "case", "ArgoEventTypes", ".", "DIAGRAM_FONT_CHANGED", ":", "arg1", ".", "diagramFontChanged", "(", "arg0", ")", ";", "break", ";", "default", ":", "LOG", ".", "error", "(", "\"srini_string\"", "+", "arg0", ".", "getEventType", "(", ")", ")", ";", "break", ";", "}", "}"], "nl": "Handle firing a diagram appearance event.", "nlToks": ["Handle", "firing", "a", "diagram", "appearance", "event", "."], "path": "pichiliani/CoArgoUML/tree/master/v0.24/fonte/src/argouml-app/src/org/argouml/application/events/ArgoEventPump.java", "idx": 552}
{"memberVariables": {"c": "double", "eigenSmall=new EigenvalueSmall()": "EigenvalueSmall", "numSplits": "int", "numExceptional": "int", "bulge": "double", "steps": "int", "N": "int", "c2": "double", "cs": "double", "Q": "DenseMatrix64F", "splits[]": "int", "rand=new Random(0x34671e)": "Random", "s": "double", "diag[]": "double", "x1": "int", "x2": "int", "off[]": "double", "lastExceptional": "int", "s2": "double"}, "code": ["boolean", "function", "(", "int", "index", ")", "{", "double", "bottom", "=", "Math", ".", "abs", "(", "diag", "[", "index", "]", ")", "+", "Math", ".", "abs", "(", "diag", "[", "index", "+", "1", "]", ")", ";", "return", "(", "Math", ".", "abs", "(", "off", "[", "index", "]", ")", "<=", "bottom", "*", "UtilEjml", ".", "EPS", ")", ";", "}"], "memberFunctions": {"computeWilkinsonShift": [["double"]], "eigenvalue2by2": [["void", "int x1"]], "nextSplit": [["boolean"]], "createBulge": [["void", "int x1", "double p", "boolean byAngle"]], "copyDiag": [["double[]", "double[] ret"]], "incrementSteps": [["void"]], "computeRotation": [["void", "double run", "double rise"]], "printMatrix": [["void"]], "swapOff": [["double[]", "double off[]"]], "createBulge2by2": [["void", "int x1", "double p", "boolean byAngle"]], "setQ": [["void", "DenseMatrix64F q"]], "removeBulge": [["void", "int x1"]], "copyEigenvalues": [["double[]", "double[] ret"]], "removeBulgeEnd": [["void", "int x1"]], "init": [["void", "double diag[]", "double off[]", "int numCols"]], "computeShift": [["double"]], "swapDiag": [["double[]", "double diag[]"]], "exceptionalShift": [["void"]], "setSubmatrix": [["void", "int x1", "int x2"]], "getMatrixSize": [["int"]], "updateQ": [["void", "int m", "int n", "double c", "double s"]], "copyOff": [["double[]", "double[] ret"]], "resetSteps": [["void"]], "reset": [["void", "int N"]], "performImplicitSingleStep": [["void", "double lambda", "boolean byAngle"]]}, "className": "SymmetricQREigenHelper", "renamed": ["boolean", "function", "(", "int", "arg0", ")", "{", "double", "loc0", "=", "Math", ".", "abs", "(", "diag", "[", "arg0", "]", ")", "+", "Math", ".", "abs", "(", "diag", "[", "arg0", "+", "1", "]", ")", ";", "return", "(", "Math", ".", "abs", "(", "off", "[", "arg0", "]", ")", "<=", "loc0", "*", "UtilEjml", ".", "EPS", ")", ";", "}"], "nl": "Checks to see if the specified off diagonal element is zero using a relative metric.", "nlToks": ["Checks", "to", "see", "if", "the", "specified", "off", "diagonal", "element", "is", "zero", "using", "a", "relative", "metric", "."], "path": "adamaulia/efficient-java-matrix-library/tree/master/src/org/ejml/alg/dense/decomposition/eig/symm/SymmetricQREigenHelper.java", "idx": 554}
{"memberVariables": {}, "code": ["void", "function", "(", "InputStream", "input", ")", "{", "BufferedReader", "reader", "=", "new", "BufferedReader", "(", "new", "InputStreamReader", "(", "input", ")", ")", ";", "while", "(", "true", ")", "{", "String", "line", "=", "reader", ".", "readLine", "(", ")", ";", "if", "(", "line", "==", "null", ")", "break", ";", "System", ".", "out", ".", "println", "(", "\"    \"", "+", "line", ")", ";", "}", "System", ".", "out", ".", "println", "(", ")", ";", "}"], "memberFunctions": {"createSampleFile": [["File"]], "main": [["void", "String[] args"]]}, "className": "S3Sample", "renamed": ["void", "function", "(", "InputStream", "arg0", ")", "{", "BufferedReader", "loc0", "=", "new", "BufferedReader", "(", "new", "InputStreamReader", "(", "arg0", ")", ")", ";", "while", "(", "true", ")", "{", "String", "loc1", "=", "loc0", ".", "readLine", "(", ")", ";", "if", "(", "loc1", "==", "null", ")", "break", ";", "System", ".", "out", ".", "println", "(", "\"srini_string\"", "+", "loc1", ")", ";", "}", "System", ".", "out", ".", "println", "(", ")", ";", "}"], "nl": "Displays the contents of the specified input stream as text.", "nlToks": ["Displays", "the", "contents", "of", "the", "specified", "input", "stream", "as", "text", "."], "path": "adityaparikh91087/s3sample/tree/master/src/main/java/com/amazonaws/samples/S3Sample.java", "idx": 556}
{"memberVariables": {}, "code": ["boolean", "function", "(", "Message", "message", ")", "{", "return", "Boolean", ".", "TRUE", ".", "equals", "(", "message", ".", "get", "(", "Message", ".", "PARTIAL_RESPONSE_MESSAGE", ")", ")", ";", "}"], "memberFunctions": {"getFaultMode": [["FaultMode", "Message message"]], "isDOMPresent": [["boolean", "Message m"]], "isRequestor": [["boolean", "Message message"]], "isTrue": [["boolean", "Object value"]], "isOutbound": [["boolean", "Message message"]], "isEmptyPartialResponse": [["boolean", "Message message"]], "getContextualBoolean": [["boolean", "Message m", "String key", "boolean defaultValue"]], "isFault": [["boolean", "Message message"]], "getContextualProperty": [["Object", "Message m", "String propPreferred", "String propDefault"]]}, "className": "MessageUtils", "renamed": ["boolean", "function", "(", "Message", "arg0", ")", "{", "return", "Boolean", ".", "TRUE", ".", "equals", "(", "arg0", ".", "get", "(", "Message", ".", "PARTIAL_RESPONSE_MESSAGE", ")", ")", ";", "}"], "nl": "Determine if the current message is a partial response.", "nlToks": ["Determine", "if", "the", "current", "message", "is", "a", "partial", "response", "."], "path": "primesign/cxf/tree/master/core/src/main/java/org/apache/cxf/message/MessageUtils.java", "idx": 557}
{"memberVariables": {"method": "Method", "parallelism": "Number", "expressionParser=new SpelExpressionParser()": "SpelExpressionParser", "outputBinding=new HashMap<>()": "Map<String,Expression>", "scatterOutput": "boolean", "beanType": "Class<?>", "outputFields": "String[]", "spring": "ApplicationContext", "inputSignature": "FunctionSignature", "EMPTY_ARRAY={}": "Values[]", "outputStreamId": "String", "id": "String", "outputBindingDefinitions=new HashMap<>()": "Map<String,String>", "logger=LoggerFactory.getLogger(SpringComponent.class)": "Logger", "serialVersionUID=3": "long"}, "code": ["void", "function", "(", "OutputFieldsDeclarer", "declarer", ")", "{", "String", "streamId", "=", "getOutputStreamId", "(", ")", ";", "Fields", "names", "=", "new", "Fields", "(", "outputFields", ")", ";", "logger", ".", "info", "(", "\"{} declares {} for stream '{}'\"", ",", "new", "Object", "[", "]", "{", "this", ",", "names", ",", "streamId", "}", ")", ";", "declarer", ".", "declareStream", "(", "streamId", ",", "names", ")", ";", "}"], "memberFunctions": {"getComponentConfiguration": [["Map<String,Object>"]], "init": [["void", "Map stormConf", "TopologyContext topologyContext"]], "getMapping": [["Values", "Object returnEntry"]], "getInputFields": [["String[]"]], "mapOutputFields": [["Object[]", "Object returnEntry", "String[] fields"]], "invoke": [["Object[]", "Object[] arguments"], ["Object", "Method method", "Object[] arguments"]], "setOutputStreamId": [["void", "String value"]], "getId": [["String"]], "getOutputStreamId": [["String"]], "getOutputFields": [["String[]"]], "setParallelism": [["void", "Number value"]], "setOutputBinding": [["void", "Map<String,String> value"]], "setApplicationContext": [["void", "ApplicationContext value"]], "setScatterOutput": [["void", "boolean value"]], "getParallelism": [["Number"]], "getOutputBinding": [["Expression", "String field"]], "setId": [["void", "String value"]], "getScatterOutput": [["boolean"]], "putOutputBinding": [["void", "String field", "String expression"]]}, "className": "SpringComponent", "renamed": ["void", "function", "(", "OutputFieldsDeclarer", "arg0", ")", "{", "String", "loc0", "=", "getOutputStreamId", "(", ")", ";", "Fields", "loc1", "=", "new", "Fields", "(", "outputFields", ")", ";", "logger", ".", "info", "(", "\"srini_string\"", ",", "new", "Object", "[", "]", "{", "this", ",", "loc1", ",", "loc0", "}", ")", ";", "arg0", ".", "declareStream", "(", "loc0", ",", "loc1", ")", ";", "}"], "nl": "Registers the  {@link #getOutputFields() output field names}.", "nlToks": ["Registers", "the", "-LCB-", "@link", "#getOutputFields", "-LRB-", "-RRB-", "output", "field", "names", "-RCB-", "."], "path": "politie/breeze/tree/master/src/main/java/eu/icolumbo/breeze/SpringComponent.java", "idx": 558}
{"memberVariables": {"mTestTier": "StorageTier", "TEST_TIER_LEVEL=0": "int", "mThrown=ExpectedException.none()": "ExpectedException", "mTestFolder=new TemporaryFolder()": "TemporaryFolder", "mTestTierView": "StorageTierView"}, "code": ["void", "function", "(", ")", "{", "for", "(", "int", "i", "=", "0", ";", "i", "<", "TieredBlockStoreTestUtils", ".", "TIER_PATH", "[", "TEST_TIER_LEVEL", "]", ".", "length", ";", "i", "++", ")", "{", "Assert", ".", "assertEquals", "(", "i", ",", "mTestTierView", ".", "getDirView", "(", "i", ")", ".", "getDirViewIndex", "(", ")", ")", ";", "}", "}"], "memberFunctions": {"getDirViews": [["void"]], "before": [["void"]], "getDirViewBadIndex": [["void"]], "getTierViewAlias": [["void"]], "getTierViewOrdinal": [["void"]]}, "className": "StorageTierViewTest", "renamed": ["void", "function", "(", ")", "{", "for", "(", "int", "loc0", "=", "0", ";", "loc0", "<", "TieredBlockStoreTestUtils", ".", "TIER_PATH", "[", "TEST_TIER_LEVEL", "]", ".", "length", ";", "loc0", "++", ")", "{", "Assert", ".", "assertEquals", "(", "loc0", ",", "mTestTierView", ".", "getDirView", "(", "loc0", ")", ".", "getDirViewIndex", "(", ")", ")", ";", "}", "}"], "nl": "Tests the  {@link StorageTierView#getDirView(int)} method.", "nlToks": ["Tests", "the", "-LCB-", "@link", "StorageTierView", "#getDirView", "-LRB-", "int", "-RRB-", "-RCB-", "method", "."], "path": "poemlin/alluxio/tree/master/core/server/src/test/java/alluxio/worker/block/meta/StorageTierViewTest.java", "idx": 559}
{"memberVariables": {"factory": "TransformerFactory", "errorListener": "ErrorListener", "output=new Properties()": "Properties", "styleSheet": "Source", "source": "Source", "uriResolver": "URIResolver", "params=new HashMap<String,Object>()": "Map<String,Object>"}, "code": ["Document", "function", "(", ")", "{", "DOMResult", "r", "=", "new", "DOMResult", "(", ")", ";", "transformTo", "(", "r", ")", ";", "return", "(", "Document", ")", "r", ".", "getNode", "(", ")", ";", "}"], "memberFunctions": {"setSource": [["void", "Source s"]], "setFactory": [["void", "TransformerFactory f"]], "setStylesheet": [["void", "Source s"]], "transformTo": [["void", "Result r"]], "setErrorListener": [["void", "ErrorListener l"]], "clearParameters": [["void"]], "transformToString": [["String"]], "setURIResolver": [["void", "URIResolver r"]], "clearOutputProperties": [["void"]], "addParameter": [["void", "String name", "Object value"]], "addOutputProperty": [["void", "String name", "String value"]]}, "className": "Transformation", "renamed": ["Document", "function", "(", ")", "{", "DOMResult", "loc0", "=", "new", "DOMResult", "(", ")", ";", "transformTo", "(", "loc0", ")", ";", "return", "(", "Document", ")", "loc0", ".", "getNode", "(", ")", ";", "}"], "nl": "Convenience method that returns the result of the transformation as a Document.", "nlToks": ["Convenience", "method", "that", "returns", "the", "result", "of", "the", "transformation", "as", "a", "Document", "."], "path": "phbenisc/xmlunit/tree/master/xmlunit-core/src/main/java/org/xmlunit/transform/Transformation.java", "idx": 560}
{"memberVariables": {"TAB=\"\\t\"": "String", "GENE_SYMBOL=0": "int", "warningList=new ArrayList<String>()": "ArrayList<String>", "ID_ENTREZ_GENE=1": "int", "uri": "URI", "content": "String"}, "code": ["URI", "function", "(", ")", "{", "return", "this", ".", "uri", ";", "}"], "memberFunctions": {"getAlleleCount": [["String", "Integer count"]], "getWarnings": [["ArrayList<String>"]], "getContent": [["String"]], "getColumnHeaders": [["String"]], "getMutationData": [["List<ExtendedMutation>", "GeneticProfile profile", "List<String> geneList", "Set<String> sampleIdSet", "XDebug xdebug"]], "getProfileData": [["String", "String geneticProfileId", "List<String> targetGeneList", "List<String> targetSampleList"]]}, "className": "GetMutationData", "renamed": ["URI", "function", "(", ")", "{", "return", "this", ".", "uri", ";", "}"], "nl": "Gets URI for connecting to remote server.", "nlToks": ["Gets", "URI", "for", "connecting", "to", "remote", "server", "."], "path": "adamabeshouse/cbioportal/tree/master/core/src/main/java/org/mskcc/cbio/portal/web_api/GetMutationData.java", "idx": 561}
{"memberVariables": {"mLock=new ReentrantLock()": "ReentrantLock", "mExecutor": "ScheduledExecutorService", "mClock=new SystemClock()": "Clock", "mInitialDelayMs=100": "long", "mLastAccessTimeMs": "long", "mNotEmpty=mLock.newCondition()": "Condition", "mGcExecutor": "ScheduledExecutorService", "mGcIntervalMs=120 * Constants.SECOND_MS": "long", "mIdentity=System.identityHashCode(this)": "int", "mResource": "T", "mMaxCapacity": "int", "mResources=new HashMap<>(32)": "HashMap<T,ResourceInternal<T>>", "mMaxCapacity=1024": "int", "mGcFuture": "ScheduledFuture<?>", "mResourceAvailable=new TreeSet<>(new Comparator<ResourceInternal<T>>(){\n  @Override public int compare(  ResourceInternal<T> c1,  ResourceInternal<T> c2){\n    if (c1 == c2) {\n      return 0;\n    }\n    if (c1.mLastAccessTimeMs == c2.mLastAccessTimeMs) {\n      return c1.mIdentity - c2.mIdentity;\n    }\n    return (int)(c2.mLastAccessTimeMs - c1.mLastAccessTimeMs);\n  }\n}\n)": "TreeSet<ResourceInternal<T>>", "mMinCapacity": "int", "LOG=LoggerFactory.getLogger(Constants.LOGGER_TYPE)": "Logger", "mMinCapacity=1": "int"}, "code": ["T", "function", "(", ")", "{", "try", "{", "return", "acquire", "(", "100", ",", "TimeUnit", ".", "DAYS", ")", ";", "}", "catch", "(", "TimeoutException", "e", ")", "{", "throw", "Throwables", ".", "propagate", "(", "e", ")", ";", "}", "}"], "memberFunctions": {"createNewResource": [["T"]], "compare": [["int", "ResourceInternal<T> c1", "ResourceInternal<T> c2"]], "release": [["void", "T resource"]], "poll": [["ResourceInternal<T>"]], "remove": [["void", "T resource"]], "isHealthy": [["boolean", "T resource"]], "shouldGc": [["boolean", "ResourceInternal<T> resourceInternal"]], "setLastAccessTimeMs": [["void", "long lastAccessTimeMs"]], "setMinCapacity": [["Options", "int minCapacity"]], "setGcIntervalMs": [["Options", "long gcIntervalMs"]], "setGcExecutor": [["Options", "ScheduledExecutorService gcExecutor"]], "setInitialDelayMs": [["Options", "long initialDelayMs"]], "getInitialDelayMs": [["long"]], "getLastAccessTimeMs": [["long"]], "close": [["void"]], "add": [["boolean", "ResourceInternal<T> resource"]], "getGcExecutor": [["ScheduledExecutorService"]], "getMaxCapacity": [["int"]], "defaultOptions": [["Options"]], "closeResource": [["void", "T resource"]], "setMaxCapacity": [["Options", "int maxCapacity"]], "closeResourceSync": [["void", "T resource"]], "size": [["int"]], "getGcIntervalMs": [["long"]], "checkHealthyAndRetry": [["T", "T resource", "long endTimeMs"]], "getMinCapacity": [["int"]], "isFull": [["boolean"]]}, "className": "DynamicResourcePool", "renamed": ["T", "function", "(", ")", "{", "try", "{", "return", "acquire", "(", "100", ",", "TimeUnit", ".", "DAYS", ")", ";", "}", "catch", "(", "TimeoutException", "loc0", ")", "{", "throw", "Throwables", ".", "propagate", "(", "loc0", ")", ";", "}", "}"], "nl": "Acquire a resource of type {code T} from the pool.", "nlToks": ["Acquire", "a", "resource", "of", "type", "-LCB-", "code", "T", "-RCB-", "from", "the", "pool", "."], "path": "poemlin/alluxio/tree/master/core/common/src/main/java/alluxio/resource/DynamicResourcePool.java", "idx": 562}
{"memberVariables": {"mIn": "FileInStream", "mOut": "FileOutStream"}, "code": ["void", "function", "(", ")", "{", "if", "(", "mIn", "!=", "null", ")", "{", "mIn", ".", "close", "(", ")", ";", "}", "if", "(", "mOut", "!=", "null", ")", "{", "mOut", ".", "close", "(", ")", ";", "}", "}"], "memberFunctions": {"getIn": [["FileInStream"]], "getOut": [["FileOutStream"]]}, "className": "OpenFileEntry", "renamed": ["void", "function", "(", ")", "{", "if", "(", "mIn", "!=", "null", ")", "{", "mIn", ".", "close", "(", ")", ";", "}", "if", "(", "mOut", "!=", "null", ")", "{", "mOut", ".", "close", "(", ")", ";", "}", "}"], "nl": "Closes the underlying open streams.", "nlToks": ["Closes", "the", "underlying", "open", "streams", "."], "path": "poemlin/alluxio/tree/master/integration/fuse/src/main/java/alluxio/fuse/OpenFileEntry.java", "idx": 564}
{"memberVariables": {"UNKNOWN=-1": "int", "line": "int", "column": "int", "type": "ProblemType", "message": "String"}, "code": ["int", "function", "(", ")", "{", "return", "column", ";", "}"], "memberFunctions": {"getType": [["ProblemType"]], "fromException": [["ValidationProblem", "SAXParseException e", "ProblemType type"]], "getLine": [["int"]], "getMessage": [["String"]], "toString": [["String"]]}, "className": "ValidationProblem", "renamed": ["int", "function", "(", ")", "{", "return", "column", ";", "}"], "nl": "The column where the problem occured or  {@link #UNKNOWN UNKNOWN}.", "nlToks": ["The", "column", "where", "the", "problem", "occured", "or", "-LCB-", "@link", "#UNKNOWN", "UNKNOWN", "-RCB-", "."], "path": "phbenisc/xmlunit/tree/master/xmlunit-core/src/main/java/org/xmlunit/validation/ValidationProblem.java", "idx": 565}
{"memberVariables": {"ptr=0": "int", "finalised=false": "boolean", "mixednumber=new byte[32]": "byte[]", "sr": "SecureRandom"}, "code": ["void", "function", "(", "byte", "[", "]", "number", ")", "{", "if", "(", "number", ".", "length", "!=", "mixednumber", ".", "length", ")", "throw", "new", "IllegalArgumentException", "(", "\"Invalid number length provided\"", ")", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "mixednumber", ".", "length", ";", "i", "++", ")", "mixednumber", "[", "i", "]", "^=", "number", "[", "i", "]", ";", "}"], "memberFunctions": {"hashByteArr": [["byte[]", "byte[] arr"]], "finalise": [["void"]], "getByte": [["int"]], "nextInt": [["long"]], "hexToByte": [["byte[]", "String str"]]}, "className": "SeededGenerator", "renamed": ["void", "function", "(", "byte", "[", "]", "arg0", ")", "{", "if", "(", "arg0", ".", "length", "!=", "mixednumber", ".", "length", ")", "throw", "new", "IllegalArgumentException", "(", "\"srini_string\"", ")", ";", "for", "(", "int", "loc0", "=", "0", ";", "loc0", "<", "mixednumber", ".", "length", ";", "loc0", "++", ")", "mixednumber", "[", "loc0", "]", "^=", "arg0", "[", "loc0", "]", ";", "}"], "nl": "Adds and verifies a number sent by a player after its corresponding hash was sent", "nlToks": ["Adds", "and", "verifies", "a", "number", "sent", "by", "a", "player", "after", "its", "corresponding", "hash", "was", "sent"], "path": "adamncasey/MultiplayerRisk/tree/master/src/logic/rng/SeededGenerator.java", "idx": 566}
{"memberVariables": {"classes=new HashMap<>()": "Map<String,ClassStats>", "subPackages=new HashMap<>()": "Map<String,PackageStats>"}, "code": ["double", "function", "(", "Metrics", ".", "OperationMetricKey", "key", ",", "ASTMethodOrConstructorDeclaration", "node", ",", "boolean", "force", ")", "{", "QualifiedName", "qname", "=", "node", ".", "getQualifiedName", "(", ")", ";", "ClassStats", "container", "=", "getClassStats", "(", "qname", ",", "false", ")", ";", "return", "container", "==", "null", "?", "Double", ".", "NaN", ":", "container", ".", "compute", "(", "key", ",", "node", ",", "qname", ".", "getOperation", "(", ")", ",", "force", ")", ";", "}"], "memberFunctions": {"getClassStats": [["ClassStats", "QualifiedName qname", "boolean createIfNotFound"]], "getSubPackage": [["PackageStats", "QualifiedName qname", "boolean createIfNotFound"]], "hasMatchingSig": [["boolean", "QualifiedName qname", "OperationSigMask sigMask"], ["boolean", "QualifiedName qname", "String fieldName", "FieldSigMask sigMask"]]}, "className": "PackageStats", "renamed": ["double", "function", "(", "Metrics", ".", "OperationMetricKey", "arg0", ",", "ASTMethodOrConstructorDeclaration", "arg1", ",", "boolean", "arg2", ")", "{", "QualifiedName", "loc0", "=", "arg1", ".", "getQualifiedName", "(", ")", ";", "ClassStats", "loc1", "=", "getClassStats", "(", "loc0", ",", "false", ")", ";", "return", "loc1", "==", "null", "?", "Double", ".", "NaN", ":", "loc1", ".", "compute", "(", "arg0", ",", "arg1", ",", "loc0", ".", "getOperation", "(", ")", ",", "arg2", ")", ";", "}"], "nl": "Computes the value of a metric for an operation.", "nlToks": ["Computes", "the", "value", "of", "a", "metric", "for", "an", "operation", "."], "path": "adangel/pmd/tree/master/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/oom/PackageStats.java", "idx": 567}
{"memberVariables": {"LOG=LoggerFactory.getLogger(YahooSearchTest.class)": "Logger"}, "code": ["void", "function", "(", ")", "{", "runTest", "(", "\"katrina_image.xml\"", ",", "new", "YahooImageFactory", "(", "null", ")", ",", "763", ")", ";", "}"], "memberFunctions": {"verifyResults": [["void", "final Collection results"]], "runJsonTest": [["void", "final String testFilePath", "final JsonRestResultFactory resultFactory", "final int numResults", "final String baseNode", "final String arrayName", "final String countKey"]], "testJsonInputStream": [["void"]], "testFullDownload": [["void"]], "runFullTest": [["void", "final RestSearcher searcher"]], "runTest": [["void", "final String testFilePath", "final RestResultFactory factory", "final int numResults"]]}, "className": "YahooSearchTest", "renamed": ["void", "function", "(", ")", "{", "runTest", "(", "\"srini_string\"", ",", "new", "YahooImageFactory", "(", "null", ")", ",", "763", ")", ";", "}"], "nl": "Tests the method for handling an input stream from Yahoo.", "nlToks": ["Tests", "the", "method", "for", "handling", "an", "input", "stream", "from", "Yahoo", "."], "path": "adamfisk/littleshoot-client/tree/master/common/searchers/yahoo/src/test/java/org/lastbamboo/common/searchers/yahoo/YahooSearchTest.java", "idx": 570}
{"memberVariables": {"FILE_PREFIX=\"certificate-\"": "String", "ALIAS_PREFIX=\"local:\"": "String", "ALIAS_PATTERN=Pattern.compile(\"^\" + ALIAS_PREFIX + \"[0-9a-f]{40}$\")": "Pattern"}, "code": ["void", "function", "(", "String", "alias", ")", "{", "if", "(", "ALIAS_PATTERN", ".", "matcher", "(", "alias", ")", ".", "matches", "(", ")", ")", "{", "alias", "=", "alias", ".", "substring", "(", "ALIAS_PREFIX", ".", "length", "(", ")", ")", ";", "StrongSwanApplication", ".", "getContext", "(", ")", ".", "deleteFile", "(", "FILE_PREFIX", "+", "alias", ")", ";", "}", "}"], "memberFunctions": {"getCreationDate": [["Date", "String alias"]], "addCertificate": [["boolean", "Certificate cert"]], "aliases": [["ArrayList<String>"]], "getCertificateAlias": [["String", "Certificate cert"]], "getCertificate": [["X509Certificate", "String alias"]], "getKeyId": [["String", "Certificate cert"]], "containsAlias": [["boolean", "String alias"]]}, "className": "LocalCertificateStore", "renamed": ["void", "function", "(", "String", "arg0", ")", "{", "if", "(", "ALIAS_PATTERN", ".", "matcher", "(", "arg0", ")", ".", "matches", "(", ")", ")", "{", "arg0", "=", "arg0", ".", "substring", "(", "ALIAS_PREFIX", ".", "length", "(", ")", ")", ";", "StrongSwanApplication", ".", "getContext", "(", ")", ".", "deleteFile", "(", "FILE_PREFIX", "+", "arg0", ")", ";", "}", "}"], "nl": "Delete the certificate with the given alias", "nlToks": ["Delete", "the", "certificate", "with", "the", "given", "alias"], "path": "prathyks/strongswan/tree/master/src/frontends/android/app/src/main/java/org/strongswan/android/security/LocalCertificateStore.java", "idx": 571}
{"memberVariables": {"sLoginUser": "User"}, "code": ["void", "function", "(", "AuthType", "authType", ")", "{", "if", "(", "authType", "!=", "AuthType", ".", "SIMPLE", "&&", "authType", "!=", "AuthType", ".", "CUSTOM", ")", "{", "throw", "new", "UnsupportedOperationException", "(", "\"User is not supported in \"", "+", "authType", ".", "getAuthName", "(", ")", "+", "\" mode\"", ")", ";", "}", "}"], "memberFunctions": {"get": [["User"]], "login": [["User"]]}, "className": "LoginUser", "renamed": ["void", "function", "(", "AuthType", "arg0", ")", "{", "if", "(", "arg0", "!=", "AuthType", ".", "SIMPLE", "&&", "arg0", "!=", "AuthType", ".", "CUSTOM", ")", "{", "throw", "new", "UnsupportedOperationException", "(", "\"srini_string\"", "+", "arg0", ".", "getAuthName", "(", ")", "+", "\"srini_string\"", ")", ";", "}", "}"], "nl": "Checks whether Alluxio is running in secure mode, such as  {@link AuthType#SIMPLE}, {@link AuthType#KERBEROS},  {@link AuthType#CUSTOM}.", "nlToks": ["Checks", "whether", "Alluxio", "is", "running", "in", "secure", "mode", ",", "such", "as", "-LCB-", "@link", "AuthType", "#SIMPLE", "-RCB-", ",", "-LCB-", "@link", "AuthType", "#KERBEROS", "-RCB-", ",", "-LCB-", "@link", "AuthType", "#CUSTOM", "-RCB-", "."], "path": "poemlin/alluxio/tree/master/core/common/src/main/java/alluxio/security/LoginUser.java", "idx": 572}
{"memberVariables": {"HAS_REMOTE_CONTROL_APIS=Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH": "boolean", "mActualMetadataEditor": "Object", "METADATA_KEY_ARTWORK=100": "int", "mActualRemoteControlClient": "Object"}, "code": ["void", "function", "(", "MediaRouter", "router", ")", "{", "if", "(", "mActualRemoteControlClient", "!=", "null", ")", "{", "router", ".", "addRemoteControlClient", "(", "mActualRemoteControlClient", ")", ";", "}", "}"], "memberFunctions": {"setPlaybackState": [["void", "int state"]], "putBitmap": [["MetadataEditorCompat", "int key", "Bitmap bitmap"]], "apply": [["void"]], "removeFromMediaRouter": [["void", "MediaRouter router"]], "putString": [["MetadataEditorCompat", "int key", "String value"]], "clear": [["void"]], "getActualRemoteControlClientObject": [["Object"]], "putLong": [["MetadataEditorCompat", "int key", "long value"]], "editMetadata": [["MetadataEditorCompat", "boolean startEmpty"]], "setTransportControlFlags": [["void", "int transportControlFlags"]]}, "className": "RemoteControlClientCompat", "renamed": ["void", "function", "(", "MediaRouter", "arg0", ")", "{", "if", "(", "mActualRemoteControlClient", "!=", "null", ")", "{", "arg0", ".", "addRemoteControlClient", "(", "mActualRemoteControlClient", ")", ";", "}", "}"], "nl": "Adds/registers RemoteControlClient with the  {@link MediaRouter}", "nlToks": ["Adds/registers", "RemoteControlClient", "with", "the", "-LCB-", "@link", "MediaRouter", "-RCB-"], "path": "phpeng-ms/CastCompanionLibrary-android/tree/master/src/com/google/android/libraries/cast/companionlibrary/remotecontrol/RemoteControlClientCompat.java", "idx": 574}
{"memberVariables": {"DEFAULT_MODEL_IMPLEMENTATION=\"org.argouml.model.mdr.MDRModelImplementation\"": "String"}, "code": ["void", "function", "(", ")", "{", "initializeModelImplementation", "(", "\"org.argouml.model.mdr.MDRModelImplementation\"", ")", ";", "}"], "memberFunctions": {"initializeModelImplementation": [["ModelImplementation", "String name"]], "initializeDefault": [["void"]]}, "className": "InitializeModel", "renamed": ["void", "function", "(", ")", "{", "initializeModelImplementation", "(", "\"srini_string\"", ")", ";", "}"], "nl": "Initialize the Model subsystem with the MDR ModelImplementation.", "nlToks": ["Initialize", "the", "Model", "subsystem", "with", "the", "MDR", "ModelImplementation", "."], "path": "pichiliani/CoArgoUML/tree/master/v0.24/fonte/src/argouml-core-diagrams-sequence2/tests/org/argouml/model/InitializeModel.java", "idx": 575}
{"memberVariables": {"mob": "EntityMob", "world": "World", "hasBuiltOnce": "boolean", "blocksQueue": "Queue<IBlockState>", "buildingSpot": "Vec3", "x": "double", "y": "double", "isBuildingDone": "boolean", "z": "double", "blockPosQueue": "Queue<BlockPos>", "hasBuildingInit": "boolean"}, "code": ["boolean", "function", "(", ")", "{", "return", "(", "mob", ".", "getPositionVector", "(", ")", ".", "distanceTo", "(", "buildingSpot", ")", "<", "1", ")", ";", "}"], "memberFunctions": {"enqueue": [["void", "BlockPos pos", "IBlockState block"]], "init": [["void"]], "hasBuiltOnce": [["boolean"]], "buildBlock": [["void", "int buildSpeed"]], "moveToBuildingSpot": [["void"]], "finishingTouches": [["void"]], "attemptBuildBlock": [["boolean", "int buildSpeed"]], "isBuilding": [["boolean"]]}, "className": "BuildGeneric", "renamed": ["boolean", "function", "(", ")", "{", "return", "(", "mob", ".", "getPositionVector", "(", ")", ".", "distanceTo", "(", "buildingSpot", ")", "<", "1", ")", ";", "}"], "nl": "Checks if the AI is on the building spot.", "nlToks": ["Checks", "if", "the", "AI", "is", "on", "the", "building", "spot", "."], "path": "pregnantboy/fyp/tree/master/forge/src/main/java/fuzzyMod/tasks/BuildGeneric.java", "idx": 576}
{"memberVariables": {"sequenceNumber": "long", "lastFeedbacktime": "long", "k=2": "long"}, "code": ["long", "function", "(", ")", "{", "return", "k", ";", "}"], "memberFunctions": {"feedback": [["void"]], "getSequenceNumber": [["long"]], "hashCode": [["int"]], "equals": [["boolean", "Object obj"]], "toString": [["String"]], "compareTo": [["int", "ReceiverLossListEntry o"]], "getLastFeedbackTime": [["long"]]}, "className": "ReceiverLossListEntry", "renamed": ["long", "function", "(", ")", "{", "return", "k", ";", "}"], "nl": "k is initialised as 2 and increased by 1 each time the number is fed back", "nlToks": ["k", "is", "initialised", "as", "2", "and", "increased", "by", "1", "each", "time", "the", "number", "is", "fed", "back"], "path": "adamfisk/littleshoot-client/tree/master/common/udt/src/main/java/udt/receiver/ReceiverLossListEntry.java", "idx": 581}
{"memberVariables": {"DELETED=new Object()": "Object", "_size": "int", "_values": "int[]", "_mask": "int", "NULL=0xdeadbeef": "int", "_keys": "Object[]"}, "code": ["int", "function", "(", ")", "{", "return", "_size", ";", "}"], "memberFunctions": {"get": [["int", "Object key"]], "clear": [["void"]], "resize": [["void", "int newSize"]], "toString": [["String"]], "put": [["int", "Object key", "int value"]], "remove": [["int", "Object key"]]}, "className": "IntMap", "renamed": ["int", "function", "(", ")", "{", "return", "_size", ";", "}"], "nl": "Returns the current number of entries in the map.", "nlToks": ["Returns", "the", "current", "number", "of", "entries", "in", "the", "map", "."], "path": "acupple/dubbo/tree/master/hessian-lite/src/main/java/com/alibaba/com/caucho/hessian/util/IntMap.java", "idx": 582}
{"memberVariables": {"cachedBuffer=null": "byte[]"}, "code": ["String", "[", "]", "function", "(", ")", "{", "if", "(", "Build", ".", "VERSION", ".", "SDK_INT", "<", "Build", ".", "VERSION_CODES", ".", "LOLLIPOP", ")", "{", "return", "new", "String", "[", "]", "{", "Build", ".", "CPU_ABI", ",", "Build", ".", "CPU_ABI2", "}", ";", "}", "else", "{", "return", "LollipopSysdeps", ".", "getSupportedAbis", "(", ")", ";", "}", "}"], "memberFunctions": {"reliablyCopyExecutable": [["void", "InputStream is", "File destination", "long expectedSize", "long time"]], "deleteOrThrow": [["void", "File file"]], "lockLibsDirectory": [["FileLocker", "Context context"]], "freeCopyBuffer": [["void"]], "createLibsDirectory": [["File", "Context context"]], "getLibsDirectory": [["File", "Context context"]], "findAbiScore": [["int", "String[] supportedAbis", "String abi"]], "dumbDeleteRecrusive": [["void", "File file"]], "fallocateIfSupported": [["void", "FileDescriptor fd", "long length"]], "fallocate": [["void", "FileDescriptor fd", "long length"]]}, "className": "SysUtil", "renamed": ["String", "[", "]", "function", "(", ")", "{", "if", "(", "Build", ".", "VERSION", ".", "SDK_INT", "<", "Build", ".", "VERSION_CODES", ".", "LOLLIPOP", ")", "{", "return", "new", "String", "[", "]", "{", "Build", ".", "CPU_ABI", ",", "Build", ".", "CPU_ABI2", "}", ";", "}", "else", "{", "return", "LollipopSysdeps", ".", "getSupportedAbis", "(", ")", ";", "}", "}"], "nl": "Return an list of ABIs we supported on this device ordered according to preference.  Use a separate inner class to isolate the version-dependent call where it won't cause the whole class to fail preverification.", "nlToks": ["Return", "an", "list", "of", "ABIs", "we", "supported", "on", "this", "device", "ordered", "according", "to", "preference", ".", "Use", "a", "separate", "inner", "class", "to", "isolate", "the", "version-dependent", "call", "where", "it", "wo", "n't", "cause", "the", "whole", "class", "to", "fail", "preverification", "."], "path": "plrthink/react-native/tree/master/ReactAndroid/src/main/java/com/facebook/soloader/SysUtil.java", "idx": 583}
{"memberVariables": {"server": "Server", "gerenciadorFila": "GerenciadorFila", "gerenciadorChat": "GerenciadorChat", "comunicador": "DBConnector", "gerenciadorPartida": "GerenciadorPartida", "gerenciadorUsuario": "GerenciadorUsuario"}, "code": ["void", "function", "(", ")", "{", "server", ".", "stop", "(", ")", ";", "}"], "memberFunctions": {"setGerenciadorFila": [["void", "GerenciadorFila gerenciadorFila"]], "getServer": [["Server"]], "setGerenciadorChat": [["void", "GerenciadorChat gerenciadorChat"]], "getGerenciadorFila": [["GerenciadorFila"]], "iniciar": [["void", "int TCPPort", "int UDPPort"]], "getComunicador": [["DBConnector"]], "registrar": [["void", "Class[] classes"]], "setServer": [["void", "Server server"]], "getGerenciadorChat": [["GerenciadorChat"]], "getGerenciadorPartida": [["GerenciadorPartida"]], "setComunicador": [["void", "DBConnector comunicador"]], "setGerenciadorPartida": [["void", "GerenciadorPartida gerenciadorPartida"]], "setGerenciadorUsuario": [["void", "GerenciadorUsuario gerenciadorUsuario"]], "getGerenciadorUsuario": [["GerenciadorUsuario"]]}, "className": "Servidor", "renamed": ["void", "function", "(", ")", "{", "server", ".", "stop", "(", ")", ";", "}"], "nl": "Pausa o servidor", "nlToks": ["Pausa", "o", "servidor"], "path": "prativa/shadowstruggles/tree/master/ShadowStrugglesOnline_Servidor/src/br/edu/ifsp/pds/shadowstrugglesonline/servidor/estrutura/Servidor.java", "idx": 584}
{"memberVariables": {"headers": "Map<String,String>", "charset": "String", "verb": "Verb", "bodyParams": "ParameterList", "url": "String", "bytePayload=null": "byte[]", "readTimeout=null": "Long", "querystringParams": "ParameterList", "connectionKeepAlive=false": "boolean", "connectTimeout=null": "Long", "CONTENT_LENGTH=\"Content-Length\"": "String", "CONTENT_TYPE=\"Content-Type\"": "String", "connection": "HttpURLConnection", "payload=null": "String", "DEFAULT_CONTENT_TYPE=\"application/x-www-form-urlencoded\"": "String"}, "code": ["Map", "<", "String", ",", "String", ">", "function", "(", ")", "{", "return", "headers", ";", "}"], "memberFunctions": {"addHeaders": [["void", "HttpURLConnection conn"]], "setCharset": [["void", "String charsetName"]], "getSanitizedUrl": [["String"]], "addBody": [["void", "HttpURLConnection conn", "byte[] content"]], "addHeader": [["void", "String key", "String value"]], "setConnectionKeepAlive": [["void", "boolean connectionKeepAlive"]], "setConnectTimeout": [["void", "int duration", "TimeUnit unit"]], "getByteBodyContents": [["byte[]"]], "getQueryStringParams": [["ParameterList"]], "setConnection": [["void", "HttpURLConnection connection"]], "createConnection": [["void"]], "getCharset": [["String"]], "addBodyParameter": [["void", "String key", "String value"]], "getUrl": [["String"]], "setReadTimeout": [["void", "int duration", "TimeUnit unit"]], "getCompleteUrl": [["String"]], "getVerb": [["Verb"]], "addPayload": [["void", "String payload"], ["void", "byte[] payload"]], "addQuerystringParameter": [["void", "String key", "String value"]], "toString": [["String"]], "doSend": [["Response"]], "send": [["Response"]], "getBodyContents": [["String"]], "getBodyParams": [["ParameterList"]]}, "className": "Request", "renamed": ["Map", "<", "String", ",", "String", ">", "function", "(", ")", "{", "return", "headers", ";", "}"], "nl": "Returns the connection headers as a  {@link Map}", "nlToks": ["Returns", "the", "connection", "headers", "as", "a", "-LCB-", "@link", "Map", "-RCB-"], "path": "pnsantos/scribe-java/tree/master/src/main/java/org/scribe/model/Request.java", "idx": 585}
{"memberVariables": {"resourceCache=new HashMap<String,Icon>()": "HashMap<String,Icon>", "resourceExtensions=new ArrayList<String>()": "List<String>", "resourceLocations=new ArrayList<String>()": "List<String>"}, "code": ["void", "function", "(", "String", "extension", ")", "{", "for", "(", "Iterator", "iter", "=", "resourceExtensions", ".", "iterator", "(", ")", ";", "iter", ".", "hasNext", "(", ")", ";", ")", "{", "String", "ext", "=", "(", "String", ")", "iter", ".", "next", "(", ")", ";", "if", "(", "ext", ".", "equals", "(", "extension", ")", ")", "{", "resourceExtensions", ".", "remove", "(", "ext", ")", ";", "break", ";", "}", "}", "}"], "memberFunctions": {"isInCache": [["boolean", "String resource"]], "removeResourceLocation": [["void", "String location"]], "lookupIconUrl": [["java.net.URL", "String resource", "ClassLoader loader"]], "addResourceExtension": [["void", "String extension"]], "lookupIconResource": [["ImageIcon", "String resource"], ["ImageIcon", "String resource", "String desc"], ["ImageIcon", "String resource", "ClassLoader loader"], ["ImageIcon", "String resource", "String desc", "ClassLoader loader"]], "toJavaIdentifier": [["String", "String s"]], "containsExtension": [["boolean", "String extension"]], "addResourceLocation": [["void", "String location"]], "containsLocation": [["boolean", "String location"]]}, "className": "ResourceLoader", "renamed": ["void", "function", "(", "String", "arg0", ")", "{", "for", "(", "Iterator", "loc0", "=", "resourceExtensions", ".", "iterator", "(", ")", ";", "loc0", ".", "hasNext", "(", ")", ";", ")", "{", "String", "loc1", "=", "(", "String", ")", "loc0", ".", "next", "(", ")", ";", "if", "(", "loc1", ".", "equals", "(", "arg0", ")", ")", "{", "resourceExtensions", ".", "remove", "(", "loc1", ")", ";", "break", ";", "}", "}", "}"], "nl": "This method removes a extension from the list of known extensions.", "nlToks": ["This", "method", "removes", "a", "extension", "from", "the", "list", "of", "known", "extensions", "."], "path": "pichiliani/CoArgoUML/tree/master/v0.24/fonte/src/argouml-app/src/org/argouml/application/helpers/ResourceLoader.java", "idx": 586}
{"memberVariables": {"GBF_SEARCH=4": "int", "ASTAR_SEARCH=5": "int", "instance": "SearchFactory", "UC_SEARCH=3": "int", "GRAPH_SEARCH=1": "int", "HILL_SEARCH=7": "int", "BF_SEARCH=1": "int", "ID_SEARCH=2": "int", "TREE_SEARCH=0": "int", "RBF_SEARCH=6": "int", "DF_SEARCH=0": "int"}, "code": ["SearchFactory", "function", "(", ")", "{", "if", "(", "instance", "==", "null", ")", "instance", "=", "new", "SearchFactory", "(", ")", ";", "return", "instance", ";", "}"], "memberFunctions": {"getSearchModeNames": [["String[]"]], "getSearchStrategyNames": [["String[]"]], "createSearch": [["Search", "int strategy", "int mode", "HeuristicFunction hf"]]}, "className": "SearchFactory", "renamed": ["SearchFactory", "function", "(", ")", "{", "if", "(", "instance", "==", "null", ")", "instance", "=", "new", "SearchFactory", "(", ")", ";", "return", "instance", ";", "}"], "nl": "Provides access to the factory. Implemented with lazy instantiation.", "nlToks": ["Provides", "access", "to", "the", "factory", ".", "Implemented", "with", "lazy", "instantiation", "."], "path": "peterplupo/ia201102/tree/master/trabalho1/aima-gui/src/main/java/aima/gui/applications/search/map/SearchFactory.java", "idx": 587}
{"memberVariables": {}, "code": ["void", "function", "(", ")", "{", "System", ".", "out", ".", "println", "(", "\"listComPorts\"", ")", ";", "ComPortController", ".", "listComPorts", "(", ")", ";", "fail", "(", "\"The test case is a prototype.\"", ")", ";", "}"], "memberFunctions": {"testClosePort": [["void"]], "testSetEventListener": [["void"]], "setUpClass": [["void"]], "testWriteProgram": [["void"]], "setUp": [["void"]], "tearDownClass": [["void"]], "testOpenPort_0args": [["void"]], "testRemoveEventListener": [["void"]], "testRead": [["void"]], "tearDown": [["void"]], "testWriteComPort": [["void"]]}, "className": "ComPortControllerTest", "renamed": ["void", "function", "(", ")", "{", "System", ".", "out", ".", "println", "(", "\"srini_string\"", ")", ";", "ComPortController", ".", "listComPorts", "(", ")", ";", "fail", "(", "\"srini_string\"", ")", ";", "}"], "nl": "Test of listComPorts method, of class ComPortController.", "nlToks": ["Test", "of", "listComPorts", "method", ",", "of", "class", "ComPortController", "."], "path": "hashinisenaratne/SIFEB/tree/master/Visual Programming Editor/SiFEB_VE/test/com/sifeb/ve/controller/ComPortControllerTest.java", "idx": 588}
{"memberVariables": {"mThrown=ExpectedException.none()": "ExpectedException"}, "code": ["void", "function", "(", ")", "{", "String", "notProviderClass", "=", "CustomAuthenticationProviderTest", ".", "class", ".", "getName", "(", ")", ";", "mThrown", ".", "expect", "(", "RuntimeException", ".", "class", ")", ";", "mThrown", ".", "expectMessage", "(", "notProviderClass", "+", "\" instantiate failed :\"", ")", ";", "new", "CustomAuthenticationProvider", "(", "notProviderClass", ")", ";", "}"], "memberFunctions": {"authenticate": [["void", "String user", "String password"]], "mockCustomProvider": [["void"]], "classNotFound": [["void"]]}, "className": "CustomAuthenticationProviderTest", "renamed": ["void", "function", "(", ")", "{", "String", "loc0", "=", "CustomAuthenticationProviderTest", ".", "class", ".", "getName", "(", ")", ";", "mThrown", ".", "expect", "(", "RuntimeException", ".", "class", ")", ";", "mThrown", ".", "expectMessage", "(", "loc0", "+", "\"srini_string\"", ")", ";", "new", "CustomAuthenticationProvider", "(", "loc0", ")", ";", "}"], "nl": "Tests the  {@link CustomAuthenticationProvider#CustomAuthenticationProvider(String)}constructor to throw an exception when the class is not a provider.", "nlToks": ["Tests", "the", "-LCB-", "@link", "CustomAuthenticationProvider", "#CustomAuthenticationProvider", "-LRB-", "String", "-RRB-", "-RCB-", "constructor", "to", "throw", "an", "exception", "when", "the", "class", "is", "not", "a", "provider", "."], "path": "poemlin/alluxio/tree/master/core/common/src/test/java/alluxio/security/authentication/CustomAuthenticationProviderTest.java", "idx": 591}
{"memberVariables": {"errorUri": "String", "errorDescription": "String", "state": "String", "error": "String"}, "code": ["void", "function", "(", "String", "errorDescription", ")", "{", "this", ".", "errorDescription", "=", "errorDescription", ";", "}"], "memberFunctions": {"getError": [["String"]], "getErrorDescription": [["String"]], "getState": [["String"]], "setError": [["void", "String error"]], "setState": [["void", "String state"]], "getErrorUri": [["String"]], "setErrorUri": [["void", "String errorUri"]]}, "className": "OAuthError", "renamed": ["void", "function", "(", "String", "arg0", ")", "{", "this", ".", "errorDescription", "=", "arg0", ";", "}"], "nl": "Sets the error description", "nlToks": ["Sets", "the", "error", "description"], "path": "primesign/cxf/tree/master/rt/rs/security/oauth-parent/oauth2/src/main/java/org/apache/cxf/rs/security/oauth2/common/OAuthError.java", "idx": 593}
{"memberVariables": {"tx": "Transaction", "ti": "TableInfo", "nextblknum": "int", "lhsscan": "Scan", "chunksize": "int", "filesize": "int", "prodscan": "Scan", "rhsscan=null": "Scan"}, "code": ["boolean", "function", "(", "String", "fldname", ")", "{", "return", "prodscan", ".", "hasField", "(", "fldname", ")", ";", "}"], "memberFunctions": {"next": [["boolean"]], "getInt": [["int", "String fldname"]], "getVal": [["Constant", "String fldname"]], "useNextChunk": [["boolean"]], "beforeFirst": [["void"]], "getString": [["String", "String fldname"]], "close": [["void"]]}, "className": "MultiBufferProductScan", "renamed": ["boolean", "function", "(", "String", "arg0", ")", "{", "return", "prodscan", ".", "hasField", "(", "arg0", ")", ";", "}"], "nl": "Returns true if the specified field is in either of the underlying scans.", "nlToks": ["Returns", "true", "if", "the", "specified", "field", "is", "in", "either", "of", "the", "underlying", "scans", "."], "path": "prerit2803/DBMSProject2/tree/master/simpledb/multibuffer/MultiBufferProductScan.java", "idx": 594}
{"memberVariables": {"path": "List<Stmt>", "logger=LoggerFactory.getLogger(getClass())": "Logger", "results=new ConcurrentHashMap<SinkInfo,Set<SourceInfo>>()": "Map<SinkInfo,Set<SourceInfo>>", "sink": "Value", "context": "Stmt", "source": "Value"}, "code": ["boolean", "function", "(", "String", "sinkSignature", ")", "{", "return", "!", "findSinkByMethodSignature", "(", "sinkSignature", ")", ".", "isEmpty", "(", ")", ";", "}"], "memberFunctions": {"isEmpty": [["boolean"]], "printResults": [["void"], ["void", "Writer wr"]], "getSink": [["Value"]], "containsSink": [["boolean", "Value sink"]], "findSinkByMethodSignature": [["List<SinkInfo>", "String sinkSignature"]], "size": [["int"]], "getSource": [["Value"]], "hashCode": [["int"], ["int"]], "isPathBetweenMethods": [["boolean", "String sinkSignature", "String sourceSignature"]], "equals": [["boolean", "Object o"], ["boolean", "Object o"]], "getPath": [["List<Stmt>"]], "getResults": [["Map<SinkInfo,Set<SourceInfo>>"]], "toString": [["String"], ["String"], ["String"]], "addResult": [["void", "Value sink", "Stmt sinkStmt", "Value source", "Stmt sourceStmt"], ["void", "Value sink", "Stmt sinkStmt", "Value source", "Stmt sourceStmt", "List<Stmt> propagationPath"], ["void", "Value sink", "Stmt sinkContext", "Value source", "Stmt sourceStmt", "List<Stmt> propagationPath", "Stmt stmt"], ["void", "SinkInfo sink", "SourceInfo source"]], "isPathBetween": [["boolean", "Value sink", "Value source"], ["boolean", "String sink", "String source"]], "getContext": [["Stmt"], ["Stmt"]]}, "className": "InfoflowResults", "renamed": ["boolean", "function", "(", "String", "arg0", ")", "{", "return", "!", "findSinkByMethodSignature", "(", "arg0", ")", ".", "isEmpty", "(", ")", ";", "}"], "nl": "Checks whether this result object contains a sink with the given method signature", "nlToks": ["Checks", "whether", "this", "result", "object", "contains", "a", "sink", "with", "the", "given", "method", "signature"], "path": "0-14N/soot-inflow/tree/master/src/soot/jimple/infoflow/InfoflowResults.java", "idx": 595}
{"memberVariables": {}, "code": ["void", "function", "(", ")", "{", "URL", "dirUrl", "=", "ClassLoader", ".", "getSystemResource", "(", "\"dist-list.pst\"", ")", ";", "PSTFile", "pstFile", "=", "new", "PSTFile", "(", "new", "File", "(", "dirUrl", ".", "toURI", "(", ")", ")", ")", ";", "Assert", ".", "assertEquals", "(", "\"Is password protected\"", ",", "pstFile", ".", "getMessageStore", "(", ")", ".", "isPasswordProtected", "(", ")", ",", "false", ")", ";", "}"], "memberFunctions": {"testPasswordProtected": [["void"]]}, "className": "PasswordTest", "renamed": ["void", "function", "(", ")", "{", "URL", "loc0", "=", "ClassLoader", ".", "getSystemResource", "(", "\"srini_string\"", ")", ";", "PSTFile", "loc1", "=", "new", "PSTFile", "(", "new", "File", "(", "loc0", ".", "toURI", "(", ")", ")", ")", ";", "Assert", ".", "assertEquals", "(", "\"srini_string\"", ",", "loc1", ".", "getMessageStore", "(", ")", ".", "isPasswordProtected", "(", ")", ",", "false", ")", ";", "}"], "nl": "Test for non-password protectedness.", "nlToks": ["Test", "for", "non-password", "protectedness", "."], "path": "pineapplemachine/java-libpst/tree/master/src/test/java/com/pff/PasswordTest.java", "idx": 596}
{"memberVariables": {"locationPositions": "Hashtable<String,Point2D>", "links": "LabeledGraph<String,Double>"}, "code": ["void", "function", "(", "String", "loc", ",", "double", "dist", ",", "int", "dir", ")", "{", "Point2D", "coords", "=", "new", "Point2D", "(", "-", "Math", ".", "sin", "(", "dir", "*", "Math", ".", "PI", "/", "180.0", ")", "*", "dist", ",", "Math", ".", "cos", "(", "dir", "*", "Math", ".", "PI", "/", "180.0", ")", "*", "dist", ")", ";", "links", ".", "addVertex", "(", "loc", ")", ";", "locationPositions", ".", "put", "(", "loc", ",", "coords", ")", ";", "}"], "memberFunctions": {"getDistance": [["Double", "String fromLocation", "String toLocation"]], "clear": [["void"]], "randomlyGenerateDestination": [["String"]], "clearLinks": [["void"]], "setPosition": [["void", "String loc", "double x", "double y"]], "addBidirectionalLink": [["void", "String fromLocation", "String toLocation", "Double distance"]], "removeUnidirectionalLink": [["void", "String fromLocation", "String toLocation"]], "getPosition": [["Point2D", "String loc"]], "removeBidirectionalLink": [["void", "String fromLocation", "String toLocation"]], "isLocation": [["boolean", "String str"]], "getLocations": [["List<String>"]], "addUnidirectionalLink": [["void", "String fromLocation", "String toLocation", "Double distance"]], "getLocationsLinkedTo": [["List<String>", "String fromLocation"]]}, "className": "ExtendableMap", "renamed": ["void", "function", "(", "String", "arg0", ",", "double", "arg1", ",", "int", "arg2", ")", "{", "Point2D", "loc0", "=", "new", "Point2D", "(", "-", "Math", ".", "sin", "(", "arg2", "*", "Math", ".", "PI", "/", "180.0", ")", "*", "arg1", ",", "Math", ".", "cos", "(", "arg2", "*", "Math", ".", "PI", "/", "180.0", ")", "*", "arg1", ")", ";", "links", ".", "addVertex", "(", "arg0", ")", ";", "locationPositions", ".", "put", "(", "arg0", ",", "loc0", ")", ";", "}"], "nl": "Defines the position of a location within the map. Using this method, one location should be selected as reference position (dist=0 and dir=0) and all the other location should be placed relative to it.", "nlToks": ["Defines", "the", "position", "of", "a", "location", "within", "the", "map", ".", "Using", "this", "method", ",", "one", "location", "should", "be", "selected", "as", "reference", "position", "-LRB-", "dist", "=", "0", "and", "dir", "=", "0", "-RRB-", "and", "all", "the", "other", "location", "should", "be", "placed", "relative", "to", "it", "."], "path": "peterplupo/ia201102/tree/master/trabalho1/aima-core/src/main/java/aima/core/environment/map/ExtendableMap.java", "idx": 597}
{"memberVariables": {"MAX_SEED_ENTROPY_BITS=512": "int", "seed": "byte[]", "creationTimeSeconds": "long", "encryptedMnemonicCode": "EncryptedData", "encryptedSeed": "EncryptedData", "mnemonicCode": "List<String>", "DEFAULT_SEED_ENTROPY_BITS=128": "int"}, "code": ["List", "<", "String", ">", "function", "(", ")", "{", "return", "mnemonicCode", ";", "}"], "memberFunctions": {"toHexString": [["String"]], "check": [["void"]], "getEncryptedData": [["EncryptedData"]], "getSecretBytes": [["byte[]"]], "getEntropyBytes": [["byte[]"]], "getSeedBytes": [["byte[]"]], "getEntropy": [["byte[]", "SecureRandom random", "int bits"]], "encrypt": [["DeterministicSeed", "KeyCrypter keyCrypter", "KeyParameter aesKey"]], "hashCode": [["int"]], "isEncrypted": [["boolean"]], "equals": [["boolean", "Object o"]], "toString": [["String"]], "getEncryptedSeedData": [["EncryptedData"]], "getCreationTimeSeconds": [["long"]], "getMnemonicAsBytes": [["byte[]"]], "decrypt": [["DeterministicSeed", "KeyCrypter crypter", "String passphrase", "KeyParameter aesKey"]], "decodeMnemonicCode": [["List<String>", "byte[] mnemonicCode"], ["List<String>", "String mnemonicCode"]], "getEncryptionType": [["Protos.Wallet.EncryptionType"]]}, "className": "DeterministicSeed", "renamed": ["List", "<", "String", ">", "function", "(", ")", "{", "return", "mnemonicCode", ";", "}"], "nl": "Get the mnemonic code, or null if unknown.", "nlToks": ["Get", "the", "mnemonic", "code", ",", "or", "null", "if", "unknown", "."], "path": "1000000000001/bitcoinj/tree/master/core/src/main/java/org/bitcoinj/wallet/DeterministicSeed.java", "idx": 600}
{"memberVariables": {"schema": "Schema", "offsets": "Map<String,Integer>", "tblname": "String", "recordlen": "int"}, "code": ["int", "function", "(", "String", "fldname", ")", "{", "return", "offsets", ".", "get", "(", "fldname", ")", ";", "}"], "memberFunctions": {"schema": [["Schema"]], "lengthInBytes": [["int", "String fldname"]], "fileName": [["String"]], "recordLength": [["int"]]}, "className": "TableInfo", "renamed": ["int", "function", "(", "String", "arg0", ")", "{", "return", "offsets", ".", "get", "(", "arg0", ")", ";", "}"], "nl": "Returns the offset of a specified field within a record", "nlToks": ["Returns", "the", "offset", "of", "a", "specified", "field", "within", "a", "record"], "path": "prerit2803/DBMSProject2/tree/master/simpledb/record/TableInfo.java", "idx": 602}
{"memberVariables": {"environments=null": "IEnvironments", "factories=new HashMap<String,DevicesConnectionFactory>()": "HashMap<String,DevicesConnectionFactory>", "config=null": "AutoSIMDevicesConfig"}, "code": ["void", "function", "(", "BundleContext", "context", ")", "{", "for", "(", "AutoSIMDeviceConfig", "deviceConfig", ":", "config", ".", "devices", ")", "{", "environments", ".", "deregisterConnectionFactory", "(", "deviceConfig", ".", "name", ")", ";", "factories", ".", "remove", "(", "deviceConfig", ".", "name", ")", ";", "}", "}"], "memberFunctions": {"start": [["void", "BundleContext context"]]}, "className": "SampleDevicesServiceActivator", "renamed": ["void", "function", "(", "BundleContext", "arg0", ")", "{", "for", "(", "AutoSIMDeviceConfig", "loc0", ":", "config", ".", "devices", ")", "{", "environments", ".", "deregisterConnectionFactory", "(", "loc0", ".", "name", ")", ";", "factories", ".", "remove", "(", "loc0", ".", "name", ")", ";", "}", "}"], "nl": "Implements BundleActivator.stop(). Does nothing since the framework will automatically unregister any registered services.", "nlToks": ["Implements", "BundleActivator.stop", "-LRB-", "-RRB-", ".", "Does", "nothing", "since", "the", "framework", "will", "automatically", "unregister", "any", "registered", "services", "."], "path": "adityayadav76/internet_of_things_simulator/tree/master/AutoSIM-SampleDevices/src/com/automatski/autosim/sampledevices/SampleDevicesServiceActivator.java", "idx": 604}
{"memberVariables": {"mIdIndex": "Map<Long,Lineage>", "mLineageIdGenerator": "LineageIdGenerator", "mLineageDAG": "DirectedAcyclicGraph<Lineage>", "mOutputFileIndex": "Map<Long,Lineage>"}, "code": ["boolean", "function", "(", "long", "fileId", ")", "{", "return", "mOutputFileIndex", ".", "containsKey", "(", "fileId", ")", ";", "}"], "memberFunctions": {"getParents": [["List<Lineage>", "Lineage lineage"]], "addLineageFromJournal": [["void", "LineageEntry entry"]], "getChildren": [["List<Lineage>", "Lineage lineage"]], "sortLineageTopologically": [["List<Lineage>", "Set<Lineage> lineages"]], "getAllInTopologicalOrder": [["List<Lineage>"]], "createLineageInternal": [["void", "Lineage lineage"]], "deleteLineage": [["void", "long lineageId"]], "getLineageOfOutputFile": [["Lineage", "long fileId"]], "streamToJournalCheckpoint": [["void", "JournalOutputStream outputStream"]], "getRootLineages": [["List<Lineage>"]], "getLineage": [["Lineage", "long lineageId"]], "createLineage": [["long", "List<Long> inputFiles", "List<Long> outputFiles", "Job job"]]}, "className": "LineageStore", "renamed": ["boolean", "function", "(", "long", "arg0", ")", "{", "return", "mOutputFileIndex", ".", "containsKey", "(", "arg0", ")", ";", "}"], "nl": "Checks if there's an output file with given file id.", "nlToks": ["Checks", "if", "there", "'s", "an", "output", "file", "with", "given", "file", "id", "."], "path": "poemlin/alluxio/tree/master/core/server/src/main/java/alluxio/master/lineage/meta/LineageStore.java", "idx": 605}
{"memberVariables": {"fetcherExecutionContextImpl": "IFetcherExecutionContext"}, "code": ["RepeatStatus", "function", "(", "StepContribution", "sc", ",", "ChunkContext", "cc", ")", "{", "JobExitStatus", "exitStatus", "=", "fetcherExecutionContextImpl", ".", "captureSourceMetadata", "(", ")", ";", "sc", ".", "setExitStatus", "(", "exitStatus", ".", "getExitStatus", "(", ")", ")", ";", "return", "RepeatStatus", ".", "FINISHED", ";", "}"], "memberFunctions": {}, "className": "CaptureSourceMetadataTask", "renamed": ["RepeatStatus", "function", "(", "StepContribution", "arg0", ",", "ChunkContext", "arg1", ")", "{", "JobExitStatus", "loc0", "=", "fetcherExecutionContextImpl", ".", "captureSourceMetadata", "(", ")", ";", "arg0", ".", "setExitStatus", "(", "loc0", ".", "getExitStatus", "(", ")", ")", ";", "return", "RepeatStatus", ".", "FINISHED", ";", "}"], "nl": "Step execution implementation", "nlToks": ["Step", "execution", "implementation"], "path": "pkesireddy/portico_fletcher/tree/master/fetcher-master/fetcher-core/src/main/java/org/ithaka/cm/fetcher/core/jobs/fetcherjob/tasks/CaptureSourceMetadataTask.java", "idx": 606}
{"memberVariables": {"layoutManager": "RecyclerView.LayoutManager", "recyclerView": "RecyclerView"}, "code": ["int", "function", "(", ")", "{", "final", "View", "child", "=", "findOneVisibleChild", "(", "layoutManager", ".", "getChildCount", "(", ")", "-", "1", ",", "-", "1", ",", "false", ",", "true", ")", ";", "return", "child", "==", "null", "?", "RecyclerView", ".", "NO_POSITION", ":", "recyclerView", ".", "getChildAdapterPosition", "(", "child", ")", ";", "}"], "memberFunctions": {"findLastCompletelyVisibleItemPosition": [["int"]], "createHelper": [["RecyclerViewPositionHelper", "RecyclerView recyclerView"]], "getItemCount": [["int"]], "findFirstVisibleItemPosition": [["int"]], "findOneVisibleChild": [["View", "int fromIndex", "int toIndex", "boolean completelyVisible", "boolean acceptPartiallyVisible"]], "findFirstCompletelyVisibleItemPosition": [["int"]]}, "className": "RecyclerViewPositionHelper", "renamed": ["int", "function", "(", ")", "{", "final", "View", "loc0", "=", "findOneVisibleChild", "(", "layoutManager", ".", "getChildCount", "(", ")", "-", "1", ",", "-", "1", ",", "false", ",", "true", ")", ";", "return", "loc0", "==", "null", "?", "RecyclerView", ".", "NO_POSITION", ":", "recyclerView", ".", "getChildAdapterPosition", "(", "loc0", ")", ";", "}"], "nl": "Returns the adapter position of the last visible view. This position does not include adapter changes that were dispatched after the last layout pass.", "nlToks": ["Returns", "the", "adapter", "position", "of", "the", "last", "visible", "view", ".", "This", "position", "does", "not", "include", "adapter", "changes", "that", "were", "dispatched", "after", "the", "last", "layout", "pass", "."], "path": "prashant31191/UltimateRecyclerView/tree/master/UltimateRecyclerView/ultimaterecyclerview/src/main/java/com/marshalchen/ultimaterecyclerview/uiUtils/RecyclerViewPositionHelper.java", "idx": 607}
{"memberVariables": {"URL_SAVED=\"configuration.save.url\"": "String", "FILE_SAVED=\"configuration.save.file\"": "String", "URL_LOADED=\"configuration.load.url\"": "String", "config=getFactory().getConfigurationHandler()": "ConfigurationHandler", "FILE_LOADED=\"configuration.load.file\"": "String"}, "code": ["String", "function", "(", "ConfigurationKey", "key", ",", "String", "defaultValue", ")", "{", "return", "config", ".", "getString", "(", "key", ",", "defaultValue", ")", ";", "}"], "memberFunctions": {"save": [["boolean"], ["boolean", "boolean force"]], "setInteger": [["void", "ConfigurationKey key", "int newValue"]], "getDouble": [["double", "ConfigurationKey key", "double defaultValue"], ["double", "ConfigurationKey key"]], "getInteger": [["int", "ConfigurationKey key"], ["int", "ConfigurationKey key", "int defaultValue"]], "removeListener": [["void", "PropertyChangeListener pcl"], ["void", "ConfigurationKey key", "PropertyChangeListener pcl"]], "getFactory": [["IConfigurationFactory"]], "setDouble": [["void", "ConfigurationKey key", "double newValue"]], "makeKey": [["ConfigurationKey", "String k1"], ["ConfigurationKey", "ConfigurationKey ck", "String k1"], ["ConfigurationKey", "String k1", "String k2"], ["ConfigurationKey", "String k1", "String k2", "String k3"], ["ConfigurationKey", "String k1", "String k2", "String k3", "String k4"], ["ConfigurationKey", "String k1", "String k2", "String k3", "String k4", "String k5"]], "setString": [["void", "ConfigurationKey key", "String newValue"]], "load": [["boolean"], ["boolean", "File file"], ["boolean", "URL url"]], "removeKey": [["void", "ConfigurationKey key"]], "getConfigurationHandler": [["ConfigurationHandler"]], "getBoolean": [["boolean", "ConfigurationKey key"], ["boolean", "ConfigurationKey key", "boolean defaultValue"]], "setBoolean": [["void", "ConfigurationKey key", "boolean newValue"]], "addListener": [["void", "PropertyChangeListener pcl"], ["void", "ConfigurationKey key", "PropertyChangeListener pcl"]]}, "className": "Configuration", "renamed": ["String", "function", "(", "ConfigurationKey", "arg0", ",", "String", "arg1", ")", "{", "return", "config", ".", "getString", "(", "arg0", ",", "arg1", ")", ";", "}"], "nl": "Returns the string value of a configuration property.", "nlToks": ["Returns", "the", "string", "value", "of", "a", "configuration", "property", "."], "path": "pichiliani/CoArgoUML/tree/master/v0.24/fonte/src/argouml-app/src/org/argouml/configuration/Configuration.java", "idx": 609}
{"memberVariables": {"txnum": "int"}, "code": ["int", "function", "(", "Buffer", "buff", ",", "int", "offset", ",", "String", "oldVal", ",", "String", "newVal", ")", "{", "Block", "blk", "=", "buff", ".", "block", "(", ")", ";", "if", "(", "isTempBlock", "(", "blk", ")", ")", "return", "-", "1", ";", "else", "return", "new", "SetStringRecord", "(", "txnum", ",", "blk", ",", "offset", ",", "oldVal", ",", "newVal", ")", ".", "writeToLog", "(", ")", ";", "}"], "memberFunctions": {"rollback": [["void"]], "recover": [["void"]], "doRollback": [["void"]], "doRecover": [["void"]], "commit": [["void"]], "isTempBlock": [["boolean", "Block blk"]], "setInt": [["int", "Buffer buff", "int offset", "int oldval", "int newval"]]}, "className": "RecoveryMgr", "renamed": ["int", "function", "(", "Buffer", "arg0", ",", "int", "arg1", ",", "String", "arg2", ",", "String", "arg3", ")", "{", "Block", "loc0", "=", "arg0", ".", "block", "(", ")", ";", "if", "(", "isTempBlock", "(", "loc0", ")", ")", "return", "-", "1", ";", "else", "return", "new", "SetStringRecord", "(", "txnum", ",", "loc0", ",", "arg1", ",", "arg2", ",", "arg3", ")", ".", "writeToLog", "(", ")", ";", "}"], "nl": "Writes a setstring record to the log, and returns its lsn. Updates to temporary files are not logged; instead, a \"dummy\" negative lsn is returned.", "nlToks": ["Writes", "a", "setstring", "record", "to", "the", "log", ",", "and", "returns", "its", "lsn", ".", "Updates", "to", "temporary", "files", "are", "not", "logged", ";", "instead", ",", "a", "``", "dummy", "''", "negative", "lsn", "is", "returned", "."], "path": "prerit2803/DBMSProject2/tree/master/simpledb/tx/recovery/RecoveryMgr.java", "idx": 610}
{"memberVariables": {"lat=0.0": "double", "id_str=null": "String", "screen_name=\"unknown\"": "String", "place_name=\"unknown\"": "String", "image=null": "String", "user_name=\"unknown@unknown\"": "String", "lng=0.0": "double", "created_at=null": "Date", "loc_radius=0": "int", "user_id=\"unknown\"": "String", "text=\"\"": "String", "extras=new ArrayList<String>()": "ArrayList<String>"}, "code": ["GenericJSONBuilder", "function", "(", "String", "name", ")", "{", "place_name", "=", "name", ";", "return", "this", ";", "}"], "memberFunctions": {"setIDstr": [["GenericJSONBuilder", "String id_str_"]], "addText": [["GenericJSONBuilder", "String text_"]], "addField": [["GenericJSONBuilder", "String key", "String value"]], "insert": [["void", "Insertable msg"]], "setCoordinateRadius": [["GenericJSONBuilder", "int radius"]], "setAuthor": [["GenericJSONBuilder", "String author", "String domain"]], "builder": [["GenericJSONBuilder"]], "setCoordinate": [["GenericJSONBuilder", "double longtitude", "double latitude"]], "setCreatedTime": [["GenericJSONBuilder", "Date createdTime"]], "persist": [["void"]], "buildFieldJSON": [["String"]], "setUserid": [["GenericJSONBuilder", "String user_id_"]], "setImage": [["GenericJSONBuilder", "String link_"]]}, "className": "DAOWrapper", "renamed": ["GenericJSONBuilder", "function", "(", "String", "arg0", ")", "{", "place_name", "=", "arg0", ";", "return", "this", ";", "}"], "nl": "Not required", "nlToks": ["Not", "required"], "path": "adarsh-ideal/loklak_server/tree/master/src/org/loklak/data/DAOWrapper.java", "idx": 611}
{"memberVariables": {"differenceEvaluator=DifferenceEvaluators.Default": "DifferenceEvaluator", "comparisonResultsToCheck=CHECK_FOR_IDENTICAL": "ComparisonResult[]", "CHECK_FOR_IDENTICAL=new ComparisonResult[]{ComparisonResult.SIMILAR,ComparisonResult.DIFFERENT}": "ComparisonResult[]", "controlSource": "Source", "CHECK_FOR_SIMILAR=new ComparisonResult[]{ComparisonResult.DIFFERENT}": "ComparisonResult[]", "namespaceContext": "Map<String,String>", "nodeFilter": "Predicate<Node>", "differenceListeners=new ArrayList<ComparisonListener>()": "List<ComparisonListener>", "attributeFilter": "Predicate<Attr>", "ignoreWhitespace": "boolean", "comparisonListeners=new ArrayList<ComparisonListener>()": "List<ComparisonListener>", "ignoreComments": "boolean", "normalizeWhitespace": "boolean", "nodeMatcher": "NodeMatcher", "comparisonController=ComparisonControllers.Default": "ComparisonController", "testSource": "Source", "results": "List<Difference>", "comparisonResultsToCheck": "EnumSet<ComparisonResult>"}, "code": ["DiffBuilder", "function", "(", ")", "{", "ignoreComments", "=", "true", ";", "return", "this", ";", "}"], "memberFunctions": {"checkForIdentical": [["DiffBuilder"]], "withNamespaceContext": [["DiffBuilder", "Map<String,String> uri2Prefix"]], "compare": [["DiffBuilder", "final Object control"]], "withNodeFilter": [["DiffBuilder", "Predicate<Node> nodeFilter"]], "comparisonPerformed": [["void", "final Comparison comparison", "final ComparisonResult outcome"]], "withNodeMatcher": [["DiffBuilder", "final NodeMatcher nodeMatcher"]], "getDifferences": [["List<Difference>"]], "withComparisonController": [["DiffBuilder", "final ComparisonController comparisonController"]], "ignoreWhitespace": [["DiffBuilder"]], "withDifferenceEvaluator": [["DiffBuilder", "final DifferenceEvaluator differenceEvaluator"]], "withDifferenceListeners": [["DiffBuilder", "final ComparisonListener... comparisonListeners"]], "checkForSimilar": [["DiffBuilder"]], "withTest": [["DiffBuilder", "Object test"]], "normalizeWhitespace": [["DiffBuilder"]], "build": [["Diff"]], "getSource": [["Source", "Object object"]], "withComparisonListeners": [["DiffBuilder", "final ComparisonListener... comparisonListeners"]], "wrap": [["Source", "final Source source"]], "withAttributeFilter": [["DiffBuilder", "Predicate<Attr> attributeFilter"]]}, "className": "DiffBuilder", "renamed": ["DiffBuilder", "function", "(", ")", "{", "ignoreComments", "=", "true", ";", "return", "this", ";", "}"], "nl": "Will remove all comment-Tags \"&lt;!-- Comment --&gt;\" from test- and control-XML before comparing.", "nlToks": ["Will", "remove", "all", "comment-Tags", "''", "<", "!", "--", "Comment", "--", ">", "''", "from", "test", "-", "and", "control-XML", "before", "comparing", "."], "path": "phbenisc/xmlunit/tree/master/xmlunit-core/src/main/java/org/xmlunit/builder/DiffBuilder.java", "idx": 612}
{"memberVariables": {"log=LoggerFactory.getLogger(DishCollectionResource.class)": "Logger", "dishCollectionService": "DishCollectionService"}, "code": ["ResponseEntity", "<", "Void", ">", "function", "(", "@", "PathVariable", "String", "id", ")", "{", "log", ".", "debug", "(", "\"REST request to delete DishCollection : {}\"", ",", "id", ")", ";", "dishCollectionService", ".", "delete", "(", "id", ")", ";", "return", "ResponseEntity", ".", "ok", "(", ")", ".", "headers", "(", "HeaderUtil", ".", "createEntityDeletionAlert", "(", "\"dishCollection\"", ",", "id", ".", "toString", "(", ")", ")", ")", ".", "build", "(", ")", ";", "}"], "memberFunctions": {"getAllDishCollections": [["ResponseEntity<List<DishCollection>>", "Pageable pageable"]], "updateDishCollection": [["ResponseEntity<DishCollection>", "@RequestBody DishCollection dishCollection"]], "createDishCollection": [["ResponseEntity<DishCollection>", "@RequestBody DishCollection dishCollection"]], "getDishCollection": [["ResponseEntity<DishCollection>", "@PathVariable String id"]]}, "className": "DishCollectionResource", "renamed": ["ResponseEntity", "<", "Void", ">", "function", "(", "@", "PathVariable", "String", "arg0", ")", "{", "log", ".", "debug", "(", "\"srini_string\"", ",", "arg0", ")", ";", "dishCollectionService", ".", "delete", "(", "arg0", ")", ";", "return", "ResponseEntity", ".", "ok", "(", ")", ".", "headers", "(", "HeaderUtil", ".", "createEntityDeletionAlert", "(", "\"srini_string\"", ",", "arg0", ".", "toString", "(", ")", ")", ")", ".", "build", "(", ")", ";", "}"], "nl": "DELETE  /dish-collections/:id : delete the \"id\" dishCollection.", "nlToks": ["DELETE", "/", "dish-collections", "/", ":", "id", ":", "delete", "the", "``", "id", "''", "dishCollection", "."], "path": "pigkey/kitchen/tree/master/app/src/main/java/com/kitchen/app/web/rest/DishCollectionResource.java", "idx": 613}
{"memberVariables": {"randomizer=null": "Randomizer"}, "code": ["CategoricalDistribution", "function", "(", "RandomVariable", "[", "]", "X", ",", "AssignmentProposition", "[", "]", "e", ",", "BayesianNetwork", "bn", ",", "int", "N", ")", "{", "double", "[", "]", "W", "=", "new", "double", "[", "ProbUtil", ".", "expectedSizeOfCategoricalDistribution", "(", "X", ")", "]", ";", "for", "(", "int", "j", "=", "0", ";", "j", "<", "N", ";", "j", "++", ")", "{", "Pair", "<", "Map", "<", "RandomVariable", ",", "Object", ">", ",", "Double", ">", "x_w", "=", "weightedSample", "(", "bn", ",", "e", ")", ";", "W", "[", "ProbUtil", ".", "indexOf", "(", "X", ",", "x_w", ".", "getFirst", "(", ")", ")", "]", "+=", "x_w", ".", "getSecond", "(", ")", ";", "}", "return", "new", "ProbabilityTable", "(", "W", ",", "X", ")", ".", "normalize", "(", ")", ";", "}"], "memberFunctions": {"weightedSample": [["Pair<Map<RandomVariable,Object>,Double>", "BayesianNetwork bn", "AssignmentProposition[] e"]], "ask": [["CategoricalDistribution", "final RandomVariable[] X", "final AssignmentProposition[] observedEvidence", "final BayesianNetwork bn", "int N"]]}, "className": "LikelihoodWeighting", "renamed": ["CategoricalDistribution", "function", "(", "RandomVariable", "[", "]", "arg0", ",", "AssignmentProposition", "[", "]", "arg1", ",", "BayesianNetwork", "arg2", ",", "int", "arg3", ")", "{", "double", "[", "]", "loc0", "=", "new", "double", "[", "ProbUtil", ".", "expectedSizeOfCategoricalDistribution", "(", "arg0", ")", "]", ";", "for", "(", "int", "loc1", "=", "0", ";", "loc1", "<", "arg3", ";", "loc1", "++", ")", "{", "Pair", "<", "Map", "<", "RandomVariable", ",", "Object", ">", ",", "Double", ">", "loc2", "=", "weightedSample", "(", "arg2", ",", "arg1", ")", ";", "loc0", "[", "ProbUtil", ".", "indexOf", "(", "arg0", ",", "loc2", ".", "getFirst", "(", ")", ")", "]", "+=", "loc2", ".", "getSecond", "(", ")", ";", "}", "return", "new", "ProbabilityTable", "(", "loc0", ",", "arg0", ")", ".", "normalize", "(", ")", ";", "}"], "nl": "The LIKELIHOOD-WEIGHTING algorithm in Figure 14.15. For answering queries given evidence in a Bayesian Network.", "nlToks": ["The", "LIKELIHOOD-WEIGHTING", "algorithm", "in", "Figure", "14.15", ".", "For", "answering", "queries", "given", "evidence", "in", "a", "Bayesian", "Network", "."], "path": "peterplupo/ia201102/tree/master/trabalho1/aima-core/src/main/java/aima/core/probability/bayes/approx/LikelihoodWeighting.java", "idx": 614}
{"memberVariables": {"_size": "int", "_values": "int[]", "_prime": "int", "NULL=0xdeadbeef": "int", "_keys": "Object[]", "PRIMES={1,2,3,7,13,31,61,127,251,509,1021,2039,4093,8191,16381,32749,65521,131071,262139,524287,1048573,2097143,4194301,8388593,16777213,33554393,67108859,134217689,268435399}": "int[]"}, "code": ["int", "function", "(", "Object", "key", ")", "{", "int", "prime", "=", "_prime", ";", "int", "hash", "=", "hashCode", "(", "key", ")", "%", "prime", ";", "final", "Object", "[", "]", "keys", "=", "_keys", ";", "while", "(", "true", ")", "{", "Object", "mapKey", "=", "keys", "[", "hash", "]", ";", "if", "(", "mapKey", "==", "null", ")", "{", "return", "NULL", ";", "}", "else", "if", "(", "mapKey", "==", "key", ")", "{", "return", "_values", "[", "hash", "]", ";", "}", "hash", "=", "(", "hash", "+", "1", ")", "%", "prime", ";", "}", "}"], "memberFunctions": {"size": [["int"]], "hashCode": [["int", "Object value"]], "clear": [["void"]], "resize": [["void", "int newSize"]], "toString": [["String"]], "put": [["int", "Object key", "int value", "boolean isReplace"]], "getBiggestPrime": [["int", "int value"]]}, "className": "IntMap", "renamed": ["int", "function", "(", "Object", "arg0", ")", "{", "int", "loc0", "=", "_prime", ";", "int", "loc1", "=", "hashCode", "(", "arg0", ")", "%", "loc0", ";", "final", "Object", "[", "]", "loc2", "=", "_keys", ";", "while", "(", "true", ")", "{", "Object", "loc3", "=", "loc2", "[", "loc1", "]", ";", "if", "(", "loc3", "==", "null", ")", "{", "return", "NULL", ";", "}", "else", "if", "(", "loc3", "==", "arg0", ")", "{", "return", "_values", "[", "loc1", "]", ";", "}", "loc1", "=", "(", "loc1", "+", "1", ")", "%", "loc0", ";", "}", "}"], "nl": "Puts a new value in the property table with the appropriate flags", "nlToks": ["Puts", "a", "new", "value", "in", "the", "property", "table", "with", "the", "appropriate", "flags"], "path": "007slm/citrus/tree/master/common/hessian/src/main/java/com/alibaba/citrus/hessian/util/IntMap.java", "idx": 615}
{"memberVariables": {"valueLen": "int", "format": "PackFormatInputStream", "valueOff": "int", "value": "byte[]"}, "code": ["byte", "[", "]", "function", "(", ")", "{", "int", "itemLen", "=", "getByteArrayLength", "(", ")", ";", "byte", "[", "]", "unpacked", "=", "new", "byte", "[", "itemLen", "]", ";", "getByteArrayInternal", "(", "itemLen", ",", "unpacked", ",", "0", ",", "itemLen", ")", ";", "return", "unpacked", ";", "}"], "memberFunctions": {"getByteArrayInternal": [["void", "int itemLen", "byte[] dest", "int off", "int destLen"]], "getByteArrayLength": [["int"]], "getByte": [["byte"]], "getShort": [["short"]], "getString": [["String"]], "getLong": [["long"]], "getValue": [["byte[]"]], "getInt": [["int"]], "unpackInt": [["int", "boolean signed"]], "unpackShort": [["short", "boolean signed"]], "getFormat": [["String"]], "getRecord": [["long"]], "unpackLong": [["long", "boolean signed"]]}, "className": "PackInputStream", "renamed": ["byte", "[", "]", "function", "(", ")", "{", "int", "loc0", "=", "getByteArrayLength", "(", ")", ";", "byte", "[", "]", "loc1", "=", "new", "byte", "[", "loc0", "]", ";", "getByteArrayInternal", "(", "loc0", ",", "loc1", ",", "0", ",", "loc0", ")", ";", "return", "loc1", ";", "}"], "nl": "Retrieves a byte array field from the stream. Creates a new byte array that is the size of the object being retrieved.", "nlToks": ["Retrieves", "a", "byte", "array", "field", "from", "the", "stream", ".", "Creates", "a", "new", "byte", "array", "that", "is", "the", "size", "of", "the", "object", "being", "retrieved", "."], "path": "pgunn/wiredtiger/tree/master/lang/java/src/com/wiredtiger/db/PackInputStream.java", "idx": 616}
{"memberVariables": {}, "code": ["SAMLSSOReqValidationResponseDTO", "function", "(", "String", "sessionId", ")", "{", "SPInitLogoutRequestProcessor", "logoutReqProcessor", "=", "new", "SPInitLogoutRequestProcessor", "(", ")", ";", "SAMLSSOReqValidationResponseDTO", "validationResponseDTO", "=", "logoutReqProcessor", ".", "process", "(", "null", ",", "sessionId", ",", "null", ")", ";", "return", "validationResponseDTO", ";", "}"], "memberFunctions": {"validateIdPInitSSORequest": [["SAMLSSOReqValidationResponseDTO", "String relayState", "String queryString", "QueryParamDTO[] queryParamDTOs", "String serverURL", "String sessionId", "String rpSessionId", "String authnMode", "boolean isLogout"]], "isSAMLSSOLoginAccepted": [["boolean"]], "authenticate": [["SAMLSSORespDTO", "SAMLSSOAuthnReqDTO authReqDTO", "String sessionId", "boolean authenticated", "String authenticators", "String authMode"]], "isOpenIDLoginAccepted": [["boolean"]], "validateSPInitSSORequest": [["SAMLSSOReqValidationResponseDTO", "String samlReq", "String queryString", "String sessionId", "String rpSessionId", "String authnMode", "boolean isPost"]]}, "className": "SAMLSSOService", "renamed": ["SAMLSSOReqValidationResponseDTO", "function", "(", "String", "arg0", ")", "{", "SPInitLogoutRequestProcessor", "loc0", "=", "new", "SPInitLogoutRequestProcessor", "(", ")", ";", "SAMLSSOReqValidationResponseDTO", "loc1", "=", "loc0", ".", "process", "(", "null", ",", "arg0", ",", "null", ")", ";", "return", "loc1", ";", "}"], "nl": "Invalidates the SSO session for the given session ID", "nlToks": ["Invalidates", "the", "SSO", "session", "for", "the", "given", "session", "ID"], "path": "harsha1979/carbon-identity/tree/master/components/sso-saml/org.wso2.carbon.identity.sso.saml/src/main/java/org/wso2/carbon/identity/sso/saml/SAMLSSOService.java", "idx": 617}
{"memberVariables": {"LOG=Logger.getLogger(NotationProvider.class)": "Logger", "listeners=new ArrayList<Object[]>()": "Collection<Object[]>"}, "code": ["void", "function", "(", "PropertyChangeListener", "listener", ",", "Object", "modelElement", ")", "{", "addElementListener", "(", "listener", ",", "modelElement", ")", ";", "}"], "memberFunctions": {"getParsingHelp": [["String"]], "isValue": [["boolean", "final String key", "final Map map"]], "removeElementListener": [["void", "PropertyChangeListener listener", "Object element"]], "cleanListener": [["void", "final PropertyChangeListener listener", "final Object modelElement"]], "updateListener": [["void", "final PropertyChangeListener listener", "Object modelElement", "PropertyChangeEvent pce"]], "addElementListener": [["void", "PropertyChangeListener listener", "Object element"], ["void", "PropertyChangeListener listener", "Object element", "String property"], ["void", "PropertyChangeListener listener", "Object element", "String[] property"]], "removeAllElementListeners": [["void", "PropertyChangeListener listener"]], "toString": [["String", "Object modelElement", "Map args"]], "parse": [["void", "Object modelElement", "String text"]]}, "className": "NotationProvider", "renamed": ["void", "function", "(", "PropertyChangeListener", "arg0", ",", "Object", "arg1", ")", "{", "addElementListener", "(", "arg0", ",", "arg1", ")", ";", "}"], "nl": "Initialise the appropriate model change listeners  for the given modelelement to the given listener. Overrule this when you need more than  listening to all events from the base modelelement.", "nlToks": ["Initialise", "the", "appropriate", "model", "change", "listeners", "for", "the", "given", "modelelement", "to", "the", "given", "listener", ".", "Overrule", "this", "when", "you", "need", "more", "than", "listening", "to", "all", "events", "from", "the", "base", "modelelement", "."], "path": "pichiliani/CoArgoUML/tree/master/v0.24/fonte/src/argouml-app/src/org/argouml/notation/NotationProvider.java", "idx": 618}
{"memberVariables": {"tStart": "long", "qStart": "long", "tStop": "long", "blockSize": "int"}, "code": ["long", "function", "(", ")", "{", "return", "tStart", ";", "}"], "memberFunctions": {"getQStart": [["long"]], "getBlockSize": [["int"]], "getTStop": [["long"]]}, "className": "Mapping", "renamed": ["long", "function", "(", ")", "{", "return", "tStart", ";", "}"], "nl": "Gets the Global Chromosomal strt.", "nlToks": ["Gets", "the", "Global", "Chromosomal", "strt", "."], "path": "adamabeshouse/cbioportal/tree/master/core/src/main/java/org/mskcc/cbio/portal/mapback/Mapping.java", "idx": 619}
{"memberVariables": {"_SignCertificateResponse_QNAME=new QName(\"http://platformlayer.org/auth/v1.0\",\"signCertificateResponse\")": "QName", "_Access_QNAME=new QName(\"http://platformlayer.org/auth/v1.0\",\"access\")": "QName", "_CheckServiceAccessResponse_QNAME=new QName(\"http://platformlayer.org/auth/v1.0\",\"checkServiceAccessResponse\")": "QName", "_SignCertificateRequest_QNAME=new QName(\"http://platformlayer.org/auth/v1.0\",\"signCertificateRequest\")": "QName", "_CertificateChainInfo_QNAME=new QName(\"http://platformlayer.org/auth/v1.0\",\"certificateChainInfo\")": "QName", "_RegistrationRequest_QNAME=new QName(\"http://platformlayer.org/auth/v1.0\",\"registrationRequest\")": "QName", "_User_QNAME=new QName(\"http://platformlayer.org/auth/v1.0\",\"user\")": "QName", "_AuthenticateResponse_QNAME=new QName(\"http://platformlayer.org/auth/v1.0\",\"authenticateResponse\")": "QName", "_CheckServiceAccessRequest_QNAME=new QName(\"http://platformlayer.org/auth/v1.0\",\"checkServiceAccessRequest\")": "QName", "_ValidateTokenResponse_QNAME=new QName(\"http://platformlayer.org/auth/v1.0\",\"validateTokenResponse\")": "QName", "_AuthenticateRequest_QNAME=new QName(\"http://platformlayer.org/auth/v1.0\",\"authenticateRequest\")": "QName", "_Auth_QNAME=new QName(\"http://platformlayer.org/auth/v1.0\",\"auth\")": "QName", "_ValidateAccess_QNAME=new QName(\"http://platformlayer.org/auth/v1.0\",\"validateAccess\")": "QName", "_RegistrationResponse_QNAME=new QName(\"http://platformlayer.org/auth/v1.0\",\"registrationResponse\")": "QName", "_Roles_QNAME=new QName(\"http://platformlayer.org/auth/v1.0\",\"roles\")": "QName"}, "code": ["RegistrationRequest", "function", "(", ")", "{", "return", "new", "RegistrationRequest", "(", ")", ";", "}"], "memberFunctions": {"createValidateTokenResponse": [["ValidateTokenResponse"], ["JAXBElement<ValidateTokenResponse>", "ValidateTokenResponse value"]], "createCertificateChainInfo": [["CertificateChainInfo"], ["JAXBElement<CertificateChainInfo>", "CertificateChainInfo value"]], "createRoleList": [["RoleList"]], "createCheckServiceAccessRequest": [["CheckServiceAccessRequest"], ["JAXBElement<CheckServiceAccessRequest>", "CheckServiceAccessRequest value"]], "createRole": [["Role"]], "createToken": [["Token"]], "createCheckServiceAccessResponse": [["CheckServiceAccessResponse"], ["JAXBElement<CheckServiceAccessResponse>", "CheckServiceAccessResponse value"]], "createPasswordCredentials": [["PasswordCredentials"]], "createAuthenticateResponse": [["AuthenticateResponse"], ["JAXBElement<AuthenticateResponse>", "AuthenticateResponse value"]], "createValidateAccess": [["ValidateAccess"], ["JAXBElement<ValidateAccess>", "ValidateAccess value"]], "createAuthenticateRequest": [["AuthenticateRequest"], ["JAXBElement<AuthenticateRequest>", "AuthenticateRequest value"]], "createAuth": [["Auth"], ["JAXBElement<Auth>", "Auth value"]], "createCertificateInfo": [["CertificateInfo"]], "createUserValidation": [["UserValidation"]], "createCertificateCredentials": [["CertificateCredentials"]], "createRegistrationResponse": [["RegistrationResponse"], ["JAXBElement<RegistrationResponse>", "RegistrationResponse value"]], "createUser": [["User"], ["JAXBElement<User>", "User value"]], "createRoles": [["JAXBElement<RoleList>", "RoleList value"]], "createAccess": [["Access"], ["JAXBElement<Access>", "Access value"]], "createProjectValidation": [["ProjectValidation"]], "createSignCertificateResponse": [["SignCertificateResponse"], ["JAXBElement<SignCertificateResponse>", "SignCertificateResponse value"]], "createSignCertificateRequest": [["SignCertificateRequest"], ["JAXBElement<SignCertificateRequest>", "SignCertificateRequest value"]]}, "className": "ObjectFactory", "renamed": ["RegistrationRequest", "function", "(", ")", "{", "return", "new", "RegistrationRequest", "(", ")", ";", "}"], "nl": "Create an instance of  {@link RegistrationRequest }", "nlToks": ["Create", "an", "instance", "of", "-LCB-", "@link", "RegistrationRequest", "-RCB-"], "path": "platformlayer/platformlayer/tree/master/auth/client/src/generated/xjc/org/platformlayer/auth/v1/ObjectFactory.java", "idx": 620}
{"memberVariables": {}, "code": ["boolean", "function", "(", "Object", "file", ",", "SuffixFilter", "[", "]", "filters", ")", "{", "if", "(", "!", "(", "file", "instanceof", "File", ")", ")", "{", "return", "false", ";", "}", "String", "fileName", "=", "(", "(", "File", ")", "file", ")", ".", "getName", "(", ")", ";", "if", "(", "filters", "!=", "null", ")", "{", "for", "(", "int", "i", "=", "0", ";", "i", "<", "filters", ".", "length", ";", "i", "++", ")", "{", "if", "(", "fileName", ".", "endsWith", "(", "filters", "[", "i", "]", ".", "getSuffix", "(", ")", ")", ")", "{", "return", "true", ";", "}", "}", "}", "return", "false", ";", "}"], "memberFunctions": {"getList": [["List<File>", "File file", "boolean recurse", "SuffixFilter[] filters"], ["List<File>", "File file", "boolean recurse", "SuffixFilter[] filters", "ProgressMonitor monitor"]]}, "className": "FileImportUtils", "renamed": ["boolean", "function", "(", "Object", "arg0", ",", "SuffixFilter", "[", "]", "arg1", ")", "{", "if", "(", "!", "(", "arg0", "instanceof", "File", ")", ")", "{", "return", "false", ";", "}", "String", "loc0", "=", "(", "(", "File", ")", "arg0", ")", ".", "getName", "(", ")", ";", "if", "(", "arg1", "!=", "null", ")", "{", "for", "(", "int", "loc1", "=", "0", ";", "loc1", "<", "arg1", ".", "length", ";", "loc1", "++", ")", "{", "if", "(", "loc0", ".", "endsWith", "(", "arg1", "[", "loc1", "]", ".", "getSuffix", "(", ")", ")", ")", "{", "return", "true", ";", "}", "}", "}", "return", "false", ";", "}"], "nl": "Tells if the filename matches one of the given suffixes.", "nlToks": ["Tells", "if", "the", "filename", "matches", "one", "of", "the", "given", "suffixes", "."], "path": "pichiliani/CoArgoUML/tree/master/v0.24/fonte/src/argouml-app/src/org/argouml/uml/reveng/FileImportUtils.java", "idx": 621}
{"memberVariables": {"encryptionCryptoProperties": "Object", "bus": "Bus", "signatureCrypto": "Crypto", "signatureProperties=new SignatureProperties()": "SignatureProperties", "LOG=LogUtils.getL7dLogger(StaticSTSProperties.class)": "Logger", "issuer": "String", "encryptionProperties=new EncryptionProperties()": "EncryptionProperties", "callbackHandler": "CallbackHandler", "relationships": "List<Relationship>", "validateUseKey=true": "boolean", "relationshipResolver": "RelationshipResolver", "callbackHandlerClass": "String", "signatureUsername": "String", "encryptionCrypto": "Crypto", "samlRealmCodec": "SAMLRealmCodec", "encryptionUsername": "String", "signatureCryptoProperties": "Object", "identityMapper": "IdentityMapper", "realmParser": "RealmParser"}, "code": ["Crypto", "function", "(", ")", "{", "return", "signatureCrypto", ";", "}"], "memberFunctions": {"getRelationshipResolver": [["RelationshipResolver"]], "getBus": [["Bus"]], "setSamlRealmCodec": [["void", "SAMLRealmCodec samlRealmCodec"]], "getResourceManager": [["ResourceManager"]], "setSignaturePropertiesFile": [["void", "String signaturePropertiesFile"]], "setCallbackHandler": [["void", "CallbackHandler callbackHandler"]], "setEncryptionProperties": [["void", "EncryptionProperties encryptionProperties"]], "getEncryptionProperties": [["EncryptionProperties"]], "isValidateUseKey": [["boolean"]], "setSignatureUsername": [["void", "String signatureUsername"]], "getRelationships": [["List<Relationship>"]], "getSamlRealmCodec": [["SAMLRealmCodec"]], "getEncryptionUsername": [["String"]], "setIdentityMapper": [["void", "IdentityMapper identityMapper"]], "setEncryptionPropertiesFile": [["void", "String encryptionPropertiesFile"]], "setEncryptionUsername": [["void", "String encryptionUsername"]], "setCallbackHandlerClass": [["void", "String callbackHandlerClass"]], "getEncryptionCrypto": [["Crypto"]], "setRelationships": [["void", "List<Relationship> relationships"]], "getSignatureProperties": [["SignatureProperties"]], "setSignatureProperties": [["void", "SignatureProperties signatureProperties"]], "setRealmParser": [["void", "RealmParser realmParser"]], "getIssuer": [["String"]], "setSignatureCryptoProperties": [["void", "Object signatureCryptoProperties"]], "setSignatureCrypto": [["void", "Crypto signatureCrypto"]], "getIdentityMapper": [["IdentityMapper"]], "setValidateUseKey": [["void", "boolean validateUseKey"]], "configureProperties": [["void"]], "setEncryptionCrypto": [["void", "Crypto encryptionCrypto"]], "getRealmParser": [["RealmParser"]], "getSignatureUsername": [["String"]], "setIssuer": [["void", "String issuer"]], "getCallbackHandler": [["CallbackHandler"]], "setEncryptionCryptoProperties": [["void", "Object encryptionCryptoProperties"]], "setBus": [["void", "Bus bus"]]}, "className": "StaticSTSProperties", "renamed": ["Crypto", "function", "(", ")", "{", "return", "signatureCrypto", ";", "}"], "nl": "Get the signature Crypto object", "nlToks": ["Get", "the", "signature", "Crypto", "object"], "path": "primesign/cxf/tree/master/services/sts/sts-core/src/main/java/org/apache/cxf/sts/StaticSTSProperties.java", "idx": 624}
{"memberVariables": {"maxMemory=0": "double", "instance=new MemoryLogger()": "MemoryLogger"}, "code": ["void", "function", "(", ")", "{", "maxMemory", "=", "0", ";", "}"], "memberFunctions": {"checkMemory": [["void"]], "getMaxMemory": [["double"]], "getInstance": [["MemoryLogger"]]}, "className": "MemoryLogger", "renamed": ["void", "function", "(", ")", "{", "maxMemory", "=", "0", ";", "}"], "nl": "Reset the maximum amount of memory recorded.", "nlToks": ["Reset", "the", "maximum", "amount", "of", "memory", "recorded", "."], "path": "prateek96/Data_Mining_Assignments/tree/master/Assignment_1/Assignment-1.11/tools/MemoryLogger.java", "idx": 625}
{"memberVariables": {"ignoreExceptions=true": "boolean", "sourceCodeFile": "File", "sourceCodeFilename": "String", "languageVersion": "LanguageVersion", "attributes": "ConcurrentMap<String,Object>", "report=new Report()": "Report"}, "code": ["void", "function", "(", "File", "sourceCodeFile", ")", "{", "this", ".", "sourceCodeFile", "=", "sourceCodeFile", ";", "}"], "memberFunctions": {"setLanguageVersion": [["void", "LanguageVersion languageVersion"]], "setAttribute": [["boolean", "String name", "Object value"]], "getLanguageVersion": [["LanguageVersion"]], "getAttribute": [["Object", "String name"]], "isIgnoreExceptions": [["boolean"]], "setSourceCodeFilename": [["void", "String filename"]], "getSourceCodeFile": [["File"]], "setIgnoreExceptions": [["void", "boolean ignoreExceptions"]], "getReport": [["Report"]], "removeAttribute": [["Object", "String name"]], "getSourceCodeFilename": [["String"]], "setReport": [["void", "Report report"]]}, "className": "RuleContext", "renamed": ["void", "function", "(", "File", "arg0", ")", "{", "this", ".", "sourceCodeFile", "=", "arg0", ";", "}"], "nl": "Set the File associated with the current source file. While this may be set to null, the exclude/include facilities will not work properly without a File.", "nlToks": ["Set", "the", "File", "associated", "with", "the", "current", "source", "file", ".", "While", "this", "may", "be", "set", "to", "null", ",", "the", "exclude/include", "facilities", "will", "not", "work", "properly", "without", "a", "File", "."], "path": "adangel/pmd/tree/master/pmd-core/src/main/java/net/sourceforge/pmd/RuleContext.java", "idx": 627}
{"memberVariables": {"parent": "Node", "cost": "float", "closed=new Array()": "Array", "open=new SortedList()": "SortedList", "heuristic": "float", "maxSearchDistance": "int", "nodes": "Node[][]", "allowDiagMovement": "boolean", "depth": "int", "x": "int", "list=new Array()": "Array", "y": "int", "map": "TileBasedMap"}, "code": ["void", "function", "(", "Node", "node", ")", "{", "closed", ".", "removeValue", "(", "node", ",", "false", ")", ";", "}"], "memberFunctions": {"add": [["void", "Object o"]], "getFirstInOpen": [["Node"]], "inOpenList": [["boolean", "Node node"]], "clear": [["void"]], "inClosedList": [["boolean", "Node node"]], "compareTo": [["int", "Object other"]], "addToClosed": [["void", "Node node"]], "addToOpen": [["void", "Node node"]], "remove": [["void", "Object o"]], "contains": [["boolean", "Object o"]], "isValidLocation": [["boolean", "Mover mover", "int sx", "int sy", "int x", "int y"]], "getMovementCost": [["float", "Mover mover", "int sx", "int sy", "int tx", "int ty"]], "size": [["int"]], "getHeuristicCost": [["float", "Mover mover", "int x", "int y", "int tx", "int ty"]], "setParent": [["int", "Node parent"]], "findPath": [["Path", "Mover mover", "int sx", "int sy", "int tx", "int ty"]], "removeFromOpen": [["void", "Node node"]], "first": [["Object"]]}, "className": "AStarPathFinder", "renamed": ["void", "function", "(", "Node", "arg0", ")", "{", "closed", ".", "removeValue", "(", "arg0", ",", "false", ")", ";", "}"], "nl": "Remove a node from the closed list", "nlToks": ["Remove", "a", "node", "from", "the", "closed", "list"], "path": "prativa/shadowstruggles/tree/master/Shadow Struggles/model/br/edu/ifsp/pds/shadowstruggles/model/rpg/pathfinder/AStarPathFinder.java", "idx": 628}
{"memberVariables": {"_utf8=\"UTF-8\"": "String", "_highPriority": "boolean", "_messageBody": "byte[]", "_encoding=\"UTF-16LE\"": "String", "_correlationId": "byte[]", "_label": "String"}, "code": ["String", "function", "(", ")", "{", "return", "new", "String", "(", "_messageBody", ",", "_encoding", ")", ";", "}"], "memberFunctions": {"getCorrelationId": [["byte[]"]], "getLabel": [["String"]], "getCorrelationIdAsString": [["String"]], "setBodyAsString": [["void", "String value"]], "getBody": [["byte[]"]], "setCorrelationId": [["void", "byte[] value"]], "setHighPriority": [["void", "boolean value"]], "setLabel": [["void", "String value"]], "getHighPriority": [["boolean"]], "setBody": [["void", "byte[] value"]], "setCorrelationIdAsString": [["void", "String value"]]}, "className": "Message", "renamed": ["String", "function", "(", ")", "{", "return", "new", "String", "(", "_messageBody", ",", "_encoding", ")", ";", "}"], "nl": "Gets the message body, as a string. The string will be decoded as UTF-16LE, with no byte-order-mark. This is mostly useful after receiving a message.  If the message body is not a legal UTF-16LE bytestream, then this method will return a rubbish string.", "nlToks": ["Gets", "the", "message", "body", ",", "as", "a", "string", ".", "The", "string", "will", "be", "decoded", "as", "UTF-16LE", ",", "with", "no", "byte-order-mark", ".", "This", "is", "mostly", "useful", "after", "receiving", "a", "message", ".", "If", "the", "message", "body", "is", "not", "a", "legal", "UTF-16LE", "bytestream", ",", "then", "this", "method", "will", "return", "a", "rubbish", "string", "."], "path": "harsha89/wso2-axis2-transports/tree/master/modules/msmq/src/main/java/org/apache/axis2/transport/msmq/util/Message.java", "idx": 633}
{"memberVariables": {"viewer": "RpgScreen", "model": "RpgPlatform"}, "code": ["void", "function", "(", "Path", "path", ",", "int", "[", "]", "destinationPos", ")", "{", "model", ".", "moveCharacter", "(", "path", ",", "destinationPos", ")", ";", "}"], "memberFunctions": {"updateModel": [["void"]], "getViewer": [["RpgScreen"]], "getModel": [["RpgPlatform"]], "characterMoved": [["void", "WalkDirection direction"]], "setModel": [["void", "RpgPlatform model"]], "triggerEvent": [["void"]], "setViewer": [["void", "RpgScreen viewer"]], "getMap": [["TiledMap"]], "runAutomaticEvents": [["void"]]}, "className": "RpgController", "renamed": ["void", "function", "(", "Path", "arg0", ",", "int", "[", "]", "arg1", ")", "{", "model", ".", "moveCharacter", "(", "arg0", ",", "arg1", ")", ";", "}"], "nl": "Method called only from the Viewer. Sends the move command (in a designated path) from input to the Model and triggers an interactive event, if possible.", "nlToks": ["Method", "called", "only", "from", "the", "Viewer", ".", "Sends", "the", "move", "command", "-LRB-", "in", "a", "designated", "path", "-RRB-", "from", "input", "to", "the", "Model", "and", "triggers", "an", "interactive", "event", ",", "if", "possible", "."], "path": "prativa/shadowstruggles/tree/master/Shadow Struggles/src/br/edu/ifsp/pds/shadowstruggles/rpg/RpgController.java", "idx": 634}
{"memberVariables": {"ignoreExceptions=true": "boolean", "sourceCodeFile": "File", "sourceCodeFilename": "String", "languageVersion": "LanguageVersion", "attributes": "ConcurrentMap<String,Object>", "report=new Report()": "Report"}, "code": ["boolean", "function", "(", ")", "{", "return", "ignoreExceptions", ";", "}"], "memberFunctions": {"setSourceCodeFile": [["void", "File sourceCodeFile"]], "setLanguageVersion": [["void", "LanguageVersion languageVersion"]], "setAttribute": [["boolean", "String name", "Object value"]], "getLanguageVersion": [["LanguageVersion"]], "getAttribute": [["Object", "String name"]], "setSourceCodeFilename": [["void", "String filename"]], "getSourceCodeFile": [["File"]], "setIgnoreExceptions": [["void", "boolean ignoreExceptions"]], "getReport": [["Report"]], "removeAttribute": [["Object", "String name"]], "getSourceCodeFilename": [["String"]], "setReport": [["void", "Report report"]]}, "className": "RuleContext", "renamed": ["boolean", "function", "(", ")", "{", "return", "ignoreExceptions", ";", "}"], "nl": "Gets the configuration whether to skip failing rules (true) or whether to throw a a RuntimeException and abort the processing for the first failing rule.", "nlToks": ["Gets", "the", "configuration", "whether", "to", "skip", "failing", "rules", "-LRB-", "true", "-RRB-", "or", "whether", "to", "throw", "a", "a", "RuntimeException", "and", "abort", "the", "processing", "for", "the", "first", "failing", "rule", "."], "path": "adangel/pmd/tree/master/pmd-core/src/main/java/net/sourceforge/pmd/RuleContext.java", "idx": 636}
{"memberVariables": {"JOINER_ON_CHARACTER=Joiner.on(DELIMITER_CHARACTER)": "Joiner", "DELIMITER_CHARACTER=','": "char", "components": "Iterable<String>", "JOINER_ON_STRING=Joiner.on(DELIMITER_STRING)": "Joiner", "DELIMITER_STRING=\",\"": "String", "componentLength": "int", "count": "int"}, "code": ["int", "function", "(", "int", "reps", ")", "{", "int", "dummy", "=", "0", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "reps", ";", "i", "++", ")", "{", "StringBuilder", "sb", "=", "new", "StringBuilder", "(", ")", ";", "for", "(", "String", "comp", ":", "components", ")", "{", "if", "(", "sb", ".", "length", "(", ")", ">", "0", ")", "{", "sb", ".", "append", "(", "DELIMITER_STRING", ")", ";", "}", "sb", ".", "append", "(", "comp", ")", ";", "}", "dummy", "^=", "sb", ".", "toString", "(", ")", ".", "length", "(", ")", ";", "}", "return", "dummy", ";", "}"], "memberFunctions": {"joinerWithStringDelimiter": [["int", "int reps"]], "joinerWithCharacterDelimiter": [["int", "int reps"]], "alwaysAppendThenBackUp": [["int", "int reps"]], "booleanIfFirst": [["int", "int reps"]], "setUp": [["void"]], "assignDelimiter": [["int", "int reps"]], "joinerInlined": [["int", "int reps"]]}, "className": "JoinerBenchmark", "renamed": ["int", "function", "(", "int", "arg0", ")", "{", "int", "loc0", "=", "0", ";", "for", "(", "int", "loc1", "=", "0", ";", "loc1", "<", "arg0", ";", "loc1", "++", ")", "{", "StringBuilder", "loc2", "=", "new", "StringBuilder", "(", ")", ";", "for", "(", "String", "loc3", ":", "components", ")", "{", "if", "(", "loc2", ".", "length", "(", ")", ">", "0", ")", "{", "loc2", ".", "append", "(", "DELIMITER_STRING", ")", ";", "}", "loc2", ".", "append", "(", "loc3", ")", ";", "}", "loc0", "^=", "loc2", ".", "toString", "(", ")", ".", "length", "(", ")", ";", "}", "return", "loc0", ";", "}"], "nl": "Only appends delimiter if the accumulated string is non-empty. Note: this isn't a candidate implementation for Joiner since it fails on leading empty components.", "nlToks": ["Only", "appends", "delimiter", "if", "the", "accumulated", "string", "is", "non-empty", ".", "Note", ":", "this", "is", "n't", "a", "candidate", "implementation", "for", "Joiner", "since", "it", "fails", "on", "leading", "empty", "components", "."], "path": "hazendaz/guava/tree/master/guava-tests/benchmark/com/google/common/base/JoinerBenchmark.java", "idx": 638}
{"memberVariables": {"wrappedMap=new TreeMap<String,SortedSet<String>>()": "TreeMap<String,SortedSet<String>>"}, "code": ["void", "function", "(", "Map", "<", "String", ",", "List", "<", "String", ">>", "m", ")", "{", "for", "(", "String", "key", ":", "m", ".", "keySet", "(", ")", ")", "{", "SortedSet", "<", "String", ">", "vals", "=", "get", "(", "key", ")", ";", "if", "(", "vals", "==", "null", ")", "{", "vals", "=", "new", "TreeSet", "<", "String", ">", "(", ")", ";", "put", "(", "key", ",", "vals", ")", ";", "}", "vals", ".", "addAll", "(", "m", ".", "get", "(", "key", ")", ")", ";", "}", "}"], "memberFunctions": {"getAsQueryString": [["String", "Object key"]], "entrySet": [["Set<java.util.Map.Entry<String,SortedSet<String>>>"]], "containsKey": [["boolean", "Object key"]], "values": [["Collection<SortedSet<String>>"]], "isEmpty": [["boolean"]], "clear": [["void"]], "put": [["SortedSet<String>", "String key", "SortedSet<String> value"], ["SortedSet<String>", "String key", "SortedSet<String> values", "boolean percentEncode"], ["String", "String key", "String value"], ["String", "String key", "String value", "boolean percentEncode"]], "containsValue": [["boolean", "Object value"]], "remove": [["SortedSet<String>", "Object key"]], "size": [["int"]], "getFirst": [["String", "Object key"], ["String", "Object key", "boolean percentDecode"]], "putAll": [["void", "Map<? extends String,? extends SortedSet<String>> m"], ["void", "Map<? extends String,? extends SortedSet<String>> m", "boolean percentEncode"], ["void", "String[] keyValuePairs", "boolean percentEncode"]], "get": [["SortedSet<String>", "Object key"]], "getAsHeaderElement": [["String", "String key"]], "keySet": [["Set<String>"]], "putNull": [["String", "String key", "String nullString"]]}, "className": "HttpParameters", "renamed": ["void", "function", "(", "Map", "<", "String", ",", "List", "<", "String", ">>", "arg0", ")", "{", "for", "(", "String", "loc0", ":", "arg0", ".", "keySet", "(", ")", ")", "{", "SortedSet", "<", "String", ">", "loc1", "=", "get", "(", "loc0", ")", ";", "if", "(", "loc1", "==", "null", ")", "{", "loc1", "=", "new", "TreeSet", "<", "String", ">", "(", ")", ";", "put", "(", "loc0", ",", "loc1", ")", ";", "}", "loc1", ".", "addAll", "(", "arg0", ".", "get", "(", "loc0", ")", ")", ";", "}", "}"], "nl": "Convenience method to merge a Map>.", "nlToks": ["Convenience", "method", "to", "merge", "a", "Map", ">", "."], "path": "pritamkhose/open-gpstracker.code/tree/master/external_sources/signpost/signpost-core/src/main/java/oauth/signpost/http/HttpParameters.java", "idx": 639}
{"memberVariables": {"vals": "Map<String,Constant>"}, "code": ["int", "function", "(", ")", "{", "int", "hashval", "=", "0", ";", "for", "(", "Constant", "c", ":", "vals", ".", "values", "(", ")", ")", "hashval", "+=", "c", ".", "hashCode", "(", ")", ";", "return", "hashval", ";", "}"], "memberFunctions": {"getVal": [["Constant", "String fldname"]], "equals": [["boolean", "Object obj"]]}, "className": "GroupValue", "renamed": ["int", "function", "(", ")", "{", "int", "loc0", "=", "0", ";", "for", "(", "Constant", "loc1", ":", "vals", ".", "values", "(", ")", ")", "loc0", "+=", "loc1", ".", "hashCode", "(", ")", ";", "return", "loc0", ";", "}"], "nl": "The hashcode of a GroupValue object is the sum of the hashcodes of its field values.", "nlToks": ["The", "hashcode", "of", "a", "GroupValue", "object", "is", "the", "sum", "of", "the", "hashcodes", "of", "its", "field", "values", "."], "path": "prerit2803/DBMSProject2/tree/master/simpledb/materialize/GroupValue.java", "idx": 640}
{"memberVariables": {"tiles": "Array<Array<Array<Card>>>", "HUMAN_PLAYER=1": "int", "name": "String", "id": "int", "COMPUTER_PLAYER=-1": "int"}, "code": ["int", "function", "(", "int", "lane", ",", "int", "player", ")", "{", "int", "tile", "=", "0", ";", "return", "tile", ";", "}"], "memberFunctions": {"playerBaseAttacked": [["int"]], "laneWithMoreEnemiesInvading": [["int", "int player"]], "nextAvailableLane": [["int", "int player"]], "read": [["void", "Json json", "JsonValue jsonData"]], "nextAvailableTile": [["int", "int lane", "int player"]], "laneWithMoreEnemies": [["int", "int player"]], "getName": [["String"]], "enemyBaseAttacked": [["int"]], "getEnemyCards": [["Array<Card>"]], "cardOnMap": [["boolean", "Card c", "int lane", "int player"]], "addCard": [["void", "Card card", "int tile", "int lane"]], "getPlayerCards": [["Array<Card>"]], "tileClosestToBase": [["int", "int lane", "int player"]], "setTiles": [["void", "Array<Array<Array<Card>>> tiles"]], "write": [["void", "Json json"]], "laneWithLessAllies": [["int", "int player"]], "getTiles": [["Array<Array<Array<Card>>>"]]}, "className": "BattleMap", "renamed": ["int", "function", "(", "int", "arg0", ",", "int", "arg1", ")", "{", "int", "loc0", "=", "0", ";", "return", "loc0", ";", "}"], "nl": "Returns the next available tile in the specified lane that is furthest from the base. A tile is available if it's not occupied by a card.", "nlToks": ["Returns", "the", "next", "available", "tile", "in", "the", "specified", "lane", "that", "is", "furthest", "from", "the", "base", ".", "A", "tile", "is", "available", "if", "it", "'s", "not", "occupied", "by", "a", "card", "."], "path": "prativa/shadowstruggles/tree/master/Shadow Struggles/model/br/edu/ifsp/pds/shadowstruggles/model/BattleMap.java", "idx": 641}
{"memberVariables": {"expires": "Date", "data": "byte[]", "transformedTokenIdentifier": "String", "created": "Date", "unattachedReference": "Element", "secret": "byte[]", "securityContext": "SecurityContext", "tokenHash": "int", "token": "Element", "crypto": "Crypto", "principal": "Principal", "serialVersionUID=3820740387121650613L": "long", "wsuId": "String", "issuerAddress": "String", "encrKeySha1Value": "String", "id": "String", "x509cert": "X509Certificate", "BOOTSTRAP_TOKEN_ID=\"bootstrap_security_token_id\"": "String", "tokenType": "String", "attachedReference": "Element", "properties": "Map<String,Object>", "key": "Key"}, "code": ["String", "function", "(", ")", "{", "return", "transformedTokenIdentifier", ";", "}"], "memberFunctions": {"setAttachedReference": [["void", "Element attachedReference"]], "getTokenType": [["String"]], "setProperties": [["void", "Map<String,Object> properties"]], "setExpires": [["void", "Date expires"]], "getIssuerAddress": [["String"]], "setSHA1": [["void", "String sha"]], "getId": [["String"]], "setX509Certificate": [["void", "X509Certificate cert", "Crypto cpt"]], "setTokenHash": [["void", "int hash"]], "setPrincipal": [["void", "Principal principal"]], "getPrincipal": [["Principal"]], "getIdFromSTR": [["String", "Element str"]], "setId": [["void", "String id"]], "setIssuerAddress": [["void", "String issuerAddress"]], "getData": [["byte[]"]], "setKey": [["void", "Key key"]], "setTokenType": [["void", "String s"]], "getKey": [["Key"]], "setData": [["void", "byte[] data"]], "getProperties": [["Map<String,Object>"]], "setTransformedTokenIdentifier": [["void", "String transformedTokenIdentifier"]], "getTokenHash": [["int"]], "getCreated": [["Date"]], "getUnattachedReference": [["Element"]], "processLifeTime": [["void", "Element lifetimeElem"]], "setUnattachedReference": [["void", "Element unattachedReference"]], "setSecurityContext": [["void", "SecurityContext securityContext"]], "getCrypto": [["Crypto"]], "getSecret": [["byte[]"]], "setToken": [["void", "Element token"]], "setSecret": [["void", "byte[] secret"]], "getX509Certificate": [["X509Certificate"]], "getToken": [["Element"]], "isAboutToExpire": [["boolean", "long secondsToExpiry"]], "isExpired": [["boolean"]], "setWsuId": [["void", "String wsuId"]], "getExpires": [["Date"]], "getWsuId": [["String"]], "cloneElement": [["Element", "Element el"]], "getAttachedReference": [["Element"]], "getSHA1": [["String"]], "getSecurityContext": [["SecurityContext"]]}, "className": "SecurityToken", "renamed": ["String", "function", "(", ")", "{", "return", "transformedTokenIdentifier", ";", "}"], "nl": "Get the identifier corresponding to a transformed version of this token", "nlToks": ["Get", "the", "identifier", "corresponding", "to", "a", "transformed", "version", "of", "this", "token"], "path": "primesign/cxf/tree/master/rt/ws/security/src/main/java/org/apache/cxf/ws/security/tokenstore/SecurityToken.java", "idx": 642}
{"memberVariables": {"serialVersionUID=1L": "long", "isSystemDerived": "String", "isActive": "String", "predecessorId": "BigDecimal", "srcFileName": "String", "successorId": "BigDecimal", "feedId": "BigDecimal", "checksum": "String", "transmissionDatasetId": "String", "comments": "String", "inactivationReasonType": "String", "isFormatValid": "String", "dataUnitId": "long", "receiptDate": "Timestamp", "srcUniqueFileName": "String", "createdDate": "Timestamp", "dataSetId": "Long", "fileSize": "BigDecimal", "destFileName": "String", "loadedInCats": "String", "checksumType": "String", "modifiedDate": "Timestamp", "runId": "BigDecimal", "isPrepopulated": "String", "isBulk": "String", "isUpdate": "String", "receiptDateType": "String", "status": "String"}, "code": ["void", "function", "(", "String", "loadedInCats", ")", "{", "this", ".", "loadedInCats", "=", "loadedInCats", ";", "}"], "memberFunctions": {"setIsSystemDerived": [["void", "String isSystemDerived"]], "setIsPrepopulated": [["void", "String isPrepopulated"]], "getStatus": [["String"]], "getIsUpdate": [["String"]], "getDataUnitId": [["long"]], "getFileSize": [["BigDecimal"]], "setInactivationReasonType": [["void", "String inactivationReasonType"]], "setDataUnitId": [["void", "long dataUnitId"]], "getComments": [["String"]], "getCreatedDate": [["Timestamp"]], "setFileSize": [["void", "BigDecimal fileSize"]], "getPredecessorId": [["BigDecimal"]], "setIsUpdate": [["void", "String isUpdate"]], "getReceiptDateType": [["String"]], "getFeedId": [["BigDecimal"]], "setReceiptDate": [["void", "Timestamp receiptDate"]], "getModifiedDate": [["Timestamp"]], "setSuccessorId": [["void", "BigDecimal successorId"]], "setDestFileName": [["void", "String destFileName"]], "setIsBulk": [["void", "String isBulk"]], "getIsFormatValid": [["String"]], "setDataSetId": [["void", "Long dataSetId"]], "setIsActive": [["void", "String isActive"]], "setChecksumType": [["void", "String checksumType"]], "setFeedId": [["void", "BigDecimal feedId"]], "getInactivationReasonType": [["String"]], "getSrcUniqueFileName": [["String"]], "getDataSetId": [["Long"]], "setReceiptDateType": [["void", "String receiptDateType"]], "getRunId": [["BigDecimal"]], "setSrcFileName": [["void", "String srcFileName"]], "getChecksumType": [["String"]], "getSrcFileName": [["String"]], "getChecksum": [["String"]], "getDestFileName": [["String"]], "getReceiptDate": [["Timestamp"]], "setTransmissionDatasetId": [["void", "String transmissionDatasetId"]], "getTransmissionDatasetId": [["String"]], "setComments": [["void", "String comments"]], "getLoadedInCats": [["String"]], "getSuccessorId": [["BigDecimal"]], "getIsPrepopulated": [["String"]], "setSrcUniqueFileName": [["void", "String srcUniqueFileName"]], "setChecksum": [["void", "String checksum"]], "setIsFormatValid": [["void", "String isFormatValid"]], "getIsBulk": [["String"]], "setRunId": [["void", "BigDecimal runId"]], "setStatus": [["void", "String status"]], "getIsActive": [["String"]], "setModifiedDate": [["void", "Timestamp modifiedDate"]], "setCreatedDate": [["void", "Timestamp createdDate"]], "setPredecessorId": [["void", "BigDecimal predecessorId"]], "getIsSystemDerived": [["String"]]}, "className": "PCLDataUnitEntity", "renamed": ["void", "function", "(", "String", "arg0", ")", "{", "this", ".", "loadedInCats", "=", "arg0", ";", "}"], "nl": "Sets the loaded in cats.", "nlToks": ["Sets", "the", "loaded", "in", "cats", "."], "path": "pkesireddy/portico_fletcher/tree/master/FetcherTesterService/src/main/java/org/ithaka/cm/fetchertester/entity/PCLDataUnitEntity.java", "idx": 643}
{"memberVariables": {"decisions=0": "int", "somaticWhitelistAccepts=0": "int", "whiteListGenesForPromoterMutations": "Set<Long>", "germlineWhitelistAccepts=0": "int", "utrRejects=0": "int", "silentOrIntronRejects=0": "int", "missenseGermlineRejects=0": "int", "mutationStatusNoneRejects=0": "int", "emptyAnnotationRejects=0": "int", "redactedRejects=0": "int", "unknownAccepts=0": "int", "accepts=0": "int", "lohOrWildTypeRejects=0": "int", "igrRejects=0": "int"}, "code": ["int", "function", "(", ")", "{", "return", "this", ".", "decisions", ";", "}"], "memberFunctions": {"getUnknownAccepts": [["int"]], "getStatistics": [["String"]], "safeStringTest": [["boolean", "String data", "String pattern"]], "acceptMutation": [["boolean", "ExtendedMutation mutation"]], "getMissenseGermlineRejects": [["int"]], "getAccepts": [["int"]], "getEmptyAnnotationRejects": [["int"]], "getRejects": [["int"]], "getIGRRejects": [["int"]], "getLohOrWildTypeRejects": [["int"]], "getSilentOrIntronRejects": [["int"]], "getSomaticWhitelistAccepts": [["int"]], "getUTRRejects": [["int"]], "getGermlineWhitelistAccepts": [["int"]], "getMutationStatusNoneRejects": [["int"]], "toString": [["String"]], "getRedactedRejects": [["int"]]}, "className": "MutationFilter", "renamed": ["int", "function", "(", ")", "{", "return", "this", ".", "decisions", ";", "}"], "nl": "Provide number of decisions made by this MutationFilter.", "nlToks": ["Provide", "number", "of", "decisions", "made", "by", "this", "MutationFilter", "."], "path": "adamabeshouse/cbioportal/tree/master/core/src/main/java/org/mskcc/cbio/portal/scripts/MutationFilter.java", "idx": 644}
{"memberVariables": {"pattern": "String"}, "code": ["String", "function", "(", "Date", "date", ")", "{", "return", "formatUTC", "(", "date", ",", "DateTimeFormat", ".", "SQL", ",", "true", ")", ";", "}"], "memberFunctions": {"getCurrentUtcSql": [["String"]], "formatUTC": [["String", "Date date", "String format", "boolean toLocal"], ["String", "Date date", "DateTimeFormat format", "boolean toLocal"]], "getCurrentLocal": [["String", "DateTimeFormat format"]], "getPattern": [["String"]], "parseSqlUtc": [["Date", "String date"]], "parseUTC": [["Date", "String date", "DateTimeFormat format"]], "formatUTCtoSqlUTC": [["String", "Date date"]]}, "className": "DateTime", "renamed": ["String", "function", "(", "Date", "arg0", ")", "{", "return", "formatUTC", "(", "arg0", ",", "DateTimeFormat", ".", "SQL", ",", "true", ")", ";", "}"], "nl": "Format UTC dateTime to local dateTime in SQL format", "nlToks": ["Format", "UTC", "dateTime", "to", "local", "dateTime", "in", "SQL", "format"], "path": "phramusca/JaMuz/tree/master/src/jamuz/utils/DateTime.java", "idx": 645}
{"memberVariables": {"mElements=new ArrayList<E>()": "List<E>", "mSize=0": "int"}, "code": ["int", "function", "(", ")", "{", "return", "mSize", ";", "}"], "memberFunctions": {"pop": [["E"]], "set": [["E", "int index", "E value"]], "get": [["E", "int index"]], "isEmpty": [["boolean"]], "clear": [["void"]], "push": [["void", "E ele"]], "remove": [["E", "int index"]], "peek": [["E"]]}, "className": "Stack", "renamed": ["int", "function", "(", ")", "{", "return", "mSize", ";", "}"], "nl": "get stack size.", "nlToks": ["get", "stack", "size", "."], "path": "acupple/dubbo/tree/master/dubbo-common/src/main/java/com/alibaba/dubbo/common/utils/Stack.java", "idx": 646}
{"memberVariables": {"s_newVersionSet=false": "boolean", "s_newVersion=false": "boolean", "s_installed": "boolean", "LOG=LoggerFactory.getLogger(Prefs.class)": "Logger"}, "code": ["void", "function", "(", ")", "{", "final", "Preferences", "prefs", "=", "Preferences", ".", "userRoot", "(", ")", ";", "prefs", ".", "putDouble", "(", "PrefKeys", ".", "LAST_VERSION", ",", "getVersion", "(", ")", ")", ";", "}"], "memberFunctions": {"getVersion": [["double"]], "running": [["boolean"]], "hasId": [["boolean"]], "setInstalled": [["void", "final boolean installed"]], "getLastVersion": [["double"]], "isInstalled": [["boolean"]], "setId": [["long"]], "getId": [["long"]], "getBaseUri": [["String"]], "getTorrentDir": [["File"]], "newVersion": [["boolean"]]}, "className": "Prefs", "renamed": ["void", "function", "(", ")", "{", "final", "Preferences", "loc0", "=", "Preferences", ".", "userRoot", "(", ")", ";", "loc0", ".", "putDouble", "(", "PrefKeys", ".", "LAST_VERSION", ",", "getVersion", "(", ")", ")", ";", "}"], "nl": "Sets the last version recorded as having run to the currently running version.", "nlToks": ["Sets", "the", "last", "version", "recorded", "as", "having", "run", "to", "the", "currently", "running", "version", "."], "path": "adamfisk/littleshoot-client/tree/master/client/prefs/src/main/java/org/lastbamboo/client/prefs/Prefs.java", "idx": 647}
{"memberVariables": {"server": "Server", "host=null": "String", "contextPath": "String", "context": "Context", "port=-1": "int"}, "code": ["String", "function", "(", ")", "{", "return", "host", ";", "}"], "memberFunctions": {"getPort": [["int"]], "getContextURL": [["String"]], "getServletURL": [["String", "String servletPath"]], "stop": [["void"]], "start": [["void"]], "addServletEndpoint": [["void", "String servletPath", "Class servletClass"]]}, "className": "EmbeddedServletContainer", "renamed": ["String", "function", "(", ")", "{", "return", "host", ";", "}"], "nl": "Return the hostname the servlet container is bound to.", "nlToks": ["Return", "the", "hostname", "the", "servlet", "container", "is", "bound", "to", "."], "path": "pingpangkuangmo/oozie/tree/master/core/src/main/java/org/apache/oozie/test/EmbeddedServletContainer.java", "idx": 648}
{"memberVariables": {"date": "Date", "authorCount": "int", "refIdChanges": "Map<String,String>", "commits": "Set<RepositoryCommit>", "serialVersionUID=1L": "long", "repository": "String", "refUpdates": "Map<String,ReceiveCommand.Type>", "user": "UserModel"}, "code": ["RepositoryCommit", "function", "(", "RepositoryCommit", "commit", ")", "{", "if", "(", "commits", ".", "add", "(", "commit", ")", ")", "{", "authorCount", "=", "-", "1", ";", "return", "commit", ";", "}", "return", "null", ";", "}"], "memberFunctions": {"getOldId": [["String", "String ref"]], "getAuthorCount": [["int"]], "getCommitCount": [["int"]], "isDelete": [["boolean", "String ref"]], "getChangedTags": [["List<String>"]], "compareTo": [["int", "RefLogEntry o"]], "getChangeType": [["ReceiveCommand.Type", "String ref"]], "getChangedRefs": [["List<String>"], ["List<String>", "String baseRef"]], "getChangedBranches": [["List<String>"]], "getAuthorIdent": [["PersonIdent"]], "getCommits": [["List<RepositoryCommit>"], ["List<RepositoryCommit>", "String ref"]], "getCommitterIdent": [["PersonIdent"]], "addCommits": [["void", "List<RepositoryCommit> list"]], "isNonFastForward": [["boolean"], ["boolean", "String ref"]], "toString": [["String"]], "updateRef": [["void", "String ref", "ReceiveCommand.Type type"], ["void", "String ref", "ReceiveCommand.Type type", "String oldId", "String newId"]], "getNewId": [["String", "String ref"]]}, "className": "RefLogEntry", "renamed": ["RepositoryCommit", "function", "(", "RepositoryCommit", "arg0", ")", "{", "if", "(", "commits", ".", "add", "(", "arg0", ")", ")", "{", "authorCount", "=", "-", "1", ";", "return", "arg0", ";", "}", "return", "null", ";", "}"], "nl": "Adds a commit to the push entry object as long as the commit is not a duplicate.", "nlToks": ["Adds", "a", "commit", "to", "the", "push", "entry", "object", "as", "long", "as", "the", "commit", "is", "not", "a", "duplicate", "."], "path": "pombreda/gitblit/tree/master/src/main/java/com/gitblit/models/RefLogEntry.java", "idx": 649}
{"memberVariables": {"instance": "Date", "cal": "GregorianCalendar"}, "code": ["void", "function", "(", ")", "{", "assertEquals", "(", "cal", ".", "get", "(", "Calendar", ".", "MONTH", ")", "+", "1", ",", "instance", ".", "getMonth", "(", ")", ")", ";", "}"], "memberFunctions": {"testConstructorWithString": [["void"]], "testSetMonth": [["void"]], "testSetYearThreeDigits": [["void"]], "testConstructor": [["void"]], "testToStringFourDigitYear": [["void"]], "testEqualsAfterInit": [["void"]], "testEqualsWrongType": [["void"]], "testSetYearTwoDigit": [["void"]], "testEqualsWhenChanged": [["void"]], "testToISO8601WithTime": [["void"]], "setUp": [["void"]], "testEqualsItself": [["void"]], "testSetYearNegative": [["void"]], "testConstructorWithValues": [["void"]], "testSetDayOutOfBounds": [["void"]], "testGetYear": [["void"]], "testToISO8601WithTimeAndZeroZone": [["void"]], "testToISO8601FourDigitYear": [["void"]], "testSetDay": [["void"]], "testSetYearFourDigit": [["void"]], "testToStringTwoDigitYear": [["void"]], "testToISO8601WithTimeAndPositiveOffset": [["void"]], "testToISO8601TwoDigitYear": [["void"]], "testSetYearFiveDigits": [["void"]], "testToISO8601WithTimeAndNegativeOffset": [["void"]], "testGetDay": [["void"]], "testSetMonthOutOfBounds": [["void"]]}, "className": "DateTest", "renamed": ["void", "function", "(", ")", "{", "assertEquals", "(", "cal", ".", "get", "(", "Calendar", ".", "MONTH", ")", "+", "1", ",", "instance", ".", "getMonth", "(", ")", ")", ";", "}"], "nl": "Test method for  {@link net.sf.marineapi.nmea.util.Date#getMonth()}.", "nlToks": ["Test", "method", "for", "-LCB-", "@link", "net.sf.marineapi.nmea.util.Date", "#getMonth", "-LRB-", "-RRB-", "-RCB-", "."], "path": "pkoziol/marine-api/tree/master/src/test/java/net/sf/marineapi/nmea/util/DateTest.java", "idx": 650}
{"memberVariables": {"fldname": "String", "tx": "Transaction", "ti": "TableInfo", "si": "StatInfo", "idxname": "String"}, "code": ["int", "function", "(", ")", "{", "TableInfo", "idxti", "=", "new", "TableInfo", "(", "\"\"", ",", "schema", "(", ")", ")", ";", "int", "rpb", "=", "BLOCK_SIZE", "/", "idxti", ".", "recordLength", "(", ")", ";", "int", "numblocks", "=", "si", ".", "recordsOutput", "(", ")", "/", "rpb", ";", "return", "HashIndex", ".", "searchCost", "(", "numblocks", ",", "rpb", ")", ";", "}"], "memberFunctions": {"schema": [["Schema"]], "distinctValues": [["int", "String fname"]], "recordsOutput": [["int"]], "open": [["Index"]]}, "className": "IndexInfo", "renamed": ["int", "function", "(", ")", "{", "TableInfo", "loc0", "=", "new", "TableInfo", "(", "\"srini_string\"", ",", "schema", "(", ")", ")", ";", "int", "loc1", "=", "BLOCK_SIZE", "/", "loc0", ".", "recordLength", "(", ")", ";", "int", "loc2", "=", "si", ".", "recordsOutput", "(", ")", "/", "loc1", ";", "return", "HashIndex", ".", "searchCost", "(", "loc2", ",", "loc1", ")", ";", "}"], "nl": "Estimates the number of block accesses required to find all index records having a particular search key. The method uses the table's metadata to estimate the size of the index file and the number of index records per block. It then passes this information to the traversalCost method of the appropriate index type, which provides the estimate.", "nlToks": ["Estimates", "the", "number", "of", "block", "accesses", "required", "to", "find", "all", "index", "records", "having", "a", "particular", "search", "key", ".", "The", "method", "uses", "the", "table", "'s", "metadata", "to", "estimate", "the", "size", "of", "the", "index", "file", "and", "the", "number", "of", "index", "records", "per", "block", ".", "It", "then", "passes", "this", "information", "to", "the", "traversalCost", "method", "of", "the", "appropriate", "index", "type", ",", "which", "provides", "the", "estimate", "."], "path": "prerit2803/DBMSProject2/tree/master/simpledb/metadata/IndexInfo.java", "idx": 651}
{"memberVariables": {"languageToRuleChainVisitor=new HashMap<>()": "Map<Language,RuleChainVisitor>"}, "code": ["void", "function", "(", "List", "<", "Node", ">", "nodes", ",", "RuleContext", "ctx", ",", "Language", "language", ")", "{", "RuleChainVisitor", "visitor", "=", "getRuleChainVisitor", "(", "language", ")", ";", "if", "(", "visitor", "!=", "null", ")", "{", "visitor", ".", "visitAll", "(", "nodes", ",", "ctx", ")", ";", "}", "}"], "memberFunctions": {"add": [["void", "RuleSet ruleSet"], ["void", "RuleSet ruleSet", "Rule rule"]], "getRuleChainVisitor": [["RuleChainVisitor", "Language language"]]}, "className": "RuleChain", "renamed": ["void", "function", "(", "List", "<", "Node", ">", "arg0", ",", "RuleContext", "arg1", ",", "Language", "arg2", ")", "{", "RuleChainVisitor", "loc0", "=", "getRuleChainVisitor", "(", "arg2", ")", ";", "if", "(", "loc0", "!=", "null", ")", "{", "loc0", ".", "visitAll", "(", "arg0", ",", "arg1", ")", ";", "}", "}"], "nl": "Apply the RuleChain to the given Nodes using the given RuleContext, for those rules using the given Language.", "nlToks": ["Apply", "the", "RuleChain", "to", "the", "given", "Nodes", "using", "the", "given", "RuleContext", ",", "for", "those", "rules", "using", "the", "given", "Language", "."], "path": "adangel/pmd/tree/master/pmd-core/src/main/java/net/sourceforge/pmd/RuleChain.java", "idx": 652}
{"memberVariables": {"macAddress": "String", "ipAddress": "String", "addressPair": "AddressPair"}, "code": ["Builder", "function", "(", ")", "{", "return", "new", "Builder", "(", ")", ".", "fromAddressPair", "(", "this", ")", ";", "}"], "memberFunctions": {"macAddress": [["Builder", "String macAddress"]], "getMacAddress": [["String"]], "string": [["Objects.ToStringHelper"]], "getIpAddress": [["String"]], "build": [["AddressPair"]], "hashCode": [["int"]], "equals": [["boolean", "Object obj"]], "fromAddressPair": [["Builder", "AddressPair in"]], "builder": [["Builder", "String macAddress", "String ipAddress"]], "ipAddress": [["Builder", "String ipAddress"]], "toString": [["String"]]}, "className": "AddressPair", "renamed": ["Builder", "function", "(", ")", "{", "return", "new", "Builder", "(", ")", ".", "fromAddressPair", "(", "this", ")", ";", "}"], "nl": "Gets a Builder configured as this object.", "nlToks": ["Gets", "a", "Builder", "configured", "as", "this", "object", "."], "path": "pimenas/jclouds-labs-openstack/tree/master/openstack-neutron/src/main/java/org/jclouds/openstack/neutron/v2/domain/AddressPair.java", "idx": 653}
{"memberVariables": {"EN_OK=0": "int", "EN_SECURITY_ERROR=103": "int", "errorElement": "Element", "EN_UKNOWN=110": "int", "filesElement": "Element", "document": "Document", "EN_ALREADY_EXISTS=101": "int", "EN_INVALID_FOLDER_NAME=102": "int", "foldersElement": "Element", "EN_ERROR=1": "int"}, "code": ["void", "function", "(", "int", "number", ",", "String", "text", ")", "{", "if", "(", "errorElement", "==", "null", ")", "{", "errorElement", "=", "document", ".", "createElement", "(", "\"Error\"", ")", ";", "document", ".", "getDocumentElement", "(", ")", ".", "appendChild", "(", "errorElement", ")", ";", "}", "errorElement", ".", "setAttribute", "(", "\"number\"", ",", "String", ".", "valueOf", "(", "number", ")", ")", ";", "if", "(", "Utils", ".", "isNotEmpty", "(", "text", ")", ")", "errorElement", ".", "setAttribute", "(", "\"text\"", ",", "text", ")", ";", "}"], "memberFunctions": {"setFoldersAndFiles": [["void", "File dir"]], "setFolders": [["void", "File dir"]], "toString": [["String"]], "setFiles": [["void", "File dir"]]}, "className": "XmlResponse", "renamed": ["void", "function", "(", "int", "arg0", ",", "String", "arg1", ")", "{", "if", "(", "errorElement", "==", "null", ")", "{", "errorElement", "=", "document", ".", "createElement", "(", "\"srini_string\"", ")", ";", "document", ".", "getDocumentElement", "(", ")", ".", "appendChild", "(", "errorElement", ")", ";", "}", "errorElement", ".", "setAttribute", "(", "\"srini_string\"", ",", "String", ".", "valueOf", "(", "arg0", ")", ")", ";", "if", "(", "Utils", ".", "isNotEmpty", "(", "arg1", ")", ")", "errorElement", ".", "setAttribute", "(", "\"srini_string\"", ",", "arg1", ")", ";", "}"], "nl": "Sets an error number with a custom message.", "nlToks": ["Sets", "an", "error", "number", "with", "a", "custom", "message", "."], "path": "pobing/company/tree/master/maxcomy/src/net/fckeditor/response/XmlResponse.java", "idx": 654}
{"memberVariables": {"request": "HttpServletRequest", "toolbarSet=PropertiesLoader.getProperty(\"fckeditor.toolbarSet\")": "String", "instanceName": "String", "height=PropertiesLoader.getProperty(\"fckeditor.height\")": "String", "basePath=PropertiesLoader.getProperty(\"fckeditor.basePath\")": "String", "config": "FCKeditorConfig", "value": "String", "width=PropertiesLoader.getProperty(\"fckeditor.width\")": "String"}, "code": ["void", "function", "(", "final", "String", "instanceName", ")", "{", "this", ".", "instanceName", "=", "instanceName", ";", "}"], "memberFunctions": {"createHtml": [["String"]], "setValue": [["void", "final String value"]], "escapeXml": [["String", "String str"]], "createInputForVariable": [["String", "final String name", "final String id", "final String value"]], "toString": [["String"]], "setToolbarSet": [["void", "final String toolbarSet"]], "setBasePath": [["void", "final String basePath"]], "setWidth": [["void", "final String width"]], "setHeight": [["void", "final String height"]], "getConfig": [["FCKeditorConfig"]], "setConfig": [["void", "FCKeditorConfig config"]]}, "className": "FCKeditor", "renamed": ["void", "function", "(", "final", "String", "arg0", ")", "{", "this", ".", "instanceName", "=", "arg0", ";", "}"], "nl": "Set the unique name of the editor", "nlToks": ["Set", "the", "unique", "name", "of", "the", "editor"], "path": "pobing/company/tree/master/maxcomy/src/net/fckeditor/FCKeditor.java", "idx": 655}
{"memberVariables": {"rebuildDownstream=false": "boolean", "baseBuildNumber=0": "int", "configurations=new HashMap<String,Boolean>()": "Map<String,Boolean>"}, "code": ["boolean", "function", "(", "Combination", "combination", ")", "{", "if", "(", "configurations", ".", "containsKey", "(", "combination", ".", "toString", "(", ")", ")", ")", "{", "return", "configurations", ".", "get", "(", "combination", ".", "toString", "(", ")", ")", ";", "}", "return", "false", ";", "}"], "memberFunctions": {"getBaseBuildNumber": [["int"]], "doRebuildDownstream": [["boolean"]], "getUrlName": [["String"]], "setBaseBuildNumber": [["void", "int baseBuildNumber"]], "setRebuildDownstream": [["void", "boolean b"]], "getDisplayName": [["String"]], "getIconFileName": [["String"]], "clone": [["RebuildAction", "int baseBuildNumber"], ["RebuildAction"]], "addConfiguration": [["void", "Combination combination", "boolean reuse"]], "toString": [["String"]]}, "className": "RebuildAction", "renamed": ["boolean", "function", "(", "Combination", "arg0", ")", "{", "if", "(", "configurations", ".", "containsKey", "(", "arg0", ".", "toString", "(", ")", ")", ")", "{", "return", "configurations", ".", "get", "(", "arg0", ".", "toString", "(", ")", ")", ";", "}", "return", "false", ";", "}"], "nl": "Returns whether or not to rebuild the  {@link hudson.model.Run} If thecombination is not in the database, the method returns true, meaning the run will build.", "nlToks": ["Returns", "whether", "or", "not", "to", "rebuild", "the", "-LCB-", "@link", "hudson.model.Run", "-RCB-", "If", "thecombination", "is", "not", "in", "the", "database", ",", "the", "method", "returns", "true", ",", "meaning", "the", "run", "will", "build", "."], "path": "hawky-4s-/Matrix-Reloaded-Plugin/tree/master/src/main/java/net/praqma/jenkins/plugin/reloaded/RebuildAction.java", "idx": 657}
{"memberVariables": {"consoleMode": "boolean", "logger=org.apache.log4j.Logger.getLogger(ProgressMonitor.class)": "org.apache.log4j.Logger", "maxValue": "int", "showProgress": "boolean", "progressMonitor=new ProgressMonitor()": "ProgressMonitor", "log=new StringBuffer()": "StringBuffer", "currentMessage": "String", "debugMessages=new ArrayList<>()": "List<String>", "warnings=new TreeSet<>()": "TreeSet<String>", "curValue": "int", "warningCounts=new HashMap<>()": "HashMap<String,Integer>"}, "code": ["void", "function", "(", "boolean", "consoleFlag", ")", "{", "progressMonitor", ".", "consoleMode", "=", "consoleFlag", ";", "}"], "memberFunctions": {"setCurValue": [["void", "int curValue"]], "setConsoleModeAndParseShowProgress": [["void", "String[] args"]], "setShowProgress": [["void", "boolean showProgress"]], "setCurrentMessage": [["void", "String currentMessage"]], "getMaxValue": [["int"]], "getLog": [["String"]], "logWarning": [["void", "String warning"]], "getWarnings": [["ArrayList<String>"]], "logDebug": [["void", "String debugMessage"]], "getMessages": [["ArrayList<String>"]], "isConsoleMode": [["boolean"]], "getDebugMessages": [["List<String>"]], "setMaxValue": [["void", "int maxValue"]], "incrementCurValue": [["void"]], "isRunningOnServer": [["boolean"]], "getCurrentMessage": [["String"]], "getCurValue": [["int"]], "isShowProgress": [["boolean"]], "getPercentComplete": [["double"]]}, "className": "ProgressMonitor", "renamed": ["void", "function", "(", "boolean", "arg0", ")", "{", "progressMonitor", ".", "consoleMode", "=", "arg0", ";", "}"], "nl": "Sets Console Flag. When set to true Progress Monitor Messages are displayed to System.out.", "nlToks": ["Sets", "Console", "Flag", ".", "When", "set", "to", "true", "Progress", "Monitor", "Messages", "are", "displayed", "to", "System.out", "."], "path": "adamabeshouse/cbioportal/tree/master/core/src/main/java/org/mskcc/cbio/portal/util/ProgressMonitor.java", "idx": 658}
{"memberVariables": {"log=LogFactory.getLog(SAML2HTTPRedirectDeflateSignatureValidator.class)": "Log"}, "code": ["boolean", "function", "(", "StringBuilder", "builder", ",", "String", "queryString", ",", "String", "paramName", ")", "{", "String", "rawParam", "=", "HTTPTransportUtils", ".", "getRawQueryStringParameter", "(", "queryString", ",", "paramName", ")", ";", "if", "(", "rawParam", "==", "null", ")", "{", "return", "false", ";", "}", "if", "(", "builder", ".", "length", "(", ")", ">", "0", ")", "{", "builder", ".", "append", "(", "'&'", ")", ";", "}", "builder", ".", "append", "(", "rawParam", ")", ";", "return", "true", ";", "}"], "memberFunctions": {"validateSignature": [["boolean", "String queryString", "String issuer", "String alias", "String domainName"]], "init": [["void"]], "buildSignedContentString": [["String", "String queryString"]], "getSignedContent": [["byte[]", "String queryString"]], "buildCriteriaSet": [["CriteriaSet", "String issuer"]], "getSignature": [["byte[]", "String queryString"]], "getSigAlg": [["String", "String queryString"]]}, "className": "SAML2HTTPRedirectDeflateSignatureValidator", "renamed": ["boolean", "function", "(", "StringBuilder", "arg0", ",", "String", "arg1", ",", "String", "arg2", ")", "{", "String", "loc0", "=", "HTTPTransportUtils", ".", "getRawQueryStringParameter", "(", "arg1", ",", "arg2", ")", ";", "if", "(", "loc0", "==", "null", ")", "{", "return", "false", ";", "}", "if", "(", "arg0", ".", "length", "(", ")", ">", "0", ")", "{", "arg0", ".", "append", "(", "'&'", ")", ";", "}", "arg0", ".", "append", "(", "loc0", ")", ";", "return", "true", ";", "}"], "nl": "Find the raw query string parameter indicated and append it to the string builder.  The appended value will be in the form 'paramName=paramValue' (minus the quotes).", "nlToks": ["Find", "the", "raw", "query", "string", "parameter", "indicated", "and", "append", "it", "to", "the", "string", "builder", ".", "The", "appended", "value", "will", "be", "in", "the", "form", "`", "paramName", "=", "paramValue", "'", "-LRB-", "minus", "the", "quotes", "-RRB-", "."], "path": "harsha1979/carbon-identity/tree/master/components/sso-saml/org.wso2.carbon.identity.sso.saml/src/main/java/org/wso2/carbon/identity/sso/saml/validators/SAML2HTTPRedirectDeflateSignatureValidator.java", "idx": 659}
{"memberVariables": {"parent": "Scriptable", "dim": "int", "list": "List<Object>", "prototype": "Scriptable"}, "code": ["Object", "function", "(", "String", "name", ",", "Scriptable", "start", ")", "{", "if", "(", "name", ".", "equals", "(", "\"dim\"", ")", ")", "return", "new", "Integer", "(", "dim", ")", ";", "return", "NOT_FOUND", ";", "}"], "memberFunctions": {"getPrototype": [["Scriptable"]], "setPrototype": [["void", "Scriptable prototype"]], "hasInstance": [["boolean", "Scriptable value"]], "setParentScope": [["void", "Scriptable parent"]], "getIds": [["Object[]"]], "getClassName": [["String"]], "has": [["boolean", "String name", "Scriptable start"], ["boolean", "int index", "Scriptable start"]], "getParentScope": [["Scriptable"]], "delete": [["void", "String id"], ["void", "int index"]], "put": [["void", "String name", "Scriptable start", "Object value"], ["void", "int index", "Scriptable start", "Object value"]], "getDefaultValue": [["Object", "Class<?> typeHint"]]}, "className": "Matrix", "renamed": ["Object", "function", "(", "String", "arg0", ",", "Scriptable", "arg1", ")", "{", "if", "(", "arg0", ".", "equals", "(", "\"srini_string\"", ")", ")", "return", "new", "Integer", "(", "dim", ")", ";", "return", "NOT_FOUND", ";", "}"], "nl": "Get the named property.  Handles the \"dim\" property and returns NOT_FOUND for all other names.", "nlToks": ["Get", "the", "named", "property", ".", "Handles", "the", "``", "dim", "''", "property", "and", "returns", "NOT_FOUND", "for", "all", "other", "names", "."], "path": "adamfisk/littleshoot-client/tree/master/bin/rhino1_7R2/examples/Matrix.java", "idx": 662}
{"memberVariables": {"mClassifier": "Object", "namespace": "Object", "newFeatures": "List", "newInnerClasses": "List"}, "code": ["Vector", "function", "(", ")", "{", "return", "new", "Vector", "(", "newFeatures", ")", ";", "}"], "memberFunctions": {"newFeature": [["void", "Object mFeature"]], "getAssociationEnds": [["Vector"]], "getNamespace": [["Object"]], "getAssociationEndsList": [["List"]], "getNewInnerClassesList": [["List"]], "getNewInnerClasses": [["Vector"]], "newClassifier": [["Object", "String name"]], "getNewFeaturesList": [["List"]], "getClassifier": [["Object"]]}, "className": "ParseState", "renamed": ["Vector", "function", "(", ")", "{", "return", "new", "Vector", "(", "newFeatures", ")", ";", "}"], "nl": "Get all features not in the source.", "nlToks": ["Get", "all", "features", "not", "in", "the", "source", "."], "path": "pichiliani/CoArgoUML/tree/master/v0.24/fonte/src/argouml-app/src/org/argouml/language/java/generator/ParseState.java", "idx": 663}
{"memberVariables": {"fields=new HashMap<>()": "Map<FieldSignature,Set<String>>", "nestedClasses=new HashMap<>()": "Map<String,ClassStats>", "memo=new HashMap<>()": "Map<ClassMetricKey,Double>", "operations=new HashMap<>()": "Map<OperationSignature,Map<String,OperationStats>>"}, "code": ["ClassStats", "function", "(", "String", "className", ",", "boolean", "createIfNotFound", ")", "{", "if", "(", "createIfNotFound", "&&", "!", "nestedClasses", ".", "containsKey", "(", "className", ")", ")", "{", "nestedClasses", ".", "put", "(", "className", ",", "new", "ClassStats", "(", ")", ")", ";", "}", "return", "nestedClasses", ".", "get", "(", "className", ")", ";", "}"], "memberFunctions": {"compute": [["double", "OperationMetricKey key", "ASTMethodOrConstructorDeclaration node", "String name", "boolean force"], ["double", "Metrics.ClassMetricKey key", "ASTClassOrInterfaceDeclaration node", "boolean force"]], "addOperation": [["void", "String name", "OperationSignature sig"]], "addField": [["void", "String name", "FieldSignature sig"]], "hasMatchingSig": [["boolean", "String name", "OperationSigMask mask"], ["boolean", "String name", "FieldSigMask mask"]]}, "className": "ClassStats", "renamed": ["ClassStats", "function", "(", "String", "arg0", ",", "boolean", "arg1", ")", "{", "if", "(", "arg1", "&&", "!", "nestedClasses", ".", "containsKey", "(", "arg0", ")", ")", "{", "nestedClasses", ".", "put", "(", "arg0", ",", "new", "ClassStats", "(", ")", ")", ";", "}", "return", "nestedClasses", ".", "get", "(", "arg0", ")", ";", "}"], "nl": "Finds a ClassStats in the direct children of this class. This can only be a directly nested class, for example in the following snippet, A can get B and B can get C but A cannot get C without asking B.   class MyClass { // ClassStats A class MyNested { // ClassStats B class MyDeeplyNested { // ClassStats C } } }  ", "nlToks": ["Finds", "a", "ClassStats", "in", "the", "direct", "children", "of", "this", "class", ".", "This", "can", "only", "be", "a", "directly", "nested", "class", ",", "for", "example", "in", "the", "following", "snippet", ",", "A", "can", "get", "B", "and", "B", "can", "get", "C", "but", "A", "can", "not", "get", "C", "without", "asking", "B.", "class", "MyClass", "-LCB-", "/", "/", "ClassStats", "A", "class", "MyNested", "-LCB-", "/", "/", "ClassStats", "B", "class", "MyDeeplyNested", "-LCB-", "/", "/", "ClassStats", "C", "-RCB-", "-RCB-", "-RCB-"], "path": "adangel/pmd/tree/master/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/oom/ClassStats.java", "idx": 666}
{"memberVariables": {"score": "double", "gene": "String", "entrezGeneId": "int", "aGeneWithSpec": "GeneWithSpec"}, "code": ["void", "function", "(", "String", "gene", ")", "{", "this", ".", "gene", "=", "gene", ";", "}"], "memberFunctions": {"getGene": [["String"]], "setaGeneWithSpec": [["void", "GeneWithSpec aGeneWithSpec"]], "getEntrezGeneId": [["int"]], "getaGeneWithSpec": [["GeneWithSpec"]], "getScore": [["double"]], "setScore": [["void", "double score"]], "setEntrezGeneId": [["void", "int entrezGeneId"]]}, "className": "GeneWithScore", "renamed": ["void", "function", "(", "String", "arg0", ")", "{", "this", ".", "gene", "=", "arg0", ";", "}"], "nl": "Sets the Gene Symbol.", "nlToks": ["Sets", "the", "Gene", "Symbol", "."], "path": "adamabeshouse/cbioportal/tree/master/core/src/main/java/org/mskcc/cbio/portal/model/GeneWithScore.java", "idx": 667}
{"memberVariables": {"resourceCache=new HashMap<String,Icon>()": "HashMap<String,Icon>", "resourceExtensions=new ArrayList<String>()": "List<String>", "resourceLocations=new ArrayList<String>()": "List<String>"}, "code": ["void", "function", "(", "String", "location", ")", "{", "if", "(", "!", "containsLocation", "(", "location", ")", ")", "{", "resourceLocations", ".", "add", "(", "location", ")", ";", "}", "}"], "memberFunctions": {"isInCache": [["boolean", "String resource"]], "removeResourceLocation": [["void", "String location"]], "lookupIconUrl": [["java.net.URL", "String resource", "ClassLoader loader"]], "addResourceExtension": [["void", "String extension"]], "lookupIconResource": [["ImageIcon", "String resource"], ["ImageIcon", "String resource", "String desc"], ["ImageIcon", "String resource", "ClassLoader loader"], ["ImageIcon", "String resource", "String desc", "ClassLoader loader"]], "toJavaIdentifier": [["String", "String s"]], "removeResourceExtension": [["void", "String extension"]], "containsExtension": [["boolean", "String extension"]], "containsLocation": [["boolean", "String location"]]}, "className": "ResourceLoader", "renamed": ["void", "function", "(", "String", "arg0", ")", "{", "if", "(", "!", "containsLocation", "(", "arg0", ")", ")", "{", "resourceLocations", ".", "add", "(", "arg0", ")", ";", "}", "}"], "nl": "Adds a location (path) to the list of known locations. Locations are searched in the order they are added, so for best performance add the most likely locations first.", "nlToks": ["Adds", "a", "location", "-LRB-", "path", "-RRB-", "to", "the", "list", "of", "known", "locations", ".", "Locations", "are", "searched", "in", "the", "order", "they", "are", "added", ",", "so", "for", "best", "performance", "add", "the", "most", "likely", "locations", "first", "."], "path": "pichiliani/CoArgoUML/tree/master/v0.24/fonte/src/argouml-app/src/org/argouml/application/helpers/ResourceLoader.java", "idx": 668}
{"memberVariables": {"mNextCompleteLogNumber=Journal.FIRST_COMPLETED_LOG_NUMBER": "long", "mOutputStream": "DataOutputStream", "mJournalDirectory": "String", "mMaxLogSize": "long", "mUfs": "UnderFileSystem", "mRawOutputStream": "OutputStream", "mTempCheckpointPath": "String", "mNextEntrySequenceNumber=1": "long", "mCheckpointOutputStream=null": "CheckpointOutputStream", "mCompletedDirectory": "String", "mJournal": "Journal", "mIsClosed=false": "boolean", "mDataOutputStream": "DataOutputStream", "LOG=LoggerFactory.getLogger(Constants.LOGGER_TYPE)": "Logger", "mEntryOutputStream=null": "EntryOutputStream"}, "code": ["void", "function", "(", "JournalEntry", "entry", ")", "{", "if", "(", "mIsClosed", ")", "{", "throw", "new", "IOException", "(", "ExceptionMessage", ".", "JOURNAL_WRITE_AFTER_CLOSE", ".", "getMessage", "(", ")", ")", ";", "}", "mJournal", ".", "getJournalFormatter", "(", ")", ".", "serialize", "(", "entry", ".", "toBuilder", "(", ")", ".", "setSequenceNumber", "(", "mNextEntrySequenceNumber", "++", ")", ".", "build", "(", ")", ",", "mOutputStream", ")", ";", "}"], "memberFunctions": {"openCurrentLog": [["OutputStream"]], "completeCurrentLog": [["void"]], "isClosed": [["boolean"]], "flush": [["void"], ["void"]], "deleteCompletedLogs": [["void"]], "getEntryOutputStream": [["JournalOutputStream"]], "completeAllLogs": [["void"]], "close": [["void"], ["void"], ["void"]], "getCheckpointOutputStream": [["JournalOutputStream", "long latestSequenceNumber"]]}, "className": "JournalWriter", "renamed": ["void", "function", "(", "JournalEntry", "arg0", ")", "{", "if", "(", "mIsClosed", ")", "{", "throw", "new", "IOException", "(", "ExceptionMessage", ".", "JOURNAL_WRITE_AFTER_CLOSE", ".", "getMessage", "(", ")", ")", ";", "}", "mJournal", ".", "getJournalFormatter", "(", ")", ".", "serialize", "(", "arg0", ".", "toBuilder", "(", ")", ".", "setSequenceNumber", "(", "mNextEntrySequenceNumber", "++", ")", ".", "build", "(", ")", ",", "mOutputStream", ")", ";", "}"], "nl": "Writes an entry to the checkpoint file. The entry should not have its sequence number set. This method will add the proper sequence number to the passed in entry.", "nlToks": ["Writes", "an", "entry", "to", "the", "checkpoint", "file", ".", "The", "entry", "should", "not", "have", "its", "sequence", "number", "set", ".", "This", "method", "will", "add", "the", "proper", "sequence", "number", "to", "the", "passed", "in", "entry", "."], "path": "poemlin/alluxio/tree/master/core/server/src/main/java/alluxio/master/journal/JournalWriter.java", "idx": 669}
{"memberVariables": {"QS=63": "byte", "CR=13": "byte", "COLON=58": "byte", "HT=9": "byte", "FOWARD_SLASH=47": "byte", "PERCENT=37": "byte", "LF=10": "byte", "US_ASCII_CHARSET_NAME=\"US-ASCII\"": "String", "BACK_SLASH=92": "byte", "AMP=38": "byte", "COMMA=44": "byte", "HEX_DEC={-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,00,01,02,03,04,05,06,07,8,9,-1,-1,-1,-1,-1,-1,-1,10,11,12,13,14,15,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,10,11,12,13,14,15,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}": "int[]", "PLUS=43": "byte", "HTTP_CONTROLS=new boolean[128]": "boolean[]", "SEMI_COLON=59": "byte", "CRLF_BYTES=new byte[]{CR,LF}": "byte[]", "SPACE=32": "byte", "DEFAULT_CHARACTER_ENCODING=\"ISO-8859-1\"": "String", "EQUALS=61": "byte", "QUOTE=34": "byte", "HTTP_SEPARATORS=new boolean[128]": "boolean[]"}, "code": ["boolean", "function", "(", "byte", "b", ")", "{", "return", "HTTP_CONTROLS", "[", "b", "]", ";", "}"], "memberFunctions": {"hexAsciiToDecimal": [["int", "final byte b"]], "appendCRLF": [["void", "ByteBuffer buffer"]], "pushBack": [["void", "ByteBuffer buffer"]], "appendString": [["void", "final ByteBuffer buffer", "final String string"]], "isHttpSeparator": [["boolean", "byte b"]], "isHex": [["boolean", "byte b"]], "getAsciiBytes": [["byte[]", "final String str"]], "isWhiteSpace": [["boolean", "byte b"]]}, "className": "MinaCodecUtils", "renamed": ["boolean", "function", "(", "byte", "arg0", ")", "{", "return", "HTTP_CONTROLS", "[", "arg0", "]", ";", "}"], "nl": "Determines whether a specified (US-ASCII) character is an HTTP control character", "nlToks": ["Determines", "whether", "a", "specified", "-LRB-", "US-ASCII", "-RRB-", "character", "is", "an", "HTTP", "control", "character"], "path": "adamfisk/littleshoot-client/tree/master/common/util/mina/src/main/java/org/lastbamboo/common/util/mina/MinaCodecUtils.java", "idx": 670}
{"memberVariables": {"registeredSpecs": "ConcurrentHashMap<String,CookieSpecFactory>"}, "code": ["void", "function", "(", "final", "String", "name", ",", "final", "CookieSpecFactory", "factory", ")", "{", "if", "(", "name", "==", "null", ")", "{", "throw", "new", "IllegalArgumentException", "(", "\"Name may not be null\"", ")", ";", "}", "if", "(", "factory", "==", "null", ")", "{", "throw", "new", "IllegalArgumentException", "(", "\"Cookie spec factory may not be null\"", ")", ";", "}", "registeredSpecs", ".", "put", "(", "name", ".", "toLowerCase", "(", "Locale", ".", "ENGLISH", ")", ",", "factory", ")", ";", "}"], "memberFunctions": {"getCookieSpec": [["CookieSpec", "final String name", "final HttpParams params"], ["CookieSpec", "final String name"]], "setItems": [["void", "final Map<String,CookieSpecFactory> map"]], "unregister": [["void", "final String id"]], "getSpecNames": [["List<String>"]]}, "className": "CookieSpecRegistry", "renamed": ["void", "function", "(", "final", "String", "arg0", ",", "final", "CookieSpecFactory", "arg1", ")", "{", "if", "(", "arg0", "==", "null", ")", "{", "throw", "new", "IllegalArgumentException", "(", "\"srini_string\"", ")", ";", "}", "if", "(", "arg1", "==", "null", ")", "{", "throw", "new", "IllegalArgumentException", "(", "\"srini_string\"", ")", ";", "}", "registeredSpecs", ".", "put", "(", "arg0", ".", "toLowerCase", "(", "Locale", ".", "ENGLISH", ")", ",", "arg1", ")", ";", "}"], "nl": "Registers a  {@link CookieSpecFactory} with the given identifier.If a specification with the given name already exists it will be overridden. This nameis the same one used to retrieve the  {@link CookieSpecFactory}from  {@link #getCookieSpec(String)}.", "nlToks": ["Registers", "a", "-LCB-", "@link", "CookieSpecFactory", "-RCB-", "with", "the", "given", "identifier.If", "a", "specification", "with", "the", "given", "name", "already", "exists", "it", "will", "be", "overridden", ".", "This", "nameis", "the", "same", "one", "used", "to", "retrieve", "the", "-LCB-", "@link", "CookieSpecFactory", "-RCB-", "from", "-LCB-", "@link", "#getCookieSpec", "-LRB-", "String", "-RRB-", "-RCB-", "."], "path": "pritamkhose/open-gpstracker.code/tree/master/external_sources/httpclient-4.1.1/httpclient/src/main/java/org/apache/ogt/http/cookie/CookieSpecRegistry.java", "idx": 673}
{"memberVariables": {"lonMax": "float", "latMin": "float", "lonMin": "float", "latMax": "float"}, "code": ["BoundingBox", "function", "(", "BoundingBox", "bb", ")", "{", "latMin", "=", "Math", ".", "max", "(", "latMin", ",", "bb", ".", "latMin", ")", ";", "lonMin", "=", "Math", ".", "max", "(", "lonMin", ",", "bb", ".", "lonMin", ")", ";", "latMax", "=", "Math", ".", "min", "(", "latMax", ",", "bb", ".", "latMax", ")", ";", "lonMax", "=", "Math", ".", "min", "(", "lonMax", ",", "bb", ".", "lonMax", ")", ";", "return", "this", ";", "}"], "memberFunctions": {"getWestEastDistKM": [["float"]], "getLatMax": [["float"]], "intersectsWith": [["boolean", "BoundingBox bb"]], "getNorthSouthDistKM": [["float"]], "adjust": [["void", "Collection<MapNode> nodes"]], "getLatMin": [["float"]], "toString": [["String"]], "isInside": [["boolean", "double lat", "double lon"]], "getLonMin": [["float"]], "getLonMax": [["float"]], "unifyWith": [["BoundingBox", "BoundingBox bb"]]}, "className": "BoundingBox", "renamed": ["BoundingBox", "function", "(", "BoundingBox", "arg0", ")", "{", "latMin", "=", "Math", ".", "max", "(", "latMin", ",", "arg0", ".", "latMin", ")", ";", "lonMin", "=", "Math", ".", "max", "(", "lonMin", ",", "arg0", ".", "lonMin", ")", ";", "latMax", "=", "Math", ".", "min", "(", "latMax", ",", "arg0", ".", "latMax", ")", ";", "lonMax", "=", "Math", ".", "min", "(", "lonMax", ",", "arg0", ".", "lonMax", ")", ";", "return", "this", ";", "}"], "nl": "Adjusts the box so that the result is the intersection of both boxes.", "nlToks": ["Adjusts", "the", "box", "so", "that", "the", "result", "is", "the", "intersection", "of", "both", "boxes", "."], "path": "peterplupo/ia201102/tree/master/trabalho1/aimax-osm/src/main/java/aimax/osm/data/BoundingBox.java", "idx": 674}
{"memberVariables": {"impl": "ExtensionMechanismsHelper"}, "code": ["ExtensionMechanismsHelper", "function", "(", ")", "{", "return", "impl", ";", "}"], "memberFunctions": {"getStereotype": [["Object", "Object ns", "Object stereo"], ["Object", "Collection models", "Object stereo"]], "isValidStereotype": [["boolean", "Object theModelElement", "Object theStereotype"]], "addTaggedValue": [["void", "Object handle", "Object taggedValue"]], "removeTaggedValue": [["void", "Object handle", "Object taggedValue"]], "getAllPossibleStereotypes": [["Collection", "Collection models", "Object modelElement"]], "isStereotype": [["boolean", "Object object", "String name", "String base"]], "removeBaseClass": [["void", "Object handle", "Object baseClass"]], "setType": [["void", "Object handle", "Object type"]], "hasStereotype": [["boolean", "Object handle", "String name"]], "setIcon": [["void", "Object handle", "Object icon"]], "getStereotypes": [["Collection", "Object ns"], ["Collection", "Collection models"]], "getMetaModelName": [["String", "Object m"]], "isValidStereoType": [["boolean", "Object theModelElement", "Object theStereotype"]], "addExtendedElement": [["void", "Object handle", "Object extendedElement"]], "addBaseClass": [["void", "Object handle", "Object baseClass"]], "setValueOfTag": [["void", "Object handle", "String value"]], "isStereotypeInh": [["boolean", "Object object", "String name", "String base"]], "setTaggedValue": [["void", "Object handle", "Collection taggedValues"]], "setTagType": [["void", "Object handle", "String tagType"]], "addCopyStereotype": [["void", "Object modelElement", "Object stereotype"]], "setDataValues": [["void", "Object handle", "String[] values"]], "hasStereoType": [["boolean", "Object handle", "String name"]]}, "className": "AbstractExtensionMechanismsHelperDecorator", "renamed": ["ExtensionMechanismsHelper", "function", "(", ")", "{", "return", "impl", ";", "}"], "nl": "The component we are decorating.", "nlToks": ["The", "component", "we", "are", "decorating", "."], "path": "pichiliani/CoArgoUML/tree/master/v0.24/fonte/src/argouml-core-model/src/org/argouml/model/AbstractExtensionMechanismsHelperDecorator.java", "idx": 675}
{"memberVariables": {"comparator": "Comparator<? super T>", "upperBoundType": "BoundType", "lowerBoundType": "BoundType", "hasLowerBound": "boolean", "lowerEndpoint": "T", "hasUpperBound": "boolean", "upperEndpoint": "T", "reverse": "GeneralRange<T>"}, "code": ["GeneralRange", "<", "T", ">", "function", "(", "Comparator", "<", "?", "super", "T", ">", "comparator", ",", "@", "Nullable", "T", "lower", ",", "BoundType", "lowerType", ",", "@", "Nullable", "T", "upper", ",", "BoundType", "upperType", ")", "{", "return", "new", "GeneralRange", "<", "T", ">", "(", "comparator", ",", "true", ",", "lower", ",", "lowerType", ",", "true", ",", "upper", ",", "upperType", ")", ";", "}"], "memberFunctions": {"all": [["GeneralRange<T>", "Comparator<? super T> comparator"]], "upTo": [["GeneralRange<T>", "Comparator<? super T> comparator", "@Nullable T endpoint", "BoundType boundType"]], "tooLow": [["boolean", "@Nullable T t"]], "getUpperBoundType": [["BoundType"]], "intersect": [["GeneralRange<T>", "GeneralRange<T> other"]], "downTo": [["GeneralRange<T>", "Comparator<? super T> comparator", "@Nullable T endpoint", "BoundType boundType"]], "hasUpperBound": [["boolean"]], "isEmpty": [["boolean"]], "reverse": [["GeneralRange<T>"]], "tooHigh": [["boolean", "@Nullable T t"]], "getLowerEndpoint": [["T"]], "comparator": [["Comparator<? super T>"]], "contains": [["boolean", "@Nullable T t"]], "getLowerBoundType": [["BoundType"]], "hashCode": [["int"]], "hasLowerBound": [["boolean"]], "equals": [["boolean", "@Nullable Object obj"]], "from": [["GeneralRange<T>", "Range<T> range"]], "toString": [["String"]], "getUpperEndpoint": [["T"]]}, "className": "GeneralRange", "renamed": ["GeneralRange", "<", "T", ">", "function", "(", "Comparator", "<", "?", "super", "T", ">", "arg0", ",", "@", "Nullable", "T", "arg1", ",", "BoundType", "arg2", ",", "@", "Nullable", "T", "arg3", ",", "BoundType", "arg4", ")", "{", "return", "new", "GeneralRange", "<", "T", ">", "(", "arg0", ",", "true", ",", "arg1", ",", "arg2", ",", "true", ",", "arg3", ",", "arg4", ")", ";", "}"], "nl": "Returns everything between the endpoints relative to the specified comparator, with the specified endpoint behavior.", "nlToks": ["Returns", "everything", "between", "the", "endpoints", "relative", "to", "the", "specified", "comparator", ",", "with", "the", "specified", "endpoint", "behavior", "."], "path": "hazendaz/guava/tree/master/guava/src/com/google/common/collect/GeneralRange.java", "idx": 676}
{"memberVariables": {"configuration": "PMDConfiguration"}, "code": ["void", "function", "(", "InputStream", "sourceCode", ",", "RuleSets", "ruleSets", ",", "RuleContext", "ctx", ")", "{", "try", "{", "processSourceCode", "(", "new", "InputStreamReader", "(", "sourceCode", ",", "configuration", ".", "getSourceEncoding", "(", ")", ")", ",", "ruleSets", ",", "ctx", ")", ";", "}", "catch", "(", "UnsupportedEncodingException", "uee", ")", "{", "throw", "new", "PMDException", "(", "\"Unsupported encoding exception: \"", "+", "uee", ".", "getMessage", "(", ")", ")", ";", "}", "}"], "memberFunctions": {"usesTypeResolution": [["void", "LanguageVersion languageVersion", "Node rootNode", "RuleSets ruleSets", "Language language"]], "determineLanguage": [["void", "RuleContext ctx"]], "usesDFA": [["void", "LanguageVersion languageVersion", "Node rootNode", "RuleSets ruleSets", "Language language"]], "parse": [["Node", "RuleContext ctx", "Reader sourceCode", "Parser parser"]], "symbolFacade": [["void", "Node rootNode", "LanguageVersionHandler languageVersionHandler"]], "usesMetrics": [["void", "LanguageVersion languageVersion", "Node rootNode", "RuleSets ruleSets", "Language language"]], "processSource": [["void", "Reader sourceCode", "RuleSets ruleSets", "RuleContext ctx"]]}, "className": "SourceCodeProcessor", "renamed": ["void", "function", "(", "InputStream", "arg0", ",", "RuleSets", "arg1", ",", "RuleContext", "arg2", ")", "{", "try", "{", "processSourceCode", "(", "new", "InputStreamReader", "(", "arg0", ",", "configuration", ".", "getSourceEncoding", "(", ")", ")", ",", "arg1", ",", "arg2", ")", ";", "}", "catch", "(", "UnsupportedEncodingException", "loc0", ")", "{", "throw", "new", "PMDException", "(", "\"srini_string\"", "+", "loc0", ".", "getMessage", "(", ")", ")", ";", "}", "}"], "nl": "Processes the input stream against a rule set using the given input encoding.", "nlToks": ["Processes", "the", "input", "stream", "against", "a", "rule", "set", "using", "the", "given", "input", "encoding", "."], "path": "adangel/pmd/tree/master/pmd-core/src/main/java/net/sourceforge/pmd/SourceCodeProcessor.java", "idx": 679}
{"memberVariables": {"statsService": "StatsService", "clientId=\"client\"": "String", "service=new DefaultApprovedSiteService()": "ApprovedSiteService", "client": "ClientDetailsEntity", "site3": "ApprovedSite", "site1": "ApprovedSite", "repository": "ApprovedSiteRepository", "site2": "ApprovedSite"}, "code": ["void", "function", "(", ")", "{", "String", "otherId", "=", "\"a different id\"", ";", "client", ".", "setClientId", "(", "otherId", ")", ";", "service", ".", "clearApprovedSitesForClient", "(", "client", ")", ";", "Mockito", ".", "when", "(", "repository", ".", "getByClientId", "(", "otherId", ")", ")", ".", "thenReturn", "(", "new", "HashSet", "<", "ApprovedSite", ">", "(", ")", ")", ";", "Mockito", ".", "verify", "(", "repository", ",", "never", "(", ")", ")", ".", "remove", "(", "any", "(", "ApprovedSite", ".", "class", ")", ")", ";", "}"], "memberFunctions": {"clearApprovedSitesForClient_success": [["void"]], "prepare": [["void"]]}, "className": "TestDefaultApprovedSiteService", "renamed": ["void", "function", "(", ")", "{", "String", "loc0", "=", "\"srini_string\"", ";", "client", ".", "setClientId", "(", "loc0", ")", ";", "service", ".", "clearApprovedSitesForClient", "(", "client", ")", ";", "Mockito", ".", "when", "(", "repository", ".", "getByClientId", "(", "loc0", ")", ")", ".", "thenReturn", "(", "new", "HashSet", "<", "ApprovedSite", ">", "(", ")", ")", ";", "Mockito", ".", "verify", "(", "repository", ",", "never", "(", ")", ")", ".", "remove", "(", "any", "(", "ApprovedSite", ".", "class", ")", ")", ";", "}"], "nl": "Test clearing approved sites for a client that doesn't have any stored approved sites. Ensure that the repository's remove() method is never called in this case.", "nlToks": ["Test", "clearing", "approved", "sites", "for", "a", "client", "that", "does", "n't", "have", "any", "stored", "approved", "sites", ".", "Ensure", "that", "the", "repository", "'s", "remove", "-LRB-", "-RRB-", "method", "is", "never", "called", "in", "this", "case", "."], "path": "adilansari/OpenID-Connect-Java-Spring-Server/tree/master/openid-connect-server/src/test/java/org/mitre/openid/connect/service/impl/TestDefaultApprovedSiteService.java", "idx": 682}
{"memberVariables": {"mapping=new LinkedHashMap<String,String>()": "Map<String,String>", "writer": "XMLStreamWriter", "inCDATA": "boolean"}, "code": ["void", "function", "(", "String", "prefix", ",", "String", "uri", ")", "{", "mapping", ".", "put", "(", "prefix", ",", "uri", ")", ";", "try", "{", "writer", ".", "setPrefix", "(", "prefix", ",", "uri", ")", ";", "}", "catch", "(", "XMLStreamException", "e", ")", "{", "throw", "new", "SAXException", "(", "e", ")", ";", "}", "}"], "memberFunctions": {"getPrefix": [["String", "String ns", "String namespaceURI"]], "endPrefixMapping": [["void", "String prefix"]], "startElement": [["void", "String namespaceURI", "String localName", "String qName", "Attributes atts"]], "startEntity": [["void", "String name"]], "endCDATA": [["void"]], "endDocument": [["void"]], "startDocument": [["void"]], "endEntity": [["void", "String name"]], "startDTD": [["void", "String name", "String publicId", "String systemId"]], "endDTD": [["void"]], "characters": [["void", "char ch[]", "int start", "int length"]], "startCDATA": [["void"]], "endElement": [["void", "String namespaceURI", "String localName", "String qName"]], "skippedEntity": [["void", "String name"]], "comment": [["void", "char[] ch", "int start", "int length"]], "setDocumentLocator": [["void", "Locator locator"]], "ignorableWhitespace": [["void", "char ch[]", "int start", "int length"]], "processingInstruction": [["void", "String target", "String data"]]}, "className": "StreamWriterContentHandler", "renamed": ["void", "function", "(", "String", "arg0", ",", "String", "arg1", ")", "{", "mapping", ".", "put", "(", "arg0", ",", "arg1", ")", ";", "try", "{", "writer", ".", "setPrefix", "(", "arg0", ",", "arg1", ")", ";", "}", "catch", "(", "XMLStreamException", "loc0", ")", "{", "throw", "new", "SAXException", "(", "loc0", ")", ";", "}", "}"], "nl": "Method startPrefixMapping.", "nlToks": ["Method", "startPrefixMapping", "."], "path": "primesign/cxf/tree/master/core/src/main/java/org/apache/cxf/staxutils/StreamWriterContentHandler.java", "idx": 683}
{"memberVariables": {"HELPER": "ProxyHelper"}, "code": ["ClassLoader", "function", "(", "ClassLoader", "loader", ",", "Class", "<", "?", ">", "[", "]", "interfaces", ")", "{", "if", "(", "canSeeAllInterfaces", "(", "loader", ",", "interfaces", ")", ")", "{", "return", "loader", ";", "}", "ProxyClassLoader", "combined", "=", "new", "ProxyClassLoader", "(", "loader", ",", "interfaces", ")", ";", "for", "(", "Class", "<", "?", ">", "currentInterface", ":", "interfaces", ")", "{", "combined", ".", "addLoader", "(", "currentInterface", ".", "getClassLoader", "(", ")", ")", ";", "}", "return", "combined", ";", "}"], "memberFunctions": {"getProxyInternal": [["Object", "ClassLoader loader", "Class<?>[] interfaces", "InvocationHandler handler"]], "getProxy": [["Object", "ClassLoader loader", "Class<?>[] interfaces", "InvocationHandler handler"]], "canSeeAllInterfaces": [["boolean", "ClassLoader loader", "Class<?>[] interfaces"]]}, "className": "ProxyHelper", "renamed": ["ClassLoader", "function", "(", "ClassLoader", "arg0", ",", "Class", "<", "?", ">", "[", "]", "arg1", ")", "{", "if", "(", "canSeeAllInterfaces", "(", "arg0", ",", "arg1", ")", ")", "{", "return", "arg0", ";", "}", "ProxyClassLoader", "loc0", "=", "new", "ProxyClassLoader", "(", "arg0", ",", "arg1", ")", ";", "for", "(", "Class", "<", "?", ">", "loc1", ":", "arg1", ")", "{", "loc0", ".", "addLoader", "(", "loc1", ".", "getClassLoader", "(", ")", ")", ";", "}", "return", "loc0", ";", "}"], "nl": "Return a classloader that can see all the given interfaces If the given loader can see all interfaces then it is used. If not then a combined classloader of all interface classloaders is returned.", "nlToks": ["Return", "a", "classloader", "that", "can", "see", "all", "the", "given", "interfaces", "If", "the", "given", "loader", "can", "see", "all", "interfaces", "then", "it", "is", "used", ".", "If", "not", "then", "a", "combined", "classloader", "of", "all", "interface", "classloaders", "is", "returned", "."], "path": "primesign/cxf/tree/master/core/src/main/java/org/apache/cxf/common/util/ProxyHelper.java", "idx": 684}
{"memberVariables": {"INCREASING_BYTES=BufferUtils.getIncreasingByteArray((int)BLOCK_LENGTH)": "byte[]", "BLOCK_LENGTH=100L": "long", "mTestStream": "TestBufferedBlockOutStream", "mThrown=ExpectedException.none()": "ExpectedException"}, "code": ["void", "function", "(", ")", "{", "mTestStream", "=", "new", "TestBufferedBlockOutStream", "(", "1L", ",", "BLOCK_LENGTH", ",", "BlockStoreContext", ".", "get", "(", ")", ")", ";", "}"], "memberFunctions": {"byteArrayAtOffset": [["void"]], "byteArrayWrite": [["void"]], "doubleFlush": [["void"]], "singleByteWrite": [["void"]], "writePastBlock": [["void"]], "remaining": [["void"]], "writeToClosed": [["void"]]}, "className": "BufferedBlockOutStreamTest", "renamed": ["void", "function", "(", ")", "{", "mTestStream", "=", "new", "TestBufferedBlockOutStream", "(", "1L", ",", "BLOCK_LENGTH", ",", "BlockStoreContext", ".", "get", "(", ")", ")", ";", "}"], "nl": "Sets up the stream before a test runs.", "nlToks": ["Sets", "up", "the", "stream", "before", "a", "test", "runs", "."], "path": "poemlin/alluxio/tree/master/core/client/src/test/java/alluxio/client/block/BufferedBlockOutStreamTest.java", "idx": 685}
{"memberVariables": {"rf": "RecordFile", "sch": "Schema"}, "code": ["Constant", "function", "(", "String", "fldname", ")", "{", "if", "(", "sch", ".", "type", "(", "fldname", ")", "==", "INTEGER", ")", "return", "new", "IntConstant", "(", "rf", ".", "getInt", "(", "fldname", ")", ")", ";", "else", "return", "new", "StringConstant", "(", "rf", ".", "getString", "(", "fldname", ")", ")", ";", "}"], "memberFunctions": {"next": [["boolean"]], "beforeFirst": [["void"]], "insert": [["void"]], "getString": [["String", "String fldname"]], "delete": [["void"]], "setInt": [["void", "String fldname", "int val"]], "moveToRid": [["void", "RID rid"]], "getInt": [["int", "String fldname"]], "setString": [["void", "String fldname", "String val"]], "close": [["void"]], "setVal": [["void", "String fldname", "Constant val"]], "hasField": [["boolean", "String fldname"]], "getRid": [["RID"]]}, "className": "TableScan", "renamed": ["Constant", "function", "(", "String", "arg0", ")", "{", "if", "(", "sch", ".", "type", "(", "arg0", ")", "==", "INTEGER", ")", "return", "new", "IntConstant", "(", "rf", ".", "getInt", "(", "arg0", ")", ")", ";", "else", "return", "new", "StringConstant", "(", "rf", ".", "getString", "(", "arg0", ")", ")", ";", "}"], "nl": "Returns the value of the specified field, as a Constant. The schema is examined to determine the field's type. If INTEGER, then the record file's getInt method is called; otherwise, the getString method is called.", "nlToks": ["Returns", "the", "value", "of", "the", "specified", "field", ",", "as", "a", "Constant", ".", "The", "schema", "is", "examined", "to", "determine", "the", "field", "'s", "type", ".", "If", "INTEGER", ",", "then", "the", "record", "file", "'s", "getInt", "method", "is", "called", ";", "otherwise", ",", "the", "getString", "method", "is", "called", "."], "path": "prerit2803/DBMSProject2/tree/master/simpledb/query/TableScan.java", "idx": 686}
{"memberVariables": {"lang": "Lang"}, "code": ["NodeVisitor", "function", "(", "Node", "parent", ",", "Node", "n", ")", "{", "return", "enter", "(", "n", ")", ";", "}"], "memberFunctions": {"visitEdgeNoOverride": [["N", "Node parent", "N child"]], "leave": [["Node", "Node parent", "Node old", "Node n", "NodeVisitor v"], ["Node", "Node old", "Node n", "NodeVisitor v"]], "finish": [["void"], ["void", "Node ast"]], "toString": [["String"]], "override": [["Node", "Node parent", "Node n"], ["Node", "Node n"]], "visitEdge": [["N", "Node parent", "N child"]], "copy": [["NodeVisitor"]], "lang": [["Lang"]], "begin": [["NodeVisitor"]]}, "className": "NodeVisitor", "renamed": ["NodeVisitor", "function", "(", "Node", "arg0", ",", "Node", "arg1", ")", "{", "return", "enter", "(", "arg1", ")", ";", "}"], "nl": "Begin normal traversal of a subtree rooted at  {@code n}. This gives the visitor the option of changing internal state or returning a new visitor which will be used to visit the children of  {@code n}.  The default implementation of this method is to call {@link #enter(Node) enter(n)}, as most subclasses do not need to know the parent of the node  {@code n}.", "nlToks": ["Begin", "normal", "traversal", "of", "a", "subtree", "rooted", "at", "-LCB-", "@code", "n", "-RCB-", ".", "This", "gives", "the", "visitor", "the", "option", "of", "changing", "internal", "state", "or", "returning", "a", "new", "visitor", "which", "will", "be", "used", "to", "visit", "the", "children", "of", "-LCB-", "@code", "n", "-RCB-", ".", "The", "default", "implementation", "of", "this", "method", "is", "to", "call", "-LCB-", "@link", "#enter", "-LRB-", "Node", "-RRB-", "enter", "-LRB-", "n", "-RRB-", "-RCB-", ",", "as", "most", "subclasses", "do", "not", "need", "to", "know", "the", "parent", "of", "the", "node", "-LCB-", "@code", "n", "-RCB-", "."], "path": "polyglot-compiler/polyglot/tree/master/src/polyglot/visit/NodeVisitor.java", "idx": 687}
{"memberVariables": {"daemon=null": "Boolean", "uncaughtExceptionHandler=null": "UncaughtExceptionHandler", "priority=null": "Integer", "nameFormat=null": "String", "backingThreadFactory=null": "ThreadFactory"}, "code": ["ThreadFactoryBuilder", "function", "(", "ThreadFactory", "backingThreadFactory", ")", "{", "this", ".", "backingThreadFactory", "=", "checkNotNull", "(", "backingThreadFactory", ")", ";", "return", "this", ";", "}"], "memberFunctions": {"setDaemon": [["ThreadFactoryBuilder", "boolean daemon"]], "setUncaughtExceptionHandler": [["ThreadFactoryBuilder", "UncaughtExceptionHandler uncaughtExceptionHandler"]], "build": [["ThreadFactory"], ["ThreadFactory", "ThreadFactoryBuilder builder"]], "setNameFormat": [["ThreadFactoryBuilder", "String nameFormat"]], "format": [["String", "String format", "Object... args"]], "setPriority": [["ThreadFactoryBuilder", "int priority"]]}, "className": "ThreadFactoryBuilder", "renamed": ["ThreadFactoryBuilder", "function", "(", "ThreadFactory", "arg0", ")", "{", "this", ".", "backingThreadFactory", "=", "checkNotNull", "(", "arg0", ")", ";", "return", "this", ";", "}"], "nl": "Sets the backing  {@link ThreadFactory} for new threads created with this ThreadFactory. Threadswill be created by invoking #newThread(Runnable) on this backing  {@link ThreadFactory}.", "nlToks": ["Sets", "the", "backing", "-LCB-", "@link", "ThreadFactory", "-RCB-", "for", "new", "threads", "created", "with", "this", "ThreadFactory", ".", "Threadswill", "be", "created", "by", "invoking", "#newThread", "-LRB-", "Runnable", "-RRB-", "on", "this", "backing", "-LCB-", "@link", "ThreadFactory", "-RCB-", "."], "path": "hazendaz/guava/tree/master/guava/src/com/google/common/util/concurrent/ThreadFactoryBuilder.java", "idx": 689}
{"memberVariables": {"edgeOffset=0": "int", "figure=null": "FigNode", "UPLINK_FACTOR=5": "float", "uplinks=new ArrayList<ClassdiagramNode>()": "List<ClassdiagramNode>", "rank=NORANK": "int", "downlinks=new ArrayList<ClassdiagramNode>()": "List<ClassdiagramNode>", "NORANK=-1": "int", "column=NOCOLUMN": "int", "placementHint=-1": "int", "weight=NOWEIGHT": "float", "NOCOLUMN=-1": "int", "NOWEIGHT=-1": "int"}, "code": ["Vector", "<", "ClassdiagramNode", ">", "function", "(", ")", "{", "return", "new", "Vector", "<", "ClassdiagramNode", ">", "(", "downlinks", ")", ";", "}"], "memberFunctions": {"getUplinks": [["Vector<ClassdiagramNode>"]], "getLocation": [["Point"]], "isComment": [["boolean"]], "getUpNodes": [["List<ClassdiagramNode>"]], "getWeight": [["float"]], "getFigure": [["FigNode"]], "compareTo": [["int", "Object arg0"]], "setColumn": [["void", "int newColumn"]], "addDownlink": [["void", "ClassdiagramNode newDownlink"]], "setLocation": [["void", "Point newLocation"]], "setEdgeOffset": [["void", "int newOffset"]], "isStandalone": [["boolean"]], "getColumn": [["int"]], "getSubtreeWeight": [["float"]], "calculateWeight": [["float"]], "setRank": [["void", "int newRank"]], "addRank": [["void", "int n"]], "getTypeOrderNumer": [["int"]], "getEdgeOffset": [["int"]], "getRank": [["int"]], "setWeight": [["void", "float w"]], "isPackage": [["boolean"]], "addUplink": [["void", "ClassdiagramNode newUplink"]], "getLevel": [["int"]], "getSize": [["Dimension"]], "setPlacementHint": [["void", "int hint"]], "getPlacementHint": [["int"]], "setFigure": [["void", "FigNode newFigure"]], "getDownNodes": [["List<ClassdiagramNode>"]]}, "className": "ClassdiagramNode", "renamed": ["Vector", "<", "ClassdiagramNode", ">", "function", "(", ")", "{", "return", "new", "Vector", "<", "ClassdiagramNode", ">", "(", "downlinks", ")", ";", "}"], "nl": "Get the downlinks of this node.", "nlToks": ["Get", "the", "downlinks", "of", "this", "node", "."], "path": "pichiliani/CoArgoUML/tree/master/v0.24/fonte/src/argouml-app/src/org/argouml/uml/diagram/static_structure/layout/ClassdiagramNode.java", "idx": 690}
{"memberVariables": {"expectedDataUnitId": "Long", "seqNo": "Long", "dataSetId": "Long", "dataUnitId": "Long", "expectedValue": "String", "actualValue": "String", "expectedDataSetId": "Long", "errorCode": "String", "testId": "Long", "failedAttributeName": "String", "srcFileName": "String", "errorMsg": "String"}, "code": ["Long", "function", "(", ")", "{", "return", "testId", ";", "}"], "memberFunctions": {"setExpectedValue": [["void", "String expectedValue"]], "getExpectedValue": [["String"]], "getExpectedDataSetId": [["Long"]], "setExpectedDataSetId": [["void", "Long expectedDataSetId"]], "setActualValue": [["void", "String actualValue"]], "getDataSetId": [["Long"]], "setSrcFileName": [["void", "String srcFileName"]], "getExpectedDataUnitId": [["Long"]], "setExpectedDataUnitId": [["void", "Long expectedDataUnitId"]], "getSrcFileName": [["String"]], "getSeqNo": [["Long"]], "getFailedAttributeName": [["String"]], "setTestId": [["void", "Long testId"]], "setFailedAttributeName": [["void", "String failedAttributeName"]], "setErrorCode": [["void", "String errorCode"]], "getActualValue": [["String"]], "getDataUnitId": [["Long"]], "setSeqNo": [["void", "Long seqNo"]], "setErrorMsg": [["void", "String errorMsg"]], "getErrorCode": [["String"]], "setDataUnitId": [["void", "Long dataUnitId"]], "setDataSetId": [["void", "Long dataSetId"]], "toString": [["String"]], "getErrorMsg": [["String"]]}, "className": "TestResultDetailsDTO", "renamed": ["Long", "function", "(", ")", "{", "return", "testId", ";", "}"], "nl": "Gets the test id.", "nlToks": ["Gets", "the", "test", "id", "."], "path": "pkesireddy/portico_fletcher/tree/master/FetcherTesterService/src/main/java/org/ithaka/cm/fetchertester/model/TestResultDetailsDTO.java", "idx": 691}
{"memberVariables": {}, "code": ["String", "function", "(", "Object", "base", ")", "{", "if", "(", "base", "instanceof", "Fig", ")", "{", "base", "=", "(", "(", "Fig", ")", "base", ")", ".", "getOwner", "(", ")", ";", "}", "if", "(", "base", "==", "null", ")", "return", "null", ";", "if", "(", "base", "instanceof", "CommentEdge", ")", "{", "return", "(", "String", ")", "(", "(", "CommentEdge", ")", "base", ")", ".", "getUUID", "(", ")", ";", "}", "return", "Model", ".", "getFacade", "(", ")", ".", "getUUID", "(", "base", ")", ";", "}"], "memberFunctions": {"getNewUUID": [["String"]]}, "className": "UUIDHelper", "renamed": ["String", "function", "(", "Object", "arg0", ")", "{", "if", "(", "arg0", "instanceof", "Fig", ")", "{", "arg0", "=", "(", "(", "Fig", ")", "arg0", ")", ".", "getOwner", "(", ")", ";", "}", "if", "(", "arg0", "==", "null", ")", "return", "null", ";", "if", "(", "arg0", "instanceof", "CommentEdge", ")", "{", "return", "(", "String", ")", "(", "(", "CommentEdge", ")", "arg0", ")", ".", "getUUID", "(", ")", ";", "}", "return", "Model", ".", "getFacade", "(", ")", ".", "getUUID", "(", "arg0", ")", ";", "}"], "nl": "Return the UUID of the element.", "nlToks": ["Return", "the", "UUID", "of", "the", "element", "."], "path": "pichiliani/CoArgoUML/tree/master/v0.24/fonte/src/argouml-app/src/org/argouml/uml/UUIDHelper.java", "idx": 693}
{"memberVariables": {"logger": "Logger", "overrides=new Properties()": "Properties", "removals=new TreeSet<String>()": "Set<String>"}, "code": ["long", "function", "(", "String", "key", ",", "long", "defaultValue", ")", "{", "String", "val", "=", "getString", "(", "key", ",", "null", ")", ";", "if", "(", "StringUtils", ".", "isEmpty", "(", "val", ")", ")", "{", "return", "defaultValue", ";", "}", "return", "com", ".", "gitblit", ".", "utils", ".", "FileUtils", ".", "convertSizeToLong", "(", "val", ",", "defaultValue", ")", ";", "}"], "memberFunctions": {"read": [["Properties"]], "getSettings": [["Properties"]], "getInteger": [["int", "String name", "int defaultValue"]], "hasSettings": [["boolean", "String key"]], "getString": [["String", "String name", "String defaultValue"]], "removeSetting": [["void", "String key"]], "saveSettings": [["boolean"], ["boolean", "Map<String,String> updatedSettings"]], "getMap": [["Map<String,String>", "String name"]], "getStrings": [["List<String>", "String name"], ["List<String>", "String name", "String separator"]], "overrideSetting": [["void", "String key", "String value"], ["void", "String key", "int value"], ["void", "String key", "boolean value"]], "getLong": [["long", "String name", "long defaultValue"]], "getChar": [["char", "String name", "char defaultValue"]], "getRequiredString": [["String", "String name"]], "getAllKeys": [["List<String>", "String startingWith"]], "merge": [["void", "IStoredSettings settings"]], "getBoolean": [["boolean", "String name", "boolean defaultValue"]], "getIntegers": [["List<Integer>", "String name"], ["List<Integer>", "String name", "String separator"]]}, "className": "IStoredSettings", "renamed": ["long", "function", "(", "String", "arg0", ",", "long", "arg1", ")", "{", "String", "loc0", "=", "getString", "(", "arg0", ",", "null", ")", ";", "if", "(", "StringUtils", ".", "isEmpty", "(", "loc0", ")", ")", "{", "return", "arg1", ";", "}", "return", "com", ".", "gitblit", ".", "utils", ".", "FileUtils", ".", "convertSizeToLong", "(", "loc0", ",", "arg1", ")", ";", "}"], "nl": "Returns an long filesize from a string value such as 50m or 50mb", "nlToks": ["Returns", "an", "long", "filesize", "from", "a", "string", "value", "such", "as", "50m", "or", "50mb"], "path": "pombreda/gitblit/tree/master/src/main/java/com/gitblit/IStoredSettings.java", "idx": 694}
{"memberVariables": {"hex={\"%00\",\"%01\",\"%02\",\"%03\",\"%04\",\"%05\",\"%06\",\"%07\",\"%08\",\"%09\",\"%0a\",\"%0b\",\"%0c\",\"%0d\",\"%0e\",\"%0f\",\"%10\",\"%11\",\"%12\",\"%13\",\"%14\",\"%15\",\"%16\",\"%17\",\"%18\",\"%19\",\"%1a\",\"%1b\",\"%1c\",\"%1d\",\"%1e\",\"%1f\",\"%20\",\"%21\",\"%22\",\"%23\",\"%24\",\"%25\",\"%26\",\"%27\",\"%28\",\"%29\",\"%2a\",\"%2b\",\"%2c\",\"%2d\",\"%2e\",\"%2f\",\"%30\",\"%31\",\"%32\",\"%33\",\"%34\",\"%35\",\"%36\",\"%37\",\"%38\",\"%39\",\"%3a\",\"%3b\",\"%3c\",\"%3d\",\"%3e\",\"%3f\",\"%40\",\"%41\",\"%42\",\"%43\",\"%44\",\"%45\",\"%46\",\"%47\",\"%48\",\"%49\",\"%4a\",\"%4b\",\"%4c\",\"%4d\",\"%4e\",\"%4f\",\"%50\",\"%51\",\"%52\",\"%53\",\"%54\",\"%55\",\"%56\",\"%57\",\"%58\",\"%59\",\"%5a\",\"%5b\",\"%5c\",\"%5d\",\"%5e\",\"%5f\",\"%60\",\"%61\",\"%62\",\"%63\",\"%64\",\"%65\",\"%66\",\"%67\",\"%68\",\"%69\",\"%6a\",\"%6b\",\"%6c\",\"%6d\",\"%6e\",\"%6f\",\"%70\",\"%71\",\"%72\",\"%73\",\"%74\",\"%75\",\"%76\",\"%77\",\"%78\",\"%79\",\"%7a\",\"%7b\",\"%7c\",\"%7d\",\"%7e\",\"%7f\",\"%80\",\"%81\",\"%82\",\"%83\",\"%84\",\"%85\",\"%86\",\"%87\",\"%88\",\"%89\",\"%8a\",\"%8b\",\"%8c\",\"%8d\",\"%8e\",\"%8f\",\"%90\",\"%91\",\"%92\",\"%93\",\"%94\",\"%95\",\"%96\",\"%97\",\"%98\",\"%99\",\"%9a\",\"%9b\",\"%9c\",\"%9d\",\"%9e\",\"%9f\",\"%a0\",\"%a1\",\"%a2\",\"%a3\",\"%a4\",\"%a5\",\"%a6\",\"%a7\",\"%a8\",\"%a9\",\"%aa\",\"%ab\",\"%ac\",\"%ad\",\"%ae\",\"%af\",\"%b0\",\"%b1\",\"%b2\",\"%b3\",\"%b4\",\"%b5\",\"%b6\",\"%b7\",\"%b8\",\"%b9\",\"%ba\",\"%bb\",\"%bc\",\"%bd\",\"%be\",\"%bf\",\"%c0\",\"%c1\",\"%c2\",\"%c3\",\"%c4\",\"%c5\",\"%c6\",\"%c7\",\"%c8\",\"%c9\",\"%ca\",\"%cb\",\"%cc\",\"%cd\",\"%ce\",\"%cf\",\"%d0\",\"%d1\",\"%d2\",\"%d3\",\"%d4\",\"%d5\",\"%d6\",\"%d7\",\"%d8\",\"%d9\",\"%da\",\"%db\",\"%dc\",\"%dd\",\"%de\",\"%df\",\"%e0\",\"%e1\",\"%e2\",\"%e3\",\"%e4\",\"%e5\",\"%e6\",\"%e7\",\"%e8\",\"%e9\",\"%ea\",\"%eb\",\"%ec\",\"%ed\",\"%ee\",\"%ef\",\"%f0\",\"%f1\",\"%f2\",\"%f3\",\"%f4\",\"%f5\",\"%f6\",\"%f7\",\"%f8\",\"%f9\",\"%fa\",\"%fb\",\"%fc\",\"%fd\",\"%fe\",\"%ff\"}": "String[]"}, "code": ["String", "function", "(", "String", "s", ")", "{", "StringBuffer", "sbuf", "=", "new", "StringBuffer", "(", ")", ";", "int", "len", "=", "s", ".", "length", "(", ")", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "len", ";", "i", "++", ")", "{", "int", "ch", "=", "s", ".", "charAt", "(", "i", ")", ";", "append", "(", "sbuf", ",", "ch", ")", ";", "}", "return", "sbuf", ".", "toString", "(", ")", ";", "}"], "memberFunctions": {"append": [["void", "StringBuffer sbuf", "int ch"]]}, "className": "URLUTF8Encoder", "renamed": ["String", "function", "(", "String", "arg0", ")", "{", "StringBuffer", "loc0", "=", "new", "StringBuffer", "(", ")", ";", "int", "loc1", "=", "arg0", ".", "length", "(", ")", ";", "for", "(", "int", "loc2", "=", "0", ";", "loc2", "<", "loc1", ";", "loc2", "++", ")", "{", "int", "loc3", "=", "arg0", ".", "charAt", "(", "loc2", ")", ";", "append", "(", "loc0", ",", "loc3", ")", ";", "}", "return", "loc0", ".", "toString", "(", ")", ";", "}"], "nl": "Encode a string to the \"x-www-form-urlencoded\" form, enhanced with the UTF-8-in-URL proposal. This is what happens:     The ASCII characters 'a' through 'z', 'A' through 'Z', and '0' through '9' remain the same.    The unreserved characters - _ . ! ~  ' ( ) remain the same.    The space character ' ' is converted into a plus sign '+'.    All other ASCII characters are converted into the 3-character string \"%xy\", where xy is the two-digit hexadecimal representation of the character code    All non-ASCII characters are encoded in two steps: first to a sequence of 2 or 3 bytes, using the UTF-8 algorithm; secondly each of these bytes is encoded as \"%xx\". ", "nlToks": ["Encode", "a", "string", "to", "the", "``", "x-www-form-urlencoded", "''", "form", ",", "enhanced", "with", "the", "UTF-8-in-URL", "proposal", ".", "This", "is", "what", "happens", ":", "The", "ASCII", "characters", "`", "a", "'", "through", "`", "z", "'", ",", "`", "A", "'", "through", "`", "Z", "'", ",", "and", "'", "0", "'", "through", "'", "9", "'", "remain", "the", "same", ".", "The", "unreserved", "characters", "-", "_", ".", "!", "~", "'", "-LRB-", "-RRB-", "remain", "the", "same", ".", "The", "space", "character", "'", "'", "is", "converted", "into", "a", "plus", "sign", "'", "+", "'", ".", "All", "other", "ASCII", "characters", "are", "converted", "into", "the", "3-character", "string", "''", "%", "xy", "''", ",", "where", "xy", "is", "the", "two-digit", "hexadecimal", "representation", "of", "the", "character", "code", "All", "non-ASCII", "characters", "are", "encoded", "in", "two", "steps", ":", "first", "to", "a", "sequence", "of", "2", "or", "3", "bytes", ",", "using", "the", "UTF-8", "algorithm", ";", "secondly", "each", "of", "these", "bytes", "is", "encoded", "as", "''", "%", "xx", "''", "."], "path": "plutogeek/flyingsaucer/tree/master/flying-saucer-core/src/main/java/org/xhtmlrenderer/simple/extend/URLUTF8Encoder.java", "idx": 695}
{"memberVariables": {"comments": "String", "inactivationReasonType": "String", "receiptDate": "Timestamp", "isActive": "String", "predecessorId": "BigDecimal", "srcFileName": "String", "serialVersionUID=-2837724379118220768L": "long", "srcUniqueFileName": "String", "successorId": "BigDecimal", "createdDate": "Timestamp", "pclDataUnits": "List<PCLDataUnitEntity>", "dataSetId": "long", "feedId": "BigDecimal", "fileSize": "BigDecimal", "destFileName": "String", "checksum": "String", "checksumType": "String", "modifiedDate": "Timestamp", "runId": "BigDecimal", "isPrepopulated": "String", "isUpdate": "String", "receiptDateType": "String", "status": "String"}, "code": ["Timestamp", "function", "(", ")", "{", "return", "this", ".", "createdDate", ";", "}"], "memberFunctions": {"setFeedId": [["void", "BigDecimal feedId"]], "getInactivationReasonType": [["String"]], "getSrcUniqueFileName": [["String"]], "getDataSetId": [["long"]], "setReceiptDateType": [["void", "String receiptDateType"]], "setIsPrepopulated": [["void", "String isPrepopulated"]], "getRunId": [["BigDecimal"]], "setSrcFileName": [["void", "String srcFileName"]], "getChecksumType": [["String"]], "getSrcFileName": [["String"]], "getChecksum": [["String"]], "getStatus": [["String"]], "getDestFileName": [["String"]], "getIsUpdate": [["String"]], "getFileSize": [["BigDecimal"]], "getPclDataUnits": [["List<PCLDataUnitEntity>"]], "setPclDataUnits": [["void", "List<PCLDataUnitEntity> pclDataUnits"]], "setInactivationReasonType": [["void", "String inactivationReasonType"]], "getReceiptDate": [["Timestamp"]], "getComments": [["String"]], "setComments": [["void", "String comments"]], "removePclDataUnit": [["PCLDataUnitEntity", "PCLDataUnitEntity pclDataUnit"]], "getSuccessorId": [["BigDecimal"]], "getIsPrepopulated": [["String"]], "setSrcUniqueFileName": [["void", "String srcUniqueFileName"]], "setFileSize": [["void", "BigDecimal fileSize"]], "getPredecessorId": [["BigDecimal"]], "setChecksum": [["void", "String checksum"]], "setIsUpdate": [["void", "String isUpdate"]], "getReceiptDateType": [["String"]], "getFeedId": [["BigDecimal"]], "setRunId": [["void", "BigDecimal runId"]], "setReceiptDate": [["void", "Timestamp receiptDate"]], "setStatus": [["void", "String status"]], "getModifiedDate": [["Timestamp"]], "getIsActive": [["String"]], "setSuccessorId": [["void", "BigDecimal successorId"]], "setDestFileName": [["void", "String destFileName"]], "addPclDataUnit": [["PCLDataUnitEntity", "PCLDataUnitEntity pclDataUnit"]], "setModifiedDate": [["void", "Timestamp modifiedDate"]], "setCreatedDate": [["void", "Timestamp createdDate"]], "setDataSetId": [["void", "long dataSetId"]], "setPredecessorId": [["void", "BigDecimal predecessorId"]], "setIsActive": [["void", "String isActive"]], "setChecksumType": [["void", "String checksumType"]]}, "className": "PCLDataSetEntity", "renamed": ["Timestamp", "function", "(", ")", "{", "return", "this", ".", "createdDate", ";", "}"], "nl": "Gets the created date.", "nlToks": ["Gets", "the", "created", "date", "."], "path": "pkesireddy/portico_fletcher/tree/master/FetcherTesterService/src/main/java/org/ithaka/cm/fetchertester/entity/PCLDataSetEntity.java", "idx": 696}
{"memberVariables": {"HOUR=60 * MINUTE": "Integer", "MINUTE=1": "Integer"}, "code": ["ELEvaluator", "function", "(", "Element", "event", ",", "SyncCoordAction", "appInst", ",", "Configuration", "conf", ")", "{", "return", "createInstancesELEvaluator", "(", "\"coord-action-create\"", ",", "event", ",", "appInst", ",", "conf", ")", ";", "}"], "memberFunctions": {"createLazyEvaluator": [["ELEvaluator", "Date actualTime", "Date nominalTime", "Element dEvent", "Configuration conf"]], "make2Digits": [["String", "int num"]], "createSLAEvaluator": [["ELEvaluator", "Date nominalTime", "Configuration conf"]], "setConfigToEval": [["void", "ELEvaluator eval", "Configuration conf"]], "createELEvaluatorForGroup": [["ELEvaluator", "Configuration conf", "String group"]], "createELEvaluatorForDataEcho": [["ELEvaluator", "Configuration conf", "String group", "HashMap<String,String> dataNameList"]], "createURIELEvaluator": [["ELEvaluator", "String strDate"]], "getDSObject": [["SyncCoordDataset", "Element eData"]], "createDataEvaluator": [["ELEvaluator", "Element eJob", "Configuration conf", "String actionId"]]}, "className": "CoordELEvaluator", "renamed": ["ELEvaluator", "function", "(", "Element", "arg0", ",", "SyncCoordAction", "arg1", ",", "Configuration", "arg2", ")", "{", "return", "createInstancesELEvaluator", "(", "\"srini_string\"", ",", "arg0", ",", "arg1", ",", "arg2", ")", ";", "}"], "nl": "Create a new Evaluator to resolve the EL functions and variables using action creation time (Phase 2)", "nlToks": ["Create", "a", "new", "Evaluator", "to", "resolve", "the", "EL", "functions", "and", "variables", "using", "action", "creation", "time", "-LRB-", "Phase", "2", "-RRB-"], "path": "pingpangkuangmo/oozie/tree/master/core/src/main/java/org/apache/oozie/coord/CoordELEvaluator.java", "idx": 699}
{"memberVariables": {"qname": "QName"}, "code": ["QName", "function", "(", ")", "{", "return", "qname", ";", "}"], "memberFunctions": {"setQName": [["void", "QName value"]], "isSetQName": [["boolean"]]}, "className": "CorbaTypeImpl", "renamed": ["QName", "function", "(", ")", "{", "return", "qname", ";", "}"], "nl": "Gets the value of the qname property.", "nlToks": ["Gets", "the", "value", "of", "the", "qname", "property", "."], "path": "primesign/cxf/tree/master/rt/bindings/corba/src/main/java/org/apache/cxf/binding/corba/wsdl/CorbaTypeImpl.java", "idx": 700}
{"memberVariables": {"factory": "TransformerFactory", "errorListener": "ErrorListener", "output=new Properties()": "Properties", "styleSheet": "Source", "source": "Source", "uriResolver": "URIResolver", "params=new HashMap<String,Object>()": "Map<String,Object>"}, "code": ["void", "function", "(", "TransformerFactory", "f", ")", "{", "factory", "=", "f", ";", "}"], "memberFunctions": {"setSource": [["void", "Source s"]], "setStylesheet": [["void", "Source s"]], "transformTo": [["void", "Result r"]], "setErrorListener": [["void", "ErrorListener l"]], "clearParameters": [["void"]], "transformToString": [["String"]], "setURIResolver": [["void", "URIResolver r"]], "clearOutputProperties": [["void"]], "addParameter": [["void", "String name", "Object value"]], "transformToDocument": [["Document"]], "addOutputProperty": [["void", "String name", "String value"]]}, "className": "Transformation", "renamed": ["void", "function", "(", "TransformerFactory", "arg0", ")", "{", "factory", "=", "arg0", ";", "}"], "nl": "Set the TraX factory to use.", "nlToks": ["Set", "the", "TraX", "factory", "to", "use", "."], "path": "phbenisc/xmlunit/tree/master/xmlunit-core/src/main/java/org/xmlunit/transform/Transformation.java", "idx": 701}
{"memberVariables": {"salt=0x9e3779b9": "int", "gen": "AtomicInteger"}, "code": ["int", "function", "(", ")", "{", "return", "mix", "(", "gen", ".", "getAndIncrement", "(", ")", ")", ";", "}"], "memberFunctions": {"result": [["int", "final short v0", "final short v1"]], "hi16": [["short", "final int in"]], "unmix": [["int", "final int in"]], "format": [["String", "int id"]], "lo16": [["short", "final int in"]], "mix": [["int", "int in"], ["int", "final int salt", "final int in"]]}, "className": "IdGenerator", "renamed": ["int", "function", "(", ")", "{", "return", "mix", "(", "gen", ".", "getAndIncrement", "(", ")", ")", ";", "}"], "nl": "Produce the next identifier.", "nlToks": ["Produce", "the", "next", "identifier", "."], "path": "pombreda/gitblit/tree/master/src/main/java/com/gitblit/utils/IdGenerator.java", "idx": 702}
{"memberVariables": {"endpoint": "Endpoint"}, "code": ["void", "function", "(", "Exchange", "exchange", ")", "{", "}"], "memberFunctions": {"prepare": [["void", "Message message"]], "getEndpoint": [["Endpoint"]], "selectConduit": [["Conduit", "Message message"]], "setEndpoint": [["void", "Endpoint ep"]]}, "className": "NullConduitSelector", "renamed": ["void", "function", "(", "Exchange", "arg0", ")", "{", "}"], "nl": "Called on completion of the MEP for which the Conduit was required.", "nlToks": ["Called", "on", "completion", "of", "the", "MEP", "for", "which", "the", "Conduit", "was", "required", "."], "path": "primesign/cxf/tree/master/core/src/main/java/org/apache/cxf/endpoint/NullConduitSelector.java", "idx": 703}
{"memberVariables": {"logger=Logger.getLogger(AbstractExecutionThreadService.class.getName())": "Logger", "delegate=new AbstractService(){\n  @Override protected final void doStart(){\n    Executor executor=MoreExecutors.renamingDecorator(executor(),new Supplier<String>(){\n      @Override public String get(){\n        return serviceName();\n      }\n    }\n);\n    executor.execute(new Runnable(){\n      @Override public void run(){\n        try {\n          startUp();\n          notifyStarted();\n          if (isRunning()) {\n            try {\n              AbstractExecutionThreadService.this.run();\n            }\n catch (            Throwable t) {\n              try {\n                shutDown();\n              }\n catch (              Exception ignored) {\n                logger.log(Level.WARNING,\"Error while attempting to shut down the service after failure.\",ignored);\n              }\n              notifyFailed(t);\n              return;\n            }\n          }\n          shutDown();\n          notifyStopped();\n        }\n catch (        Throwable t) {\n          notifyFailed(t);\n        }\n      }\n    }\n);\n  }\n  @Override protected void doStop(){\n    triggerShutdown();\n  }\n  @Override public String toString(){\n    return AbstractExecutionThreadService.this.toString();\n  }\n}\n": "Service"}, "code": ["Executor", "function", "(", ")", "{", "return", "new", "Executor", "(", ")", "{", "@", "Override", "public", "void", "execute", "(", "Runnable", "command", ")", "{", "MoreExecutors", ".", "newThread", "(", "serviceName", "(", ")", ",", "command", ")", ".", "start", "(", ")", ";", "}", "}", ";", "}"], "memberFunctions": {"doStop": [["void"]], "run": [["void"]], "failureCause": [["Throwable"]], "serviceName": [["String"]], "triggerShutdown": [["void"]], "startAsync": [["Service"]], "shutDown": [["void"]], "isRunning": [["boolean"]], "startUp": [["void"]], "doStart": [["void"]], "awaitTerminated": [["void"], ["void", "long timeout", "TimeUnit unit"]], "stopAsync": [["Service"]], "toString": [["String"], ["String"]], "state": [["State"]], "awaitRunning": [["void"], ["void", "long timeout", "TimeUnit unit"]], "addListener": [["void", "Listener listener", "Executor executor"]]}, "className": "AbstractExecutionThreadService", "renamed": ["Executor", "function", "(", ")", "{", "return", "new", "Executor", "(", ")", "{", "@", "Override", "public", "void", "execute", "(", "Runnable", "arg0", ")", "{", "MoreExecutors", ".", "newThread", "(", "serviceName", "(", ")", ",", "arg0", ")", ".", "start", "(", ")", ";", "}", "}", ";", "}"], "nl": "Returns the  {@link Executor} that will be used to run this service. Subclasses may overridethis method to use a custom  {@link Executor}, which may configure its worker thread with a specific name, thread group or priority. The returned executor's  {@link Executor#execute(Runnable) execute()} method is called when this service is started, and shouldreturn promptly. The default implementation returns a new  {@link Executor} that sets the name of its threadsto the string returned by  {@link #serviceName}", "nlToks": ["Returns", "the", "-LCB-", "@link", "Executor", "-RCB-", "that", "will", "be", "used", "to", "run", "this", "service", ".", "Subclasses", "may", "overridethis", "method", "to", "use", "a", "custom", "-LCB-", "@link", "Executor", "-RCB-", ",", "which", "may", "configure", "its", "worker", "thread", "with", "a", "specific", "name", ",", "thread", "group", "or", "priority", ".", "The", "returned", "executor", "'s", "-LCB-", "@link", "Executor", "#execute", "-LRB-", "Runnable", "-RRB-", "execute", "-LRB-", "-RRB-", "-RCB-", "method", "is", "called", "when", "this", "service", "is", "started", ",", "and", "shouldreturn", "promptly", ".", "The", "default", "implementation", "returns", "a", "new", "-LCB-", "@link", "Executor", "-RCB-", "that", "sets", "the", "name", "of", "its", "threadsto", "the", "string", "returned", "by", "-LCB-", "@link", "#serviceName", "-RCB-"], "path": "hazendaz/guava/tree/master/guava/src/com/google/common/util/concurrent/AbstractExecutionThreadService.java", "idx": 704}
{"memberVariables": {"EXAMPLE=\"$GPRMB,A,0.00,R,,RUSKI,5536.200,N,01436.500,E,432.3,234.9,,V*58\"": "String", "rmb": "RMBSentence", "empty": "RMBSentence"}, "code": ["void", "function", "(", ")", "{", "rmb", ".", "setOriginId", "(", "\"ORIGIN\"", ")", ";", "assertTrue", "(", "rmb", ".", "toString", "(", ")", ".", "contains", "(", "\",ORIGIN,RUSKI,\"", ")", ")", ";", "assertEquals", "(", "\"ORIGIN\"", ",", "rmb", ".", "getOriginId", "(", ")", ")", ";", "}"], "memberFunctions": {"testGetVelocity": [["void"]], "testGetCrossTrackError": [["void"]], "testArrivalStatus": [["void"]], "testSetDestination": [["void"]], "testSetBearing": [["void"]], "testSetSteerToWithNull": [["void"]], "testSetStatus": [["void"]], "testConstructor": [["void"]], "testGetBearing": [["void"]], "testSetBearingWithNegativeValue": [["void"]], "testSetSteerTo": [["void"]], "testGetSteerTo": [["void"]], "testSetVelocity": [["void"]], "testGetOriginId": [["void"]], "testSetVelocityWithNegativeValue": [["void"]], "setUp": [["void"]], "testGetStatus": [["void"]], "testSetBearingWithValueGreaterThanAllowed": [["void"]], "testGetRange": [["void"]], "testSetRange": [["void"]], "testGetDestination": [["void"]], "testSetCrossTrackError": [["void"]]}, "className": "RMBTest", "renamed": ["void", "function", "(", ")", "{", "rmb", ".", "setOriginId", "(", "\"srini_string\"", ")", ";", "assertTrue", "(", "rmb", ".", "toString", "(", ")", ".", "contains", "(", "\"srini_string\"", ")", ")", ";", "assertEquals", "(", "\"srini_string\"", ",", "rmb", ".", "getOriginId", "(", ")", ")", ";", "}"], "nl": "Test method for {@link net.sf.marineapi.nmea.parser.RMBParser#setOriginId(String)}.", "nlToks": ["Test", "method", "for", "-LCB-", "@link", "net.sf.marineapi.nmea.parser.RMBParser", "#setOriginId", "-LRB-", "String", "-RRB-", "-RCB-", "."], "path": "pkoziol/marine-api/tree/master/src/test/java/net/sf/marineapi/nmea/parser/RMBTest.java", "idx": 705}
{"memberVariables": {"classnamePrefix": "String", "LOG=Logger.getLogger(ParseState.class)": "Logger", "obsoleteInnerClasses": "Collection", "component": "Object", "anonymousClassCounter": "int", "context": "Context", "classifier": "Object", "obsoleteFeatures": "Collection"}, "code": ["Object", "function", "(", "String", "name", ")", "{", "for", "(", "Object", "mFeature", ":", "obsoleteFeatures", ")", "{", "if", "(", "name", ".", "equals", "(", "Model", ".", "getFacade", "(", ")", ".", "getName", "(", "mFeature", ")", ")", ")", "{", "return", "mFeature", ";", "}", "}", "return", "null", ";", "}"], "memberFunctions": {"addClassifierContext": [["void", "Object mClassifier"]], "addPackageContext": [["void", "Object mPackage"]], "removeObsoleteFeatures": [["void"]], "innerClassifier": [["void", "Object mClassifier"]], "addComponent": [["void", "Object c"]], "outerClassifier": [["void"]], "getMethod": [["Object", "String name"]], "getClassifier": [["Object"]], "removeObsoleteInnerClasses": [["void"]], "getAttribute": [["Object", "String name"]], "feature": [["void", "Object feature"]], "getFeatures": [["Collection", "String name"]], "getClassnamePrefix": [["String"]], "getOperation": [["Object", "String name"]], "getComponent": [["Object"]], "anonymousClass": [["String"]], "getContext": [["Context"]]}, "className": "ParseState", "renamed": ["Object", "function", "(", "String", "arg0", ")", "{", "for", "(", "Object", "loc0", ":", "obsoleteFeatures", ")", "{", "if", "(", "arg0", ".", "equals", "(", "Model", ".", "getFacade", "(", ")", ".", "getName", "(", "loc0", ")", ")", ")", "{", "return", "loc0", ";", "}", "}", "return", "null", ";", "}"], "nl": "Get a feature from the current classifier not yet modeled.", "nlToks": ["Get", "a", "feature", "from", "the", "current", "classifier", "not", "yet", "modeled", "."], "path": "pichiliani/CoArgoUML/tree/master/v0.24/fonte/src/argouml-app/src/org/argouml/uml/reveng/java/ParseState.java", "idx": 707}
{"memberVariables": {}, "code": ["void", "function", "(", "AbstractDosPlugin", "instance", ")", "{", "String", "result", "=", "instance", ".", "getVersion", "(", ")", ";", "assertTrue", "(", "result", ".", "length", "(", ")", ">", "0", ")", ";", "}"], "memberFunctions": {"testGetAuthor": [["void", "AbstractDosPlugin instance"]], "testCreateTamperedRequest": [["void", "AbstractDosPlugin instance"]], "setUpClass": [["void"]], "testGetName": [["void", "AbstractDosPlugin instance"]], "testGetCountermeasures": [["void", "AbstractDosPlugin instance"]], "setUp": [["void"]], "tearDownClass": [["void"]], "testGetDescription": [["void", "AbstractDosPlugin instance"]], "testInitializePlugin": [["void", "AbstractDosPlugin instance"]], "tearDown": [["void"]]}, "className": "GenericDosPluginTest", "renamed": ["void", "function", "(", "AbstractDosPlugin", "arg0", ")", "{", "String", "loc0", "=", "arg0", ".", "getVersion", "(", ")", ";", "assertTrue", "(", "loc0", ".", "length", "(", ")", ">", "0", ")", ";", "}"], "nl": "Test of getVersion method, of class TestDosAttack.", "nlToks": ["Test", "of", "getVersion", "method", ",", "of", "class", "TestDosAttack", "."], "path": "0xwindows/WS-Attacker/tree/master/plugins/Denial_of_Service/src/test/java/wsattacker/plugin/dos/GenericDosPluginTest.java", "idx": 709}
{"memberVariables": {"classnamePrefix": "String", "LOG=Logger.getLogger(ParseState.class)": "Logger", "obsoleteInnerClasses": "Collection", "component": "Object", "anonymousClassCounter": "int", "context": "Context", "classifier": "Object", "obsoleteFeatures": "Collection"}, "code": ["Object", "function", "(", "String", "name", ")", "{", "for", "(", "Object", "feature", ":", "obsoleteFeatures", ")", "{", "if", "(", "Model", ".", "getFacade", "(", ")", ".", "isAAttribute", "(", "feature", ")", "&&", "name", ".", "equals", "(", "Model", ".", "getFacade", "(", ")", ".", "getName", "(", "feature", ")", ")", ")", "{", "return", "feature", ";", "}", "}", "return", "null", ";", "}"], "memberFunctions": {"addClassifierContext": [["void", "Object mClassifier"]], "addPackageContext": [["void", "Object mPackage"]], "removeObsoleteFeatures": [["void"]], "innerClassifier": [["void", "Object mClassifier"]], "addComponent": [["void", "Object c"]], "outerClassifier": [["void"]], "getMethod": [["Object", "String name"]], "getClassifier": [["Object"]], "getFeature": [["Object", "String name"]], "removeObsoleteInnerClasses": [["void"]], "feature": [["void", "Object feature"]], "getFeatures": [["Collection", "String name"]], "getClassnamePrefix": [["String"]], "getOperation": [["Object", "String name"]], "getComponent": [["Object"]], "anonymousClass": [["String"]], "getContext": [["Context"]]}, "className": "ParseState", "renamed": ["Object", "function", "(", "String", "arg0", ")", "{", "for", "(", "Object", "loc0", ":", "obsoleteFeatures", ")", "{", "if", "(", "Model", ".", "getFacade", "(", ")", ".", "isAAttribute", "(", "loc0", ")", "&&", "arg0", ".", "equals", "(", "Model", ".", "getFacade", "(", ")", ".", "getName", "(", "loc0", ")", ")", ")", "{", "return", "loc0", ";", "}", "}", "return", "null", ";", "}"], "nl": "Get a attribute from the current classifier not yet modeled.", "nlToks": ["Get", "a", "attribute", "from", "the", "current", "classifier", "not", "yet", "modeled", "."], "path": "pichiliani/CoArgoUML/tree/master/v0.24/fonte/src/argouml-app/src/org/argouml/uml/reveng/java/ParseState.java", "idx": 710}
{"memberVariables": {"endDate": "Timestamp", "feedConfigId": "BigDecimal", "resultCode": "String", "serialVersionUID=1L": "long", "resultMessage": "String", "fileCount": "BigDecimal", "maxReceiptDate": "Timestamp", "downloadSize": "BigDecimal", "feedId": "BigDecimal", "configInfo": "String", "runId": "long", "errors": "byte[]", "runStatus": "String", "startDate": "Timestamp"}, "code": ["Timestamp", "function", "(", ")", "{", "return", "this", ".", "endDate", ";", "}"], "memberFunctions": {"getFeedConfigId": [["BigDecimal"]], "getStartDate": [["Timestamp"]], "setFeedId": [["void", "BigDecimal feedId"]], "getResultCode": [["String"]], "setFeedConfigId": [["void", "BigDecimal feedConfigId"]], "setMaxReceiptDate": [["void", "Timestamp maxReceiptDate"]], "getRunId": [["long"]], "setErrors": [["void", "byte[] errors"]], "getConfigInfo": [["String"]], "setEndDate": [["void", "Timestamp endDate"]], "getErrors": [["byte[]"]], "setFileCount": [["void", "BigDecimal fileCount"]], "getDownloadSize": [["BigDecimal"]], "getResultMessage": [["String"]], "setResultMessage": [["void", "String resultMessage"]], "getFileCount": [["BigDecimal"]], "getRunStatus": [["String"]], "setRunStatus": [["void", "String runStatus"]], "setStartDate": [["void", "Timestamp startDate"]], "getFeedId": [["BigDecimal"]], "setResultCode": [["void", "String resultCode"]], "setRunId": [["void", "long runId"]], "getMaxReceiptDate": [["Timestamp"]], "setConfigInfo": [["void", "String configInfo"]], "setDownloadSize": [["void", "BigDecimal downloadSize"]]}, "className": "PCLFetcherRunRecorderEntity", "renamed": ["Timestamp", "function", "(", ")", "{", "return", "this", ".", "endDate", ";", "}"], "nl": "Gets the end date.", "nlToks": ["Gets", "the", "end", "date", "."], "path": "pkesireddy/portico_fletcher/tree/master/FetcherTesterService/src/main/java/org/ithaka/cm/fetchertester/entity/PCLFetcherRunRecorderEntity.java", "idx": 711}
{"memberVariables": {"graphName": "String", "user=\"xinyu\"": "String", "ep=new Endpoint()": "Endpoint"}, "code": ["String", "function", "(", "String", "graphName", ",", "String", "sdd", ",", "String", "user", ",", "String", "commitMessage", ",", "String", "branchNameA", ",", "String", "branchNameB", ",", "String", "triples", ")", "{", "return", "String", ".", "format", "(", "\"USER \"%s\" %n\"", "+", "\"MESSAGE \"%s\" %n\"", "+", "\"MERGE GRAPH <%s> SDD <%s> BRANCH \"%s\" INTO \"%s\" WITH { %n\"", "+", "\" %s %n\"", "+", "\"}\"", ",", "user", ",", "commitMessage", ",", "graphName", ",", "sdd", ",", "branchNameA", ",", "branchNameB", ",", "triples", ")", ";", "}"], "memberFunctions": {"createSelectQuery": [["String", "String graphName", "String revision"]], "createAutoMergeQuery": [["String", "String graphName", "String sdd", "String user", "String commitMessage", "String branchNameA", "String branchNameB"]], "createCommonMergeQuery": [["String", "String graphName", "String sdd", "String user", "String commitMessage", "String branchNameA", "String branchNameB"]], "setUpBeforeClass": [["void"]], "testCommonMerge": [["void"]], "setUp": [["void"]], "testManualMerge": [["void"]], "testAutoMerge": [["void"]], "testCreatedGraph": [["void"]], "createManualMergeQuery": [["String", "String graphName", "String sdd", "String user", "String commitMessage", "String branchNameA", "String branchNameB", "String triples"]]}, "className": "TestThreeWayMerge", "renamed": ["String", "function", "(", "String", "arg0", ",", "String", "arg1", ",", "String", "arg2", ",", "String", "arg3", ",", "String", "arg4", ",", "String", "arg5", ",", "String", "arg6", ")", "{", "return", "String", ".", "format", "(", "\"srini_string\"", "%", "s", "+", "\"srini_string\"", "%", "s", "+", "\"srini_string\"", "%", "s", "%", "s", "+", "\"srini_string\"", "+", "\"srini_string\"", ",", "arg2", ",", "arg3", ",", "arg0", ",", "arg1", ",", "arg4", ",", "arg5", ",", "arg6", ")", ";", "}"], "nl": "Create MERGE-WITH query.", "nlToks": ["Create", "MERGE-WITH", "query", "."], "path": "plt-tud/r43ples/tree/master/src/test/java/de/tud/plt/r43ples/test/merge/TestThreeWayMerge.java", "idx": 712}
{"memberVariables": {"clientIpAddress": "String", "clientId": "String", "allowedGrantTypes=new LinkedList<String>()": "List<String>", "isConfidential": "boolean", "applicationCertificates=new LinkedList<String>()": "List<String>", "subject": "UserSubject", "redirectUris=new LinkedList<String>()": "List<String>", "registeredScopes=new LinkedList<String>()": "List<String>", "applicationLogoUri": "String", "serialVersionUID=-5550840247125850922L": "long", "applicationDescription": "String", "registeredAudiences=new LinkedList<String>()": "List<String>", "applicationWebUri": "String", "clientSecret": "String", "properties=new HashMap<String,String>()": "Map<String,String>", "applicationName": "String"}, "code": ["String", "function", "(", ")", "{", "return", "applicationDescription", ";", "}"], "memberFunctions": {"getSubject": [["UserSubject"]], "getApplicationName": [["String"]], "setSubject": [["void", "UserSubject subject"]], "getClientId": [["String"]], "getAllowedGrantTypes": [["List<String>"]], "setApplicationDescription": [["void", "String applicationDescription"]], "setRegisteredScopes": [["void", "List<String> registeredScopes"]], "setProperties": [["void", "Map<String,String> properties"]], "getClientIpAddress": [["String"]], "setApplicationCertificates": [["void", "List<String> applicationCertificates"]], "getApplicationWebUri": [["String"]], "setApplicationLogoUri": [["void", "String logoPath"]], "setConfidential": [["void", "boolean isConf"]], "getRedirectUris": [["List<String>"]], "setApplicationWebUri": [["void", "String applicationWebUri"]], "setClientIpAddress": [["void", "String clientIpAddress"]], "getApplicationLogoUri": [["String"]], "setClientSecret": [["void", "String id"]], "setAllowedGrantTypes": [["void", "List<String> allowedGrantTypes"]], "isConfidential": [["boolean"]], "getClientSecret": [["String"]], "setApplicationName": [["void", "String applicationName"]], "getProperties": [["Map<String,String>"]], "setRedirectUris": [["void", "List<String> redirectUris"]], "getRegisteredAudiences": [["List<String>"]], "setRegisteredAudiences": [["void", "List<String> registeredAudiences"]], "getApplicationCertificates": [["List<String>"]], "setClientId": [["void", "String id"]], "getRegisteredScopes": [["List<String>"]]}, "className": "Client", "renamed": ["String", "function", "(", ")", "{", "return", "applicationDescription", ";", "}"], "nl": "Gets the description of the third-party application.", "nlToks": ["Gets", "the", "description", "of", "the", "third-party", "application", "."], "path": "primesign/cxf/tree/master/rt/rs/security/oauth-parent/oauth2/src/main/java/org/apache/cxf/rs/security/oauth2/common/Client.java", "idx": 713}
{"memberVariables": {"instance": "GSASentence", "EXAMPLE=\"$GPGSA,A,3,02,,,07,,09,24,26,,,,,1.6,1.6,1.0*3D\"": "String", "empty": "GSASentence"}, "code": ["void", "function", "(", ")", "{", "double", "vdop", "=", "instance", ".", "getVerticalDOP", "(", ")", ";", "assertEquals", "(", "1.0", ",", "vdop", ",", "0.001", ")", ";", "}"], "memberFunctions": {"testGetFixStatus": [["void"]], "testSetFixStatus": [["void"]], "testGetPositionDOP": [["void"]], "testGetSatelliteIds": [["void"]], "testConstructor": [["void"]], "testGetHorizontalDOP": [["void"]], "testSetPositionDOP": [["void"]], "testSetFaaMode": [["void"]], "testSetHorizontalDOP": [["void"]], "setUp": [["void"]], "testGetFaaMode": [["void"]], "testSetVerticalDOP": [["void"]], "testSetSatelliteIds": [["void"]]}, "className": "GSATest", "renamed": ["void", "function", "(", ")", "{", "double", "loc0", "=", "instance", ".", "getVerticalDOP", "(", ")", ";", "assertEquals", "(", "1.0", ",", "loc0", ",", "0.001", ")", ";", "}"], "nl": "Test method for {@link net.sf.marineapi.nmea.parser.GSAParser#getVerticalDOP()}.", "nlToks": ["Test", "method", "for", "-LCB-", "@link", "net.sf.marineapi.nmea.parser.GSAParser", "#getVerticalDOP", "-LRB-", "-RRB-", "-RCB-", "."], "path": "pkoziol/marine-api/tree/master/src/test/java/net/sf/marineapi/nmea/parser/GSATest.java", "idx": 714}
{"memberVariables": {"redirectUri": "String", "code": "String", "serialVersionUID=-3738825769770411453L": "long"}, "code": ["String", "function", "(", ")", "{", "return", "code", ";", "}"], "memberFunctions": {"setRedirectUri": [["void", "String redirectUri"]], "getType": [["String"]], "setCode": [["void", "String c"]], "toMap": [["MultivaluedMap<String,String>"]], "getRedirectUri": [["String"]]}, "className": "AuthorizationCodeGrant", "renamed": ["String", "function", "(", ")", "{", "return", "code", ";", "}"], "nl": "Gets the authorization code", "nlToks": ["Gets", "the", "authorization", "code"], "path": "primesign/cxf/tree/master/rt/rs/security/oauth-parent/oauth2/src/main/java/org/apache/cxf/rs/security/oauth2/grants/code/AuthorizationCodeGrant.java", "idx": 716}
{"memberVariables": {"time": "Time"}, "code": ["void", "function", "(", ")", "{", "time", ".", "setMinutes", "(", "30", ")", ";", "assertEquals", "(", "30", ",", "time", ".", "getMinutes", "(", ")", ")", ";", "}"], "memberFunctions": {"testDateRoundTrip": [["void"]], "testParseTimeWithOneDecimal": [["void"]], "testSetNegativeMinutes": [["void"]], "testFormatTimeWithOneDecimal": [["void"]], "testParseTimeWithoutDecimals": [["void"]], "testGetMinutes": [["void"]], "testParseTimeWithDecimals": [["void"]], "testSetInvalidSeconds": [["void"]], "testSetNegativeHour": [["void"]], "testToDate": [["void"]], "testGetSeconds": [["void"]], "testSetHour": [["void"]], "testGetHour": [["void"]], "testSetSeconds": [["void"]], "testSetTime": [["void"]], "testGetMilliseconds": [["void"]], "testSetInvalidHour": [["void"]], "testSetNegativeSeconds": [["void"]], "setUp": [["void"]], "testSetInvalidMinutes": [["void"]], "testFormatTimeNoDecimals": [["void"]], "testFormatTimeWithDecimals": [["void"]], "testEquals": [["void"]]}, "className": "TimeTest", "renamed": ["void", "function", "(", ")", "{", "time", ".", "setMinutes", "(", "30", ")", ";", "assertEquals", "(", "30", ",", "time", ".", "getMinutes", "(", ")", ")", ";", "}"], "nl": "Test method for  {@link net.sf.marineapi.nmea.util.Time#setMinutes(int)}.", "nlToks": ["Test", "method", "for", "-LCB-", "@link", "net.sf.marineapi.nmea.util.Time", "#setMinutes", "-LRB-", "int", "-RRB-", "-RCB-", "."], "path": "pkoziol/marine-api/tree/master/src/test/java/net/sf/marineapi/nmea/util/TimeTest.java", "idx": 718}
{"memberVariables": {"callbackHandler": "CallbackHandler", "LOG=LogUtils.getL7dLogger(SAMLRealm.class)": "Logger", "signatureCrypto": "Crypto", "signatureProperties": "SignatureProperties", "callbackHandlerClass": "String", "signaturePropertiesFile": "String", "signatureAlias": "String", "issuer": "String"}, "code": ["SignatureProperties", "function", "(", ")", "{", "return", "signatureProperties", ";", "}"], "memberFunctions": {"getIssuer": [["String"]], "getSignatureAlias": [["String"]], "setSignatureCrypto": [["void", "Crypto signatureCrypto"]], "setCallbackHandlerClass": [["void", "String callbackHandlerClass"]], "setIssuer": [["void", "String issuer"]], "getSignatureCrypto": [["Crypto"]], "getCallbackHandler": [["CallbackHandler"]], "setSignatureAlias": [["void", "String signatureAlias"]], "setSignaturePropertiesFile": [["void", "String signaturePropertiesFile"]], "setSignatureProperties": [["void", "SignatureProperties signatureProperties"]], "setCallbackHandler": [["void", "CallbackHandler callbackHandler"]]}, "className": "SAMLRealm", "renamed": ["SignatureProperties", "function", "(", ")", "{", "return", "signatureProperties", ";", "}"], "nl": "Get the SignatureProperties to use.", "nlToks": ["Get", "the", "SignatureProperties", "to", "use", "."], "path": "primesign/cxf/tree/master/services/sts/sts-core/src/main/java/org/apache/cxf/sts/token/realm/SAMLRealm.java", "idx": 719}
{"memberVariables": {"asMap": "Map<K,Long>", "map": "ConcurrentHashMap<K,Long>"}, "code": ["long", "function", "(", "K", "key", ",", "long", "x", ",", "LongBinaryOperator", "accumulatorFunction", ")", "{", "checkNotNull", "(", "accumulatorFunction", ")", ";", "return", "getAndUpdate", "(", "key", ",", "oldValue", "->", "accumulatorFunction", ".", "applyAsLong", "(", "oldValue", ",", "x", ")", ")", ";", "}"], "memberFunctions": {"getAndIncrement": [["long", "K key"]], "incrementAndGet": [["long", "K key"]], "createAsMap": [["Map<K,Long>"]], "asMap": [["Map<K,Long>"]], "removeIfZero": [["boolean", "K key"]], "replace": [["boolean", "K key", "long expectedOldValue", "long newValue"]], "decrementAndGet": [["long", "K key"]], "updateAndGet": [["long", "K key", "LongUnaryOperator updaterFunction"]], "sum": [["long"]], "put": [["long", "K key", "long newValue"]], "remove": [["long", "K key"], ["boolean", "K key", "long value"]], "removeAllZeros": [["void"]], "get": [["long", "K key"]], "putAll": [["void", "Map<? extends K,? extends Long> m"]], "create": [["AtomicLongMap<K>"], ["AtomicLongMap<K>", "Map<? extends K,? extends Long> m"]], "getAndAdd": [["long", "K key", "long delta"]], "accumulateAndGet": [["long", "K key", "long x", "LongBinaryOperator accumulatorFunction"]], "containsKey": [["boolean", "Object key"]], "isEmpty": [["boolean"]], "clear": [["void"]], "size": [["int"]], "addAndGet": [["long", "K key", "long delta"]], "toString": [["String"]], "getAndUpdate": [["long", "K key", "LongUnaryOperator updaterFunction"]], "getAndDecrement": [["long", "K key"]], "putIfAbsent": [["long", "K key", "long newValue"]]}, "className": "AtomicLongMap", "renamed": ["long", "function", "(", "K", "arg0", ",", "long", "arg1", ",", "LongBinaryOperator", "arg2", ")", "{", "checkNotNull", "(", "arg2", ")", ";", "return", "getAndUpdate", "(", "arg0", ",", "oldValue", "->", "arg2", ".", "applyAsLong", "(", "oldValue", ",", "arg1", ")", ")", ";", "}"], "nl": "Updates the value currently associated with  {@code key} by combining it with {@code x}via the specified accumulator function, returning the old value.  The previous value associated with  {@code key} (or zero, if there is none) is passed as the first argumentto  {@code accumulatorFunction}, and  {@code x} is passed as the second argument.", "nlToks": ["Updates", "the", "value", "currently", "associated", "with", "-LCB-", "@code", "key", "-RCB-", "by", "combining", "it", "with", "-LCB-", "@code", "x", "-RCB-", "via", "the", "specified", "accumulator", "function", ",", "returning", "the", "old", "value", ".", "The", "previous", "value", "associated", "with", "-LCB-", "@code", "key", "-RCB-", "-LRB-", "or", "zero", ",", "if", "there", "is", "none", "-RRB-", "is", "passed", "as", "the", "first", "argumentto", "-LCB-", "@code", "accumulatorFunction", "-RCB-", ",", "and", "-LCB-", "@code", "x", "-RCB-", "is", "passed", "as", "the", "second", "argument", "."], "path": "hazendaz/guava/tree/master/guava/src/com/google/common/util/concurrent/AtomicLongMap.java", "idx": 721}
{"memberVariables": {}, "code": ["void", "function", "(", "Object", "o", ")", "{", "}"], "memberFunctions": {}, "className": "AbstractUmlModelFactoryMDR", "renamed": ["void", "function", "(", "Object", "arg0", ")", "{", "}"], "nl": "Initialized some new modelelement o.", "nlToks": ["Initialized", "some", "new", "modelelement", "o."], "path": "pichiliani/CoArgoUML/tree/master/v0.24/fonte/src/argouml-core-model-mdr/src/org/argouml/model/mdr/AbstractUmlModelFactoryMDR.java", "idx": 723}
{"memberVariables": {"name": "String", "DESCRIPTORS": "Map", "desc": "String"}, "code": ["Method", "function", "(", "final", "String", "method", ")", "{", "return", "getMethod", "(", "method", ",", "false", ")", ";", "}"], "memberFunctions": {"getDescriptor": [["String"]], "getArgumentTypes": [["Type[]"]], "getName": [["String"]], "getReturnType": [["Type"]], "hashCode": [["int"]], "equals": [["boolean", "final Object o"]], "toString": [["String"]], "map": [["String", "final String type", "final boolean defaultPackage"]]}, "className": "Method", "renamed": ["Method", "function", "(", "final", "String", "arg0", ")", "{", "return", "getMethod", "(", "arg0", ",", "false", ")", ";", "}"], "nl": "Returns a  {@link Method} corresponding to the given Java methoddeclaration.", "nlToks": ["Returns", "a", "-LCB-", "@link", "Method", "-RCB-", "corresponding", "to", "the", "given", "Java", "methoddeclaration", "."], "path": "007slm/citrus/tree/master/common/generictype/src/main/java/com/alibaba/citrus/generictype/codegen/asm/Method.java", "idx": 724}
{"memberVariables": {"TAG_CONTENT_PRINT=\"%s:%s.%s:%d\"": "String", "sIsLogEnabled=true": "boolean", "sApplicationTag=\"Chen\"": "String"}, "code": ["void", "function", "(", "String", "string", ",", "Exception", "exception", ")", "{", "if", "(", "sIsLogEnabled", ")", "{", "Log", ".", "e", "(", "sApplicationTag", ",", "getContent", "(", "getCurrentStackTraceElement", "(", ")", ")", "+", "\" >\"", "+", "exception", ".", "getMessage", "(", ")", "+", "\" >\"", "+", "exception", ".", "getStackTrace", "(", ")", "+", "\"   \"", "+", "string", ")", ";", "exception", ".", "printStackTrace", "(", ")", ";", "}", "}"], "memberFunctions": {"getCurrentStackTraceElement": [["StackTraceElement"]], "getTagContentPrint": [["String"]], "d": [["void", "String tag", "String msg"], ["void", "String msg"], ["void", "String message", "Object... args"]], "getContent": [["String", "StackTraceElement trace"]], "i": [["void", "String tag", "String msg"], ["void", "String msg"]], "getsApplicationTag": [["String"]], "setsIsLogEnabled": [["void", "boolean sIsLogEnabled"]], "issIsLogEnabled": [["boolean"]], "trace": [["void"]], "v": [["void", "String msg"]], "w": [["void", "String tag", "String msg"], ["void", "String msg"]], "getContents": [["String", "StackTraceElement trace"]], "traceStack": [["void"], ["void", "String tag", "int priority"]], "setsApplicationTag": [["void", "String sApplicationTag"]]}, "className": "URLogs", "renamed": ["void", "function", "(", "String", "arg0", ",", "Exception", "arg1", ")", "{", "if", "(", "sIsLogEnabled", ")", "{", "Log", ".", "e", "(", "sApplicationTag", ",", "getContent", "(", "getCurrentStackTraceElement", "(", ")", ")", "+", "\"srini_string\"", "+", "arg1", ".", "getMessage", "(", ")", "+", "\"srini_string\"", "+", "arg1", ".", "getStackTrace", "(", ")", "+", "\"srini_string\"", "+", "arg0", ")", ";", "arg1", ".", "printStackTrace", "(", ")", ";", "}", "}"], "nl": "Send an ERROR log message.", "nlToks": ["Send", "an", "ERROR", "log", "message", "."], "path": "prashant31191/UltimateRecyclerView/tree/master/UltimateRecyclerView/ultimaterecyclerview/src/main/java/com/marshalchen/ultimaterecyclerview/URLogs.java", "idx": 725}
{"memberVariables": {"tagList": "OpenTagRegister", "elmId=0": "int"}, "code": ["void", "function", "(", ")", "{", "ASTElement", "elm", "=", "element", "(", "\"a\"", ")", ";", "ASTElement", "elm2", "=", "element", "(", "\"b\"", ")", ";", "tagList", ".", "openTag", "(", "elm", ")", ";", "tagList", ".", "openTag", "(", "elm2", ")", ";", "tagList", ".", "closeTag", "(", "elm", ")", ";", "assertFalse", "(", "elm", ".", "isUnclosed", "(", ")", ")", ";", "assertTrue", "(", "elm2", ".", "isUnclosed", "(", ")", ")", ";", "}"], "memberFunctions": {"openedIsolatedTag": [["void"]], "doubleNesting": [["void"]], "interleavedTags": [["void"]], "newRegister": [["void"]], "unopenedTags": [["void"]], "element": [["ASTElement", "String name"]]}, "className": "OpenTagRegisterTest", "renamed": ["void", "function", "(", ")", "{", "ASTElement", "loc0", "=", "element", "(", "\"srini_string\"", ")", ";", "ASTElement", "loc1", "=", "element", "(", "\"srini_string\"", ")", ";", "tagList", ".", "openTag", "(", "loc0", ")", ";", "tagList", ".", "openTag", "(", "loc1", ")", ";", "tagList", ".", "closeTag", "(", "loc0", ")", ";", "assertFalse", "(", "loc0", ".", "isUnclosed", "(", ")", ")", ";", "assertTrue", "(", "loc1", ".", "isUnclosed", "(", ")", ")", ";", "}"], "nl": "&lt;a&gt; &lt;b&gt; &lt;/a&gt;", "nlToks": ["<", "a", ">", "<", "b", ">", "<", "/", "a", ">"], "path": "adangel/pmd/tree/master/pmd-visualforce/src/test/java/net/sourceforge/pmd/lang/vf/ast/OpenTagRegisterTest.java", "idx": 727}
{"memberVariables": {"expDataUnitId": "BigDecimal", "dataUnitId": "BigDecimal", "createTimeStamp": "Timestamp", "actValue": "String", "errorCode": "String", "srcFileName": "String", "errorMsg": "String", "failedAttrib": "String", "expDataSetId": "BigDecimal", "regPclTestResult": "RegPCLTestResultEntity", "dataSetId": "BigDecimal", "id": "RegPCLTestResultDetailsEntityPK", "serialVersionUID=3309870439513279844L": "long", "expValue": "String"}, "code": ["void", "function", "(", "String", "srcFileName", ")", "{", "this", ".", "srcFileName", "=", "srcFileName", ";", "}"], "memberFunctions": {"updateCreateTimeStamp": [["void"]], "setActValue": [["void", "String actValue"]], "getDataSetId": [["BigDecimal"]], "getId": [["RegPCLTestResultDetailsEntityPK"]], "getRegPclTestResult": [["RegPCLTestResultEntity"]], "setExpValue": [["void", "String expValue"]], "getSrcFileName": [["String"]], "setErrorCode": [["void", "String errorCode"]], "getDataUnitId": [["BigDecimal"]], "setErrorMsg": [["void", "String errorMsg"]], "getErrorCode": [["String"]], "setDataUnitId": [["void", "BigDecimal dataUnitId"]], "setId": [["void", "RegPCLTestResultDetailsEntityPK id"]], "setFailedAttrib": [["void", "String failedAttrib"]], "getExpDataSetId": [["BigDecimal"]], "getErrorMsg": [["String"]], "getActValue": [["String"]], "setRegPclTestResult": [["void", "RegPCLTestResultEntity regPclTestResult"]], "getExpValue": [["String"]], "setCreateTimeStamp": [["void", "Timestamp createTimeStamp"]], "getExpDataUnitId": [["BigDecimal"]], "getCreateTimeStamp": [["Timestamp"]], "getFailedAttrib": [["String"]], "setExpDataSetId": [["void", "BigDecimal expDataSetId"]], "setDataSetId": [["void", "BigDecimal dataSetId"]], "setExpDataUnitId": [["void", "BigDecimal expDataUnitId"]]}, "className": "RegPCLTestResultDetailsEntity", "renamed": ["void", "function", "(", "String", "arg0", ")", "{", "this", ".", "srcFileName", "=", "arg0", ";", "}"], "nl": "Sets the src file name.", "nlToks": ["Sets", "the", "src", "file", "name", "."], "path": "pkesireddy/portico_fletcher/tree/master/FetcherTesterService/src/main/java/org/ithaka/cm/fetchertester/entity/RegPCLTestResultDetailsEntity.java", "idx": 728}
{"memberVariables": {"SINGLETON": "IConfigurationFactory", "handler=new ConfigurationProperties()": "ConfigurationHandler"}, "code": ["IConfigurationFactory", "function", "(", ")", "{", "return", "SINGLETON", ";", "}"], "memberFunctions": {"getConfigurationHandler": [["ConfigurationHandler"]]}, "className": "ConfigurationFactory", "renamed": ["IConfigurationFactory", "function", "(", ")", "{", "return", "SINGLETON", ";", "}"], "nl": "Returns the instance of the singleton.", "nlToks": ["Returns", "the", "instance", "of", "the", "singleton", "."], "path": "pichiliani/CoArgoUML/tree/master/v0.24/fonte/src/argouml-app/src/org/argouml/configuration/ConfigurationFactory.java", "idx": 729}
{"memberVariables": {"s1": "Scan", "s2": "Scan"}, "code": ["boolean", "function", "(", ")", "{", "if", "(", "s2", ".", "next", "(", ")", ")", "return", "true", ";", "else", "{", "s2", ".", "beforeFirst", "(", ")", ";", "return", "s2", ".", "next", "(", ")", "&&", "s1", ".", "next", "(", ")", ";", "}", "}"], "memberFunctions": {"getInt": [["int", "String fldname"]], "getVal": [["Constant", "String fldname"]], "beforeFirst": [["void"]], "getString": [["String", "String fldname"]], "close": [["void"]], "hasField": [["boolean", "String fldname"]]}, "className": "ProductScan", "renamed": ["boolean", "function", "(", ")", "{", "if", "(", "s2", ".", "next", "(", ")", ")", "return", "true", ";", "else", "{", "s2", ".", "beforeFirst", "(", ")", ";", "return", "s2", ".", "next", "(", ")", "&&", "s1", ".", "next", "(", ")", ";", "}", "}"], "nl": "Moves the scan to the next record. The method moves to the next RHS record, if possible. Otherwise, it moves to the next LHS record and the first RHS record. If there are no more LHS records, the method returns false.", "nlToks": ["Moves", "the", "scan", "to", "the", "next", "record", ".", "The", "method", "moves", "to", "the", "next", "RHS", "record", ",", "if", "possible", ".", "Otherwise", ",", "it", "moves", "to", "the", "next", "LHS", "record", "and", "the", "first", "RHS", "record", ".", "If", "there", "are", "no", "more", "LHS", "records", ",", "the", "method", "returns", "false", "."], "path": "prerit2803/DBMSProject2/tree/master/simpledb/query/ProductScan.java", "idx": 730}
{"memberVariables": {"serialVersionUID=-8499721149061103585L": "long", "value": "V", "key": "K"}, "code": ["V", "function", "(", ")", "{", "return", "value", ";", "}"], "memberFunctions": {"getKey": [["K"]], "hashCode": [["int"]], "setValue": [["V", "V value"]], "equals": [["boolean", "Object o"]], "toString": [["String"]], "eq": [["boolean", "Object o1", "Object o2"]]}, "className": "SimpleEntry", "renamed": ["V", "function", "(", ")", "{", "return", "value", ";", "}"], "nl": "Returns the value corresponding to this entry.", "nlToks": ["Returns", "the", "value", "corresponding", "to", "this", "entry", "."], "path": "adam-walker-2014/ftse/tree/master/nl.liacs.dbdm.ftse/src/main/java/nl/liacs/dbdm/ftse/ui/client/SimpleEntry.java", "idx": 732}
{"memberVariables": {"xPosition": "int", "dirArriba": "boolean", "canvas": "Canvas", "ySpeed=1": "int", "ballDegradation=2": "int", "color": "Color", "diameter": "int", "dirIzquierda": "boolean", "yPosition": "int", "groundPosition": "int", "GRAVITY=0": "int", "circle": "Ellipse2D.Double"}, "code": ["int", "function", "(", ")", "{", "return", "xPosition", ";", "}"], "memberFunctions": {"erase": [["void"]], "move": [["void"]], "draw": [["void"]], "getYPosition": [["int"]]}, "className": "BoxBall", "renamed": ["int", "function", "(", ")", "{", "return", "xPosition", ";", "}"], "nl": "return the horizontal position of this ball", "nlToks": ["return", "the", "horizontal", "position", "of", "this", "ball"], "path": "pizcogirl/100/tree/master/BoxBall.java", "idx": 733}
{"memberVariables": {"file": "File", "header": "TarHeader"}, "code": ["long", "function", "(", "byte", "[", "]", "buf", ")", "{", "long", "sum", "=", "0", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "buf", ".", "length", ";", "++", "i", ")", "{", "sum", "+=", "255", "&", "buf", "[", "i", "]", ";", "}", "return", "sum", ";", "}"], "memberFunctions": {"setName": [["void", "String name"]], "getName": [["String"]], "setGroupId": [["void", "int groupId"]], "isDescendent": [["boolean", "TarEntry desc"]], "getFile": [["File"]], "getGroupId": [["int"]], "getHeader": [["TarHeader"]], "getGroupName": [["String"]], "setGroupName": [["void", "String groupName"]], "getSize": [["long"]], "setSize": [["void", "long size"]], "setIds": [["void", "int userId", "int groupId"]], "setUserName": [["void", "String userName"]], "setModTime": [["void", "long time"], ["void", "Date time"]], "equals": [["boolean", "TarEntry it"]], "writeEntryHeader": [["void", "byte[] outbuf"]], "getUserName": [["String"]], "parseTarHeader": [["void", "byte[] bh"]], "extractTarHeader": [["void", "String entryName"]], "getUserId": [["int"]], "getModTime": [["Date"]], "isDirectory": [["boolean"]], "setUserId": [["void", "int userId"]]}, "className": "TarEntry", "renamed": ["long", "function", "(", "byte", "[", "]", "arg0", ")", "{", "long", "loc0", "=", "0", ";", "for", "(", "int", "loc1", "=", "0", ";", "loc1", "<", "arg0", ".", "length", ";", "++", "loc1", ")", "{", "loc0", "+=", "255", "&", "arg0", "[", "loc1", "]", ";", "}", "return", "loc0", ";", "}"], "nl": "Calculate checksum", "nlToks": ["Calculate", "checksum"], "path": "praveensubramaniam/android-quill/tree/master/src/org/xeustechnologies/jtar/TarEntry.java", "idx": 734}
{"memberVariables": {"m_listener": "WriteListener", "m_socketChannel": "SocketChannel", "m_selectorManager": "SelectorManager", "m_numQueued": "int", "m_buffers": "Collection", "m_totalBytes": "long", "m_closed": "boolean", "NO_OP_LISTENER=new NoOpWriteListener()": "WriteListener", "m_startTime": "long", "LOG=LoggerFactory.getLogger(WriteHandlerImpl.class)": "Logger", "m_writeBuffers=Collections.synchronizedList(new LinkedList())": "List"}, "code": ["void", "function", "(", "final", "Collection", "buffers", ")", "{", "if", "(", "CollectionUtils", ".", "exists", "(", "buffers", ",", "PredicateUtils", ".", "nullPredicate", "(", ")", ")", ")", "{", "throw", "new", "NullPointerException", "(", "\"Cannot accept null buffers\"", ")", ";", "}", "}"], "memberFunctions": {"getTotalBytes": [["long"]], "disableWriteLater": [["void"]], "onWrite": [["void", "final WriteData data"]], "writeLater": [["void", "final Collection buffers"], ["void", "final ByteBuffer buffer"], ["void", "final ByteBuffer buffer", "final WriteListener listener"]], "writeBuffer": [["boolean", "final ByteBuffer buffer"]], "enableWriteLater": [["void"]], "enableWrite": [["void"]], "getBuffers": [["Collection"]], "getStartTime": [["long"]], "write": [["void", "final ByteBuffer buffer", "final WriteListener listener"], ["void", "final ByteBuffer buffer"], ["void", "final Collection buffers"], ["boolean"]], "close": [["void"]], "getListener": [["WriteListener"]], "getNumQueued": [["int"]]}, "className": "WriteHandlerImpl", "renamed": ["void", "function", "(", "final", "Collection", "arg0", ")", "{", "if", "(", "CollectionUtils", ".", "exists", "(", "arg0", ",", "PredicateUtils", ".", "nullPredicate", "(", ")", ")", ")", "{", "throw", "new", "NullPointerException", "(", "\"srini_string\"", ")", ";", "}", "}"], "nl": "Utility method that throws a NullPointerException if  any of the buffers in the collection is null.", "nlToks": ["Utility", "method", "that", "throws", "a", "NullPointerException", "if", "any", "of", "the", "buffers", "in", "the", "collection", "is", "null", "."], "path": "adamfisk/littleshoot-client/tree/master/common/nio/src/main/java/org/lastbamboo/common/nio/WriteHandlerImpl.java", "idx": 735}
{"memberVariables": {"OFFSET=22": "long", "TEMP_UFS_FILE_ID=11": "long", "mBuffer=null": "ByteBuf", "LENGTH=33": "long"}, "code": ["void", "function", "(", ")", "{", "RPCFileReadRequest", "req", "=", "new", "RPCFileReadRequest", "(", "TEMP_UFS_FILE_ID", ",", "-", "1", ",", "LENGTH", ")", ";", "assertInvalid", "(", "req", ")", ";", "}"], "memberFunctions": {"encodedLength": [["void"]], "invalidLength": [["void"]], "assertInvalid": [["void", "RPCFileReadRequest req"]], "encodeDecode": [["void"]], "before": [["void"]], "validLength": [["void"]], "assertValid": [["void", "long tempUfsFileId", "long offset", "long length", "RPCFileReadRequest req"], ["void", "RPCFileReadRequest req"]], "validate": [["void"]]}, "className": "RPCFileReadRequestTest", "renamed": ["void", "function", "(", ")", "{", "RPCFileReadRequest", "loc0", "=", "new", "RPCFileReadRequest", "(", "TEMP_UFS_FILE_ID", ",", "-", "1", ",", "LENGTH", ")", ";", "assertInvalid", "(", "loc0", ")", ";", "}"], "nl": "Tests the  {@link RPCFileReadRequest#RPCFileReadRequest(long,long,long)} constructor with anegative offset.", "nlToks": ["Tests", "the", "-LCB-", "@link", "RPCFileReadRequest", "#RPCFileReadRequest", "-LRB-", "long", ",", "long", ",", "long", "-RRB-", "-RCB-", "constructor", "with", "anegative", "offset", "."], "path": "poemlin/alluxio/tree/master/core/server/src/test/java/alluxio/network/protocol/RPCFileReadRequestTest.java", "idx": 736}
{"memberVariables": {"tok": "StreamTokenizer", "keywords": "Collection<String>"}, "code": ["boolean", "function", "(", "char", "d", ")", "{", "return", "d", "==", "(", "char", ")", "tok", ".", "ttype", ";", "}"], "memberFunctions": {"matchIntConstant": [["boolean"]], "eatStringConstant": [["String"]], "eatDelim": [["void", "char d"]], "eatIntConstant": [["int"]], "matchKeyword": [["boolean", "String w"]], "nextToken": [["void"]], "initKeywords": [["void"]], "matchStringConstant": [["boolean"]], "eatKeyword": [["void", "String w"]], "matchId": [["boolean"]], "eatId": [["String"]]}, "className": "Lexer", "renamed": ["boolean", "function", "(", "char", "arg0", ")", "{", "return", "arg0", "==", "(", "char", ")", "tok", ".", "ttype", ";", "}"], "nl": "Returns true if the current token is the specified delimiter character.", "nlToks": ["Returns", "true", "if", "the", "current", "token", "is", "the", "specified", "delimiter", "character", "."], "path": "prerit2803/DBMSProject2/tree/master/simpledb/parse/Lexer.java", "idx": 737}
{"memberVariables": {}, "code": ["void", "function", "(", "boolean", "expression", ",", "String", "message", ")", "{", "if", "(", "!", "expression", ")", "{", "throw", "new", "IllegalArgumentException", "(", "message", ")", ";", "}", "}"], "memberFunctions": {"isAssignable": [["void", "Class<?> superType", "Class<?> subType"], ["void", "Class<?> superType", "Class<?> subType", "String message"]], "notNull": [["void", "Object object", "String message"], ["void", "Object object"]], "isNull": [["void", "Object object", "String message"], ["void", "Object object"]], "noNullElements": [["void", "Object[] array", "String message"], ["void", "Object[] array"]], "isInstanceOf": [["void", "Class<?> clazz", "Object obj"], ["void", "Class<?> type", "Object obj", "String message"]], "state": [["void", "boolean expression", "String message"], ["void", "boolean expression"]], "notEmpty": [["void", "Object[] array", "String message"], ["void", "Object[] array"], ["void", "Collection collection", "String message"], ["void", "Collection collection"], ["void", "Map map", "String message"], ["void", "Map map"]]}, "className": "Assert", "renamed": ["void", "function", "(", "boolean", "arg0", ",", "String", "arg1", ")", "{", "if", "(", "!", "arg0", ")", "{", "throw", "new", "IllegalArgumentException", "(", "arg1", ")", ";", "}", "}"], "nl": "Assert a boolean expression, throwing  {@code IllegalArgumentException}if the test result is  {@code false}. Assert.isTrue(i &gt; 0, \"The value must be greater than zero\");", "nlToks": ["Assert", "a", "boolean", "expression", ",", "throwing", "-LCB-", "@code", "IllegalArgumentException", "-RCB-", "if", "the", "test", "result", "is", "-LCB-", "@code", "false", "-RCB-", ".", "Assert.isTrue", "-LRB-", "i", ">", "0", ",", "``", "The", "value", "must", "be", "greater", "than", "zero", "''", "-RRB-", ";"], "path": "16ren/Android-Next/tree/master/bus/src/main/java/com/mcxiaoke/next/bus/support/Assert.java", "idx": 738}
{"memberVariables": {}, "code": ["void", "function", "(", ")", "{", "Whitebox", ".", "setInternalState", "(", "LoginUser", ".", "class", ",", "\"sLoginUser\"", ",", "(", "String", ")", "null", ")", ";", "}"], "memberFunctions": {}, "className": "LoginUserTestUtils", "renamed": ["void", "function", "(", ")", "{", "Whitebox", ".", "setInternalState", "(", "LoginUser", ".", "class", ",", "\"srini_string\"", ",", "(", "String", ")", "null", ")", ";", "}"], "nl": "Resets the singleton  {@link LoginUser} to null.", "nlToks": ["Resets", "the", "singleton", "-LCB-", "@link", "LoginUser", "-RCB-", "to", "null", "."], "path": "poemlin/alluxio/tree/master/core/common/src/test/java/alluxio/security/LoginUserTestUtils.java", "idx": 739}
{"memberVariables": {}, "code": ["List", "<", "T", ">", "function", "(", "List", "<", "T", ">", "l", ")", "{", "if", "(", "l", "!=", "null", ")", "return", "l", ";", "return", "Collections", ".", "emptyList", "(", ")", ";", "}"], "memberFunctions": {"add": [["List<T>", "List<T> l", "T o"]], "firstOrElse": [["T", "Collection<U> l", "V alt"]], "equals": [["boolean", "Collection<T> a", "Collection<U> b"]], "list": [["List<T>"], ["List<T>", "T o"], ["List<T>", "T o1", "T o2"], ["List<T>", "T o1", "T o2", "T o3"], ["List<T>", "T o1", "T o2", "T o3", "T o4"]], "map": [["List<U>", "List<T> l", "Transformation<T,U> t"]], "pairs": [["Iterator<Pair<T,T>>", "Collection<T> l"]]}, "className": "CollectionUtil", "renamed": ["List", "<", "T", ">", "function", "(", "List", "<", "T", ">", "arg0", ")", "{", "if", "(", "arg0", "!=", "null", ")", "return", "arg0", ";", "return", "Collections", ".", "emptyList", "(", ")", ";", "}"], "nl": "Return an empty non-null list if the argument list is null.", "nlToks": ["Return", "an", "empty", "non-null", "list", "if", "the", "argument", "list", "is", "null", "."], "path": "polyglot-compiler/polyglot/tree/master/src/polyglot/util/CollectionUtil.java", "idx": 740}
{"memberVariables": {}, "code": ["URI", "function", "(", "final", "URI", "uri", ",", "final", "HttpHost", "target", ")", "{", "return", "rewriteURI", "(", "uri", ",", "target", ",", "false", ")", ";", "}"], "memberFunctions": {"removeDotSegments": [["URI", "URI uri"]], "resolve": [["URI", "final URI baseURI", "final String reference"], ["URI", "final URI baseURI", "URI reference"]], "extractHost": [["HttpHost", "final URI uri"]], "createURI": [["URI", "final String scheme", "final String host", "int port", "final String path", "final String query", "final String fragment"]], "resolveReferenceStartingWithQueryString": [["URI", "final URI baseURI", "final URI reference"]], "normalizePath": [["String", "String path"]]}, "className": "URIUtils", "renamed": ["URI", "function", "(", "final", "URI", "arg0", ",", "final", "HttpHost", "arg1", ")", "{", "return", "rewriteURI", "(", "arg0", ",", "arg1", ",", "false", ")", ";", "}"], "nl": "A convenience method for {@link URIUtils#rewriteURI(URI,HttpHost,boolean)} that always keeps thefragment.", "nlToks": ["A", "convenience", "method", "for", "-LCB-", "@link", "URIUtils", "#rewriteURI", "-LRB-", "URI", ",", "HttpHost", ",", "boolean", "-RRB-", "-RCB-", "that", "always", "keeps", "thefragment", "."], "path": "pritamkhose/open-gpstracker.code/tree/master/external_sources/httpclient-4.1.1/httpclient/src/main/java/org/apache/ogt/http/client/utils/URIUtils.java", "idx": 741}
{"memberVariables": {"mActiveSprings=new CopyOnWriteArraySet<Spring>()": "Set<Spring>", "mIdle=true": "boolean", "mSpringLooper": "SpringLooper", "mListeners=new CopyOnWriteArraySet<SpringSystemListener>()": "CopyOnWriteArraySet<SpringSystemListener>", "mSpringRegistry=new HashMap<String,Spring>()": "Map<String,Spring>"}, "code": ["void", "function", "(", ")", "{", "mListeners", ".", "clear", "(", ")", ";", "}"], "memberFunctions": {"getAllSprings": [["List<Spring>"]], "getSpringById": [["Spring", "String id"]], "loop": [["void", "double elapsedMillis"]], "deregisterSpring": [["void", "Spring spring"]], "createSpring": [["Spring"]], "activateSpring": [["void", "String springId"]], "registerSpring": [["void", "Spring spring"]], "removeListener": [["void", "SpringSystemListener listenerToRemove"]], "getIsIdle": [["boolean"]], "advance": [["void", "double deltaTime"]], "addListener": [["void", "SpringSystemListener newListener"]]}, "className": "BaseSpringSystem", "renamed": ["void", "function", "(", ")", "{", "mListeners", ".", "clear", "(", ")", ";", "}"], "nl": "Remove all listeners.", "nlToks": ["Remove", "all", "listeners", "."], "path": "adilek/rebound/tree/master/rebound-core/src/main/java/com/facebook/rebound/BaseSpringSystem.java", "idx": 742}
{"memberVariables": {"runtime=null": "IJavascriptRuntime", "engine": "IWebEngine"}, "code": ["IJavascriptRuntime", "function", "(", ")", "{", "if", "(", "runtime", "==", "null", ")", "{", "runtime", "=", "new", "JavascriptRuntime", "(", ")", ";", "}", "return", "runtime", ";", "}"], "memberFunctions": {"getArrayFunction": [["String", "String function", "Object[] ary"]], "getFunction": [["String", "String variable", "String function", "Object... args"], ["String", "String function", "Object... args"]], "setDefaultWebEngine": [["void", "IWebEngine e"]], "getArrayConstructor": [["String", "String javascriptObjectType", "Object[] ary"]], "getArgString": [["String", "Object arg"]], "execute": [["JSObject", "String command"]], "getConstructor": [["String", "String javascriptObjectType", "Object... args"]]}, "className": "JavascriptRuntime", "renamed": ["IJavascriptRuntime", "function", "(", ")", "{", "if", "(", "runtime", "==", "null", ")", "{", "runtime", "=", "new", "JavascriptRuntime", "(", ")", ";", "}", "return", "runtime", ";", "}"], "nl": "Gets a singleton instance of this class, creating one if it doesn't yet exist.", "nlToks": ["Gets", "a", "singleton", "instance", "of", "this", "class", ",", "creating", "one", "if", "it", "does", "n't", "yet", "exist", "."], "path": "presly808/GMapsFx/tree/master/src/main/java/com/lynden/gmapsfx/javascript/JavascriptRuntime.java", "idx": 744}
{"memberVariables": {"settings": "IStoredSettings", "serverStatus": "ServerStatus", "logger=LoggerFactory.getLogger(getClass())": "Logger", "baseFolder": "File", "timezone": "TimeZone", "settingsModel": "ServerSettings"}, "code": ["Date", "function", "(", ")", "{", "return", "serverStatus", ".", "bootDate", ";", "}"], "memberFunctions": {"isServingRepositories": [["boolean"]], "isDebugMode": [["boolean"]], "getSettings": [["IStoredSettings"]], "start": [["RuntimeManager"]], "logTimezone": [["void", "String type", "TimeZone zone"]], "getFileOrFolder": [["File", "String key", "String defaultFileOrFolder"], ["File", "String fileOrFolder"]], "updateSettings": [["boolean", "Map<String,String> updatedSettings"]], "getStatus": [["ServerStatus"]], "getSettingsModel": [["ServerSettings"]], "setBaseFolder": [["void", "File folder"]], "stop": [["RuntimeManager"]], "getTimezone": [["TimeZone"]], "getBaseFolder": [["File"]]}, "className": "RuntimeManager", "renamed": ["Date", "function", "(", ")", "{", "return", "serverStatus", ".", "bootDate", ";", "}"], "nl": "Returns the boot date of the Gitblit server.", "nlToks": ["Returns", "the", "boot", "date", "of", "the", "Gitblit", "server", "."], "path": "pombreda/gitblit/tree/master/src/main/java/com/gitblit/manager/RuntimeManager.java", "idx": 747}
{"memberVariables": {"geneList": "String", "name": "String"}, "code": ["void", "function", "(", "String", "name", ")", "{", "this", ".", "name", "=", "name", ";", "}"], "memberFunctions": {"getName": [["String"]], "getGeneList": [["String"]], "getId": [["String"]], "setGeneList": [["void", "String geneList"]]}, "className": "GeneSet", "renamed": ["void", "function", "(", "String", "arg0", ")", "{", "this", ".", "name", "=", "arg0", ";", "}"], "nl": "Sets the name of the gene set.", "nlToks": ["Sets", "the", "name", "of", "the", "gene", "set", "."], "path": "adamabeshouse/cbioportal/tree/master/core/src/main/java/org/mskcc/cbio/portal/model/GeneSet.java", "idx": 749}
{"memberVariables": {"hdg": "HDGSentence", "EXAMPLE=\"$HCHDG,123.4,1.2,E,1.2,W\"": "String"}, "code": ["void", "function", "(", ")", "{", "assertEquals", "(", "-", "1.2", ",", "hdg", ".", "getVariation", "(", ")", ",", "0.1", ")", ";", "}"], "memberFunctions": {"testSetDeviationTooHigh": [["void"]], "testSetHeadingTooHigh": [["void"]], "testIsTrue": [["void"]], "testSetHeading": [["void"]], "testHDGParserTalkerId": [["void"]], "testSetVariationWest": [["void"]], "testConstructor": [["void"]], "testSetVariationTooLow": [["void"]], "testSetVariationTooHigh": [["void"]], "testSetVariationEast": [["void"]], "testGetDeviation": [["void"]], "testSetDeviationTooLow": [["void"]], "setUp": [["void"]], "testGetHeading": [["void"]], "testSetDeviationEast": [["void"]], "testHDGParserString": [["void"]], "testSetDeviationWest": [["void"]], "testSetHeadingTooLow": [["void"]]}, "className": "HDGTest", "renamed": ["void", "function", "(", ")", "{", "assertEquals", "(", "-", "1.2", ",", "hdg", ".", "getVariation", "(", ")", ",", "0.1", ")", ";", "}"], "nl": "Test method for {@link net.sf.marineapi.nmea.parser.HDGParser#getVariation()}.", "nlToks": ["Test", "method", "for", "-LCB-", "@link", "net.sf.marineapi.nmea.parser.HDGParser", "#getVariation", "-LRB-", "-RRB-", "-RCB-", "."], "path": "pkoziol/marine-api/tree/master/src/test/java/net/sf/marineapi/nmea/parser/HDGTest.java", "idx": 750}
{"memberVariables": {"log=LoggerFactory.getLogger(StoredPaymentChannelClientStates.class)": "Logger", "announcePeerGroup": "TransactionBroadcaster", "contract": "Transaction", "myKey": "ECKey", "channelTimeoutHandler=new Timer(true)": "Timer", "active=false": "boolean", "EXTENSION_ID=StoredPaymentChannelClientStates.class.getName()": "String", "containingWallet": "Wallet", "lock=Threading.lock(\"StoredPaymentChannelClientStates\")": "ReentrantLock", "valueToMe": "BigInteger", "refundFees": "BigInteger", "id": "Sha256Hash", "close": "Transaction", "mapChannels=HashMultimap.create()": "HashMultimap<Sha256Hash,StoredClientChannel>", "refund": "Transaction"}, "code": ["StoredPaymentChannelClientStates", "function", "(", "Wallet", "wallet", ")", "{", "return", "(", "StoredPaymentChannelClientStates", ")", "wallet", ".", "getExtensions", "(", ")", ".", "get", "(", "EXTENSION_ID", ")", ";", "}"], "memberFunctions": {"getSecondsUntilExpiry": [["long", "Sha256Hash id"]], "putChannel": [["void", "final StoredClientChannel channel"], ["void", "final StoredClientChannel channel", "boolean updateWallet"]], "removeChannel": [["void", "StoredClientChannel channel"]], "getChannel": [["StoredClientChannel", "Sha256Hash id", "Sha256Hash contractHash"]], "isWalletExtensionMandatory": [["boolean"]], "getBalanceForServer": [["BigInteger", "Sha256Hash id"]], "deserializeWalletExtension": [["void", "Wallet containingWallet", "byte[] data"]], "getWalletExtensionID": [["String"]], "getUsableChannelForServerID": [["StoredClientChannel", "Sha256Hash id"]], "serializeWalletExtension": [["byte[]"]], "toString": [["String"], ["String"]], "expiryTimeSeconds": [["long"]]}, "className": "StoredPaymentChannelClientStates", "renamed": ["StoredPaymentChannelClientStates", "function", "(", "Wallet", "arg0", ")", "{", "return", "(", "StoredPaymentChannelClientStates", ")", "arg0", ".", "getExtensions", "(", ")", ".", "get", "(", "EXTENSION_ID", ")", ";", "}"], "nl": "Returns this extension from the given wallet, or null if no such extension was added.", "nlToks": ["Returns", "this", "extension", "from", "the", "given", "wallet", ",", "or", "null", "if", "no", "such", "extension", "was", "added", "."], "path": "plncoin/plncoin-and/tree/master/plncoinj/core/src/main/java/com/google/bitcoin/protocols/channels/StoredPaymentChannelClientStates.java", "idx": 751}
{"memberVariables": {"OPENID_CACHE_MANAGER=\"OpenIDCacheManager\"": "String", "openidCacheName": "String"}, "code": ["void", "function", "(", ")", "{", "Cache", "<", "K", ",", "V", ">", "cache", "=", "getOpenIDCache", "(", ")", ";", "if", "(", "cache", "!=", "null", ")", "{", "cache", ".", "removeAll", "(", ")", ";", "}", "}"], "memberFunctions": {"addToCache": [["void", "K key", "V entry"]], "getOpenIDCache": [["Cache<K,V>"]], "getValueFromCache": [["V", "K key"]], "clearCacheEntry": [["void", "K key"]]}, "className": "OpenIDBaseCache", "renamed": ["void", "function", "(", ")", "{", "Cache", "<", "K", ",", "V", ">", "loc0", "=", "getOpenIDCache", "(", ")", ";", "if", "(", "loc0", "!=", "null", ")", "{", "loc0", ".", "removeAll", "(", ")", ";", "}", "}"], "nl": "Remove everything in the cache.", "nlToks": ["Remove", "everything", "in", "the", "cache", "."], "path": "harsha1979/carbon-identity/tree/master/components/openid/org.wso2.carbon.identity.provider/src/main/java/org/wso2/carbon/identity/provider/openid/cache/OpenIDBaseCache.java", "idx": 752}
{"memberVariables": {"secretKey": "String", "applicationDescription": "String", "preAuthorizedToken": "AccessToken", "callbackURI": "String", "loginName": "String", "applicationURI": "String", "logoUri": "String", "consumerKey": "String", "applicationName": "String"}, "code": ["void", "function", "(", "String", "name", ")", "{", "this", ".", "loginName", "=", "name", ";", "}"], "memberFunctions": {"getSecretKey": [["String"]], "getApplicationName": [["String"]], "setApplicationDescription": [["void", "String applicationDescription"]], "setApplicationName": [["void", "String applicationName"]], "setCallbackURI": [["void", "String callbackURI"]], "getApplicationDescription": [["String"]], "setApplicationURI": [["void", "String applicationURI"]], "setPreAuthorizedToken": [["void", "AccessToken preAuthorizedToken"]], "getApplicationURI": [["String"]], "getLoginName": [["String"]], "hashCode": [["int"]], "setLogoUri": [["void", "String logoPath"]], "equals": [["boolean", "Object o"]], "getCallbackURI": [["String"]], "getConsumerKey": [["String"]], "getPreAuthorizedToken": [["AccessToken"]], "getLogoUri": [["String"]]}, "className": "Client", "renamed": ["void", "function", "(", "String", "arg0", ")", "{", "this", ".", "loginName", "=", "arg0", ";", "}"], "nl": "Sets the optional login name", "nlToks": ["Sets", "the", "optional", "login", "name"], "path": "primesign/cxf/tree/master/rt/rs/security/oauth-parent/oauth/src/main/java/org/apache/cxf/rs/security/oauth/data/Client.java", "idx": 753}
{"memberVariables": {"instance": "Position"}, "code": ["void", "function", "(", ")", "{", "assertEquals", "(", "Datum", ".", "WGS84", ",", "instance", ".", "getDatum", "(", ")", ")", ";", "}"], "memberFunctions": {"testGetLatitude": [["void"]], "testSetIllegalLatitudeSouth": [["void"]], "testDistanceToSelf": [["void"]], "testSetIllegalLongitudeWest": [["void"]], "testSetLatitudeSouth": [["void"]], "testDistanceTo": [["void"]], "testSetIllegalLongitudeEast": [["void"]], "testToWaypoint": [["void"]], "testSetLongitudeEast": [["void"]], "setUp": [["void"]], "testGetLongitude": [["void"]], "testSetLongitudeWest": [["void"]], "testGetLatitudeHemisphere": [["void"]], "testSetLatitudeNorth": [["void"]], "testGetLongitudeHemisphere": [["void"]], "testSetIllegalLatitudeNorth": [["void"]]}, "className": "PositionTest", "renamed": ["void", "function", "(", ")", "{", "assertEquals", "(", "Datum", ".", "WGS84", ",", "instance", ".", "getDatum", "(", ")", ")", ";", "}"], "nl": "Test for getDatum()", "nlToks": ["Test", "for", "getDatum", "-LRB-", "-RRB-"], "path": "pkoziol/marine-api/tree/master/src/test/java/net/sf/marineapi/nmea/util/PositionTest.java", "idx": 754}
{"memberVariables": {"PWD=new File(\".\")": "File", "parameters=new HashMap<String,Object>()": "Map<String,Object>", "transformation": "Transformation"}, "code": ["void", "function", "(", "Source", "source", ")", "{", "if", "(", "source", "!=", "null", "&&", "(", "source", ".", "getSystemId", "(", ")", "==", "null", "||", "source", ".", "getSystemId", "(", ")", ".", "length", "(", ")", "==", "0", ")", ")", "{", "source", ".", "setSystemId", "(", "getDefaultSystemId", "(", ")", ")", ";", "}", "}"], "memberFunctions": {"withExceptionHandling": [["R", "Trans<R> trans"]], "setOutputProperties": [["void", "Properties outputProperties"]], "transform": [["R"]], "transformTo": [["void", "final Result result"]], "getDefaultSystemId": [["String"]], "setParameter": [["void", "String name", "Object value"]], "setErrorListener": [["void", "ErrorListener errorListener"]], "setOutputProperty": [["void", "String name", "String value"]], "clearParameters": [["void"]], "getResultDocument": [["Document"]], "getResultString": [["String"]], "setURIResolver": [["void", "URIResolver uriResolver"]], "getParameter": [["Object", "String name"]]}, "className": "Transform", "renamed": ["void", "function", "(", "Source", "arg0", ")", "{", "if", "(", "arg0", "!=", "null", "&&", "(", "arg0", ".", "getSystemId", "(", ")", "==", "null", "||", "arg0", ".", "getSystemId", "(", ")", ".", "length", "(", ")", "==", "0", ")", ")", "{", "arg0", ".", "setSystemId", "(", "getDefaultSystemId", "(", ")", ")", ";", "}", "}"], "nl": "Ensure that the source has a systemId", "nlToks": ["Ensure", "that", "the", "source", "has", "a", "systemId"], "path": "phbenisc/xmlunit/tree/master/xmlunit-legacy/src/main/java/org/custommonkey/xmlunit/Transform.java", "idx": 757}
{"memberVariables": {"mClassifier": "Object", "namespace": "Object", "newFeatures": "List", "newInnerClasses": "List"}, "code": ["List", "function", "(", ")", "{", "return", "newFeatures", ";", "}"], "memberFunctions": {"newFeature": [["void", "Object mFeature"]], "getAssociationEnds": [["Vector"]], "getNamespace": [["Object"]], "getAssociationEndsList": [["List"]], "getNewInnerClassesList": [["List"]], "getNewInnerClasses": [["Vector"]], "newClassifier": [["Object", "String name"]], "getNewFeatures": [["Vector"]], "getClassifier": [["Object"]]}, "className": "ParseState", "renamed": ["List", "function", "(", ")", "{", "return", "newFeatures", ";", "}"], "nl": "Get all features not in the source.", "nlToks": ["Get", "all", "features", "not", "in", "the", "source", "."], "path": "pichiliani/CoArgoUML/tree/master/v0.24/fonte/src/argouml-app/src/org/argouml/language/java/generator/ParseState.java", "idx": 758}
{"memberVariables": {"dao": "OpenIDRememberMeTokenDAO", "log=LogFactory.getLog(OpenIDRememberMeTokenManager.class)": "Log", "cache=OpenIDRememberMeTokenCache.getCacheInstance()": "OpenIDRememberMeTokenCache"}, "code": ["void", "function", "(", "final", "OpenIDRememberMeDO", "rememberMe", ")", "{", "cache", ".", "updateTokenData", "(", "rememberMe", ")", ";", "Thread", "thread", "=", "new", "Thread", "(", ")", "{", "@", "Override", "public", "void", "run", "(", ")", "{", "try", "{", "dao", ".", "updateTokenData", "(", "rememberMe", ")", ";", "}", "catch", "(", "Exception", "e", ")", "{", "log", ".", "error", "(", "\"Failed to update RememberMe token.\"", ",", "e", ")", ";", "}", "}", "}", ";", "thread", ".", "start", "(", ")", ";", "}"], "memberFunctions": {"getToken": [["String", "OpenIDRememberMeDO rememberMe"]], "isExpired": [["boolean", "OpenIDRememberMeDO storedDo"]]}, "className": "OpenIDRememberMeTokenManager", "renamed": ["void", "function", "(", "final", "OpenIDRememberMeDO", "arg0", ")", "{", "cache", ".", "updateTokenData", "(", "arg0", ")", ";", "Thread", "loc0", "=", "new", "Thread", "(", ")", "{", "@", "Override", "public", "void", "run", "(", ")", "{", "try", "{", "dao", ".", "updateTokenData", "(", "arg0", ")", ";", "}", "catch", "(", "Exception", "e", ")", "{", "log", ".", "error", "(", "\"srini_string\"", ",", "e", ")", ";", "}", "}", "}", ";", "loc0", ".", "start", "(", ")", ";", "}"], "nl": "Updates the rememberMe token", "nlToks": ["Updates", "the", "rememberMe", "token"], "path": "hasinthaindrajee/identity-inbound-auth-openid/tree/master/components/org.wso2.carbon.identity.provider/src/main/java/org/wso2/carbon/identity/provider/openid/OpenIDRememberMeTokenManager.java", "idx": 759}
{"memberVariables": {"run=false": "boolean", "serverSockets=new ArrayList<ServerSocket>()": "ArrayList<ServerSocket>", "savePath=\"\"": "String", "disconnectedOnPurpose=false": "boolean", "serverSocket": "ServerSocket", "dataBufSize=1024 * 60": "int", "eventBufSize=10 * 60": "int", "monitor=null": "FieldtripBufferMonitor", "nextClientID=0": "int", "eventBufSize": "int", "serverPort": "int", "portNumber": "int", "dataBufSize": "int", "serverPort=1972": "int", "threads=new ArrayList<ConnectionThread>()": "ArrayList<ConnectionThread>", "dataStore": "DataModel", "logging": "int", "buffer": "BufferServer"}, "code": ["void", "function", "(", ")", "{", "serverSocket", ".", "close", "(", ")", ";", "}"], "memberFunctions": {"flushEvents": [["void"]], "Start": [["void"], ["void", "int serverPort"], ["void", "int serverPort", "int dataBufSize"], ["void", "int serverPort", "int dataBufSize", "int eventBufSize"], ["void", "int serverPort", "int dataBufSize", "int eventBufSize", "java.io.File file"], ["void", "int serverPort", "int dataBufSize", "int eventBufSize", "String path"]], "usage": [["void"]], "listAllServerSockets": [["void"]], "BufferServerStart": [["void", "int serverPort", "int dataBufSize", "int eventBufSize", "String path", "int verbosityLevel"]], "run": [["void"], ["void"]], "flushSamples": [["void"]], "removeConnection": [["void", "final ConnectionThread connection"]], "cleanup": [["void"]], "addMonitor": [["void", "final FieldtripBufferMonitor monitor"]], "removeAllServerSockets": [["void"]], "putHeader": [["boolean", "final int nChans", "final float fSample", "final int dataType"]], "flushHeader": [["void"]], "stopBuffer": [["void"]]}, "className": "BufferServer", "renamed": ["void", "function", "(", ")", "{", "serverSocket", ".", "close", "(", ")", ";", "}"], "nl": "Attempts to close the current serverSocket.", "nlToks": ["Attempts", "to", "close", "the", "current", "serverSocket", "."], "path": "phpvdb/buffer_bci/tree/master/dataAcq/buffer/java/nl/fcdonders/fieldtrip/bufferserver/BufferServer.java", "idx": 761}
{"memberVariables": {"volume": "int", "occupancy": "double", "measurement_date": "Timestamp", "lane_id": "int", "id": "long", "speed": "double", "quality": "int"}, "code": ["void", "function", "(", "int", "lane_id", ")", "{", "this", ".", "lane_id", "=", "lane_id", ";", "}"], "memberFunctions": {"getOccupancy": [["double"]], "setOccupancy": [["void", "double occupancy"]], "getMeasurement_date": [["Timestamp"]], "getLane_id": [["int"]], "getId": [["long"]], "setVolume": [["void", "int volume"]], "setSpeed": [["void", "double speed"]], "getVolume": [["int"]], "setQuality": [["void", "int quality"]], "getQuality": [["int"]], "getSpeed": [["double"]], "setMeasurement_date": [["void", "Timestamp measurement_date"]], "setId": [["void", "long id"]], "toString": [["String"]]}, "className": "LaneData", "renamed": ["void", "function", "(", "int", "arg0", ")", "{", "this", ".", "lane_id", "=", "arg0", ";", "}"], "nl": "Sets the lane_id.", "nlToks": ["Sets", "the", "lane_id", "."], "path": "pfontana3w2/DataScienceProject/tree/master/TrafficVolumePrediction_0.5/src/gov/nist/dataeval/db/bean/LaneData.java", "idx": 762}
{"memberVariables": {"boundingBox": "BoundingBox", "nodes": "Hashtable<Long,MapNode>", "ways": "Hashtable<Long,MapWay>", "listeners": "ArrayList<MapEventListener>", "nextTrackId": "long", "entityClassifier": "EntityClassifier<EntityViewInfo>", "entityTree": "KDTree", "LOG=Logger.getLogger(\"aimax.osm\")": "Logger", "markers": "ArrayList<MapNode>", "pois": "ArrayList<MapNode>", "tracks": "ArrayList<Track>"}, "code": ["void", "function", "(", "DefaultMapNode", "node", ")", "{", "nodes", ".", "put", "(", "node", ".", "getId", "(", ")", ",", "node", ")", ";", "}"], "memberFunctions": {"visitEntities": [["void", "EntityVisitor visitor", "BoundingBox vbox", "float scale"]], "getTracks": [["List<Track>"]], "getWayNodes": [["List<MapNode>", "MapWay way", "float scale"]], "getStatistics": [["Object[][]"]], "getNearestWayNode": [["MapNode", "Position pos", "MapWayFilter filter"]], "setBoundingBox": [["void", "BoundingBox bb"]], "removeMarker": [["void", "MapNode marker"]], "clearTrack": [["void", "String trackName"]], "getVisibleMarkersAndTracks": [["List<MapEntity>", "float scale"]], "getEntityTree": [["KDTree"]], "fireMapDataEvent": [["void", "MapEvent event"]], "getBoundingBox": [["BoundingBox"]], "clearMarkersAndTracks": [["void"]], "getMarkers": [["List<MapNode>"]], "getNodeCount": [["int"]], "compile": [["void"]], "getPlaces": [["List<MapNode>", "String name"]], "createTrack": [["void", "String trackName", "List<Position> positions"]], "getPoiCount": [["int"]], "getWays": [["Collection<MapWay>", "BoundingBox bb"]], "getPois": [["List<MapNode>", "BoundingBox bb"]], "close": [["void"]], "addToTrack": [["void", "String trackName", "Position pos"]], "getTrack": [["Track", "long trackId"], ["Track", "String trackName"]], "clear": [["void"]], "isEmpty": [["boolean"]], "setEntityClassifier": [["void", "EntityClassifier<EntityViewInfo> classifier"]], "addMapDataEventListener": [["void", "MapEventListener listener"]], "applyClassifierAndUpdateTree": [["void", "BoundingBox bb"]], "getEntityFinder": [["EntityFinder"]], "removeMapDataEventListener": [["void", "MapEventListener listener"]], "getWay": [["MapWay", "long id"]], "getBuilder": [["MapBuilder"]], "getWayCount": [["int"]], "addWay": [["void", "DefaultMapWay way"]], "getNode": [["MapNode", "long id"]], "updateEntityViewInfo": [["void", "MapEntity entity", "boolean addToTree"]], "addMarker": [["MapNode", "float lat", "float lon"]]}, "className": "DefaultMap", "renamed": ["void", "function", "(", "DefaultMapNode", "arg0", ")", "{", "nodes", ".", "put", "(", "arg0", ".", "getId", "(", ")", ",", "arg0", ")", ";", "}"], "nl": "Adds a node to the central node hashtable.", "nlToks": ["Adds", "a", "node", "to", "the", "central", "node", "hashtable", "."], "path": "peterplupo/ia201102/tree/master/trabalho1/aimax-osm/src/main/java/aimax/osm/data/impl/DefaultMap.java", "idx": 763}
{"memberVariables": {"logger=Logger.getLogger(RebaseControl.class)": "Logger", "mergingControl=null": "MergingControl", "differenceGraphModel=null": "String", "commitModel": "CommitModel", "patchGroup=new PatchGroup(null,null)": "PatchGroup", "differenceModel=new DifferenceModel()": "DifferenceModel"}, "code": ["CommitModel", "function", "(", ")", "{", "return", "commitModel", ";", "}"], "memberFunctions": {"getRebaseReportView": [["String", "String graphName"]], "manualRebaseProcess": [["void"]], "getManualAddedTriplesAndRemovedTriples": [["ArrayList<String>"]], "createPatchGroupOfBranch": [["void", "String revisionGraph", "String basisRevisionUri", "LinkedList<String> revisionList"]], "getAutomaticAddedTriplesAndRemovedTriples": [["ArrayList<String>"]], "createCommitModel": [["void", "String graphName", "String sddName", "String user", "String message", "String branch1", "String branch2", "String strategy", "String type"]], "updateRebaseDifferenceModel": [["void", "DifferenceModel updatedDifferenceModel"]], "showRebaseDialogView": [["String"]], "createCommonManualRebaseProcess": [["void"]], "forceRebaseProcess": [["String", "String graphName"]]}, "className": "RebaseControl", "renamed": ["CommitModel", "function", "(", ")", "{", "return", "commitModel", ";", "}"], "nl": "save the commit information and later output it", "nlToks": ["save", "the", "commit", "information", "and", "later", "output", "it"], "path": "plt-tud/r43ples/tree/master/src/main/java/de/tud/plt/r43ples/merging/control/RebaseControl.java", "idx": 764}
{"memberVariables": {}, "code": ["void", "function", "(", ")", "{", "char", "value", "=", "RequestInput", ".", "getChar", "(", "\"What are you entering? \"", ")", ";", "System", ".", "out", ".", "println", "(", "\"The lucky number was \"", "+", "value", ")", ";", "}"], "memberFunctions": {"testAddStringElement": [["void"]], "testGetString": [["void"]], "testGetCharStringCharArray": [["void"]], "testGetDouble": [["void"]], "testGetBoolean": [["void"]], "testGetIntStringIntInt": [["void"]], "testGetIntString": [["void"]]}, "className": "RequestInputTest", "renamed": ["void", "function", "(", ")", "{", "char", "loc0", "=", "RequestInput", ".", "getChar", "(", "\"srini_string\"", ")", ";", "System", ".", "out", ".", "println", "(", "\"srini_string\"", "+", "loc0", ")", ";", "}"], "nl": "Test method for {@link com.sqa.em.util.helper.RequestInput#getChar(java.lang.String)}.", "nlToks": ["Test", "method", "for", "-LCB-", "@link", "com.sqa.em.util.helper.RequestInput", "#getChar", "-LRB-", "java.lang.String", "-RRB-", "-RCB-", "."], "path": "100101Ed/mavne-play/tree/master/src/test/java/com/sqa/em/RequestInputTest.java", "idx": 768}
{"memberVariables": {"URL_SAVED=\"configuration.save.url\"": "String", "FILE_SAVED=\"configuration.save.file\"": "String", "URL_LOADED=\"configuration.load.url\"": "String", "config=getFactory().getConfigurationHandler()": "ConfigurationHandler", "FILE_LOADED=\"configuration.load.file\"": "String"}, "code": ["boolean", "function", "(", "File", "file", ")", "{", "return", "config", ".", "load", "(", "file", ")", ";", "}"], "memberFunctions": {"save": [["boolean"], ["boolean", "boolean force"]], "setInteger": [["void", "ConfigurationKey key", "int newValue"]], "getDouble": [["double", "ConfigurationKey key", "double defaultValue"], ["double", "ConfigurationKey key"]], "getInteger": [["int", "ConfigurationKey key"], ["int", "ConfigurationKey key", "int defaultValue"]], "getString": [["String", "ConfigurationKey key"], ["String", "ConfigurationKey key", "String defaultValue"]], "removeListener": [["void", "PropertyChangeListener pcl"], ["void", "ConfigurationKey key", "PropertyChangeListener pcl"]], "getFactory": [["IConfigurationFactory"]], "setDouble": [["void", "ConfigurationKey key", "double newValue"]], "makeKey": [["ConfigurationKey", "String k1"], ["ConfigurationKey", "ConfigurationKey ck", "String k1"], ["ConfigurationKey", "String k1", "String k2"], ["ConfigurationKey", "String k1", "String k2", "String k3"], ["ConfigurationKey", "String k1", "String k2", "String k3", "String k4"], ["ConfigurationKey", "String k1", "String k2", "String k3", "String k4", "String k5"]], "setString": [["void", "ConfigurationKey key", "String newValue"]], "removeKey": [["void", "ConfigurationKey key"]], "getConfigurationHandler": [["ConfigurationHandler"]], "getBoolean": [["boolean", "ConfigurationKey key"], ["boolean", "ConfigurationKey key", "boolean defaultValue"]], "setBoolean": [["void", "ConfigurationKey key", "boolean newValue"]], "addListener": [["void", "PropertyChangeListener pcl"], ["void", "ConfigurationKey key", "PropertyChangeListener pcl"]]}, "className": "Configuration", "renamed": ["boolean", "function", "(", "File", "arg0", ")", "{", "return", "config", ".", "load", "(", "arg0", ")", ";", "}"], "nl": "Load the configuration from a specified file.", "nlToks": ["Load", "the", "configuration", "from", "a", "specified", "file", "."], "path": "pichiliani/CoArgoUML/tree/master/v0.24/fonte/src/argouml-app/src/org/argouml/configuration/Configuration.java", "idx": 769}
{"memberVariables": {"conduitSelector": "ConduitSelector", "requestContext=new HashMap<String,Object>()": "Map<String,Object>", "bus": "Bus", "inInterceptors=new ModCountCopyOnWriteArrayList<Interceptor<? extends Message>>()": "List<Interceptor<? extends Message>>", "synchronousTimeout=60000": "long", "outInterceptors=new ModCountCopyOnWriteArrayList<Interceptor<? extends Message>>()": "List<Interceptor<? extends Message>>", "LOG=LogUtils.getL7dLogger(ClientConfiguration.class)": "Logger", "inFault=new ModCountCopyOnWriteArrayList<Interceptor<? extends Message>>()": "List<Interceptor<? extends Message>>", "responseContext=new HashMap<String,Object>()": "Map<String,Object>", "outFault=new ModCountCopyOnWriteArrayList<Interceptor<? extends Message>>()": "List<Interceptor<? extends Message>>"}, "code": ["void", "function", "(", "List", "<", "Interceptor", "<", "?", "extends", "Message", ">>", "interceptors", ")", "{", "inInterceptors", "=", "interceptors", ";", "}"], "memberFunctions": {"getBus": [["Bus"]], "getOutFaultInterceptors": [["List<Interceptor<? extends Message>>"]], "getEndpoint": [["Endpoint"]], "getSynchronousTimeout": [["long"]], "setConduitSelector": [["void", "ConduitSelector cs"]], "setOutInterceptors": [["void", "List<Interceptor<? extends Message>> interceptors"]], "getInInterceptors": [["List<Interceptor<? extends Message>>"]], "getResponseContext": [["Map<String,Object>"]], "isResponseExpectedForOneway": [["boolean"]], "setOutFaultInterceptors": [["void", "List<Interceptor<? extends Message>> interceptors"]], "getHttpConduit": [["HTTPConduit"]], "getConduit": [["Conduit"]], "setSynchronousTimeout": [["void", "long synchronousTimeout"]], "getConduitSelector": [["ConduitSelector"]], "getInFaultInterceptors": [["List<Interceptor<? extends Message>>"]], "getOutInterceptors": [["List<Interceptor<? extends Message>>"]], "getRequestContext": [["Map<String,Object>"]], "setInFaultInterceptors": [["void", "List<Interceptor<? extends Message>> interceptors"]], "setBus": [["void", "Bus bus"]], "prepareConduitSelector": [["void", "Message message"]]}, "className": "ClientConfiguration", "renamed": ["void", "function", "(", "List", "<", "Interceptor", "<", "?", "extends", "Message", ">>", "arg0", ")", "{", "inInterceptors", "=", "arg0", ";", "}"], "nl": "Sets the list of in interceptors which pre-process  the responses from remote services.", "nlToks": ["Sets", "the", "list", "of", "in", "interceptors", "which", "pre-process", "the", "responses", "from", "remote", "services", "."], "path": "primesign/cxf/tree/master/rt/rs/client/src/main/java/org/apache/cxf/jaxrs/client/ClientConfiguration.java", "idx": 770}
{"memberVariables": {"URL_SAVED=\"configuration.save.url\"": "String", "FILE_SAVED=\"configuration.save.file\"": "String", "URL_LOADED=\"configuration.load.url\"": "String", "config=getFactory().getConfigurationHandler()": "ConfigurationHandler", "FILE_LOADED=\"configuration.load.file\"": "String"}, "code": ["void", "function", "(", "ConfigurationKey", "key", ",", "boolean", "newValue", ")", "{", "config", ".", "setBoolean", "(", "key", ",", "newValue", ")", ";", "}"], "memberFunctions": {"save": [["boolean"], ["boolean", "boolean force"]], "setInteger": [["void", "ConfigurationKey key", "int newValue"]], "getDouble": [["double", "ConfigurationKey key", "double defaultValue"], ["double", "ConfigurationKey key"]], "getInteger": [["int", "ConfigurationKey key"], ["int", "ConfigurationKey key", "int defaultValue"]], "getString": [["String", "ConfigurationKey key"], ["String", "ConfigurationKey key", "String defaultValue"]], "removeListener": [["void", "PropertyChangeListener pcl"], ["void", "ConfigurationKey key", "PropertyChangeListener pcl"]], "getFactory": [["IConfigurationFactory"]], "setDouble": [["void", "ConfigurationKey key", "double newValue"]], "makeKey": [["ConfigurationKey", "String k1"], ["ConfigurationKey", "ConfigurationKey ck", "String k1"], ["ConfigurationKey", "String k1", "String k2"], ["ConfigurationKey", "String k1", "String k2", "String k3"], ["ConfigurationKey", "String k1", "String k2", "String k3", "String k4"], ["ConfigurationKey", "String k1", "String k2", "String k3", "String k4", "String k5"]], "setString": [["void", "ConfigurationKey key", "String newValue"]], "load": [["boolean"], ["boolean", "File file"], ["boolean", "URL url"]], "removeKey": [["void", "ConfigurationKey key"]], "getConfigurationHandler": [["ConfigurationHandler"]], "getBoolean": [["boolean", "ConfigurationKey key"], ["boolean", "ConfigurationKey key", "boolean defaultValue"]], "addListener": [["void", "PropertyChangeListener pcl"], ["void", "ConfigurationKey key", "PropertyChangeListener pcl"]]}, "className": "Configuration", "renamed": ["void", "function", "(", "ConfigurationKey", "arg0", ",", "boolean", "arg1", ")", "{", "config", ".", "setBoolean", "(", "arg0", ",", "arg1", ")", ";", "}"], "nl": "Sets the boolean value of a configuration property.", "nlToks": ["Sets", "the", "boolean", "value", "of", "a", "configuration", "property", "."], "path": "pichiliani/CoArgoUML/tree/master/v0.24/fonte/src/argouml-app/src/org/argouml/configuration/Configuration.java", "idx": 771}
{"memberVariables": {"mCert": "X509Certificate", "mAlias": "String", "mSubjectSecondary=\"\"": "String", "mSubjectPrimary": "String", "mString": "String"}, "code": ["String", "function", "(", ")", "{", "return", "mSubjectSecondary", ";", "}"], "memberFunctions": {"getSubjectPrimary": [["String"]], "getCertificate": [["X509Certificate"]], "getSubjectAltNames": [["List<String>"]], "toString": [["String"]], "compareTo": [["int", "TrustedCertificateEntry another"]], "getAlias": [["String"]]}, "className": "TrustedCertificateEntry", "renamed": ["String", "function", "(", ")", "{", "return", "mSubjectSecondary", ";", "}"], "nl": "Get the secondary subject of this certificate (either CN or OU if primary subject is O, empty otherwise)", "nlToks": ["Get", "the", "secondary", "subject", "of", "this", "certificate", "-LRB-", "either", "CN", "or", "OU", "if", "primary", "subject", "is", "O", ",", "empty", "otherwise", "-RRB-"], "path": "prathyks/strongswan/tree/master/src/frontends/android/app/src/main/java/org/strongswan/android/security/TrustedCertificateEntry.java", "idx": 772}
{"memberVariables": {"source": "Object", "event": "Object"}, "code": ["Object", "function", "(", ")", "{", "return", "source", ";", "}"], "memberFunctions": {"getEvent": [["Object"]], "toString": [["String"]]}, "className": "DeadEvent", "renamed": ["Object", "function", "(", ")", "{", "return", "source", ";", "}"], "nl": "Returns the object that originated this event (not the object that originated the wrapped event). This is generally an  {@link EventBus}.", "nlToks": ["Returns", "the", "object", "that", "originated", "this", "event", "-LRB-", "not", "the", "object", "that", "originated", "the", "wrapped", "event", "-RRB-", ".", "This", "is", "generally", "an", "-LCB-", "@link", "EventBus", "-RCB-", "."], "path": "hazendaz/guava/tree/master/guava/src/com/google/common/eventbus/DeadEvent.java", "idx": 773}
{"memberVariables": {}, "code": ["void", "function", "(", "DAVTransaction", "transaction", ",", "DAVResource", "resource", ")", "{", "try", "{", "resource", ".", "delete", "(", ")", ";", "transaction", ".", "setStatus", "(", "204", ")", ";", "}", "catch", "(", "DAVMultiStatus", "multistatus", ")", "{", "multistatus", ".", "write", "(", "transaction", ")", ";", "}", "}"], "memberFunctions": {}, "className": "DELETE", "renamed": ["void", "function", "(", "DAVTransaction", "arg0", ",", "DAVResource", "arg1", ")", "{", "try", "{", "arg1", ".", "delete", "(", ")", ";", "arg0", ".", "setStatus", "(", "204", ")", ";", "}", "catch", "(", "DAVMultiStatus", "loc0", ")", "{", "loc0", ".", "write", "(", "arg0", ")", ";", "}", "}"], "nl": "Process the DELETE method.", "nlToks": ["Process", "the", "DELETE", "method", "."], "path": "pfumagalli/webdav/tree/master/src/main/java/it/could/webdav/methods/DELETE.java", "idx": 774}
{"memberVariables": {"passiveAuth": "boolean", "requestQueryParams=new HashMap<String,String[]>()": "Map<String,String[]>", "serialVersionUID=8131978212432223682L": "long", "commonAuthCallerPath": "String", "forceAuth": "boolean", "type": "String", "requestHeaders=new HashMap<String,String>()": "Map<String,String>", "tenantDomain": "String", "isPost": "boolean", "relyingParty": "String"}, "code": ["void", "function", "(", "String", "tenantDomain", ")", "{", "this", ".", "tenantDomain", "=", "tenantDomain", ";", "}"], "memberFunctions": {"setRelyingParty": [["void", "String relyingParty"]], "addHeader": [["void", "String key", "String values"]], "getRelyingParty": [["String"]], "getForceAuth": [["boolean"]], "getCommonAuthCallerPath": [["String"]], "getRequestQueryParams": [["Map<String,String[]>"]], "addRequestQueryParam": [["void", "String key", "String[] value"]], "setPost": [["void", "boolean post"]], "setType": [["void", "String type"]], "isPost": [["boolean"]], "appendRequestQueryParams": [["void", "Map<String,String[]> map"]], "getPassiveAuth": [["boolean"]], "getRequestHeaders": [["Map<String,String>"]], "getTenantDomain": [["String"]], "getRequestQueryParam": [["String[]", "String key"]], "getType": [["String"]], "setPassiveAuth": [["void", "boolean passiveAuth"]], "setCommonAuthCallerPath": [["void", "String commonAuthCallerPath"]], "setForceAuth": [["void", "boolean forceAuth"]], "setRequestQueryParams": [["void", "Map<String,String[]> requestQueryParams"]]}, "className": "AuthenticationRequest", "renamed": ["void", "function", "(", "String", "arg0", ")", "{", "this", ".", "tenantDomain", "=", "arg0", ";", "}"], "nl": "Set the tenant domain which the authentication request is comming from", "nlToks": ["Set", "the", "tenant", "domain", "which", "the", "authentication", "request", "is", "comming", "from"], "path": "harsha1979/carbon-identity/tree/master/components/authentication-framework/org.wso2.carbon.identity.application.authentication.framework/src/main/java/org/wso2/carbon/identity/application/authentication/framework/model/AuthenticationRequest.java", "idx": 776}
{"memberVariables": {"mTestDir": "StorageDir", "mTestDirView": "StorageDirView", "TEST_TIER_LEVEL=0": "int", "TEST_DIR=0": "int", "TEST_BLOCK_ID=9": "long", "TEST_SESSION_ID=2": "long", "mTestFolder=new TemporaryFolder()": "TemporaryFolder", "mMetaManagerView": "BlockMetadataManagerView", "TEST_BLOCK_SIZE=20": "long", "mTestTierView": "StorageTierView", "TEST_TEMP_BLOCK_ID=10": "long"}, "code": ["void", "function", "(", ")", "{", "Assert", ".", "assertEquals", "(", "mTestDir", ".", "getCapacityBytes", "(", ")", ",", "mTestDirView", ".", "getCapacityBytes", "(", ")", ")", ";", "}"], "memberFunctions": {"getParentTierView": [["void"]], "createTempBlockMeta": [["void"]], "before": [["void"]], "getDirViewIndex": [["void"]], "getCommittedBytes": [["void"]], "getEvictableBlocks": [["void"]], "toBlockStoreLocation": [["void"]], "getAvailableBytes": [["void"]]}, "className": "StorageDirViewTest", "renamed": ["void", "function", "(", ")", "{", "Assert", ".", "assertEquals", "(", "mTestDir", ".", "getCapacityBytes", "(", ")", ",", "mTestDirView", ".", "getCapacityBytes", "(", ")", ")", ";", "}"], "nl": "Tests the  {@link StorageDirView#getCapacityBytes()} method.", "nlToks": ["Tests", "the", "-LCB-", "@link", "StorageDirView", "#getCapacityBytes", "-LRB-", "-RRB-", "-RCB-", "method", "."], "path": "poemlin/alluxio/tree/master/core/server/src/test/java/alluxio/worker/block/meta/StorageDirViewTest.java", "idx": 778}
{"memberVariables": {"uniqueName": "String", "project=null": "Project"}, "code": ["String", "function", "(", ")", "{", "if", "(", "uniqueName", "==", "null", ")", "{", "return", "null", ";", "}", "String", "s", "=", "PersistenceManager", ".", "getInstance", "(", ")", ".", "getProjectBaseName", "(", "project", ")", ";", "if", "(", "uniqueName", ".", "length", "(", ")", ">", "0", ")", "{", "s", "+=", "\"_\"", "+", "uniqueName", ";", "}", "if", "(", "!", "s", ".", "endsWith", "(", "getZipFileExtension", "(", ")", ")", ")", "{", "s", "+=", "getZipFileExtension", "(", ")", ";", "}", "return", "s", ";", "}"], "memberFunctions": {"makeUniqueName": [["void", "String s"]], "getType": [["String"]], "toString": [["String"]], "remove": [["void"]], "getUniqueDiagramName": [["String"]], "getZipFileExtension": [["String"]]}, "className": "AbstractProjectMember", "renamed": ["String", "function", "(", ")", "{", "if", "(", "uniqueName", "==", "null", ")", "{", "return", "null", ";", "}", "String", "loc0", "=", "PersistenceManager", ".", "getInstance", "(", ")", ".", "getProjectBaseName", "(", "project", ")", ";", "if", "(", "uniqueName", ".", "length", "(", ")", ">", "0", ")", "{", "loc0", "+=", "\"srini_string\"", "+", "uniqueName", ";", "}", "if", "(", "!", "loc0", ".", "endsWith", "(", "getZipFileExtension", "(", ")", ")", ")", "{", "loc0", "+=", "getZipFileExtension", "(", ")", ";", "}", "return", "loc0", ";", "}"], "nl": "Returns a unique member's name for storage in a zipfile. The project's base name is prepended followed by an underscore '_'. The extension is appended. Used by \"argo.tee\".", "nlToks": ["Returns", "a", "unique", "member", "'s", "name", "for", "storage", "in", "a", "zipfile", ".", "The", "project", "'s", "base", "name", "is", "prepended", "followed", "by", "an", "underscore", "'_'", ".", "The", "extension", "is", "appended", ".", "Used", "by", "``", "argo.tee", "''", "."], "path": "pichiliani/CoArgoUML/tree/master/v0.24/fonte/src/argouml-app/src/org/argouml/kernel/AbstractProjectMember.java", "idx": 779}
{"memberVariables": {"AMPLIFIED=true": "boolean", "DELETED=false": "boolean", "gisticID": "int", "peakStart": "int", "genes_in_ROI": "ArrayList<CanonicalGene>", "cytoband": "String", "amp": "boolean", "NO_SUCH_GISTIC=-1": "int", "cancerStudyId": "int", "chromosome": "int", "peakEnd": "int", "qValue": "double"}, "code": ["void", "function", "(", "int", "peakStart", ")", "{", "this", ".", "peakStart", "=", "peakStart", ";", "}"], "memberFunctions": {"setPeakEnd": [["void", "int peakEnd"]], "setAmp": [["void", "boolean amp"]], "getCytoband": [["String"]], "getPeakStart": [["int"]], "setqValue": [["void", "double qValue"]], "getAmp": [["boolean"]], "getInternalId": [["int"]], "setGenes_in_ROI": [["void", "ArrayList<CanonicalGene> genes_in_ROI"]], "peakSize": [["int"]], "getCancerStudyId": [["int"]], "getChromosome": [["int"]], "getPeakEnd": [["int"]], "addGene": [["void", "CanonicalGene gene"]], "setInternalId": [["void", "int internalId"]], "setCancerStudyId": [["void", "int cancerStudyId"]], "getqValue": [["double"]], "toString": [["String"]], "getGenes_in_ROI": [["ArrayList<CanonicalGene>"]], "setCytoband": [["void", "String cytoband"]], "setChromosome": [["void", "int chromosome"]]}, "className": "Gistic", "renamed": ["void", "function", "(", "int", "arg0", ")", "{", "this", ".", "peakStart", "=", "arg0", ";", "}"], "nl": "Sets the start of the peak of the ROI", "nlToks": ["Sets", "the", "start", "of", "the", "peak", "of", "the", "ROI"], "path": "adamabeshouse/cbioportal/tree/master/core/src/main/java/org/mskcc/cbio/portal/model/Gistic.java", "idx": 781}
{"memberVariables": {"mLockManager": "BlockLockManager", "TEST_BLOCK_ID=9": "long", "mThrown=ExpectedException.none()": "ExpectedException", "TEST_SESSION_ID=2": "long", "mFolder=new TemporaryFolder()": "TemporaryFolder"}, "code": ["void", "function", "(", ")", "{", "long", "lockId1", "=", "mLockManager", ".", "lockBlock", "(", "TEST_SESSION_ID", ",", "TEST_BLOCK_ID", ",", "BlockLockType", ".", "READ", ")", ";", "long", "lockId2", "=", "mLockManager", ".", "lockBlock", "(", "TEST_SESSION_ID", ",", "TEST_BLOCK_ID", ",", "BlockLockType", ".", "READ", ")", ";", "Assert", ".", "assertNotEquals", "(", "lockId1", ",", "lockId2", ")", ";", "}"], "memberFunctions": {"lockAcrossSessions": [["void"]], "stress": [["void"]], "validateLockIdWithNoRecord": [["void"]], "unlockNonExistingLock": [["void"]], "dontReuseLock": [["void"]], "before": [["void"]], "reuseLock": [["void"]], "readBlocksWrite": [["void"]], "validateLockIdWithWrongBlockId": [["void"]], "setMaxLocks": [["void", "int maxLocks"]], "lockExpectingHang": [["void", "final BlockLockManager manager", "final long blockId"]], "grabManyLocks": [["void"]], "validateLockIdWithWrongSessionId": [["void"]], "cleanupSession": [["void"]], "after": [["void"]]}, "className": "BlockLockManagerTest", "renamed": ["void", "function", "(", ")", "{", "long", "loc0", "=", "mLockManager", ".", "lockBlock", "(", "TEST_SESSION_ID", ",", "TEST_BLOCK_ID", ",", "BlockLockType", ".", "READ", ")", ";", "long", "loc1", "=", "mLockManager", ".", "lockBlock", "(", "TEST_SESSION_ID", ",", "TEST_BLOCK_ID", ",", "BlockLockType", ".", "READ", ")", ";", "Assert", ".", "assertNotEquals", "(", "loc0", ",", "loc1", ")", ";", "}"], "nl": "Tests the  {@link BlockLockManager#lockBlock(long,long,BlockLockType)} method.", "nlToks": ["Tests", "the", "-LCB-", "@link", "BlockLockManager", "#lockBlock", "-LRB-", "long", ",", "long", ",", "BlockLockType", "-RRB-", "-RCB-", "method", "."], "path": "poemlin/alluxio/tree/master/core/server/src/test/java/alluxio/worker/block/BlockLockManagerTest.java", "idx": 783}
{"memberVariables": {"CHARS={'0','1','2','3','4','5','6','7','8','9','a','b','c','d','e','f'}": "char[]"}, "code": ["char", "[", "]", "function", "(", "final", "byte", "[", "]", "data", ")", "{", "final", "int", "len", "=", "data", ".", "length", ";", "final", "char", "[", "]", "out", "=", "new", "char", "[", "len", "<<", "1", "]", ";", "for", "(", "int", "i", "=", "0", ",", "j", "=", "0", ";", "i", "<", "len", ";", "i", "++", ")", "{", "out", "[", "j", "++", "]", "=", "CHARS", "[", "(", "0xF0", "&", "data", "[", "i", "]", ")", ">>>", "4", "]", ";", "out", "[", "j", "++", "]", "=", "CHARS", "[", "0x0F", "&", "data", "[", "i", "]", "]", ";", "}", "return", "out", ";", "}"], "memberFunctions": {"sha1": [["String", "String data"]]}, "className": "ShaUtils", "renamed": ["char", "[", "]", "function", "(", "final", "byte", "[", "]", "arg0", ")", "{", "final", "int", "loc0", "=", "arg0", ".", "length", ";", "final", "char", "[", "]", "loc1", "=", "new", "char", "[", "loc0", "<<", "1", "]", ";", "for", "(", "int", "loc2", "=", "0", ",", "loc3", "=", "0", ";", "loc2", "<", "loc0", ";", "loc2", "++", ")", "{", "loc1", "[", "loc3", "++", "]", "=", "CHARS", "[", "(", "0xF0", "&", "arg0", "[", "loc2", "]", ")", ">>>", "4", "]", ";", "loc1", "[", "loc3", "++", "]", "=", "CHARS", "[", "0x0F", "&", "arg0", "[", "loc2", "]", "]", ";", "}", "return", "loc1", ";", "}"], "nl": "Encode given data as lower case hex chars.", "nlToks": ["Encode", "given", "data", "as", "lower", "case", "hex", "chars", "."], "path": "pperalta/spring-cloud-deployer/tree/master/spring-cloud-deployer-resource-support/src/main/java/org/springframework/cloud/deployer/resource/support/ShaUtils.java", "idx": 784}
{"memberVariables": {"EXAMPLE=\"$IIMWV,125.1,T,5.5,M,A\"": "String", "mwv": "MWVSentence"}, "code": ["void", "function", "(", ")", "{", "assertTrue", "(", "mwv", ".", "isTrue", "(", ")", ")", ";", "mwv", ".", "setTrue", "(", "false", ")", ";", "assertFalse", "(", "mwv", ".", "isTrue", "(", ")", ")", ";", "}"], "memberFunctions": {"testSetNegativeSpeed": [["void"]], "testSetInvalidSpeedUnit": [["void"]], "testIsTrue": [["void"]], "testMWVParserTalkerId": [["void"]], "testSetStatus": [["void"]], "testSetAngle": [["void"]], "testSetSpeedUnit": [["void"]], "testSetNegativeAngle": [["void"]], "testGetAngle": [["void"]], "testSetAngleOutOfRange": [["void"]], "setUp": [["void"]], "testGetSpeed": [["void"]], "testGetStatus": [["void"]], "testGetSpeedUnit": [["void"]], "testSetSpeed": [["void"]]}, "className": "MWVTest", "renamed": ["void", "function", "(", ")", "{", "assertTrue", "(", "mwv", ".", "isTrue", "(", ")", ")", ";", "mwv", ".", "setTrue", "(", "false", ")", ";", "assertFalse", "(", "mwv", ".", "isTrue", "(", ")", ")", ";", "}"], "nl": "Test method for {@link net.sf.marineapi.nmea.parser.MWVParser#setTrue(boolean)}.", "nlToks": ["Test", "method", "for", "-LCB-", "@link", "net.sf.marineapi.nmea.parser.MWVParser", "#setTrue", "-LRB-", "boolean", "-RRB-", "-RCB-", "."], "path": "pkoziol/marine-api/tree/master/src/test/java/net/sf/marineapi/nmea/parser/MWVTest.java", "idx": 786}
{"memberVariables": {"DEFAULT_ASYNCHRONOUS_WORKERS_MAX=1": "int", "heuristicCoefficient=DEFAULT_HEURISTIC_COEFFICIENT": "float", "heuristicDefaultLifetime=DEFAULT_HEURISTIC_LIFETIME": "long", "DEFAULT_HEURISTIC_COEFFICIENT=0.1f": "float", "asynchronousWorkersMax=DEFAULT_ASYNCHRONOUS_WORKERS_MAX": "int", "DEFAULT_HEURISTIC_LIFETIME=0": "long", "maxCacheEntries=DEFAULT_MAX_CACHE_ENTRIES": "int", "DEFAULT_REVALIDATION_QUEUE_SIZE=100": "int", "DEFAULT_MAX_OBJECT_SIZE_BYTES=8192": "int", "heuristicCachingEnabled=false": "boolean", "DEFAULT_ASYNCHRONOUS_WORKER_IDLE_LIFETIME_SECS=60": "int", "revalidationQueueSize=DEFAULT_REVALIDATION_QUEUE_SIZE": "int", "DEFAULT_MAX_UPDATE_RETRIES=1": "int", "maxUpdateRetries=DEFAULT_MAX_UPDATE_RETRIES": "int", "isSharedCache=true": "boolean", "DEFAULT_HEURISTIC_CACHING_ENABLED=false": "boolean", "DEFAULT_ASYNCHRONOUS_WORKERS_CORE=1": "int", "asynchronousWorkerIdleLifetimeSecs=DEFAULT_ASYNCHRONOUS_WORKER_IDLE_LIFETIME_SECS": "int", "DEFAULT_MAX_CACHE_ENTRIES=1000": "int", "maxObjectSizeBytes=DEFAULT_MAX_OBJECT_SIZE_BYTES": "int", "asynchronousWorkersCore=DEFAULT_ASYNCHRONOUS_WORKERS_CORE": "int"}, "code": ["int", "function", "(", ")", "{", "return", "maxUpdateRetries", ";", "}"], "memberFunctions": {"isSharedCache": [["boolean"]], "getHeuristicCoefficient": [["float"]], "setAsynchronousWorkersCore": [["void", "int min"]], "setSharedCache": [["void", "boolean isSharedCache"]], "getMaxObjectSizeBytes": [["int"]], "getAsynchronousWorkersMax": [["int"]], "getAsynchronousWorkersCore": [["int"]], "setAsynchronousWorkerIdleLifetimeSecs": [["void", "int secs"]], "getAsynchronousWorkerIdleLifetimeSecs": [["int"]], "setHeuristicDefaultLifetime": [["void", "long heuristicDefaultLifetimeSecs"]], "setMaxUpdateRetries": [["void", "int maxUpdateRetries"]], "setMaxObjectSizeBytes": [["void", "int maxObjectSizeBytes"]], "getMaxCacheEntries": [["int"]], "setHeuristicCachingEnabled": [["void", "boolean heuristicCachingEnabled"]], "setMaxCacheEntries": [["void", "int maxCacheEntries"]], "getHeuristicDefaultLifetime": [["long"]], "setAsynchronousWorkersMax": [["void", "int max"]], "getRevalidationQueueSize": [["int"]], "isHeuristicCachingEnabled": [["boolean"]], "setRevalidationQueueSize": [["void", "int size"]], "setHeuristicCoefficient": [["void", "float heuristicCoefficient"]]}, "className": "CacheConfig", "renamed": ["int", "function", "(", ")", "{", "return", "maxUpdateRetries", ";", "}"], "nl": "Returns the number of times to retry a cache update on failure", "nlToks": ["Returns", "the", "number", "of", "times", "to", "retry", "a", "cache", "update", "on", "failure"], "path": "pritamkhose/open-gpstracker.code/tree/master/external_sources/httpclient-4.1.1/httpclient-cache/src/main/java/org/apache/http/impl/client/cache/CacheConfig.java", "idx": 787}
{"memberVariables": {"playerList=new HashMap<Integer,int[]>()": "Map<Integer,int[]>"}, "code": ["void", "function", "(", "int", "player", ",", "PlayerTickEvent", "event", ")", "{", "if", "(", "playerList", ".", "containsKey", "(", "player", ")", ")", "{", "if", "(", "playerList", ".", "get", "(", "player", ")", "[", "0", "]", "<", "1", ")", "{", "runPlayer", "(", "player", ",", "event", ")", ";", "}", "playerList", ".", "put", "(", "player", ",", "new", "int", "[", "]", "{", "playerList", ".", "get", "(", "player", ")", "[", "0", "]", "-", "1", ",", "playerList", ".", "get", "(", "player", ")", "[", "1", "]", "}", ")", ";", "}", "else", "{", "playerList", ".", "put", "(", "player", ",", "new", "int", "[", "]", "{", "1200", ",", "0", "}", ")", ";", "}", "}"], "memberFunctions": {"onEvent": [["void", "PlayerTickEvent event"]], "runPlayer": [["void", "int player", "PlayerTickEvent event"]]}, "className": "TacoPlayerTickHandler", "renamed": ["void", "function", "(", "int", "arg0", ",", "PlayerTickEvent", "arg1", ")", "{", "if", "(", "playerList", ".", "containsKey", "(", "arg0", ")", ")", "{", "if", "(", "playerList", ".", "get", "(", "arg0", ")", "[", "0", "]", "<", "1", ")", "{", "runPlayer", "(", "arg0", ",", "arg1", ")", ";", "}", "playerList", ".", "put", "(", "arg0", ",", "new", "int", "[", "]", "{", "playerList", ".", "get", "(", "arg0", ")", "[", "0", "]", "-", "1", ",", "playerList", ".", "get", "(", "arg0", ")", "[", "1", "]", "}", ")", ";", "}", "else", "{", "playerList", ".", "put", "(", "arg0", ",", "new", "int", "[", "]", "{", "1200", ",", "0", "}", ")", ";", "}", "}"], "nl": "Takes a playerID as a arg, and checks if they are currently being ticked.   Takes care of handling adding them to the tick, and incrementing ticks.", "nlToks": ["Takes", "a", "playerID", "as", "a", "arg", ",", "and", "checks", "if", "they", "are", "currently", "being", "ticked", ".", "Takes", "care", "of", "handling", "adding", "them", "to", "the", "tick", ",", "and", "incrementing", "ticks", "."], "path": "1337-Tacos/TacoTek/tree/master/java/com/_1n5aN1aC/tacotek/handlers/TacoPlayerTickHandler.java", "idx": 788}
{"memberVariables": {"headers": "Map<String,Object>", "body[]": "byte", "deliveryTag": "long", "replyTo": "String", "contentEncoding": "String", "messageId": "String", "correlationId": "String", "soapAction": "String", "contentType": "String"}, "code": ["void", "function", "(", "long", "deliveryTag", ")", "{", "this", ".", "deliveryTag", "=", "deliveryTag", ";", "}"], "memberFunctions": {"getCorrelationId": [["String"]], "getContentEncoding": [["String"]], "setHeaders": [["void", "Map<String,Object> headers"]], "getHeaders": [["Map<String,Object>"]], "getBody": [["byte[]"]], "getReplyTo": [["String"]], "setCorrelationId": [["void", "String correlationId"]], "setContentEncoding": [["void", "String contentEncoding"]], "getDeliveryTag": [["long"]], "setMessageId": [["void", "String messageId"]], "setSoapAction": [["void", "String soapAction"]], "setBody": [["void", "byte[] body"]], "getMessageId": [["String"]], "setReplyTo": [["void", "String replyTo"]], "getContentType": [["String"]], "setContentType": [["void", "String contentType"]], "getSoapAction": [["String"]]}, "className": "RabbitMQMessage", "renamed": ["void", "function", "(", "long", "arg0", ")", "{", "this", ".", "deliveryTag", "=", "arg0", ";", "}"], "nl": "set delivery tag of the message assigned by the transport", "nlToks": ["set", "delivery", "tag", "of", "the", "message", "assigned", "by", "the", "transport"], "path": "harsha89/wso2-axis2-transports/tree/master/modules/rabbitmq/src/main/java/org/apache/axis2/transport/rabbitmq/RabbitMQMessage.java", "idx": 789}
{"memberVariables": {"log=LoggerFactory.getLogger(StoredPaymentChannelClientStates.class)": "Logger", "announcePeerGroup": "TransactionBroadcaster", "contract": "Transaction", "myKey": "ECKey", "channelTimeoutHandler=new Timer(true)": "Timer", "active=false": "boolean", "EXTENSION_ID=StoredPaymentChannelClientStates.class.getName()": "String", "containingWallet": "Wallet", "lock=Threading.lock(\"StoredPaymentChannelClientStates\")": "ReentrantLock", "valueToMe": "BigInteger", "refundFees": "BigInteger", "id": "Sha256Hash", "close": "Transaction", "mapChannels=HashMultimap.create()": "HashMultimap<Sha256Hash,StoredClientChannel>", "refund": "Transaction"}, "code": ["StoredClientChannel", "function", "(", "Sha256Hash", "id", ",", "Sha256Hash", "contractHash", ")", "{", "lock", ".", "lock", "(", ")", ";", "try", "{", "Set", "<", "StoredClientChannel", ">", "setChannels", "=", "mapChannels", ".", "get", "(", "id", ")", ";", "for", "(", "StoredClientChannel", "channel", ":", "setChannels", ")", "{", "if", "(", "channel", ".", "contract", ".", "getHash", "(", ")", ".", "equals", "(", "contractHash", ")", ")", "return", "channel", ";", "}", "return", "null", ";", "}", "finally", "{", "lock", ".", "unlock", "(", ")", ";", "}", "}"], "memberFunctions": {"getSecondsUntilExpiry": [["long", "Sha256Hash id"]], "putChannel": [["void", "final StoredClientChannel channel"], ["void", "final StoredClientChannel channel", "boolean updateWallet"]], "removeChannel": [["void", "StoredClientChannel channel"]], "isWalletExtensionMandatory": [["boolean"]], "getBalanceForServer": [["BigInteger", "Sha256Hash id"]], "deserializeWalletExtension": [["void", "Wallet containingWallet", "byte[] data"]], "getWalletExtensionID": [["String"]], "getUsableChannelForServerID": [["StoredClientChannel", "Sha256Hash id"]], "serializeWalletExtension": [["byte[]"]], "toString": [["String"], ["String"]], "expiryTimeSeconds": [["long"]], "getFromWallet": [["StoredPaymentChannelClientStates", "Wallet wallet"]]}, "className": "StoredPaymentChannelClientStates", "renamed": ["StoredClientChannel", "function", "(", "Sha256Hash", "arg0", ",", "Sha256Hash", "arg1", ")", "{", "lock", ".", "lock", "(", ")", ";", "try", "{", "Set", "<", "StoredClientChannel", ">", "loc0", "=", "mapChannels", ".", "get", "(", "arg0", ")", ";", "for", "(", "StoredClientChannel", "loc1", ":", "loc0", ")", "{", "if", "(", "loc1", ".", "contract", ".", "getHash", "(", ")", ".", "equals", "(", "arg1", ")", ")", "return", "loc1", ";", "}", "return", "null", ";", "}", "finally", "{", "lock", ".", "unlock", "(", ")", ";", "}", "}"], "nl": "Finds a channel with the given id and contract hash and returns it, or returns null.", "nlToks": ["Finds", "a", "channel", "with", "the", "given", "id", "and", "contract", "hash", "and", "returns", "it", ",", "or", "returns", "null", "."], "path": "plncoin/plncoin-and/tree/master/plncoinj/core/src/main/java/com/google/bitcoin/protocols/channels/StoredPaymentChannelClientStates.java", "idx": 790}
{"memberVariables": {"POSITION_NONE=-2": "int", "POSITION_UNCHANGED=-1": "int", "mObservable=new DataSetObservable()": "DataSetObservable"}, "code": ["void", "function", "(", "ViewGroup", "container", ",", "int", "position", ",", "Object", "object", ")", "{", "destroyItem", "(", "(", "View", ")", "container", ",", "position", ",", "object", ")", ";", "}"], "memberFunctions": {"restoreState": [["void", "Parcelable state", "ClassLoader loader"]], "startUpdate": [["void", "ViewGroup container"], ["void", "View container"]], "saveState": [["Parcelable"]], "instantiateItem": [["Object", "ViewGroup container", "int position"], ["Object", "View container", "int position"]], "getItemPosition": [["int", "Object object"]], "registerDataSetObserver": [["void", "DataSetObserver observer"]], "getPageTitle": [["CharSequence", "int position"]], "setPrimaryItem": [["void", "ViewGroup container", "int position", "Object object"], ["void", "View container", "int position", "Object object"]], "notifyDataSetChanged": [["void"]], "finishUpdate": [["void", "ViewGroup container"], ["void", "View container"]], "unregisterDataSetObserver": [["void", "DataSetObserver observer"]], "getCount": [["int"]], "isViewFromObject": [["boolean", "View view", "Object object"]]}, "className": "PagerAdapter", "renamed": ["void", "function", "(", "ViewGroup", "arg0", ",", "int", "arg1", ",", "Object", "arg2", ")", "{", "destroyItem", "(", "(", "View", ")", "arg0", ",", "arg1", ",", "arg2", ")", ";", "}"], "nl": "Remove a page for the given position.  The adapter is responsible for removing the view from its container, although it only must ensure this is done by the time it returns from  {@link #finishUpdate(ViewGroup)}.", "nlToks": ["Remove", "a", "page", "for", "the", "given", "position", ".", "The", "adapter", "is", "responsible", "for", "removing", "the", "view", "from", "its", "container", ",", "although", "it", "only", "must", "ensure", "this", "is", "done", "by", "the", "time", "it", "returns", "from", "-LCB-", "@link", "#finishUpdate", "-LRB-", "ViewGroup", "-RRB-", "-RCB-", "."], "path": "prateeka/AndroidDev/tree/master/SherlockActionBar/src/android/support/v4/view/PagerAdapter.java", "idx": 791}
{"memberVariables": {"LOG_MSG=\"Exception caught from SentenceListener\"": "String", "DISPATCH_ALL=\"DISPATCH_ALL\"": "String", "reader": "DataReader", "dataListener": "DataListener", "listeners=new ConcurrentHashMap<String,List<SentenceListener>>()": "ConcurrentMap<String,List<SentenceListener>>", "pauseTimeout=DEFAULT_TIMEOUT": "int", "exceptionListener=null": "ExceptionListener", "thread": "Thread", "LOGGER=Logger.getLogger(SentenceReader.class.getName())": "Logger", "DEFAULT_TIMEOUT=5000": "int"}, "code": ["void", "function", "(", "ExceptionListener", "exceptionListener", ")", "{", "this", ".", "exceptionListener", "=", "exceptionListener", ";", "}"], "memberFunctions": {"fireReadingPaused": [["void"]], "fireDataEvent": [["void", "String data"]], "getExceptionListener": [["ExceptionListener"]], "setPauseTimeout": [["void", "int millis"]], "start": [["void"]], "removeSentenceListener": [["void", "SentenceListener listener"]], "fireReadingStopped": [["void"]], "registerListener": [["void", "SentenceListener listener", "String type"]], "getSentenceListeners": [["List<SentenceListener>"]], "handleException": [["void", "String msg", "Exception ex"]], "setDataListener": [["void", "DataListener listener"]], "stop": [["void"]], "setInputStream": [["void", "InputStream stream"]], "fireReadingStarted": [["void"]], "fireSentenceEvent": [["void", "Sentence sentence"]], "addSentenceListener": [["void", "SentenceListener listener"], ["void", "SentenceListener sl", "SentenceId type"], ["void", "SentenceListener sl", "String type"]], "getPauseTimeout": [["int"]], "setDatagramSocket": [["void", "DatagramSocket socket"]]}, "className": "SentenceReader", "renamed": ["void", "function", "(", "ExceptionListener", "arg0", ")", "{", "this", ".", "exceptionListener", "=", "arg0", ";", "}"], "nl": "Set exception call-back listener.", "nlToks": ["Set", "exception", "call-back", "listener", "."], "path": "pkoziol/marine-api/tree/master/src/main/java/net/sf/marineapi/nmea/io/SentenceReader.java", "idx": 793}
{"memberVariables": {"viewer": "RpgScreen", "model": "RpgPlatform"}, "code": ["void", "function", "(", ")", "{", "model", ".", "triggerEvent", "(", ")", ";", "}"], "memberFunctions": {"updateModel": [["void"]], "getViewer": [["RpgScreen"]], "getModel": [["RpgPlatform"]], "characterMoved": [["void", "WalkDirection direction"]], "setModel": [["void", "RpgPlatform model"]], "moveCharacter": [["void", "WalkDirection direction"], ["void", "Path path", "int[] destinationPos"]], "setViewer": [["void", "RpgScreen viewer"]], "getMap": [["TiledMap"]], "runAutomaticEvents": [["void"]]}, "className": "RpgController", "renamed": ["void", "function", "(", ")", "{", "model", ".", "triggerEvent", "(", ")", ";", "}"], "nl": "Method called by the Viewer to send the trigger command to the model.", "nlToks": ["Method", "called", "by", "the", "Viewer", "to", "send", "the", "trigger", "command", "to", "the", "model", "."], "path": "prativa/shadowstruggles/tree/master/Shadow Struggles/src/br/edu/ifsp/pds/shadowstruggles/rpg/RpgController.java", "idx": 794}
{"memberVariables": {"rppaValue": "RPPA", "isMutated": "mutations", "gene": "String", "mutationType": "String", "caseId": "String", "cnaValue": "CNA", "geneticEventComparator=null": "GeneticEventComparator", "mrnaValue": "MRNA"}, "code": ["String", "function", "(", ")", "{", "return", "caseId", ";", "}"], "memberFunctions": {"getRPPAValue": [["RPPA"]], "isMutated": [["boolean"]], "isRPPADownRegulated": [["boolean"]], "getMutationValue": [["mutations"]], "getMrnaValue": [["MRNA"]], "isCnaAmplified": [["boolean"]], "setGeneticEventComparator": [["void", "GeneticEventComparator geneticEventComparator"]], "getGene": [["String"]], "isCnaHeterozygousDeleted": [["boolean"]], "equals": [["boolean", "Object obj"]], "getCnaValue": [["CNA"]], "isMRNADownRegulated": [["boolean"]], "toString": [["String"]], "isRPPAUpRegulated": [["boolean"]], "getMutationType": [["String"]], "isCnaHomozygouslyDeleted": [["boolean"]], "isMRNAUpRegulated": [["boolean"]]}, "className": "GeneticEventImpl", "renamed": ["String", "function", "(", ")", "{", "return", "caseId", ";", "}"], "nl": "Gets the Case ID.", "nlToks": ["Gets", "the", "Case", "ID", "."], "path": "adamabeshouse/cbioportal/tree/master/core/src/main/java/org/mskcc/cbio/portal/model/GeneticEventImpl.java", "idx": 796}
{"memberVariables": {"S_IRUSR=0000400": "int", "gid": "int", "S_ISUID=0004000": "int", "S_IWGRP=0000020": "int", "S_IFBLK=0060000": "int", "mode": "int", "uid": "int", "S_IXGRP=0000010": "int", "S_IFCHR=0020000": "int", "S_IXOTH=0000001": "int", "S_IFSOCK=0140000": "int", "S_IRGRP=0000040": "int", "LOGGER=LoggerFactory.getLogger(JGitUtils.class)": "Logger", "S_IRWXG=0000070": "int", "S_IWUSR=0000200": "int", "S_IRWXU=0000700": "int", "S_ISVTX=0001000": "int", "S_IFREG=0100000": "int", "S_IFLNK=0120000": "int", "S_IWOTH=0000002": "int", "S_IXUSR=0000100": "int", "S_IRWXO=0000007": "int", "S_IFIFO=0010000": "int", "S_IROTH=0000004": "int", "unixlibc=null": "UnixCLibrary", "S_ISGID=0002000": "int", "S_IFDIR=0040000": "int", "S_IFMT=0170000": "int"}, "code": ["int", "function", "(", "String", "path", ")", "{", "if", "(", "isWindows", "(", ")", ")", "{", "throw", "new", "UnsupportedOperationException", "(", "\"The method JnaUtils.getFilemode is not supported under Windows.\"", ")", ";", "}", "Filestat", "stat", "=", "getFilestat", "(", "path", ")", ";", "if", "(", "stat", "==", "null", ")", "return", "-", "1", ";", "return", "stat", ".", "mode", ";", "}"], "memberFunctions": {"getgid": [["int"], ["int"]], "setFilemode": [["int", "File file", "int mode"], ["int", "String path", "int mode"]], "getFilestat": [["Filestat", "File path"], ["Filestat", "String path"]], "isWindows": [["boolean"]], "chmod": [["int", "String path", "int mode"]], "runProcessLs": [["String", "String path"]], "getUnixCLibrary": [["UnixCLibrary"]], "getegid": [["int"], ["int"]]}, "className": "JnaUtils", "renamed": ["int", "function", "(", "String", "arg0", ")", "{", "if", "(", "isWindows", "(", ")", ")", "{", "throw", "new", "UnsupportedOperationException", "(", "\"srini_string\"", ")", ";", "}", "Filestat", "loc0", "=", "getFilestat", "(", "arg0", ")", ";", "if", "(", "loc0", "==", "null", ")", "return", "-", "1", ";", "return", "loc0", ".", "mode", ";", "}"], "nl": "Get the file mode bits of a file. This method is only implemented for OSes of the Unix family. It returns the file mode information as available in the st_mode member of the resulting struct stat when calling 'lstat' on a file.", "nlToks": ["Get", "the", "file", "mode", "bits", "of", "a", "file", ".", "This", "method", "is", "only", "implemented", "for", "OSes", "of", "the", "Unix", "family", ".", "It", "returns", "the", "file", "mode", "information", "as", "available", "in", "the", "st_mode", "member", "of", "the", "resulting", "struct", "stat", "when", "calling", "`", "lstat", "'", "on", "a", "file", "."], "path": "pombreda/gitblit/tree/master/src/main/java/com/gitblit/utils/JnaUtils.java", "idx": 797}
{"memberVariables": {"bigIcon": "int", "emojiText": "String", "icon": "int", "name": "String", "type": "Type", "iconPath": "String", "identityCode": "String", "bigIconPath": "String"}, "code": ["String", "function", "(", ")", "{", "return", "emojiText", ";", "}"], "memberFunctions": {"setName": [["void", "String name"]], "getName": [["String"]], "getIconPath": [["String"]], "getBigIcon": [["int"]], "setBigIcon": [["void", "int dynamicIcon"]], "setType": [["void", "Type type"]], "setIdentityCode": [["void", "String identityCode"]], "getIcon": [["int"]], "getBigIconPath": [["String"]], "setIcon": [["void", "int icon"]], "setBigIconPath": [["void", "String bigIconPath"]], "setEmojiText": [["void", "String emojiText"]], "setIconPath": [["void", "String iconPath"]], "getType": [["Type"]], "getIdentityCode": [["String"]], "newEmojiText": [["String", "int codePoint"]]}, "className": "EaseEmojicon", "renamed": ["String", "function", "(", ")", "{", "return", "emojiText", ";", "}"], "nl": "get text of emoji icon", "nlToks": ["get", "text", "of", "emoji", "icon"], "path": "15109237255/SuperWeChat/tree/master/easeui/src/com/hyphenate/easeui/domain/EaseEmojicon.java", "idx": 798}
{"memberVariables": {"coordinates[]": "double", "dimension": "int"}, "code": ["int", "function", "(", ")", "{", "return", "dimension", ";", "}"], "memberFunctions": {"getAllCo": [["double[]"]], "equals": [["boolean", "Points p1", "Points p2"]], "getCo": [["double", "int i"]], "setCo": [["void", "int i", "double value"]], "changeCo": [["void", "double tCo[]"]]}, "className": "Points", "renamed": ["int", "function", "(", ")", "{", "return", "dimension", ";", "}"], "nl": "get the k-dimensional space that the Points is in calls: none called by: centroid, codebook", "nlToks": ["get", "the", "k-dimensional", "space", "that", "the", "Points", "is", "in", "calls", ":", "none", "called", "by", ":", "centroid", ",", "codebook"], "path": "1202kbs/speech-recognition-java-hidden-markov-model-vq-mfcc/tree/master/SpeechRecognitionHMM/src/org/ioe/tprsa/classify/speech/vq/Points.java", "idx": 799}
{"memberVariables": {"serialVersionUID=1L": "long", "isSystemDerived": "String", "isActive": "String", "predecessorId": "BigDecimal", "srcFileName": "String", "successorId": "BigDecimal", "feedId": "BigDecimal", "checksum": "String", "transmissionDatasetId": "String", "comments": "String", "inactivationReasonType": "String", "isFormatValid": "String", "dataUnitId": "long", "receiptDate": "Timestamp", "srcUniqueFileName": "String", "createdDate": "Timestamp", "dataSetId": "Long", "fileSize": "BigDecimal", "destFileName": "String", "loadedInCats": "String", "checksumType": "String", "modifiedDate": "Timestamp", "runId": "BigDecimal", "isPrepopulated": "String", "isBulk": "String", "isUpdate": "String", "receiptDateType": "String", "status": "String"}, "code": ["void", "function", "(", "String", "checksumType", ")", "{", "this", ".", "checksumType", "=", "checksumType", ";", "}"], "memberFunctions": {"setIsSystemDerived": [["void", "String isSystemDerived"]], "setIsPrepopulated": [["void", "String isPrepopulated"]], "getStatus": [["String"]], "getIsUpdate": [["String"]], "getDataUnitId": [["long"]], "getFileSize": [["BigDecimal"]], "setInactivationReasonType": [["void", "String inactivationReasonType"]], "setDataUnitId": [["void", "long dataUnitId"]], "getComments": [["String"]], "getCreatedDate": [["Timestamp"]], "setFileSize": [["void", "BigDecimal fileSize"]], "getPredecessorId": [["BigDecimal"]], "setIsUpdate": [["void", "String isUpdate"]], "getReceiptDateType": [["String"]], "getFeedId": [["BigDecimal"]], "setReceiptDate": [["void", "Timestamp receiptDate"]], "getModifiedDate": [["Timestamp"]], "setSuccessorId": [["void", "BigDecimal successorId"]], "setDestFileName": [["void", "String destFileName"]], "setIsBulk": [["void", "String isBulk"]], "getIsFormatValid": [["String"]], "setDataSetId": [["void", "Long dataSetId"]], "setIsActive": [["void", "String isActive"]], "setFeedId": [["void", "BigDecimal feedId"]], "getInactivationReasonType": [["String"]], "getSrcUniqueFileName": [["String"]], "getDataSetId": [["Long"]], "setReceiptDateType": [["void", "String receiptDateType"]], "getRunId": [["BigDecimal"]], "setSrcFileName": [["void", "String srcFileName"]], "getChecksumType": [["String"]], "getSrcFileName": [["String"]], "getChecksum": [["String"]], "getDestFileName": [["String"]], "getReceiptDate": [["Timestamp"]], "setTransmissionDatasetId": [["void", "String transmissionDatasetId"]], "getTransmissionDatasetId": [["String"]], "setComments": [["void", "String comments"]], "getLoadedInCats": [["String"]], "getSuccessorId": [["BigDecimal"]], "setLoadedInCats": [["void", "String loadedInCats"]], "getIsPrepopulated": [["String"]], "setSrcUniqueFileName": [["void", "String srcUniqueFileName"]], "setChecksum": [["void", "String checksum"]], "setIsFormatValid": [["void", "String isFormatValid"]], "getIsBulk": [["String"]], "setRunId": [["void", "BigDecimal runId"]], "setStatus": [["void", "String status"]], "getIsActive": [["String"]], "setModifiedDate": [["void", "Timestamp modifiedDate"]], "setCreatedDate": [["void", "Timestamp createdDate"]], "setPredecessorId": [["void", "BigDecimal predecessorId"]], "getIsSystemDerived": [["String"]]}, "className": "PCLDataUnitEntity", "renamed": ["void", "function", "(", "String", "arg0", ")", "{", "this", ".", "checksumType", "=", "arg0", ";", "}"], "nl": "Sets the checksum type.", "nlToks": ["Sets", "the", "checksum", "type", "."], "path": "pkesireddy/portico_fletcher/tree/master/FetcherTesterService/src/main/java/org/ithaka/cm/fetchertester/entity/PCLDataUnitEntity.java", "idx": 800}
{"memberVariables": {}, "code": ["Set", "<", "T", ">", "function", "(", "Class", "<", "T", ">", "clazz", ",", "Set", "<", "JspNode", ">", "allNodes", ")", "{", "Set", "<", "T", ">", "result", "=", "new", "HashSet", "<", ">", "(", ")", ";", "for", "(", "Node", "node", ":", "allNodes", ")", "{", "if", "(", "clazz", ".", "equals", "(", "node", ".", "getClass", "(", ")", ")", ")", "{", "result", ".", "add", "(", "(", "T", ")", "node", ")", ";", "}", "}", "return", "result", ";", "}"], "memberFunctions": {"getNodes": [["Set<T>", "Class<T> clazz", "String source"]], "assertNumberOfNodes": [["void", "Class<T> clazz", "String source", "int number"]], "addNodeAndSubnodes": [["void", "Node node", "Set<T> nodes", "Class<T> clazz"]]}, "className": "AbstractJspNodesTst", "renamed": ["Set", "<", "T", ">", "function", "(", "Class", "<", "T", ">", "arg0", ",", "Set", "<", "JspNode", ">", "arg1", ")", "{", "Set", "<", "T", ">", "loc0", "=", "new", "HashSet", "<", ">", "(", ")", ";", "for", "(", "Node", "loc1", ":", "arg1", ")", "{", "if", "(", "arg0", ".", "equals", "(", "loc1", ".", "getClass", "(", ")", ")", ")", "{", "loc0", ".", "add", "(", "(", "T", ")", "loc1", ")", ";", "}", "}", "return", "loc0", ";", "}"], "nl": "Return a subset of allNodes, containing the items in allNodes that are of the given type.", "nlToks": ["Return", "a", "subset", "of", "allNodes", ",", "containing", "the", "items", "in", "allNodes", "that", "are", "of", "the", "given", "type", "."], "path": "adangel/pmd/tree/master/pmd-jsp/src/test/java/net/sourceforge/pmd/lang/jsp/ast/AbstractJspNodesTst.java", "idx": 803}
{"memberVariables": {"rte": "RTESentence", "EXAMPLE=\"$GPRTE,1,1,c,0,MELIN,RUSKI,KNUDAN*25\"": "String", "empty": "RTESentence"}, "code": ["void", "function", "(", ")", "{", "rte", ".", "setSentenceCount", "(", "3", ")", ";", "assertEquals", "(", "3", ",", "rte", ".", "getSentenceCount", "(", ")", ")", ";", "}"], "memberFunctions": {"testGetWaypointIds": [["void"]], "testIsActiveRoute": [["void"]], "testIsFirst": [["void"]], "testGetSentenceIndex": [["void"]], "testConstructor": [["void"]], "testSetSentenceCountWithNegativeValue": [["void"]], "testAddWaypointId": [["void"]], "testGetSentenceCount": [["void"]], "testSetWaypointIds": [["void"]], "testSetRouteId": [["void"]], "testIsWorkingRoute": [["void"]], "testGetRouteId": [["void"]], "testSetRouteTypeActive": [["void"]], "setUp": [["void"]], "testIsLast": [["void"]], "testGetWaypointCount": [["void"]], "testSetSentenceIndex": [["void"]], "testSetRouteTypeWorking": [["void"]], "testSetSentenceIndexWithNegativeValue": [["void"]]}, "className": "RTETest", "renamed": ["void", "function", "(", ")", "{", "rte", ".", "setSentenceCount", "(", "3", ")", ";", "assertEquals", "(", "3", ",", "rte", ".", "getSentenceCount", "(", ")", ")", ";", "}"], "nl": "Test method for {@link net.sf.marineapi.nmea.parser.RTEParser#setSentenceCount(int)}.", "nlToks": ["Test", "method", "for", "-LCB-", "@link", "net.sf.marineapi.nmea.parser.RTEParser", "#setSentenceCount", "-LRB-", "int", "-RRB-", "-RCB-", "."], "path": "pkoziol/marine-api/tree/master/src/test/java/net/sf/marineapi/nmea/parser/RTETest.java", "idx": 804}
{"memberVariables": {"encryptionCryptoProperties": "Object", "bus": "Bus", "signatureCrypto": "Crypto", "signatureProperties=new SignatureProperties()": "SignatureProperties", "LOG=LogUtils.getL7dLogger(StaticSTSProperties.class)": "Logger", "issuer": "String", "encryptionProperties=new EncryptionProperties()": "EncryptionProperties", "callbackHandler": "CallbackHandler", "relationships": "List<Relationship>", "validateUseKey=true": "boolean", "relationshipResolver": "RelationshipResolver", "callbackHandlerClass": "String", "signatureUsername": "String", "encryptionCrypto": "Crypto", "samlRealmCodec": "SAMLRealmCodec", "encryptionUsername": "String", "signatureCryptoProperties": "Object", "identityMapper": "IdentityMapper", "realmParser": "RealmParser"}, "code": ["void", "function", "(", "Crypto", "encryptionCrypto", ")", "{", "this", ".", "encryptionCrypto", "=", "encryptionCrypto", ";", "}"], "memberFunctions": {"getRelationshipResolver": [["RelationshipResolver"]], "getBus": [["Bus"]], "setSamlRealmCodec": [["void", "SAMLRealmCodec samlRealmCodec"]], "getResourceManager": [["ResourceManager"]], "setSignaturePropertiesFile": [["void", "String signaturePropertiesFile"]], "setCallbackHandler": [["void", "CallbackHandler callbackHandler"]], "setEncryptionProperties": [["void", "EncryptionProperties encryptionProperties"]], "getEncryptionProperties": [["EncryptionProperties"]], "isValidateUseKey": [["boolean"]], "setSignatureUsername": [["void", "String signatureUsername"]], "getRelationships": [["List<Relationship>"]], "getSamlRealmCodec": [["SAMLRealmCodec"]], "getEncryptionUsername": [["String"]], "setIdentityMapper": [["void", "IdentityMapper identityMapper"]], "setEncryptionPropertiesFile": [["void", "String encryptionPropertiesFile"]], "setEncryptionUsername": [["void", "String encryptionUsername"]], "setCallbackHandlerClass": [["void", "String callbackHandlerClass"]], "getEncryptionCrypto": [["Crypto"]], "setRelationships": [["void", "List<Relationship> relationships"]], "getSignatureProperties": [["SignatureProperties"]], "setSignatureProperties": [["void", "SignatureProperties signatureProperties"]], "setRealmParser": [["void", "RealmParser realmParser"]], "getIssuer": [["String"]], "setSignatureCryptoProperties": [["void", "Object signatureCryptoProperties"]], "setSignatureCrypto": [["void", "Crypto signatureCrypto"]], "getIdentityMapper": [["IdentityMapper"]], "setValidateUseKey": [["void", "boolean validateUseKey"]], "configureProperties": [["void"]], "getRealmParser": [["RealmParser"]], "getSignatureUsername": [["String"]], "getSignatureCrypto": [["Crypto"]], "setIssuer": [["void", "String issuer"]], "getCallbackHandler": [["CallbackHandler"]], "setEncryptionCryptoProperties": [["void", "Object encryptionCryptoProperties"]], "setBus": [["void", "Bus bus"]]}, "className": "StaticSTSProperties", "renamed": ["void", "function", "(", "Crypto", "arg0", ")", "{", "this", ".", "encryptionCrypto", "=", "arg0", ";", "}"], "nl": "Set the encryption Crypto object", "nlToks": ["Set", "the", "encryption", "Crypto", "object"], "path": "primesign/cxf/tree/master/services/sts/sts-core/src/main/java/org/apache/cxf/sts/StaticSTSProperties.java", "idx": 806}
{"memberVariables": {"originalMatrix": "QMatrix", "positions": "List<MatrixPosition>"}, "code": ["int", "function", "(", "int", "row", ",", "int", "column", ")", "{", "return", "originalMatrix", ".", "matrixItemUtility", "[", "row", "]", "[", "column", "]", ";", "}"], "memberFunctions": {"getLocalSequenceUtility": [["int", "MatrixPosition position"]], "getItemNames": [["int[]"]], "getRemainingUtility": [["int", "int row", "int column"]]}, "className": "QMatrixProjection", "renamed": ["int", "function", "(", "int", "arg0", ",", "int", "arg1", ")", "{", "return", "originalMatrix", ".", "matrixItemUtility", "[", "arg0", "]", "[", "arg1", "]", ";", "}"], "nl": "Get the utility of a cell in the projected q-matrix at a given cell position (row,column)", "nlToks": ["Get", "the", "utility", "of", "a", "cell", "in", "the", "projected", "q-matrix", "at", "a", "given", "cell", "position", "-LRB-", "row", ",", "column", "-RRB-"], "path": "prateek96/Data_Mining_Assignments/tree/master/Assignment_1/Assignment 1.12/QMatrixProjection.java", "idx": 807}
{"memberVariables": {"individualStructures": "HashMap<String,IndividualStructure>"}, "code": ["void", "function", "(", "String", "identifier", ",", "IndividualStructure", "individualStructure", ")", "{", "this", ".", "individualStructures", ".", "put", "(", "identifier", ",", "individualStructure", ")", ";", "}"], "memberFunctions": {"removeIndividualStructure": [["void", "String identifier"]], "setIndividualStructures": [["void", "HashMap<String,IndividualStructure> individualStructures"]], "clear": [["void"]], "getIndividualStructures": [["HashMap<String,IndividualStructure>"]]}, "className": "IndividualModel", "renamed": ["void", "function", "(", "String", "arg0", ",", "IndividualStructure", "arg1", ")", "{", "this", ".", "individualStructures", ".", "put", "(", "arg0", ",", "arg1", ")", ";", "}"], "nl": "Add an individual structure. If the individual structure identifier already exists the old individual structure will be overwritten.", "nlToks": ["Add", "an", "individual", "structure", ".", "If", "the", "individual", "structure", "identifier", "already", "exists", "the", "old", "individual", "structure", "will", "be", "overwritten", "."], "path": "plt-tud/r43ples/tree/master/src/main/java/de/tud/plt/r43ples/merging/model/structure/IndividualModel.java", "idx": 808}
{"memberVariables": {"functions": "Map<String,Method>", "current=new ThreadLocal<ELEvaluator>()": "ThreadLocal<ELEvaluator>", "context": "Context", "evaluator=new ExpressionEvaluatorImpl()": "ExpressionEvaluator", "vars": "Map<String,Object>"}, "code": ["Context", "function", "(", ")", "{", "return", "context", ";", "}"], "memberFunctions": {"setVariables": [["void", "Map<String,Object> vars"]], "resolveFunction": [["Method", "String prefix", "String name"]], "addFunction": [["void", "String prefix", "String functionName", "Method method"]], "resolveVariable": [["Object", "String name"]], "setVariable": [["void", "String name", "Object value"], ["void", "String name", "Object value"]], "getCurrent": [["ELEvaluator"]], "getVariable": [["Object", "String name"], ["Object", "String name"]], "evaluate": [["T", "String expr", "Class<T> clazz"]]}, "className": "ELEvaluator", "renamed": ["Context", "function", "(", ")", "{", "return", "context", ";", "}"], "nl": "Return the context with the functions and variables of the EL evaluator. ", "nlToks": ["Return", "the", "context", "with", "the", "functions", "and", "variables", "of", "the", "EL", "evaluator", "."], "path": "pingpangkuangmo/oozie/tree/master/core/src/main/java/org/apache/oozie/util/ELEvaluator.java", "idx": 810}
{"memberVariables": {"conflicting": "boolean", "tripleStateB": "SDDTripleStateEnum", "tripleStateA": "SDDTripleStateEnum", "automaticResolutionState": "SDDTripleStateEnum", "differences": "HashMap<String,Difference>"}, "code": ["SDDTripleStateEnum", "function", "(", ")", "{", "return", "tripleStateA", ";", "}"], "memberFunctions": {"isConflicting": [["boolean"]], "getTripleStateB": [["SDDTripleStateEnum"]], "setConflicting": [["void", "boolean conflicting"]], "getAutomaticResolutionState": [["SDDTripleStateEnum"]], "removeDifference": [["void", "String identifier"]], "setTripleStateB": [["void", "SDDTripleStateEnum tripleStateB"]], "getDifferences": [["HashMap<String,Difference>"]], "addDifference": [["void", "String identifier", "Difference difference"]], "setTripleStateA": [["void", "SDDTripleStateEnum tripleStateA"]], "setDifferences": [["void", "HashMap<String,Difference> differences"]], "setAutomaticResolutionState": [["void", "SDDTripleStateEnum automaticResolutionState"]]}, "className": "DifferenceGroup", "renamed": ["SDDTripleStateEnum", "function", "(", ")", "{", "return", "tripleStateA", ";", "}"], "nl": "Get the triple state in A.", "nlToks": ["Get", "the", "triple", "state", "in", "A."], "path": "plt-tud/r43ples/tree/master/src/main/java/de/tud/plt/r43ples/merging/model/structure/DifferenceGroup.java", "idx": 811}
{"memberVariables": {"userStoreManagers=new HashMap<String,Map<String,String>>()": "Map<String,Map<String,String>>"}, "code": ["void", "function", "(", "PropertyDTO", "[", "]", "userStoreManager", ",", "String", "domainName", ")", "{", "UserStoreMgtDataKeeper", ".", "userStoreManagers", ".", "put", "(", "domainName", ",", "convertArrayToMap", "(", "userStoreManager", ")", ")", ";", "}"], "memberFunctions": {"getAvailableDomainNames": [["Set<String>"]], "clearUserStoreManager": [["void"]], "convertArrayToMap": [["Map<String,String>", "PropertyDTO[] properties"]], "getUserStoreManager": [["Map<String,String>", "String domainName"]]}, "className": "UserStoreMgtDataKeeper", "renamed": ["void", "function", "(", "PropertyDTO", "[", "]", "arg0", ",", "String", "arg1", ")", "{", "UserStoreMgtDataKeeper", ".", "userStoreManagers", ".", "put", "(", "arg1", ",", "convertArrayToMap", "(", "arg0", ")", ")", ";", "}"], "nl": "Add a new user store manager to in-memory map, at the given domain name", "nlToks": ["Add", "a", "new", "user", "store", "manager", "to", "in-memory", "map", ",", "at", "the", "given", "domain", "name"], "path": "harsha1979/carbon-identity/tree/master/components/user-store/org.wso2.carbon.identity.user.store.configuration.ui/src/main/java/org/wso2/carbon/identity/user/store/configuration/ui/utils/UserStoreMgtDataKeeper.java", "idx": 812}
{"memberVariables": {"LOGGER=LoggerFactory.getLogger(FetcherTesterMailNotifier.class)": "Logger", "mailSender": "JavaMailSender", "velocityEngine": "VelocityEngine"}, "code": ["void", "function", "(", "JavaMailSender", "mailSender", ")", "{", "this", ".", "mailSender", "=", "mailSender", ";", "}"], "memberFunctions": {"sendEmail": [["void", "final List<String> emailRecipients", "final String fromEmail", "final File attachment", "final String subject", "final String body"], ["void", "final String toAddress", "final String fromAddress", "final File attachment", "final String subject", "final String body"]], "setVelocityEngine": [["void", "VelocityEngine velocityEngine"]]}, "className": "FetcherTesterMailNotifier", "renamed": ["void", "function", "(", "JavaMailSender", "arg0", ")", "{", "this", ".", "mailSender", "=", "arg0", ";", "}"], "nl": "Sets the mail sender.", "nlToks": ["Sets", "the", "mail", "sender", "."], "path": "pkesireddy/portico_fletcher/tree/master/FetcherTesterService/src/main/java/org/ithaka/cm/fetchertester/bo/FetcherTesterMailNotifier.java", "idx": 813}
{"memberVariables": {"serialVersionUID=-8866246036237312215L": "long", "interfaceAdapterCache": "HashMap<Class<?>,Object>", "cachingIsEnabled=true": "boolean", "classTable": "HashMap<Class<?>,JavaMembers>", "AKEY=\"ClassCache\"": "Object", "generatedClassSerial": "int", "classAdapterCache": "HashMap<JavaAdapter.JavaAdapterSignature,Class<?>>"}, "code": ["boolean", "function", "(", "ScriptableObject", "topScope", ")", "{", "if", "(", "topScope", ".", "getParentScope", "(", ")", "!=", "null", ")", "{", "throw", "new", "IllegalArgumentException", "(", ")", ";", "}", "if", "(", "this", "==", "topScope", ".", "associateValue", "(", "AKEY", ",", "this", ")", ")", "{", "return", "true", ";", "}", "return", "false", ";", "}"], "memberFunctions": {"clearCaches": [["void"]], "isInvokerOptimizationEnabled": [["boolean"]], "isCachingEnabled": [["boolean"]], "get": [["ClassCache", "Scriptable scope"]], "setCachingEnabled": [["void", "boolean enabled"]], "getClassCacheMap": [["Map<Class<?>,JavaMembers>"]], "newClassSerialNumber": [["int"]], "getInterfaceAdapter": [["Object", "Class<?> cl"]], "setInvokerOptimizationEnabled": [["void", "boolean enabled"]], "getInterfaceAdapterCacheMap": [["Map<JavaAdapter.JavaAdapterSignature,Class<?>>"]], "cacheInterfaceAdapter": [["void", "Class<?> cl", "Object iadapter"]]}, "className": "ClassCache", "renamed": ["boolean", "function", "(", "ScriptableObject", "arg0", ")", "{", "if", "(", "arg0", ".", "getParentScope", "(", ")", "!=", "null", ")", "{", "throw", "new", "IllegalArgumentException", "(", ")", ";", "}", "if", "(", "this", "==", "arg0", ".", "associateValue", "(", "AKEY", ",", "this", ")", ")", "{", "return", "true", ";", "}", "return", "false", ";", "}"], "nl": "Associate ClassCache object with the given top-level scope. The ClassCache object can only be associated with the given scope once.", "nlToks": ["Associate", "ClassCache", "object", "with", "the", "given", "top-level", "scope", ".", "The", "ClassCache", "object", "can", "only", "be", "associated", "with", "the", "given", "scope", "once", "."], "path": "adamfisk/littleshoot-client/tree/master/bin/rhino1_7R2/src/org/mozilla/javascript/ClassCache.java", "idx": 814}
{"memberVariables": {"produceMediaTypes": "List<String>", "bus": "Bus", "consumeMediaTypes": "List<String>", "enableStreaming": "boolean", "BUNDLE=BundleUtils.getBundle(AbstractJAXBProvider.class)": "ResourceBundle", "enableBuffering": "boolean", "LOG=LogUtils.getL7dLogger(AbstractJAXBProvider.class)": "Logger"}, "code": ["void", "function", "(", "Bus", "b", ")", "{", "if", "(", "bus", "!=", "null", ")", "{", "bus", "=", "b", ";", "}", "}"], "memberFunctions": {"init": [["void", "List<ClassResourceInfo> resources"]], "getBus": [["Bus"]], "setConsumeMediaTypes": [["void", "List<String> types"]], "setEnableBuffering": [["void", "boolean enableBuf"]], "getEnableStreaming": [["boolean"]], "getProduceMediaTypes": [["List<String>"]], "setEnableStreaming": [["void", "boolean enableStream"]], "setProduceMediaTypes": [["void", "List<String> types"]], "getConsumeMediaTypes": [["List<String>"]], "getEnableBuffering": [["boolean"]], "isPayloadEmpty": [["boolean", "HttpHeaders headers"], ["boolean", "MultivaluedMap<String,String> headers"]], "reportEmptyContentLength": [["void"]]}, "className": "AbstractConfigurableProvider", "renamed": ["void", "function", "(", "Bus", "arg0", ")", "{", "if", "(", "bus", "!=", "null", ")", "{", "bus", "=", "arg0", ";", "}", "}"], "nl": "Sets the Bus", "nlToks": ["Sets", "the", "Bus"], "path": "primesign/cxf/tree/master/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/provider/AbstractConfigurableProvider.java", "idx": 820}
{"memberVariables": {"rand=new Random(23432)": "Random"}, "code": ["void", "function", "(", ")", "{", "DenseMatrix64F", "mat", "=", "new", "DenseMatrix64F", "(", "7", ",", "5", ")", ";", "assertEquals", "(", "5", ",", "mat", ".", "getNumCols", "(", ")", ")", ";", "assertEquals", "(", "7", ",", "mat", ".", "getNumRows", "(", ")", ")", ";", "assertEquals", "(", "7", "*", "5", ",", "mat", ".", "data", ".", "length", ")", ";", "}"], "memberFunctions": {"testReshape": [["void"]], "testConstructorCopy": [["void"]], "testInBounds": [["void"]], "testConstruactorDoubleArray": [["void"]], "testGeneric": [["void"]], "set_ColumnMajor": [["void"]], "testSet_Matrix": [["void"]], "testConstructorSingleArray": [["void"]], "testSetReshape_Matrix": [["void"]], "wrap": [["void"]], "set_RowMajor": [["void"]]}, "className": "TestDenseMatrix64F", "renamed": ["void", "function", "(", ")", "{", "DenseMatrix64F", "loc0", "=", "new", "DenseMatrix64F", "(", "7", ",", "5", ")", ";", "assertEquals", "(", "5", ",", "loc0", ".", "getNumCols", "(", ")", ")", ";", "assertEquals", "(", "7", ",", "loc0", ".", "getNumRows", "(", ")", ")", ";", "assertEquals", "(", "7", "*", "5", ",", "loc0", ".", "data", ".", "length", ")", ";", "}"], "nl": "Tests the following constructor: DenseMatrix64F( int numCols , int numRows )", "nlToks": ["Tests", "the", "following", "constructor", ":", "DenseMatrix64F", "-LRB-", "int", "numCols", ",", "int", "numRows", "-RRB-"], "path": "adamaulia/efficient-java-matrix-library/tree/master/test/org/ejml/data/TestDenseMatrix64F.java", "idx": 821}
{"memberVariables": {"EXAMPLE=\"$GPRMC,120044.567,A,6011.552,N,02501.941,E,000.0,360.0,160705,006.1,E,A*0B\"": "String", "rmc": "RMCParser", "empty": "RMCParser"}, "code": ["void", "function", "(", ")", "{", "assertEquals", "(", "2005", ",", "rmc", ".", "getDate", "(", ")", ".", "getYear", "(", ")", ")", ";", "}"], "memberFunctions": {"testSetFaaModeWhenOmitted": [["void"]], "testSetDirectionOfVariationWithInvalidDirection": [["void"]], "testGetCorrectedCourse": [["void"]], "testGetDataStatus": [["void"]], "testConstructor": [["void"]], "testGetTime": [["void"]], "testSetCourse": [["void"]], "testSetFaaMode": [["void"]], "testSetVariation": [["void"]], "setUp": [["void"]], "testGetMonth": [["void"]], "testGetCourse": [["void"]], "testSetDate": [["void"]], "testSetDataStatus": [["void"]], "testGetDirectionOfVariation": [["void"]], "testGetDate": [["void"]], "testGetMagneticVariation": [["void"]], "testSetPosition": [["void"]], "testGetPosition": [["void"]], "testSetDirectionOfVariation": [["void"]], "testSetTime": [["void"]], "testGetDay": [["void"]], "testGetSpeed": [["void"]], "testGetFaaMode": [["void"]], "testSetSpeed": [["void"]]}, "className": "RMCTest", "renamed": ["void", "function", "(", ")", "{", "assertEquals", "(", "2005", ",", "rmc", ".", "getDate", "(", ")", ".", "getYear", "(", ")", ")", ";", "}"], "nl": "Test method for  {@link net.sf.marineapi.nmea.parser.RMCParser#getYear()}.", "nlToks": ["Test", "method", "for", "-LCB-", "@link", "net.sf.marineapi.nmea.parser.RMCParser", "#getYear", "-LRB-", "-RRB-", "-RCB-", "."], "path": "pkoziol/marine-api/tree/master/src/test/java/net/sf/marineapi/nmea/parser/RMCTest.java", "idx": 823}
{"memberVariables": {"geneList": "String", "name": "String"}, "code": ["void", "function", "(", "String", "geneList", ")", "{", "this", ".", "geneList", "=", "geneList", ";", "}"], "memberFunctions": {"setName": [["void", "String name"]], "getName": [["String"]], "getGeneList": [["String"]], "getId": [["String"]]}, "className": "GeneSet", "renamed": ["void", "function", "(", "String", "arg0", ")", "{", "this", ".", "geneList", "=", "arg0", ";", "}"], "nl": "Sets the List of Genes in the Set.", "nlToks": ["Sets", "the", "List", "of", "Genes", "in", "the", "Set", "."], "path": "adamabeshouse/cbioportal/tree/master/core/src/main/java/org/mskcc/cbio/portal/model/GeneSet.java", "idx": 827}
{"memberVariables": {"roles": "List<Role>", "name": "String", "id": "String", "secret": "byte[]"}, "code": ["List", "<", "Role", ">", "function", "(", ")", "{", "if", "(", "roles", "==", "null", ")", "{", "roles", "=", "new", "ArrayList", "<", "Role", ">", "(", ")", ";", "}", "return", "this", ".", "roles", ";", "}"], "memberFunctions": {"setName": [["void", "String value"]], "getName": [["String"]], "getSecret": [["byte[]"]], "setSecret": [["void", "byte[] value"]], "setId": [["void", "String value"]], "getId": [["String"]]}, "className": "ProjectValidation", "renamed": ["List", "<", "Role", ">", "function", "(", ")", "{", "if", "(", "roles", "==", "null", ")", "{", "roles", "=", "new", "ArrayList", "<", "Role", ">", "(", ")", ";", "}", "return", "this", ".", "roles", ";", "}"], "nl": "Gets the value of the roles property.  This accessor method returns a reference to the live list, not a snapshot. Therefore any modification you make to the returned list will be present inside the JAXB object. This is why there is not a set method for the roles property.  For example, to add a new item, do as follows:  getRoles().add(newItem);   Objects of the following type(s) are allowed in the list {@link Role }", "nlToks": ["Gets", "the", "value", "of", "the", "roles", "property", ".", "This", "accessor", "method", "returns", "a", "reference", "to", "the", "live", "list", ",", "not", "a", "snapshot", ".", "Therefore", "any", "modification", "you", "make", "to", "the", "returned", "list", "will", "be", "present", "inside", "the", "JAXB", "object", ".", "This", "is", "why", "there", "is", "not", "a", "set", "method", "for", "the", "roles", "property", ".", "For", "example", ",", "to", "add", "a", "new", "item", ",", "do", "as", "follows", ":", "getRoles", "-LRB-", "-RRB-", ".", "add", "-LRB-", "newItem", "-RRB-", ";", "Objects", "of", "the", "following", "type", "-LRB-", "s", "-RRB-", "are", "allowed", "in", "the", "list", "-LCB-", "@link", "Role", "-RCB-"], "path": "platformlayer/platformlayer/tree/master/auth/client/src/generated/xjc/org/platformlayer/auth/v1/ProjectValidation.java", "idx": 828}
{"memberVariables": {"referencedRevisionA": "String", "referencedRevisionLabelA": "String", "referencedRevisionLabelB": "String", "referencedRevisionB": "String", "triple": "Triple", "tripleResolutionState": "SDDTripleStateEnum", "resolutionState": "ResolutionStateEnum"}, "code": ["void", "function", "(", "String", "referencedRevisionA", ")", "{", "this", ".", "referencedRevisionA", "=", "referencedRevisionA", ";", "}"], "memberFunctions": {"getReferencedRevisionLabelB": [["String"]], "setResolutionState": [["void", "ResolutionStateEnum resolutionState"]], "getReferencedRevisionLabelA": [["String"]], "setReferencedRevisionLabelA": [["void", "String referencedRevisionLabelA"]], "getTripleResolutionState": [["SDDTripleStateEnum"]], "setReferencedRevisionLabelB": [["void", "String referencedRevisionLabelB"]], "getTriple": [["Triple"]], "getReferencedRevisionB": [["String"]], "setTripleResolutionState": [["void", "SDDTripleStateEnum tripleResolutionState"]], "setTriple": [["void", "Triple triple"]], "getReferencedRevisionA": [["String"]], "getResolutionState": [["ResolutionStateEnum"]], "setReferencedRevisionB": [["void", "String referencedRevisionB"]]}, "className": "Difference", "renamed": ["void", "function", "(", "String", "arg0", ")", "{", "this", ".", "referencedRevisionA", "=", "arg0", ";", "}"], "nl": "Set the referenced revision in A.", "nlToks": ["Set", "the", "referenced", "revision", "in", "A."], "path": "plt-tud/r43ples/tree/master/src/main/java/de/tud/plt/r43ples/merging/model/structure/Difference.java", "idx": 829}
{"memberVariables": {"handler": "IParserEventHandler", "GROUP_END=new GroupEndEvent()": "IParserEvent", "GROUP_START=new GroupStartEvent()": "IParserEvent", "DOCUMENT_START=new DocumentStartEvent()": "IParserEvent", "handlerStack=new ArrayDeque<IParserEventHandler>()": "Deque<IParserEventHandler>", "m_fontEncodings=new HashMap<Integer,String>()": "Map<Integer,String>", "stack=new ArrayDeque<ParserState>()": "Deque<ParserState>", "DOCUMENT_END=new DocumentEndEvent()": "IParserEvent", "state=new ParserState()": "ParserState", "skipBytes": "int"}, "code": ["void", "function", "(", "IParserEvent", "command", ")", "{", "IParserEventHandler", "uprHandler", "=", "new", "UprHandler", "(", "handler", ")", ";", "uprHandler", ".", "handleEvent", "(", "command", ")", ";", "handlerStack", ".", "push", "(", "handler", ")", ";", "handler", "=", "uprHandler", ";", "}"], "memberFunctions": {"processCharacter": [["void", "char c"]], "handleEvent": [["void", "IParserEvent event"]], "processDocumentEnd": [["void"]], "processGroupEnd": [["void"]], "processCommand": [["void", "Command command", "int parameter", "boolean hasParameter", "boolean optional"]], "parse": [["void", "IRtfSource source", "IRtfListener listener"]], "processCharacterBytes": [["void", "byte[] data"]], "processString": [["void", "String string"]], "processDocumentStart": [["void"]], "processUnicodeAlternateSkipCount": [["void", "int parameter"]], "handleCommand": [["void", "Command command", "int parameter", "boolean hasParameter", "boolean optional"]], "processGroupStart": [["void"]], "processFont": [["void", "int parameter"]], "processEncoding": [["void", "Command command", "boolean hasParameter", "int parameter"]], "processUnicode": [["void", "int parameter"]], "currentEncoding": [["String"]], "processBinaryBytes": [["void", "byte[] data"]], "processFontCharset": [["void", "int parameter"]]}, "className": "StandardRtfParser", "renamed": ["void", "function", "(", "IParserEvent", "arg0", ")", "{", "IParserEventHandler", "loc0", "=", "new", "UprHandler", "(", "handler", ")", ";", "loc0", ".", "handleEvent", "(", "arg0", ")", ";", "handlerStack", ".", "push", "(", "handler", ")", ";", "handler", "=", "loc0", ";", "}"], "nl": "Process a upr command: consume all of the RTF commands relating to this and emit events representing the Unicode content.", "nlToks": ["Process", "a", "upr", "command", ":", "consume", "all", "of", "the", "RTF", "commands", "relating", "to", "this", "and", "emit", "events", "representing", "the", "Unicode", "content", "."], "path": "harrisaoz/rtfparserkit/tree/master/RTF Parser Kit/src/main/java/com/rtfparserkit/parser/standard/StandardRtfParser.java", "idx": 832}
{"memberVariables": {"endDate": "Timestamp", "feedConfigId": "BigDecimal", "resultCode": "String", "serialVersionUID=1L": "long", "resultMessage": "String", "fileCount": "BigDecimal", "maxReceiptDate": "Timestamp", "downloadSize": "BigDecimal", "feedId": "BigDecimal", "configInfo": "String", "runId": "long", "errors": "byte[]", "runStatus": "String", "startDate": "Timestamp"}, "code": ["BigDecimal", "function", "(", ")", "{", "return", "this", ".", "downloadSize", ";", "}"], "memberFunctions": {"getFeedConfigId": [["BigDecimal"]], "getStartDate": [["Timestamp"]], "setFeedId": [["void", "BigDecimal feedId"]], "getResultCode": [["String"]], "setFeedConfigId": [["void", "BigDecimal feedConfigId"]], "setMaxReceiptDate": [["void", "Timestamp maxReceiptDate"]], "getRunId": [["long"]], "getEndDate": [["Timestamp"]], "setErrors": [["void", "byte[] errors"]], "getConfigInfo": [["String"]], "setEndDate": [["void", "Timestamp endDate"]], "getErrors": [["byte[]"]], "setFileCount": [["void", "BigDecimal fileCount"]], "getResultMessage": [["String"]], "setResultMessage": [["void", "String resultMessage"]], "getFileCount": [["BigDecimal"]], "getRunStatus": [["String"]], "setRunStatus": [["void", "String runStatus"]], "setStartDate": [["void", "Timestamp startDate"]], "getFeedId": [["BigDecimal"]], "setResultCode": [["void", "String resultCode"]], "setRunId": [["void", "long runId"]], "getMaxReceiptDate": [["Timestamp"]], "setConfigInfo": [["void", "String configInfo"]], "setDownloadSize": [["void", "BigDecimal downloadSize"]]}, "className": "PCLFetcherRunRecorderEntity", "renamed": ["BigDecimal", "function", "(", ")", "{", "return", "this", ".", "downloadSize", ";", "}"], "nl": "Gets the download size.", "nlToks": ["Gets", "the", "download", "size", "."], "path": "pkesireddy/portico_fletcher/tree/master/FetcherTesterService/src/main/java/org/ithaka/cm/fetchertester/entity/PCLFetcherRunRecorderEntity.java", "idx": 834}
{"memberVariables": {"numCantFindEigenvector": "int", "tol=1e-10": "double", "extractor": "EigenvalueExtractor", "rand=new Random(0x3434)": "Random"}, "code": ["void", "function", "(", ")", "{", "DenseMatrix64F", "A", "=", "new", "DenseMatrix64F", "(", "5", ",", "5", ",", "true", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ")", ";", "if", "(", "!", "extractor", ".", "process", "(", "A", ")", ")", "{", "throw", "new", "RuntimeException", "(", "\"Failed!\"", ")", ";", "}", "assertEquals", "(", "5", ",", "extractor", ".", "getNumberOfEigenvalues", "(", ")", ")", ";", "}"], "memberFunctions": {"evaluateScalingUp": [["void"]], "testMatrix0": [["void"]], "isAllComplex": [["boolean"]], "checkEigenvalues": [["int", "DenseMatrix64F a"]], "testMatrixZeroButUpperDiag": [["void"]], "testMatrixAlmostAllOnes": [["void"]], "evaluateRandom": [["void"]], "computeError": [["double", "DenseMatrix64F A", "DenseMatrix64F v", "double eigenvalue"]], "evaluateScaling": [["void", "double[] scales"]], "evaluateScalingDown": [["void"]], "testMatrixNegHessenberg": [["void"]], "hasComplex": [["boolean"]], "testMatrixVerySmallButUpperDiag": [["void"]]}, "className": "RealEigenvalueHessenbergStressTest", "renamed": ["void", "function", "(", ")", "{", "DenseMatrix64F", "loc0", "=", "new", "DenseMatrix64F", "(", "5", ",", "5", ",", "true", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ")", ";", "if", "(", "!", "extractor", ".", "process", "(", "loc0", ")", ")", "{", "throw", "new", "RuntimeException", "(", "\"srini_string\"", ")", ";", "}", "assertEquals", "(", "5", ",", "extractor", ".", "getNumberOfEigenvalues", "(", ")", ")", ";", "}"], "nl": "Special case that requires exceptional shifts to work", "nlToks": ["Special", "case", "that", "requires", "exceptional", "shifts", "to", "work"], "path": "adamaulia/efficient-java-matrix-library/tree/master/benchmarks/test/org/ejml/alg/dense/decompose/eig/RealEigenvalueHessenbergStressTest.java", "idx": 835}
{"memberVariables": {"PROPS=new ArrayList()": "List"}, "code": ["void", "function", "(", "AbstractSettings", "setting", ")", "{", "PROPS", ".", "add", "(", "setting", ")", ";", "}"], "memberFunctions": {"revertToDefault": [["void"]], "reload": [["void"]], "save": [["void"]], "setShouldSave": [["void", "boolean shouldSave"]], "removeSettings": [["void", "AbstractSettings setting"]]}, "className": "SettingsHandler", "renamed": ["void", "function", "(", "AbstractSettings", "arg0", ")", "{", "PROPS", ".", "add", "(", "arg0", ")", ";", "}"], "nl": "Adds a settings class to the list of factories that  this handler will act upon.", "nlToks": ["Adds", "a", "settings", "class", "to", "the", "list", "of", "factories", "that", "this", "handler", "will", "act", "upon", "."], "path": "adamfisk/littleshoot-client/tree/master/client/util/src/main/java/org/lastbamboo/client/util/settings/SettingsHandler.java", "idx": 836}
{"memberVariables": {"MAX_EVENTS=5": "int", "events=new ArrayDeque<IParserEvent>()": "Deque<IParserEvent>", "listener": "IRtfListener"}, "code": ["IParserEvent", "function", "(", "StringEvent", "event", ")", "{", "StringEvent", "lastEvent", "=", "(", "StringEvent", ")", "events", ".", "removeLast", "(", ")", ";", "StringEvent", "newEvent", "=", "new", "StringEvent", "(", "lastEvent", ".", "getString", "(", ")", "+", "event", ".", "getString", "(", ")", ")", ";", "return", "newEvent", ";", "}"], "memberFunctions": {"flushEvents": [["void"]], "handleEvent": [["void", "IParserEvent event"]], "getLastEvent": [["IParserEvent"]], "isComplete": [["boolean"]], "removeLastEvent": [["void"]]}, "className": "DefaultEventHandler", "renamed": ["IParserEvent", "function", "(", "StringEvent", "arg0", ")", "{", "StringEvent", "loc0", "=", "(", "StringEvent", ")", "events", ".", "removeLast", "(", ")", ";", "StringEvent", "loc1", "=", "new", "StringEvent", "(", "loc0", ".", "getString", "(", ")", "+", "arg0", ".", "getString", "(", ")", ")", ";", "return", "loc1", ";", "}"], "nl": "Removes the string event from the end of the buffer, merges it with the string event we've just received, and adds the new event to the end of the buffer.", "nlToks": ["Removes", "the", "string", "event", "from", "the", "end", "of", "the", "buffer", ",", "merges", "it", "with", "the", "string", "event", "we", "'ve", "just", "received", ",", "and", "adds", "the", "new", "event", "to", "the", "end", "of", "the", "buffer", "."], "path": "harrisaoz/rtfparserkit/tree/master/RTF Parser Kit/src/main/java/com/rtfparserkit/parser/standard/DefaultEventHandler.java", "idx": 837}
{"memberVariables": {"clientId": "String", "QUERY_BY_CLIENT_ID=\"ApprovedSite.getByClientId\"": "String", "QUERY_BY_CLIENT_ID_AND_USER_ID=\"ApprovedSite.getByClientIdAndUserId\"": "String", "QUERY_ALL=\"ApprovedSite.getAll\"": "String", "creationDate": "Date", "userId": "String", "allowedScopes": "Set<String>", "QUERY_BY_USER_ID=\"ApprovedSite.getByUserId\"": "String", "accessDate": "Date", "PARAM_USER_ID=\"userId\"": "String", "timeoutDate": "Date", "approvedAccessTokens=Sets.newHashSet()": "Set<OAuth2AccessTokenEntity>", "PARAM_CLIENT_ID=\"clientId\"": "String", "id": "Long"}, "code": ["boolean", "function", "(", ")", "{", "if", "(", "getTimeoutDate", "(", ")", "!=", "null", ")", "{", "Date", "now", "=", "new", "Date", "(", ")", ";", "if", "(", "now", ".", "after", "(", "getTimeoutDate", "(", ")", ")", ")", "{", "return", "true", ";", "}", "else", "{", "return", "false", ";", "}", "}", "else", "{", "return", "false", ";", "}", "}"], "memberFunctions": {"getClientId": [["String"]], "setApprovedAccessTokens": [["void", "Set<OAuth2AccessTokenEntity> approvedAccessTokens"]], "getId": [["Long"]], "getAccessDate": [["Date"]], "getCreationDate": [["Date"]], "setCreationDate": [["void", "Date creationDate"]], "getApprovedAccessTokens": [["Set<OAuth2AccessTokenEntity>"]], "getTimeoutDate": [["Date"]], "getAllowedScopes": [["Set<String>"]], "setId": [["void", "Long id"]], "setAllowedScopes": [["void", "Set<String> allowedScopes"]], "getUserId": [["String"]], "setTimeoutDate": [["void", "Date timeoutDate"]], "setUserId": [["void", "String userId"]], "setClientId": [["void", "String clientId"]], "setAccessDate": [["void", "Date accessDate"]]}, "className": "ApprovedSite", "renamed": ["boolean", "function", "(", ")", "{", "if", "(", "getTimeoutDate", "(", ")", "!=", "null", ")", "{", "Date", "loc0", "=", "new", "Date", "(", ")", ";", "if", "(", "loc0", ".", "after", "(", "getTimeoutDate", "(", ")", ")", ")", "{", "return", "true", ";", "}", "else", "{", "return", "false", ";", "}", "}", "else", "{", "return", "false", ";", "}", "}"], "nl": "Has this approval expired?", "nlToks": ["Has", "this", "approval", "expired", "?"], "path": "adilansari/OpenID-Connect-Java-Spring-Server/tree/master/openid-connect-common/src/main/java/org/mitre/openid/connect/model/ApprovedSite.java", "idx": 839}
{"memberVariables": {"ALL_DELIMITERS=new char[]{PARAM_DELIMITER,ELEM_DELIMITER}": "char[]", "PARAM_DELIMITER=';'": "char", "ELEM_DELIMITER=','": "char", "DEFAULT=new BasicHeaderValueParser()": "BasicHeaderValueParser"}, "code": ["NameValuePair", "function", "(", "final", "String", "name", ",", "final", "String", "value", ")", "{", "return", "new", "BasicNameValuePair", "(", "name", ",", "value", ")", ";", "}"], "memberFunctions": {"parseHeaderElement": [["HeaderElement", "final String value", "HeaderValueParser parser"], ["HeaderElement", "final CharArrayBuffer buffer", "final ParserCursor cursor"]], "parseElements": [["HeaderElement[]", "final String value", "HeaderValueParser parser"], ["HeaderElement[]", "final CharArrayBuffer buffer", "final ParserCursor cursor"]], "createHeaderElement": [["HeaderElement", "final String name", "final String value", "final NameValuePair[] params"]], "parseNameValuePair": [["NameValuePair", "final String value", "HeaderValueParser parser"], ["NameValuePair", "final CharArrayBuffer buffer", "final ParserCursor cursor"], ["NameValuePair", "final CharArrayBuffer buffer", "final ParserCursor cursor", "final char[] delimiters"]], "isOneOf": [["boolean", "final char ch", "final char[] chs"]], "parseParameters": [["NameValuePair[]", "final String value", "HeaderValueParser parser"], ["NameValuePair[]", "final CharArrayBuffer buffer", "final ParserCursor cursor"]]}, "className": "BasicHeaderValueParser", "renamed": ["NameValuePair", "function", "(", "final", "String", "arg0", ",", "final", "String", "arg1", ")", "{", "return", "new", "BasicNameValuePair", "(", "arg0", ",", "arg1", ")", ";", "}"], "nl": "Creates a name-value pair. Called from  {@link #parseNameValuePair}.", "nlToks": ["Creates", "a", "name-value", "pair", ".", "Called", "from", "-LCB-", "@link", "#parseNameValuePair", "-RCB-", "."], "path": "pritamkhose/open-gpstracker.code/tree/master/external_sources/httpcore-4.1.1/httpcore/src/main/java/org/apache/ogt/http/message/BasicHeaderValueParser.java", "idx": 841}
{"memberVariables": {"UTF8_CHARSET=Charset.forName(\"utf-8\")": "Charset", "DEFAULT_BUFFER_SIZE=1024 * 4": "int"}, "code": ["String", "function", "(", "byte", "[", "]", "bytes", ",", "String", "charsetName", ")", "{", "try", "{", "return", "new", "String", "(", "bytes", ",", "charsetName", ")", ";", "}", "catch", "(", "UnsupportedEncodingException", "e", ")", "{", "throw", "new", "RuntimeException", "(", "\"Impossible failure: Charset.forName(\"\"", "+", "charsetName", "+", "\"\") returns invalid name.\"", ")", ";", "}", "}"], "memberFunctions": {"readBytesFromStream": [["byte[]", "InputStream in"]], "loadIntoBAIS": [["ByteArrayInputStream", "InputStream in"]], "isEmpty": [["boolean", "InputStream is"]], "toString": [["String", "final InputStream input"], ["String", "final InputStream input", "String charset"], ["String", "final InputStream input", "int bufferSize"], ["String", "final InputStream input", "int bufferSize", "String charset"], ["String", "final Reader input"], ["String", "final Reader input", "int bufSize"]], "consume": [["void", "InputStream in"], ["void", "final InputStream input", "int atLeast"]], "copy": [["int", "final InputStream input", "final OutputStream output"], ["int", "final InputStream input", "final OutputStream output", "int bufferSize"], ["void", "final Reader input", "final Writer output", "final int bufferSize"]], "copyAtLeast": [["void", "final InputStream input", "final OutputStream output", "int atLeast"]], "transferTo": [["void", "InputStream inputStream", "File destinationFile"]], "isEof": [["boolean", "int result"]], "copyAndCloseInput": [["int", "final InputStream input", "final OutputStream output"], ["int", "final InputStream input", "final OutputStream output", "int bufferSize"], ["void", "final Reader input", "final Writer output"], ["void", "final Reader input", "final Writer output", "int bufferSize"]], "readStringFromStream": [["String", "InputStream in"]]}, "className": "IOUtils", "renamed": ["String", "function", "(", "byte", "[", "]", "arg0", ",", "String", "arg1", ")", "{", "try", "{", "return", "new", "String", "(", "arg0", ",", "arg1", ")", ";", "}", "catch", "(", "UnsupportedEncodingException", "loc0", ")", "{", "throw", "new", "RuntimeException", "(", "\"srini_string\"", "=", "\"srini_string\"", ")", ";", "}", "}"], "nl": "Use this function instead of new String(byte[], String) to avoid surprises from  non-standard default encodings.", "nlToks": ["Use", "this", "function", "instead", "of", "new", "String", "-LRB-", "byte", "-LSB-", "-RSB-", ",", "String", "-RRB-", "to", "avoid", "surprises", "from", "non-standard", "default", "encodings", "."], "path": "primesign/cxf/tree/master/core/src/main/java/org/apache/cxf/helpers/IOUtils.java", "idx": 842}
{"memberVariables": {"isRaw": "boolean", "intBuf": "byte[]", "MAX_INT_BYTES=21": "int", "format": "PackFormatInputStream", "packed": "ByteArrayOutputStream"}, "code": ["void", "function", "(", "short", "value", ")", "{", "format", ".", "checkType", "(", "'h'", ",", "true", ")", ";", "packLong", "(", "value", ",", "true", ")", ";", "}"], "memberFunctions": {"getValue": [["byte[]"]], "packLong": [["void", "long x", "boolean signed"]], "reset": [["void"]], "getFormat": [["String"]], "addByte": [["void", "byte value"]], "addInt": [["void", "int value"]], "addLong": [["void", "long value"]], "addRecord": [["void", "long value"]], "addByteArray": [["void", "byte[] value"], ["void", "byte[] value", "int off", "int len"]], "addString": [["void", "String value"]]}, "className": "PackOutputStream", "renamed": ["void", "function", "(", "short", "arg0", ")", "{", "format", ".", "checkType", "(", "'h'", ",", "true", ")", ";", "packLong", "(", "arg0", ",", "true", ")", ";", "}"], "nl": "Add a short field to the stream. \\param value The short value to be added.", "nlToks": ["Add", "a", "short", "field", "to", "the", "stream", ".", "\\", "param", "value", "The", "short", "value", "to", "be", "added", "."], "path": "adamlsd/mongo/tree/master/src/third_party/wiredtiger/lang/java/src/com/wiredtiger/db/PackOutputStream.java", "idx": 843}
{"memberVariables": {"templates": "EmailTemplateDTO[]", "emailTypes": "Map<String,String>"}, "code": ["EmailTemplateDTO", "function", "(", "int", "index", ")", "{", "EmailTemplateDTO", "template", "=", "null", ";", "if", "(", "index", "<=", "templates", ".", "length", ")", "{", "template", "=", "templates", "[", "index", "]", ";", "}", "return", "template", ";", "}"], "memberFunctions": {"setTemplate": [["void", "EmailTemplateDTO emailTemplate"]], "getEmailTypes": [["Map<String,String>"]], "setTemplates": [["void", "EmailTemplateDTO[] templates"]], "setEmailTypes": [["void", "Map<String,String> emailTypes"]], "getTemplates": [["EmailTemplateDTO[]"]]}, "className": "EmailConfigDTO", "renamed": ["EmailTemplateDTO", "function", "(", "int", "arg0", ")", "{", "EmailTemplateDTO", "loc0", "=", "null", ";", "if", "(", "arg0", "<=", "templates", ".", "length", ")", "{", "loc0", "=", "templates", "[", "arg0", "]", ";", "}", "return", "loc0", ";", "}"], "nl": "This method is used to get the email template to be displayed with the given index.", "nlToks": ["This", "method", "is", "used", "to", "get", "the", "email", "template", "to", "be", "displayed", "with", "the", "given", "index", "."], "path": "harsha1979/carbon-identity/tree/master/components/identity-mgt/org.wso2.carbon.identity.mgt.ui/src/main/java/org/wso2/carbon/identity/mgt/ui/EmailConfigDTO.java", "idx": 849}
{"memberVariables": {"status=WorkflowAction.Status.PREP": "Status", "conf=null": "String", "consoleUrl=null": "String", "externalStatus=null": "String", "trackerUri=null": "String", "data=null": "String", "name=null": "String", "retries": "int", "transition=null": "String", "externalId=null": "String", "errorMessage=null": "String", "type=null": "String", "errorCode=null": "String", "startTime": "Date", "id": "String", "endTime": "Date"}, "code": ["JSONArray", "function", "(", "List", "<", "?", "extends", "JsonWorkflowAction", ">", "nodes", ")", "{", "JSONArray", "array", "=", "new", "JSONArray", "(", ")", ";", "for", "(", "JsonWorkflowAction", "node", ":", "nodes", ")", "{", "array", ".", "add", "(", "node", ".", "toJSONObject", "(", ")", ")", ";", "}", "return", "array", ";", "}"], "memberFunctions": {"setName": [["void", "String name"]], "getConsoleUrl": [["String"]], "getName": [["String"]], "getId": [["String"]], "getStatus": [["Status"]], "getExternalId": [["String"]], "setTrackerUri": [["void", "String trackerUri"]], "getEndTime": [["Date"]], "getRetries": [["int"]], "getErrorCode": [["String"]], "toJSONObject": [["JSONObject"]], "setId": [["void", "String id"]], "getStartTime": [["Date"]], "setStartTime": [["void", "Date startTime"]], "setExternalId": [["void", "String externalId"]], "getData": [["String"]], "fromJSONArray": [["List<JsonWorkflowAction>", "JSONArray array"]], "getConf": [["String"]], "setData": [["void", "String data"]], "setExternalStatus": [["void", "String externalStatus"]], "setConsoleUrl": [["void", "String consoleUrl"]], "setType": [["void", "String type"]], "getExternalStatus": [["String"]], "setConf": [["void", "String conf"]], "setStatus": [["void", "Status status"]], "setRetries": [["void", "int retries"]], "setErrorInfo": [["void", "String errorCode", "String errorMessage"]], "getType": [["String"]], "setEndTime": [["void", "Date endTime"]], "getTransition": [["String"]], "setTransition": [["void", "String transition"]], "toString": [["String"]], "getTrackerUri": [["String"]], "getErrorMessage": [["String"]]}, "className": "JsonWorkflowAction", "renamed": ["JSONArray", "function", "(", "List", "<", "?", "extends", "JsonWorkflowAction", ">", "arg0", ")", "{", "JSONArray", "loc0", "=", "new", "JSONArray", "(", ")", ";", "for", "(", "JsonWorkflowAction", "loc1", ":", "arg0", ")", "{", "loc0", ".", "add", "(", "loc1", ".", "toJSONObject", "(", ")", ")", ";", "}", "return", "loc0", ";", "}"], "nl": "Convert a nodes list into a JSONArray.", "nlToks": ["Convert", "a", "nodes", "list", "into", "a", "JSONArray", "."], "path": "pingpangkuangmo/oozie/tree/master/client/src/main/java/org/apache/oozie/client/rest/JsonWorkflowAction.java", "idx": 851}
{"memberVariables": {"COLLECTION_INTERFACES_BY_NAMES=new TypeMap(new Class[]{java.util.List.class,java.util.Collection.class,java.util.Map.class,java.util.Set.class})": "TypeMap", "COLLECTION_CLASSES_BY_NAMES=new TypeMap(new Class[]{java.util.ArrayList.class,java.util.LinkedList.class,java.util.Vector.class,java.util.HashMap.class,java.util.LinkedHashMap.class,java.util.TreeMap.class,java.util.TreeSet.class,java.util.HashSet.class,java.util.LinkedHashSet.class,java.util.Hashtable.class})": "TypeMap"}, "code": ["Class", "<", "?", ">", "function", "(", "String", "shortName", ")", "{", "Class", "<", "?", ">", "cls", "=", "COLLECTION_CLASSES_BY_NAMES", ".", "typeFor", "(", "shortName", ")", ";", "if", "(", "cls", "!=", "null", ")", "{", "return", "cls", ";", "}", "return", "COLLECTION_INTERFACES_BY_NAMES", ".", "typeFor", "(", "shortName", ")", ";", "}"], "memberFunctions": {"addWithoutDuplicates": [["int", "Collection<String> source", "Collection<String> target"], ["T[]", "T[] values", "T newValue"], ["T[]", "T[] values", "T[] newValues"]], "areEqual": [["boolean", "Object value", "Object otherValue"]], "areSemanticEquals": [["boolean", "T[] a", "T[] b"]], "valuesAreTransitivelyEqual": [["boolean", "Object[] thisArray", "Object[] thatArray"]], "isCollectionType": [["boolean", "String typeName", "boolean includeInterfaces"], ["boolean", "Class<?> clazzType", "boolean includeInterfaces"]], "isEmpty": [["boolean", "Object[] items"]], "isNotEmpty": [["boolean", "Object[] items"]], "asSet": [["Set<T>", "T[] items"]], "invertedMapFrom": [["Map<V,K>", "Map<K,V> source"]], "arraysAreEqual": [["boolean", "Object value", "Object otherValue"]], "mapFrom": [["Map<K,V>", "K[] keys", "V[] values"]]}, "className": "CollectionUtil", "renamed": ["Class", "<", "?", ">", "function", "(", "String", "arg0", ")", "{", "Class", "<", "?", ">", "loc0", "=", "COLLECTION_CLASSES_BY_NAMES", ".", "typeFor", "(", "arg0", ")", ";", "if", "(", "loc0", "!=", "null", ")", "{", "return", "loc0", ";", "}", "return", "COLLECTION_INTERFACES_BY_NAMES", ".", "typeFor", "(", "arg0", ")", ";", "}"], "nl": "Returns the collection type if we recognize it by its short name.", "nlToks": ["Returns", "the", "collection", "type", "if", "we", "recognize", "it", "by", "its", "short", "name", "."], "path": "adangel/pmd/tree/master/pmd-core/src/main/java/net/sourceforge/pmd/util/CollectionUtil.java", "idx": 852}
{"memberVariables": {"bus": "Bus", "resolvers=new CopyOnWriteArrayList<EndpointResolver>()": "List<EndpointResolver>"}, "code": ["EndpointReferenceType", "function", "(", "QName", "serviceName", ")", "{", "EndpointReferenceType", "logical", "=", "null", ";", "for", "(", "EndpointResolver", "resolver", ":", "resolvers", ")", "{", "logical", "=", "resolver", ".", "mint", "(", "serviceName", ")", ";", "if", "(", "logical", "!=", "null", ")", "{", "break", ";", "}", "}", "return", "logical", ";", "}"], "memberFunctions": {"resolve": [["EndpointReferenceType", "EndpointReferenceType logical"]], "unregister": [["void", "EndpointResolver resolver"]], "getResolvers": [["List<EndpointResolver>"]], "renew": [["EndpointReferenceType", "EndpointReferenceType logical", "EndpointReferenceType physical"]], "setBus": [["void", "Bus b"]], "register": [["void", "EndpointResolver resolver"]]}, "className": "EndpointResolverRegistryImpl", "renamed": ["EndpointReferenceType", "function", "(", "QName", "arg0", ")", "{", "EndpointReferenceType", "loc0", "=", "null", ";", "for", "(", "EndpointResolver", "loc1", ":", "resolvers", ")", "{", "loc0", "=", "loc1", ".", "mint", "(", "arg0", ")", ";", "if", "(", "loc0", "!=", "null", ")", "{", "break", ";", "}", "}", "return", "loc0", ";", "}"], "nl": "Walk the list of registered EndpointResolvers, so as to mint a new  abstract EPR for a given service name.", "nlToks": ["Walk", "the", "list", "of", "registered", "EndpointResolvers", ",", "so", "as", "to", "mint", "a", "new", "abstract", "EPR", "for", "a", "given", "service", "name", "."], "path": "primesign/cxf/tree/master/core/src/main/java/org/apache/cxf/bus/managers/EndpointResolverRegistryImpl.java", "idx": 853}
{"memberVariables": {}, "code": ["void", "function", "(", "byte", "[", "]", "buf", ",", "int", "pos", ",", "int", "v", ")", "{", "checkBoundary", "(", "buf", ",", "pos", ",", "4", ")", ";", "buf", "[", "pos", "++", "]", "=", "(", "byte", ")", "(", "0xff", "&", "(", "v", ">>", "24", ")", ")", ";", "buf", "[", "pos", "++", "]", "=", "(", "byte", ")", "(", "0xff", "&", "(", "v", ">>", "16", ")", ")", ";", "buf", "[", "pos", "++", "]", "=", "(", "byte", ")", "(", "0xff", "&", "(", "v", ">>", "8", ")", ")", ";", "buf", "[", "pos", "]", "=", "(", "byte", ")", "(", "0xff", "&", "v", ")", ";", "}"], "memberFunctions": {"writeByte": [["void", "byte[] buf", "int pos", "byte v"], ["void", "ByteBuffer buf", "int pos", "byte v"], ["void", "OutputStream out", "byte v"]], "writeLong": [["void", "byte[] buf", "int pos", "long v"], ["void", "OutputStream out", "long v"]], "readLong": [["long", "byte[] buf", "int pos"]], "readShort": [["short", "byte[] buf", "int pos"]], "checkBoundary": [["void", "byte[] buf", "int pos", "int len"]], "writeShort": [["void", "byte[] buf", "int pos", "short v"], ["void", "OutputStream out", "short v"]], "readByte": [["byte", "byte[] buf", "int pos"], ["byte", "ByteBuffer buf", "int pos"]], "readInt": [["int", "byte[] buf", "int pos"], ["int", "ByteBuffer buf", "int pos"]]}, "className": "ByteIOUtils", "renamed": ["void", "function", "(", "byte", "[", "]", "arg0", ",", "int", "arg1", ",", "int", "arg2", ")", "{", "checkBoundary", "(", "arg0", ",", "arg1", ",", "4", ")", ";", "arg0", "[", "arg1", "++", "]", "=", "(", "byte", ")", "(", "0xff", "&", "(", "arg2", ">>", "24", ")", ")", ";", "arg0", "[", "arg1", "++", "]", "=", "(", "byte", ")", "(", "0xff", "&", "(", "arg2", ">>", "16", ")", ")", ";", "arg0", "[", "arg1", "++", "]", "=", "(", "byte", ")", "(", "0xff", "&", "(", "arg2", ">>", "8", ")", ")", ";", "arg0", "[", "arg1", "]", "=", "(", "byte", ")", "(", "0xff", "&", "arg2", ")", ";", "}"], "nl": "Writes a specific integer value (4 bytes) to the output byte array at the given offset.", "nlToks": ["Writes", "a", "specific", "integer", "value", "-LRB-", "4", "bytes", "-RRB-", "to", "the", "output", "byte", "array", "at", "the", "given", "offset", "."], "path": "poemlin/alluxio/tree/master/core/common/src/main/java/alluxio/util/io/ByteIOUtils.java", "idx": 854}
{"memberVariables": {"ourInstance=new GeneralMotorCon()": "GeneralMotorCon", "spin90Time=3000": "int", "TAG=\"GMC\"": "String", "batLvl=0": "int", "threadTimer=0": "long", "spinSpeed=2": "int", "cmd": "CommandManager", "hoverTime=2000": "int", "speed=10": "int", "spin90Speed=50": "int", "drone": "ARDrone", "spinTime=50": "int"}, "code": ["void", "function", "(", ")", "{", "SpaceXGUI", ".", "getInstance", "(", ")", ".", "appendToConsole", "(", "TAG", ",", "\" - spinning 90 left\"", ")", ";", "cmd", ".", "setLedsAnimation", "(", "LEDAnimation", ".", "BLINK_ORANGE", ",", "3", ",", "(", "spinTime", "/", "1000", ")", ")", ";", "cmd", ".", "spinLeft", "(", "spin90Speed", ")", ".", "doFor", "(", "spin90Time", ")", ";", "cmd", ".", "hover", "(", ")", ".", "doFor", "(", "hoverTime", ")", ";", "}"], "memberFunctions": {"spinRight": [["void"]], "takeoff": [["void"]], "forward": [["void", "int time"]], "spinLeft": [["void"]], "right": [["void"]], "lowerAltitude": [["void"]], "spin90Right": [["void"]], "landing": [["void"]], "setDrone": [["void", "ARDrone drone"]], "left": [["void"]], "backward": [["void", "int time"]], "getInstance": [["GeneralMotorCon"]], "setBatLvl": [["void", "int batLvl"]], "waitFor": [["void", "int millis"]], "getBatLvl": [["int"]], "onStop": [["void"]], "raiseAltitude": [["void"]]}, "className": "GeneralMotorCon", "renamed": ["void", "function", "(", ")", "{", "SpaceXGUI", ".", "getInstance", "(", ")", ".", "appendToConsole", "(", "TAG", ",", "\"srini_string\"", ")", ";", "cmd", ".", "setLedsAnimation", "(", "LEDAnimation", ".", "BLINK_ORANGE", ",", "3", ",", "(", "spinTime", "/", "1000", ")", ")", ";", "cmd", ".", "spinLeft", "(", "spin90Speed", ")", ".", "doFor", "(", "spin90Time", ")", ";", "cmd", ".", "hover", "(", ")", ".", "doFor", "(", "hoverTime", ")", ";", "}"], "nl": "Spin 90 Left Spin the drone 90 degrees to the left", "nlToks": ["Spin", "90", "Left", "Spin", "the", "drone", "90", "degrees", "to", "the", "left"], "path": "02343Gruppe2/02343_Ardrone/tree/master/src/algo/GeneralMotorCon.java", "idx": 856}
{"memberVariables": {"data": "HashMap<String,OneMeasurement>", "MEASUREMENT_TYPE_DEFAULT=\"histogram\"": "String", "measurementproperties=null": "Properties", "histogram=true": "boolean", "singleton=null": "Measurements", "_props": "Properties", "MEASUREMENT_TYPE=\"measurementtype\"": "String"}, "code": ["Measurements", "function", "(", ")", "{", "if", "(", "singleton", "==", "null", ")", "{", "singleton", "=", "new", "Measurements", "(", "measurementproperties", ")", ";", "}", "return", "singleton", ";", "}"], "memberFunctions": {"exportMeasurements": [["void", "MeasurementsExporter exporter"]], "measure": [["void", "String operation", "int latency"]], "getSummary": [["String"]], "setProperties": [["void", "Properties props"]], "constructOneMeasurement": [["OneMeasurement", "String name"]], "reportReturnCode": [["void", "String operation", "int code"]]}, "className": "Measurements", "renamed": ["Measurements", "function", "(", ")", "{", "if", "(", "singleton", "==", "null", ")", "{", "singleton", "=", "new", "Measurements", "(", "measurementproperties", ")", ";", "}", "return", "singleton", ";", "}"], "nl": "Return the singleton Measurements object.", "nlToks": ["Return", "the", "singleton", "Measurements", "object", "."], "path": "adamhadani/YCSB/tree/master/src/com/yahoo/ycsb/measurements/Measurements.java", "idx": 857}
{"memberVariables": {"marshaller": "Marshaller", "userObjectFactory": "boolean", "object": "Object"}, "code": ["JaxbBuilder", "function", "(", "final", "Marshaller", "marshaller", ")", "{", "this", ".", "marshaller", "=", "marshaller", ";", "return", "this", ";", "}"], "memberFunctions": {"build": [["Source"]], "getPreparedJaxbObject": [["Object"]], "createDefaultMarshaller": [["void"]], "createInferredJAXBElement": [["JAXBElement<T>", "final T object"]], "createJAXBElement": [["JAXBElement<T>", "final T jaxbObj"]], "createJaxbElementFromObjectFactory": [["JAXBElement<T>", "final T obj"]], "getObjectFactoryClass": [["Class<?>", "final T obj"]], "inferName": [["String", "final Class clazz"]], "useObjectFactory": [["JaxbBuilder"]]}, "className": "JaxbBuilder", "renamed": ["JaxbBuilder", "function", "(", "final", "Marshaller", "arg0", ")", "{", "this", ".", "marshaller", "=", "arg0", ";", "return", "this", ";", "}"], "nl": "Sets a non-default  {@link Marshaller} to use when creating the {@link Source}.", "nlToks": ["Sets", "a", "non-default", "-LCB-", "@link", "Marshaller", "-RCB-", "to", "use", "when", "creating", "the", "-LCB-", "@link", "Source", "-RCB-", "."], "path": "phbenisc/xmlunit/tree/master/xmlunit-core/src/main/java/org/xmlunit/builder/JaxbBuilder.java", "idx": 858}
{"memberVariables": {"keyWrapAlgorithm=WSConstants.KEYTRANSPORT_RSAOEP": "String", "keyIdentifierType=WSConstants.ISSUER_SERIAL": "int", "acceptedKeyWrapAlgorithms=new ArrayList<>()": "List<String>", "encryptionName": "String", "acceptedEncryptionAlgorithms=new ArrayList<>()": "List<String>", "encryptionAlgorithm=WSConstants.AES_256": "String"}, "code": ["void", "function", "(", "List", "<", "String", ">", "acceptedKeyWrapAlgorithms", ")", "{", "this", ".", "acceptedKeyWrapAlgorithms", "=", "acceptedKeyWrapAlgorithms", ";", "}"], "memberFunctions": {"setEncryptionName": [["void", "String encryptionName"]], "getAcceptedEncryptionAlgorithms": [["List<String>"]], "getEncryptionAlgorithm": [["String"]], "getAcceptedKeyWrapAlgorithms": [["List<String>"]], "getKeyWrapAlgorithm": [["String"]], "setKeyWrapAlgorithm": [["void", "String keyWrapAlgorithm"]], "getKeyIdentifierType": [["int"]], "setAcceptedEncryptionAlgorithms": [["void", "List<String> acceptedEncryptionAlgorithms"]], "setKeyIdentifierType": [["void", "int keyIdentifierType"]], "setEncryptionAlgorithm": [["void", "String encryptionAlgorithm"]], "getEncryptionName": [["String"]]}, "className": "EncryptionProperties", "renamed": ["void", "function", "(", "List", "<", "String", ">", "arg0", ")", "{", "this", ".", "acceptedKeyWrapAlgorithms", "=", "arg0", ";", "}"], "nl": "Set the list of accepted key-wrap algorithms. A request can contain a wst:KeyWrapAlgorithm uri for use in encrypting an issued token. The algorithm specified must be contained in this list. The default algorithms are RSA 1.5 and RSA OEP.", "nlToks": ["Set", "the", "list", "of", "accepted", "key-wrap", "algorithms", ".", "A", "request", "can", "contain", "a", "wst", ":", "KeyWrapAlgorithm", "uri", "for", "use", "in", "encrypting", "an", "issued", "token", ".", "The", "algorithm", "specified", "must", "be", "contained", "in", "this", "list", ".", "The", "default", "algorithms", "are", "RSA", "1.5", "and", "RSA", "OEP", "."], "path": "primesign/cxf/tree/master/services/sts/sts-core/src/main/java/org/apache/cxf/sts/service/EncryptionProperties.java", "idx": 860}
{"memberVariables": {"UNRESERVED_CHARACTERS=new HashSet<Character>()": "Set<Character>", "axMapping=new HashMap<String,String>()": "Map<String,String>", "log=LogFactory.getLog(OpenIDUtil.class)": "Log"}, "code": ["boolean", "function", "(", "String", "username", ",", "String", "password", ")", "{", "try", "{", "UserStoreManager", "userStore", "=", "IdentityTenantUtil", ".", "getRealm", "(", "null", ",", "username", ")", ".", "getUserStoreManager", "(", ")", ";", "return", "userStore", ".", "authenticate", "(", "username", ",", "password", ")", ";", "}", "catch", "(", "Exception", "e", ")", "{", "log", ".", "error", "(", "\"Error while authenticating user\"", ",", "e", ")", ";", "return", "false", ";", "}", "}"], "memberFunctions": {"normalizeUrlEncoding": [["String", "String text"]], "getOpenID": [["String", "String userName"]], "getOpenIDUserPattern": [["String"]], "getMappedAxSchema": [["String", "String val"]], "getUserName": [["String", "String openID"]], "getOpenIDLoginPageURL": [["String"]], "getOpenIDServerURL": [["String"]], "generateOpenID": [["String", "String user"]]}, "className": "OpenIDUtil", "renamed": ["boolean", "function", "(", "String", "arg0", ",", "String", "arg1", ")", "{", "try", "{", "UserStoreManager", "loc0", "=", "IdentityTenantUtil", ".", "getRealm", "(", "null", ",", "arg0", ")", ".", "getUserStoreManager", "(", ")", ";", "return", "loc0", ".", "authenticate", "(", "arg0", ",", "arg1", ")", ";", "}", "catch", "(", "Exception", "loc0", ")", "{", "log", ".", "error", "(", "\"srini_string\"", ",", "loc0", ")", ";", "return", "false", ";", "}", "}"], "nl": "Verify user name/password authentication.", "nlToks": ["Verify", "user", "name/password", "authentication", "."], "path": "hasinthaindrajee/identity-inbound-auth-openid/tree/master/components/org.wso2.carbon.identity.provider/src/main/java/org/wso2/carbon/identity/provider/openid/OpenIDUtil.java", "idx": 863}
{"memberVariables": {"mPersistedFiles": "Set<Long>", "mLock=new Object()": "Object", "mUfs": "UnderFileSystem", "mBlockWorker": "BlockWorker", "mPersistenceRateLimiter": "RateLimiter", "mPersistingInProgressFiles": "Map<Long,Map<Long,Long>>", "LOG=LoggerFactory.getLogger(Constants.LOGGER_TYPE)": "Logger"}, "code": ["boolean", "function", "(", "long", "fileId", ")", "{", "synchronized", "(", "mLock", ")", "{", "return", "mPersistedFiles", ".", "contains", "(", "fileId", ")", ";", "}", "}"], "memberFunctions": {"prepareUfsFilePath": [["String", "long fileId"]], "clearPersistedFiles": [["void", "List<Long> persistedFiles"]], "fileExistsInUfs": [["boolean", "long fileId"]], "needPersistence": [["boolean", "long fileId"]], "persistFile": [["void", "long fileId", "List<Long> blockIds"]], "addPersistedFile": [["void", "long fileId"]], "isFilePersisted": [["boolean", "long fileId"]], "lockBlocks": [["void", "long fileId", "List<Long> blockIds"]], "getPersistedFiles": [["List<Long>"]]}, "className": "FileDataManager", "renamed": ["boolean", "function", "(", "long", "arg0", ")", "{", "synchronized", "(", "mLock", ")", "{", "return", "mPersistedFiles", ".", "contains", "(", "arg0", ")", ";", "}", "}"], "nl": "Checks if the given file is being persisted.", "nlToks": ["Checks", "if", "the", "given", "file", "is", "being", "persisted", "."], "path": "poemlin/alluxio/tree/master/core/server/src/main/java/alluxio/worker/file/FileDataManager.java", "idx": 864}
{"memberVariables": {}, "code": ["AdjustableLinearSolver", "function", "(", ")", "{", "return", "new", "AdjLinearSolverQr", "(", ")", ";", "}"], "memberFunctions": {"leastSquares": [["LinearSolver<DenseMatrix64F>", "int numRows", "int numCols"]], "general": [["LinearSolver<DenseMatrix64F>", "int numRows", "int numCols"]], "pseudoInverse": [["LinearSolver<DenseMatrix64F>", "boolean useSVD"]], "linear": [["LinearSolver<DenseMatrix64F>", "int matrixSize"]], "symmPosDef": [["LinearSolver<DenseMatrix64F>", "int matrixWidth"]], "leastSquaresQrPivot": [["LinearSolver<DenseMatrix64F>", "boolean computeNorm2", "boolean computeQ"]]}, "className": "LinearSolverFactory", "renamed": ["AdjustableLinearSolver", "function", "(", ")", "{", "return", "new", "AdjLinearSolverQr", "(", ")", ";", "}"], "nl": "Create a solver which can efficiently add and remove elements instead of recomputing everything from scratch.", "nlToks": ["Create", "a", "solver", "which", "can", "efficiently", "add", "and", "remove", "elements", "instead", "of", "recomputing", "everything", "from", "scratch", "."], "path": "adamaulia/efficient-java-matrix-library/tree/master/src/org/ejml/factory/LinearSolverFactory.java", "idx": 865}
{"memberVariables": {"singleton=new SimpleEndpointImplFactory()": "EndpointImplFactory"}, "code": ["EndpointImplFactory", "function", "(", ")", "{", "return", "singleton", ";", "}"], "memberFunctions": {"newEndpointImpl": [["EndpointImpl", "Bus bus", "Service service", "EndpointInfo endpointInfo"]]}, "className": "SimpleEndpointImplFactory", "renamed": ["EndpointImplFactory", "function", "(", ")", "{", "return", "singleton", ";", "}"], "nl": "Avoid the need to construct these objects over and over in cases where the code knows that it needs the basic case.", "nlToks": ["Avoid", "the", "need", "to", "construct", "these", "objects", "over", "and", "over", "in", "cases", "where", "the", "code", "knows", "that", "it", "needs", "the", "basic", "case", "."], "path": "primesign/cxf/tree/master/core/src/main/java/org/apache/cxf/endpoint/SimpleEndpointImplFactory.java", "idx": 866}
{"memberVariables": {"mTestTier": "StorageTier", "TEST_TIER_LEVEL=0": "int", "mThrown=ExpectedException.none()": "ExpectedException", "mTestFolder=new TemporaryFolder()": "TemporaryFolder", "mTestTierView": "StorageTierView"}, "code": ["void", "function", "(", ")", "{", "mThrown", ".", "expect", "(", "IndexOutOfBoundsException", ".", "class", ")", ";", "int", "badDirIndex", "=", "TieredBlockStoreTestUtils", ".", "TIER_PATH", "[", "TEST_TIER_LEVEL", "]", ".", "length", ";", "Assert", ".", "assertEquals", "(", "badDirIndex", ",", "mTestTierView", ".", "getDirView", "(", "badDirIndex", ")", ".", "getDirViewIndex", "(", ")", ")", ";", "}"], "memberFunctions": {"getDirViews": [["void"]], "getDirView": [["void"]], "before": [["void"]], "getTierViewAlias": [["void"]], "getTierViewOrdinal": [["void"]]}, "className": "StorageTierViewTest", "renamed": ["void", "function", "(", ")", "{", "mThrown", ".", "expect", "(", "IndexOutOfBoundsException", ".", "class", ")", ";", "int", "loc0", "=", "TieredBlockStoreTestUtils", ".", "TIER_PATH", "[", "TEST_TIER_LEVEL", "]", ".", "length", ";", "Assert", ".", "assertEquals", "(", "loc0", ",", "mTestTierView", ".", "getDirView", "(", "loc0", ")", ".", "getDirViewIndex", "(", ")", ")", ";", "}"], "nl": "Tests that an exception is thrown when trying to get a storage directory view with a bad index.", "nlToks": ["Tests", "that", "an", "exception", "is", "thrown", "when", "trying", "to", "get", "a", "storage", "directory", "view", "with", "a", "bad", "index", "."], "path": "poemlin/alluxio/tree/master/core/server/src/test/java/alluxio/worker/block/meta/StorageTierViewTest.java", "idx": 871}
{"memberVariables": {"DEFAULT_KEY_AND_VALUE_PAIR_SEPARATOR=\",\"": "String", "DEFAULT_KEY_AND_VALUE_SEPARATOR=\":\"": "String"}, "code": ["boolean", "function", "(", "Map", "<", "K", ",", "V", ">", "sourceMap", ")", "{", "return", "(", "sourceMap", "==", "null", "||", "sourceMap", ".", "size", "(", ")", "==", "0", ")", ";", "}"], "memberFunctions": {"getKeyByValue": [["K", "Map<K,V> map", "V value"]], "putMapNotNullKeyAndValue": [["boolean", "Map<K,V> map", "K key", "V value"]], "parseKeyAndValueToMap": [["Map<String,String>", "String source", "String keyAndValueSeparator", "String keyAndValuePairSeparator", "boolean ignoreSpace"], ["Map<String,String>", "String source", "boolean ignoreSpace"], ["Map<String,String>", "String source"]], "toJson": [["String", "Map<String,String> map"]], "mapObjectContainName": [["Boolean", "Map<String,Object> mapData", "String strValueName"]], "putMapNotEmptyKeyAndValue": [["boolean", "Map<String,String> map", "String key", "String value"], ["boolean", "Map<String,String> map", "String key", "String value", "String defaultValue"]], "putMapNotNullKey": [["boolean", "Map<K,V> map", "K key", "V value"]], "mapContainName": [["Boolean", "Map<String,String> mapData", "String strValueName"]], "mapStringContainName": [["Boolean", "Map<String,String> mapData", "String strValueName"]], "putMapNotEmptyKey": [["boolean", "Map<String,String> map", "String key", "String value"]], "putMapNotEmptyKeyObject": [["boolean", "Map<String,Object> map", "String key", "String value"]]}, "className": "UtilMap", "renamed": ["boolean", "function", "(", "Map", "<", "K", ",", "V", ">", "arg0", ")", "{", "return", "(", "arg0", "==", "null", "||", "arg0", ".", "size", "(", ")", "==", "0", ")", ";", "}"], "nl": "is null or its size is 0  isEmpty(null)   =   true; isEmpty({})     =   true; isEmpty({1, 2})    =   false; ", "nlToks": ["is", "null", "or", "its", "size", "is", "0", "isEmpty", "-LRB-", "null", "-RRB-", "=", "true", ";", "isEmpty", "-LRB-", "-LCB-", "-RCB-", "-RRB-", "=", "true", ";", "isEmpty", "-LRB-", "-LCB-", "1", ",", "2", "-RCB-", "-RRB-", "=", "false", ";"], "path": "13383848500/dashihui/tree/master/MIT-Afford/app/src/main/java/com/dashihui/afford/util/map/UtilMap.java", "idx": 873}
{"memberVariables": {"endLine": "int", "lastToken": "GenericToken", "parent": "Node", "image": "String", "endColumn": "int", "userData": "Object", "firstToken": "GenericToken", "dataFlowNode": "DataFlowNode", "children": "Node[]", "beginColumn=-1": "int", "beginLine=-1": "int", "childIndex": "int", "id": "int"}, "code": ["List", "<", "T", ">", "function", "(", "Class", "<", "T", ">", "parentType", ")", "{", "List", "<", "T", ">", "parents", "=", "new", "ArrayList", "<", ">", "(", ")", ";", "Node", "parentNode", "=", "jjtGetParent", "(", ")", ";", "while", "(", "parentNode", "!=", "null", ")", "{", "if", "(", "parentNode", ".", "getClass", "(", ")", "==", "parentType", ")", "{", "parents", ".", "add", "(", "(", "T", ")", "parentNode", ")", ";", "}", "parentNode", "=", "parentNode", ".", "jjtGetParent", "(", ")", ";", "}", "return", "parents", ";", "}"], "memberFunctions": {"jjtGetNumChildren": [["int"]], "jjtClose": [["void"]], "jjtGetChild": [["Node", "int index"]], "getNthParent": [["Node", "int n"]], "hasDescendantOfType": [["boolean", "Class<T> type"]], "getEndLine": [["int"]], "jjtSetFirstToken": [["void", "GenericToken token"]], "findDescendantsOfType": [["List<T>", "Class<T> targetType"], ["void", "Class<T> targetType", "List<T> results", "boolean crossBoundaries"], ["void", "Node node", "Class<T> targetType", "List<T> results", "boolean crossFindBoundaries"]], "getFirstChildOfType": [["T", "Class<T> childType"]], "jjtGetLastToken": [["GenericToken"]], "isFindBoundary": [["boolean"]], "testingOnlySetEndColumn": [["void", "int i"]], "setDataFlowNode": [["void", "DataFlowNode dataFlowNode"]], "getDataFlowNode": [["DataFlowNode"]], "findChildNodesWithXPath": [["List<Node>", "String xpathString"]], "jjtSetChildIndex": [["void", "int index"]], "jjtGetChildIndex": [["int"]], "getEndColumn": [["int"]], "appendElement": [["void", "org.w3c.dom.Node parentNode"]], "testingOnlySetEndLine": [["void", "int i"]], "jjtOpen": [["void"]], "getFirstParentOfType": [["T", "Class<T> parentType"]], "hasDescendantMatchingXPath": [["boolean", "String xpathString"]], "jjtGetId": [["int"]], "testingOnlySetBeginLine": [["void", "int i"]], "findChildrenOfType": [["List<T>", "Class<T> targetType"]], "jjtGetFirstToken": [["GenericToken"]], "jjtSetParent": [["void", "Node parent"]], "hasImageEqualTo": [["boolean", "String image"]], "testingOnlySetBeginColumn": [["void", "int i"]], "getAsDocument": [["Document"]], "jjtSetLastToken": [["void", "GenericToken token"]], "jjtGetParent": [["Node"]], "getBeginLine": [["int"]], "jjtAddChild": [["void", "Node child", "int index"]], "getFirstDescendantOfType": [["T", "Class<T> descendantType"], ["T", "Class<T> descendantType", "Node node"]], "getBeginColumn": [["int"]], "isSingleLine": [["boolean"]], "toString": [["String"]], "getUserData": [["Object"]], "getImage": [["String"]], "hasDecendantOfAnyType": [["boolean", "Class<?>... types"]], "setUserData": [["void", "Object userData"]], "setImage": [["void", "String image"]]}, "className": "AbstractNode", "renamed": ["List", "<", "T", ">", "function", "(", "Class", "<", "T", ">", "arg0", ")", "{", "List", "<", "T", ">", "loc0", "=", "new", "ArrayList", "<", ">", "(", ")", ";", "Node", "loc1", "=", "jjtGetParent", "(", ")", ";", "while", "(", "loc1", "!=", "null", ")", "{", "if", "(", "loc1", ".", "getClass", "(", ")", "==", "arg0", ")", "{", "loc0", ".", "add", "(", "(", "T", ")", "loc1", ")", ";", "}", "loc1", "=", "loc1", ".", "jjtGetParent", "(", ")", ";", "}", "return", "loc0", ";", "}"], "nl": "Traverses up the tree to find all of the parent instances of type parentType", "nlToks": ["Traverses", "up", "the", "tree", "to", "find", "all", "of", "the", "parent", "instances", "of", "type", "parentType"], "path": "adangel/pmd/tree/master/pmd-core/src/main/java/net/sourceforge/pmd/lang/ast/AbstractNode.java", "idx": 874}
{"memberVariables": {"INT_MASK=0xffffffffL": "long"}, "code": ["int", "function", "(", "long", "value", ")", "{", "checkArgument", "(", "(", "value", ">>", "Integer", ".", "SIZE", ")", "==", "0", ",", "\"out of range: %s\"", ",", "value", ")", ";", "return", "(", "int", ")", "value", ";", "}"], "memberFunctions": {"compare": [["int", "int a", "int b"], ["int", "int[] left", "int[] right"]], "saturatedCast": [["int", "long value"]], "toLong": [["long", "int value"]], "max": [["int", "int... array"]], "decode": [["int", "String stringValue"]], "parseUnsignedInt": [["int", "String s"], ["int", "String string", "int radix"]], "min": [["int", "int... array"]], "lexicographicalComparator": [["Comparator<int[]>"]], "toString": [["String"], ["String", "int x"], ["String", "int x", "int radix"]], "divide": [["int", "int dividend", "int divisor"]], "join": [["String", "String separator", "int... array"]], "flip": [["int", "int value"]], "remainder": [["int", "int dividend", "int divisor"]]}, "className": "UnsignedInts", "renamed": ["int", "function", "(", "long", "arg0", ")", "{", "checkArgument", "(", "(", "arg0", ">>", "Integer", ".", "SIZE", ")", "==", "0", ",", "\"srini_string\"", ",", "arg0", ")", ";", "return", "(", "int", ")", "arg0", ";", "}"], "nl": "Returns the  {@code int} value that, when treated as unsigned, is equal to {@code value}, if possible.", "nlToks": ["Returns", "the", "-LCB-", "@code", "int", "-RCB-", "value", "that", ",", "when", "treated", "as", "unsigned", ",", "is", "equal", "to", "-LCB-", "@code", "value", "-RCB-", ",", "if", "possible", "."], "path": "hazendaz/guava/tree/master/guava/src/com/google/common/primitives/UnsignedInts.java", "idx": 877}
{"memberVariables": {}, "code": ["void", "function", "(", "double", "U", "[", "]", ",", "double", "[", "]", "b", ",", "int", "n", ")", "{", "for", "(", "int", "i", "=", "n", "-", "1", ";", "i", ">=", "0", ";", "i", "--", ")", "{", "double", "sum", "=", "b", "[", "i", "]", ";", "int", "indexU", "=", "i", "*", "n", "+", "i", "+", "1", ";", "for", "(", "int", "j", "=", "i", "+", "1", ";", "j", "<", "n", ";", "j", "++", ")", "{", "sum", "-=", "U", "[", "indexU", "++", "]", "*", "b", "[", "j", "]", ";", "}", "b", "[", "i", "]", "=", "sum", "/", "U", "[", "i", "*", "n", "+", "i", "]", ";", "}", "}"], "memberFunctions": {"solveL": [["void", "double L[]", "double[] b", "int n"], ["void", "double L[]", "double[] b", "int m", "int n"]], "invertLower": [["void", "double L[]", "int m"], ["void", "double L[]", "double L_inv[]", "int m"]], "solveTranL": [["void", "double L[]", "double[] b", "int n"]]}, "className": "TriangularSolver", "renamed": ["void", "function", "(", "double", "arg0", "[", "]", ",", "double", "[", "]", "arg1", ",", "int", "arg2", ")", "{", "for", "(", "int", "loc0", "=", "arg2", "-", "1", ";", "loc0", ">=", "0", ";", "loc0", "--", ")", "{", "double", "loc1", "=", "arg1", "[", "loc0", "]", ";", "int", "loc2", "=", "loc0", "*", "arg2", "+", "loc0", "+", "1", ";", "for", "(", "int", "loc3", "=", "loc0", "+", "1", ";", "loc3", "<", "arg2", ";", "loc3", "++", ")", "{", "loc1", "-=", "arg0", "[", "loc2", "++", "]", "*", "arg1", "[", "loc3", "]", ";", "}", "arg1", "[", "loc0", "]", "=", "loc1", "/", "arg0", "[", "loc0", "*", "arg2", "+", "loc0", "]", ";", "}", "}"], "nl": " This is a forward substitution solver for non-singular upper triangular matrices.  b = U-1b  where b is a vector, U is an n by n matrix. ", "nlToks": ["This", "is", "a", "forward", "substitution", "solver", "for", "non-singular", "upper", "triangular", "matrices", ".", "b", "=", "U-1b", "where", "b", "is", "a", "vector", ",", "U", "is", "an", "n", "by", "n", "matrix", "."], "path": "adamaulia/efficient-java-matrix-library/tree/master/src/org/ejml/alg/dense/decomposition/TriangularSolver.java", "idx": 878}
{"memberVariables": {"fragmentFileName=\"fragments\"": "String", "documents": "File[]", "logger=Logger.getLogger(AbstractFuriaInput.class)": "Logger", "i": "int", "fileFilter=new FragmentsFileFilter()": "FragmentsFileFilter", "directory": "File"}, "code": ["boolean", "function", "(", "final", "String", "line", ")", "{", "return", "!", "(", "\"\"", ".", "equals", "(", "line", ".", "trim", "(", ")", ")", "||", "(", "line", ".", "startsWith", "(", "\"#\"", ")", ")", ")", ";", "}"], "memberFunctions": {"next": [["Document<O>"]], "getDocument": [["Document<O>", "String id", "File fragments"]], "hasNext": [["boolean"]], "directoryOfDirectoriesMode": [["boolean", "File directory"]], "readObjectFromStringLine": [["O", "String data"]], "getDocumentsFromDirectory": [["Iterator<Document<O>>"]], "moveTapeToNextValidDocument": [["void"]], "remove": [["void"]], "accept": [["boolean", "File dir", "String name"]]}, "className": "AbstractFuriaInput", "renamed": ["boolean", "function", "(", "final", "String", "arg0", ")", "{", "return", "!", "(", "\"srini_string\"", ".", "equals", "(", "arg0", ".", "trim", "(", ")", ")", "||", "(", "arg0", ".", "startsWith", "(", "\"srini_string\"", ")", ")", ")", ";", "}"], "nl": "Returns true if the given line is not null or if it is not a comment.", "nlToks": ["Returns", "true", "if", "the", "given", "line", "is", "not", "null", "or", "if", "it", "is", "not", "a", "comment", "."], "path": "pombreda/furia-chan/tree/master/src/main/java/org/kit/furia/io/AbstractFuriaInput.java", "idx": 879}
{"memberVariables": {"keys=Maps.newHashMap()": "Map<ImmutableList<ChildNumber>,DeterministicKey>", "MAX_CHILD_DERIVATION_ATTEMPTS=100": "int", "lastPrivDerivedNumbers=Maps.newHashMap()": "Map<ImmutableList<ChildNumber>,ChildNumber>", "rootPath": "ImmutableList<ChildNumber>", "lastPubDerivedNumbers=Maps.newHashMap()": "Map<ImmutableList<ChildNumber>,ChildNumber>"}, "code": ["DeterministicKey", "function", "(", ")", "{", "return", "get", "(", "rootPath", ",", "false", ",", "false", ")", ";", "}"], "memberFunctions": {"getNextChildNumberToDerive": [["ChildNumber", "ImmutableList<ChildNumber> path", "boolean privateDerivation"]], "putKey": [["void", "DeterministicKey key"]], "get": [["DeterministicKey", "List<ChildNumber> path", "boolean relativePath", "boolean create"]], "deriveChild": [["DeterministicKey", "List<ChildNumber> parentPath", "boolean relative", "boolean createParent", "ChildNumber createChildNumber"], ["DeterministicKey", "DeterministicKey parent", "ChildNumber createChildNumber"]], "deriveNextChild": [["DeterministicKey", "ImmutableList<ChildNumber> parentPath", "boolean relative", "boolean createParent", "boolean privateDerivation"]], "getLastDerivedNumbers": [["Map<ImmutableList<ChildNumber>,ChildNumber>", "boolean privateDerivation"]]}, "className": "DeterministicHierarchy", "renamed": ["DeterministicKey", "function", "(", ")", "{", "return", "get", "(", "rootPath", ",", "false", ",", "false", ")", ";", "}"], "nl": "Returns the root key that the  {@link DeterministicHierarchy} was created with.", "nlToks": ["Returns", "the", "root", "key", "that", "the", "-LCB-", "@link", "DeterministicHierarchy", "-RCB-", "was", "created", "with", "."], "path": "plncoin/plncoin-and/tree/master/plncoinj/core/src/main/java/com/google/bitcoin/crypto/DeterministicHierarchy.java", "idx": 880}
{"memberVariables": {}, "code": ["TriConsumer", "<", "X", ",", "Y", ",", "Z", ">", "function", "(", "TriConsumer", "<", "?", "super", "X", ",", "?", "super", "Y", ",", "?", "super", "Z", ">", "after", ")", "{", "Objects", ".", "requireNonNull", "(", "after", ")", ";", "return", "(", "x", ",", "y", ",", "z", ")", "->", "{", "accept", "(", "x", ",", "y", ",", "z", ")", ";", "after", ".", "accept", "(", "x", ",", "y", ",", "z", ")", ";", "}", ";", "}"], "memberFunctions": {"accept": [["void", "X x", "Y y", "Z z"]]}, "className": "TriConsumer", "renamed": ["TriConsumer", "<", "X", ",", "Y", ",", "Z", ">", "function", "(", "TriConsumer", "<", "?", "super", "X", ",", "?", "super", "Y", ",", "?", "super", "Z", ">", "arg0", ")", "{", "Objects", ".", "requireNonNull", "(", "arg0", ")", ";", "return", "(", "x", ",", "y", ",", "z", ")", "->", "{", "accept", "(", "x", ",", "y", ",", "z", ")", ";", "arg0", ".", "accept", "(", "x", ",", "y", ",", "z", ")", ";", "}", ";", "}"], "nl": "Returns a composed  {@code TriConsumer} that performs, in sequence, thisoperation followed by the  {@code after} operation. If performing eitheroperation throws an exception, it is relayed to the caller of the composed operation.  If performing this operation throws an exception, the  {@code after} operation will not be performed.", "nlToks": ["Returns", "a", "composed", "-LCB-", "@code", "TriConsumer", "-RCB-", "that", "performs", ",", "in", "sequence", ",", "thisoperation", "followed", "by", "the", "-LCB-", "@code", "after", "-RCB-", "operation", ".", "If", "performing", "eitheroperation", "throws", "an", "exception", ",", "it", "is", "relayed", "to", "the", "caller", "of", "the", "composed", "operation", ".", "If", "performing", "this", "operation", "throws", "an", "exception", ",", "the", "-LCB-", "@code", "after", "-RCB-", "operation", "will", "not", "be", "performed", "."], "path": "pigkey/kitchen/tree/master/app/src/main/java/com/kitchen/app/web/parser/webnauannet/TriConsumer.java", "idx": 881}
{"memberVariables": {"serialVersionUID=0": "long", "predicate": "Predicate<T>", "defaultValue": "V", "f": "Function<A,? extends B>", "g": "Function<B,C>", "supplier": "Supplier<T>", "map": "Map<K,? extends V>", "value": "E"}, "code": ["Function", "<", "E", ",", "E", ">", "function", "(", ")", "{", "return", "(", "Function", "<", "E", ",", "E", ">", ")", "IdentityFunction", ".", "INSTANCE", ";", "}"], "memberFunctions": {"forPredicate": [["Function<T,Boolean>", "Predicate<T> predicate"]], "forSupplier": [["Function<Object,T>", "Supplier<T> supplier"]], "constant": [["Function<Object,E>", "@Nullable E value"]], "apply": [["String", "Object o"], ["Object", "@Nullable Object o"], ["V", "@Nullable K key"], ["V", "@Nullable K key"], ["C", "@Nullable A a"], ["Boolean", "@Nullable T t"], ["E", "@Nullable Object from"], ["T", "@Nullable Object input"]], "compose": [["Function<A,C>", "Function<B,C> g", "Function<A,? extends B> f"]], "hashCode": [["int"], ["int"], ["int"], ["int"], ["int"], ["int"]], "equals": [["boolean", "@Nullable Object o"], ["boolean", "@Nullable Object o"], ["boolean", "@Nullable Object obj"], ["boolean", "@Nullable Object obj"], ["boolean", "@Nullable Object obj"], ["boolean", "@Nullable Object obj"]], "toStringFunction": [["Function<Object,String>"]], "toString": [["String"], ["String"], ["String"], ["String"], ["String"], ["String"], ["String"], ["String"]], "forMap": [["Function<K,V>", "Map<K,V> map"], ["Function<K,V>", "Map<K,? extends V> map", "@Nullable V defaultValue"]]}, "className": "Functions", "renamed": ["Function", "<", "E", ",", "E", ">", "function", "(", ")", "{", "return", "(", "Function", "<", "E", ",", "E", ">", ")", "IdentityFunction", ".", "INSTANCE", ";", "}"], "nl": "Returns the identity function.", "nlToks": ["Returns", "the", "identity", "function", "."], "path": "hazendaz/guava/tree/master/guava/src/com/google/common/base/Functions.java", "idx": 882}
{"memberVariables": {"access": "Access", "challenge": "byte[]", "statusCode": "Integer"}, "code": ["void", "function", "(", "byte", "[", "]", "value", ")", "{", "this", ".", "challenge", "=", "(", "(", "byte", "[", "]", ")", "value", ")", ";", "}"], "memberFunctions": {"setAccess": [["void", "Access value"]], "getAccess": [["Access"]], "getStatusCode": [["Integer"]], "setStatusCode": [["void", "Integer value"]], "getChallenge": [["byte[]"]]}, "className": "AuthenticateResponse", "renamed": ["void", "function", "(", "byte", "[", "]", "arg0", ")", "{", "this", ".", "challenge", "=", "(", "(", "byte", "[", "]", ")", "arg0", ")", ";", "}"], "nl": "Sets the value of the challenge property.", "nlToks": ["Sets", "the", "value", "of", "the", "challenge", "property", "."], "path": "platformlayer/platformlayer/tree/master/auth/client/src/generated/xjc/org/platformlayer/auth/v1/AuthenticateResponse.java", "idx": 883}
{"memberVariables": {"TOPICS=CollectionUtil.list(Report.types,Report.resolver)": "Collection<String>", "table": "Map<String,Named>"}, "code": ["void", "function", "(", "String", "name", ",", "Named", "type", ")", "{", "if", "(", "name", "==", "null", "||", "type", "==", "null", ")", "{", "throw", "new", "InternalCompilerError", "(", "\"Bad insertion into TableResolver\"", ")", ";", "}", "if", "(", "Report", ".", "should_report", "(", "TOPICS", ",", "3", ")", ")", "Report", ".", "report", "(", "3", ",", "\"TableCR.addNamed(\"", "+", "name", "+", "\", \"", "+", "type", "+", "\")\"", ")", ";", "table", ".", "put", "(", "name", ",", "type", ")", ";", "}"], "memberFunctions": {"find": [["Named", "String name"]], "toString": [["String"]], "packageExists": [["boolean", "String name"]]}, "className": "TableResolver", "renamed": ["void", "function", "(", "String", "arg0", ",", "Named", "arg1", ")", "{", "if", "(", "arg0", "==", "null", "||", "arg1", "==", "null", ")", "{", "throw", "new", "InternalCompilerError", "(", "\"srini_string\"", ")", ";", "}", "if", "(", "Report", ".", "should_report", "(", "TOPICS", ",", "3", ")", ")", "Report", ".", "report", "(", "3", ",", "\"srini_string\"", "+", "arg0", "+", "\"srini_string\"", "+", "arg1", "+", "\"srini_string\"", ")", ";", "table", ".", "put", "(", "arg0", ",", "arg1", ")", ";", "}"], "nl": "Add a named type object to the table.", "nlToks": ["Add", "a", "named", "type", "object", "to", "the", "table", "."], "path": "polyglot-compiler/polyglot/tree/master/src/polyglot/types/TableResolver.java", "idx": 884}
{"memberVariables": {"sLock=new ReentrantLock()": "Lock", "sCondition=sLock.newCondition()": "Condition", "sTimers=new HashMap<>()": "Map<String,ScheduledTimer>"}, "code": ["void", "function", "(", "String", "name", ")", "{", "await", "(", "name", ")", ";", "schedule", "(", "name", ")", ";", "await", "(", "name", ")", ";", "}"], "memberFunctions": {"removeTimer": [["void", "ScheduledTimer timer"]], "schedule": [["void", "String threadName"]], "addTimer": [["void", "ScheduledTimer timer"]], "await": [["void", "String name"], ["void", "String name", "long time", "TimeUnit unit"]], "clearTimer": [["void", "String name"]], "getThreadNames": [["Set<String>"]]}, "className": "HeartbeatScheduler", "renamed": ["void", "function", "(", "String", "arg0", ")", "{", "await", "(", "arg0", ")", ";", "schedule", "(", "arg0", ")", ";", "await", "(", "arg0", ")", ";", "}"], "nl": "Convenience method for executing a heartbeat and waiting for it to complete.", "nlToks": ["Convenience", "method", "for", "executing", "a", "heartbeat", "and", "waiting", "for", "it", "to", "complete", "."], "path": "poemlin/alluxio/tree/master/core/common/src/main/java/alluxio/heartbeat/HeartbeatScheduler.java", "idx": 886}
{"memberVariables": {}, "code": ["Matcher", "<", "T", ">", "function", "(", "T", "value", ")", "{", "return", "ComparatorMatcherBuilder", ".", "<", "T", ">", "usingNaturalOrdering", "(", ")", ".", "lessThan", "(", "value", ")", ";", "}"], "memberFunctions": {"comparesEqualTo": [["Matcher<T>", "T value"]], "greaterThanOrEqualTo": [["Matcher<T>", "T value"]], "lessThanOrEqualTo": [["Matcher<T>", "T value"]], "greaterThan": [["Matcher<T>", "T value"]]}, "className": "OrderingComparison", "renamed": ["Matcher", "<", "T", ">", "function", "(", "T", "arg0", ")", "{", "return", "ComparatorMatcherBuilder", ".", "<", "T", ">", "usingNaturalOrdering", "(", ")", ".", "lessThan", "(", "arg0", ")", ";", "}"], "nl": "Creates a matcher of  {@link Comparable} object that matches when the examined object isless than the specified value, as reported by the compareTo method of the examined object. For example: assertThat(1, lessThan(2))", "nlToks": ["Creates", "a", "matcher", "of", "-LCB-", "@link", "Comparable", "-RCB-", "object", "that", "matches", "when", "the", "examined", "object", "isless", "than", "the", "specified", "value", ",", "as", "reported", "by", "the", "compareTo", "method", "of", "the", "examined", "object", ".", "For", "example", ":", "assertThat", "-LRB-", "1", ",", "lessThan", "-LRB-", "2", "-RRB-", "-RRB-"], "path": "plow/JavaHamcrest/tree/master/hamcrest-library/src/main/java/org/hamcrest/number/OrderingComparison.java", "idx": 887}
{"memberVariables": {"DEFAULT_LOCK_TIMEOUT=\"oozie.command.default.lock.timeout\"": "String", "LOG=XLog.getLog(XCommand.class)": "XLog", "dryrun=false": "boolean", "logInfo": "XLog.Info", "priority": "int", "type": "String", "commandQueue": "Map<Long,List<XCommand<?>>>", "used=false": "boolean", "name": "String", "createdTime": "long", "lock": "MemoryLocks.LockToken", "INSTRUMENTATION_GROUP=\"commands\"": "String", "instrumentation": "Instrumentation"}, "code": ["void", "function", "(", "XCommand", "<", "?", ">", "command", ")", "{", "queue", "(", "command", ",", "0", ")", ";", "}"], "memberFunctions": {"loadState": [["void"]], "getName": [["String"]], "getLockTimeOut": [["long"]], "releaseLock": [["void"]], "eagerVerifyPrecondition": [["void"]], "execute": [["T"]], "resetUsed": [["void"]], "getEntityKey": [["String"]], "getInstrumentation": [["Instrumentation"]], "call": [["T"]], "verifyPrecondition": [["void"]], "isLockRequired": [["boolean"]], "getType": [["String"]], "acquireLock": [["void"]], "getPriority": [["int"]], "eagerLoadState": [["void"]], "getCreatedTime": [["long"]]}, "className": "XCommand", "renamed": ["void", "function", "(", "XCommand", "<", "?", ">", "arg0", ")", "{", "queue", "(", "arg0", ",", "0", ")", ";", "}"], "nl": "Queue a command for execution after the current command execution completes.  All commands queued during the execution of the current command will be queued for a single serial execution.  If the command execution throws an exception, no command will be effectively queued.", "nlToks": ["Queue", "a", "command", "for", "execution", "after", "the", "current", "command", "execution", "completes", ".", "All", "commands", "queued", "during", "the", "execution", "of", "the", "current", "command", "will", "be", "queued", "for", "a", "single", "serial", "execution", ".", "If", "the", "command", "execution", "throws", "an", "exception", ",", "no", "command", "will", "be", "effectively", "queued", "."], "path": "pingpangkuangmo/oozie/tree/master/core/src/main/java/org/apache/oozie/command/XCommand.java", "idx": 888}
{"memberVariables": {"sLock=new ReentrantLock()": "Lock", "sCondition=sLock.newCondition()": "Condition", "sTimers=new HashMap<>()": "Map<String,ScheduledTimer>"}, "code": ["void", "function", "(", "String", "name", ")", "{", "try", "(", "LockResource", "r", "=", "new", "LockResource", "(", "sLock", ")", ")", "{", "while", "(", "!", "sTimers", ".", "containsKey", "(", "name", ")", ")", "{", "sCondition", ".", "await", "(", ")", ";", "}", "}", "}"], "memberFunctions": {"removeTimer": [["void", "ScheduledTimer timer"]], "schedule": [["void", "String threadName"]], "addTimer": [["void", "ScheduledTimer timer"]], "clearTimer": [["void", "String name"]], "execute": [["void", "String name"]], "getThreadNames": [["Set<String>"]]}, "className": "HeartbeatScheduler", "renamed": ["void", "function", "(", "String", "arg0", ")", "{", "try", "(", "LockResource", "loc0", "=", "new", "LockResource", "(", "sLock", ")", ")", "{", "while", "(", "!", "sTimers", ".", "containsKey", "(", "arg0", ")", ")", "{", "sCondition", ".", "await", "(", ")", ";", "}", "}", "}"], "nl": "Waits for the given thread to be ready to be scheduled.", "nlToks": ["Waits", "for", "the", "given", "thread", "to", "be", "ready", "to", "be", "scheduled", "."], "path": "poemlin/alluxio/tree/master/core/common/src/main/java/alluxio/heartbeat/HeartbeatScheduler.java", "idx": 890}
{"memberVariables": {"TYPE_STRING=3": "int", "valueBoolean": "boolean", "TYPE_DOUBLE_UNSIGNED=7": "int", "TYPE_INTEGER_UNSIGNED=6": "int", "valid=true": "boolean", "TYPE_RADIO=4": "int", "TYPE_DOUBLE_SIGNED=1": "int", "description": "String", "type": "int", "valueCheck": "boolean[]", "serialVersionUID=-5926084016803995902L": "long", "TYPE_CHECK=5": "int", "invalidationMessage": "String", "valueString": "String", "options": "String[]", "valueDouble": "double", "valueInteger": "int", "TYPE_INTEGER_SIGNED=0": "int", "TYPE_BOOLEAN=2": "int"}, "code": ["void", "function", "(", "final", "String", "warning", ")", "{", "valid", "=", "false", ";", "setInvalidationMessage", "(", "warning", ")", ";", "}"], "memberFunctions": {"isValid": [["boolean"]], "setInvalidationMessage": [["void", "final String message"]], "getDouble": [["Double"]], "getDefault": [["String"]], "getInteger": [["Integer"]], "setDescription": [["void", "final String description"]], "getString": [["String"]], "isInvalid": [["boolean"]], "getDescription": [["String"]], "getSelected": [["Integer"]], "getType": [["int"]], "setValue": [["void", "final boolean value"], ["void", "final boolean[] value"], ["void", "final double value"], ["void", "final int value"], ["void", "final String value"]], "getInvalidationMessage": [["String"]], "setOptions": [["void", "final String[] options"]], "getBoolean": [["Boolean"]], "getOptions": [["String[]"]], "getChecked": [["boolean[]"]], "validate": [["void"]]}, "className": "Argument", "renamed": ["void", "function", "(", "final", "String", "arg0", ")", "{", "valid", "=", "false", ";", "setInvalidationMessage", "(", "arg0", ")", ";", "}"], "nl": "Declares the argument value to be invalid. Gui will be redrawn but with a warning drawn in red above the entry widget.", "nlToks": ["Declares", "the", "argument", "value", "to", "be", "invalid", ".", "Gui", "will", "be", "redrawn", "but", "with", "a", "warning", "drawn", "in", "red", "above", "the", "entry", "widget", "."], "path": "phpvdb/buffer_bci/tree/master/java/android/FieldTripClientsService/app/src/main/java/edu/nl/ru/fieldtripclientsservice/base/Argument.java", "idx": 891}
{"memberVariables": {}, "code": ["int", "function", "(", "String", "s", ")", "{", "byte", "[", "]", "byteArray", "=", "s", ".", "getBytes", "(", ")", ";", "int", "n", "=", "byteArray", ".", "length", ";", "int", "hash", "=", "5381", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "n", ";", "i", "++", ")", "{", "hash", "=", "(", "(", "hash", "<<", "5", ")", "+", "hash", ")", "+", "byteArray", "[", "i", "]", ";", "}", "return", "hash", ";", "}"], "memberFunctions": {"genNCollisions": [["void", "int numberAttributes", "StringBuilder sb", "boolean useNamespace"]], "getCollisionString": [["String", "int i", "int n"]]}, "className": "CollisionDJBX33A", "renamed": ["int", "function", "(", "String", "arg0", ")", "{", "byte", "[", "]", "loc0", "=", "arg0", ".", "getBytes", "(", ")", ";", "int", "loc1", "=", "loc0", ".", "length", ";", "int", "loc2", "=", "5381", ";", "for", "(", "int", "loc3", "=", "0", ";", "loc3", "<", "loc1", ";", "loc3", "++", ")", "{", "loc2", "=", "(", "(", "loc2", "<<", "5", ")", "+", "loc2", ")", "+", "loc0", "[", "loc3", "]", ";", "}", "return", "loc2", ";", "}"], "nl": "Get Hash Value for String using DJBX33A Algorithm", "nlToks": ["Get", "Hash", "Value", "for", "String", "using", "DJBX33A", "Algorithm"], "path": "0xwindows/WS-Attacker/tree/master/plugins/Denial_of_Service/src/main/java/wsattacker/plugin/dos/dosExtension/attackClasses/hashDos/CollisionDJBX33A.java", "idx": 894}
{"memberVariables": {"destination": "String", "source": "String", "runStatusType": "RunStatusType"}, "code": ["String", "function", "(", ")", "{", "return", "destination", ";", "}"], "memberFunctions": {"setSource": [["void", "String source"]], "getSource": [["String"]], "getRunStatusType": [["RunStatusType"]], "toString": [["String"]], "setRunStatusType": [["void", "RunStatusType runStatusType"]], "setDestination": [["void", "String destination"]]}, "className": "ShellCommandContext", "renamed": ["String", "function", "(", ")", "{", "return", "destination", ";", "}"], "nl": "Gets the destination.", "nlToks": ["Gets", "the", "destination", "."], "path": "pkesireddy/portico_fletcher/tree/master/FetcherTesterService/src/main/java/org/ithaka/cm/fetchertester/model/ShellCommandContext.java", "idx": 896}
{"memberVariables": {"spinTime=150": "int", "recordedMovement=new int[]{0,0,0,0,0}": "int[]", "speed=10": "int", "cycleTime=150": "int", "MOVED_SPINRIGHT=7": "int", "ourInstance=new GeneralMotorConSchedule()": "GeneralMotorConSchedule", "MOVED_RIGHT=3": "int", "MOVED_CYCLELEFT=10": "int", "MOVED_LOWERALT=6": "int", "cycleSpeed=10": "int", "cycleSpinSpeed=15": "int", "sideTime=100": "int", "runningThreads=0": "int", "altitudeSpeed=15": "int", "altitudeTime=100": "int", "batLvl=0": "int", "spinSpeed=15": "int", "hoverTime=2000": "int", "MOVED_RAISEALT=5": "int", "drone": "ARDrone", "MOVED_CYCLERIGHT=9": "int", "runningID=0": "int", "MOVED_SPINLEFT=8": "int", "MOVED_BACKWARD=2": "int", "MOVED_FORWARD=1": "int", "TAG=\"GMCS\"": "String", "MOVED_LEFT=4": "int", "spin90Time=4500": "int", "cmd": "CommandManager", "printToConsole=true": "boolean", "spin90Speed=50": "int"}, "code": ["void", "function", "(", "int", "millis", ")", "{", "waitFor", "(", "millis", ")", ";", "}"], "memberFunctions": {"spin90Left": [["GeneralMotorConSchedule"]], "isRunningThread": [["boolean", "int id"]], "lowerAltitude": [["GeneralMotorConSchedule"]], "hover": [["GeneralMotorConSchedule"]], "spin90Right": [["GeneralMotorConSchedule"]], "cycleRight": [["GeneralMotorConSchedule"]], "backward": [["GeneralMotorConSchedule", "int time"]], "setBatLvl": [["void", "int batLvl"]], "waitFor": [["void", "int millis"]], "getBatLvl": [["int"]], "onStop": [["void"]], "raiseAltitude": [["GeneralMotorConSchedule"]], "cycleLeft": [["GeneralMotorConSchedule"]], "spinRight": [["GeneralMotorConSchedule"]], "addLastMovement": [["void", "int movement"]], "getLastMovement": [["int", "int index"]], "newRunningThread": [["int"]], "takeoff": [["GeneralMotorConSchedule"]], "forward": [["GeneralMotorConSchedule", "int time"]], "spinLeft": [["GeneralMotorConSchedule"]], "right": [["GeneralMotorConSchedule"], ["GeneralMotorConSchedule", "int millis"]], "landing": [["void"]], "setDrone": [["void", "ARDrone drone"]], "left": [["GeneralMotorConSchedule"], ["GeneralMotorConSchedule", "int millis"]], "getInstance": [["GeneralMotorConSchedule"]]}, "className": "GeneralMotorConSchedule", "renamed": ["void", "function", "(", "int", "arg0", ")", "{", "waitFor", "(", "arg0", ")", ";", "}"], "nl": "Pause for", "nlToks": ["Pause", "for"], "path": "02343Gruppe2/02343_Ardrone/tree/master/src/algo/GeneralMotorConSchedule.java", "idx": 897}
{"memberVariables": {"log=LogFactory.getLog(SAMLSSOValidatorServiceClient.class)": "Log", "stub": "IdentitySAMLValidatorServiceStub"}, "code": ["String", "[", "]", "function", "(", ")", "{", "try", "{", "return", "stub", ".", "getIssuersOfSAMLServiceProviders", "(", ")", ";", "}", "catch", "(", "RemoteException", "e", ")", "{", "log", ".", "error", "(", "\"Error loading Issuers\"", ",", "e", ")", ";", "throw", "new", "AxisFault", "(", "e", ".", "getMessage", "(", ")", ",", "e", ")", ";", "}", "}"], "memberFunctions": {"buildResponse": [["GeneratedResponseDTO", "String issuer", "String userName"]], "validate": [["ValidatedItemDTO[]", "String samlRequest", "boolean isPost"]]}, "className": "SAMLSSOValidatorServiceClient", "renamed": ["String", "[", "]", "function", "(", ")", "{", "try", "{", "return", "stub", ".", "getIssuersOfSAMLServiceProviders", "(", ")", ";", "}", "catch", "(", "RemoteException", "loc0", ")", "{", "log", ".", "error", "(", "\"srini_string\"", ",", "loc0", ")", ";", "throw", "new", "AxisFault", "(", "loc0", ".", "getMessage", "(", ")", ",", "loc0", ")", ";", "}", "}"], "nl": "Get Issuer List", "nlToks": ["Get", "Issuer", "List"], "path": "harsha1979/carbon-identity/tree/master/components/tools/samlsso-validator/org.wso2.carbon.identity.tools.saml.validator.ui/src/main/java/org/wso2/carbon/identity/tools/saml/validator/ui/client/SAMLSSOValidatorServiceClient.java", "idx": 898}
{"memberVariables": {"ignoreExceptions=true": "boolean", "sourceCodeFile": "File", "sourceCodeFilename": "String", "languageVersion": "LanguageVersion", "attributes": "ConcurrentMap<String,Object>", "report=new Report()": "Report"}, "code": ["Object", "function", "(", "String", "name", ")", "{", "return", "this", ".", "attributes", ".", "remove", "(", "name", ")", ";", "}"], "memberFunctions": {"setSourceCodeFile": [["void", "File sourceCodeFile"]], "setLanguageVersion": [["void", "LanguageVersion languageVersion"]], "setAttribute": [["boolean", "String name", "Object value"]], "getLanguageVersion": [["LanguageVersion"]], "getAttribute": [["Object", "String name"]], "isIgnoreExceptions": [["boolean"]], "setSourceCodeFilename": [["void", "String filename"]], "getSourceCodeFile": [["File"]], "setIgnoreExceptions": [["void", "boolean ignoreExceptions"]], "getReport": [["Report"]], "getSourceCodeFilename": [["String"]], "setReport": [["void", "Report report"]]}, "className": "RuleContext", "renamed": ["Object", "function", "(", "String", "arg0", ")", "{", "return", "this", ".", "attributes", ".", "remove", "(", "arg0", ")", ";", "}"], "nl": "Remove an attribute value on the RuleContext.  Attributes can be shared between RuleContext instances. This operation is thread-safe.  Attribute values should be modified directly via the reference provided. It is not necessary to call setAttribute(String, Object) to update an attribute value. Modifications made to the attribute value will automatically be seen by other threads. Because of this, you must ensure the attribute values are themselves thread safe.", "nlToks": ["Remove", "an", "attribute", "value", "on", "the", "RuleContext", ".", "Attributes", "can", "be", "shared", "between", "RuleContext", "instances", ".", "This", "operation", "is", "thread-safe", ".", "Attribute", "values", "should", "be", "modified", "directly", "via", "the", "reference", "provided", ".", "It", "is", "not", "necessary", "to", "call", "setAttribute", "-LRB-", "String", ",", "Object", "-RRB-", "to", "update", "an", "attribute", "value", ".", "Modifications", "made", "to", "the", "attribute", "value", "will", "automatically", "be", "seen", "by", "other", "threads", ".", "Because", "of", "this", ",", "you", "must", "ensure", "the", "attribute", "values", "are", "themselves", "thread", "safe", "."], "path": "adangel/pmd/tree/master/pmd-core/src/main/java/net/sourceforge/pmd/RuleContext.java", "idx": 899}
{"memberVariables": {"step=0": "int", "panels=new ArrayList<JPanel>()": "List<JPanel>", "started=false": "boolean", "finished=false": "boolean", "item=null": "WizardItem"}, "code": ["void", "function", "(", ")", "{", "doAction", "(", "step", ")", ";", "step", "++", ";", "JPanel", "p", "=", "makePanel", "(", "step", ")", ";", "if", "(", "p", "!=", "null", ")", "{", "panels", ".", "add", "(", "p", ")", ";", "}", "started", "=", "true", ";", "if", "(", "item", "!=", "null", ")", "{", "item", ".", "changed", "(", ")", ";", "}", "}"], "memberFunctions": {"removePanel": [["void", "int s"]], "getCurrentPanel": [["JPanel"]], "canGoBack": [["boolean"]], "canFinish": [["boolean"]], "getStep": [["int"]], "makePanel": [["JPanel", "int newStep"]], "back": [["void"]], "getNumSteps": [["int"]], "isStarted": [["boolean"]], "setToDoItem": [["void", "WizardItem i"]], "isFinished": [["boolean"]], "undoAction": [["void", "int oldStep"], ["void"]], "getProgress": [["int"]], "getToDoItem": [["WizardItem"]], "canGoNext": [["boolean"]], "finish": [["void"]], "getPanel": [["JPanel", "int s"]], "doAction": [["void", "int oldStep"], ["void"]]}, "className": "Wizard", "renamed": ["void", "function", "(", ")", "{", "doAction", "(", "step", ")", ";", "step", "++", ";", "JPanel", "loc0", "=", "makePanel", "(", "step", ")", ";", "if", "(", "loc0", "!=", "null", ")", "{", "panels", ".", "add", "(", "loc0", ")", ";", "}", "started", "=", "true", ";", "if", "(", "item", "!=", "null", ")", "{", "item", ".", "changed", "(", ")", ";", "}", "}"], "nl": "The next step of the wizard.", "nlToks": ["The", "next", "step", "of", "the", "wizard", "."], "path": "pichiliani/CoArgoUML/tree/master/v0.24/fonte/src/argouml-app/src/org/argouml/cognitive/critics/Wizard.java", "idx": 901}
{"memberVariables": {"instance": "Date", "cal": "GregorianCalendar"}, "code": ["void", "function", "(", ")", "{", "Date", "d", "=", "new", "Date", "(", ")", ";", "assertTrue", "(", "d", ".", "equals", "(", "instance", ")", ")", ";", "Date", "one", "=", "new", "Date", "(", "2010", ",", "6", ",", "15", ")", ";", "Date", "two", "=", "new", "Date", "(", "2010", ",", "6", ",", "15", ")", ";", "assertTrue", "(", "one", ".", "equals", "(", "two", ")", ")", ";", "}"], "memberFunctions": {"testConstructorWithString": [["void"]], "testSetMonth": [["void"]], "testSetYearThreeDigits": [["void"]], "testConstructor": [["void"]], "testToStringFourDigitYear": [["void"]], "testEqualsWrongType": [["void"]], "testSetYearTwoDigit": [["void"]], "testEqualsWhenChanged": [["void"]], "testToISO8601WithTime": [["void"]], "setUp": [["void"]], "testGetMonth": [["void"]], "testEqualsItself": [["void"]], "testSetYearNegative": [["void"]], "testConstructorWithValues": [["void"]], "testSetDayOutOfBounds": [["void"]], "testGetYear": [["void"]], "testToISO8601WithTimeAndZeroZone": [["void"]], "testToISO8601FourDigitYear": [["void"]], "testSetDay": [["void"]], "testSetYearFourDigit": [["void"]], "testToStringTwoDigitYear": [["void"]], "testToISO8601WithTimeAndPositiveOffset": [["void"]], "testToISO8601TwoDigitYear": [["void"]], "testSetYearFiveDigits": [["void"]], "testToISO8601WithTimeAndNegativeOffset": [["void"]], "testGetDay": [["void"]], "testSetMonthOutOfBounds": [["void"]]}, "className": "DateTest", "renamed": ["void", "function", "(", ")", "{", "Date", "loc0", "=", "new", "Date", "(", ")", ";", "assertTrue", "(", "loc0", ".", "equals", "(", "instance", ")", ")", ";", "Date", "loc1", "=", "new", "Date", "(", "2010", ",", "6", ",", "15", ")", ";", "Date", "loc2", "=", "new", "Date", "(", "2010", ",", "6", ",", "15", ")", ";", "assertTrue", "(", "loc1", ".", "equals", "(", "loc2", ")", ")", ";", "}"], "nl": "Test method for {@link net.sf.marineapi.nmea.util.Date#equals(java.lang.Object)}.", "nlToks": ["Test", "method", "for", "-LCB-", "@link", "net.sf.marineapi.nmea.util.Date", "#equals", "-LRB-", "java.lang.Object", "-RRB-", "-RCB-", "."], "path": "pkoziol/marine-api/tree/master/src/test/java/net/sf/marineapi/nmea/util/DateTest.java", "idx": 902}
{"memberVariables": {"head": "Node"}, "code": ["void", "function", "(", "int", "num", ")", "{", "Node", "newNode", "=", "new", "Node", "(", "num", ")", ";", "if", "(", "head", "==", "null", ")", "{", "head", "=", "newNode", ";", "return", ";", "}", "Node", "temp", "=", "head", ";", "while", "(", "temp", ".", "next", "!=", "null", ")", "{", "temp", "=", "temp", ".", "next", ";", "}", "temp", ".", "next", "=", "newNode", ";", "return", ";", "}"], "memberFunctions": {"removeAllNodes": [["void", "int key"]], "print": [["void"]], "getHead": [["Node"]], "printKthFromLast": [["void"], ["int", "Node head"]], "reverseRecursvive": [["void"]], "initialize": [["void", "int[] nodes"]], "removeDuplicate": [["void"]], "reverse": [["void"], ["Node", "Node head"]], "arrangeEvenOddPosition": [["void"]], "remove": [["void", "int position"]], "removeNode": [["void", "int key"]], "swapeParis": [["void"]]}, "className": "MyLinkedList", "renamed": ["void", "function", "(", "int", "arg0", ")", "{", "Node", "loc0", "=", "new", "Node", "(", "arg0", ")", ";", "if", "(", "head", "==", "null", ")", "{", "head", "=", "loc0", ";", "return", ";", "}", "Node", "loc1", "=", "head", ";", "while", "(", "loc1", ".", "next", "!=", "null", ")", "{", "loc1", "=", "loc1", ".", "next", ";", "}", "loc1", ".", "next", "=", "loc0", ";", "return", ";", "}"], "nl": "add new node to list", "nlToks": ["add", "new", "node", "to", "list"], "path": "prakashthelight/my-eclipse-workspace/tree/master/console-app/src/com/samples/utils/MyLinkedList.java", "idx": 903}
{"memberVariables": {"CAMERA_INITIAL_Y=320": "int", "game": "ShadowStruggles", "controller": "Controller", "screenWidth": "int", "stage": "MyStage", "screenHeight": "int", "width": "int", "camera": "OrthographicCamera", "BACKGROUND_Y=160": "int", "CAMERA_INITIAL_X=480": "int", "font": "BitmapFont", "height": "int"}, "code": ["Array", "<", "Asset", ">", "function", "(", ")", "{", "Array", "<", "Asset", ">", "assets", "=", "null", ";", "return", "assets", ";", "}"], "memberFunctions": {"mapsToLoad": [["Array<Asset>"]], "getName": [["String"]], "show": [["void"]], "loadLanguage": [["void"]], "getWidth": [["int"]], "getCamera": [["OrthographicCamera"]], "getHeight": [["int"]], "addGameObject": [["void", "Image f2d"]], "getGame": [["ShadowStruggles"]], "copy": [["BaseScreen"]], "render": [["void", "float delta"]], "resume": [["void"]], "getStage": [["MyStage"]], "texturesToLoad": [["Array<Asset>"]], "getController": [["Controller"]], "initComponents": [["void"]], "textureRegionsToLoad": [["Array<Asset>"]], "pause": [["void"]], "hide": [["void"]], "getBatch": [["SpriteBatch"]], "getSkin": [["Skin"]], "resize": [["void", "int width", "int height"]], "getFont": [["BitmapFont"]], "dispose": [["void"]], "setController": [["void", "Controller controller"]]}, "className": "BaseScreen", "renamed": ["Array", "<", "Asset", ">", "function", "(", ")", "{", "Array", "<", "Asset", ">", "loc0", "=", "null", ";", "return", "loc0", ";", "}"], "nl": "Specifies the particular sounds which must be loaded for this screen. It returns null by default.", "nlToks": ["Specifies", "the", "particular", "sounds", "which", "must", "be", "loaded", "for", "this", "screen", ".", "It", "returns", "null", "by", "default", "."], "path": "prativa/shadowstruggles/tree/master/Shadow Struggles/src/br/edu/ifsp/pds/shadowstruggles/screens/BaseScreen.java", "idx": 905}
{"memberVariables": {}, "code": ["void", "function", "(", ")", "{", "}"], "memberFunctions": {"isTerminal": [["boolean"], ["boolean"], ["boolean"], ["boolean"], ["boolean"], ["boolean"], ["boolean"]], "failureCause": [["Throwable"]], "failed": [["void", "State from", "Throwable failure"]], "startAsync": [["Service"]], "isRunning": [["boolean"]], "stopping": [["void", "State from"]], "awaitTerminated": [["void"], ["void", "long timeout", "TimeUnit unit"]], "stopAsync": [["Service"]], "state": [["State"]], "starting": [["void"]], "awaitRunning": [["void"], ["void", "long timeout", "TimeUnit unit"]], "terminated": [["void", "State from"]], "addListener": [["void", "Listener listener", "Executor executor"]]}, "className": "Service", "renamed": ["void", "function", "(", ")", "{", "}"], "nl": "Called when the service transitions from  {@linkplain State#STARTING STARTING} to{@linkplain State#RUNNING RUNNING}. This occurs when a service has successfully started.", "nlToks": ["Called", "when", "the", "service", "transitions", "from", "-LCB-", "@linkplain", "State", "#STARTING", "STARTING", "-RCB-", "to", "-LCB-", "@linkplain", "State", "#RUNNING", "RUNNING", "-RCB-", ".", "This", "occurs", "when", "a", "service", "has", "successfully", "started", "."], "path": "hazendaz/guava/tree/master/guava/src/com/google/common/util/concurrent/Service.java", "idx": 907}
{"memberVariables": {"listeners": "List<StateListener>", "DEFAULT_ROTATION=Rotation.NONE": "Rotation", "rotation": "Rotation", "DEFAULT_POWER=0.0": "double", "DEFAULT_DIRECTION=0.5 * Math.PI": "double", "DEFAULT_TEXT=\"\"": "String", "text": "String", "power": "double", "direction": "double"}, "code": ["double", "function", "(", ")", "{", "return", "this", ".", "power", ";", "}"], "memberFunctions": {"getDirection": [["double"]], "getText": [["String"]], "getRotation": [["Rotation"]], "reset": [["void"]], "setPower": [["void", "double power"]], "removeListener": [["void", "StateListener listener"]], "setRotation": [["void", "Rotation rotation"]], "setDirection": [["void", "double direction"]], "addListener": [["void", "StateListener listener"]], "setText": [["void", "String text"]]}, "className": "State", "renamed": ["double", "function", "(", ")", "{", "return", "this", ".", "power", ";", "}"], "nl": "Returns the power.", "nlToks": ["Returns", "the", "power", "."], "path": "phpvdb/buffer_bci/tree/master/java/imaginedMovement/nl/dcc/buffer_bci/imaginedMovement/State.java", "idx": 909}
{"memberVariables": {"referencedRevisionA": "String", "referencedRevisionLabelA": "String", "referencedRevisionLabelB": "String", "referencedRevisionB": "String", "triple": "Triple", "tripleResolutionState": "SDDTripleStateEnum", "resolutionState": "ResolutionStateEnum"}, "code": ["String", "function", "(", ")", "{", "return", "referencedRevisionLabelB", ";", "}"], "memberFunctions": {"setResolutionState": [["void", "ResolutionStateEnum resolutionState"]], "getReferencedRevisionLabelA": [["String"]], "setReferencedRevisionLabelA": [["void", "String referencedRevisionLabelA"]], "getTripleResolutionState": [["SDDTripleStateEnum"]], "setReferencedRevisionLabelB": [["void", "String referencedRevisionLabelB"]], "getTriple": [["Triple"]], "getReferencedRevisionB": [["String"]], "setTripleResolutionState": [["void", "SDDTripleStateEnum tripleResolutionState"]], "setTriple": [["void", "Triple triple"]], "setReferencedRevisionA": [["void", "String referencedRevisionA"]], "getReferencedRevisionA": [["String"]], "getResolutionState": [["ResolutionStateEnum"]], "setReferencedRevisionB": [["void", "String referencedRevisionB"]]}, "className": "Difference", "renamed": ["String", "function", "(", ")", "{", "return", "referencedRevisionLabelB", ";", "}"], "nl": "Get the referenced revision label in B.", "nlToks": ["Get", "the", "referenced", "revision", "label", "in", "B."], "path": "plt-tud/r43ples/tree/master/src/main/java/de/tud/plt/r43ples/merging/model/structure/Difference.java", "idx": 910}
{"memberVariables": {"TEMP_DIR=\"/Users/wendellpbarreto/Downloads\"": "String", "graph=new StringBuilder()": "StringBuilder", "DOT=\"/usr/local/bin/dot\"": "String"}, "code": ["String", "function", "(", ")", "{", "return", "graph", ".", "toString", "(", ")", ";", "}"], "memberFunctions": {"add": [["void", "String line"]], "addln": [["void", "String line"], ["void"]], "getGraph": [["byte[]", "String dot_source", "String type"]], "writeGraphToFile": [["int", "byte[] img", "String file"], ["int", "byte[] img", "File to"]], "start_graph": [["String"]], "end_graph": [["String"]], "start_subgraph": [["String", "String name"]], "readSource": [["void", "String input"]], "writeDotSourceToFile": [["File", "String str"]], "get_img_stream": [["byte[]", "File dot", "String type"]], "end_subgraph": [["String"]]}, "className": "GraphViz", "renamed": ["String", "function", "(", ")", "{", "return", "graph", ".", "toString", "(", ")", ";", "}"], "nl": "Returns the graph's source description in dot language.", "nlToks": ["Returns", "the", "graph", "'s", "source", "description", "in", "dot", "language", "."], "path": "adelinosegundo/gene_analytics/tree/master/src/util/graphviz/GraphViz.java", "idx": 912}
{"memberVariables": {"LOG_MSG=\"Exception caught from SentenceListener\"": "String", "DISPATCH_ALL=\"DISPATCH_ALL\"": "String", "reader": "DataReader", "dataListener": "DataListener", "listeners=new ConcurrentHashMap<String,List<SentenceListener>>()": "ConcurrentMap<String,List<SentenceListener>>", "pauseTimeout=DEFAULT_TIMEOUT": "int", "exceptionListener=null": "ExceptionListener", "thread": "Thread", "LOGGER=Logger.getLogger(SentenceReader.class.getName())": "Logger", "DEFAULT_TIMEOUT=5000": "int"}, "code": ["void", "function", "(", "SentenceListener", "sl", ",", "String", "type", ")", "{", "registerListener", "(", "sl", ",", "type", ")", ";", "}"], "memberFunctions": {"fireReadingPaused": [["void"]], "fireDataEvent": [["void", "String data"]], "getExceptionListener": [["ExceptionListener"]], "setPauseTimeout": [["void", "int millis"]], "start": [["void"]], "removeSentenceListener": [["void", "SentenceListener listener"]], "fireReadingStopped": [["void"]], "registerListener": [["void", "SentenceListener listener", "String type"]], "getSentenceListeners": [["List<SentenceListener>"]], "handleException": [["void", "String msg", "Exception ex"]], "setDataListener": [["void", "DataListener listener"]], "stop": [["void"]], "setInputStream": [["void", "InputStream stream"]], "fireReadingStarted": [["void"]], "fireSentenceEvent": [["void", "Sentence sentence"]], "getPauseTimeout": [["int"]], "setExceptionListener": [["void", "ExceptionListener exceptionListener"]], "setDatagramSocket": [["void", "DatagramSocket socket"]]}, "className": "SentenceReader", "renamed": ["void", "function", "(", "SentenceListener", "arg0", ",", "String", "arg1", ")", "{", "registerListener", "(", "arg0", ",", "arg1", ")", ";", "}"], "nl": "Adds a  {@link net.sf.marineapi.nmea.event.SentenceListener} that is interested in receiving onlysentences of certain type.", "nlToks": ["Adds", "a", "-LCB-", "@link", "net.sf.marineapi.nmea.event.SentenceListener", "-RCB-", "that", "is", "interested", "in", "receiving", "onlysentences", "of", "certain", "type", "."], "path": "pkoziol/marine-api/tree/master/src/main/java/net/sf/marineapi/nmea/io/SentenceReader.java", "idx": 913}
{"memberVariables": {"channelOpenFuture=SettableFuture.create()": "SettableFuture<PaymentChannelClientConnection>", "wireParser": "ProtobufParser<Protos.TwoWayChannelMessage>", "channelClient": "PaymentChannelClient"}, "code": ["ListenableFuture", "<", "PaymentIncrementAck", ">", "function", "(", "Coin", "size", ")", "{", "return", "channelClient", ".", "incrementPayment", "(", "size", ",", "null", ")", ";", "}"], "memberFunctions": {"getChannelOpenFuture": [["ListenableFuture<PaymentChannelClientConnection>"]], "disconnectWithoutSettlement": [["void"]], "settle": [["void"]], "state": [["PaymentChannelClientState"]]}, "className": "PaymentChannelClientConnection", "renamed": ["ListenableFuture", "<", "PaymentIncrementAck", ">", "function", "(", "Coin", "arg0", ")", "{", "return", "channelClient", ".", "incrementPayment", "(", "arg0", ",", "null", ")", ";", "}"], "nl": "Increments the total value which we pay the server.", "nlToks": ["Increments", "the", "total", "value", "which", "we", "pay", "the", "server", "."], "path": "1000000000001/bitcoinj/tree/master/core/src/main/java/org/bitcoinj/protocols/channels/PaymentChannelClientConnection.java", "idx": 914}
{"memberVariables": {}, "code": ["String", "function", "(", "String", "fullName", ")", "{", "int", "lastDot", "=", "fullName", ".", "lastIndexOf", "(", "'.'", ")", ";", "return", "lastDot", ">=", "0", "?", "fullName", ".", "substring", "(", "0", ",", "lastDot", ")", ":", "\"\"", ";", "}"], "memberFunctions": {"nth": [["String", "int n"]], "getFirstComponent": [["String", "String fullName"]], "getShortNameComponent": [["String", "String fullName"]], "isNameShort": [["boolean", "String name"]], "escape": [["String", "String s"], ["String", "char c"], ["String", "String s", "boolean unicode"], ["String", "char c", "boolean unicode"]], "unicodeEscape": [["String", "String s"], ["String", "char c"]], "removeFirstComponent": [["String", "String fullName"]]}, "className": "StringUtil", "renamed": ["String", "function", "(", "String", "arg0", ")", "{", "int", "loc0", "=", "arg0", ".", "lastIndexOf", "(", "'.'", ")", ";", "return", "loc0", ">=", "0", "?", "arg0", ".", "substring", "(", "0", ",", "loc0", ")", ":", "\"srini_string\"", ";", "}"], "nl": "Given the name for a class, returns the portion which appears to constitute the package -- i.e., all characters up to but not including the last dot, or no characters if the name has no dot.", "nlToks": ["Given", "the", "name", "for", "a", "class", ",", "returns", "the", "portion", "which", "appears", "to", "constitute", "the", "package", "--", "i.e.", ",", "all", "characters", "up", "to", "but", "not", "including", "the", "last", "dot", ",", "or", "no", "characters", "if", "the", "name", "has", "no", "dot", "."], "path": "polyglot-compiler/polyglot/tree/master/src/polyglot/util/StringUtil.java", "idx": 915}
{"memberVariables": {"pairwiseClient1": "ClientDetailsEntity", "pairwiseClient2": "ClientDetailsEntity", "pairwiseClient3": "ClientDetailsEntity", "sectorIdentifier3=\"https://sector-identifier-3/url\"": "String", "pairwiseClient4": "ClientDetailsEntity", "regularUsername=\"regular\"": "String", "sectorIdentifier1=\"https://sector-identifier-12/url\"": "String", "userInfoRepository": "UserInfoRepository", "adminSub=\"adminSub12d3a1f34a2\"": "String", "sectorIdentifier2=\"https://sector-identifier-12/url2\"": "String", "publicClientId1=\"publicClient-1-313124\"": "String", "pairwiseSub12=\"regularPairwise-12-31ijoef\"": "String", "userInfoRegular": "UserInfo", "publicClientId2=\"publicClient-2-4109312\"": "String", "pairwiseClientId4=\"pairwiseClient-4-4589723\"": "String", "publicClient1": "ClientDetailsEntity", "publicClient2": "ClientDetailsEntity", "service=new DefaultUserInfoService()": "DefaultUserInfoService", "pairwiseSub4=\"regularPairwise-4-1ojadsio\"": "String", "pairwiseClientId2=\"pairwiseClient-2-324416\"": "String", "clientDetailsEntityService": "ClientDetailsEntityService", "adminUsername=\"username\"": "String", "pairwiseSub3=\"regularPairwise-3-1ojadsio\"": "String", "userInfoAdmin": "UserInfo", "regularSub=\"regularSub652ha23b\"": "String", "pairwiseIdentiferService": "PairwiseIdentiferService", "pairwiseClientId1=\"pairwiseClient-1-2312\"": "String", "pairwiseClientId3=\"pairwiseClient-3-154157\"": "String"}, "code": ["void", "function", "(", ")", "{", "Mockito", ".", "when", "(", "userInfoRepository", ".", "getByUsername", "(", "adminUsername", ")", ")", ".", "thenReturn", "(", "userInfoAdmin", ")", ";", "UserInfo", "user", "=", "service", ".", "getByUsername", "(", "adminUsername", ")", ";", "assertEquals", "(", "user", ".", "getSub", "(", ")", ",", "adminSub", ")", ";", "}"], "memberFunctions": {"getByUsernameAndClientId_publicClients": [["void"]], "prepare": [["void"]], "getByUsernameAndClientId_pairwiseClients": [["void"]], "loadByUsername_nullUser": [["void"]], "loadByUsername_regular_success": [["void"]]}, "className": "TestDefaultUserInfoService", "renamed": ["void", "function", "(", ")", "{", "Mockito", ".", "when", "(", "userInfoRepository", ".", "getByUsername", "(", "adminUsername", ")", ")", ".", "thenReturn", "(", "userInfoAdmin", ")", ";", "UserInfo", "loc0", "=", "service", ".", "getByUsername", "(", "adminUsername", ")", ";", "assertEquals", "(", "loc0", ".", "getSub", "(", ")", ",", "adminSub", ")", ";", "}"], "nl": "Test loading an admin user, ensuring that the UserDetails object returned has both the ROLE_USER and ROLE_ADMIN authorities.", "nlToks": ["Test", "loading", "an", "admin", "user", ",", "ensuring", "that", "the", "UserDetails", "object", "returned", "has", "both", "the", "ROLE_USER", "and", "ROLE_ADMIN", "authorities", "."], "path": "adilansari/OpenID-Connect-Java-Spring-Server/tree/master/openid-connect-server/src/test/java/org/mitre/openid/connect/service/impl/TestDefaultUserInfoService.java", "idx": 916}
{"memberVariables": {"terms=new ArrayList<Term>()": "List<Term>"}, "code": ["boolean", "function", "(", "Scan", "s", ")", "{", "for", "(", "Term", "t", ":", "terms", ")", "if", "(", "!", "t", ".", "isSatisfied", "(", "s", ")", ")", "return", "false", ";", "return", "true", ";", "}"], "memberFunctions": {"equatesWithConstant": [["Constant", "String fldname"]], "reductionFactor": [["int", "Plan p"]], "conjoinWith": [["void", "Predicate pred"]], "selectPred": [["Predicate", "Schema sch"]], "equatesWithField": [["String", "String fldname"]], "joinPred": [["Predicate", "Schema sch1", "Schema sch2"]], "toString": [["String"]]}, "className": "Predicate", "renamed": ["boolean", "function", "(", "Scan", "arg0", ")", "{", "for", "(", "Term", "loc0", ":", "terms", ")", "if", "(", "!", "loc0", ".", "isSatisfied", "(", "arg0", ")", ")", "return", "false", ";", "return", "true", ";", "}"], "nl": "Returns true if the predicate evaluates to true with respect to the specified scan.", "nlToks": ["Returns", "true", "if", "the", "predicate", "evaluates", "to", "true", "with", "respect", "to", "the", "specified", "scan", "."], "path": "prerit2803/DBMSProject2/tree/master/simpledb/query/Predicate.java", "idx": 917}
{"memberVariables": {"basePort": "int", "INSTANCE=new PortAllocator()": "PortAllocator", "ranges": "List<PortRange>", "allocated=new boolean[BASE_PORT_INCREMENT - 1]": "boolean[]", "BASE_PORT_INCREMENT=10": "int", "serverSocket": "ServerSocket", "BASE_PORT=9000": "int"}, "code": ["void", "function", "(", "int", "port", ")", "{", "int", "i", "=", "port", "-", "basePort", "-", "1", ";", "if", "(", "!", "allocated", "[", "i", "]", ")", "{", "throw", "new", "IllegalStateException", "(", "\"Port is not allocated\"", ")", ";", "}", "allocated", "[", "i", "]", "=", "false", ";", "}"], "memberFunctions": {"hasPort": [["boolean", "int port"]], "allocatePort": [["int"], ["int"]], "release": [["void"]], "setUp": [["void"]], "tearDown": [["void"]]}, "className": "PortAllocator", "renamed": ["void", "function", "(", "int", "arg0", ")", "{", "int", "loc0", "=", "arg0", "-", "basePort", "-", "1", ";", "if", "(", "!", "allocated", "[", "loc0", "]", ")", "{", "throw", "new", "IllegalStateException", "(", "\"srini_string\"", ")", ";", "}", "allocated", "[", "loc0", "]", "=", "false", ";", "}"], "nl": "Release the given port.", "nlToks": ["Release", "the", "given", "port", "."], "path": "harsha89/wso2-axis2-transports/tree/master/modules/testkit/src/main/java/org/apache/axis2/transport/testkit/util/PortAllocator.java", "idx": 918}
{"memberVariables": {"dim": "Dimension", "panel": "XHTMLPanel"}, "code": ["XHTMLPanel", "function", "(", ")", "{", "return", "panel", ";", "}"], "memberFunctions": {"layout": [["void", "Graphics2D g2", "Dimension dim"]], "renderToImageAutoSize": [["BufferedImage", "String url", "int width"], ["BufferedImage", "String url", "int width", "int bufferedImageType"]], "setDocument": [["void", "String url"], ["void", "Document doc", "String base_url"]], "setSharedContext": [["void", "SharedContext ctx"]], "getMinimumSize": [["Rectangle"]], "getSharedContext": [["SharedContext"]], "render": [["void", "Graphics2D g2"]], "renderToImage": [["BufferedImage", "String url", "int width", "int height"], ["BufferedImage", "String url", "int width", "int height", "int bufferedImageType"]]}, "className": "Graphics2DRenderer", "renamed": ["XHTMLPanel", "function", "(", ")", "{", "return", "panel", ";", "}"], "nl": "Returns the panel used internally for rendering.", "nlToks": ["Returns", "the", "panel", "used", "internally", "for", "rendering", "."], "path": "plutogeek/flyingsaucer/tree/master/flying-saucer-core/src/main/java/org/xhtmlrenderer/simple/Graphics2DRenderer.java", "idx": 919}
{"memberVariables": {"allCasesFile": "File", "MAP_KEY_DELIMETER=\":::\"": "String", "sequencedCaseFile": "File", "knownMutationFile": "File", "sequencedGeneFile": "File"}, "code": ["void", "function", "(", "List", "<", "String", ">", "sequencedGeneList", ",", "List", "<", "String", ">", "sequencedCaseList", ",", "Map", "<", "String", ",", "String", ">", "mutationsMap", ")", "{", "for", "(", "String", "sequencedGene", ":", "sequencedGeneList", ")", "{", "for", "(", "String", "sequencedCase", ":", "sequencedCaseList", ")", "{", "String", "key", "=", "createKey", "(", "sequencedGene", ",", "sequencedCase", ")", ";", "mutationsMap", ".", "put", "(", "key", ",", "\"0\"", ")", ";", "}", "}", "}"], "memberFunctions": {"getList": [["ArrayList<String>", "File file"]], "generateMutationFile": [["String", "Map<String,String> mutationsMap"]], "getMutationMap": [["Map<String,String>", "List<String> allCasesList"]], "createKey": [["String", "String sequencedGene", "String sequencedCase"]], "applyKnownMutationsData": [["void", "File knownMutationsFile", "Map<String,String> mutationsMap"]], "main": [["void", "String[] args"]], "execute": [["String"]]}, "className": "GenerateMutationData", "renamed": ["void", "function", "(", "List", "<", "String", ">", "arg0", ",", "List", "<", "String", ">", "arg1", ",", "Map", "<", "String", ",", "String", ">", "arg2", ")", "{", "for", "(", "String", "loc0", ":", "arg0", ")", "{", "for", "(", "String", "loc1", ":", "arg1", ")", "{", "String", "loc2", "=", "createKey", "(", "loc0", ",", "loc1", ")", ";", "arg2", ".", "put", "(", "loc2", ",", "\"srini_string\"", ")", ";", "}", "}", "}"], "nl": "Applies no mutation data to mutation map.", "nlToks": ["Applies", "no", "mutation", "data", "to", "mutation", "map", "."], "path": "adamabeshouse/cbioportal/tree/master/core/src/main/java/org/mskcc/cbio/portal/scripts/GenerateMutationData.java", "idx": 920}
{"memberVariables": {"RETVAL_MALFORMED=3": "int", "RETVAL_OK=0": "int", "RETVAL_ERROR=1": "int", "RETVAL_NOENTRY=2": "int"}, "code": ["void", "function", "(", "long", "xid", ",", "int", "retval", ",", "ServiceInfo", "[", "]", "info", ")", "{", "}"], "memberFunctions": {"onServiceRegistration": [["void", "ServiceID id", "int flags", "int prefixBits", "InetAddress addr", "InetAddress oldAddr"]], "onServiceAdd": [["void", "long xid", "int retval", "ServiceInfo[] info"]], "onServiceRemove": [["void", "long xid", "int retval", "ServiceInfoStat[] info"]], "onServiceUnregistration": [["void", "ServiceID id", "int flags", "int prefixBits", "InetAddress addr"]], "onServiceDelayed": [["void", "long xid", "long pktId", "ServiceID service"]], "onServiceModify": [["void", "long xid", "int retval", "ServiceInfoStat[] info"]], "onFlowStatUpdate": [["void", "long xid", "int retval", "FlowStat[] stats", "boolean more"]], "getRetvalString": [["String", "int retval"]]}, "className": "HostCtrlCallbacks", "renamed": ["void", "function", "(", "long", "arg0", ",", "int", "arg1", ",", "ServiceInfo", "[", "]", "arg2", ")", "{", "}"], "nl": "Called as a result of a previous service retrieval request.", "nlToks": ["Called", "as", "a", "result", "of", "a", "previous", "service", "retrieval", "request", "."], "path": "princeton-sns/serval/tree/master/src/libservalctrl/java/src/org/servalarch/servalctrl/HostCtrlCallbacks.java", "idx": 921}
{"memberVariables": {"writer": "XMLStreamWriter"}, "code": ["void", "function", "(", ")", "{", "try", "{", "writer", ".", "writeStartElement", "(", "\"group\"", ")", ";", "}", "catch", "(", "XMLStreamException", "ex", ")", "{", "throw", "new", "RuntimeException", "(", "ex", ")", ";", "}", "}"], "memberFunctions": {"processDocumentEnd": [["void"]], "processGroupEnd": [["void"]], "processCommand": [["void", "Command command", "int parameter", "boolean hasParameter", "boolean optional"]], "processCharacterBytes": [["void", "byte[] data"]], "processString": [["void", "String string"]], "processDocumentStart": [["void"]], "processBinaryBytes": [["void", "byte[] data"]]}, "className": "RtfDumpListener", "renamed": ["void", "function", "(", ")", "{", "try", "{", "writer", ".", "writeStartElement", "(", "\"srini_string\"", ")", ";", "}", "catch", "(", "XMLStreamException", "loc0", ")", "{", "throw", "new", "RuntimeException", "(", "loc0", ")", ";", "}", "}"], "nl": "Write a group start tag.", "nlToks": ["Write", "a", "group", "start", "tag", "."], "path": "harrisaoz/rtfparserkit/tree/master/RTF Parser Kit/src/main/java/com/rtfparserkit/utils/RtfDumpListener.java", "idx": 923}
{"memberVariables": {}, "code": ["double", "function", "(", "DenseMatrix64F", "A", ",", "DenseMatrix64F", "eigenVector", ")", "{", "double", "bottom", "=", "VectorVectorMult", ".", "innerProd", "(", "eigenVector", ",", "eigenVector", ")", ";", "double", "top", "=", "VectorVectorMult", ".", "innerProdA", "(", "eigenVector", ",", "A", ",", "eigenVector", ")", ";", "return", "top", "/", "bottom", ";", "}"], "memberFunctions": {"computeEigenVector": [["Eigenpair", "DenseMatrix64F A", "double eigenvalue"]], "createMatrixV": [["DenseMatrix64F", "EigenDecomposition<DenseMatrix64F> eig"]], "dominantEigenpair": [["Eigenpair", "DenseMatrix64F A"]], "boundLargestEigenValue": [["double[]", "DenseMatrix64F A", "double[] bound"]], "createMatrixD": [["DenseMatrix64F", "EigenDecomposition eig"]]}, "className": "EigenOps", "renamed": ["double", "function", "(", "DenseMatrix64F", "arg0", ",", "DenseMatrix64F", "arg1", ")", "{", "double", "loc0", "=", "VectorVectorMult", ".", "innerProd", "(", "arg1", ",", "arg1", ")", ";", "double", "loc1", "=", "VectorVectorMult", ".", "innerProdA", "(", "arg1", ",", "arg0", ",", "arg1", ")", ";", "return", "loc1", "/", "loc0", ";", "}"], "nl": " Given matrix A and an eigen vector of A, compute the corresponding eigen value.  This is the Rayleigh quotient.  xTAx / xTx ", "nlToks": ["Given", "matrix", "A", "and", "an", "eigen", "vector", "of", "A", ",", "compute", "the", "corresponding", "eigen", "value", ".", "This", "is", "the", "Rayleigh", "quotient", ".", "xTAx", "/", "xTx"], "path": "adamaulia/efficient-java-matrix-library/tree/master/src/org/ejml/ops/EigenOps.java", "idx": 924}
{"memberVariables": {"fetcherRunRecorderServiceImpl": "IFetcherRunRecorderService", "fetcherWorkAreaServiceImpl": "IFetcherWorkAreaService", "logger=LoggerUtil.getLogger(DelayeringActivity.class)": "Logger"}, "code": ["boolean", "function", "(", "ActivityRequest", "activityRequest", ")", "{", "if", "(", "activityRequest", "==", "null", ")", "{", "return", "false", ";", "}", "if", "(", "activityRequest", ".", "getDelayerFileAttributesExtractorStrategy", "(", ")", "==", "null", ")", "{", "return", "false", ";", "}", "if", "(", "activityRequest", ".", "getFeedId", "(", ")", "==", "null", ")", "{", "return", "false", ";", "}", "return", "activityRequest", ".", "getConfigProperties", "(", ")", "!=", "null", ";", "}"], "memberFunctions": {"createDelayeredWorkareas": [["void", "PclFetcherWorkArea fetcherWorkArea", "ActivityRequest activityRequest", "List<ContentAcquisitionException> exceptions", "File dir", "int depth"]], "populatePclFetcherWorkAreaDefaults": [["void", "PclFetcherWorkArea fetcherWorkarea", "ActivityRequest activityRequest"]], "perform": [["ActivityResponse", "ActivityRequest activityRequest"]], "validateConfiguration": [["void", "ActivityRequest activityRequest"]], "performDelayering": [["void", "List<PclFetcherWorkArea> fetcherWorkAreas", "ActivityRequest activityRequest", "List<ContentAcquisitionException> exceptions"]]}, "className": "DelayeringActivity", "renamed": ["boolean", "function", "(", "ActivityRequest", "arg0", ")", "{", "if", "(", "arg0", "==", "null", ")", "{", "return", "false", ";", "}", "if", "(", "arg0", ".", "getDelayerFileAttributesExtractorStrategy", "(", ")", "==", "null", ")", "{", "return", "false", ";", "}", "if", "(", "arg0", ".", "getFeedId", "(", ")", "==", "null", ")", "{", "return", "false", ";", "}", "return", "arg0", ".", "getConfigProperties", "(", ")", "!=", "null", ";", "}"], "nl": "Validate the incoming request for mandatory parameters.", "nlToks": ["Validate", "the", "incoming", "request", "for", "mandatory", "parameters", "."], "path": "pkesireddy/portico_fletcher/tree/master/fetcher-master/fetcher-core/src/main/java/org/ithaka/cm/fetcher/core/activites/DelayeringActivity.java", "idx": 929}
{"memberVariables": {"threadPoolSize": "String", "notificationMgtConfigProperties": "Properties", "log=LogFactory.getLog(NotificationMgtConfigBuilder.class)": "Log", "moduleConfiguration": "Map<String,ModuleConfiguration>"}, "code": ["ModuleConfiguration", "function", "(", "String", "moduleName", ")", "{", "Properties", "moduleProperties", "=", "getModuleProperties", "(", "moduleName", ")", ";", "List", "<", "Subscription", ">", "subscriptionList", "=", "buildSubscriptionList", "(", "moduleName", ",", "moduleProperties", ")", ";", "return", "new", "ModuleConfiguration", "(", "getModuleProperties", "(", "moduleName", ")", ",", "subscriptionList", ")", ";", "}"], "memberFunctions": {"getModuleConfigurations": [["ModuleConfiguration", "String moduleName"]], "getThreadPoolSize": [["String"]], "getModuleProperties": [["Properties", "String moduleName"]], "build": [["void"]], "resolveSecrets": [["void"]], "buildSubscriptionList": [["List<Subscription>", "String moduleName", "Properties moduleProperties"]], "setThreadPoolSize": [["void"]], "loadProperties": [["Properties", "BundleContext bundleContext"]]}, "className": "NotificationMgtConfigBuilder", "renamed": ["ModuleConfiguration", "function", "(", "String", "arg0", ")", "{", "Properties", "loc0", "=", "getModuleProperties", "(", "arg0", ")", ";", "List", "<", "Subscription", ">", "loc1", "=", "buildSubscriptionList", "(", "arg0", ",", "loc0", ")", ";", "return", "new", "ModuleConfiguration", "(", "getModuleProperties", "(", "arg0", ")", ",", "loc1", ")", ";", "}"], "nl": "Building per module configuration objects", "nlToks": ["Building", "per", "module", "configuration", "objects"], "path": "harsha1979/carbon-identity/tree/master/components/notification-mgt/org.wso2.carbon.identity.notification.mgt/src/main/java/org/wso2/carbon/identity/notification/mgt/NotificationMgtConfigBuilder.java", "idx": 930}
{"memberVariables": {"service=\"com.alibaba.dubbo.test.injvmServie\"": "String", "serviceUrl=URL.valueOf(\"redis://redis/\" + service + \"?notify=false&methods=test1,test2\")": "URL", "consumerUrl=URL.valueOf(\"redis://consumer/\" + service + \"?notify=false&methods=test1,test2\")": "URL", "registryUrl=URL.valueOf(\"redis://239.255.255.255/\")": "URL"}, "code": ["void", "function", "(", ")", "{", "}"], "memberFunctions": {"testSubscribe": [["void"]], "setUpBeforeClass": [["void"]], "setUp": [["void"]]}, "className": "RedisRegistryTest", "renamed": ["void", "function", "(", ")", "{", "}"], "nl": "Test method for  {@link com.alibaba.dubbo.registry.support.injvm.InjvmRegistry#register(java.util.Map)}.", "nlToks": ["Test", "method", "for", "-LCB-", "@link", "com.alibaba.dubbo.registry.support.injvm.InjvmRegistry", "#register", "-LRB-", "java.util.Map", "-RRB-", "-RCB-", "."], "path": "acupple/dubbo/tree/master/dubbo-registry/dubbo-registry-redis/src/test/java/com/alibaba/dubbo/registry/redis/RedisRegistryTest.java", "idx": 931}
{"memberVariables": {"mob": "EntityMobWithInventory", "world": "World", "itemQuantity": "int", "itemDropped": "Item", "range": "int", "nextBlock": "BlockPos"}, "code": ["double", "function", "(", ")", "{", "BlockPos", "foundBlock", "=", "getNextBlock", "(", "1", ")", ";", "if", "(", "foundBlock", "==", "null", ")", "{", "return", "9999", ";", "}", "else", "{", "return", "Math", ".", "sqrt", "(", "mob", ".", "getDistanceSqToCenter", "(", "foundBlock", ")", ")", ";", "}", "}"], "memberFunctions": {"reachedBlock": [["boolean"]], "storeItemDroppedDetails": [["void"]], "isCorrectBlock": [["boolean", "int i", "int j", "int k", "int mode"]], "obtainItems": [["void"]], "moveToBlock": [["void"]], "setCurrentItem": [["void", "Item item"]], "nextStep": [["void"]], "getNextBlock": [["BlockPos", "int mode"]]}, "className": "SearchTaskGeneric", "renamed": ["double", "function", "(", ")", "{", "BlockPos", "loc0", "=", "getNextBlock", "(", "1", ")", ";", "if", "(", "loc0", "==", "null", ")", "{", "return", "9999", ";", "}", "else", "{", "return", "Math", ".", "sqrt", "(", "mob", ".", "getDistanceSqToCenter", "(", "loc0", ")", ")", ";", "}", "}"], "nl": "Returns distance to closest block. If none is found, returns 9999.", "nlToks": ["Returns", "distance", "to", "closest", "block", ".", "If", "none", "is", "found", ",", "returns", "9999", "."], "path": "pregnantboy/fyp/tree/master/forge/src/main/java/fuzzyMod/tasks/SearchTaskGeneric.java", "idx": 932}
{"memberVariables": {"appPath=\"\"": "String", "keys": "Keys", "machine": "Machine", "logPath=\"\"": "String", "options": "Options", "playlists": "HashMap<Integer,Playlist>", "genreListModel": "DefaultListModel", "logger=Logger.getLogger(\"JaMuz\")": "Logger", "db": "DbConnJaMuz", "tags": "ArrayList<String>"}, "code": ["boolean", "function", "(", ")", "{", "playlists", "=", "new", "HashMap", "<", ">", "(", ")", ";", "return", "getDb", "(", ")", ".", "getPlaylists", "(", "playlists", ")", ";", "}"], "memberFunctions": {"logConfig": [["void", "String id"]], "getCurrentMachine": [["boolean"]], "createLog": [["boolean"]], "getProxy": [["Proxy"]], "readTags": [["void"]], "getPlaylistsVisible": [["List<Playlist>"]], "readGenres": [["void"]], "setProxy": [["boolean"]], "connectDatabase": [["boolean"]], "getPlaylist": [["Playlist", "int id"]], "getLogger": [["Logger"]], "getTags": [["ArrayList<String>"]], "configure": [["boolean", "String appPath"]], "getKeys": [["Options"]], "getFile": [["File", "String filename", "String... args"]], "getDb": [["DbConnJaMuz"]], "getMachine": [["Machine"]], "getGenreListModel": [["DefaultListModel"]], "getHttpClient": [["DefaultHttpClient"]], "getLogPath": [["String"]], "getOptions": [["Options"]], "getGenres": [["List<String>"]], "getPlaylists": [["List<Playlist>"]]}, "className": "Jamuz", "renamed": ["boolean", "function", "(", ")", "{", "playlists", "=", "new", "HashMap", "<", ">", "(", ")", ";", "return", "getDb", "(", ")", ".", "getPlaylists", "(", "playlists", ")", ";", "}"], "nl": "Reads playlists from database", "nlToks": ["Reads", "playlists", "from", "database"], "path": "phramusca/JaMuz/tree/master/src/jamuz/Jamuz.java", "idx": 936}
{"memberVariables": {"recoveryMgr": "RecoveryMgr", "myBuffers=new BufferList()": "BufferList", "concurMgr": "ConcurrencyMgr", "END_OF_FILE=-1": "int", "txnum": "int", "nextTxNum=0": "int"}, "code": ["void", "function", "(", ")", "{", "SimpleDB", ".", "bufferMgr", "(", ")", ".", "flushAll", "(", "txnum", ")", ";", "recoveryMgr", ".", "recover", "(", ")", ";", "}"], "memberFunctions": {"rollback": [["void"]], "getInt": [["int", "Block blk", "int offset"]], "setString": [["void", "Block blk", "int offset", "String val"]], "pin": [["void", "Block blk"]], "size": [["int", "String filename"]], "commit": [["void"]], "unpin": [["void", "Block blk"]], "getString": [["String", "Block blk", "int offset"]], "nextTxNumber": [["int"]], "append": [["Block", "String filename", "PageFormatter fmtr"]], "setInt": [["void", "Block blk", "int offset", "int newVal"]]}, "className": "Transaction", "renamed": ["void", "function", "(", ")", "{", "SimpleDB", ".", "bufferMgr", "(", ")", ".", "flushAll", "(", "txnum", ")", ";", "recoveryMgr", ".", "recover", "(", ")", ";", "}"], "nl": "Flushes all modified buffers. Then goes through the log, rolling back all uncommitted transactions.  Finally,  writes a quiescent checkpoint record to the log. This method is called only during system startup, before user transactions begin.", "nlToks": ["Flushes", "all", "modified", "buffers", ".", "Then", "goes", "through", "the", "log", ",", "rolling", "back", "all", "uncommitted", "transactions", ".", "Finally", ",", "writes", "a", "quiescent", "checkpoint", "record", "to", "the", "log", ".", "This", "method", "is", "called", "only", "during", "system", "startup", ",", "before", "user", "transactions", "begin", "."], "path": "prerit2803/DBMSProject2/tree/master/simpledb/tx/Transaction.java", "idx": 937}
{"memberVariables": {"password": "String", "credentialsExpirationDate": "Date", "loginsFallidos": "Integer", "grantedAuthorities": "Collection<GrantedAuthority>", "credentialsNonExpired": "boolean", "accountNonExpired": "boolean", "id": "Long", "enabled": "boolean", "email": "String", "username": "String", "accountNonLocked": "boolean", "nombres": "String"}, "code": ["void", "function", "(", "String", "password", ")", "{", "this", ".", "password", "=", "password", ";", "}"], "memberFunctions": {"setCredentialsNonExpired": [["void", "Boolean credentialsNonExpired"]], "getCredentialsExpirationDate": [["Date"]], "setUsername": [["void", "String username"]], "setAccountNonLocked": [["void", "Boolean accountNonLocked"]], "getNombres": [["String"]], "setAccountNonExpired": [["void", "Boolean accountNonExpired"]], "isAccountNonLocked": [["boolean"]], "getId": [["Long"]], "setNombres": [["void", "String nombres"]], "getAuthorities": [["Collection<GrantedAuthority>"]], "getUsername": [["String"]], "setEnabled": [["void", "Boolean enabled"]], "getPassword": [["String"]], "setEmail": [["void", "String email"]], "setAuthorities": [["void", "Collection<GrantedAuthority> grantedAuthorities"]], "isAccountNonExpired": [["boolean"]], "isCredentialsNonExpired": [["boolean"]], "isEnabled": [["boolean"]], "getEmail": [["String"]], "setId": [["void", "Long id"]], "setCredentialsExpirationDate": [["void", "Date credentialsExpirationDate"]]}, "className": "SilexUserDetails", "renamed": ["void", "function", "(", "String", "arg0", ")", "{", "this", ".", "password", "=", "arg0", ";", "}"], "nl": "Setea el password del usuario.", "nlToks": ["Setea", "el", "password", "del", "usuario", "."], "path": "pfrodriguezj/Komuno/tree/master/Komuno/src/main/java/co/com/silex/security/SilexUserDetails.java", "idx": 938}
{"memberVariables": {"encryptionCryptoProperties": "Object", "bus": "Bus", "signatureCrypto": "Crypto", "signatureProperties=new SignatureProperties()": "SignatureProperties", "LOG=LogUtils.getL7dLogger(StaticSTSProperties.class)": "Logger", "issuer": "String", "encryptionProperties=new EncryptionProperties()": "EncryptionProperties", "callbackHandler": "CallbackHandler", "relationships": "List<Relationship>", "validateUseKey=true": "boolean", "relationshipResolver": "RelationshipResolver", "callbackHandlerClass": "String", "signatureUsername": "String", "encryptionCrypto": "Crypto", "samlRealmCodec": "SAMLRealmCodec", "encryptionUsername": "String", "signatureCryptoProperties": "Object", "identityMapper": "IdentityMapper", "realmParser": "RealmParser"}, "code": ["String", "function", "(", ")", "{", "return", "signatureUsername", ";", "}"], "memberFunctions": {"getRelationshipResolver": [["RelationshipResolver"]], "getBus": [["Bus"]], "setSamlRealmCodec": [["void", "SAMLRealmCodec samlRealmCodec"]], "getResourceManager": [["ResourceManager"]], "setSignaturePropertiesFile": [["void", "String signaturePropertiesFile"]], "setCallbackHandler": [["void", "CallbackHandler callbackHandler"]], "setEncryptionProperties": [["void", "EncryptionProperties encryptionProperties"]], "getEncryptionProperties": [["EncryptionProperties"]], "isValidateUseKey": [["boolean"]], "setSignatureUsername": [["void", "String signatureUsername"]], "getRelationships": [["List<Relationship>"]], "getSamlRealmCodec": [["SAMLRealmCodec"]], "getEncryptionUsername": [["String"]], "setIdentityMapper": [["void", "IdentityMapper identityMapper"]], "setEncryptionPropertiesFile": [["void", "String encryptionPropertiesFile"]], "setEncryptionUsername": [["void", "String encryptionUsername"]], "setCallbackHandlerClass": [["void", "String callbackHandlerClass"]], "getEncryptionCrypto": [["Crypto"]], "setRelationships": [["void", "List<Relationship> relationships"]], "getSignatureProperties": [["SignatureProperties"]], "setSignatureProperties": [["void", "SignatureProperties signatureProperties"]], "setRealmParser": [["void", "RealmParser realmParser"]], "getIssuer": [["String"]], "setSignatureCryptoProperties": [["void", "Object signatureCryptoProperties"]], "setSignatureCrypto": [["void", "Crypto signatureCrypto"]], "getIdentityMapper": [["IdentityMapper"]], "setValidateUseKey": [["void", "boolean validateUseKey"]], "configureProperties": [["void"]], "setEncryptionCrypto": [["void", "Crypto encryptionCrypto"]], "getRealmParser": [["RealmParser"]], "getSignatureCrypto": [["Crypto"]], "setIssuer": [["void", "String issuer"]], "getCallbackHandler": [["CallbackHandler"]], "setEncryptionCryptoProperties": [["void", "Object encryptionCryptoProperties"]], "setBus": [["void", "Bus bus"]]}, "className": "StaticSTSProperties", "renamed": ["String", "function", "(", ")", "{", "return", "signatureUsername", ";", "}"], "nl": "Get the username/alias to use to sign any issued tokens", "nlToks": ["Get", "the", "username/alias", "to", "use", "to", "sign", "any", "issued", "tokens"], "path": "primesign/cxf/tree/master/services/sts/sts-core/src/main/java/org/apache/cxf/sts/StaticSTSProperties.java", "idx": 939}
{"memberVariables": {"log=LoggerFactory.getLogger(IngredientService.class)": "Logger", "ingredientRepository": "IngredientRepository", "max_suggest=5": "int"}, "code": ["void", "function", "(", "String", "id", ")", "{", "log", ".", "debug", "(", "\"Request to delete Ingredient : {}\"", ",", "id", ")", ";", "ingredientRepository", ".", "delete", "(", "id", ")", ";", "}"], "memberFunctions": {"getAutoSuggest": [["List<String>", "String ingredientName"]], "save": [["Ingredient", "Ingredient ingredient"], ["List<Ingredient>", "List<Ingredient> ingredients"]], "findOne": [["Ingredient", "String id"]], "findAll": [["Page<Ingredient>", "Pageable pageable"]]}, "className": "IngredientService", "renamed": ["void", "function", "(", "String", "arg0", ")", "{", "log", ".", "debug", "(", "\"srini_string\"", ",", "arg0", ")", ";", "ingredientRepository", ".", "delete", "(", "arg0", ")", ";", "}"], "nl": "Delete the  ingredient by id.", "nlToks": ["Delete", "the", "ingredient", "by", "id", "."], "path": "pigkey/kitchen/tree/master/app/src/main/java/com/kitchen/app/service/IngredientService.java", "idx": 941}
{"memberVariables": {"game": "ShadowStruggles", "textures": "Array<Asset>", "sounds": "Array<Asset>", "rpgMaps": "Array<Asset>", "assetName": "String", "textureRegions": "Array<Asset>", "LOG=DataManager.class.getName()": "String", "assetType": "String"}, "code": ["void", "function", "(", ")", "{", "try", "{", "createTextureAtlas", "(", ")", ";", "}", "catch", "(", "IOException", "e", ")", "{", "Gdx", ".", "app", ".", "error", "(", "LOG", ",", "\"Error creating texture atlas: \"", ",", "e", ")", ";", "}", "loadTextureAtlas", "(", ")", ";", "loadTextures", "(", ")", ";", "loadSounds", "(", ")", ";", "loadMaps", "(", ")", ";", "}"], "memberFunctions": {"loadMaps": [["void"]], "disposeSounds": [["void"]], "getTextureRegion": [["TextureRegion", "String regionName", "String resourceType"]], "getTiledMap": [["TiledMap", "String mapName", "String resourceType"]], "disposeTextures": [["void"]], "disposeMaps": [["void"]], "getTexture": [["Texture", "String textureName", "String resourceType"]], "unloadSounds": [["void", "Array<Asset> soundsToLoad"]], "loadSounds": [["void"]], "equals": [["boolean", "Object obj"]], "setAssetsToLoad": [["void", "Array<Asset> textureRegions", "Array<Asset> textures", "Array<Asset> sounds", "Array<Asset> rpgMaps"]], "dispose": [["void"]], "loadTextureAtlas": [["void"]], "createTextureAtlas": [["void"]], "disposeAtlas": [["void"]], "loadTextures": [["void"]]}, "className": "Loader", "renamed": ["void", "function", "(", ")", "{", "try", "{", "createTextureAtlas", "(", ")", ";", "}", "catch", "(", "IOException", "loc0", ")", "{", "Gdx", ".", "app", ".", "error", "(", "LOG", ",", "\"srini_string\"", ",", "loc0", ")", ";", "}", "loadTextureAtlas", "(", ")", ";", "loadTextures", "(", ")", ";", "loadSounds", "(", ")", ";", "loadMaps", "(", ")", ";", "}"], "nl": "Starts loading the assets.  {@link Loader#setAssetsToLoad()} must becalled first.", "nlToks": ["Starts", "loading", "the", "assets", ".", "-LCB-", "@link", "Loader", "#setAssetsToLoad", "-LRB-", "-RRB-", "-RCB-", "must", "becalled", "first", "."], "path": "prativa/shadowstruggles/tree/master/Shadow Struggles/src/br/edu/ifsp/pds/shadowstruggles/data/Loader.java", "idx": 942}
{"memberVariables": {"bb": "BoundingBox", "splitValue": "float", "testLatMin=Float.NaN": "float", "splitAtLat": "boolean", "maxDepth": "int", "testLatMax=Float.NaN": "float", "depth": "int", "maxEntities": "int", "children": "KDTree[]", "entities": "ArrayList<DefaultMapEntity>", "testLonMax=Float.NaN": "float", "isTrue=true": "boolean", "isSorted": "boolean", "testLonMin=Float.NaN": "float"}, "code": ["int", "function", "(", ")", "{", "return", "children", "==", "null", "?", "1", ":", "1", "+", "Math", ".", "max", "(", "children", "[", "0", "]", ".", "depth", "(", ")", ",", "children", "[", "1", "]", ".", "depth", "(", ")", ")", ";", "}"], "memberFunctions": {"setUnsorted": [["void"]], "visitEntities": [["void", "EntityVisitor visitor", "BoundingBox vbox", "float scale"]], "compare": [["int", "MapEntity e1", "MapEntity e2"]], "getSplitCoords": [["List<double[]>"]], "insertEntity": [["void", "DefaultMapEntity entity"]], "computeSplitValues": [["void"]], "isVisible": [["boolean", "DefaultMapEntity entity"]], "getBoundingBox": [["BoundingBox"]]}, "className": "KDTree", "renamed": ["int", "function", "(", ")", "{", "return", "children", "==", "null", "?", "1", ":", "1", "+", "Math", ".", "max", "(", "children", "[", "0", "]", ".", "depth", "(", ")", ",", "children", "[", "1", "]", ".", "depth", "(", ")", ")", ";", "}"], "nl": "Returns the depth of the tree (longest path length from root to leaf).", "nlToks": ["Returns", "the", "depth", "of", "the", "tree", "-LRB-", "longest", "path", "length", "from", "root", "to", "leaf", "-RRB-", "."], "path": "peterplupo/ia201102/tree/master/trabalho1/aimax-osm/src/main/java/aimax/osm/data/impl/KDTree.java", "idx": 943}
{"memberVariables": {"serialVersionUID=0": "long", "entries": "List<Map.Entry<Range<K>,V>>", "EMPTY=new ImmutableRangeMap<Comparable<?>,Object>(ImmutableList.<Range<Comparable<?>>>of(),ImmutableList.of())": "ImmutableRangeMap<Comparable<?>,Object>", "ranges": "ImmutableList<Range<K>>", "values": "ImmutableList<V>", "mapOfRanges": "ImmutableMap<Range<K>,V>"}, "code": ["void", "function", "(", "Range", "<", "K", ">", "range", ",", "V", "value", ")", "{", "throw", "new", "UnsupportedOperationException", "(", ")", ";", "}"], "memberFunctions": {"readResolve": [["Object"]], "asMapOfRanges": [["ImmutableMap<Range<K>,V>"]], "clear": [["void"]], "putCoalescing": [["void", "Range<K> range", "V value"]], "copyOf": [["ImmutableRangeMap<K,V>", "RangeMap<K,? extends V> rangeMap"]], "writeReplace": [["Object"]], "remove": [["void", "Range<K> range"]], "asDescendingMapOfRanges": [["ImmutableMap<Range<K>,V>"]], "subRangeMap": [["ImmutableRangeMap<K,V>", "final Range<K> range"]], "createRangeMap": [["Object"]], "build": [["ImmutableRangeMap<K,V>"]], "hashCode": [["int"]], "of": [["ImmutableRangeMap<K,V>"], ["ImmutableRangeMap<K,V>", "Range<K> range", "V value"]], "putAll": [["Builder<K,V>", "RangeMap<K,? extends V> rangeMap"], ["void", "RangeMap<K,V> rangeMap"]], "get": [["V", "K key"]], "equals": [["boolean", "@Nullable Object o"]], "builder": [["Builder<K,V>"]], "toString": [["String"]], "getEntry": [["Map.Entry<Range<K>,V>", "K key"]], "span": [["Range<K>"]]}, "className": "ImmutableRangeMap", "renamed": ["void", "function", "(", "Range", "<", "K", ">", "arg0", ",", "V", "arg1", ")", "{", "throw", "new", "UnsupportedOperationException", "(", ")", ";", "}"], "nl": "Guaranteed to throw an exception and leave the  {@code RangeMap} unmodified.", "nlToks": ["Guaranteed", "to", "throw", "an", "exception", "and", "leave", "the", "-LCB-", "@code", "RangeMap", "-RCB-", "unmodified", "."], "path": "hazendaz/guava/tree/master/guava/src/com/google/common/collect/ImmutableRangeMap.java", "idx": 944}
{"memberVariables": {"gammasV[]": "double", "min": "int", "gammasU[]": "double", "b[]": "double", "u[]": "double", "UBV": "DenseMatrix64F", "m": "int", "n": "int"}, "code": ["double", "[", "]", "function", "(", ")", "{", "return", "gammasV", ";", "}"], "memberFunctions": {"init": [["void", "DenseMatrix64F A"]], "handleV": [["DenseMatrix64F", "DenseMatrix64F V", "boolean transpose", "boolean compact", "int m", "int n", "int min"]], "handleU": [["DenseMatrix64F", "DenseMatrix64F U", "boolean transpose", "boolean compact", "int m", "int n", "int min"]], "decompose": [["boolean", "DenseMatrix64F A"]], "getDiagonal": [["void", "double[] diag", "double[] off"]], "_decompose": [["boolean"]], "inputModified": [["boolean"]], "getU": [["DenseMatrix64F", "DenseMatrix64F U", "boolean transpose", "boolean compact"]], "getV": [["DenseMatrix64F", "DenseMatrix64F V", "boolean transpose", "boolean compact"]], "handleB": [["DenseMatrix64F", "DenseMatrix64F B", "boolean compact", "int m", "int n", "int min"]], "computeV": [["void", "int k"]], "computeU": [["void", "int k"]], "getUBV": [["DenseMatrix64F"]], "getGammasU": [["double[]"]], "getB": [["DenseMatrix64F", "DenseMatrix64F B", "boolean compact"]]}, "className": "BidiagonalDecompositionRow_D64", "renamed": ["double", "[", "]", "function", "(", ")", "{", "return", "gammasV", ";", "}"], "nl": "Returns gammas from the householder operations for the V matrix.", "nlToks": ["Returns", "gammas", "from", "the", "householder", "operations", "for", "the", "V", "matrix", "."], "path": "adamaulia/efficient-java-matrix-library/tree/master/src/org/ejml/alg/dense/decomposition/bidiagonal/BidiagonalDecompositionRow_D64.java", "idx": 945}
{"memberVariables": {"logger=Logger.getLogger(\"OverallTest\")": "Logger", "engine=null": "FuriaChanEngine"}, "code": ["void", "function", "(", ")", "{", "}"], "memberFunctions": {"closeEngine": [["void"]], "testAll": [["void"]], "fragmentDataSet": [["void", "String dataset"]]}, "className": "OverallTest", "renamed": ["void", "function", "(", ")", "{", "}"], "nl": "Properties for the test.", "nlToks": ["Properties", "for", "the", "test", "."], "path": "pombreda/furia-chan/tree/master/src/test/java/org/kit/furia/OverallTest.java", "idx": 946}
{"memberVariables": {}, "code": ["void", "function", "(", ")", "{", "}"], "memberFunctions": {"isTerminal": [["boolean"], ["boolean"], ["boolean"], ["boolean"], ["boolean"], ["boolean"], ["boolean"]], "failureCause": [["Throwable"]], "failed": [["void", "State from", "Throwable failure"]], "startAsync": [["Service"]], "running": [["void"]], "isRunning": [["boolean"]], "stopping": [["void", "State from"]], "awaitTerminated": [["void"], ["void", "long timeout", "TimeUnit unit"]], "stopAsync": [["Service"]], "state": [["State"]], "awaitRunning": [["void"], ["void", "long timeout", "TimeUnit unit"]], "terminated": [["void", "State from"]], "addListener": [["void", "Listener listener", "Executor executor"]]}, "className": "Service", "renamed": ["void", "function", "(", ")", "{", "}"], "nl": "Called when the service transitions from  {@linkplain State#NEW NEW} to{@linkplain State#STARTING STARTING}. This occurs when  {@link Service#startAsync} is calledthe first time.", "nlToks": ["Called", "when", "the", "service", "transitions", "from", "-LCB-", "@linkplain", "State", "#NEW", "NEW", "-RCB-", "to", "-LCB-", "@linkplain", "State", "#STARTING", "STARTING", "-RCB-", ".", "This", "occurs", "when", "-LCB-", "@link", "Service", "#startAsync", "-RCB-", "is", "calledthe", "first", "time", "."], "path": "hazendaz/guava/tree/master/guava/src/com/google/common/util/concurrent/Service.java", "idx": 947}
{"memberVariables": {"next": "ValueHolder", "holderTail=holderHead": "ValueHolder", "name": "String", "className": "String", "omitNullValues=false": "boolean", "holderHead=new ValueHolder()": "ValueHolder", "value": "Object"}, "code": ["ToStringHelper", "function", "(", "double", "value", ")", "{", "return", "addHolder", "(", "String", ".", "valueOf", "(", "value", ")", ")", ";", "}"], "memberFunctions": {"add": [["ToStringHelper", "String name", "@Nullable Object value"], ["ToStringHelper", "String name", "boolean value"], ["ToStringHelper", "String name", "char value"], ["ToStringHelper", "String name", "double value"], ["ToStringHelper", "String name", "float value"], ["ToStringHelper", "String name", "int value"], ["ToStringHelper", "String name", "long value"]], "omitNullValues": [["ToStringHelper"]], "addHolder": [["ValueHolder"], ["ToStringHelper", "@Nullable Object value"], ["ToStringHelper", "String name", "@Nullable Object value"]], "firstNonNull": [["T", "@Nullable T first", "@Nullable T second"]], "toStringHelper": [["ToStringHelper", "Object self"], ["ToStringHelper", "Class<?> clazz"], ["ToStringHelper", "String className"]], "toString": [["String"]]}, "className": "MoreObjects", "renamed": ["ToStringHelper", "function", "(", "double", "arg0", ")", "{", "return", "addHolder", "(", "String", ".", "valueOf", "(", "arg0", ")", ")", ";", "}"], "nl": "Adds an unnamed value to the formatted output. It is strongly encouraged to use  {@link #add(String,double)} instead and give value areadable name.", "nlToks": ["Adds", "an", "unnamed", "value", "to", "the", "formatted", "output", ".", "It", "is", "strongly", "encouraged", "to", "use", "-LCB-", "@link", "#add", "-LRB-", "String", ",", "double", "-RRB-", "-RCB-", "instead", "and", "give", "value", "areadable", "name", "."], "path": "hazendaz/guava/tree/master/guava/src/com/google/common/base/MoreObjects.java", "idx": 948}
{"memberVariables": {"scopes2=ImmutableSet.of(\"alpha\",\"beta\",\"betest\")": "Set<String>", "permissionRepository": "PermissionRepository", "scopes1=ImmutableSet.of(\"foo\",\"bar\",\"baz\")": "Set<String>", "rs2Owner=\"resource set owner 2\"": "String", "rs1Id=1L": "Long", "rs2": "ResourceSet", "rs1": "ResourceSet", "permissionService": "DefaultPermissionService", "rs1Name=\"resource set 1\"": "String", "scopeService": "SystemScopeService", "rs1Owner=\"resource set owner 1\"": "String", "rs2Id=2L": "Long", "rs2Name=\"resource set 2\"": "String"}, "code": ["void", "function", "(", ")", "{", "PermissionTicket", "perm", "=", "permissionService", ".", "createTicket", "(", "rs1", ",", "scopes1", ")", ";", "assertNotNull", "(", "perm", ".", "getTicket", "(", ")", ")", ";", "}"], "memberFunctions": {"prepare": [["void"]], "testCreate_scopeMismatch": [["void"]], "testCreate_uuid": [["void"]], "testCreate_differentTicketsSameClient": [["void"]], "testCreate_differentTicketsDifferentClient": [["void"]]}, "className": "TestDefaultPermissionService", "renamed": ["void", "function", "(", ")", "{", "PermissionTicket", "loc0", "=", "permissionService", ".", "createTicket", "(", "rs1", ",", "scopes1", ")", ";", "assertNotNull", "(", "loc0", ".", "getTicket", "(", ")", ")", ";", "}"], "nl": "Test method for  {@link org.mitre.uma.service.impl.DefaultPermissionService#createTicket(org.mitre.uma.model.ResourceSet,java.util.Set)}.", "nlToks": ["Test", "method", "for", "-LCB-", "@link", "org.mitre.uma.service.impl.DefaultPermissionService", "#createTicket", "-LRB-", "org.mitre.uma.model.ResourceSet", ",", "java.util.Set", "-RRB-", "-RCB-", "."], "path": "adilansari/OpenID-Connect-Java-Spring-Server/tree/master/uma-server/src/test/java/org/mitre/uma/service/impl/TestDefaultPermissionService.java", "idx": 950}
{"memberVariables": {"border": "Border", "snake": "Snake", "gameElements": "Vector<GameElement>", "gui": "GUI", "STEP=10": "int"}, "code": ["void", "function", "(", ")", "{", "if", "(", "!", "snake", ".", "isAlive", ")", "this", ".", "gui", ".", "setTitle", "(", "\"Game Over! Eigenkollision\"", ")", ";", "if", "(", "!", "border", ".", "isAlive", ")", "this", ".", "gui", ".", "setTitle", "(", "\"Game Over! Borderkollision\"", ")", ";", "if", "(", "gameElements", ".", "size", "(", ")", "==", "2", ")", "{", "snake", ".", "isAlive", "=", "false", ";", "gui", ".", "setTitle", "(", "\"Spiel gewonnen.\"", ")", ";", "}", "}"], "memberFunctions": {"setDiamonds": [["void", "int anzahl"]], "checkState": [["void"]], "main": [["void", "String[] args"]], "draw": [["void", "Graphics g"]], "checkGameElement": [["void", "Snake s"]]}, "className": "Game", "renamed": ["void", "function", "(", ")", "{", "if", "(", "!", "snake", ".", "isAlive", ")", "this", ".", "gui", ".", "setTitle", "(", "\"srini_string\"", ")", ";", "if", "(", "!", "border", ".", "isAlive", ")", "this", ".", "gui", ".", "setTitle", "(", "\"srini_string\"", ")", ";", "if", "(", "gameElements", ".", "size", "(", ")", "==", "2", ")", "{", "snake", ".", "isAlive", "=", "false", ";", "gui", ".", "setTitle", "(", "\"srini_string\"", ")", ";", "}", "}"], "nl": "checkGameOver prueft ob die Bedingung erfuellt wurde die fuer ein Game Over erforderlich sind.", "nlToks": ["checkGameOver", "prueft", "ob", "die", "Bedingung", "erfuellt", "wurde", "die", "fuer", "ein", "Game", "Over", "erforderlich", "sind", "."], "path": "powerslaver85/M226/tree/master/Projects/src/snake/Game.java", "idx": 951}
{"memberVariables": {"nodePosition=new HashMap<>()": "Map<T,Integer>", "allNodes=new ArrayList<>()": "List<Node>", "weight": "int", "key": "T"}, "code": ["T", "function", "(", ")", "{", "Node", "node", "=", "extractMinNode", "(", ")", ";", "return", "node", ".", "key", ";", "}"], "memberFunctions": {"add": [["void", "int weight", "T key"]], "min": [["T"]], "printPositionMap": [["void"]], "swap": [["void", "Node node1", "Node node2"]], "updatePositionMap": [["void", "T data1", "T data2", "int pos1", "int pos2"]], "getWeight": [["Integer", "T key"]], "extractMinNode": [["Node"]], "printHeap": [["void"]], "main": [["void", "String args[]"]], "decrease": [["void", "T data", "int newWeight"]], "containsData": [["boolean", "T key"]], "empty": [["boolean"]]}, "className": "BinaryMinHeap", "renamed": ["T", "function", "(", ")", "{", "Node", "loc0", "=", "extractMinNode", "(", ")", ";", "return", "loc0", ".", "key", ";", "}"], "nl": "Extract min value key from the heap", "nlToks": ["Extract", "min", "value", "key", "from", "the", "heap"], "path": "piyushbajaj/Java_Tutorial_DS/tree/master/Heap/BinaryMinHeap.java", "idx": 952}
{"memberVariables": {}, "code": ["void", "function", "(", ")", "{", "Assert", ".", "assertEquals", "(", "NetworkAddressUtils", ".", "getFqdnHost", "(", "new", "InetSocketAddress", "(", "\"localhost\"", ",", "0", ")", ")", ",", "\"localhost\"", ")", ";", "Assert", ".", "assertEquals", "(", "NetworkAddressUtils", ".", "getFqdnHost", "(", "new", "WorkerNetAddress", "(", ")", ".", "setHost", "(", "\"localhost\"", ")", ")", ",", "\"localhost\"", ")", ";", "}"], "memberFunctions": {"replaceHostName": [["void"]], "resolveHostName": [["void"]], "after": [["void"]], "testGetBindAddress": [["void"]], "testGetConnectAddress": [["void"]], "getBindAddress": [["void", "ServiceType service"]], "getConnectAddress": [["void", "ServiceType service"]]}, "className": "NetworkAddressUtilsTest", "renamed": ["void", "function", "(", ")", "{", "Assert", ".", "assertEquals", "(", "NetworkAddressUtils", ".", "getFqdnHost", "(", "new", "InetSocketAddress", "(", "\"srini_string\"", ",", "0", ")", ")", ",", "\"srini_string\"", ")", ";", "Assert", ".", "assertEquals", "(", "NetworkAddressUtils", ".", "getFqdnHost", "(", "new", "WorkerNetAddress", "(", ")", ".", "setHost", "(", "\"srini_string\"", ")", ")", ",", "\"srini_string\"", ")", ";", "}"], "nl": "Tests the  {@link NetworkAddressUtils#getFqdnHost(InetSocketAddress)} and{@link NetworkAddressUtils#getFqdnHost(WorkerNetAddress)} methods.", "nlToks": ["Tests", "the", "-LCB-", "@link", "NetworkAddressUtils", "#getFqdnHost", "-LRB-", "InetSocketAddress", "-RRB-", "-RCB-", "and", "-LCB-", "@link", "NetworkAddressUtils", "#getFqdnHost", "-LRB-", "WorkerNetAddress", "-RRB-", "-RCB-", "methods", "."], "path": "poemlin/alluxio/tree/master/core/common/src/test/java/alluxio/util/network/NetworkAddressUtilsTest.java", "idx": 955}
{"memberVariables": {"BYTES=Stats.BYTES * 2 + Double.SIZE / Byte.SIZE": "int", "serialVersionUID=0": "long", "sumOfProductsOfDeltas": "double", "yStats": "Stats", "xStats": "Stats"}, "code": ["double", "function", "(", ")", "{", "checkState", "(", "count", "(", ")", "!=", "0", ")", ";", "return", "sumOfProductsOfDeltas", "/", "count", "(", ")", ";", "}"], "memberFunctions": {"fromByteArray": [["PairedStats", "byte[] byteArray"]], "sumOfProductsOfDeltas": [["double"]], "yStats": [["Stats"]], "sampleCovariance": [["double"]], "count": [["long"]], "xStats": [["Stats"]], "hashCode": [["int"]], "ensurePositive": [["double", "double value"]], "ensureInUnitRange": [["double", "double value"]], "equals": [["boolean", "@Nullable Object obj"]], "toByteArray": [["byte[]"]], "pearsonsCorrelationCoefficient": [["double"]], "leastSquaresFit": [["LinearTransformation"]], "toString": [["String"]]}, "className": "PairedStats", "renamed": ["double", "function", "(", ")", "{", "checkState", "(", "count", "(", ")", "!=", "0", ")", ";", "return", "sumOfProductsOfDeltas", "/", "count", "(", ")", ";", "}"], "nl": "Returns the population covariance of the values. The count must be non-zero. This is guaranteed to return zero if the dataset contains a single pair of finite values. It is not guaranteed to return zero when the dataset consists of the same pair of values multiple times, due to numerical errors. Non-finite values If the dataset contains any non-finite values ( {@link Double#POSITIVE_INFINITY}, {@link Double#NEGATIVE_INFINITY}, or  {@link Double#NaN}) then the result is  {@link Double#NaN}.", "nlToks": ["Returns", "the", "population", "covariance", "of", "the", "values", ".", "The", "count", "must", "be", "non-zero", ".", "This", "is", "guaranteed", "to", "return", "zero", "if", "the", "dataset", "contains", "a", "single", "pair", "of", "finite", "values", ".", "It", "is", "not", "guaranteed", "to", "return", "zero", "when", "the", "dataset", "consists", "of", "the", "same", "pair", "of", "values", "multiple", "times", ",", "due", "to", "numerical", "errors", ".", "Non-finite", "values", "If", "the", "dataset", "contains", "any", "non-finite", "values", "-LRB-", "-LCB-", "@link", "Double", "#POSITIVE_INFINITY", "-RCB-", ",", "-LCB-", "@link", "Double", "#NEGATIVE_INFINITY", "-RCB-", ",", "or", "-LCB-", "@link", "Double", "#NaN", "-RCB-", "-RRB-", "then", "the", "result", "is", "-LCB-", "@link", "Double", "#NaN", "-RCB-", "."], "path": "hazendaz/guava/tree/master/guava/src/com/google/common/math/PairedStats.java", "idx": 956}
{"memberVariables": {"SORT_ALPHABETICALLY=new ComparatorAlphabetic()": "Comparator<Map.Entry<String,Int>>", "_totalWords": "int", "_ignoreWords": "Set<String>", "SORT_BY_FREQUENCY=new ComparatorFrequency()": "Comparator<Map.Entry<String,Int>>", "_wordFrequency": "Map<String,Int>"}, "code": ["void", "function", "(", "ArrayList", "<", "String", ">", "out_words", ",", "ArrayList", "<", "Integer", ">", "out_counts", ")", "{", "ArrayList", "<", "Map", ".", "Entry", "<", "String", ",", "Int", ">>", "entries", "=", "new", "ArrayList", "<", "Map", ".", "Entry", "<", "String", ",", "Int", ">>", "(", "_wordFrequency", ".", "entrySet", "(", ")", ")", ";", "Collections", ".", "sort", "(", "entries", ",", "new", "ComparatorFrequency", "(", ")", ")", ";", "for", "(", "Map", ".", "Entry", "<", "String", ",", "Int", ">", "ent", ":", "entries", ")", "{", "out_words", ".", "add", "(", "ent", ".", "getKey", "(", ")", ")", ";", "out_counts", ".", "add", "(", "ent", ".", "getValue", "(", ")", ".", "value", ")", ";", "}", "}"], "memberFunctions": {"countWords": [["void", "File sourceFile"], ["void", "String source"]], "getWordCount": [["int"]], "ignore": [["void", "File ignoreFile"], ["void", "String ignoreStr"]], "getFrequencies": [["int[]", "SortOrder sortBy"]], "getEntryCount": [["int"]], "getWords": [["String[]", "SortOrder sortBy"]]}, "className": "WordCounter", "renamed": ["void", "function", "(", "ArrayList", "<", "String", ">", "arg0", ",", "ArrayList", "<", "Integer", ">", "arg1", ")", "{", "ArrayList", "<", "Map", ".", "Entry", "<", "String", ",", "Int", ">>", "loc0", "=", "new", "ArrayList", "<", "Map", ".", "Entry", "<", "String", ",", "Int", ">>", "(", "_wordFrequency", ".", "entrySet", "(", ")", ")", ";", "Collections", ".", "sort", "(", "loc0", ",", "new", "ComparatorFrequency", "(", ")", ")", ";", "for", "(", "Map", ".", "Entry", "<", "String", ",", "Int", ">", "loc1", ":", "loc0", ")", "{", "arg0", ".", "add", "(", "loc1", ".", "getKey", "(", ")", ")", ";", "arg1", ".", "add", "(", "loc1", ".", "getValue", "(", ")", ".", "value", ")", ";", "}", "}"], "nl": "Stores words and their corresponding frequencies in parallel array lists parameters.  The frequencies are sorted from low to high.", "nlToks": ["Stores", "words", "and", "their", "corresponding", "frequencies", "in", "parallel", "array", "lists", "parameters", ".", "The", "frequencies", "are", "sorted", "from", "low", "to", "high", "."], "path": "prap19/Sem3_SourceCode/tree/master/AgeAttribution/src/edu/nlp/ageattr/helper/wordFrequency/WordCounter.java", "idx": 958}
{"memberVariables": {"daemon=null": "Boolean", "uncaughtExceptionHandler=null": "UncaughtExceptionHandler", "priority=null": "Integer", "nameFormat=null": "String", "backingThreadFactory=null": "ThreadFactory"}, "code": ["ThreadFactoryBuilder", "function", "(", "int", "priority", ")", "{", "checkArgument", "(", "priority", ">=", "Thread", ".", "MIN_PRIORITY", ",", "\"Thread priority (%s) must be >= %s\"", ",", "priority", ",", "Thread", ".", "MIN_PRIORITY", ")", ";", "checkArgument", "(", "priority", "<=", "Thread", ".", "MAX_PRIORITY", ",", "\"Thread priority (%s) must be <= %s\"", ",", "priority", ",", "Thread", ".", "MAX_PRIORITY", ")", ";", "this", ".", "priority", "=", "priority", ";", "return", "this", ";", "}"], "memberFunctions": {"setDaemon": [["ThreadFactoryBuilder", "boolean daemon"]], "setUncaughtExceptionHandler": [["ThreadFactoryBuilder", "UncaughtExceptionHandler uncaughtExceptionHandler"]], "build": [["ThreadFactory"], ["ThreadFactory", "ThreadFactoryBuilder builder"]], "setThreadFactory": [["ThreadFactoryBuilder", "ThreadFactory backingThreadFactory"]], "setNameFormat": [["ThreadFactoryBuilder", "String nameFormat"]], "format": [["String", "String format", "Object... args"]]}, "className": "ThreadFactoryBuilder", "renamed": ["ThreadFactoryBuilder", "function", "(", "int", "arg0", ")", "{", "checkArgument", "(", "arg0", ">=", "Thread", ".", "MIN_PRIORITY", ",", "\"srini_string\"", ",", "arg0", ",", "Thread", ".", "MIN_PRIORITY", ")", ";", "checkArgument", "(", "arg0", "<=", "Thread", ".", "MAX_PRIORITY", ",", "\"srini_string\"", ",", "arg0", ",", "Thread", ".", "MAX_PRIORITY", ")", ";", "this", ".", "priority", "=", "arg0", ";", "return", "this", ";", "}"], "nl": "Sets the priority for new threads created with this ThreadFactory.", "nlToks": ["Sets", "the", "priority", "for", "new", "threads", "created", "with", "this", "ThreadFactory", "."], "path": "hazendaz/guava/tree/master/guava/src/com/google/common/util/concurrent/ThreadFactoryBuilder.java", "idx": 959}
{"memberVariables": {"server": "Server", "host=null": "String", "contextPath": "String", "context": "Context", "port=-1": "int"}, "code": ["String", "function", "(", "String", "servletPath", ")", "{", "String", "path", "=", "servletPath", ";", "if", "(", "path", ".", "endsWith", "(", "\"*\"", ")", ")", "{", "path", "=", "path", ".", "substring", "(", "0", ",", "path", ".", "length", "(", ")", "-", "1", ")", ";", "}", "return", "getContextURL", "(", ")", "+", "path", ";", "}"], "memberFunctions": {"getPort": [["int"]], "getContextURL": [["String"]], "stop": [["void"]], "start": [["void"]], "addServletEndpoint": [["void", "String servletPath", "Class servletClass"]], "getHost": [["String"]]}, "className": "EmbeddedServletContainer", "renamed": ["String", "function", "(", "String", "arg0", ")", "{", "String", "loc0", "=", "arg0", ";", "if", "(", "loc0", ".", "endsWith", "(", "\"srini_string\"", ")", ")", "{", "loc0", "=", "loc0", ".", "substring", "(", "0", ",", "loc0", ".", "length", "(", ")", "-", "1", ")", ";", "}", "return", "getContextURL", "(", ")", "+", "loc0", ";", "}"], "nl": "Return the full URL (including protocol, host, port, context path, servlet path) for a servlet path.", "nlToks": ["Return", "the", "full", "URL", "-LRB-", "including", "protocol", ",", "host", ",", "port", ",", "context", "path", ",", "servlet", "path", "-RRB-", "for", "a", "servlet", "path", "."], "path": "pingpangkuangmo/oozie/tree/master/core/src/main/java/org/apache/oozie/test/EmbeddedServletContainer.java", "idx": 961}
{"memberVariables": {"name=null": "String", "attributes=null": "Attributes", "text=new StringBuffer(100)": "StringBuffer"}, "code": ["void", "function", "(", "Attributes", "a", ")", "{", "attributes", "=", "new", "AttributesImpl", "(", "a", ")", ";", "}"], "memberFunctions": {"setName": [["void", "String n"]], "getName": [["String"]], "getAttribute": [["String", "String attribute"]], "getAttributeValue": [["String", "int i"]], "getText": [["String"]], "addText": [["void", "String t"], ["void", "char[] c", "int offset", "int len"]], "length": [["int"]], "getNumAttributes": [["int"]], "resetText": [["void"]], "getAttributeName": [["String", "int i"]], "setText": [["void", "String t"]]}, "className": "XMLElement", "renamed": ["void", "function", "(", "Attributes", "arg0", ")", "{", "attributes", "=", "new", "AttributesImpl", "(", "arg0", ")", ";", "}"], "nl": "Change the attributes for this element.", "nlToks": ["Change", "the", "attributes", "for", "this", "element", "."], "path": "pichiliani/CoArgoUML/tree/master/v0.24/fonte/src/argouml-app/build/classes/org/argouml/persistence/XMLElement.java", "idx": 963}
{"memberVariables": {"obj=null": "Scriptable"}, "code": ["Object", "function", "(", "Class", "<", "?", ">", "hint", ")", "{", "return", "(", "hint", "==", "null", "||", "hint", "==", "ScriptRuntime", ".", "ScriptableClass", "||", "hint", "==", "ScriptRuntime", ".", "FunctionClass", ")", "?", "this", ":", "obj", ".", "getDefaultValue", "(", "hint", ")", ";", "}"], "memberFunctions": {"getDelegee": [["Scriptable"]], "setDelegee": [["void", "Scriptable obj"]], "hasInstance": [["boolean", "Scriptable instance"]], "setParentScope": [["void", "Scriptable parent"]], "newInstance": [["Delegator"]], "getIds": [["Object[]"]], "construct": [["Scriptable", "Context cx", "Scriptable scope", "Object[] args"]], "delete": [["void", "String name"], ["void", "int index"]], "put": [["void", "String name", "Scriptable start", "Object value"], ["void", "int index", "Scriptable start", "Object value"]], "getPrototype": [["Scriptable"]], "setPrototype": [["void", "Scriptable prototype"]], "call": [["Object", "Context cx", "Scriptable scope", "Scriptable thisObj", "Object[] args"]], "get": [["Object", "String name", "Scriptable start"], ["Object", "int index", "Scriptable start"]], "getClassName": [["String"]], "has": [["boolean", "String name", "Scriptable start"], ["boolean", "int index", "Scriptable start"]], "getParentScope": [["Scriptable"]]}, "className": "Delegator", "renamed": ["Object", "function", "(", "Class", "<", "?", ">", "arg0", ")", "{", "return", "(", "arg0", "==", "null", "||", "arg0", "==", "ScriptRuntime", ".", "ScriptableClass", "||", "arg0", "==", "ScriptRuntime", ".", "FunctionClass", ")", "?", "this", ":", "obj", ".", "getDefaultValue", "(", "arg0", ")", ";", "}"], "nl": "Note that this method does not get forwarded to the delegee if the hint parameter is null, ScriptRuntime.ScriptableClass or ScriptRuntime.FunctionClass. Instead the object itself is returned.", "nlToks": ["Note", "that", "this", "method", "does", "not", "get", "forwarded", "to", "the", "delegee", "if", "the", "hint", "parameter", "is", "null", ",", "ScriptRuntime.ScriptableClass", "or", "ScriptRuntime.FunctionClass", ".", "Instead", "the", "object", "itself", "is", "returned", "."], "path": "adamfisk/littleshoot-client/tree/master/bin/rhino1_7R2/src/org/mozilla/javascript/Delegator.java", "idx": 964}
{"memberVariables": {"valueLen": "int", "format": "PackFormatInputStream", "valueOff": "int", "value": "byte[]"}, "code": ["byte", "[", "]", "function", "(", ")", "{", "return", "value", ";", "}"], "memberFunctions": {"getByteArrayInternal": [["void", "int itemLen", "byte[] dest", "int off", "int destLen"]], "getByteArrayLength": [["int"]], "getByte": [["byte"]], "getShort": [["short"]], "getString": [["String"]], "getLong": [["long"]], "getInt": [["int"]], "unpackInt": [["int", "boolean signed"]], "unpackShort": [["short", "boolean signed"]], "getByteArray": [["void", "byte[] dest"], ["void", "byte[] dest", "int off", "int len"], ["byte[]"]], "getFormat": [["String"]], "getRecord": [["long"]], "unpackLong": [["long", "boolean signed"]]}, "className": "PackInputStream", "renamed": ["byte", "[", "]", "function", "(", ")", "{", "return", "value", ";", "}"], "nl": "Returns the raw value byte array.", "nlToks": ["Returns", "the", "raw", "value", "byte", "array", "."], "path": "pgunn/wiredtiger/tree/master/lang/java/src/com/wiredtiger/db/PackInputStream.java", "idx": 965}
{"memberVariables": {"_imageResourceLoader": "ImageResourceLoader", "_uriResolver": "UriResolver"}, "code": ["String", "function", "(", "String", "uri", ")", "{", "return", "_uriResolver", ".", "resolve", "(", "uri", ")", ";", "}"], "memberFunctions": {"isVisited": [["boolean", "String uri"]], "onLayoutException": [["void", "Throwable t"]], "onRenderException": [["void", "Throwable t"]], "shrinkImageCache": [["void"]], "getImageResource": [["ImageResource", "String uri"]], "setImageResourceLoader": [["void", "ImageResourceLoader loader"]], "getBinaryResource": [["byte[]", "String uri"]], "documentStarted": [["void"]], "getBaseURL": [["String"]], "getCSSResource": [["CSSResource", "String uri"]], "clearImageCache": [["void"]], "getXMLResource": [["XMLResource", "String uri"]], "setBaseURL": [["void", "String uri"]], "resolveAndOpenStream": [["InputStream", "String uri"]], "setRepaintListener": [["void", "RepaintListener listener"]], "documentLoaded": [["void"]]}, "className": "DelegatingUserAgent", "renamed": ["String", "function", "(", "String", "arg0", ")", "{", "return", "_uriResolver", ".", "resolve", "(", "arg0", ")", ";", "}"], "nl": "Resolves the URI; if absolute, leaves as is, if relative, returns an absolute URI based on the baseUrl for the agent.", "nlToks": ["Resolves", "the", "URI", ";", "if", "absolute", ",", "leaves", "as", "is", ",", "if", "relative", ",", "returns", "an", "absolute", "URI", "based", "on", "the", "baseUrl", "for", "the", "agent", "."], "path": "plutogeek/flyingsaucer/tree/master/flying-saucer-core/src/main/java/org/xhtmlrenderer/swing/DelegatingUserAgent.java", "idx": 966}
{"memberVariables": {"date": "Date", "level": "ResultLevel", "source": "String", "content": "String"}, "code": ["String", "function", "(", ")", "{", "return", "this", ".", "source", ";", "}"], "memberFunctions": {"getLevel": [["ResultLevel"]], "getContent": [["String"]], "getDate": [["Date"]], "toString": [["String"]], "compareTo": [["int", "ResultEntry o"]]}, "className": "ResultEntry", "renamed": ["String", "function", "(", ")", "{", "return", "this", ".", "source", ";", "}"], "nl": "Get the source where this result comes from Source is only a representative string (no object reference)", "nlToks": ["Get", "the", "source", "where", "this", "result", "comes", "from", "Source", "is", "only", "a", "representative", "string", "-LRB-", "no", "object", "reference", "-RRB-"], "path": "0xwindows/WS-Attacker/tree/master/framework/src/main/java/wsattacker/main/plugin/result/ResultEntry.java", "idx": 968}
{"memberVariables": {"ctx=SimpleNamespaceContext.EMPTY_CONTEXT": "NamespaceContext"}, "code": ["Document", "function", "(", "String", "select", ",", "Document", "document", ")", "{", "DOMResult", "result", "=", "new", "DOMResult", "(", ")", ";", "performTransform", "(", "getCopyTransformation", "(", "select", ")", ",", "document", ",", "result", ")", ";", "return", "(", "Document", ")", "result", ".", "getNode", "(", ")", ";", "}"], "memberFunctions": {"getXSLTBase": [["StringBuffer"]], "getNamespaceDeclarations": [["String"]], "getCopyTransformation": [["String", "String select"]], "getValueTransformation": [["String", "String select"]], "setNamespaceContext": [["void", "NamespaceContext ctx"]], "performTransform": [["void", "String xslt", "Document document", "Result result"]], "getXPathResultNode": [["Node", "String select", "Document document"]], "getMatchingNodes": [["NodeList", "String select", "Document document"]], "evaluate": [["String", "String select", "Document document"]]}, "className": "SimpleXpathEngine", "renamed": ["Document", "function", "(", "String", "arg0", ",", "Document", "arg1", ")", "{", "DOMResult", "loc0", "=", "new", "DOMResult", "(", ")", ";", "performTransform", "(", "getCopyTransformation", "(", "arg0", ")", ",", "arg1", ",", "loc0", ")", ";", "return", "(", "Document", ")", "loc0", ".", "getNode", "(", ")", ";", "}"], "nl": "Execute the copy-of transform and return the resulting Document. Used for XMLTestCase comparison", "nlToks": ["Execute", "the", "copy-of", "transform", "and", "return", "the", "resulting", "Document", ".", "Used", "for", "XMLTestCase", "comparison"], "path": "phbenisc/xmlunit/tree/master/xmlunit-legacy/src/main/java/org/custommonkey/xmlunit/SimpleXpathEngine.java", "idx": 969}
{"memberVariables": {"TEMP_DIR=\"/Users/wendellpbarreto/Downloads\"": "String", "graph=new StringBuilder()": "StringBuilder", "DOT=\"/usr/local/bin/dot\"": "String"}, "code": ["int", "function", "(", "byte", "[", "]", "img", ",", "File", "to", ")", "{", "try", "{", "FileOutputStream", "fos", "=", "new", "FileOutputStream", "(", "to", ")", ";", "fos", ".", "write", "(", "img", ")", ";", "fos", ".", "close", "(", ")", ";", "}", "catch", "(", "java", ".", "io", ".", "IOException", "ioe", ")", "{", "return", "-", "1", ";", "}", "return", "1", ";", "}"], "memberFunctions": {"add": [["void", "String line"]], "addln": [["void", "String line"], ["void"]], "getGraph": [["byte[]", "String dot_source", "String type"]], "start_graph": [["String"]], "end_graph": [["String"]], "start_subgraph": [["String", "String name"]], "readSource": [["void", "String input"]], "getDotSource": [["String"]], "writeDotSourceToFile": [["File", "String str"]], "get_img_stream": [["byte[]", "File dot", "String type"]], "end_subgraph": [["String"]]}, "className": "GraphViz", "renamed": ["int", "function", "(", "byte", "[", "]", "arg0", ",", "File", "arg1", ")", "{", "try", "{", "FileOutputStream", "loc0", "=", "new", "FileOutputStream", "(", "arg1", ")", ";", "loc0", ".", "write", "(", "arg0", ")", ";", "loc0", ".", "close", "(", ")", ";", "}", "catch", "(", "java", ".", "io", ".", "IOException", "loc0", ")", "{", "return", "-", "1", ";", "}", "return", "1", ";", "}"], "nl": "Writes the graph's image in a file.", "nlToks": ["Writes", "the", "graph", "'s", "image", "in", "a", "file", "."], "path": "adelinosegundo/gene_analytics/tree/master/src/util/graphviz/GraphViz.java", "idx": 970}
{"memberVariables": {"EXAMPLE=\"$GPVTG,360.0,T,348.7,M,16.89,N,31.28,K,A\"": "String", "vtg": "VTGSentence", "empty": "VTGSentence"}, "code": ["void", "function", "(", ")", "{", "assertEquals", "(", "360.0", ",", "vtg", ".", "getTrueCourse", "(", ")", ",", "0.001", ")", ";", "}"], "memberFunctions": {"testGetMagneticCourse": [["void"]], "testGetSpeedKmh": [["void"]], "testGetSpeedKnots": [["void"]], "testSetMagneticCourseWithNegativeValue": [["void"]], "testSetMagneticCourseWithValueGreaterThanAllowed": [["void"]], "testSetSpeedKmhWithNegativeValue": [["void"]], "testSetSpeedKnotsWithNegativeValue": [["void"]], "testConstructor": [["void"]], "testSetSpeedKmh": [["void"]], "testSetMagneticCourse": [["void"]], "testSetMode": [["void"]], "testSetModeWhenOmitted": [["void"]], "testSetTrueCourseWithNegativeValue": [["void"]], "setUp": [["void"]], "testSetSpeedKnots": [["void"]], "testSetTrueCourse": [["void"]], "testGetMode": [["void"]], "testSetTrueCourseWithValueGreaterThanAllowed": [["void"]]}, "className": "VTGTest", "renamed": ["void", "function", "(", ")", "{", "assertEquals", "(", "360.0", ",", "vtg", ".", "getTrueCourse", "(", ")", ",", "0.001", ")", ";", "}"], "nl": "Test method for {@link net.sf.marineapi.nmea.parser.VTGParser#getTrueCourse()}.", "nlToks": ["Test", "method", "for", "-LCB-", "@link", "net.sf.marineapi.nmea.parser.VTGParser", "#getTrueCourse", "-LRB-", "-RRB-", "-RCB-", "."], "path": "pkoziol/marine-api/tree/master/src/test/java/net/sf/marineapi/nmea/parser/VTGTest.java", "idx": 971}
{"memberVariables": {"denom=1": "int", "num=1": "int"}, "code": ["int", "function", "(", "int", "dimension", ")", "{", "return", "(", "dimension", "*", "num", "+", "denom", "-", "1", ")", "/", "denom", ";", "}"], "memberFunctions": {"isOne": [["boolean"]], "equals": [["boolean", "TJScalingFactor other"]], "getNum": [["int"]], "getDenom": [["int"]]}, "className": "TJScalingFactor", "renamed": ["int", "function", "(", "int", "arg0", ")", "{", "return", "(", "arg0", "*", "num", "+", "denom", "-", "1", ")", "/", "denom", ";", "}"], "nl": "Returns the scaled value of dimension.  This function performs the integer equivalent of ceil(dimension  scalingFactor).", "nlToks": ["Returns", "the", "scaled", "value", "of", "dimension", ".", "This", "function", "performs", "the", "integer", "equivalent", "of", "ceil", "-LRB-", "dimension", "scalingFactor", "-RRB-", "."], "path": "princeofdream/USBCamera/tree/master/libuvccamera/src/main/jni/libjpeg-turbo-1.5.0/java/org/libjpegturbo/turbojpeg/TJScalingFactor.java", "idx": 972}
{"memberVariables": {"scope": "Scriptable", "dim": "Dim", "type": "int", "debugGui": "SwingGui", "EXIT_ACTION=1": "int", "SCOPE_PROVIDER=2": "int"}, "code": ["Scriptable", "function", "(", ")", "{", "if", "(", "type", "!=", "SCOPE_PROVIDER", ")", "Kit", ".", "codeBug", "(", ")", ";", "if", "(", "scope", "==", "null", ")", "Kit", ".", "codeBug", "(", ")", ";", "return", "scope", ";", "}"], "memberFunctions": {"getIn": [["InputStream"]], "setExitAction": [["void", "Runnable r"]], "doBreak": [["void"]], "main": [["void", "String[] args"]], "run": [["void"]], "setBreakOnReturn": [["void", "boolean value"]], "getOut": [["PrintStream"]], "setSize": [["void", "int w", "int h"], ["void", "java.awt.Dimension dimension"]], "setBreakOnExceptions": [["void", "boolean value"]], "contextCreated": [["void", "Context cx"]], "setVisible": [["void", "boolean flag"]], "mainEmbedded": [["void", "String title"], ["void", "ContextFactory factory", "Scriptable scope", "String title"], ["void", "ContextFactory factory", "ScopeProvider scopeProvider", "String title"]], "contextExited": [["void", "Context cx"]], "setBreakOnEnter": [["void", "boolean value"]], "getErr": [["PrintStream"]], "mainEmbeddedImpl": [["void", "ContextFactory factory", "Object scopeProvider", "String title"]], "go": [["void"]], "isVisible": [["boolean"]], "newScopeProvider": [["ScopeProvider", "Scriptable scope"]], "setScopeProvider": [["void", "ScopeProvider p"]], "pack": [["void"]], "clearAllBreakpoints": [["void"]], "contextReleased": [["void", "Context cx"]], "setOptimizationLevel": [["void", "int level"]], "detach": [["void"]], "dispose": [["void"]], "setScope": [["void", "Scriptable scope"]], "attachTo": [["void", "ContextFactory factory"]], "contextEntered": [["void", "Context cx"]], "getDebugFrame": [["JFrame"]]}, "className": "Main", "renamed": ["Scriptable", "function", "(", ")", "{", "if", "(", "type", "!=", "SCOPE_PROVIDER", ")", "Kit", ".", "codeBug", "(", ")", ";", "if", "(", "scope", "==", "null", ")", "Kit", ".", "codeBug", "(", ")", ";", "return", "scope", ";", "}"], "nl": "Returns the scope for script evaluations.", "nlToks": ["Returns", "the", "scope", "for", "script", "evaluations", "."], "path": "adamfisk/littleshoot-client/tree/master/bin/rhino1_7R2/toolsrc/org/mozilla/javascript/tools/debugger/Main.java", "idx": 974}
{"memberVariables": {"EN_OK=0": "int", "EN_SECURITY_ERROR=103": "int", "errorElement": "Element", "EN_UKNOWN=110": "int", "filesElement": "Element", "document": "Document", "EN_ALREADY_EXISTS=101": "int", "EN_INVALID_FOLDER_NAME=102": "int", "foldersElement": "Element", "EN_ERROR=1": "int"}, "code": ["void", "function", "(", "File", "dir", ")", "{", "setFolders", "(", "dir", ")", ";", "setFiles", "(", "dir", ")", ";", "}"], "memberFunctions": {"setError": [["void", "int number", "String text"], ["void", "int number"]], "setFolders": [["void", "File dir"]], "toString": [["String"]], "setFiles": [["void", "File dir"]]}, "className": "XmlResponse", "renamed": ["void", "function", "(", "File", "arg0", ")", "{", "setFolders", "(", "arg0", ")", ";", "setFiles", "(", "arg0", ")", ";", "}"], "nl": "Lists all folders and files in the given dir as XML tags.", "nlToks": ["Lists", "all", "folders", "and", "files", "in", "the", "given", "dir", "as", "XML", "tags", "."], "path": "pobing/company/tree/master/maxcomy/src/net/fckeditor/response/XmlResponse.java", "idx": 976}
{"memberVariables": {"otherCnaProfileList=new ArrayList<GeneticProfile>()": "ArrayList<GeneticProfile>", "RAE=\"RAE\"": "String", "mutationProfileList=new ArrayList<GeneticProfile>()": "ArrayList<GeneticProfile>", "raeProfileList=new ArrayList<GeneticProfile>()": "ArrayList<GeneticProfile>", "GISTIC=\"GISTIC\"": "String", "gisticProfileList=new ArrayList<GeneticProfile>()": "ArrayList<GeneticProfile>"}, "code": ["HashMap", "<", "String", ",", "GeneticProfile", ">", "function", "(", ")", "{", "return", "getDefaultGeneticProfileMap", "(", "true", ",", "true", ")", ";", "}"], "memberFunctions": {"getDefaultCopyNumberMap": [["HashMap<String,GeneticProfile>"]], "addCopyNumberProfile": [["void", "GeneticProfile copyNumberProfile"]], "getDefaultCnaProfile": [["GeneticProfile"]], "getDefaultGeneticProfileMap": [["HashMap<String,GeneticProfile>", "boolean includeCNA", "boolean includeMutation"]], "conditionallyAddProfileToSet": [["void", "GeneticProfile geneticProfile", "HashMap<String,GeneticProfile> defaultProfileSet"]], "addMutationProfile": [["void", "GeneticProfile mutationProfile"]], "getFirstPriorityProfile": [["GeneticProfile", "ArrayList<ArrayList<GeneticProfile>> orderOfPredenceList"]], "addRaeProfile": [["void", "GeneticProfile raeProfile"]], "getDefaultMutationProfile": [["GeneticProfile"]], "addGisticProfile": [["void", "GeneticProfile gisticProfile"]], "addOtherCnaProfile": [["void", "GeneticProfile otherCnaProfile"]], "addGeneticProfile": [["void", "GeneticProfile geneticProfile"]], "getDefaultMutationMap": [["HashMap<String,GeneticProfile>"]], "getNumDefaultMutationAndCopyNumberProfiles": [["int"]]}, "className": "CategorizedGeneticProfileSet", "renamed": ["HashMap", "<", "String", ",", "GeneticProfile", ">", "function", "(", ")", "{", "return", "getDefaultGeneticProfileMap", "(", "true", ",", "true", ")", ";", "}"], "nl": "Gets a hashMap of the default mutation and copy number profiles.", "nlToks": ["Gets", "a", "hashMap", "of", "the", "default", "mutation", "and", "copy", "number", "profiles", "."], "path": "adamabeshouse/cbioportal/tree/master/core/src/main/java/org/mskcc/cbio/portal/model/CategorizedGeneticProfileSet.java", "idx": 977}
{"memberVariables": {"fetcherContext": "IFetcherContext", "porticoConfigRegDao": "IFetcherTesterConfigDao", "fetcherRegRestAPIDao": "IFetcherTesterRestAPIDao", "executeShellCommand": "IFetcherTesterExecuteShellCommand", "feedExtConfigMap": "Map<String,Object>", "LOGGER=LoggerFactory.getLogger(FetcherTesterSeedFilesOperations.class)": "Logger"}, "code": ["String", "function", "(", "String", "path", ")", "{", "if", "(", "!", "path", ".", "endsWith", "(", "\"/\"", ")", ")", "{", "path", "=", "path", "+", "\"/\"", ";", "}", "if", "(", "!", "path", ".", "startsWith", "(", "\"/\"", ")", ")", "{", "path", "=", "\"/\"", "+", "path", ";", "}", "return", "path", ";", "}"], "memberFunctions": {"seedSourceFilesOperations": [["PubFilesOperationResp", "RunStatusType runStatusType", "String feedId", "Long testId"]], "isFileDownloadedToDestination": [["PubFilesOperationResp", "String feedId", "Long testId", "String destFileName"]], "buildUserRemoteHostCommand": [["String"]], "checkForOverrideConnectionUserId": [["String"]], "buildFeedExtConfigMap": [["Map<String,Object>", "List<RegPCLFeedExtConfigEntity> feedExtConfigLst"]]}, "className": "FetcherTesterSeedFilesOperations", "renamed": ["String", "function", "(", "String", "arg0", ")", "{", "if", "(", "!", "arg0", ".", "endsWith", "(", "\"srini_string\"", ")", ")", "{", "arg0", "=", "arg0", "+", "\"srini_string\"", ";", "}", "if", "(", "!", "arg0", ".", "startsWith", "(", "\"srini_string\"", ")", ")", "{", "arg0", "=", "\"srini_string\"", "+", "arg0", ";", "}", "return", "arg0", ";", "}"], "nl": "Check and modify path.", "nlToks": ["Check", "and", "modify", "path", "."], "path": "pkesireddy/portico_fletcher/tree/master/FetcherTesterService/src/main/java/org/ithaka/cm/fetchertester/bo/FetcherTesterSeedFilesOperations.java", "idx": 978}
{"memberVariables": {"dishCollectionRepository": "DishCollectionRepository", "log=LoggerFactory.getLogger(DishCollectionService.class)": "Logger"}, "code": ["Page", "<", "DishCollection", ">", "function", "(", "Pageable", "pageable", ")", "{", "log", ".", "debug", "(", "\"Request to get all DishCollections\"", ")", ";", "Page", "<", "DishCollection", ">", "result", "=", "dishCollectionRepository", ".", "findAll", "(", "pageable", ")", ";", "return", "result", ";", "}"], "memberFunctions": {"findOneByName": [["DishCollection", "String name"]], "save": [["DishCollection", "DishCollection dishCollection"]], "findOne": [["DishCollection", "String id"]], "delete": [["void", "String id"]]}, "className": "DishCollectionService", "renamed": ["Page", "<", "DishCollection", ">", "function", "(", "Pageable", "arg0", ")", "{", "log", ".", "debug", "(", "\"srini_string\"", ")", ";", "Page", "<", "DishCollection", ">", "loc0", "=", "dishCollectionRepository", ".", "findAll", "(", "arg0", ")", ";", "return", "loc0", ";", "}"], "nl": "Get all the dishCollections.", "nlToks": ["Get", "all", "the", "dishCollections", "."], "path": "pigkey/kitchen/tree/master/app/src/main/java/com/kitchen/app/service/DishCollectionService.java", "idx": 979}
{"memberVariables": {}, "code": ["GetPrice", "function", "(", ")", "{", "return", "new", "GetPrice", "(", ")", ";", "}"], "memberFunctions": {"createGetPriceResponse": [["GetPriceResponse"]]}, "className": "ObjectFactory", "renamed": ["GetPrice", "function", "(", ")", "{", "return", "new", "GetPrice", "(", ")", ";", "}"], "nl": "Create an instance of  {@link GetPrice }", "nlToks": ["Create", "an", "instance", "of", "-LCB-", "@link", "GetPrice", "-RCB-"], "path": "primesign/cxf/tree/master/tools/javato/ws/src/test/java/org/apache/cxf/tools/fortest/classnoanno/docwrapped/jaxws/ObjectFactory.java", "idx": 982}
{"memberVariables": {"keyWrapAlgorithm=WSConstants.KEYTRANSPORT_RSAOEP": "String", "keyIdentifierType=WSConstants.ISSUER_SERIAL": "int", "acceptedKeyWrapAlgorithms=new ArrayList<>()": "List<String>", "encryptionName": "String", "acceptedEncryptionAlgorithms=new ArrayList<>()": "List<String>", "encryptionAlgorithm=WSConstants.AES_256": "String"}, "code": ["int", "function", "(", ")", "{", "return", "keyIdentifierType", ";", "}"], "memberFunctions": {"setEncryptionName": [["void", "String encryptionName"]], "getAcceptedEncryptionAlgorithms": [["List<String>"]], "getEncryptionAlgorithm": [["String"]], "setAcceptedKeyWrapAlgorithms": [["void", "List<String> acceptedKeyWrapAlgorithms"]], "getAcceptedKeyWrapAlgorithms": [["List<String>"]], "getKeyWrapAlgorithm": [["String"]], "setKeyWrapAlgorithm": [["void", "String keyWrapAlgorithm"]], "setAcceptedEncryptionAlgorithms": [["void", "List<String> acceptedEncryptionAlgorithms"]], "setKeyIdentifierType": [["void", "int keyIdentifierType"]], "setEncryptionAlgorithm": [["void", "String encryptionAlgorithm"]], "getEncryptionName": [["String"]]}, "className": "EncryptionProperties", "renamed": ["int", "function", "(", ")", "{", "return", "keyIdentifierType", ";", "}"], "nl": "Get the (WSS4J) key identifier type used to reference a certificate for encryption", "nlToks": ["Get", "the", "-LRB-", "WSS4J", "-RRB-", "key", "identifier", "type", "used", "to", "reference", "a", "certificate", "for", "encryption"], "path": "primesign/cxf/tree/master/services/sts/sts-core/src/main/java/org/apache/cxf/sts/service/EncryptionProperties.java", "idx": 983}
{"memberVariables": {"serialVersionUID=1L": "long", "isSystemDerived": "String", "isActive": "String", "predecessorId": "BigDecimal", "srcFileName": "String", "successorId": "BigDecimal", "feedId": "BigDecimal", "checksum": "String", "transmissionDatasetId": "String", "comments": "String", "inactivationReasonType": "String", "isFormatValid": "String", "dataUnitId": "long", "receiptDate": "Timestamp", "srcUniqueFileName": "String", "createdDate": "Timestamp", "dataSetId": "Long", "fileSize": "BigDecimal", "destFileName": "String", "loadedInCats": "String", "checksumType": "String", "modifiedDate": "Timestamp", "runId": "BigDecimal", "isPrepopulated": "String", "isBulk": "String", "isUpdate": "String", "receiptDateType": "String", "status": "String"}, "code": ["long", "function", "(", ")", "{", "return", "this", ".", "dataUnitId", ";", "}"], "memberFunctions": {"setIsSystemDerived": [["void", "String isSystemDerived"]], "setIsPrepopulated": [["void", "String isPrepopulated"]], "getStatus": [["String"]], "getIsUpdate": [["String"]], "getFileSize": [["BigDecimal"]], "setInactivationReasonType": [["void", "String inactivationReasonType"]], "setDataUnitId": [["void", "long dataUnitId"]], "getComments": [["String"]], "getCreatedDate": [["Timestamp"]], "setFileSize": [["void", "BigDecimal fileSize"]], "getPredecessorId": [["BigDecimal"]], "setIsUpdate": [["void", "String isUpdate"]], "getReceiptDateType": [["String"]], "getFeedId": [["BigDecimal"]], "setReceiptDate": [["void", "Timestamp receiptDate"]], "getModifiedDate": [["Timestamp"]], "setSuccessorId": [["void", "BigDecimal successorId"]], "setDestFileName": [["void", "String destFileName"]], "setIsBulk": [["void", "String isBulk"]], "getIsFormatValid": [["String"]], "setDataSetId": [["void", "Long dataSetId"]], "setIsActive": [["void", "String isActive"]], "setChecksumType": [["void", "String checksumType"]], "setFeedId": [["void", "BigDecimal feedId"]], "getInactivationReasonType": [["String"]], "getSrcUniqueFileName": [["String"]], "getDataSetId": [["Long"]], "setReceiptDateType": [["void", "String receiptDateType"]], "getRunId": [["BigDecimal"]], "setSrcFileName": [["void", "String srcFileName"]], "getChecksumType": [["String"]], "getSrcFileName": [["String"]], "getChecksum": [["String"]], "getDestFileName": [["String"]], "getReceiptDate": [["Timestamp"]], "setTransmissionDatasetId": [["void", "String transmissionDatasetId"]], "getTransmissionDatasetId": [["String"]], "setComments": [["void", "String comments"]], "getLoadedInCats": [["String"]], "getSuccessorId": [["BigDecimal"]], "setLoadedInCats": [["void", "String loadedInCats"]], "getIsPrepopulated": [["String"]], "setSrcUniqueFileName": [["void", "String srcUniqueFileName"]], "setChecksum": [["void", "String checksum"]], "setIsFormatValid": [["void", "String isFormatValid"]], "getIsBulk": [["String"]], "setRunId": [["void", "BigDecimal runId"]], "setStatus": [["void", "String status"]], "getIsActive": [["String"]], "setModifiedDate": [["void", "Timestamp modifiedDate"]], "setCreatedDate": [["void", "Timestamp createdDate"]], "setPredecessorId": [["void", "BigDecimal predecessorId"]], "getIsSystemDerived": [["String"]]}, "className": "PCLDataUnitEntity", "renamed": ["long", "function", "(", ")", "{", "return", "this", ".", "dataUnitId", ";", "}"], "nl": "Gets the data unit id.", "nlToks": ["Gets", "the", "data", "unit", "id", "."], "path": "pkesireddy/portico_fletcher/tree/master/FetcherTesterService/src/main/java/org/ithaka/cm/fetchertester/entity/PCLDataUnitEntity.java", "idx": 984}
{"memberVariables": {"A=new D1Submatrix64F()": "D1Submatrix64F", "saveW=false": "boolean", "dataW=new BlockMatrix64F(1,1)": "BlockMatrix64F", "dataWTA=new BlockMatrix64F(1,1)": "BlockMatrix64F", "Y=new D1Submatrix64F()": "D1Submatrix64F", "blockLength": "int", "W=new D1Submatrix64F(dataW)": "D1Submatrix64F", "dataA": "BlockMatrix64F", "temp[]=new double[1]": "double", "WTA=new D1Submatrix64F(dataWTA)": "D1Submatrix64F", "gammas[]=new double[1]": "double"}, "code": ["void", "function", "(", "BlockMatrix64F", "B", ")", "{", "applyQ", "(", "B", ",", "false", ")", ";", "}"], "memberFunctions": {"setW": [["void"]], "setSaveW": [["void", "boolean saveW"]], "decompose": [["boolean", "BlockMatrix64F orig"]], "setup": [["void", "BlockMatrix64F orig"]], "getQ": [["BlockMatrix64F", "BlockMatrix64F Q", "boolean compact"]], "getQR": [["BlockMatrix64F"]], "initializeQ": [["BlockMatrix64F", "BlockMatrix64F Q", "int numRows", "int numCols", "int blockLength", "boolean compact"]], "getR": [["BlockMatrix64F", "BlockMatrix64F R", "boolean compact"]], "inputModified": [["boolean"]], "applyQTran": [["void", "BlockMatrix64F B"]], "updateA": [["void", "D1Submatrix64F A"]]}, "className": "QRDecompositionHouseholder_B64", "renamed": ["void", "function", "(", "BlockMatrix64F", "arg0", ")", "{", "applyQ", "(", "arg0", ",", "false", ")", ";", "}"], "nl": " Multiplies the provided matrix by Q using householder reflectors.  This is more efficient that computing Q then applying it to the matrix.   B = Q  B ", "nlToks": ["Multiplies", "the", "provided", "matrix", "by", "Q", "using", "householder", "reflectors", ".", "This", "is", "more", "efficient", "that", "computing", "Q", "then", "applying", "it", "to", "the", "matrix", ".", "B", "=", "Q", "B"], "path": "adamaulia/efficient-java-matrix-library/tree/master/src/org/ejml/alg/block/decomposition/qr/QRDecompositionHouseholder_B64.java", "idx": 985}
{"memberVariables": {"hashcode_cache=null": "Integer", "_all=new HashMap<>(11)": "HashMap<lalr_item,lalr_item>"}, "code": ["void", "function", "(", "lalr_item", "itm", ")", "{", "not_null", "(", "itm", ")", ";", "hashcode_cache", "=", "null", ";", "_all", ".", "remove", "(", "itm", ")", ";", "}"], "memberFunctions": {"add": [["lalr_item", "lalr_item itm"], ["void", "lalr_item_set other"]], "not_null": [["void", "Object obj"]], "is_superset_of": [["boolean", "lalr_item_set other"]], "iterator": [["Iterator<lalr_item>"]], "contains": [["boolean", "lalr_item itm"]], "size": [["int"]], "find": [["lalr_item", "lalr_item itm"]], "hashCode": [["int"]], "get_one": [["lalr_item"]], "equals": [["boolean", "lalr_item_set other"], ["boolean", "Object other"]], "is_subset_of": [["boolean", "lalr_item_set other"]], "compute_closure": [["void"]], "toString": [["String"]]}, "className": "lalr_item_set", "renamed": ["void", "function", "(", "lalr_item", "arg0", ")", "{", "not_null", "(", "arg0", ")", ";", "hashcode_cache", "=", "null", ";", "_all", ".", "remove", "(", "arg0", ")", ";", "}"], "nl": "Remove a single item if it is in the set.", "nlToks": ["Remove", "a", "single", "item", "if", "it", "is", "in", "the", "set", "."], "path": "polyglot-compiler/polyglot/tree/master/tools/java_cup/src/java_cup/lalr_item_set.java", "idx": 986}
{"memberVariables": {}, "code": ["TreeNode", "function", "(", "TreeNode", "root", ",", "int", "key", ")", "{", "if", "(", "root", "==", "null", "||", "root", ".", "value", "==", "key", ")", "{", "return", "root", ";", "}", "if", "(", "key", "<", "root", ".", "value", ")", "{", "return", "find", "(", "root", ".", "left", ",", "key", ")", ";", "}", "else", "{", "return", "find", "(", "root", ".", "right", ",", "key", ")", ";", "}", "}"], "memberFunctions": {"preOrderRecursive": [["void", "TreeNode root", "ArrayList<Integer> nodeValues"]], "deleteNode": [["TreeNode", "TreeNode root", "int key"]], "inOrder": [["void", "TreeNode root", "ArrayList<Integer> nodeValues"]], "preOrder": [["void", "TreeNode root", "ArrayList<Integer> nodeValues"]], "minValueNode": [["TreeNode", "TreeNode root"]], "addTreeNode": [["TreeNode", "TreeNode root", "int key"]], "isBinarySearchTree": [["boolean", "TreeNode root"], ["boolean", "TreeNode root", "int min", "int max"]], "postOrderRecursive": [["void", "TreeNode root", "ArrayList<Integer> nodeValues"]], "createBST": [["TreeNode"]], "postOrder": [["void", "TreeNode root", "ArrayList<Integer> nodeValues"]], "inOrderRecursive": [["void", "TreeNode root", "ArrayList<Integer> nodeValues"]]}, "className": "BinarySearchTreeUtils", "renamed": ["TreeNode", "function", "(", "TreeNode", "arg0", ",", "int", "arg1", ")", "{", "if", "(", "arg0", "==", "null", "||", "arg0", ".", "value", "==", "arg1", ")", "{", "return", "arg0", ";", "}", "if", "(", "arg1", "<", "arg0", ".", "value", ")", "{", "return", "find", "(", "arg0", ".", "left", ",", "arg1", ")", ";", "}", "else", "{", "return", "find", "(", "arg0", ".", "right", ",", "arg1", ")", ";", "}", "}"], "nl": "find a element in binary search tree", "nlToks": ["find", "a", "element", "in", "binary", "search", "tree"], "path": "prakashthelight/my-eclipse-workspace/tree/master/console-app/src/com/samples/utils/BinarySearchTreeUtils.java", "idx": 987}
{"memberVariables": {}, "code": ["double", "function", "(", "RowD1Matrix64F", "T", ")", "{", "double", "prod", "=", "1.0", ";", "int", "N", "=", "Math", ".", "min", "(", "T", ".", "numRows", ",", "T", ".", "numCols", ")", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "N", ";", "i", "++", ")", "{", "prod", "*=", "T", ".", "unsafe_get", "(", "i", ",", "i", ")", ";", "}", "return", "prod", ";", "}"], "memberFunctions": {"subvector": [["void", "RowD1Matrix64F A", "int rowA", "int colA", "int length", "boolean row", "int offsetV", "RowD1Matrix64F v"]], "elementSumSq": [["double", "D1Matrix64F m"]], "diffNormP1": [["double", "D1Matrix64F a", "D1Matrix64F b"]], "pivotMatrix": [["DenseMatrix64F", "DenseMatrix64F ret", "int pivots[]", "int numPivots", "boolean transposed"]], "copyChangeRow": [["DenseMatrix64F", "int order[]", "DenseMatrix64F src", "DenseMatrix64F dst"]], "createReflector": [["DenseMatrix64F", "RowD1Matrix64F u"], ["DenseMatrix64F", "DenseMatrix64F u", "double gamma"]], "diffNormF": [["double", "D1Matrix64F a", "D1Matrix64F b"]], "qualityTriangular": [["double", "boolean upper", "D1Matrix64F T"]], "diffNormF_fast": [["double", "D1Matrix64F a", "D1Matrix64F b"]], "addIdentity": [["void", "RowD1Matrix64F A", "RowD1Matrix64F B", "double alpha"]], "copyTriangle": [["DenseMatrix64F", "DenseMatrix64F src", "DenseMatrix64F dst", "boolean upper"]], "splitIntoVectors": [["DenseMatrix64F[]", "RowD1Matrix64F A", "boolean column"]]}, "className": "SpecializedOps", "renamed": ["double", "function", "(", "RowD1Matrix64F", "arg0", ")", "{", "double", "loc0", "=", "1.0", ";", "int", "loc1", "=", "Math", ".", "min", "(", "arg0", ".", "numRows", ",", "arg0", ".", "numCols", ")", ";", "for", "(", "int", "loc2", "=", "0", ";", "loc2", "<", "loc1", ";", "loc2", "++", ")", "{", "loc0", "*=", "arg0", ".", "unsafe_get", "(", "loc2", ",", "loc2", ")", ";", "}", "return", "loc0", ";", "}"], "nl": "Computes the product of the diagonal elements.  For a diagonal or triangular matrix this is the determinant.", "nlToks": ["Computes", "the", "product", "of", "the", "diagonal", "elements", ".", "For", "a", "diagonal", "or", "triangular", "matrix", "this", "is", "the", "determinant", "."], "path": "adamaulia/efficient-java-matrix-library/tree/master/src/org/ejml/ops/SpecializedOps.java", "idx": 989}
{"memberVariables": {"TAB=\"\\t\"": "String", "NEW_LINE=\"\\n\"": "String"}, "code": ["String", "function", "(", "BufferedReader", "in", ")", "{", "StringBuffer", "buf", "=", "new", "StringBuffer", "(", ")", ";", "String", "str", ";", "while", "(", "(", "str", "=", "in", ".", "readLine", "(", ")", ")", "!=", "null", ")", "{", "buf", ".", "append", "(", "str", "+", "\" \"", ")", ";", "}", "in", ".", "close", "(", ")", ";", "return", "buf", ".", "toString", "(", ")", ";", "}"], "memberFunctions": {"retrieveMatrix": [["String[][]", "File file"]], "retrieveDocument": [["String", "File file"]], "parseMatrix": [["String[][]", "String content"]], "prepareMatrix": [["String[][]", "String content"]]}, "className": "WebFileConnect", "renamed": ["String", "function", "(", "BufferedReader", "arg0", ")", "{", "StringBuffer", "loc0", "=", "new", "StringBuffer", "(", ")", ";", "String", "loc1", ";", "while", "(", "(", "loc1", "=", "arg0", ".", "readLine", "(", ")", ")", "!=", "null", ")", "{", "loc0", ".", "append", "(", "loc1", "+", "\"srini_string\"", ")", ";", "}", "arg0", ".", "close", "(", ")", ";", "return", "loc0", ".", "toString", "(", ")", ";", "}"], "nl": "Reads Content from a Buffered Reader.", "nlToks": ["Reads", "Content", "from", "a", "Buffered", "Reader", "."], "path": "adamabeshouse/cbioportal/tree/master/core/src/main/java/org/mskcc/cbio/io/WebFileConnect.java", "idx": 990}
{"memberVariables": {}, "code": ["String", "function", "(", "@", "Nullable", "String", "string", ")", "{", "return", "(", "string", "==", "null", ")", "?", "\"\"", ":", "string", ";", "}"], "memberFunctions": {"padStart": [["String", "String string", "int minLength", "char padChar"]], "commonPrefix": [["String", "CharSequence a", "CharSequence b"]], "isNullOrEmpty": [["boolean", "@Nullable String string"]], "validSurrogatePairAt": [["boolean", "CharSequence string", "int index"]], "repeat": [["String", "String string", "int count"]], "commonSuffix": [["String", "CharSequence a", "CharSequence b"]], "emptyToNull": [["String", "@Nullable String string"]], "padEnd": [["String", "String string", "int minLength", "char padChar"]]}, "className": "Strings", "renamed": ["String", "function", "(", "@", "Nullable", "String", "arg0", ")", "{", "return", "(", "arg0", "==", "null", ")", "?", "\"srini_string\"", ":", "arg0", ";", "}"], "nl": "Returns the given string if it is non-null; the empty string otherwise.", "nlToks": ["Returns", "the", "given", "string", "if", "it", "is", "non-null", ";", "the", "empty", "string", "otherwise", "."], "path": "hazendaz/guava/tree/master/guava/src/com/google/common/base/Strings.java", "idx": 991}
{"memberVariables": {"fldname": "String", "pred": "Predicate", "tblname": "String", "newval": "Expression"}, "code": ["Expression", "function", "(", ")", "{", "return", "newval", ";", "}"], "memberFunctions": {"targetField": [["String"]], "pred": [["Predicate"]], "tableName": [["String"]]}, "className": "ModifyData", "renamed": ["Expression", "function", "(", ")", "{", "return", "newval", ";", "}"], "nl": "Returns an expression. Evaluating this expression for a record produces the value that will be stored in the record's target field.", "nlToks": ["Returns", "an", "expression", ".", "Evaluating", "this", "expression", "for", "a", "record", "produces", "the", "value", "that", "will", "be", "stored", "in", "the", "record", "'s", "target", "field", "."], "path": "prerit2803/DBMSProject2/tree/master/simpledb/parse/ModifyData.java", "idx": 992}
{"memberVariables": {"mWriter": "ByteBuffer", "mBuffer": "byte[]"}, "code": ["BufferedByteWriter", "function", "(", "short", "value", ")", "{", "return", "put64", "(", "value", "&", "0xFFFFL", ")", ";", "}"], "memberFunctions": {"put24": [["BufferedByteWriter", "byte value"], ["BufferedByteWriter", "short value"], ["BufferedByteWriter", "int value"]], "putLen8": [["BufferedByteWriter", "byte[] value"]], "put16": [["BufferedByteWriter", "byte value"], ["BufferedByteWriter", "short value"]], "putLen16": [["BufferedByteWriter", "byte[] value"]], "toByteArray": [["byte[]"]], "ensureCapacity": [["void", "int required"]], "put": [["BufferedByteWriter", "byte[] value"], ["BufferedByteWriter", "byte value"]], "put32": [["BufferedByteWriter", "byte value"], ["BufferedByteWriter", "short value"], ["BufferedByteWriter", "int value"]]}, "className": "BufferedByteWriter", "renamed": ["BufferedByteWriter", "function", "(", "short", "arg0", ")", "{", "return", "put64", "(", "arg0", "&", "0xFFFFL", ")", ";", "}"], "nl": "Write the given long value (64-bit) in big-endian order to the buffer", "nlToks": ["Write", "the", "given", "long", "value", "-LRB-", "64-bit", "-RRB-", "in", "big-endian", "order", "to", "the", "buffer"], "path": "prathyks/strongswan/tree/master/src/frontends/android/app/src/main/java/org/strongswan/android/utils/BufferedByteWriter.java", "idx": 993}
{"memberVariables": {"headers": "Map<String,Object>", "body[]": "byte", "deliveryTag": "long", "replyTo": "String", "contentEncoding": "String", "messageId": "String", "correlationId": "String", "soapAction": "String", "contentType": "String"}, "code": ["String", "function", "(", ")", "{", "return", "contentType", ";", "}"], "memberFunctions": {"getCorrelationId": [["String"]], "getContentEncoding": [["String"]], "setHeaders": [["void", "Map<String,Object> headers"]], "getHeaders": [["Map<String,Object>"]], "getBody": [["byte[]"]], "getReplyTo": [["String"]], "setCorrelationId": [["void", "String correlationId"]], "setContentEncoding": [["void", "String contentEncoding"]], "getDeliveryTag": [["long"]], "setMessageId": [["void", "String messageId"]], "setSoapAction": [["void", "String soapAction"]], "setBody": [["void", "byte[] body"]], "getMessageId": [["String"]], "setReplyTo": [["void", "String replyTo"]], "setDeliveryTag": [["void", "long deliveryTag"]], "setContentType": [["void", "String contentType"]], "getSoapAction": [["String"]]}, "className": "RabbitMQMessage", "renamed": ["String", "function", "(", ")", "{", "return", "contentType", ";", "}"], "nl": "Get content type of the message", "nlToks": ["Get", "content", "type", "of", "the", "message"], "path": "harsha89/wso2-axis2-transports/tree/master/modules/rabbitmq/src/main/java/org/apache/axis2/transport/rabbitmq/RabbitMQMessage.java", "idx": 994}
{"memberVariables": {"names=new HashMap<Class<? extends Message>,String>()": "Map<Class<? extends Message>,String>", "size": "int", "log=LoggerFactory.getLogger(BitcoinSerializer.class)": "Logger", "parseLazy=false": "boolean", "HEADER_LENGTH=COMMAND_LEN + 4 + 4": "int", "checksum": "byte[]", "header": "byte[]", "params": "NetworkParameters", "COMMAND_LEN=12": "int", "command": "String", "parseRetain=false": "boolean"}, "code": ["boolean", "function", "(", ")", "{", "return", "parseLazy", ";", "}"], "memberFunctions": {"seekPastMagicBytes": [["void", "ByteBuffer in"]], "serialize": [["void", "String name", "byte[] message", "OutputStream out"], ["void", "Message message", "OutputStream out"]], "makeMessage": [["Message", "String command", "int length", "byte[] payloadBytes", "byte[] hash", "byte[] checksum"]], "deserializePayload": [["Message", "BitcoinPacketHeader header", "ByteBuffer in"]], "isParseRetainMode": [["boolean"]], "deserializeHeader": [["BitcoinPacketHeader", "ByteBuffer in"]], "deserialize": [["Message", "ByteBuffer in"]]}, "className": "BitcoinSerializer", "renamed": ["boolean", "function", "(", ")", "{", "return", "parseLazy", ";", "}"], "nl": "Whether the serializer will produce lazy parse mode Messages", "nlToks": ["Whether", "the", "serializer", "will", "produce", "lazy", "parse", "mode", "Messages"], "path": "1000000000001/bitcoinj/tree/master/core/src/main/java/org/bitcoinj/core/BitcoinSerializer.java", "idx": 995}
{"memberVariables": {"encryptionCryptoProperties": "Object", "bus": "Bus", "signatureCrypto": "Crypto", "signatureProperties=new SignatureProperties()": "SignatureProperties", "LOG=LogUtils.getL7dLogger(StaticSTSProperties.class)": "Logger", "issuer": "String", "encryptionProperties=new EncryptionProperties()": "EncryptionProperties", "callbackHandler": "CallbackHandler", "relationships": "List<Relationship>", "validateUseKey=true": "boolean", "relationshipResolver": "RelationshipResolver", "callbackHandlerClass": "String", "signatureUsername": "String", "encryptionCrypto": "Crypto", "samlRealmCodec": "SAMLRealmCodec", "encryptionUsername": "String", "signatureCryptoProperties": "Object", "identityMapper": "IdentityMapper", "realmParser": "RealmParser"}, "code": ["void", "function", "(", "boolean", "validateUseKey", ")", "{", "this", ".", "validateUseKey", "=", "validateUseKey", ";", "}"], "memberFunctions": {"getRelationshipResolver": [["RelationshipResolver"]], "getBus": [["Bus"]], "setSamlRealmCodec": [["void", "SAMLRealmCodec samlRealmCodec"]], "getResourceManager": [["ResourceManager"]], "setSignaturePropertiesFile": [["void", "String signaturePropertiesFile"]], "setCallbackHandler": [["void", "CallbackHandler callbackHandler"]], "setEncryptionProperties": [["void", "EncryptionProperties encryptionProperties"]], "getEncryptionProperties": [["EncryptionProperties"]], "isValidateUseKey": [["boolean"]], "setSignatureUsername": [["void", "String signatureUsername"]], "getRelationships": [["List<Relationship>"]], "getSamlRealmCodec": [["SAMLRealmCodec"]], "getEncryptionUsername": [["String"]], "setIdentityMapper": [["void", "IdentityMapper identityMapper"]], "setEncryptionPropertiesFile": [["void", "String encryptionPropertiesFile"]], "setEncryptionUsername": [["void", "String encryptionUsername"]], "setCallbackHandlerClass": [["void", "String callbackHandlerClass"]], "getEncryptionCrypto": [["Crypto"]], "setRelationships": [["void", "List<Relationship> relationships"]], "getSignatureProperties": [["SignatureProperties"]], "setSignatureProperties": [["void", "SignatureProperties signatureProperties"]], "setRealmParser": [["void", "RealmParser realmParser"]], "getIssuer": [["String"]], "setSignatureCryptoProperties": [["void", "Object signatureCryptoProperties"]], "setSignatureCrypto": [["void", "Crypto signatureCrypto"]], "getIdentityMapper": [["IdentityMapper"]], "configureProperties": [["void"]], "setEncryptionCrypto": [["void", "Crypto encryptionCrypto"]], "getRealmParser": [["RealmParser"]], "getSignatureUsername": [["String"]], "getSignatureCrypto": [["Crypto"]], "setIssuer": [["void", "String issuer"]], "getCallbackHandler": [["CallbackHandler"]], "setEncryptionCryptoProperties": [["void", "Object encryptionCryptoProperties"]], "setBus": [["void", "Bus bus"]]}, "className": "StaticSTSProperties", "renamed": ["void", "function", "(", "boolean", "arg0", ")", "{", "this", ".", "validateUseKey", "=", "arg0", ";", "}"], "nl": "Set whether to validate a client Public Key or Certificate presented as part of a  UseKey element. If this is set to true (the default), the public key must be trusted by the Signature Crypto of the STS.", "nlToks": ["Set", "whether", "to", "validate", "a", "client", "Public", "Key", "or", "Certificate", "presented", "as", "part", "of", "a", "UseKey", "element", ".", "If", "this", "is", "set", "to", "true", "-LRB-", "the", "default", "-RRB-", ",", "the", "public", "key", "must", "be", "trusted", "by", "the", "Signature", "Crypto", "of", "the", "STS", "."], "path": "primesign/cxf/tree/master/services/sts/sts-core/src/main/java/org/apache/cxf/sts/StaticSTSProperties.java", "idx": 996}
{"memberVariables": {"serialVersionUID=1L": "long", "isSystemDerived": "String", "isActive": "String", "predecessorId": "BigDecimal", "srcFileName": "String", "successorId": "BigDecimal", "feedId": "BigDecimal", "checksum": "String", "transmissionDatasetId": "String", "comments": "String", "inactivationReasonType": "String", "isFormatValid": "String", "dataUnitId": "long", "receiptDate": "Timestamp", "srcUniqueFileName": "String", "createdDate": "Timestamp", "dataSetId": "Long", "fileSize": "BigDecimal", "destFileName": "String", "loadedInCats": "String", "checksumType": "String", "modifiedDate": "Timestamp", "runId": "BigDecimal", "isPrepopulated": "String", "isBulk": "String", "isUpdate": "String", "receiptDateType": "String", "status": "String"}, "code": ["void", "function", "(", "Long", "dataSetId", ")", "{", "this", ".", "dataSetId", "=", "dataSetId", ";", "}"], "memberFunctions": {"setIsSystemDerived": [["void", "String isSystemDerived"]], "setIsPrepopulated": [["void", "String isPrepopulated"]], "getStatus": [["String"]], "getIsUpdate": [["String"]], "getDataUnitId": [["long"]], "getFileSize": [["BigDecimal"]], "setInactivationReasonType": [["void", "String inactivationReasonType"]], "setDataUnitId": [["void", "long dataUnitId"]], "getComments": [["String"]], "getCreatedDate": [["Timestamp"]], "setFileSize": [["void", "BigDecimal fileSize"]], "getPredecessorId": [["BigDecimal"]], "setIsUpdate": [["void", "String isUpdate"]], "getReceiptDateType": [["String"]], "getFeedId": [["BigDecimal"]], "setReceiptDate": [["void", "Timestamp receiptDate"]], "getModifiedDate": [["Timestamp"]], "setSuccessorId": [["void", "BigDecimal successorId"]], "setDestFileName": [["void", "String destFileName"]], "setIsBulk": [["void", "String isBulk"]], "getIsFormatValid": [["String"]], "setIsActive": [["void", "String isActive"]], "setChecksumType": [["void", "String checksumType"]], "setFeedId": [["void", "BigDecimal feedId"]], "getInactivationReasonType": [["String"]], "getSrcUniqueFileName": [["String"]], "getDataSetId": [["Long"]], "setReceiptDateType": [["void", "String receiptDateType"]], "getRunId": [["BigDecimal"]], "setSrcFileName": [["void", "String srcFileName"]], "getChecksumType": [["String"]], "getSrcFileName": [["String"]], "getChecksum": [["String"]], "getDestFileName": [["String"]], "getReceiptDate": [["Timestamp"]], "setTransmissionDatasetId": [["void", "String transmissionDatasetId"]], "getTransmissionDatasetId": [["String"]], "setComments": [["void", "String comments"]], "getLoadedInCats": [["String"]], "getSuccessorId": [["BigDecimal"]], "setLoadedInCats": [["void", "String loadedInCats"]], "getIsPrepopulated": [["String"]], "setSrcUniqueFileName": [["void", "String srcUniqueFileName"]], "setChecksum": [["void", "String checksum"]], "setIsFormatValid": [["void", "String isFormatValid"]], "getIsBulk": [["String"]], "setRunId": [["void", "BigDecimal runId"]], "setStatus": [["void", "String status"]], "getIsActive": [["String"]], "setModifiedDate": [["void", "Timestamp modifiedDate"]], "setCreatedDate": [["void", "Timestamp createdDate"]], "setPredecessorId": [["void", "BigDecimal predecessorId"]], "getIsSystemDerived": [["String"]]}, "className": "PCLDataUnitEntity", "renamed": ["void", "function", "(", "Long", "arg0", ")", "{", "this", ".", "dataSetId", "=", "arg0", ";", "}"], "nl": "Sets the data set id.", "nlToks": ["Sets", "the", "data", "set", "id", "."], "path": "pkesireddy/portico_fletcher/tree/master/FetcherTesterService/src/main/java/org/ithaka/cm/fetchertester/entity/PCLDataUnitEntity.java", "idx": 997}
{"memberVariables": {"unitsPerInch=92f": "float", "dotsPerInch=unitsPerInch": "float", "originLat": "float", "dotsPerDeg": "float", "originLon": "float", "lonCorr": "float"}, "code": ["float", "function", "(", ")", "{", "return", "dotsPerDeg", ";", "}"], "memberFunctions": {"adjustTransformation": [["void", "BoundingBox bb", "int viewWidth", "int viewHeight"]], "setScreenResolution": [["void", "int dotsPerInch"]], "adjust": [["void", "double dx", "double dy"]], "x": [["int", "double lon"]], "y": [["int", "double lat"]], "getDotsPerUnit": [["float"]], "zoom": [["void", "float factor", "int focusX", "int focusY"]], "lon": [["float", "int x"]], "computeScale": [["float"]], "lat": [["float", "int y"]]}, "className": "CoordTransformer", "renamed": ["float", "function", "(", ")", "{", "return", "dotsPerDeg", ";", "}"], "nl": "Returns the current  {@link #dotsPerDeg} value.", "nlToks": ["Returns", "the", "current", "-LCB-", "@link", "#dotsPerDeg", "-RCB-", "value", "."], "path": "peterplupo/ia201102/tree/master/trabalho1/aimax-osm/src/main/java/aimax/osm/viewer/CoordTransformer.java", "idx": 998}
{"memberVariables": {"topType": "Type", "v": "List<Type>", "ts": "TypeSystem"}, "code": ["boolean", "function", "(", "Object", "o", ")", "{", "if", "(", "o", "instanceof", "Type", ")", "{", "Type", "type", "=", "(", "Type", ")", "o", ";", "for", "(", "Type", "t", ":", "v", ")", "{", "if", "(", "ts", ".", "isSubtype", "(", "type", ",", "t", ")", ")", "{", "return", "true", ";", "}", "}", "}", "return", "false", ";", "}"], "memberFunctions": {"add": [["boolean", "Type type"]], "containsAll": [["boolean", "Collection<?> c"]], "clear": [["void"]], "isEmpty": [["boolean"]], "remove": [["boolean", "Object o"]], "iterator": [["Iterator<Type>"]], "removeAll": [["boolean", "Collection<?> c"]], "size": [["int"]], "addAll": [["boolean", "Collection<? extends Type> c"]], "containsSubtype": [["boolean", "Type type"]], "toArray": [["Object[]"], ["U[]", "U[] a"]], "toString": [["String"]], "retainAll": [["boolean", "Collection<?> c"]]}, "className": "SubtypeSet", "renamed": ["boolean", "function", "(", "Object", "arg0", ")", "{", "if", "(", "arg0", "instanceof", "Type", ")", "{", "Type", "loc0", "=", "(", "Type", ")", "arg0", ";", "for", "(", "Type", "loc1", ":", "v", ")", "{", "if", "(", "ts", ".", "isSubtype", "(", "loc0", ",", "loc1", ")", ")", "{", "return", "true", ";", "}", "}", "}", "return", "false", ";", "}"], "nl": "Check whether object  {@code o} is in the set. Because of the semantics of the subtype set,  {@code o} is in the set iffit descends from (or is equal to) one of the elements in the set.", "nlToks": ["Check", "whether", "object", "-LCB-", "@code", "o", "-RCB-", "is", "in", "the", "set", ".", "Because", "of", "the", "semantics", "of", "the", "subtype", "set", ",", "-LCB-", "@code", "o", "-RCB-", "is", "in", "the", "set", "iffit", "descends", "from", "-LRB-", "or", "is", "equal", "to", "-RRB-", "one", "of", "the", "elements", "in", "the", "set", "."], "path": "polyglot-compiler/polyglot/tree/master/src/polyglot/util/SubtypeSet.java", "idx": 1000}
{"memberVariables": {"RETVAL_MALFORMED=3": "int", "RETVAL_OK=0": "int", "RETVAL_ERROR=1": "int", "RETVAL_NOENTRY=2": "int"}, "code": ["void", "function", "(", "ServiceID", "id", ",", "int", "flags", ",", "int", "prefixBits", ",", "InetAddress", "addr", ")", "{", "}"], "memberFunctions": {"onServiceRegistration": [["void", "ServiceID id", "int flags", "int prefixBits", "InetAddress addr", "InetAddress oldAddr"]], "onServiceAdd": [["void", "long xid", "int retval", "ServiceInfo[] info"]], "onServiceRemove": [["void", "long xid", "int retval", "ServiceInfoStat[] info"]], "onServiceDelayed": [["void", "long xid", "long pktId", "ServiceID service"]], "onServiceModify": [["void", "long xid", "int retval", "ServiceInfoStat[] info"]], "onFlowStatUpdate": [["void", "long xid", "int retval", "FlowStat[] stats", "boolean more"]], "getRetvalString": [["String", "int retval"]], "onServiceGet": [["void", "long xid", "int retval", "ServiceInfo[] info"]]}, "className": "HostCtrlCallbacks", "renamed": ["void", "function", "(", "ServiceID", "arg0", ",", "int", "arg1", ",", "int", "arg2", ",", "InetAddress", "arg3", ")", "{", "}"], "nl": "This callback is called on an unregistration event.", "nlToks": ["This", "callback", "is", "called", "on", "an", "unregistration", "event", "."], "path": "princeton-sns/serval/tree/master/src/libservalctrl/java/src/org/servalarch/servalctrl/HostCtrlCallbacks.java", "idx": 1001}
{"memberVariables": {"WORKFLOW=\"oozie.el.workflow.bean\"": "String", "ACTION_TRACKER_URI=\"action.tracker.uri\"": "String", "LAST_ACTION_IN_ERROR=\"oozie.el.last.action.in.error\"": "String", "ACTION_PROTO_CONF=\"oozie.el.action.proto.conf\"": "String", "ACTION_DATA=\"action.data\"": "String", "ACTION_EXTERNAL_STATUS=\"action.external.status\"": "String", "ACTION_ERROR_CODE=\"action.error.code\"": "String", "ACTION_EXTERNAL_ID=\"action.external.id\"": "String", "ACTION=\"oozie.el.action.bean\"": "String", "ACTION_ERROR_MESSAGE=\"action.error.message\"": "String"}, "code": ["String", "function", "(", ")", "{", "return", "getWorkflow", "(", ")", ".", "getUser", "(", ")", ";", "}"], "memberFunctions": {"wf_run": [["int"]], "getWorkflow": [["WorkflowJobBean"]], "getActionVar": [["String", "String actionName", "String varName"]], "wf_callback": [["String", "String externalStatusVar"]], "setActionInfo": [["void", "WorkflowInstance workflowInstance", "WorkflowAction action"]], "wf_conf": [["String", "String property"]], "wf_actionExternalStatus": [["String", "String actionName"]], "getAction": [["WorkflowActionBean"]], "wf_actionExternalId": [["String", "String actionName"]], "getProtoActionConf": [["Configuration"]], "wf_group": [["String"]], "wf_transition": [["String", "String actionName"]], "wf_lastErrorNode": [["String"]], "wf_appPath": [["String"]], "wf_errorCode": [["String", "String actionName"]], "configureEvaluator": [["void", "ELEvaluator evaluator", "WorkflowJobBean workflow", "WorkflowActionBean action"]], "wf_id": [["String"]], "wf_actionTrackerUri": [["String", "String actionName"]], "wf_actionData": [["Map<String,String>", "String actionName"]], "wf_name": [["String"]], "wf_errorMessage": [["String", "String actionName"]]}, "className": "DagELFunctions", "renamed": ["String", "function", "(", ")", "{", "return", "getWorkflow", "(", ")", ".", "getUser", "(", ")", ";", "}"], "nl": "Return the job owner user name.", "nlToks": ["Return", "the", "job", "owner", "user", "name", "."], "path": "pingpangkuangmo/oozie/tree/master/core/src/main/java/org/apache/oozie/DagELFunctions.java", "idx": 1002}
{"memberVariables": {"theInstance": "ProjectActions", "removeFromDiagram=new ActionRemoveFromDiagram(Translator.localize(\"action.remove-from-diagram\"))": "ActionRemoveFromDiagram", "redoAction": "AbstractAction", "undoAction": "ActionUndo"}, "code": ["ProjectActions", "function", "(", ")", "{", "if", "(", "theInstance", "==", "null", ")", "{", "theInstance", "=", "new", "ProjectActions", "(", ")", ";", "}", "return", "theInstance", ";", "}"], "memberFunctions": {"determineRemoveEnabled": [["void"]], "targetSet": [["void", "TargetEvent e"]], "jumpToDiagramShowing": [["void", "List targets"]], "getUndoAction": [["AbstractAction"]], "getRedoAction": [["AbstractAction"]], "targetRemoved": [["void", "TargetEvent e"]], "getRemoveFromDiagramAction": [["AbstractAction"]], "setTarget": [["void", "Object o"]], "propertyChange": [["void", "final PropertyChangeEvent evt"]], "targetAdded": [["void", "TargetEvent e"]]}, "className": "ProjectActions", "renamed": ["ProjectActions", "function", "(", ")", "{", "if", "(", "theInstance", "==", "null", ")", "{", "theInstance", "=", "new", "ProjectActions", "(", ")", ";", "}", "return", "theInstance", ";", "}"], "nl": "Singleton retrieval method for the projectbrowser. Lazely instantiates the projectbrowser.", "nlToks": ["Singleton", "retrieval", "method", "for", "the", "projectbrowser", ".", "Lazely", "instantiates", "the", "projectbrowser", "."], "path": "pichiliani/CoArgoUML/tree/master/v0.24/fonte/src/argouml-app/src/org/argouml/ui/ProjectActions.java", "idx": 1004}
{"memberVariables": {"data": "Map<O,DocumentElement<O>>", "wordCountMultiSet": "int", "name": "String", "count": "IntegerHolder", "object": "T"}, "code": ["void", "function", "(", "O", "word", ",", "int", "multiplicity", ")", "{", "assert", "data", ".", "get", "(", "word", ")", "==", "null", ";", "data", ".", "put", "(", "word", ",", "new", "DocumentElement", "<", "O", ">", "(", "word", ",", "new", "IntegerHolder", "(", "multiplicity", ")", ")", ")", ";", "wordCountMultiSet", "+=", "multiplicity", ";", "}"], "memberFunctions": {"addWord": [["void", "O word"]], "multiSetSize": [["int"]], "iterator": [["Iterator<DocumentElement<O>>"]], "getObject": [["T"]], "getName": [["String"]], "size": [["int"]], "getCount": [["int"]], "inc": [["void"]]}, "className": "Document", "renamed": ["void", "function", "(", "O", "arg0", ",", "int", "arg1", ")", "{", "assert", "data", ".", "get", "(", "arg0", ")", "==", "null", ";", "data", ".", "put", "(", "arg0", ",", "new", "DocumentElement", "<", "O", ">", "(", "arg0", ",", "new", "IntegerHolder", "(", "arg1", ")", ")", ")", ";", "wordCountMultiSet", "+=", "arg1", ";", "}"], "nl": "Sets the multiplicity for the given word.", "nlToks": ["Sets", "the", "multiplicity", "for", "the", "given", "word", "."], "path": "pombreda/furia-chan/tree/master/src/main/java/org/kit/furia/Document.java", "idx": 1005}
{"memberVariables": {"_uri": "String", "_uac": "UserAgentCallback", "_image": "Image", "_width": "int", "_height": "int"}, "code": ["Image", "function", "(", ")", "{", "if", "(", "_image", "!=", "null", "&&", "_image", ".", "isDisposed", "(", ")", ")", "{", "SWTFSImage", "fsimg", "=", "(", "SWTFSImage", ")", "_uac", ".", "getImageResource", "(", "_uri", ")", ".", "getImage", "(", ")", ";", "if", "(", "fsimg", "==", "null", ")", "{", "_image", "=", "null", ";", "}", "else", "{", "_image", "=", "fsimg", ".", "_image", ";", "}", "}", "return", "_image", ";", "}"], "memberFunctions": {"getHeight": [["int"]], "scale": [["void", "int width", "int height"]], "getWidth": [["int"]], "setHeight": [["void", "int height"]], "setWidth": [["void", "int width"]]}, "className": "SWTFSImage", "renamed": ["Image", "function", "(", ")", "{", "if", "(", "_image", "!=", "null", "&&", "_image", ".", "isDisposed", "(", ")", ")", "{", "SWTFSImage", "loc0", "=", "(", "SWTFSImage", ")", "_uac", ".", "getImageResource", "(", "_uri", ")", ".", "getImage", "(", ")", ";", "if", "(", "loc0", "==", "null", ")", "{", "_image", "=", "null", ";", "}", "else", "{", "_image", "=", "loc0", ".", "_image", ";", "}", "}", "return", "_image", ";", "}"], "nl": "Get the SWT image. Reload it from the UAC if it was disposed.", "nlToks": ["Get", "the", "SWT", "image", ".", "Reload", "it", "from", "the", "UAC", "if", "it", "was", "disposed", "."], "path": "plutogeek/flyingsaucer/tree/master/flying-saucer-swt/src/main/java/org/xhtmlrenderer/swt/SWTFSImage.java", "idx": 1006}
{"memberVariables": {"EXAMPLE=\"$GPRMC,120044.567,A,6011.552,N,02501.941,E,000.0,360.0,160705,006.1,E,A*0B\"": "String", "rmc": "RMCParser", "empty": "RMCParser"}, "code": ["void", "function", "(", ")", "{", "double", "expected", "=", "rmc", ".", "getCourse", "(", ")", "+", "rmc", ".", "getVariation", "(", ")", ";", "assertEquals", "(", "expected", ",", "rmc", ".", "getCorrectedCourse", "(", ")", ",", "0.001", ")", ";", "}"], "memberFunctions": {"testSetFaaModeWhenOmitted": [["void"]], "testSetDirectionOfVariationWithInvalidDirection": [["void"]], "testGetDataStatus": [["void"]], "testConstructor": [["void"]], "testGetTime": [["void"]], "testSetCourse": [["void"]], "testSetFaaMode": [["void"]], "testSetVariation": [["void"]], "setUp": [["void"]], "testGetMonth": [["void"]], "testGetCourse": [["void"]], "testSetDate": [["void"]], "testGetYear": [["void"]], "testSetDataStatus": [["void"]], "testGetDirectionOfVariation": [["void"]], "testGetDate": [["void"]], "testGetMagneticVariation": [["void"]], "testSetPosition": [["void"]], "testGetPosition": [["void"]], "testSetDirectionOfVariation": [["void"]], "testSetTime": [["void"]], "testGetDay": [["void"]], "testGetSpeed": [["void"]], "testGetFaaMode": [["void"]], "testSetSpeed": [["void"]]}, "className": "RMCTest", "renamed": ["void", "function", "(", ")", "{", "double", "loc0", "=", "rmc", ".", "getCourse", "(", ")", "+", "rmc", ".", "getVariation", "(", ")", ";", "assertEquals", "(", "loc0", ",", "rmc", ".", "getCorrectedCourse", "(", ")", ",", "0.001", ")", ";", "}"], "nl": "Test method for {@link net.sf.marineapi.nmea.parser.RMCParser#getCourse()} .", "nlToks": ["Test", "method", "for", "-LCB-", "@link", "net.sf.marineapi.nmea.parser.RMCParser", "#getCourse", "-LRB-", "-RRB-", "-RCB-", "."], "path": "pkoziol/marine-api/tree/master/src/test/java/net/sf/marineapi/nmea/parser/RMCTest.java", "idx": 1007}
{"memberVariables": {"mMenuItem": "android.view.MenuItem"}, "code": ["View", "function", "(", ")", "{", "if", "(", "mMenuItem", "!=", "null", ")", "{", "return", "HoneycombMenuItem", ".", "getActionView", "(", "mMenuItem", ")", ";", "}", "return", "null", ";", "}"], "memberFunctions": {"hasSubMenu": [["boolean"]], "getTitleCondensed": [["CharSequence"]], "getGroupId": [["int"]], "getItemId": [["int"]], "getTitle": [["CharSequence"]], "setChecked": [["MenuItem", "boolean checked"]], "getAlphabeticShortcut": [["char"]], "setOnMenuItemClickListener": [["MenuItem", "android.view.MenuItem.OnMenuItemClickListener menuItemClickListener"], ["MenuItem", "OnMenuItemClickListener menuItemClickListener"]], "getIntent": [["Intent"]], "isCheckable": [["boolean"]], "setShortcut": [["MenuItem", "char numericChar", "char alphaChar"]], "setVisible": [["MenuItem", "boolean visible"]], "setShowAsAction": [["void", "android.view.MenuItem item", "int actionEnum"], ["void", "int actionEnum"]], "getSubMenu": [["SubMenu"]], "setIntent": [["MenuItem", "Intent intent"]], "setCheckable": [["MenuItem", "boolean checkable"]], "setAlphabeticShortcut": [["MenuItem", "char alphaChar"]], "setTitle": [["MenuItem", "CharSequence title"], ["MenuItem", "int title"]], "setNumericShortcut": [["MenuItem", "char numericChar"]], "isVisible": [["boolean"]], "isChecked": [["boolean"]], "setTitleCondensed": [["MenuItem", "CharSequence title"]], "getIcon": [["Drawable"]], "setIcon": [["MenuItem", "Drawable icon"], ["MenuItem", "int iconRes"]], "setEnabled": [["MenuItem", "boolean enabled"]], "getOrder": [["int"]], "isEnabled": [["boolean"]], "getNumericShortcut": [["char"]], "setActionView": [["void", "android.view.MenuItem item", "int resId"], ["void", "android.view.MenuItem item", "View view"], ["MenuItem", "int resId"], ["MenuItem", "View view"]], "getMenuInfo": [["ContextMenuInfo"]]}, "className": "MenuItemWrapper", "renamed": ["View", "function", "(", ")", "{", "if", "(", "mMenuItem", "!=", "null", ")", "{", "return", "HoneycombMenuItem", ".", "getActionView", "(", "mMenuItem", ")", ";", "}", "return", "null", ";", "}"], "nl": "Returns the currently set action view for this menu item.", "nlToks": ["Returns", "the", "currently", "set", "action", "view", "for", "this", "menu", "item", "."], "path": "prateeka/AndroidDev/tree/master/SherlockActionBar/src/com/actionbarsherlock/internal/view/menu/MenuItemWrapper.java", "idx": 1008}
{"memberVariables": {"instance": "GSASentence", "EXAMPLE=\"$GPGSA,A,3,02,,,07,,09,24,26,,,,,1.6,1.6,1.0*3D\"": "String", "empty": "GSASentence"}, "code": ["void", "function", "(", ")", "{", "final", "double", "hdop", "=", "1.98765", ";", "instance", ".", "setHorizontalDOP", "(", "hdop", ")", ";", "assertEquals", "(", "hdop", ",", "instance", ".", "getHorizontalDOP", "(", ")", ",", "0.1", ")", ";", "}"], "memberFunctions": {"testGetFixStatus": [["void"]], "testSetFixStatus": [["void"]], "testGetPositionDOP": [["void"]], "testGetSatelliteIds": [["void"]], "testConstructor": [["void"]], "testGetHorizontalDOP": [["void"]], "testSetPositionDOP": [["void"]], "testGetVerticalDOP": [["void"]], "testSetFaaMode": [["void"]], "setUp": [["void"]], "testGetFaaMode": [["void"]], "testSetVerticalDOP": [["void"]], "testSetSatelliteIds": [["void"]]}, "className": "GSATest", "renamed": ["void", "function", "(", ")", "{", "final", "double", "loc0", "=", "1.98765", ";", "instance", ".", "setHorizontalDOP", "(", "loc0", ")", ";", "assertEquals", "(", "loc0", ",", "instance", ".", "getHorizontalDOP", "(", ")", ",", "0.1", ")", ";", "}"], "nl": "Test method for {@link net.sf.marineapi.nmea.parser.GSAParser#setHorizontalDOP(double)}.", "nlToks": ["Test", "method", "for", "-LCB-", "@link", "net.sf.marineapi.nmea.parser.GSAParser", "#setHorizontalDOP", "-LRB-", "double", "-RRB-", "-RCB-", "."], "path": "pkoziol/marine-api/tree/master/src/test/java/net/sf/marineapi/nmea/parser/GSATest.java", "idx": 1010}
{"memberVariables": {"x": "int", "width": "float", "sprite": "String", "y": "int", "id": "int", "triggerType": "TriggerType", "map": "String", "actions": "Array<EventAction>", "layer": "String", "height": "float", "collidable": "boolean"}, "code": ["Character", "function", "(", "ShadowStruggles", "game", ")", "{", "RpgMap", "rpgMap", "=", "new", "RpgMap", "(", "map", ",", "layer", ",", "SettingsDAO", ".", "getSettings", "(", ")", ".", "defaultTileLayer", ")", ";", "Character", "character", "=", "new", "Character", "(", "x", ",", "y", ",", "width", ",", "height", ",", "rpgMap", ")", ";", "return", "character", ";", "}"], "memberFunctions": {"setY": [["void", "int y"]], "read": [["void", "Json json", "JsonValue jsonData"]], "setX": [["void", "int x"]], "setLayer": [["void", "String layer"]], "setActions": [["void", "Array<EventAction> actions"]], "getLayer": [["String"]], "getId": [["int"]], "getActions": [["Array<EventAction>"]], "getMap": [["String"]], "setSprite": [["void", "String sprite"]], "getSprite": [["String"]], "getX": [["int"]], "isCollidable": [["boolean"]], "getY": [["int"]], "setTriggerType": [["void", "TriggerType triggerType"]], "equals": [["boolean", "Object obj"]], "setMap": [["void", "String map"]], "setId": [["void", "int id"]], "getTriggerType": [["TriggerType"]], "write": [["void", "Json json"]], "getConvertedTriggerType": [["EventInGame.TriggerType"]]}, "className": "Event", "renamed": ["Character", "function", "(", "ShadowStruggles", "arg0", ")", "{", "RpgMap", "loc0", "=", "new", "RpgMap", "(", "map", ",", "layer", ",", "SettingsDAO", ".", "getSettings", "(", ")", ".", "defaultTileLayer", ")", ";", "Character", "loc1", "=", "new", "Character", "(", "x", ",", "y", ",", "width", ",", "height", ",", "loc0", ")", ";", "return", "loc1", ";", "}"], "nl": "Creates a character from this object's parameters.", "nlToks": ["Creates", "a", "character", "from", "this", "object", "'s", "parameters", "."], "path": "prativa/shadowstruggles/tree/master/Shadow Struggles/model/br/edu/ifsp/pds/shadowstruggles/model/events/Event.java", "idx": 1011}
{"memberVariables": {}, "code": ["String", "function", "(", "String", "str", ")", "{", "int", "sum", "=", "0", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "str", ".", "length", "(", ")", ";", "i", "++", ")", "{", "sum", "^=", "(", "byte", ")", "str", ".", "charAt", "(", "i", ")", ";", "}", "return", "String", ".", "format", "(", "\"%02X\"", ",", "sum", ")", ";", "}"], "memberFunctions": {"add": [["String", "String nmea"]], "index": [["int", "String nmea"]], "calculate": [["String", "String nmea"]]}, "className": "Checksum", "renamed": ["String", "function", "(", "String", "arg0", ")", "{", "int", "loc0", "=", "0", ";", "for", "(", "int", "loc1", "=", "0", ";", "loc1", "<", "arg0", ".", "length", "(", ")", ";", "loc1", "++", ")", "{", "loc0", "^=", "(", "byte", ")", "arg0", ".", "charAt", "(", "loc1", ")", ";", "}", "return", "String", ".", "format", "(", "\"srini_string\"", ",", "loc0", ")", ";", "}"], "nl": "Calculates XOR checksum of given String. Resulting hex value is returned as a String in two digit format, padded with a leading zero if necessary.", "nlToks": ["Calculates", "XOR", "checksum", "of", "given", "String", ".", "Resulting", "hex", "value", "is", "returned", "as", "a", "String", "in", "two", "digit", "format", ",", "padded", "with", "a", "leading", "zero", "if", "necessary", "."], "path": "pkoziol/marine-api/tree/master/src/main/java/net/sf/marineapi/nmea/sentence/Checksum.java", "idx": 1012}
{"memberVariables": {"parent": "Node", "cost": "float", "closed=new Array()": "Array", "open=new SortedList()": "SortedList", "heuristic": "float", "maxSearchDistance": "int", "nodes": "Node[][]", "allowDiagMovement": "boolean", "depth": "int", "x": "int", "list=new Array()": "Array", "y": "int", "map": "TileBasedMap"}, "code": ["void", "function", "(", "Node", "node", ")", "{", "closed", ".", "add", "(", "node", ")", ";", "}"], "memberFunctions": {"add": [["void", "Object o"]], "getFirstInOpen": [["Node"]], "inOpenList": [["boolean", "Node node"]], "clear": [["void"]], "inClosedList": [["boolean", "Node node"]], "removeFromClosed": [["void", "Node node"]], "compareTo": [["int", "Object other"]], "addToOpen": [["void", "Node node"]], "remove": [["void", "Object o"]], "contains": [["boolean", "Object o"]], "isValidLocation": [["boolean", "Mover mover", "int sx", "int sy", "int x", "int y"]], "getMovementCost": [["float", "Mover mover", "int sx", "int sy", "int tx", "int ty"]], "size": [["int"]], "getHeuristicCost": [["float", "Mover mover", "int x", "int y", "int tx", "int ty"]], "setParent": [["int", "Node parent"]], "findPath": [["Path", "Mover mover", "int sx", "int sy", "int tx", "int ty"]], "removeFromOpen": [["void", "Node node"]], "first": [["Object"]]}, "className": "AStarPathFinder", "renamed": ["void", "function", "(", "Node", "arg0", ")", "{", "closed", ".", "add", "(", "arg0", ")", ";", "}"], "nl": "Add a node to the closed list", "nlToks": ["Add", "a", "node", "to", "the", "closed", "list"], "path": "prativa/shadowstruggles/tree/master/Shadow Struggles/model/br/edu/ifsp/pds/shadowstruggles/model/rpg/pathfinder/AStarPathFinder.java", "idx": 1013}
{"memberVariables": {"ALPHANUM=\"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\"": "String", "RANDOM=new Random()": "Random", "LOG=LoggerFactory.getLogger(Constants.LOGGER_TYPE)": "Logger"}, "code": ["void", "function", "(", "long", "timeMs", ")", "{", "sleepMs", "(", "null", ",", "timeMs", ")", ";", "}"], "memberFunctions": {"createNewClassInstance": [["T", "Class<T> cls", "Class<?>[] ctorClassArgs", "Object[] ctorArgs"]], "isUfsObjectStorage": [["boolean", "String ufsAddress"]], "listToString": [["String", "List<T> list"]], "randomString": [["String", "int length"]], "argsToString": [["String", "String separator", "T... args"]], "stripPrefixIfPresent": [["String", "final String key", "final String prefix"]], "toStringArray": [["String[]", "ArrayList<String> src"]], "getUnixGroups": [["List<String>", "String user"]], "getCurrentMs": [["long"]], "getPrimaryGroupName": [["String", "String userName"]], "stripSuffixIfPresent": [["String", "final String key", "final String suffix"]], "getValueFromStaticMapping": [["String", "String mapping", "String key"]], "warmUpLoop": [["void"]], "waitFor": [["void", "String description", "Function<Void,Boolean> condition", "int timeoutMs"]], "getGroups": [["List<String>", "String userName"]], "randomBytes": [["byte[]", "int length"]]}, "className": "CommonUtils", "renamed": ["void", "function", "(", "long", "arg0", ")", "{", "sleepMs", "(", "null", ",", "arg0", ")", ";", "}"], "nl": "Sleeps for the given number of milliseconds.", "nlToks": ["Sleeps", "for", "the", "given", "number", "of", "milliseconds", "."], "path": "poemlin/alluxio/tree/master/core/common/src/main/java/alluxio/util/CommonUtils.java", "idx": 1014}
{"memberVariables": {"NULL=\"||\"": "String"}, "code": ["T", "function", "(", "byte", "[", "]", "array", ",", "Class", "<", "T", ">", "clazz", ")", "{", "try", "{", "T", "o", "=", "(", "T", ")", "ReflectionUtils", ".", "newInstance", "(", "clazz", ",", "null", ")", ";", "o", ".", "readFields", "(", "new", "DataInputStream", "(", "new", "ByteArrayInputStream", "(", "array", ")", ")", ")", ";", "return", "o", ";", "}", "catch", "(", "IOException", "ex", ")", "{", "throw", "new", "RuntimeException", "(", "ex", ")", ";", "}", "}"], "memberFunctions": {"writeStr": [["void", "DataOutput dataOutput", "String str"]], "toByteArray": [["byte[]", "Writable writable"]], "readStr": [["String", "DataInput dataInput"]]}, "className": "WritableUtils", "renamed": ["T", "function", "(", "byte", "[", "]", "arg0", ",", "Class", "<", "T", ">", "arg1", ")", "{", "try", "{", "T", "loc0", "=", "(", "T", ")", "ReflectionUtils", ".", "newInstance", "(", "arg1", ",", "null", ")", ";", "loc0", ".", "readFields", "(", "new", "DataInputStream", "(", "new", "ByteArrayInputStream", "(", "arg0", ")", ")", ")", ";", "return", "loc0", ";", "}", "catch", "(", "IOException", "loc0", ")", "{", "throw", "new", "RuntimeException", "(", "loc0", ")", ";", "}", "}"], "nl": "Read a writable from a byte array.", "nlToks": ["Read", "a", "writable", "from", "a", "byte", "array", "."], "path": "pingpangkuangmo/oozie/tree/master/core/src/main/java/org/apache/oozie/util/WritableUtils.java", "idx": 1016}
{"memberVariables": {"URL_SAVED=\"configuration.save.url\"": "String", "FILE_SAVED=\"configuration.save.file\"": "String", "URL_LOADED=\"configuration.load.url\"": "String", "config=getFactory().getConfigurationHandler()": "ConfigurationHandler", "FILE_LOADED=\"configuration.load.file\"": "String"}, "code": ["ConfigurationKey", "function", "(", "String", "k1", ",", "String", "k2", ",", "String", "k3", ")", "{", "return", "new", "ConfigurationKeyImpl", "(", "k1", ",", "k2", ",", "k3", ")", ";", "}"], "memberFunctions": {"save": [["boolean"], ["boolean", "boolean force"]], "setInteger": [["void", "ConfigurationKey key", "int newValue"]], "getDouble": [["double", "ConfigurationKey key", "double defaultValue"], ["double", "ConfigurationKey key"]], "getInteger": [["int", "ConfigurationKey key"], ["int", "ConfigurationKey key", "int defaultValue"]], "getString": [["String", "ConfigurationKey key"], ["String", "ConfigurationKey key", "String defaultValue"]], "removeListener": [["void", "PropertyChangeListener pcl"], ["void", "ConfigurationKey key", "PropertyChangeListener pcl"]], "getFactory": [["IConfigurationFactory"]], "setDouble": [["void", "ConfigurationKey key", "double newValue"]], "setString": [["void", "ConfigurationKey key", "String newValue"]], "load": [["boolean"], ["boolean", "File file"], ["boolean", "URL url"]], "removeKey": [["void", "ConfigurationKey key"]], "getConfigurationHandler": [["ConfigurationHandler"]], "getBoolean": [["boolean", "ConfigurationKey key"], ["boolean", "ConfigurationKey key", "boolean defaultValue"]], "setBoolean": [["void", "ConfigurationKey key", "boolean newValue"]], "addListener": [["void", "PropertyChangeListener pcl"], ["void", "ConfigurationKey key", "PropertyChangeListener pcl"]]}, "className": "Configuration", "renamed": ["ConfigurationKey", "function", "(", "String", "arg0", ",", "String", "arg1", ",", "String", "arg2", ")", "{", "return", "new", "ConfigurationKeyImpl", "(", "arg0", ",", "arg1", ",", "arg2", ")", ";", "}"], "nl": "Create a three-component configuration key.", "nlToks": ["Create", "a", "three-component", "configuration", "key", "."], "path": "pichiliani/CoArgoUML/tree/master/v0.24/fonte/src/argouml-app/src/org/argouml/configuration/Configuration.java", "idx": 1019}
{"memberVariables": {"_imageCacheCapacity=16": "int", "_baseURL": "String", "_imageCache=new LinkedHashMap(_imageCacheCapacity,0.75f,true)": "LinkedHashMap", "_device": "Device"}, "code": ["void", "function", "(", ")", "{", "for", "(", "Iterator", "iter", "=", "_imageCache", ".", "values", "(", ")", ".", "iterator", "(", ")", ";", "iter", ".", "hasNext", "(", ")", ";", ")", "{", "ImageResource", "ir", "=", "(", "ImageResource", ")", "iter", ".", "next", "(", ")", ";", "(", "(", "SWTFSImage", ")", "ir", ".", "getImage", "(", ")", ")", ".", "getImage", "(", ")", ".", "dispose", "(", ")", ";", "}", "_imageCache", ".", "clear", "(", ")", ";", "}"], "memberFunctions": {"getBaseURL": [["String"]], "loadEmbeddedBase64ImageResource": [["ImageResource", "final String uri"]], "isVisited": [["boolean", "String uri"]], "getCSSResource": [["CSSResource", "String uri"]], "createImageResource": [["ImageResource", "String uri", "InputStream is"]], "getXMLResource": [["XMLResource", "String uri"]], "setBaseURL": [["void", "String url"]], "getImageResource": [["ImageResource", "String uri"]], "resolveURI": [["String", "String uri"]], "getBinaryResource": [["byte[]", "String uri"]], "getInputStream": [["InputStream", "String uri"]]}, "className": "NaiveUserAgent", "renamed": ["void", "function", "(", ")", "{", "for", "(", "Iterator", "loc0", "=", "_imageCache", ".", "values", "(", ")", ".", "iterator", "(", ")", ";", "loc0", ".", "hasNext", "(", ")", ";", ")", "{", "ImageResource", "loc1", "=", "(", "ImageResource", ")", "loc0", ".", "next", "(", ")", ";", "(", "(", "SWTFSImage", ")", "loc1", ".", "getImage", "(", ")", ")", ".", "getImage", "(", ")", ".", "dispose", "(", ")", ";", "}", "_imageCache", ".", "clear", "(", ")", ";", "}"], "nl": "Dispose all images in cache and clean the cache.", "nlToks": ["Dispose", "all", "images", "in", "cache", "and", "clean", "the", "cache", "."], "path": "plutogeek/flyingsaucer/tree/master/flying-saucer-swt/src/main/java/org/xhtmlrenderer/swt/NaiveUserAgent.java", "idx": 1020}
{"memberVariables": {"BUCKET_PREFIX=\"prefix\"": "String", "mClient": "OSSClient", "DST=\"dst\"": "String", "SRC=\"src\"": "String", "mOSSUnderFileSystem": "OSSUnderFileSystem", "PATH=\"path\"": "String", "BUCKET_NAME=\"bucket\"": "String"}, "code": ["void", "function", "(", ")", "{", "Mockito", ".", "when", "(", "mClient", ".", "listObjects", "(", "Matchers", ".", "any", "(", "ListObjectsRequest", ".", "class", ")", ")", ")", ".", "thenThrow", "(", "ServiceException", ".", "class", ")", ";", "boolean", "result", "=", "mOSSUnderFileSystem", ".", "delete", "(", "PATH", ",", "true", ")", ";", "Assert", ".", "assertFalse", "(", "result", ")", ";", "}"], "memberFunctions": {"before": [["void"]], "deleteNonRecursiveOnServiceException": [["void"]], "renameOnServiceException": [["void"]]}, "className": "OSSUnderFileSystemTest", "renamed": ["void", "function", "(", ")", "{", "Mockito", ".", "when", "(", "mClient", ".", "listObjects", "(", "Matchers", ".", "any", "(", "ListObjectsRequest", ".", "class", ")", ")", ")", ".", "thenThrow", "(", "ServiceException", ".", "class", ")", ";", "boolean", "loc0", "=", "mOSSUnderFileSystem", ".", "delete", "(", "PATH", ",", "true", ")", ";", "Assert", ".", "assertFalse", "(", "loc0", ")", ";", "}"], "nl": "Test case for  {@link OSSUnderFileSystem#delete(String,boolean)}.", "nlToks": ["Test", "case", "for", "-LCB-", "@link", "OSSUnderFileSystem", "#delete", "-LRB-", "String", ",", "boolean", "-RRB-", "-RCB-", "."], "path": "poemlin/alluxio/tree/master/underfs/oss/src/test/java/alluxio/underfs/oss/OSSUnderFileSystemTest.java", "idx": 1021}
{"memberVariables": {"ext": "ExtensionInfo", "EXPR=0": "int", "DECL=4": "int", "pos": "Position", "MEMB=3": "int", "STMT=1": "int", "TYPE=2": "int", "FILE=5": "int"}, "code": ["SourceFile", "function", "(", "String", "fmt", ",", "List", "<", "?", ">", "subst", ")", "{", "return", "(", "SourceFile", ")", "parse", "(", "FILE", ",", "fmt", ",", "subst", ".", "toArray", "(", ")", ")", ";", "}"], "memberFunctions": {"parseType": [["TypeNode", "String fmt", "Object... os"], ["TypeNode", "String fmt", "List<?> subst"]], "parseMember": [["ClassMember", "String fmt", "Object... os"], ["ClassMember", "String fmt", "List<?> subst"]], "parser": [["QQParser", "Lexer lexer", "TypeSystem ts", "NodeFactory nf", "ErrorQueue eq"]], "parseStmt": [["Stmt", "String fmt", "Object... os"], ["Stmt", "String fmt", "List<?> subst"]], "parseDecl": [["ClassDecl", "String fmt", "Object... os"], ["ClassDecl", "String fmt", "List<?> subst"]], "type_position": [["Position", "polyglot.types.TypeObject t"]], "parse": [["Node", "int kind", "String fmt", "Object... subst"]], "lexer": [["Lexer", "String fmt", "Position pos", "Object... subst"]], "parseExpr": [["Expr", "String fmt", "Object... os"], ["Expr", "String fmt", "List<?> subst"]]}, "className": "QQ", "renamed": ["SourceFile", "function", "(", "String", "arg0", ",", "List", "<", "?", ">", "arg1", ")", "{", "return", "(", "SourceFile", ")", "parse", "(", "FILE", ",", "arg0", ",", "arg1", ".", "toArray", "(", ")", ")", ";", "}"], "nl": "Parse a string into a  {@code SourceFile} AST node,applying substitutions.", "nlToks": ["Parse", "a", "string", "into", "a", "-LCB-", "@code", "SourceFile", "-RCB-", "AST", "node", ",", "applying", "substitutions", "."], "path": "polyglot-compiler/polyglot/tree/master/src/polyglot/qq/QQ.java", "idx": 1022}
{"memberVariables": {"mKeyCount": "int", "BUCKET_SIZE_BYTES=Constants.BYTES_IN_INTEGER + 1": "int", "mBuf": "ByteBuffer", "INDEX_HASHER_SEED=0x1311": "int", "FINGERPRINT_HASHER_SEED=0x7a91": "int", "FINGERPRINT_HASHER=Hashing.murmur3_32(FINGERPRINT_HASHER_SEED)": "HashFunction", "INDEX_HASHER=Hashing.murmur3_32(INDEX_HASHER_SEED)": "HashFunction", "mHashTableBuf": "ByteBuffer", "MAX_PROBES=50": "int", "mNumBuckets": "int"}, "code": ["int", "function", "(", "ByteBuffer", "key", ")", "{", "byte", "[", "]", "keyBytes", "=", "BufferUtils", ".", "newByteArrayFromByteBuffer", "(", "key", ")", ";", "return", "indexHash", "(", "keyBytes", ")", ";", "}"], "memberFunctions": {"keyCount": [["int"]], "keyIterator": [["Iterator<ByteBuffer>", "final PayloadReader reader"]], "bucketOffset": [["int", "ByteBuffer key", "PayloadReader reader"]], "createEmptyIndex": [["LinearProbingIndex"]], "loadFromByteArray": [["LinearProbingIndex", "ByteBuffer buffer"]], "byteCount": [["int"]], "get": [["ByteBuffer", "ByteBuffer key", "PayloadReader reader"]], "fingerprintHash": [["byte", "byte[] key"], ["byte", "ByteBuffer key"]], "nextKey": [["ByteBuffer", "ByteBuffer currentKey", "PayloadReader reader"]], "put": [["boolean", "byte[] key", "byte[] value", "PayloadWriter writer"]], "getBytes": [["byte[]"]]}, "className": "LinearProbingIndex", "renamed": ["int", "function", "(", "ByteBuffer", "arg0", ")", "{", "byte", "[", "]", "loc0", "=", "BufferUtils", ".", "newByteArrayFromByteBuffer", "(", "arg0", ")", ";", "return", "indexHash", "(", "loc0", ")", ";", "}"], "nl": "Hashes a key in  {@code ByteBuffer} to a bucket index in non-negative integer value.", "nlToks": ["Hashes", "a", "key", "in", "-LCB-", "@code", "ByteBuffer", "-RCB-", "to", "a", "bucket", "index", "in", "non-negative", "integer", "value", "."], "path": "poemlin/alluxio/tree/master/keyvalue/client/src/main/java/alluxio/client/keyvalue/LinearProbingIndex.java", "idx": 1023}
{"memberVariables": {"ext": "String", "addedDate": "Date", "rating": "int", "previousPlayCounter": "int", "ratingModifDate": "Date", "lastPlayed": "Date", "relativeFullPath": "String", "updateRatingModifDate=false": "boolean", "idPath": "int", "filename": "String", "deleted": "boolean", "BPM=0": "float", "relativePath": "String", "idFile": "int", "sourceName": "String", "playCounter": "int"}, "code": ["String", "function", "(", ")", "{", "return", "relativeFullPath", ";", "}"], "memberFunctions": {"getFormattedRatingModifDate": [["String"]], "setIdPath": [["void", "int idPath"]], "setAddedDate": [["void", "Date addedDate"]], "getSourceName": [["String"]], "equalsStats": [["boolean", "FileInfo thatFileInfo"]], "getIdFile": [["int"]], "compareTo": [["int", "Object o"]], "setFilename": [["void", "String filename"]], "setRelativePath": [["void", "String relativePath"]], "getPreviousPlayCounter": [["int"]], "isDeleted": [["boolean"]], "hashCode": [["int"]], "setPlayCounter": [["void", "int playCounter"]], "getLastPlayedLocalTime": [["String"]], "setBPM": [["void", "float BPM"]], "getAddedDateLocalTime": [["String"]], "getBPM": [["float"]], "setIdFile": [["void", "int idFile"]], "getAddedDate": [["Date"]], "getExt": [["String"]], "getRatingModifDate": [["Date"]], "setLastPlayed": [["void", "Date lastPlayed"]], "setRelativeFullPath": [["void", "String relativeFullPath"]], "setPath": [["void", "String relativeFullPath"]], "setSourceName": [["void", "String sourceName"]], "getFilename": [["String"]], "getFormattedLastPlayed": [["String"]], "getLastPlayed": [["Date"]], "equals": [["boolean", "Object obj"]], "clone": [["Object"]], "toString": [["String"]], "setUpdateRatingModifDate": [["void", "boolean updateRatingModifDate"]], "getIdPath": [["int"]], "getRelativePath": [["String"]], "setRating": [["void", "int rating"]], "getPlayCounter": [["int"]], "getFormattedAddedDate": [["String"]], "getRating": [["int"]]}, "className": "FileInfo", "renamed": ["String", "function", "(", ")", "{", "return", "relativeFullPath", ";", "}"], "nl": "Get the relative full path", "nlToks": ["Get", "the", "relative", "full", "path"], "path": "phramusca/JaMuz/tree/master/src/jamuz/FileInfo.java", "idx": 1024}
{"memberVariables": {"ruleSets=new ArrayList<>()": "List<RuleSet>", "ruleChain=new RuleChain()": "RuleChain"}, "code": ["boolean", "function", "(", "Language", "language", ")", "{", "for", "(", "RuleSet", "ruleSet", ":", "ruleSets", ")", "{", "if", "(", "ruleSet", ".", "usesTypeResolution", "(", "language", ")", ")", "{", "return", "true", ";", "}", "}", "return", "false", ";", "}"], "memberFunctions": {"apply": [["void", "List<Node> acuList", "RuleContext ctx", "Language language"]], "start": [["void", "RuleContext ctx"]], "usesDFA": [["boolean", "Language language"]], "getRuleByName": [["Rule", "String ruleName"]], "getAllRuleSets": [["RuleSet[]"]], "usesMetrics": [["boolean", "Language language"]], "getChecksum": [["long"]], "addRuleSet": [["void", "RuleSet ruleSet"]], "ruleCount": [["int"]], "applies": [["boolean", "File file"]], "getRuleSetsIterator": [["Iterator<RuleSet>"]], "end": [["void", "RuleContext ctx"]], "removeDysfunctionalRules": [["void", "Collection<Rule> collector"]], "getAllRules": [["Set<Rule>"]]}, "className": "RuleSets", "renamed": ["boolean", "function", "(", "Language", "arg0", ")", "{", "for", "(", "RuleSet", "loc0", ":", "ruleSets", ")", "{", "if", "(", "loc0", ".", "usesTypeResolution", "(", "arg0", ")", ")", "{", "return", "true", ";", "}", "}", "return", "false", ";", "}"], "nl": "Does any Rule for the given Language use Type Resolution?", "nlToks": ["Does", "any", "Rule", "for", "the", "given", "Language", "use", "Type", "Resolution", "?"], "path": "adangel/pmd/tree/master/pmd-core/src/main/java/net/sourceforge/pmd/RuleSets.java", "idx": 1026}
{"memberVariables": {"executionEndDateTime": "String", "build": "String", "browser": "String", "projectName": "String", "executionStartDateTime": "String", "value": "String", "url": "String", "TotalDuration": "String"}, "code": ["void", "function", "(", "String", "value", ")", "{", "this", ".", "build", "=", "value", ";", "}"], "memberFunctions": {"getProjectName": [["String"]], "getBuild": [["String"]], "getExecutionStartDateTime": [["String"]], "setExecutionEndDateTime": [["void", "String value"]], "getExecutionEndDateTime": [["String"]], "setUrl": [["void", "String value"]], "getValue": [["String"]], "setProjectName": [["void", "String value"]], "getUrl": [["String"]], "getTotalDuration": [["String"]], "setValue": [["void", "String value"]], "setTotalDuration": [["void", "String totalDuration"]], "setBrowser": [["void", "String value"]], "setExecutionStartDateTime": [["void", "String value"]], "getBrowser": [["String"]]}, "className": "Config", "renamed": ["void", "function", "(", "String", "arg0", ")", "{", "this", ".", "build", "=", "arg0", ";", "}"], "nl": "Sets the value of the Build property.", "nlToks": ["Sets", "the", "value", "of", "the", "Build", "property", "."], "path": "prabalbsws/selenium_automation/tree/master/src/newpojo/Config.java", "idx": 1027}
{"memberVariables": {}, "code": ["Bitmap", "function", "(", "Bitmap", "img", ")", "{", "Bitmap", "imgz", "=", "Bitmap", ".", "createScaledBitmap", "(", "img", ",", "getDims", "(", ")", "[", "0", "]", ",", "getDims", "(", ")", "[", "1", "]", ",", "true", ")", ";", "return", "imgz", ";", "}"], "memberFunctions": {"StringToBitMap": [["Bitmap", "String encodedString"]], "erase": [["void", "Bitmap img"]], "getMorph": [["Bitmap", "Bitmap i1", "Bitmap i2", "double percentage"]], "isGood": [["boolean", "Bitmap img"]], "shareImage": [["Intent", "Bitmap img", "String path"]], "decodeSampledBitmapFromResource": [["Bitmap", "String path", "int reqWidth", "int reqHeight"]], "BitMapToString": [["String", "Bitmap bitmap"]], "rescaleThumb": [["Bitmap", "String path"], ["Bitmap", "Bitmap img"]], "fakeMove": [["void", "SeekBar slider"]], "hasBackground": [["boolean"]], "createMessage": [["TextView", "TextView message", "int resId"]], "getEmail": [["Intent"]], "getImageUri": [["Uri", "Context inContext", "Bitmap inImage"]], "switchDims": [["void"]], "calculateInSampleSize": [["int", "BitmapFactory.Options options", "int reqWidth", "int reqHeight"]], "hasForeground": [["boolean"]], "getDims": [["int[]"]]}, "className": "Actions", "renamed": ["Bitmap", "function", "(", "Bitmap", "arg0", ")", "{", "Bitmap", "loc0", "=", "Bitmap", ".", "createScaledBitmap", "(", "arg0", ",", "getDims", "(", ")", "[", "0", "]", ",", "getDims", "(", ")", "[", "1", "]", ",", "true", ")", ";", "return", "loc0", ";", "}"], "nl": "Rescales the image to ideal with and height", "nlToks": ["Rescales", "the", "image", "to", "ideal", "with", "and", "height"], "path": "picklelo/morph/tree/master/Morph/src/Actions.java", "idx": 1032}
{"memberVariables": {"gson=new Gson()": "Gson", "logger=LoggerFactory.getLogger(JsonUtils.class)": "Logger"}, "code": ["JWSAlgorithm", "function", "(", "JsonObject", "o", ",", "String", "member", ")", "{", "String", "s", "=", "getAsString", "(", "o", ",", "member", ")", ";", "if", "(", "s", "!=", "null", ")", "{", "return", "JWSAlgorithm", ".", "parse", "(", "s", ")", ";", "}", "else", "{", "return", "null", ";", "}", "}"], "memberFunctions": {"getAsArray": [["JsonElement", "Set<String> value"], ["JsonElement", "Set<String> value", "boolean preserveEmpty"]], "readMap": [["Map", "JsonReader reader"]], "getAsDate": [["Date", "JsonObject o", "String member"]], "getAsEncryptionMethodList": [["List<EncryptionMethod>", "JsonObject o", "String member"]], "readSet": [["Set", "JsonReader reader"]], "getAsString": [["String", "JsonObject o", "String member"]], "getAsJweEncryptionMethod": [["EncryptionMethod", "JsonObject o", "String member"]], "getAsStringSet": [["Set<String>", "JsonObject o", "String member"]], "getAsJweAlgorithmList": [["List<JWEAlgorithm>", "JsonObject o", "String member"]], "writeNullSafeArray": [["void", "JsonWriter writer", "Set<String> items"]], "getAsLong": [["Long", "JsonObject o", "String member"]], "getAsBoolean": [["Boolean", "JsonObject o", "String member"]], "getAsJweAlgorithm": [["JWEAlgorithm", "JsonObject o", "String member"]], "getAsJwsAlgorithmList": [["List<JWSAlgorithm>", "JsonObject o", "String member"]], "getAsStringList": [["List<String>", "JsonObject o", "String member"]]}, "className": "JsonUtils", "renamed": ["JWSAlgorithm", "function", "(", "JsonObject", "arg0", ",", "String", "arg1", ")", "{", "String", "loc0", "=", "getAsString", "(", "arg0", ",", "arg1", ")", ";", "if", "(", "loc0", "!=", "null", ")", "{", "return", "JWSAlgorithm", ".", "parse", "(", "loc0", ")", ";", "}", "else", "{", "return", "null", ";", "}", "}"], "nl": "Gets the value of the given member as a JWS Algorithm, null if it doesn't exist", "nlToks": ["Gets", "the", "value", "of", "the", "given", "member", "as", "a", "JWS", "Algorithm", ",", "null", "if", "it", "does", "n't", "exist"], "path": "adilansari/OpenID-Connect-Java-Spring-Server/tree/master/openid-connect-common/src/main/java/org/mitre/util/JsonUtils.java", "idx": 1033}
{"memberVariables": {"BIP39_ENGLISH_SHA256=\"ad90bf3beb7b0eb7e5acd74727dc0da96e0a280a258354e7293fb7e211ac03db\"": "String", "wordList": "ArrayList<String>", "PBKDF2_ROUNDS=4096": "int"}, "code": ["byte", "[", "]", "function", "(", "List", "<", "String", ">", "words", ",", "String", "passphrase", ")", "{", "String", "pass", "=", "Joiner", ".", "on", "(", "' '", ")", ".", "join", "(", "words", ")", ";", "String", "salt", "=", "\"mnemonic\"", "+", "passphrase", ";", "return", "PBKDF2SHA512", ".", "derive", "(", "pass", ",", "salt", ",", "PBKDF2_ROUNDS", ",", "64", ")", ";", "}"], "memberFunctions": {"toMnemonic": [["List<String>", "byte[] entropy"]], "bytesToBits": [["boolean[]", "byte[] data"]], "toEntropy": [["byte[]", "List<String> words"]], "check": [["void", "List<String> words"]]}, "className": "MnemonicCode", "renamed": ["byte", "[", "]", "function", "(", "List", "<", "String", ">", "arg0", ",", "String", "arg1", ")", "{", "String", "loc0", "=", "Joiner", ".", "on", "(", "' '", ")", ".", "join", "(", "arg0", ")", ";", "String", "loc1", "=", "\"srini_string\"", "+", "arg1", ";", "return", "PBKDF2SHA512", ".", "derive", "(", "loc0", ",", "loc1", ",", "PBKDF2_ROUNDS", ",", "64", ")", ";", "}"], "nl": "Convert mnemonic word list to seed.", "nlToks": ["Convert", "mnemonic", "word", "list", "to", "seed", "."], "path": "plncoin/plncoin-and/tree/master/plncoinj/core/src/main/java/com/google/bitcoin/crypto/MnemonicCode.java", "idx": 1034}
{"memberVariables": {"testData": "String", "method": "String", "filepath": "String", "step": "String", "stepResult": "String", "time": "String"}, "code": ["void", "function", "(", "String", "value", ")", "{", "this", ".", "testData", "=", "value", ";", "}"], "memberFunctions": {"setMethod": [["void", "String value"]], "setStepResult": [["void", "String value"]], "setFilepath": [["void", "String value"]], "getTime": [["String"]], "getStep": [["String"]], "getFilepath": [["String"]], "getTestData": [["String"]], "getMethod": [["String"]], "getStepResult": [["String"]], "setStep": [["void", "String value"]], "setTime": [["void", "String value"]]}, "className": "Steps", "renamed": ["void", "function", "(", "String", "arg0", ")", "{", "this", ".", "testData", "=", "arg0", ";", "}"], "nl": "Sets the value of the testData property.", "nlToks": ["Sets", "the", "value", "of", "the", "testData", "property", "."], "path": "prabalbsws/selenium_automation/tree/master/src/newpojo/Steps.java", "idx": 1035}
{"memberVariables": {"m_turnClient": "TcpTurnClient", "m_controlling": "boolean", "m_log=LoggerFactory.getLogger(getClass())": "Logger", "m_encodedCandidates": "ByteBuffer", "m_offerAnswerListener": "OfferAnswerListener"}, "code": ["void", "function", "(", ")", "{", "this", ".", "m_turnClient", ".", "connect", "(", ")", ";", "}"], "memberFunctions": {"processOffer": [["void", "final ByteBuffer offer"]], "gatherCandidates": [["Collection<? extends IceCandidate>"]], "connectToCandidate": [["void", "final IceCandidate candidate"]], "getPublicAdress": [["InetAddress"]], "processRemoteCandidates": [["void", "final ByteBuffer encodedCandidates"]], "useRelay": [["void"]], "closeTcp": [["void"]], "closeUdp": [["void"]], "generateOffer": [["byte[]"]], "processAnswer": [["void", "final ByteBuffer answer"]], "close": [["void"]], "generateAnswer": [["byte[]"]]}, "className": "TcpTurnOfferAnswer", "renamed": ["void", "function", "(", ")", "{", "this", ".", "m_turnClient", ".", "connect", "(", ")", ";", "}"], "nl": "Connects to the TURN server", "nlToks": ["Connects", "to", "the", "TURN", "server"], "path": "adamfisk/littleshoot-client/tree/master/common/ice/src/main/java/org/lastbamboo/common/ice/TcpTurnOfferAnswer.java", "idx": 1036}
{"memberVariables": {"NANOCOINS_PER_COIN=100000000": "int", "INTENT_EXTRA_TRANSACTION_HASH=\"transaction_hash\"": "String", "INTENT_EXTRA_TRANSACTION_HASH_OLD=\"transaction_id\"": "String"}, "code": ["void", "function", "(", "final", "Activity", "activity", ",", "final", "int", "requestCode", ",", "final", "String", "address", ")", "{", "final", "Intent", "intent", "=", "makeIntent", "(", "address", ",", "null", ")", ";", "startForResult", "(", "activity", ",", "requestCode", ",", "intent", ")", ";", "}"], "memberFunctions": {"request": [["void", "final Context context", "final String address"], ["void", "final Context context", "final String address", "final long amount"]], "transactionHashToResult": [["void", "final Intent result", "final String txHash"]], "startForResult": [["void", "final Activity activity", "final int requestCode", "final Intent intent"]], "transactionHashFromResult": [["String", "final Intent result"]], "makeIntent": [["Intent", "final String address", "final Long amount"]], "redirectToDownload": [["void", "final Context context"]], "start": [["void", "final Context context", "final Intent intent"]]}, "className": "BitcoinIntegration", "renamed": ["void", "function", "(", "final", "Activity", "arg0", ",", "final", "int", "arg1", ",", "final", "String", "arg2", ")", "{", "final", "Intent", "loc0", "=", "makeIntent", "(", "arg2", ",", "null", ")", ";", "startForResult", "(", "arg0", ",", "arg1", ",", "loc0", ")", ";", "}"], "nl": "Request any amount of Bitcoins (probably a donation) from user, with feedback from the app. Result intent can be received by overriding  {@link android.app.Activity#onActivityResult()}. Result indicates either {@link Activity#RESULT_OK} or {@link Activity#RESULT_CANCELED}. In the success case, use {@link #transactionHashFromResult(Intent)} to read the transaction hash from the intent.Warning: A success indication is no guarantee! To be on the safe side, you must drive your own Bitcoin infrastructure and validate the transaction.", "nlToks": ["Request", "any", "amount", "of", "Bitcoins", "-LRB-", "probably", "a", "donation", "-RRB-", "from", "user", ",", "with", "feedback", "from", "the", "app", ".", "Result", "intent", "can", "be", "received", "by", "overriding", "-LCB-", "@link", "android.app.Activity", "#onActivityResult", "-LRB-", "-RRB-", "-RCB-", ".", "Result", "indicates", "either", "-LCB-", "@link", "Activity", "#RESULT_OK", "-RCB-", "or", "-LCB-", "@link", "Activity", "#RESULT_CANCELED", "-RCB-", ".", "In", "the", "success", "case", ",", "use", "-LCB-", "@link", "#transactionHashFromResult", "-LRB-", "Intent", "-RRB-", "-RCB-", "to", "read", "the", "transaction", "hash", "from", "the", "intent.Warning", ":", "A", "success", "indication", "is", "no", "guarantee", "!", "To", "be", "on", "the", "safe", "side", ",", "you", "must", "drive", "your", "own", "Bitcoin", "infrastructure", "and", "validate", "the", "transaction", "."], "path": "plncoin/plncoin-and/tree/master/plncoin-android-wallet/integration-android/src/de/schildbach/wallet/integration/android/BitcoinIntegration.java", "idx": 1039}
{"memberVariables": {"EXAMPLE=\"$GPRMB,A,0.00,R,,RUSKI,5536.200,N,01436.500,E,432.3,234.9,,V*58\"": "String", "rmb": "RMBSentence", "empty": "RMBSentence"}, "code": ["void", "function", "(", ")", "{", "final", "double", "v", "=", "40.66666", ";", "rmb", ".", "setVelocity", "(", "v", ")", ";", "assertTrue", "(", "rmb", ".", "toString", "(", ")", ".", "contains", "(", "\",40.7,\"", ")", ")", ";", "assertEquals", "(", "v", ",", "rmb", ".", "getVelocity", "(", ")", ",", "0.1", ")", ";", "}"], "memberFunctions": {"testGetVelocity": [["void"]], "testGetCrossTrackError": [["void"]], "testArrivalStatus": [["void"]], "testSetDestination": [["void"]], "testSetBearing": [["void"]], "testSetSteerToWithNull": [["void"]], "testSetOriginId": [["void"]], "testSetStatus": [["void"]], "testConstructor": [["void"]], "testGetBearing": [["void"]], "testSetBearingWithNegativeValue": [["void"]], "testSetSteerTo": [["void"]], "testGetSteerTo": [["void"]], "testGetOriginId": [["void"]], "testSetVelocityWithNegativeValue": [["void"]], "setUp": [["void"]], "testGetStatus": [["void"]], "testSetBearingWithValueGreaterThanAllowed": [["void"]], "testGetRange": [["void"]], "testSetRange": [["void"]], "testGetDestination": [["void"]], "testSetCrossTrackError": [["void"]]}, "className": "RMBTest", "renamed": ["void", "function", "(", ")", "{", "final", "double", "loc0", "=", "40.66666", ";", "rmb", ".", "setVelocity", "(", "loc0", ")", ";", "assertTrue", "(", "rmb", ".", "toString", "(", ")", ".", "contains", "(", "\"srini_string\"", ")", ")", ";", "assertEquals", "(", "loc0", ",", "rmb", ".", "getVelocity", "(", ")", ",", "0.1", ")", ";", "}"], "nl": "Test method for {@link net.sf.marineapi.nmea.parser.RMBParser#setVelocity()}.", "nlToks": ["Test", "method", "for", "-LCB-", "@link", "net.sf.marineapi.nmea.parser.RMBParser", "#setVelocity", "-LRB-", "-RRB-", "-RCB-", "."], "path": "pkoziol/marine-api/tree/master/src/test/java/net/sf/marineapi/nmea/parser/RMBTest.java", "idx": 1043}
{"memberVariables": {"mManager": "RecyclerView.LayoutManager", "auto_disable_loadmore=false": "boolean", "page_now=1": "int", "listview": "UltimateRecyclerView", "noad": "EASY", "withad": "ADMOB", "refresh_default=new Runnable(){\n  @Override public void run(){\n    reset();\n    if (loading_more != null) {\n      final boolean success_onStart=loading_more.request_start(1,0,0,BiAdAdapterSwitcher.this,true);\n      if (success_onStart) {\n        page_now=2;\n        max_pages=3;\n      }\n else {\n        if (auto_disable_loadmore)         listview.disableLoadmore();\n      }\n    }\n    listview.setRefreshing(false);\n  }\n}\n": "Runnable", "loading_more": "onLoadMore", "with_the_ad": "boolean", "max_pages=3": "int", "layoutLoadMoreResId=0": "int", "container_data_items": "int"}, "code": ["BiAdAdapterSwitcher", "function", "(", "final", "int", "delay_trigger", ")", "{", "listview", ".", "setDefaultOnRefreshListener", "(", "new", "SwipeRefreshLayout", ".", "OnRefreshListener", "(", ")", "{", "@", "Override", "public", "void", "onRefresh", "(", ")", "{", "new", "Handler", "(", ")", ".", "postDelayed", "(", "refresh_default", ",", "delay_trigger", ")", ";", "}", "}", ")", ";", "return", "this", ";", "}"], "memberFunctions": {"init": [["void", "final boolean adenabled"]], "request_start": [["boolean", "int current_page_no", "int itemsCount", "final int maxLastVisiblePosition", "final BiAdAdapterSwitcher this_module", "final boolean onRefresh"]], "onEnableLoadmore": [["BiAdAdapterSwitcher", "final @LayoutRes int layoutResId", "final int delay_trigger", "final onLoadMore loading_more_trigger_interface"]], "run": [["void"]], "setMaxPages": [["void", "final int n"]], "EnableAutoDisableLoadMoreByMaxPages": [["BiAdAdapterSwitcher"]], "load_more_data_at_zero": [["void", "final List<T> new_data_list"]], "emptyViewControl": [["void"]], "load_more_data": [["void", "final List<T> new_data_list"]], "setCustomOnFresh": [["BiAdAdapterSwitcher", "Runnable h"]], "getV": [["View", "final @LayoutRes int layoutResId"]], "removeALL": [["void"]], "scrollToTop": [["void"]], "notifyDataSetChanged": [["void"]], "maximum_size": [["void", "LinearLayout l", "V suppose_tobe_Adview", "Activity activity"]], "reset": [["void"]], "insert_default": [["void", "EASY sd", "List<T> list"], ["void", "ADMOB sd", "List<T> list"]]}, "className": "BiAdAdapterSwitcher", "renamed": ["BiAdAdapterSwitcher", "function", "(", "final", "int", "arg0", ")", "{", "listview", ".", "setDefaultOnRefreshListener", "(", "new", "SwipeRefreshLayout", ".", "OnRefreshListener", "(", ")", "{", "@", "Override", "public", "void", "onRefresh", "(", ")", "{", "new", "Handler", "(", ")", ".", "postDelayed", "(", "refresh_default", ",", "arg0", ")", ";", "}", "}", ")", ";", "return", "this", ";", "}"], "nl": "will implement more functions later", "nlToks": ["will", "implement", "more", "functions", "later"], "path": "prashant31191/UltimateRecyclerView/tree/master/UltimateRecyclerView/ultimaterecyclerview/src/main/java/com/marshalchen/ultimaterecyclerview/quickAdapter/BiAdAdapterSwitcher.java", "idx": 1044}
{"memberVariables": {"COMMITTED_BLOCKS_NUM=10L": "long", "TEST_SESSION_ID=33L": "long", "mBlockStoreMeta": "BlockStoreMeta", "mBlockStoreMetaFull": "BlockStoreMeta", "TEST_BLOCK_SIZE=200L": "long", "mMetadataManager": "BlockMetadataManager", "mTestFolder=new TemporaryFolder()": "TemporaryFolder"}, "code": ["void", "function", "(", ")", "{", "Map", "<", "String", ",", "Long", ">", "expectedCapacityBytesOnTiers", "=", "ImmutableMap", ".", "of", "(", "\"MEM\"", ",", "5000L", ",", "\"SSD\"", ",", "60000L", ")", ";", "Assert", ".", "assertEquals", "(", "expectedCapacityBytesOnTiers", ",", "mBlockStoreMeta", ".", "getCapacityBytesOnTiers", "(", ")", ")", ";", "}"], "memberFunctions": {"getUsedBytesOnTiers": [["void"]], "before": [["void"]], "getCapacityBytesOnDirs": [["void"]], "getUsedBytes": [["void"]], "getNumberOfBlocks": [["void"]], "getCapacityBytes": [["void"]], "getUsedBytesOnDirs": [["void"]], "getBlockList": [["void"]]}, "className": "BlockStoreMetaTest", "renamed": ["void", "function", "(", ")", "{", "Map", "<", "String", ",", "Long", ">", "loc0", "=", "ImmutableMap", ".", "of", "(", "\"srini_string\"", ",", "5000L", ",", "\"srini_string\"", ",", "60000L", ")", ";", "Assert", ".", "assertEquals", "(", "loc0", ",", "mBlockStoreMeta", ".", "getCapacityBytesOnTiers", "(", ")", ")", ";", "}"], "nl": "Tests the  {@link BlockStoreMeta#getCapacityBytesOnTiers()} method.", "nlToks": ["Tests", "the", "-LCB-", "@link", "BlockStoreMeta", "#getCapacityBytesOnTiers", "-LRB-", "-RRB-", "-RCB-", "method", "."], "path": "poemlin/alluxio/tree/master/core/server/src/test/java/alluxio/worker/block/BlockStoreMetaTest.java", "idx": 1046}
{"memberVariables": {"x11FakeCookie=null": "String", "flag_x11_requested=false": "boolean", "flag_closed=false": "boolean", "flag_pty_requested=false": "boolean", "rnd": "SecureRandom", "cm": "ChannelManager", "cn": "Channel", "flag_execution_started=false": "boolean"}, "code": ["Integer", "function", "(", ")", "{", "return", "cn", ".", "getExitStatus", "(", ")", ";", "}"], "memberFunctions": {"execCommand": [["void", "String cmd"]], "requestDumbPTY": [["void"]], "requestX11Forwarding": [["void", "String hostname", "int port", "byte[] cookie", "boolean singleConnection"]], "startSubSystem": [["void", "String name"]], "startShell": [["void"]], "getStdout": [["InputStream"]], "getExitSignal": [["String"]], "requestPTY": [["void", "String term"], ["void", "String term", "int term_width_characters", "int term_height_characters", "int term_width_pixels", "int term_height_pixels", "byte[] terminal_modes"]], "waitForCondition": [["int", "int condition_set", "long timeout"]], "waitUntilDataAvailable": [["int", "long timeout"]], "getStdin": [["OutputStream"]], "close": [["void"]], "getStderr": [["InputStream"]]}, "className": "Session", "renamed": ["Integer", "function", "(", ")", "{", "return", "cn", ".", "getExitStatus", "(", ")", ";", "}"], "nl": "Get the exit code/status from the remote command - if available. Be careful - not all server implementations return this value. It is generally a good idea to call this method only when all data from the remote side has been consumed (see also the  method).", "nlToks": ["Get", "the", "exit", "code/status", "from", "the", "remote", "command", "-", "if", "available", ".", "Be", "careful", "-", "not", "all", "server", "implementations", "return", "this", "value", ".", "It", "is", "generally", "a", "good", "idea", "to", "call", "this", "method", "only", "when", "all", "data", "from", "the", "remote", "side", "has", "been", "consumed", "-LRB-", "see", "also", "the", "method", "-RRB-", "."], "path": "pooyanjamshidi/BO4CO/tree/master/src/external/libs/ssh2/ssh2v2/ganymed-ssh2-build250/src/ch/ethz/ssh2/Session.java", "idx": 1048}
{"memberVariables": {"systemProxyConfiguration": "HTTPClientPolicy", "HTTP_NON_PROXY_HOSTS=\"http.nonProxyHosts\"": "String", "HTTP_PROXY_PORT=\"http.proxyPort\"": "String", "HTTP_PROXY_HOST=\"http.proxyHost\"": "String"}, "code": ["Proxy", "function", "(", "final", "HTTPClientPolicy", "policy", ",", "final", "String", "hostname", ")", "{", "if", "(", "policy", ".", "isSetNonProxyHosts", "(", ")", ")", "{", "Pattern", "pattern", "=", "PatternBuilder", ".", "build", "(", "policy", ".", "getNonProxyHosts", "(", ")", ")", ";", "if", "(", "pattern", ".", "matcher", "(", "hostname", ")", ".", "matches", "(", ")", ")", "{", "return", "Proxy", ".", "NO_PROXY", ";", "}", "}", "return", "createProxy", "(", "policy", ")", ";", "}"], "memberFunctions": {"createProxy": [["Proxy", "HTTPClientPolicy policy", "URI currentUrl"], ["Proxy", "final HTTPClientPolicy policy"]], "createSystemProxyConfiguration": [["HTTPClientPolicy"]], "getSystemProxy": [["Proxy", "String hostname"]]}, "className": "ProxyFactory", "renamed": ["Proxy", "function", "(", "final", "HTTPClientPolicy", "arg0", ",", "final", "String", "arg1", ")", "{", "if", "(", "arg0", ".", "isSetNonProxyHosts", "(", ")", ")", "{", "Pattern", "loc0", "=", "PatternBuilder", ".", "build", "(", "arg0", ".", "getNonProxyHosts", "(", ")", ")", ";", "if", "(", "loc0", ".", "matcher", "(", "arg1", ")", ".", "matches", "(", ")", ")", "{", "return", "Proxy", ".", "NO_PROXY", ";", "}", "}", "return", "createProxy", "(", "arg0", ")", ";", "}"], "nl": "Honor the nonProxyHosts property value (if set).", "nlToks": ["Honor", "the", "nonProxyHosts", "property", "value", "-LRB-", "if", "set", "-RRB-", "."], "path": "primesign/cxf/tree/master/rt/transports/http/src/main/java/org/apache/cxf/transport/http/ProxyFactory.java", "idx": 1049}
{"memberVariables": {"protocol_": "TProtocol", "trans_": "TMemoryInputTransport"}, "code": ["void", "function", "(", "TBase", "base", ",", "byte", "[", "]", "bytes", ",", "int", "offset", ",", "int", "length", ")", "{", "try", "{", "trans_", ".", "reset", "(", "bytes", ",", "offset", ",", "length", ")", ";", "base", ".", "read", "(", "protocol_", ")", ";", "}", "finally", "{", "trans_", ".", "clear", "(", ")", ";", "protocol_", ".", "reset", "(", ")", ";", "}", "}"], "memberFunctions": {"partialDeserializeI64": [["Long", "byte[] bytes", "TFieldIdEnum fieldIdPathFirst", "TFieldIdEnum... fieldIdPathRest"]], "partialDeserializeByte": [["Byte", "byte[] bytes", "TFieldIdEnum fieldIdPathFirst", "TFieldIdEnum... fieldIdPathRest"]], "partialDeserializeI32": [["Integer", "byte[] bytes", "TFieldIdEnum fieldIdPathFirst", "TFieldIdEnum... fieldIdPathRest"]], "partialDeserializeSetFieldIdInUnion": [["Short", "byte[] bytes", "TFieldIdEnum fieldIdPathFirst", "TFieldIdEnum... fieldIdPathRest"]], "partialDeserializeByteArray": [["ByteBuffer", "byte[] bytes", "TFieldIdEnum fieldIdPathFirst", "TFieldIdEnum... fieldIdPathRest"]], "partialDeserializeField": [["Object", "byte ttype", "byte[] bytes", "TFieldIdEnum fieldIdPathFirst", "TFieldIdEnum... fieldIdPathRest"]], "partialDeserializeBool": [["Boolean", "byte[] bytes", "TFieldIdEnum fieldIdPathFirst", "TFieldIdEnum... fieldIdPathRest"]], "partialDeserialize": [["void", "TBase tb", "byte[] bytes", "TFieldIdEnum fieldIdPathFirst", "TFieldIdEnum... fieldIdPathRest"]], "partialDeserializeDouble": [["Double", "byte[] bytes", "TFieldIdEnum fieldIdPathFirst", "TFieldIdEnum... fieldIdPathRest"]], "partialDeserializeI16": [["Short", "byte[] bytes", "TFieldIdEnum fieldIdPathFirst", "TFieldIdEnum... fieldIdPathRest"]], "partialDeserializeString": [["String", "byte[] bytes", "TFieldIdEnum fieldIdPathFirst", "TFieldIdEnum... fieldIdPathRest"]], "fromString": [["void", "TBase base", "String data"]], "locateField": [["TField", "byte[] bytes", "TFieldIdEnum fieldIdPathFirst", "TFieldIdEnum... fieldIdPathRest"]]}, "className": "TDeserializer", "renamed": ["void", "function", "(", "TBase", "arg0", ",", "byte", "[", "]", "arg1", ",", "int", "arg2", ",", "int", "arg3", ")", "{", "try", "{", "trans_", ".", "reset", "(", "arg1", ",", "arg2", ",", "arg3", ")", ";", "arg0", ".", "read", "(", "protocol_", ")", ";", "}", "finally", "{", "trans_", ".", "clear", "(", ")", ";", "protocol_", ".", "reset", "(", ")", ";", "}", "}"], "nl": "Deserialize the Thrift object from a byte array.", "nlToks": ["Deserialize", "the", "Thrift", "object", "from", "a", "byte", "array", "."], "path": "adityayadav76/internet_of_things_simulator/tree/master/AutoSIM-Automatski/src/org/apache/thrift/TDeserializer.java", "idx": 1050}
{"memberVariables": {"TAG_CONTENT_PRINT=\"%s:%s.%s:%d\"": "String", "sIsLogEnabled=true": "boolean", "sApplicationTag=\"Chen\"": "String"}, "code": ["void", "function", "(", "Exception", "exception", ",", "String", "string", ")", "{", "if", "(", "sIsLogEnabled", ")", "{", "Log", ".", "e", "(", "sApplicationTag", ",", "getContent", "(", "getCurrentStackTraceElement", "(", ")", ")", "+", "\" >\"", "+", "exception", ".", "getMessage", "(", ")", "+", "\" >\"", "+", "exception", ".", "getStackTrace", "(", ")", "+", "\"   \"", "+", "string", ")", ";", "exception", ".", "printStackTrace", "(", ")", ";", "}", "}"], "memberFunctions": {"getCurrentStackTraceElement": [["StackTraceElement"]], "getTagContentPrint": [["String"]], "d": [["void", "String tag", "String msg"], ["void", "String msg"], ["void", "String message", "Object... args"]], "getContent": [["String", "StackTraceElement trace"]], "i": [["void", "String tag", "String msg"], ["void", "String msg"]], "getsApplicationTag": [["String"]], "setsIsLogEnabled": [["void", "boolean sIsLogEnabled"]], "issIsLogEnabled": [["boolean"]], "trace": [["void"]], "v": [["void", "String msg"]], "w": [["void", "String tag", "String msg"], ["void", "String msg"]], "getContents": [["String", "StackTraceElement trace"]], "traceStack": [["void"], ["void", "String tag", "int priority"]], "setsApplicationTag": [["void", "String sApplicationTag"]]}, "className": "URLogs", "renamed": ["void", "function", "(", "Exception", "arg0", ",", "String", "arg1", ")", "{", "if", "(", "sIsLogEnabled", ")", "{", "Log", ".", "e", "(", "sApplicationTag", ",", "getContent", "(", "getCurrentStackTraceElement", "(", ")", ")", "+", "\"srini_string\"", "+", "arg0", ".", "getMessage", "(", ")", "+", "\"srini_string\"", "+", "arg0", ".", "getStackTrace", "(", ")", "+", "\"srini_string\"", "+", "arg1", ")", ";", "arg0", ".", "printStackTrace", "(", ")", ";", "}", "}"], "nl": "Send an ERROR log message.", "nlToks": ["Send", "an", "ERROR", "log", "message", "."], "path": "prashant31191/UltimateRecyclerView/tree/master/UltimateRecyclerView/ultimaterecyclerview/src/main/java/com/marshalchen/ultimaterecyclerview/URLogs.java", "idx": 1051}
{"memberVariables": {"callbackHandler": "CallbackHandler", "LOG=LogUtils.getL7dLogger(SAMLRealm.class)": "Logger", "signatureCrypto": "Crypto", "signatureProperties": "SignatureProperties", "callbackHandlerClass": "String", "signaturePropertiesFile": "String", "signatureAlias": "String", "issuer": "String"}, "code": ["String", "function", "(", ")", "{", "return", "signatureAlias", ";", "}"], "memberFunctions": {"getIssuer": [["String"]], "setSignatureCrypto": [["void", "Crypto signatureCrypto"]], "setCallbackHandlerClass": [["void", "String callbackHandlerClass"]], "setIssuer": [["void", "String issuer"]], "getSignatureCrypto": [["Crypto"]], "getCallbackHandler": [["CallbackHandler"]], "getSignatureProperties": [["SignatureProperties"]], "setSignatureAlias": [["void", "String signatureAlias"]], "setSignaturePropertiesFile": [["void", "String signaturePropertiesFile"]], "setSignatureProperties": [["void", "SignatureProperties signatureProperties"]], "setCallbackHandler": [["void", "CallbackHandler callbackHandler"]]}, "className": "SAMLRealm", "renamed": ["String", "function", "(", ")", "{", "return", "signatureAlias", ";", "}"], "nl": "Get the signature alias to use for this SAML realm", "nlToks": ["Get", "the", "signature", "alias", "to", "use", "for", "this", "SAML", "realm"], "path": "primesign/cxf/tree/master/services/sts/sts-core/src/main/java/org/apache/cxf/sts/token/realm/SAMLRealm.java", "idx": 1052}
{"memberVariables": {"mockServerMessage=mock(ServerMessage.class)": "ServerMessage", "mockServerSession=mock(ServerSession.class)": "ServerSession", "testEventProperties": "HashMap<String,Object>", "MOCK_SESSION_ID=\"1234-5678-9012-3456\"": "String", "notificationController": "NotificationController"}, "code": ["void", "function", "(", ")", "{", "testEventProperties", ".", "put", "(", "Notification", ".", "NOTIFICATION_KEY_APPLICATION", ",", "\"\"", ")", ";", "notificationController", ".", "handleEvent", "(", "new", "Event", "(", "Notification", ".", "NOTIFICATION_TOPIC_BROADCAST", ",", "testEventProperties", ")", ")", ";", "}"], "memberFunctions": {"testHandleEventThrowsIllegalArgumentExceptionOnEmptyUser": [["void"]], "testDeregisterUserSessionWithNullServerSessonThrowsException": [["void"]], "testDeregisterUserSessionWithNullServerSessionIdThrowsException": [["void"]], "testHandleEventThrowsIllegalArgumentExceptionOnNullTitle": [["void"]], "testGetServerSessionByUserId": [["void"]], "tearDown": [["void"]], "testHandleEventThrowsIllegalArgumentExceptionOnEmptyTitle": [["void"]], "testDeletePersistentNotificationThrowsIllegalArgumentOnNullServerSession": [["void"]], "testDeregisterUserSessionRemovesUserFromKnownClients": [["void"]], "testHandleEventThrowsIllegalArgumentExceptionOnEmptyMessage": [["void"]], "testHandleEventThrowsIllegalArgumentExceptionOnNullApplication": [["void"]], "testDeletePersistentNotificationThrowsIllegalArgumentOnNullUserId": [["void"]], "testRegisterUserSessionWithNullServerSessionThrowsException": [["void"]], "testHandleEventThrowsIllegalArgumentExceptionOnNullUser": [["void"]], "testRegisterUserSession": [["void"]], "setUp": [["void"]], "testHandleEventThrowsIllegalArgumentExceptionOnNullTimestamp": [["void"]], "testRegisterUserSessionWithNullServerSessionIdThrowsException": [["void"]], "testHandleEventThrowsIllegalArgumentExceptionOnNullMessage": [["void"]]}, "className": "NotificationControllerTest", "renamed": ["void", "function", "(", ")", "{", "testEventProperties", ".", "put", "(", "Notification", ".", "NOTIFICATION_KEY_APPLICATION", ",", "\"srini_string\"", ")", ";", "notificationController", ".", "handleEvent", "(", "new", "Event", "(", "Notification", ".", "NOTIFICATION_TOPIC_BROADCAST", ",", "testEventProperties", ")", ")", ";", "}"], "nl": "Test method for  {@link NotificationController#handleEvent(org.osgi.service.event.Event)}Verifies that  {@code IllegalArgumentException} is thrown when {@code Event}'s {@link Notification#NOTIFICATION_KEY_APPLICATION} property is empty.", "nlToks": ["Test", "method", "for", "-LCB-", "@link", "NotificationController", "#handleEvent", "-LRB-", "org.osgi.service.event.Event", "-RRB-", "-RCB-", "Verifies", "that", "-LCB-", "@code", "IllegalArgumentException", "-RCB-", "is", "thrown", "when", "-LCB-", "@code", "Event", "-RCB-", "'s", "-LCB-", "@link", "Notification", "#NOTIFICATION_KEY_APPLICATION", "-RCB-", "property", "is", "empty", "."], "path": "pklinef/ddf-ui/tree/master/search-ui/search-endpoint/src/test/java/org/codice/ddf/ui/searchui/query/controller/NotificationControllerTest.java", "idx": 1053}
{"memberVariables": {"CTRL_MODIFIER=\"CTRL\"": "String", "ALT_MODIFIER=\"ALT\"": "String", "SHIFT_MODIFIER=\"SHIFT\"": "String", "MODIFIER_JOINER=\" + \"": "String", "ALT_GRAPH_MODIFIER=\"altGraph\"": "String", "META_MODIFIER=\"META\"": "String"}, "code": ["String", "function", "(", "KeyStroke", "keyStroke", ")", "{", "if", "(", "keyStroke", "!=", "null", ")", "{", "return", "getModifiersText", "(", "keyStroke", ".", "getModifiers", "(", ")", ")", "+", "KeyEventUtils", ".", "getKeyText", "(", "keyStroke", ".", "getKeyCode", "(", ")", ")", ";", "}", "else", "{", "return", "\"\"", ";", "}", "}"], "memberFunctions": {"getKeyText": [["String", "int keyCode"]], "isActionEvent": [["boolean", "KeyEvent evt"]], "getModifiersText": [["String", "int modifiers"]]}, "className": "KeyEventUtils", "renamed": ["String", "function", "(", "KeyStroke", "arg0", ")", "{", "if", "(", "arg0", "!=", "null", ")", "{", "return", "getModifiersText", "(", "arg0", ".", "getModifiers", "(", ")", ")", "+", "KeyEventUtils", ".", "getKeyText", "(", "arg0", ".", "getKeyCode", "(", ")", ")", ";", "}", "else", "{", "return", "\"srini_string\"", ";", "}", "}"], "nl": "Formats a given KeyStroke into a string", "nlToks": ["Formats", "a", "given", "KeyStroke", "into", "a", "string"], "path": "pichiliani/CoArgoUML/tree/master/v0.24/fonte/src/argouml-app/src/org/argouml/util/KeyEventUtils.java", "idx": 1055}
{"memberVariables": {"headers": "Map<String,String>", "charset": "String", "verb": "Verb", "bodyParams": "ParameterList", "url": "String", "bytePayload=null": "byte[]", "readTimeout=null": "Long", "querystringParams": "ParameterList", "connectionKeepAlive=false": "boolean", "connectTimeout=null": "Long", "CONTENT_LENGTH=\"Content-Length\"": "String", "CONTENT_TYPE=\"Content-Type\"": "String", "connection": "HttpURLConnection", "payload=null": "String", "DEFAULT_CONTENT_TYPE=\"application/x-www-form-urlencoded\"": "String"}, "code": ["void", "function", "(", "String", "charsetName", ")", "{", "this", ".", "charset", "=", "charsetName", ";", "}"], "memberFunctions": {"addHeaders": [["void", "HttpURLConnection conn"]], "getSanitizedUrl": [["String"]], "addBody": [["void", "HttpURLConnection conn", "byte[] content"]], "addHeader": [["void", "String key", "String value"]], "setConnectionKeepAlive": [["void", "boolean connectionKeepAlive"]], "setConnectTimeout": [["void", "int duration", "TimeUnit unit"]], "getByteBodyContents": [["byte[]"]], "getHeaders": [["Map<String,String>"]], "getQueryStringParams": [["ParameterList"]], "setConnection": [["void", "HttpURLConnection connection"]], "createConnection": [["void"]], "getCharset": [["String"]], "addBodyParameter": [["void", "String key", "String value"]], "getUrl": [["String"]], "setReadTimeout": [["void", "int duration", "TimeUnit unit"]], "getCompleteUrl": [["String"]], "getVerb": [["Verb"]], "addPayload": [["void", "String payload"], ["void", "byte[] payload"]], "addQuerystringParameter": [["void", "String key", "String value"]], "toString": [["String"]], "doSend": [["Response"]], "send": [["Response"]], "getBodyContents": [["String"]], "getBodyParams": [["ParameterList"]]}, "className": "Request", "renamed": ["void", "function", "(", "String", "arg0", ")", "{", "this", ".", "charset", "=", "arg0", ";", "}"], "nl": "Set the charset of the body of the request", "nlToks": ["Set", "the", "charset", "of", "the", "body", "of", "the", "request"], "path": "pnsantos/scribe-java/tree/master/src/main/java/org/scribe/model/Request.java", "idx": 1056}
{"memberVariables": {"logger=LoggerFactory.getLogger(ClientDetailsEntityJsonProcessor.class)": "Logger", "parser=new JsonParser()": "JsonParser"}, "code": ["ClientDetailsEntity", "function", "(", "String", "jsonString", ")", "{", "JsonElement", "jsonEl", "=", "parser", ".", "parse", "(", "jsonString", ")", ";", "return", "parse", "(", "jsonEl", ")", ";", "}"], "memberFunctions": {"parseRegistered": [["RegisteredClient", "String jsonString"], ["RegisteredClient", "JsonElement jsonEl"]], "serialize": [["JsonObject", "RegisteredClient c"]]}, "className": "ClientDetailsEntityJsonProcessor", "renamed": ["ClientDetailsEntity", "function", "(", "String", "arg0", ")", "{", "JsonElement", "loc0", "=", "parser", ".", "parse", "(", "arg0", ")", ";", "return", "parse", "(", "loc0", ")", ";", "}"], "nl": "Create an unbound ClientDetailsEntity from the given JSON string.", "nlToks": ["Create", "an", "unbound", "ClientDetailsEntity", "from", "the", "given", "JSON", "string", "."], "path": "adilansari/OpenID-Connect-Java-Spring-Server/tree/master/openid-connect-common/src/main/java/org/mitre/openid/connect/ClientDetailsEntityJsonProcessor.java", "idx": 1058}
{"memberVariables": {"subnetId": "String", "portId": "String"}, "code": ["Builder", "function", "(", "String", "portId", ")", "{", "this", ".", "portId", "=", "portId", ";", "return", "this", ";", "}"], "memberFunctions": {"subnetId": [["Builder", "String subnetId"]], "fromRouterInterface": [["Builder", "RouterInterface in"]], "toBuilder": [["Builder"]], "string": [["Objects.ToStringHelper"]], "getPortId": [["String"]], "build": [["RouterInterface"]], "hashCode": [["int"]], "equals": [["boolean", "Object obj"]], "builder": [["Builder"]], "toString": [["String"]], "portId": [["Builder", "String portId"]], "getSubnetId": [["String"]]}, "className": "RouterInterface", "renamed": ["Builder", "function", "(", "String", "arg0", ")", "{", "this", ".", "portId", "=", "arg0", ";", "return", "this", ";", "}"], "nl": "Provide the portId to the RouterInterface's Builder.", "nlToks": ["Provide", "the", "portId", "to", "the", "RouterInterface", "'s", "Builder", "."], "path": "pimenas/jclouds-labs-openstack/tree/master/openstack-neutron/src/main/java/org/jclouds/openstack/neutron/v2/domain/RouterInterface.java", "idx": 1059}
{"memberVariables": {"rte": "RTESentence", "EXAMPLE=\"$GPRTE,1,1,c,0,MELIN,RUSKI,KNUDAN*25\"": "String", "empty": "RTESentence"}, "code": ["void", "function", "(", ")", "{", "rte", ".", "setRouteType", "(", "RouteType", ".", "WORKING", ")", ";", "assertTrue", "(", "rte", ".", "isWorkingRoute", "(", ")", ")", ";", "assertFalse", "(", "rte", ".", "isActiveRoute", "(", ")", ")", ";", "}"], "memberFunctions": {"testGetWaypointIds": [["void"]], "testIsActiveRoute": [["void"]], "testIsFirst": [["void"]], "testGetSentenceIndex": [["void"]], "testConstructor": [["void"]], "testSetSentenceCountWithNegativeValue": [["void"]], "testAddWaypointId": [["void"]], "testGetSentenceCount": [["void"]], "testSetWaypointIds": [["void"]], "testSetRouteId": [["void"]], "testIsWorkingRoute": [["void"]], "testSetSentenceCount": [["void"]], "testGetRouteId": [["void"]], "testSetRouteTypeActive": [["void"]], "setUp": [["void"]], "testIsLast": [["void"]], "testGetWaypointCount": [["void"]], "testSetSentenceIndex": [["void"]], "testSetSentenceIndexWithNegativeValue": [["void"]]}, "className": "RTETest", "renamed": ["void", "function", "(", ")", "{", "rte", ".", "setRouteType", "(", "RouteType", ".", "WORKING", ")", ";", "assertTrue", "(", "rte", ".", "isWorkingRoute", "(", ")", ")", ";", "assertFalse", "(", "rte", ".", "isActiveRoute", "(", ")", ")", ";", "}"], "nl": "Test method for {@link net.sf.marineapi.nmea.parser.RTEParser#isActiveRoute()}.", "nlToks": ["Test", "method", "for", "-LCB-", "@link", "net.sf.marineapi.nmea.parser.RTEParser", "#isActiveRoute", "-LRB-", "-RRB-", "-RCB-", "."], "path": "pkoziol/marine-api/tree/master/src/test/java/net/sf/marineapi/nmea/parser/RTETest.java", "idx": 1060}
{"memberVariables": {"conditions": "Array<Condition>", "actions": "Array<Action>"}, "code": ["void", "function", "(", ")", "{", "for", "(", "Action", "action", ":", "actions", ")", "{", "action", ".", "update", "(", ")", ";", "}", "}"], "memberFunctions": {"evaluateConditions": [["boolean"]], "read": [["void", "Json json", "JsonValue jsonData"]], "setConditions": [["void", "Array<Condition> conditions"]], "setActions": [["void", "Array<Action> actions"]], "getActions": [["Array<Action>"]], "write": [["void", "Json json"]]}, "className": "Sequence", "renamed": ["void", "function", "(", ")", "{", "for", "(", "Action", "loc0", ":", "actions", ")", "{", "loc0", ".", "update", "(", ")", ";", "}", "}"], "nl": "Updates the actions according to the current battle state.", "nlToks": ["Updates", "the", "actions", "according", "to", "the", "current", "battle", "state", "."], "path": "prativa/shadowstruggles/tree/master/Shadow Struggles/model/br/edu/ifsp/pds/shadowstruggles/model/enemies/Sequence.java", "idx": 1061}
{"memberVariables": {"testNodeDetail=null": "NodeDetail", "description": "String", "recoverable": "boolean", "id": "int", "controlNodeDetail=null": "NodeDetail"}, "code": ["int", "function", "(", ")", "{", "return", "id", ";", "}"], "memberFunctions": {"appendDetailedRepresentation": [["void", "StringBuffer buf"]], "getTestNodeDetail": [["NodeDetail"]], "getControlNodeDetail": [["NodeDetail"]], "equals": [["boolean", "Object other"]], "isRecoverable": [["boolean"]], "getId": [["int"]], "toString": [["String"]], "appendBasicRepresentation": [["void", "StringBuffer buf"]], "getDescription": [["String"]], "setRecoverable": [["void", "boolean overrideValue"]]}, "className": "Difference", "renamed": ["int", "function", "(", ")", "{", "return", "id", ";", "}"], "nl": "hashcode implementation to go with equals.", "nlToks": ["hashcode", "implementation", "to", "go", "with", "equals", "."], "path": "phbenisc/xmlunit/tree/master/xmlunit-legacy/src/main/java/org/custommonkey/xmlunit/Difference.java", "idx": 1063}
{"memberVariables": {"TOR_DIGEST256_ALGORITHM=\"SHA-256\"": "String", "TOR_DIGEST256_SIZE=32": "int", "TOR_DIGEST_SIZE=20": "int", "digestInstance": "MessageDigest", "isDigest256": "boolean", "TOR_DIGEST_ALGORITHM=\"SHA-1\"": "String"}, "code": ["HexDigest", "function", "(", ")", "{", "return", "HexDigest", ".", "createFromDigestBytes", "(", "getDigestBytes", "(", ")", ")", ";", "}"], "memberFunctions": {"createDigestInstance": [["MessageDigest", "boolean isDigest256"]], "getDigestBytes": [["byte[]"]], "update": [["void", "byte[] input"], ["void", "byte[] input", "int offset", "int length"], ["void", "String input"]], "peekDigest": [["byte[]", "byte[] data", "int offset", "int length"]], "isDigest256": [["boolean"]]}, "className": "TorMessageDigest", "renamed": ["HexDigest", "function", "(", ")", "{", "return", "HexDigest", ".", "createFromDigestBytes", "(", "getDigestBytes", "(", ")", ")", ";", "}"], "nl": "Calculate the digest value of all data processed up until this point and convert the digest into a HexDigest object.", "nlToks": ["Calculate", "the", "digest", "value", "of", "all", "data", "processed", "up", "until", "this", "point", "and", "convert", "the", "digest", "into", "a", "HexDigest", "object", "."], "path": "1000000000001/bitcoinj/tree/master/orchid/src/com/subgraph/orchid/crypto/TorMessageDigest.java", "idx": 1064}
{"memberVariables": {"testChoosers": "Map<String,TestChooser<?>>", "loadResult": "ProctorLoadResult", "INT_RANGE=(long)Integer.MAX_VALUE - (long)Integer.MIN_VALUE": "long", "EMPTY=createEmptyProctor()": "Proctor", "testDefinitions=Maps.newLinkedHashMap()": "Map<String,ConsumableTestDefinition>", "matrix": "TestMatrixArtifact"}, "code": ["ProctorResult", "function", "(", "@", "Nonnull", "final", "Identifiers", "identifiers", ",", "@", "Nonnull", "final", "Map", "<", "String", ",", "Object", ">", "inputContext", ",", "@", "Nonnull", "final", "Map", "<", "String", ",", "Integer", ">", "forceGroups", ")", "{", "return", "determineTestGroups", "(", "identifiers", ",", "inputContext", ",", "forceGroups", ",", "Collections", ".", "<", "String", ">", "emptyList", "(", ")", ")", ";", "}"], "memberFunctions": {"appendTestMatrix": [["void", "final Writer writer"]], "appendTestMatrixFiltered": [["void", "final Writer writer", "final Collection<String> testNameFilter"]], "getArtifact": [["TestMatrixArtifact"]], "getLoadResult": [["ProctorLoadResult"]], "appendTests": [["void", "Writer sb", "final TestType type"], ["void", "Writer sb", "@Nonnull Predicate<TestChooser<?>> shouldIncludeTest"]], "createEmptyProctor": [["Proctor"]], "getTestDefinition": [["ConsumableTestDefinition", "final String name"]], "construct": [["Proctor", "@Nonnull final TestMatrixArtifact matrix", "ProctorLoadResult loadResult", "FunctionMapper functionMapper"]], "appendAllTests": [["void", "Writer sb"]], "appendTestsNameFiltered": [["void", "final Writer sb", "final Collection<String> testNameFilter"]]}, "className": "Proctor", "renamed": ["ProctorResult", "function", "(", "@", "Nonnull", "final", "Identifiers", "arg0", ",", "@", "Nonnull", "final", "Map", "<", "String", ",", "Object", ">", "arg1", ",", "@", "Nonnull", "final", "Map", "<", "String", ",", "Integer", ">", "arg2", ")", "{", "return", "determineTestGroups", "(", "arg0", ",", "arg1", ",", "arg2", ",", "Collections", ".", "<", "String", ">", "emptyList", "(", ")", ")", ";", "}"], "nl": "Determine which test buckets apply to a particular client.", "nlToks": ["Determine", "which", "test", "buckets", "apply", "to", "a", "particular", "client", "."], "path": "006/proctor/tree/master/proctor-common/src/main/java/com/indeed/proctor/common/Proctor.java", "idx": 1065}
{"memberVariables": {"LOCALE=Locale.US": "Locale", "TIMEZONE=TimeZone.getTimeZone(\"GMT\")": "TimeZone", "FORMAT_822=\"EEE, dd MMM yyyy HH:mm:ss 'GMT'\"": "String", "FORMAT_ISO=\"yyyy-MM-dd'T'HH:mm:ss'Z'\"": "String"}, "code": ["Date", "function", "(", "String", "string", ")", "{", "if", "(", "string", "==", "null", ")", "return", "null", ";", "SimpleDateFormat", "formatter", "=", "new", "SimpleDateFormat", "(", "FORMAT_ISO", ",", "LOCALE", ")", ";", "formatter", ".", "setTimeZone", "(", "TIMEZONE", ")", ";", "try", "{", "return", "formatter", ".", "parse", "(", "string", ")", ";", "}", "catch", "(", "ParseException", "exception", ")", "{", "return", "null", ";", "}", "}"], "memberFunctions": {"formatIsoDate": [["String", "Date date"]], "parseHttpDate": [["Date", "String string"]], "parseNumber": [["Long", "String string"]], "formatHttpDate": [["String", "Date date"]], "findFirst": [["int", "String source", "String delimiters"]], "formatNumber": [["String", "Number number"]], "splitOnce": [["String[]", "String source", "char delimiter", "boolean noDelimReturnSecond"]], "splitAll": [["String[]", "String source", "char delimiter"]]}, "className": "StringTools", "renamed": ["Date", "function", "(", "String", "arg0", ")", "{", "if", "(", "arg0", "==", "null", ")", "return", "null", ";", "SimpleDateFormat", "loc0", "=", "new", "SimpleDateFormat", "(", "FORMAT_ISO", ",", "LOCALE", ")", ";", "loc0", ".", "setTimeZone", "(", "TIMEZONE", ")", ";", "try", "{", "return", "loc0", ".", "parse", "(", "arg0", ")", ";", "}", "catch", "(", "ParseException", "loc1", ")", "{", "return", "null", ";", "}", "}"], "nl": "Parse a  {@link String} into a {@link Date} according to the ISO 8601specification (2000-12-31T11:59:00Z).", "nlToks": ["Parse", "a", "-LCB-", "@link", "String", "-RCB-", "into", "a", "-LCB-", "@link", "Date", "-RCB-", "according", "to", "the", "ISO", "8601specification", "-LRB-", "2000-12-31T11:59:00Z", "-RRB-", "."], "path": "pfumagalli/webdav/tree/master/src/main/java/it/could/util/StringTools.java", "idx": 1066}
{"memberVariables": {"errorLevelFolder=0": "int", "tooltip": "String", "errorLevel=0": "int", "value=\"\"": "String"}, "code": ["boolean", "function", "(", ")", "{", "return", "(", "this", ".", "errorLevel", ">", "1", ")", ";", "}"], "memberFunctions": {"restoreFolderErrorLevel": [["void"]], "setKO": [["void"], ["void", "boolean match"]], "isWarning": [["boolean"]], "setErrorLevel": [["void", "int errorlevel"]], "getErrorLevel": [["int"]], "analyseTrack": [["String", "String tagValue", "String matchValue", "String field"]], "analyseTrackYear": [["String", "String tagValue", "String matchValue"]], "formatNumber": [["String", "int value"]], "colorField": [["String", "String text", "int errorLevel"], ["String", "String text", "int errorLevel", "boolean html"]], "getValue": [["String"]], "analyseTrackComment": [["String", "String tagValue", "String matchValue"]], "analyseTrackBpm": [["String", "Float tagValue", "Float matchValue"]], "hashCode": [["int"]], "setValue": [["void", "String value"]], "equals": [["boolean", "Object obj"]], "getDisplayToolTip": [["String"]], "setOK": [["void"]], "toString": [["String"]], "isNotValid": [["boolean"]], "getDisplayColor": [["Color"]], "analyseTrackNumber": [["String", "String tagValue", "String matchValue"]], "getDisplayText": [["String"]], "setWarning": [["void"], ["void", "boolean match"]], "analyseTrackString": [["String", "String tagValue", "String matchValue"]]}, "className": "FolderInfoResult", "renamed": ["boolean", "function", "(", ")", "{", "return", "(", "this", ".", "errorLevel", ">", "1", ")", ";", "}"], "nl": "Returns if result is KO", "nlToks": ["Returns", "if", "result", "is", "KO"], "path": "phramusca/JaMuz/tree/master/src/jamuz/process/check/FolderInfoResult.java", "idx": 1067}
{"memberVariables": {"EXAMPLE=\"$RATTM,11,25.3,13.7,T,7.0,20.0,T,10.1,20.2,N,NAME,Q,,175550.24,A*34\"": "String", "ttm": "TTMParser", "empty": "TTMParser"}, "code": ["void", "function", "(", ")", "{", "ttm", ".", "setTimeToCPA", "(", "15.0", ")", ";", "assertTrue", "(", "ttm", ".", "toString", "(", ")", ".", "contains", "(", "\",15.0,\"", ")", ")", ";", "}"], "memberFunctions": {"testGetAcquisitionType": [["void"]], "testGetDistance": [["void"]], "testSetStatus": [["void"]], "testSetNumber": [["void"]], "testSetDistanceOfCPA": [["void"]], "testConstructor": [["void"]], "testGetTime": [["void"]], "testSetCourse": [["void"]], "testGetName": [["void"]], "testGetNumber": [["void"]], "testGetDistanceOfCPA": [["void"]], "setUp": [["void"]], "testGetCourse": [["void"]], "testSetReferenceTrue": [["void"]], "testSetReferenceFalse": [["void"]], "testSetAcquisitionType": [["void"]], "testSetBearing": [["void"]], "testGetBearing": [["void"]], "testSetDistance": [["void"]], "testSetTime": [["void"]], "testGetSpeed": [["void"]], "testGetStatus": [["void"]], "testGetTimeToCPA": [["void"]], "testSetName": [["void"]], "testSetSpeed": [["void"]]}, "className": "TTMTest", "renamed": ["void", "function", "(", ")", "{", "ttm", ".", "setTimeToCPA", "(", "15.0", ")", ";", "assertTrue", "(", "ttm", ".", "toString", "(", ")", ".", "contains", "(", "\"srini_string\"", ")", ")", ";", "}"], "nl": "Test method for {@link net.sf.marineapi.nmea.parser.TTMParser#setTimeToCPA()} .", "nlToks": ["Test", "method", "for", "-LCB-", "@link", "net.sf.marineapi.nmea.parser.TTMParser", "#setTimeToCPA", "-LRB-", "-RRB-", "-RCB-", "."], "path": "pkoziol/marine-api/tree/master/src/test/java/net/sf/marineapi/nmea/parser/TTMTest.java", "idx": 1068}
{"memberVariables": {"sCleanerCleanMethod": "Method", "sByteBufferCleanerMethod": "Method", "LOG=LoggerFactory.getLogger(Constants.LOGGER_TYPE)": "Logger"}, "code": ["void", "function", "(", "final", "ReadableByteChannel", "src", ",", "final", "WritableByteChannel", "dest", ")", "{", "final", "ByteBuffer", "buffer", "=", "ByteBuffer", ".", "allocateDirect", "(", "16", "*", "1024", ")", ";", "while", "(", "src", ".", "read", "(", "buffer", ")", "!=", "-", "1", ")", "{", "buffer", ".", "flip", "(", ")", ";", "dest", ".", "write", "(", "buffer", ")", ";", "buffer", ".", "compact", "(", ")", ";", "}", "buffer", ".", "flip", "(", ")", ";", "while", "(", "buffer", ".", "hasRemaining", "(", ")", ")", "{", "dest", ".", "write", "(", "buffer", ")", ";", "}", "}"], "memberFunctions": {"equalConstantByteArray": [["boolean", "byte value", "int len", "byte[] arr"]], "getIncreasingByteBuffer": [["ByteBuffer", "int len"], ["ByteBuffer", "int start", "int len"]], "cleanDirectBuffer": [["void", "ByteBuffer buffer"]], "sliceByteBuffer": [["ByteBuffer", "ByteBuffer buffer", "int position", "int length"], ["ByteBuffer", "ByteBuffer buffer", "int position"]], "byteToInt": [["int", "byte b"]], "equalIncreasingByteArray": [["boolean", "int len", "byte[] arr"], ["boolean", "int start", "int len", "byte[] arr"]], "equalIncreasingByteBuffer": [["boolean", "int start", "int len", "ByteBuffer buf"]], "getIncreasingByteArray": [["byte[]", "int len"], ["byte[]", "int start", "int len"]], "writeBufferToFile": [["void", "String path", "byte[] buffer"]], "cloneByteBufferList": [["List<ByteBuffer>", "List<ByteBuffer> source"]], "cloneByteBuffer": [["ByteBuffer", "ByteBuffer buf"]], "newByteArrayFromByteBuffer": [["byte[]", "ByteBuffer buf"]], "putIntByteBuffer": [["void", "ByteBuffer buf", "int b"]], "generateNewByteBufferFromThriftRPCResults": [["ByteBuffer", "ByteBuffer data"]], "getIncreasingIntBuffer": [["ByteBuffer", "int len"], ["ByteBuffer", "int start", "int len"]]}, "className": "BufferUtils", "renamed": ["void", "function", "(", "final", "ReadableByteChannel", "arg0", ",", "final", "WritableByteChannel", "arg1", ")", "{", "final", "ByteBuffer", "loc0", "=", "ByteBuffer", ".", "allocateDirect", "(", "16", "*", "1024", ")", ";", "while", "(", "arg0", ".", "read", "(", "loc0", ")", "!=", "-", "1", ")", "{", "loc0", ".", "flip", "(", ")", ";", "arg1", ".", "write", "(", "loc0", ")", ";", "loc0", ".", "compact", "(", ")", ";", "}", "loc0", ".", "flip", "(", ")", ";", "while", "(", "loc0", ".", "hasRemaining", "(", ")", ")", "{", "arg1", ".", "write", "(", "loc0", ")", ";", "}", "}"], "nl": "An efficient copy between two channels with a fixed-size buffer.", "nlToks": ["An", "efficient", "copy", "between", "two", "channels", "with", "a", "fixed-size", "buffer", "."], "path": "poemlin/alluxio/tree/master/core/common/src/main/java/alluxio/util/io/BufferUtils.java", "idx": 1069}
{"memberVariables": {"nsh": "NamespaceHandler", "ui": "UserInterface", "uac": "UserAgentCallback"}, "code": ["String", "function", "(", "Object", "e", ",", "String", "attrName", ")", "{", "return", "nsh", ".", "getAttributeValue", "(", "(", "Element", ")", "e", ",", "attrName", ")", ";", "}"], "memberFunctions": {"getClass": [["String", "Object e"]], "isLink": [["boolean", "Object e"]], "isVisited": [["boolean", "Object e"]], "isHover": [["boolean", "Object e"]], "isFocus": [["boolean", "Object e"]], "getLang": [["String", "Object e"]], "getID": [["String", "Object e"]], "getNonCssStyling": [["String", "Object e"]], "getElementStyling": [["String", "Object e"]], "isActive": [["boolean", "Object e"]]}, "className": "StandardAttributeResolver", "renamed": ["String", "function", "(", "Object", "arg0", ",", "String", "arg1", ")", "{", "return", "nsh", ".", "getAttributeValue", "(", "(", "Element", ")", "arg0", ",", "arg1", ")", ";", "}"], "nl": "Gets the attributeValue attribute of the StandardAttributeResolver object", "nlToks": ["Gets", "the", "attributeValue", "attribute", "of", "the", "StandardAttributeResolver", "object"], "path": "plutogeek/flyingsaucer/tree/master/flying-saucer-core/src/main/java/org/xhtmlrenderer/context/StandardAttributeResolver.java", "idx": 1072}
{"memberVariables": {"checkedFlag": "FolderInfo.CheckedFlag", "artist": "String", "album": "String", "rating": "double", "errorLevel": "int"}, "code": ["void", "function", "(", "String", "album", ")", "{", "this", ".", "album", "=", "album", ";", "}"], "memberFunctions": {"getCheckedFlag": [["FolderInfo.CheckedFlag"]], "setArtist": [["void", "String artist"]], "getErrorLevel": [["int"]], "setErrorLevel": [["void", "int errorLevel"]], "getArtist": [["String"]], "toString": [["String"]], "setCheckedFlag": [["void", "FolderInfo.CheckedFlag checkedFlag"]], "setRating": [["void", "double rating"]], "getAlbum": [["String"]], "getRating": [["double"]]}, "className": "DuplicateInfo", "renamed": ["void", "function", "(", "String", "arg0", ")", "{", "this", ".", "album", "=", "arg0", ";", "}"], "nl": "Set the value of album", "nlToks": ["Set", "the", "value", "of", "album"], "path": "phramusca/JaMuz/tree/master/src/jamuz/process/check/DuplicateInfo.java", "idx": 1073}
{"memberVariables": {"certAlias": "String", "secureRandom": "SecureRandom", "protocol": "String", "provider": "String", "certConstraints": "CertificateConstraintsType", "ciphersuites=new ArrayList<String>()": "List<String>", "keyManagers": "KeyManager[]", "cipherSuiteFilters": "FiltersType", "trustManagers": "TrustManager[]"}, "code": ["FiltersType", "function", "(", ")", "{", "return", "cipherSuiteFilters", ";", "}"], "memberFunctions": {"setCertConstraints": [["void", "CertificateConstraintsType constraints"]], "setCipherSuites": [["void", "List<String> cs"]], "setSecureSocketProtocol": [["void", "String proto"]], "setCertAlias": [["void", "String ctAlias"]], "getCertConstraints": [["CertificateConstraintsType"]], "getSecureRandom": [["SecureRandom"]], "setJsseProvider": [["void", "String prov"]], "getCertAlias": [["String"]], "setKeyManagers": [["void", "KeyManager[] keyMgrs"]], "getSecureSocketProtocol": [["String"]], "setTrustManagers": [["void", "TrustManager[] trustMgrs"]], "setSecureRandom": [["void", "SecureRandom random"]], "getJsseProvider": [["String"]], "getTrustManagers": [["TrustManager[]"]], "getKeyManagers": [["KeyManager[]"]], "setCipherSuitesFilter": [["void", "FiltersType filters"]], "getCipherSuites": [["List<String>"]]}, "className": "TLSParameterBase", "renamed": ["FiltersType", "function", "(", ")", "{", "return", "cipherSuiteFilters", ";", "}"], "nl": "Returns the cipher suites filter", "nlToks": ["Returns", "the", "cipher", "suites", "filter"], "path": "primesign/cxf/tree/master/core/src/main/java/org/apache/cxf/configuration/jsse/TLSParameterBase.java", "idx": 1074}
{"memberVariables": {"maxMemory=0": "double", "instance=new MemoryLogger()": "MemoryLogger"}, "code": ["MemoryLogger", "function", "(", ")", "{", "return", "instance", ";", "}"], "memberFunctions": {"checkMemory": [["void"]], "getMaxMemory": [["double"]], "reset": [["void"]]}, "className": "MemoryLogger", "renamed": ["MemoryLogger", "function", "(", ")", "{", "return", "instance", ";", "}"], "nl": "Method to obtain the only instance of this class", "nlToks": ["Method", "to", "obtain", "the", "only", "instance", "of", "this", "class"], "path": "prateek96/Data_Mining_Assignments/tree/master/Assignment_1/Assignment-1.11/tools/MemoryLogger.java", "idx": 1075}
{"memberVariables": {"EXAMPLE=\"$GPVTG,360.0,T,348.7,M,16.89,N,31.28,K,A\"": "String", "vtg": "VTGSentence", "empty": "VTGSentence"}, "code": ["void", "function", "(", ")", "{", "try", "{", "vtg", ".", "setMagneticCourse", "(", "-", "0.001", ")", ";", "fail", "(", "\"Did not throw exception\"", ")", ";", "}", "catch", "(", "IllegalArgumentException", "e", ")", "{", "assertTrue", "(", "e", ".", "getMessage", "(", ")", ".", "contains", "(", "\"0..360\"", ")", ")", ";", "}", "catch", "(", "Exception", "e", ")", "{", "fail", "(", "e", ".", "getMessage", "(", ")", ")", ";", "}", "}"], "memberFunctions": {"testGetMagneticCourse": [["void"]], "testGetSpeedKmh": [["void"]], "testGetSpeedKnots": [["void"]], "testSetMagneticCourseWithValueGreaterThanAllowed": [["void"]], "testSetSpeedKmhWithNegativeValue": [["void"]], "testSetSpeedKnotsWithNegativeValue": [["void"]], "testConstructor": [["void"]], "testGetTrueCourse": [["void"]], "testSetSpeedKmh": [["void"]], "testSetMagneticCourse": [["void"]], "testSetMode": [["void"]], "testSetModeWhenOmitted": [["void"]], "testSetTrueCourseWithNegativeValue": [["void"]], "setUp": [["void"]], "testSetSpeedKnots": [["void"]], "testSetTrueCourse": [["void"]], "testGetMode": [["void"]], "testSetTrueCourseWithValueGreaterThanAllowed": [["void"]]}, "className": "VTGTest", "renamed": ["void", "function", "(", ")", "{", "try", "{", "vtg", ".", "setMagneticCourse", "(", "-", "0.001", ")", ";", "fail", "(", "\"srini_string\"", ")", ";", "}", "catch", "(", "IllegalArgumentException", "loc0", ")", "{", "assertTrue", "(", "loc0", ".", "getMessage", "(", ")", ".", "contains", "(", "\"srini_string\"", ")", ")", ";", "}", "catch", "(", "Exception", "loc0", ")", "{", "fail", "(", "loc0", ".", "getMessage", "(", ")", ")", ";", "}", "}"], "nl": "Test method for {@link net.sf.marineapi.nmea.parser.VTGParser#setMagneticCourse(double)}.", "nlToks": ["Test", "method", "for", "-LCB-", "@link", "net.sf.marineapi.nmea.parser.VTGParser", "#setMagneticCourse", "-LRB-", "double", "-RRB-", "-RCB-", "."], "path": "pkoziol/marine-api/tree/master/src/test/java/net/sf/marineapi/nmea/parser/VTGTest.java", "idx": 1077}
{"memberVariables": {}, "code": ["boolean", "function", "(", "Map", "<", "String", ",", "Object", ">", "props", ",", "String", "key", ")", "{", "if", "(", "props", "==", "null", "||", "key", "==", "null", ")", "{", "return", "false", ";", "}", "else", "{", "return", "isFalse", "(", "props", ".", "get", "(", "key", ")", ")", ";", "}", "}"], "memberFunctions": {"getLong": [["Long", "Message message", "String key"]], "isTrue": [["boolean", "Map<String,Object> props", "String key"], ["boolean", "Object property"]], "getInteger": [["Integer", "Message message", "String key"]]}, "className": "PropertyUtils", "renamed": ["boolean", "function", "(", "Map", "<", "String", ",", "Object", ">", "arg0", ",", "String", "arg1", ")", "{", "if", "(", "arg0", "==", "null", "||", "arg1", "==", "null", ")", "{", "return", "false", ";", "}", "else", "{", "return", "isFalse", "(", "arg0", ".", "get", "(", "arg1", ")", ")", ";", "}", "}"], "nl": "It might seem odd to return 'true' if a property == FALSE, but it is required sometimes.", "nlToks": ["It", "might", "seem", "odd", "to", "return", "`", "true", "'", "if", "a", "property", "==", "FALSE", ",", "but", "it", "is", "required", "sometimes", "."], "path": "primesign/cxf/tree/master/core/src/main/java/org/apache/cxf/common/util/PropertyUtils.java", "idx": 1078}
{"memberVariables": {"graphName": "String", "user=\"xinyu\"": "String", "ep=new Endpoint()": "Endpoint"}, "code": ["void", "function", "(", ")", "{", "XMLUnit", ".", "setIgnoreWhitespace", "(", "true", ")", ";", "XMLUnit", ".", "setNormalize", "(", "true", ")", ";", "Config", ".", "readConfig", "(", "\"r43ples.test.conf\"", ")", ";", "}"], "memberFunctions": {"createSelectQuery": [["String", "String graphName", "String revision"]], "createAutoMergeQuery": [["String", "String graphName", "String sdd", "String user", "String commitMessage", "String branchNameA", "String branchNameB"]], "createCommonMergeQuery": [["String", "String graphName", "String sdd", "String user", "String commitMessage", "String branchNameA", "String branchNameB"]], "testCommonMerge": [["void"]], "createMergeWithQuery": [["String", "String graphName", "String sdd", "String user", "String commitMessage", "String branchNameA", "String branchNameB", "String triples"]], "setUp": [["void"]], "testManualMerge": [["void"]], "testAutoMerge": [["void"]], "testCreatedGraph": [["void"]], "createManualMergeQuery": [["String", "String graphName", "String sdd", "String user", "String commitMessage", "String branchNameA", "String branchNameB", "String triples"]]}, "className": "TestThreeWayMerge", "renamed": ["void", "function", "(", ")", "{", "XMLUnit", ".", "setIgnoreWhitespace", "(", "true", ")", ";", "XMLUnit", ".", "setNormalize", "(", "true", ")", ";", "Config", ".", "readConfig", "(", "\"srini_string\"", ")", ";", "}"], "nl": "Initialize TestClass", "nlToks": ["Initialize", "TestClass"], "path": "plt-tud/r43ples/tree/master/src/test/java/de/tud/plt/r43ples/test/merge/TestThreeWayMerge.java", "idx": 1079}
{"memberVariables": {"val": "String"}, "code": ["String", "function", "(", ")", "{", "return", "val", ";", "}"], "memberFunctions": {"hashCode": [["int"]], "equals": [["boolean", "Object obj"]], "toString": [["String"]], "compareTo": [["int", "Constant c"]]}, "className": "StringConstant", "renamed": ["String", "function", "(", ")", "{", "return", "val", ";", "}"], "nl": "Unwraps the string and returns it.", "nlToks": ["Unwraps", "the", "string", "and", "returns", "it", "."], "path": "prerit2803/DBMSProject2/tree/master/simpledb/query/StringConstant.java", "idx": 1080}
{"memberVariables": {"_alwaysSave=false": "boolean", "DEFAULT_VALUE": "String", "DEFAULT_PROPS": "Properties", "PROPS": "Properties", "KEY": "String"}, "code": ["void", "function", "(", "String", "value", ")", "{", "PROPS", ".", "put", "(", "KEY", ",", "value", ")", ";", "loadValue", "(", "value", ")", ";", "}"], "memberFunctions": {"loadValue": [["void", "String sValue"]], "revertToDefault": [["void"]], "getKey": [["String"]], "isDefault": [["boolean"]], "reload": [["void"]], "setAlwaysSave": [["Setting", "boolean save"]], "getValueAsString": [["String"]], "shouldAlwaysSave": [["boolean"]]}, "className": "Setting", "renamed": ["void", "function", "(", "String", "arg0", ")", "{", "PROPS", ".", "put", "(", "KEY", ",", "arg0", ")", ";", "loadValue", "(", "arg0", ")", ";", "}"], "nl": "Set new property value", "nlToks": ["Set", "new", "property", "value"], "path": "adamfisk/littleshoot-client/tree/master/client/util/src/main/java/org/lastbamboo/client/util/settings/types/Setting.java", "idx": 1083}
{"memberVariables": {}, "code": ["String", "function", "(", "Fig", "f", ")", "{", "Fig", "encloser", "=", "f", ".", "getEnclosingFig", "(", ")", ";", "if", "(", "encloser", "==", "null", ")", "{", "return", "null", ";", "}", "return", "getId", "(", "encloser", ")", ";", "}"], "memberFunctions": {"getContents": [["List", "Diagram diagram"]], "getId": [["String", "Fig f"]], "getEdges": [["List", "Diagram diagram"], ["void", "Diagram diagram", "Collection edges", "List returnEdges"]], "getVisibility": [["String", "Fig f"]]}, "className": "PgmlUtility", "renamed": ["String", "function", "(", "Fig", "arg0", ")", "{", "Fig", "loc0", "=", "arg0", ".", "getEnclosingFig", "(", ")", ";", "if", "(", "loc0", "==", "null", ")", "{", "return", "null", ";", "}", "return", "getId", "(", "loc0", ")", ";", "}"], "nl": "Return the identifier for this Fig which is the encloser  of the given Fig", "nlToks": ["Return", "the", "identifier", "for", "this", "Fig", "which", "is", "the", "encloser", "of", "the", "given", "Fig"], "path": "pichiliani/CoArgoUML/tree/master/v0.24/fonte/src/argouml-app/build/classes/org/argouml/persistence/PgmlUtility.java", "idx": 1084}
{"memberVariables": {"ZERO_HASH=new Sha256Hash(new byte[32])": "Sha256Hash", "bytes": "byte[]"}, "code": ["Sha256Hash", "function", "(", "File", "f", ")", "{", "FileInputStream", "in", "=", "new", "FileInputStream", "(", "f", ")", ";", "try", "{", "return", "create", "(", "ByteStreams", ".", "toByteArray", "(", "in", ")", ")", ";", "}", "finally", "{", "in", ".", "close", "(", ")", ";", "}", "}"], "memberFunctions": {"createDouble": [["Sha256Hash", "byte[] contents"]], "hashCode": [["int"]], "equals": [["boolean", "Object other"]], "create": [["Sha256Hash", "byte[] contents"]], "toBigInteger": [["BigInteger"]], "toString": [["String"]], "duplicate": [["Sha256Hash"]], "compareTo": [["int", "Object o"]], "getBytes": [["byte[]"]]}, "className": "Sha256Hash", "renamed": ["Sha256Hash", "function", "(", "File", "arg0", ")", "{", "FileInputStream", "loc0", "=", "new", "FileInputStream", "(", "arg0", ")", ";", "try", "{", "return", "create", "(", "ByteStreams", ".", "toByteArray", "(", "loc0", ")", ")", ";", "}", "finally", "{", "loc0", ".", "close", "(", ")", ";", "}", "}"], "nl": "Returns a hash of the given files contents. Reads the file fully into memory before hashing so only use with small files.", "nlToks": ["Returns", "a", "hash", "of", "the", "given", "files", "contents", ".", "Reads", "the", "file", "fully", "into", "memory", "before", "hashing", "so", "only", "use", "with", "small", "files", "."], "path": "plncoin/plncoin-and/tree/master/plncoinj/core/src/main/java/com/google/bitcoin/core/Sha256Hash.java", "idx": 1085}
{"memberVariables": {}, "code": ["boolean", "function", "(", "Connection", "conn", ")", "{", "if", "(", "conn", ".", "getMetaData", "(", ")", ".", "getDriverName", "(", ")", ".", "toLowerCase", "(", ")", ".", "contains", "(", "DBType", ".", "MySQL", ".", "name", "(", ")", ".", "toLowerCase", "(", ")", ")", ")", "{", "return", "true", ";", "}", "return", "false", ";", "}"], "memberFunctions": {"column": [["Column"]], "isPrimaryKey": [["boolean"]], "generateDropTableScript": [["String", "Table table", "DBType dbType"]], "generateCreateTableScript": [["String", "Table table", "DBType dbType", "List<Column> tableColumns"]], "isHsqlConnection": [["boolean", "Connection conn"]], "asLabel": [["String"]], "generateCreateIndexScript": [["String", "Index index", "DBType dbType"]], "getType": [["Class<?>"]], "name": [["String"]], "getDbDataType": [["String", "Column column", "DBType dbType"]], "getLength": [["int"]], "table": [["Table"]], "columnName": [["String"]]}, "className": "Schema", "renamed": ["boolean", "function", "(", "Connection", "arg0", ")", "{", "if", "(", "arg0", ".", "getMetaData", "(", ")", ".", "getDriverName", "(", ")", ".", "toLowerCase", "(", ")", ".", "contains", "(", "DBType", ".", "MySQL", ".", "name", "(", ")", ".", "toLowerCase", "(", ")", ")", ")", "{", "return", "true", ";", "}", "return", "false", ";", "}"], "nl": "Checks if the given connection's driver is MySQL Database Driver", "nlToks": ["Checks", "if", "the", "given", "connection", "'s", "driver", "is", "MySQL", "Database", "Driver"], "path": "pingpangkuangmo/oozie/tree/master/core/src/main/java/org/apache/oozie/util/db/Schema.java", "idx": 1088}
{"memberVariables": {"systemId": "String", "startTime": "String", "CONF_PREFIX=Service.CONF_PREFIX + \"UUIDService.\"": "String", "counter": "AtomicLong", "type": "char", "CONF_GENERATOR=CONF_PREFIX + \"generator\"": "String"}, "code": ["Class", "<", "?", "extends", "Service", ">", "function", "(", ")", "{", "return", "UUIDService", ".", "class", ";", "}"], "memberFunctions": {"init": [["void", "Services services"]], "generateChildId": [["String", "String id", "String childName"]], "getType": [["char"]], "longPadding": [["String", "long number"]], "generateId": [["String", "ApplicationType type"]], "destroy": [["void"]], "getId": [["String", "String childId"]], "getChildName": [["String", "String childId"]]}, "className": "UUIDService", "renamed": ["Class", "<", "?", "extends", "Service", ">", "function", "(", ")", "{", "return", "UUIDService", ".", "class", ";", "}"], "nl": "Return the public interface for UUID service.", "nlToks": ["Return", "the", "public", "interface", "for", "UUID", "service", "."], "path": "pingpangkuangmo/oozie/tree/master/core/src/main/java/org/apache/oozie/service/UUIDService.java", "idx": 1089}
{"memberVariables": {"reader": "BufferedReader", "urlConn": "URLConnection", "URI": "String"}, "code": ["void", "function", "(", ")", "{", "System", ".", "out", ".", "println", "(", "\"Connecting without proxy...\"", ")", ";", "HTTPDirectConnection", "dc", "=", "new", "HTTPDirectConnection", "(", "this", ".", "URI", ")", ";", "this", ".", "urlConn", "=", "dc", ".", "getURLConnection", "(", ")", ";", "}"], "memberFunctions": {"getURLConnection": [["URLConnection"]], "getBufferedReader": [["BufferedReader"]], "ProxyConnect": [["void"]]}, "className": "HTTPConnectionSelection", "renamed": ["void", "function", "(", ")", "{", "System", ".", "out", ".", "println", "(", "\"srini_string\"", ")", ";", "HTTPDirectConnection", "loc0", "=", "new", "HTTPDirectConnection", "(", "this", ".", "URI", ")", ";", "this", ".", "urlConn", "=", "loc0", ".", "getURLConnection", "(", ")", ";", "}"], "nl": "Method calling to use the direct connection.", "nlToks": ["Method", "calling", "to", "use", "the", "direct", "connection", "."], "path": "preenet/java-news-aggregator/tree/master/CJNA/src/org/cjna/net/HTTPConnectionSelection.java", "idx": 1091}
{"memberVariables": {"pattern": "String"}, "code": ["Date", "function", "(", "String", "date", ")", "{", "return", "parseUTC", "(", "date", ",", "DateTimeFormat", ".", "SQL", ")", ";", "}"], "memberFunctions": {"formatUTCtoSqlLocal": [["String", "Date date"]], "getCurrentUtcSql": [["String"]], "formatUTC": [["String", "Date date", "String format", "boolean toLocal"], ["String", "Date date", "DateTimeFormat format", "boolean toLocal"]], "getCurrentLocal": [["String", "DateTimeFormat format"]], "getPattern": [["String"]], "parseUTC": [["Date", "String date", "DateTimeFormat format"]], "formatUTCtoSqlUTC": [["String", "Date date"]]}, "className": "DateTime", "renamed": ["Date", "function", "(", "String", "arg0", ")", "{", "return", "parseUTC", "(", "arg0", ",", "DateTimeFormat", ".", "SQL", ")", ";", "}"], "nl": "Parse SQL formatted UTC dateTime", "nlToks": ["Parse", "SQL", "formatted", "UTC", "dateTime"], "path": "phramusca/JaMuz/tree/master/src/jamuz/utils/DateTime.java", "idx": 1094}
{"memberVariables": {"name": "String", "units": "String", "type": "String", "value": "Double"}, "code": ["void", "function", "(", "String", "name", ")", "{", "this", ".", "name", "=", "name", ";", "}"], "memberFunctions": {"getValue": [["double"]], "getName": [["String"]], "getType": [["String"]], "setValue": [["void", "double value"]], "getUnits": [["String"]], "isEmpty": [["boolean"]], "setType": [["void", "String type"]], "setUnits": [["void", "String units"]]}, "className": "Measurement", "renamed": ["void", "function", "(", "String", "arg0", ")", "{", "this", ".", "name", "=", "arg0", ";", "}"], "nl": "Sets the name of transducer.", "nlToks": ["Sets", "the", "name", "of", "transducer", "."], "path": "pkoziol/marine-api/tree/master/src/main/java/net/sf/marineapi/nmea/util/Measurement.java", "idx": 1096}
{"memberVariables": {"BUCKET_NAME=\"testBucket\"": "String", "mLocalOutputStream": "BufferedOutputStream", "KEY=\"testKey\"": "String", "mFile": "File", "mStream": "S3AOutputStream"}, "code": ["void", "function", "(", ")", "{", "byte", "[", "]", "b", "=", "new", "byte", "[", "10", "]", ";", "mStream", ".", "write", "(", "b", ")", ";", "mStream", ".", "close", "(", ")", ";", "Mockito", ".", "verify", "(", "mLocalOutputStream", ")", ".", "write", "(", "b", ",", "0", ",", "b", ".", "length", ")", ";", "}"], "memberFunctions": {"writeByte": [["void"]], "writeByteArrayWithRange": [["void"]], "flush": [["void"]], "before": [["void"]], "close": [["void"]]}, "className": "S3AOutputStreamTest", "renamed": ["void", "function", "(", ")", "{", "byte", "[", "]", "loc0", "=", "new", "byte", "[", "10", "]", ";", "mStream", ".", "write", "(", "loc0", ")", ";", "mStream", ".", "close", "(", ")", ";", "Mockito", ".", "verify", "(", "mLocalOutputStream", ")", ".", "write", "(", "loc0", ",", "0", ",", "loc0", ".", "length", ")", ";", "}"], "nl": "Tests to ensure  {@link S3AOutputStream#write(byte[])} calls the underlying output stream.", "nlToks": ["Tests", "to", "ensure", "-LCB-", "@link", "S3AOutputStream", "#write", "-LRB-", "byte", "-LSB-", "-RSB-", "-RRB-", "-RCB-", "calls", "the", "underlying", "output", "stream", "."], "path": "poemlin/alluxio/tree/master/underfs/s3a/src/test/java/alluxio/underfs/s3a/S3AOutputStreamTest.java", "idx": 1098}
{"memberVariables": {"instance=SentenceFactory.getInstance()": "SentenceFactory"}, "code": ["void", "function", "(", ")", "{", "Sentence", "bod", "=", "instance", ".", "createParser", "(", "BODTest", ".", "EXAMPLE", ")", ";", "assertNotNull", "(", "bod", ")", ";", "assertTrue", "(", "bod", "instanceof", "Sentence", ")", ";", "assertTrue", "(", "bod", "instanceof", "BODSentence", ")", ";", "assertTrue", "(", "bod", "instanceof", "BODParser", ")", ";", "assertEquals", "(", "BODTest", ".", "EXAMPLE", ",", "bod", ".", "toSentence", "(", ")", ")", ";", "}"], "memberFunctions": {"testRegisterInvalidParser": [["void"]], "testHasParser": [["void"]], "testUnregisterParser": [["void"]], "testListParsers": [["void"]], "testCreateParserWithNull": [["void"]], "testCreateEmptyParserWithSentenceIdStr": [["void"]], "testCreateEmptyCustomParser": [["void"]], "testCreateParserWithUnregistered": [["void"]], "testCreateEmptyParserWithSentenceId": [["void"]], "testCreateCustomParser": [["void"]], "testRegisterParserWithAlternativeBeginChar": [["void"]], "testSupportedTypesRegistered": [["void"]], "testCreateParserWithRandom": [["void"]], "setUp": [["void"]], "testGetInstance": [["void"]], "testCreateParserWithEmptyString": [["void"]]}, "className": "SentenceFactoryTest", "renamed": ["void", "function", "(", ")", "{", "Sentence", "loc0", "=", "instance", ".", "createParser", "(", "BODTest", ".", "EXAMPLE", ")", ";", "assertNotNull", "(", "loc0", ")", ";", "assertTrue", "(", "loc0", "instanceof", "Sentence", ")", ";", "assertTrue", "(", "loc0", "instanceof", "BODSentence", ")", ";", "assertTrue", "(", "loc0", "instanceof", "BODParser", ")", ";", "assertEquals", "(", "BODTest", ".", "EXAMPLE", ",", "loc0", ".", "toSentence", "(", ")", ")", ";", "}"], "nl": "Test method for {@link net.sf.marineapi.nmea.parser.SentenceFactory#createParser(java.lang.String)}.", "nlToks": ["Test", "method", "for", "-LCB-", "@link", "net.sf.marineapi.nmea.parser.SentenceFactory", "#createParser", "-LRB-", "java.lang.String", "-RRB-", "-RCB-", "."], "path": "pkoziol/marine-api/tree/master/src/test/java/net/sf/marineapi/nmea/parser/SentenceFactoryTest.java", "idx": 1099}
{"memberVariables": {"listeners": "List<StateListener>", "DEFAULT_ROTATION=Rotation.NONE": "Rotation", "rotation": "Rotation", "DEFAULT_POWER=0.0": "double", "DEFAULT_DIRECTION=0.5 * Math.PI": "double", "DEFAULT_TEXT=\"\"": "String", "text": "String", "power": "double", "direction": "double"}, "code": ["void", "function", "(", "StateListener", "listener", ")", "{", "this", ".", "listeners", ".", "add", "(", "listener", ")", ";", "}"], "memberFunctions": {"getPower": [["double"]], "getDirection": [["double"]], "getText": [["String"]], "getRotation": [["Rotation"]], "reset": [["void"]], "setPower": [["void", "double power"]], "removeListener": [["void", "StateListener listener"]], "setRotation": [["void", "Rotation rotation"]], "setDirection": [["void", "double direction"]], "setText": [["void", "String text"]]}, "className": "State", "renamed": ["void", "function", "(", "StateListener", "arg0", ")", "{", "this", ".", "listeners", ".", "add", "(", "arg0", ")", ";", "}"], "nl": "Add listener.", "nlToks": ["Add", "listener", "."], "path": "phpvdb/buffer_bci/tree/master/java/imaginedMovement/nl/dcc/buffer_bci/imaginedMovement/State.java", "idx": 1100}
{"memberVariables": {"clienteEnvia": "ClienteConecta", "LOG=Logger.getLogger(ProjectManager.class)": "Logger", "instance=new ProjectManager()": "ProjectManager", "saveAction": "Action", "SAVE_STATE_PROPERTY_NAME=\"saveState\"": "String", "NO_PROJECT=\"noProject\"": "String", "creatingCurrentProject": "boolean", "listenerList=new EventListenerList()": "EventListenerList", "CURRENT_PROJECT_PROPERTY_NAME=\"currentProject\"": "String", "currentProject": "Project", "event": "PropertyChangeEvent"}, "code": ["void", "function", "(", "Project", "oldProject", ")", "{", "if", "(", "currentProject", "==", "oldProject", ")", "{", "currentProject", "=", "null", ";", "}", "oldProject", ".", "remove", "(", ")", ";", "}"], "memberFunctions": {"setSaveAction": [["void", "Action save"]], "getManager": [["ProjectManager"]], "getCurrentProject": [["Project"]], "firePropertyChanged": [["void", "String propertyName", "Object oldValue", "Object newValue"]], "createDefaultDiagrams": [["void"]], "isSaveActionEnabled": [["boolean"]], "setSaveEnabled": [["void", "boolean newValue"]], "setCurrentProject": [["void", "Project newProject"]], "makeEmptyProject": [["Project"], ["Project", "final boolean addDefaultDiagrams"]], "removePropertyChangeListener": [["void", "PropertyChangeListener listener"]], "addPropertyChangeListener": [["void", "PropertyChangeListener listener"]], "execute": [["Object", "final ModelCommand command"]]}, "className": "ProjectManager", "renamed": ["void", "function", "(", "Project", "arg0", ")", "{", "if", "(", "currentProject", "==", "arg0", ")", "{", "currentProject", "=", "null", ";", "}", "arg0", ".", "remove", "(", ")", ";", "}"], "nl": "Remove the project.", "nlToks": ["Remove", "the", "project", "."], "path": "pichiliani/CoArgoUML/tree/master/v0.24/fonte/src/argouml-app/src/org/argouml/kernel/ProjectManager.java", "idx": 1102}
{"memberVariables": {"duration": "long", "content=\"\"": "String"}, "code": ["boolean", "function", "(", ")", "{", "return", "StringUtils", ".", "contains", "(", "content", ",", "\"timed out\"", ")", ";", "}"], "memberFunctions": {"setDuration": [["void", "long duration"]], "isConnectionReset": [["boolean"]], "setContent": [["void", "String content"]], "getDuration": [["long"]], "isSOAPFault": [["boolean"]], "getContent": [["String"]], "isEmptyResponse": [["boolean"]]}, "className": "Metric", "renamed": ["boolean", "function", "(", ")", "{", "return", "StringUtils", ".", "contains", "(", "content", ",", "\"srini_string\"", ")", ";", "}"], "nl": "Check for read timed out", "nlToks": ["Check", "for", "read", "timed", "out"], "path": "0xwindows/WS-Attacker/tree/master/libs/Intelligent_Denial_of_Service_Library/src/main/java/wsattacker/library/intelligentdos/common/Metric.java", "idx": 1103}
{"memberVariables": {"elem": "Element", "repaintListener": "RepaintListener", "imageResourceLoader": "ImageResourceLoader", "width": "int", "formSubmissionListener": "FormSubmissionListener", "imageComponents": "Map", "uri": "String", "forms": "LinkedHashMap", "height": "int"}, "code": ["void", "function", "(", "Element", "e", ",", "ReplacedElement", "cc", ",", "String", "uri", ",", "final", "int", "cssWidth", ",", "final", "int", "cssHeight", ")", "{", "if", "(", "imageComponents", "==", "null", ")", "{", "imageComponents", "=", "new", "HashMap", "(", ")", ";", "}", "CacheKey", "key", "=", "new", "CacheKey", "(", "e", ",", "uri", ",", "cssWidth", ",", "cssHeight", ")", ";", "imageComponents", ".", "put", "(", "key", ",", "cc", ")", ";", "}"], "memberFunctions": {"getParentForm": [["Element", "Element e", "LayoutContext context"]], "replaceImage": [["ReplacedElement", "UserAgentCallback uac", "LayoutContext context", "Element elem", "int cssWidth", "int cssHeight"]], "getForm": [["XhtmlForm", "Element e"]], "addForm": [["void", "Element e", "XhtmlForm f"]], "newIrreplaceableImageElement": [["ReplacedElement", "int cssWidth", "int cssHeight"]], "hashCode": [["int"]], "setFormSubmissionListener": [["void", "FormSubmissionListener fsl"]], "lookupImageReplacedElement": [["ReplacedElement", "final Element elem", "final String ruri", "final int cssWidth", "final int cssHeight"], ["ReplacedElement", "Element e", "String uri"]], "equals": [["boolean", "final Object o"]], "createReplacedElement": [["ReplacedElement", "LayoutContext context", "BlockBox box", "UserAgentCallback uac", "int cssWidth", "int cssHeight"]], "reset": [["void"]], "remove": [["void", "Element e"]]}, "className": "SwingReplacedElementFactory", "renamed": ["void", "function", "(", "Element", "arg0", ",", "ReplacedElement", "arg1", ",", "String", "arg2", ",", "final", "int", "arg3", ",", "final", "int", "arg4", ")", "{", "if", "(", "imageComponents", "==", "null", ")", "{", "imageComponents", "=", "new", "HashMap", "(", ")", ";", "}", "CacheKey", "loc0", "=", "new", "CacheKey", "(", "arg0", ",", "arg2", ",", "arg3", ",", "arg4", ")", ";", "imageComponents", ".", "put", "(", "loc0", ",", "arg1", ")", ";", "}"], "nl": "Adds a ReplacedElement containing an image to a cache of images for quick lookup.", "nlToks": ["Adds", "a", "ReplacedElement", "containing", "an", "image", "to", "a", "cache", "of", "images", "for", "quick", "lookup", "."], "path": "plutogeek/flyingsaucer/tree/master/flying-saucer-core/src/main/java/org/xhtmlrenderer/swing/SwingReplacedElementFactory.java", "idx": 1104}
{"memberVariables": {"expectedDataUnitId": "Long", "seqNo": "Long", "dataSetId": "Long", "dataUnitId": "Long", "expectedValue": "String", "actualValue": "String", "expectedDataSetId": "Long", "errorCode": "String", "testId": "Long", "failedAttributeName": "String", "srcFileName": "String", "errorMsg": "String"}, "code": ["void", "function", "(", "String", "errorMsg", ")", "{", "this", ".", "errorMsg", "=", "errorMsg", ";", "}"], "memberFunctions": {"setExpectedValue": [["void", "String expectedValue"]], "getExpectedValue": [["String"]], "getExpectedDataSetId": [["Long"]], "setExpectedDataSetId": [["void", "Long expectedDataSetId"]], "setActualValue": [["void", "String actualValue"]], "getDataSetId": [["Long"]], "setSrcFileName": [["void", "String srcFileName"]], "getExpectedDataUnitId": [["Long"]], "setExpectedDataUnitId": [["void", "Long expectedDataUnitId"]], "getSrcFileName": [["String"]], "getSeqNo": [["Long"]], "getFailedAttributeName": [["String"]], "setTestId": [["void", "Long testId"]], "setFailedAttributeName": [["void", "String failedAttributeName"]], "getTestId": [["Long"]], "setErrorCode": [["void", "String errorCode"]], "getActualValue": [["String"]], "getDataUnitId": [["Long"]], "setSeqNo": [["void", "Long seqNo"]], "getErrorCode": [["String"]], "setDataUnitId": [["void", "Long dataUnitId"]], "setDataSetId": [["void", "Long dataSetId"]], "toString": [["String"]], "getErrorMsg": [["String"]]}, "className": "TestResultDetailsDTO", "renamed": ["void", "function", "(", "String", "arg0", ")", "{", "this", ".", "errorMsg", "=", "arg0", ";", "}"], "nl": "Sets the error msg.", "nlToks": ["Sets", "the", "error", "msg", "."], "path": "pkesireddy/portico_fletcher/tree/master/FetcherTesterService/src/main/java/org/ithaka/cm/fetchertester/model/TestResultDetailsDTO.java", "idx": 1105}
{"memberVariables": {"federationPullResults=new ConcurrentHashMap<String,FederationModel>()": "Map<String,FederationModel>", "notificationManager": "INotificationManager", "settings": "IStoredSettings", "federationRegistrations=Collections.synchronizedList(new ArrayList<FederationModel>())": "List<FederationModel>", "runtimeManager": "IRuntimeManager", "logger=LoggerFactory.getLogger(getClass())": "Logger", "repositoryManager": "IRepositoryManager"}, "code": ["List", "<", "String", ">", "function", "(", ")", "{", "List", "<", "String", ">", "tokens", "=", "new", "ArrayList", "<", "String", ">", "(", ")", ";", "for", "(", "FederationToken", "type", ":", "FederationToken", ".", "values", "(", ")", ")", "{", "tokens", ".", "add", "(", "getFederationToken", "(", "type", ")", ")", ";", "}", "for", "(", "String", "set", ":", "settings", ".", "getStrings", "(", "Keys", ".", "federation", ".", "sets", ")", ")", "{", "tokens", ".", "add", "(", "getFederationToken", "(", "set", ")", ")", ";", "}", "return", "tokens", ";", "}"], "memberFunctions": {"deletePendingFederationProposal": [["boolean", "FederationProposal proposal"]], "authenticate": [["UserModel", "HttpServletRequest httpRequest"]], "getFederationRegistration": [["FederationModel", "String url", "String name"]], "getFederationUser": [["UserModel"]], "acknowledgeFederationStatus": [["boolean", "String identification", "FederationModel registration"]], "getPendingFederationProposals": [["List<FederationProposal>"]], "getFederationResultRegistrations": [["List<FederationModel>"]], "start": [["FederationManager"]], "canFederate": [["boolean"]], "getPendingFederationProposal": [["FederationProposal", "String token"]], "getRepositories": [["Map<String,RepositoryModel>", "String gitblitUrl", "String token"]], "stop": [["FederationManager"]], "getFederationSets": [["List<FederationSet>", "String gitblitUrl"]], "getProposalsFolder": [["File"]], "submitFederationProposal": [["boolean", "FederationProposal proposal", "String gitblitUrl"]], "getFederationToken": [["String", "FederationToken type"], ["String", "String value"]], "createFederationProposal": [["FederationProposal", "String gitblitUrl", "String token"]], "getFederationRegistrations": [["List<FederationModel>"]], "validateFederationRequest": [["boolean", "FederationRequest req", "String token"]]}, "className": "FederationManager", "renamed": ["List", "<", "String", ">", "function", "(", ")", "{", "List", "<", "String", ">", "loc0", "=", "new", "ArrayList", "<", "String", ">", "(", ")", ";", "for", "(", "FederationToken", "loc1", ":", "FederationToken", ".", "values", "(", ")", ")", "{", "loc0", ".", "add", "(", "getFederationToken", "(", "loc1", ")", ")", ";", "}", "for", "(", "String", "loc1", ":", "settings", ".", "getStrings", "(", "Keys", ".", "federation", ".", "sets", ")", ")", "{", "loc0", ".", "add", "(", "getFederationToken", "(", "loc1", ")", ")", ";", "}", "return", "loc0", ";", "}"], "nl": "Returns the list of possible federation tokens for this Gitblit instance.", "nlToks": ["Returns", "the", "list", "of", "possible", "federation", "tokens", "for", "this", "Gitblit", "instance", "."], "path": "pombreda/gitblit/tree/master/src/main/java/com/gitblit/manager/FederationManager.java", "idx": 1106}
{"memberVariables": {"USER_COLUMN_NAME=\"m_user_name\"": "String", "COLUMN_NAME_ID=\"username\"": "String", "USER_COLUMN_NICK=\"m_user_nick\"": "String", "COLUMN_NAME_AVATAR=\"avatar\"": "String", "USER_COLUMN_AVATAR_ID=\"m_user_avatar_id\"": "String", "USER_COLUMN_AVATA_PATH=\"m_user_avatat_path\"": "String", "PREF_TABLE_NAME=\"pref\"": "String", "USER_COLUMN_AVATAR_SUFFIX=\"m_user_avatar_suffix\"": "String", "COLUMN_NAME_DISABLED_IDS=\"disabled_ids\"": "String", "ROBOT_COLUMN_NAME_NICK=\"nick\"": "String", "ROBOT_COLUMN_NAME_AVATAR=\"avatar\"": "String", "USER_TABLE_NAME=\"t_superwechat_user\"": "String", "USER_COLUMN_AVATAR_LASTAUPDATE_TIME=\"m_user_avatar_lastupdate_time\"": "String", "COLUMN_NAME_NICK=\"nick\"": "String", "USER_COLUMN_AVATAR_TYPE=\"m_user_avatar_type\"": "String", "TABLE_NAME=\"uers\"": "String", "ROBOT_TABLE_NAME=\"robots\"": "String", "ROBOT_COLUMN_NAME_ID=\"username\"": "String", "COLUMN_NAME_DISABLED_GROUPS=\"disabled_groups\"": "String"}, "code": ["void", "function", "(", "EaseUser", "user", ")", "{", "SuperWeChatDBManager", ".", "getInstance", "(", ")", ".", "saveContact", "(", "user", ")", ";", "}"], "memberFunctions": {"getDisabledIds": [["List<String>"]], "getUser": [["User", "String username"]], "updateUser": [["boolean", "User user"]], "saveContactList": [["void", "List<EaseUser> contactList"]], "getContactList": [["Map<String,EaseUser>"]], "saveRobotUser": [["void", "List<RobotUser> robotList"]], "saveAppContact": [["void", "User user"]], "getAppContactList": [["Map<String,User>"]], "getDisabledGroups": [["List<String>"]], "setDisabledIds": [["void", "List<String> ids"]], "deleteContact": [["void", "String username"]], "setDisabledGroups": [["void", "List<String> groups"]], "deleteAppContact": [["void", "String username"]], "saveAppContactList": [["void", "ArrayList<User> mList"]], "getRobotUser": [["Map<String,RobotUser>"]], "saveUser": [["boolean", "User user"]]}, "className": "UserDao", "renamed": ["void", "function", "(", "EaseUser", "arg0", ")", "{", "SuperWeChatDBManager", ".", "getInstance", "(", ")", ".", "saveContact", "(", "arg0", ")", ";", "}"], "nl": "save a contact", "nlToks": ["save", "a", "contact"], "path": "15109237255/SuperWeChat/tree/master/ChatDemoUI3.0/src/cn/ucai/superwechat/db/UserDao.java", "idx": 1107}
{"memberVariables": {"INTERVAL=TARGET_TIMESPAN / TARGET_SPACING": "int", "ID_UNITTESTNET=\"org.bitcoinj.unittest\"": "String", "MAX_COINS=21000000": "long", "p2shHeader": "int", "PROTOCOL_VERSION=70001": "int", "maxTarget": "BigInteger", "TARGET_SPACING=10 * 60": "int", "dnsSeeds": "String[]", "id": "String", "spendableCoinbaseDepth": "int", "dumpedPrivateKeyHeader": "int", "targetTimespan": "int", "TARGET_TIMESPAN=14 * 24 * 60* 60": "int", "PAYMENT_PROTOCOL_ID_MAINNET=\"main\"": "String", "addressHeader": "int", "MAX_MONEY=COIN.multiply(MAX_COINS)": "Coin", "bip32HeaderPriv": "int", "alertSigningKey": "byte[]", "acceptableAddressCodes": "int[]", "bip32HeaderPub": "int", "ID_MAINNET=\"org.bitcoin.production\"": "String", "packetMagic": "long", "SATOSHI_KEY=Utils.HEX.decode(\"04fc9702847840aaf195de8442ebecedf5b095cdbb9bc716bda9110971b28a49e0ead8564ff0db22209e0374782c093bb899692d524e9d6a6956e7c5ecbcd68284\")": "byte[]", "genesisBlock": "Block", "PAYMENT_PROTOCOL_ID_TESTNET=\"test\"": "String", "subsidyDecreaseBlockCount": "int", "port": "int", "ID_TESTNET=\"org.bitcoin.test\"": "String", "checkpoints=new HashMap<Integer,Sha256Hash>()": "Map<Integer,Sha256Hash>", "interval": "int", "ID_REGTEST=\"org.bitcoin.regtest\"": "String", "BIP16_ENFORCE_TIME=1333238400": "int"}, "code": ["int", "function", "(", ")", "{", "return", "p2shHeader", ";", "}"], "memberFunctions": {"regTests": [["NetworkParameters"]], "allowEmptyPeerChain": [["boolean"]], "getDumpedPrivateKeyHeader": [["int"]], "testNet2": [["NetworkParameters"]], "getBip32HeaderPub": [["int"]], "getBip32HeaderPriv": [["int"]], "testNet3": [["NetworkParameters"]], "unitTests": [["NetworkParameters"]], "getId": [["String"]], "getPaymentProtocolId": [["String"]], "getAddressHeader": [["int"]], "getAcceptableAddressCodes": [["int[]"]], "prodNet": [["NetworkParameters"]], "fromID": [["NetworkParameters", "String id"]], "getTargetTimespan": [["int"]], "getDnsSeeds": [["String[]"]], "hashCode": [["int"]], "getSpendableCoinbaseDepth": [["int"]], "testNet": [["NetworkParameters"]], "isCheckpoint": [["boolean", "int height"]], "getInterval": [["int"]], "getGenesisBlock": [["Block"]], "getSubsidyDecreaseBlockCount": [["int"]], "createGenesis": [["Block", "NetworkParameters n"]], "getMaxTarget": [["BigInteger"]], "getPacketMagic": [["long"]], "getPort": [["int"]], "getAlertSigningKey": [["byte[]"]], "equals": [["boolean", "Object o"]], "passesCheckpoint": [["boolean", "int height", "Sha256Hash hash"]], "fromPmtProtocolID": [["NetworkParameters", "String pmtProtocolId"]]}, "className": "NetworkParameters", "renamed": ["int", "function", "(", ")", "{", "return", "p2shHeader", ";", "}"], "nl": "First byte of a base58 encoded P2SH address.  P2SH addresses are defined as part of BIP0013.", "nlToks": ["First", "byte", "of", "a", "base58", "encoded", "P2SH", "address", ".", "P2SH", "addresses", "are", "defined", "as", "part", "of", "BIP0013", "."], "path": "1000000000001/bitcoinj/tree/master/core/src/main/java/org/bitcoinj/core/NetworkParameters.java", "idx": 1108}
{"memberVariables": {"steps=new Array<Step>()": "Array<Step>", "x": "int", "y": "int"}, "code": ["int", "function", "(", "int", "index", ")", "{", "return", "getStep", "(", "index", ")", ".", "y", ";", "}"], "memberFunctions": {"getX": [["int", "int index"], ["int"]], "contains": [["boolean", "int x", "int y"]], "prependStep": [["void", "int x", "int y"]], "hashCode": [["int"]], "getStep": [["Step", "int index"]], "equals": [["boolean", "Object other"]], "getSteps": [["Array<Step>"]], "getLength": [["int"]], "toString": [["String"]], "appendStep": [["void", "int x", "int y"]]}, "className": "Path", "renamed": ["int", "function", "(", "int", "arg0", ")", "{", "return", "getStep", "(", "arg0", ")", ".", "y", ";", "}"], "nl": "Get the y coordinate for the step at the given index", "nlToks": ["Get", "the", "y", "coordinate", "for", "the", "step", "at", "the", "given", "index"], "path": "prativa/shadowstruggles/tree/master/Shadow Struggles/model/br/edu/ifsp/pds/shadowstruggles/model/rpg/pathfinder/Path.java", "idx": 1109}
{"memberVariables": {"log=LogFactory.getLog(getClass())": "Log", "DEFAULT_SCHEME_PRIORITY=Collections.unmodifiableList(Arrays.asList(new String[]{AuthPolicy.SPNEGO,AuthPolicy.NTLM,AuthPolicy.DIGEST,AuthPolicy.BASIC}))": "List<String>"}, "code": ["List", "<", "String", ">", "function", "(", ")", "{", "return", "DEFAULT_SCHEME_PRIORITY", ";", "}"], "memberFunctions": {"selectScheme": [["AuthScheme", "final Map<String,Header> challenges", "final HttpResponse response", "final HttpContext context"]], "parseChallenges": [["Map<String,Header>", "final Header[] headers"]]}, "className": "AbstractAuthenticationHandler", "renamed": ["List", "<", "String", ">", "function", "(", ")", "{", "return", "DEFAULT_SCHEME_PRIORITY", ";", "}"], "nl": "Returns default list of auth scheme names in their order of preference.", "nlToks": ["Returns", "default", "list", "of", "auth", "scheme", "names", "in", "their", "order", "of", "preference", "."], "path": "pritamkhose/open-gpstracker.code/tree/master/external_sources/httpclient-4.1.1/httpclient/src/main/java/org/apache/ogt/http/impl/client/AbstractAuthenticationHandler.java", "idx": 1111}
{"memberVariables": {"USER=\"USER\"": "String", "oozieLogRotation=-1": "int", "OOZIE_LOG_DIR=\"oozie.log.dir\"": "String", "log": "XLog", "GROUP=\"GROUP\"": "String", "logOverWS=true": "boolean", "LOG4J_FILE=\"oozie.log4j.file\"": "String", "STARTUP_MESSAGE=\"{E}\" + \" ******************************************************************************* {E}\" + \"  STARTUP MSG: Oozie BUILD_VERSION [{0}] compiled by [{1}] on [{2}]{E}\"+ \"  STARTUP MSG:       revision [{3}]@[{4}]{E}\"+ \"*******************************************************************************\"": "String", "LOG4J_RELOAD=\"oozie.log4j.reload\"": "String", "log4jFileName": "String", "DEFAULT_RELOAD_INTERVAL=\"10\"": "String", "oozieLogName": "String", "interval": "long", "fromClasspath": "boolean", "INSTRUMENTATION_GROUP=\"logging\"": "String", "oozieLogPath": "String", "DEFAULT_LOG4J_PROPERTIES=\"oozie-log4j.properties\"": "String"}, "code": ["void", "function", "(", ")", "{", "LogManager", ".", "shutdown", "(", ")", ";", "XLog", ".", "Info", ".", "reset", "(", ")", ";", "XLogStreamer", ".", "Filter", ".", "reset", "(", ")", ";", "}"], "memberFunctions": {"init": [["void", "Services services"]], "getInterface": [["Class<? extends Service>"]], "getFromClasspath": [["boolean"]], "extractInfoForLogWebService": [["void", "InputStream is"]], "instrument": [["void", "Instrumentation instr"]], "streamLog": [["void", "XLogStreamer.Filter filter", "Date startTime", "Date endTime", "Writer writer"]], "getLog4jProperties": [["String"]]}, "className": "XLogService", "renamed": ["void", "function", "(", ")", "{", "LogManager", ".", "shutdown", "(", ")", ";", "XLog", ".", "Info", ".", "reset", "(", ")", ";", "XLogStreamer", ".", "Filter", ".", "reset", "(", ")", ";", "}"], "nl": "Destroy the log service.", "nlToks": ["Destroy", "the", "log", "service", "."], "path": "pingpangkuangmo/oozie/tree/master/core/src/main/java/org/apache/oozie/service/XLogService.java", "idx": 1112}
{"memberVariables": {"mapsClient": "GoogleMapsClientManaged"}, "code": ["DirectionsLeg", "[", "]", "function", "(", "double", "originLat", ",", "double", "originLon", ",", "double", "destLat", ",", "double", "destLon", ")", "{", "DirectionsRoute", "[", "]", "result", "=", "DirectionsApi", ".", "newRequest", "(", "mapsClient", ".", "getContext", "(", ")", ")", ".", "origin", "(", "new", "LatLng", "(", "originLat", ",", "originLon", ")", ")", ".", "destination", "(", "new", "LatLng", "(", "destLat", ",", "destLon", ")", ")", ".", "mode", "(", "TravelMode", ".", "WALKING", ")", ".", "await", "(", ")", ";", "if", "(", "null", "!=", "result", ")", "{", "return", "result", "[", "0", "]", ".", "legs", ";", "}", "return", "new", "DirectionsLeg", "[", "0", "]", ";", "}"], "memberFunctions": {"start": [["void"]]}, "className": "DirectionsService", "renamed": ["DirectionsLeg", "[", "]", "function", "(", "double", "arg0", ",", "double", "arg1", ",", "double", "arg2", ",", "double", "arg3", ")", "{", "DirectionsRoute", "[", "]", "loc0", "=", "DirectionsApi", ".", "newRequest", "(", "mapsClient", ".", "getContext", "(", ")", ")", ".", "origin", "(", "new", "LatLng", "(", "arg0", ",", "arg1", ")", ")", ".", "destination", "(", "new", "LatLng", "(", "arg2", ",", "arg3", ")", ")", ".", "mode", "(", "TravelMode", ".", "WALKING", ")", ".", "await", "(", ")", ";", "if", "(", "null", "!=", "loc0", ")", "{", "return", "loc0", "[", "0", "]", ".", "legs", ";", "}", "return", "new", "DirectionsLeg", "[", "0", "]", ";", "}"], "nl": "Returns", "nlToks": ["Returns"], "path": "pilotrex/metro-caracas-service/tree/master/src/main/java/com/metrocaracas/client/service/DirectionsService.java", "idx": 1117}
{"memberVariables": {"cssPrimitiveValue": "org.w3c.dom.css.CSSPrimitiveValue", "identIsSet": "boolean", "origin": "int", "USER_NORMAL=2": "int", "_fingerprint": "String", "propName": "String", "AUTHOR_NORMAL=3": "int", "important": "boolean", "AUTHOR_IMPORTANT=4": "int", "cssName": "CSSName", "USER_AGENT=1": "int", "IMPORTANCE_AND_ORIGIN_COUNT=6": "int", "USER_IMPORTANT=5": "int", "_identVal": "IdentValue"}, "code": ["String", "function", "(", ")", "{", "return", "propName", ";", "}"], "memberFunctions": {"getValue": [["org.w3c.dom.css.CSSPrimitiveValue"]], "getImportanceAndOrigin": [["int"]], "getOrigin": [["int"]], "getCSSName": [["CSSName"]], "getDeclarationStandardText": [["String"]], "isImportant": [["boolean"]], "toString": [["String"]], "asIdentValue": [["IdentValue"]], "getFingerprint": [["String"]]}, "className": "PropertyDeclaration", "renamed": ["String", "function", "(", ")", "{", "return", "propName", ";", "}"], "nl": "Returns the CSS name of this property, e.g. \"font-family\".", "nlToks": ["Returns", "the", "CSS", "name", "of", "this", "property", ",", "e.g.", "``", "font-family", "''", "."], "path": "plutogeek/flyingsaucer/tree/master/flying-saucer-core/src/main/java/org/xhtmlrenderer/css/sheet/PropertyDeclaration.java", "idx": 1119}
{"memberVariables": {"bus": "Bus", "routingInterceptors=new CopyOnWriteArrayList<Interceptor<? extends Message>>()": "List<Interceptor<? extends Message>>", "loader": "ClassLoader", "ENDPOINTS=\"multipleEndpointObserver.endpoints\"": "String", "endpoints=new CopyOnWriteArraySet<Endpoint>()": "Set<Endpoint>", "bindingInterceptors=new CopyOnWriteArrayList<Interceptor<? extends Message>>()": "List<Interceptor<? extends Message>>"}, "code": ["Message", "function", "(", "Message", "message", ")", "{", "return", "message", ";", "}"], "memberFunctions": {"createChain": [["PhaseInterceptorChain"]], "getEndpoints": [["Set<Endpoint>"]], "setExchangeProperties": [["void", "Exchange exchange", "Message m"]], "getRoutingInterceptors": [["List<Interceptor<? extends Message>>"]], "onMessage": [["void", "Message message"]], "getBindingInterceptors": [["List<Interceptor<? extends Message>>"]]}, "className": "MultipleEndpointObserver", "renamed": ["Message", "function", "(", "Message", "arg0", ")", "{", "return", "arg0", ";", "}"], "nl": "Give a chance for a Binding to customize their message", "nlToks": ["Give", "a", "chance", "for", "a", "Binding", "to", "customize", "their", "message"], "path": "primesign/cxf/tree/master/core/src/main/java/org/apache/cxf/transport/MultipleEndpointObserver.java", "idx": 1123}
{"memberVariables": {"actionType": "ActionType", "data": "String", "suggestions": "ArrayList<String>", "to": "String", "filters": "Filters", "CREATOR=new Creator<GameRequestContent>(){\n  public GameRequestContent createFromParcel(  final Parcel in){\n    return new GameRequestContent(in);\n  }\n  public GameRequestContent[] newArray(  final int size){\n    return new GameRequestContent[size];\n  }\n}\n": "Creator<GameRequestContent>", "message": "String", "title": "String", "objectId": "String"}, "code": ["Filters", "function", "(", ")", "{", "return", "this", ".", "filters", ";", "}"], "memberFunctions": {"getActionType": [["ActionType"]], "readFrom": [["Builder", "final GameRequestContent content"], ["Builder", "final Parcel parcel"]], "setData": [["Builder", "final String data"]], "getMessage": [["String"]], "newArray": [["GameRequestContent[]", "final int size"]], "setTitle": [["Builder", "final String title"]], "getTo": [["String"]], "createFromParcel": [["GameRequestContent", "final Parcel in"]], "setObjectId": [["Builder", "String objectId"]], "setMessage": [["Builder", "final String message"]], "describeContents": [["int"]], "getObjectId": [["String"]], "getSuggestions": [["ArrayList<String>"]], "getTitle": [["String"]], "setActionType": [["Builder", "ActionType actionType"]], "build": [["GameRequestContent"]], "setFilters": [["Builder", "Filters filters"]], "setTo": [["Builder", "final String to"]], "setSuggestions": [["Builder", "ArrayList<String> suggestions"]], "writeToParcel": [["void", "final Parcel out", "final int flags"]], "getData": [["String"]]}, "className": "GameRequestContent", "renamed": ["Filters", "function", "(", ")", "{", "return", "this", ".", "filters", ";", "}"], "nl": "Get the filters", "nlToks": ["Get", "the", "filters"], "path": "adament67/testproject/tree/master/Android Projects/studio/EstiloRobe/facebook/src/main/java/com/facebook/share/model/GameRequestContent.java", "idx": 1124}
{"memberVariables": {"engine": "JAXPXPathEngine", "l": "List<Node>"}, "code": ["String", "function", "(", "String", "select", ",", "Document", "document", ")", "{", "try", "{", "return", "engine", ".", "evaluate", "(", "select", ",", "new", "DOMSource", "(", "document", ")", ")", ";", "}", "catch", "(", "XMLUnitException", "ex", ")", "{", "throw", "new", "XpathException", "(", "ex", ".", "getCause", "(", ")", ")", ";", "}", "}"], "memberFunctions": {"item": [["Node", "int idx"]], "setNamespaceContext": [["void", "NamespaceContext ctx"]], "getMatchingNodes": [["NodeList", "String select", "Document document"]], "getLength": [["int"]]}, "className": "Jaxp13XpathEngine", "renamed": ["String", "function", "(", "String", "arg0", ",", "Document", "arg1", ")", "{", "try", "{", "return", "engine", ".", "evaluate", "(", "arg0", ",", "new", "DOMSource", "(", "arg1", ")", ")", ";", "}", "catch", "(", "XMLUnitException", "loc0", ")", "{", "throw", "new", "XpathException", "(", "loc0", ".", "getCause", "(", ")", ")", ";", "}", "}"], "nl": "Evaluate the result of executing the specified xpath syntax select expression on the specified document", "nlToks": ["Evaluate", "the", "result", "of", "executing", "the", "specified", "xpath", "syntax", "select", "expression", "on", "the", "specified", "document"], "path": "phbenisc/xmlunit/tree/master/xmlunit-legacy/src/main/java/org/custommonkey/xmlunit/jaxp13/Jaxp13XpathEngine.java", "idx": 1125}
{"memberVariables": {"locationPositions": "Hashtable<String,Point2D>", "links": "LabeledGraph<String,Double>"}, "code": ["void", "function", "(", ")", "{", "links", ".", "clear", "(", ")", ";", "}"], "memberFunctions": {"getDistance": [["Double", "String fromLocation", "String toLocation"]], "clear": [["void"]], "randomlyGenerateDestination": [["String"]], "setPosition": [["void", "String loc", "double x", "double y"]], "addBidirectionalLink": [["void", "String fromLocation", "String toLocation", "Double distance"]], "removeUnidirectionalLink": [["void", "String fromLocation", "String toLocation"]], "getPosition": [["Point2D", "String loc"]], "removeBidirectionalLink": [["void", "String fromLocation", "String toLocation"]], "isLocation": [["boolean", "String str"]], "getLocations": [["List<String>"]], "addUnidirectionalLink": [["void", "String fromLocation", "String toLocation", "Double distance"]], "getLocationsLinkedTo": [["List<String>", "String fromLocation"]], "setDistAndDirToRefLocation": [["void", "String loc", "double dist", "int dir"]]}, "className": "ExtendableMap", "renamed": ["void", "function", "(", ")", "{", "links", ".", "clear", "(", ")", ";", "}"], "nl": "Clears all connections but keeps location position informations.", "nlToks": ["Clears", "all", "connections", "but", "keeps", "location", "position", "informations", "."], "path": "peterplupo/ia201102/tree/master/trabalho1/aima-core/src/main/java/aima/core/environment/map/ExtendableMap.java", "idx": 1126}
{"memberVariables": {"typeName": "java.util.List", "CK_ADD_ONLY=new ChangeableKindEnum(\"ck_addOnly\")": "ChangeableKindEnum", "CK_CHANGEABLE=new ChangeableKindEnum(\"ck_changeable\")": "ChangeableKindEnum", "literalName": "java.lang.String", "CK_FROZEN=new ChangeableKindEnum(\"ck_frozen\")": "ChangeableKindEnum"}, "code": ["java", ".", "lang", ".", "Object", "function", "(", ")", "{", "try", "{", "return", "forName", "(", "literalName", ")", ";", "}", "catch", "(", "java", ".", "lang", ".", "IllegalArgumentException", "e", ")", "{", "throw", "new", "java", ".", "io", ".", "InvalidObjectException", "(", "e", ".", "getMessage", "(", ")", ")", ";", "}", "}"], "memberFunctions": {"forName": [["ChangeableKind", "java.lang.String name"]], "refTypeName": [["java.util.List"]], "hashCode": [["int"]], "equals": [["boolean", "java.lang.Object o"]], "toString": [["java.lang.String"]]}, "className": "ChangeableKindEnum", "renamed": ["java", ".", "lang", ".", "Object", "function", "(", ")", "{", "try", "{", "return", "forName", "(", "literalName", ")", ";", "}", "catch", "(", "java", ".", "lang", ".", "IllegalArgumentException", "loc0", ")", "{", "throw", "new", "java", ".", "io", ".", "InvalidObjectException", "(", "loc0", ".", "getMessage", "(", ")", ")", ";", "}", "}"], "nl": "Resolves serialized instance of enumeration value.", "nlToks": ["Resolves", "serialized", "instance", "of", "enumeration", "value", "."], "path": "pichiliani/CoArgoUML/tree/master/v0.24/fonte/src/argouml-core-model-mdr/build/java/org/omg/uml/foundation/datatypes/ChangeableKindEnum.java", "idx": 1127}
{"memberVariables": {"differenceGroups": "HashMap<String,DifferenceGroup>"}, "code": ["void", "function", "(", "String", "identifier", ",", "DifferenceGroup", "differenceGroup", ")", "{", "this", ".", "differenceGroups", ".", "put", "(", "identifier", ",", "differenceGroup", ")", ";", "}"], "memberFunctions": {"getDifferenceGroups": [["HashMap<String,DifferenceGroup>"]], "removeDifferenceGroup": [["void", "String identifier"]], "clear": [["void"]], "setDifferenceGroups": [["void", "HashMap<String,DifferenceGroup> differenceGroups"]]}, "className": "DifferenceModel", "renamed": ["void", "function", "(", "String", "arg0", ",", "DifferenceGroup", "arg1", ")", "{", "this", ".", "differenceGroups", ".", "put", "(", "arg0", ",", "arg1", ")", ";", "}"], "nl": "Add a difference group. If the difference group identifier already exists the old difference group will be overwritten.", "nlToks": ["Add", "a", "difference", "group", ".", "If", "the", "difference", "group", "identifier", "already", "exists", "the", "old", "difference", "group", "will", "be", "overwritten", "."], "path": "plt-tud/r43ples/tree/master/src/main/java/de/tud/plt/r43ples/merging/model/structure/DifferenceModel.java", "idx": 1128}
{"memberVariables": {"mWriter": "Writer", "CONTROL_CHAR_MAP=new String[]{\"\\\\u0000\",\"\\\\u0001\",\"\\\\u0002\",\"\\\\u0003\",\"\\\\u0004\",\"\\\\u0005\",\"\\\\u0006\",\"\\\\u0007\",\"\\\\b\",\"\\\\t\",\"\\\\n\",\"\\\\u000b\",\"\\\\f\",\"\\\\r\",\"\\\\u000e\",\"\\\\u000f\",\"\\\\u0010\",\"\\\\u0011\",\"\\\\u0012\",\"\\\\u0013\",\"\\\\u0014\",\"\\\\u0015\",\"\\\\u0016\",\"\\\\u0017\",\"\\\\u0018\",\"\\\\u0019\",\"\\\\u001a\",\"\\\\u001b\",\"\\\\u001c\",\"\\\\u001d\",\"\\\\u001e\",\"\\\\u001f\"}": "String[]", "ARRAY=1": "byte", "OBJECT_VALUE=3": "byte", "itemCount=0": "int", "type": "byte", "UNKNOWN=0": "byte", "OBJECT=2": "byte", "mState=new State(UNKNOWN)": "State", "mStack=new Stack<State>()": "Stack<State>"}, "code": ["JSONWriter", "function", "(", ")", "{", "beforeValue", "(", ")", ";", "mWriter", ".", "write", "(", "JSON", ".", "LSQUARE", ")", ";", "mStack", ".", "push", "(", "mState", ")", ";", "mState", "=", "new", "State", "(", "ARRAY", ")", ";", "return", "this", ";", "}"], "memberFunctions": {"valueBoolean": [["JSONWriter", "boolean value"]], "valueNull": [["JSONWriter"]], "objectItem": [["JSONWriter", "String name"]], "beforeValue": [["void"]], "objectBegin": [["JSONWriter"]], "objectEnd": [["JSONWriter"]], "valueInt": [["JSONWriter", "int value"]], "arrayEnd": [["JSONWriter"]], "valueFloat": [["JSONWriter", "float value"]], "valueString": [["JSONWriter", "String value"]], "valueLong": [["JSONWriter", "long value"]], "valueDouble": [["JSONWriter", "double value"]], "escape": [["String", "String str"]], "beforeObjectItem": [["void"]]}, "className": "JSONWriter", "renamed": ["JSONWriter", "function", "(", ")", "{", "beforeValue", "(", ")", ";", "mWriter", ".", "write", "(", "JSON", ".", "LSQUARE", ")", ";", "mStack", ".", "push", "(", "mState", ")", ";", "mState", "=", "new", "State", "(", "ARRAY", ")", ";", "return", "this", ";", "}"], "nl": "array begin.", "nlToks": ["array", "begin", "."], "path": "acupple/dubbo/tree/master/dubbo-common/src/main/java/com/alibaba/dubbo/common/json/JSONWriter.java", "idx": 1129}
{"memberVariables": {"instance": "GSASentence", "EXAMPLE=\"$GPGSA,A,3,02,,,07,,09,24,26,,,,,1.6,1.6,1.0*3D\"": "String", "empty": "GSASentence"}, "code": ["void", "function", "(", ")", "{", "double", "hdop", "=", "instance", ".", "getHorizontalDOP", "(", ")", ";", "assertEquals", "(", "1.6", ",", "hdop", ",", "0.001", ")", ";", "}"], "memberFunctions": {"testGetFixStatus": [["void"]], "testSetFixStatus": [["void"]], "testGetPositionDOP": [["void"]], "testGetSatelliteIds": [["void"]], "testConstructor": [["void"]], "testSetPositionDOP": [["void"]], "testGetVerticalDOP": [["void"]], "testSetFaaMode": [["void"]], "testSetHorizontalDOP": [["void"]], "setUp": [["void"]], "testGetFaaMode": [["void"]], "testSetVerticalDOP": [["void"]], "testSetSatelliteIds": [["void"]]}, "className": "GSATest", "renamed": ["void", "function", "(", ")", "{", "double", "loc0", "=", "instance", ".", "getHorizontalDOP", "(", ")", ";", "assertEquals", "(", "1.6", ",", "loc0", ",", "0.001", ")", ";", "}"], "nl": "Test method for {@link net.sf.marineapi.nmea.parser.GSAParser#getHorizontalDOP()}.", "nlToks": ["Test", "method", "for", "-LCB-", "@link", "net.sf.marineapi.nmea.parser.GSAParser", "#getHorizontalDOP", "-LRB-", "-RRB-", "-RCB-", "."], "path": "pkoziol/marine-api/tree/master/src/test/java/net/sf/marineapi/nmea/parser/GSATest.java", "idx": 1130}
{"memberVariables": {"SUPPORTEDLANGUAGES={{\"fr\",\"\",\"\"},{\"de\",\"\",\"\"},{\"en\",\"GB\",\"\"},{\"es\",\"\",\"\"},null}": "String[][]"}, "code": ["void", "function", "(", "ResourceBundle", "b", ")", "{", "Set", "<", "Object", ">", "set", "=", "new", "HashSet", "<", "Object", ">", "(", ")", ";", "for", "(", "Enumeration", "e", "=", "b", ".", "getKeys", "(", ")", ";", "e", ".", "hasMoreElements", "(", ")", ";", ")", "{", "Object", "c", "=", "e", ".", "nextElement", "(", ")", ";", "Assert", ".", "assertTrue", "(", "\"Duplicate key \"\"", "+", "c", "+", "\"\" in \"", "+", "b", ".", "getClass", "(", ")", ".", "getName", "(", ")", ",", "!", "set", ".", "contains", "(", "c", ")", ")", ";", "set", ".", "add", "(", "c", ")", ";", "}", "}"], "memberFunctions": {"checkContainsAllFrom": [["void", "ResourceBundle b", "String[] tags"]], "bundleContains": [["boolean", "ResourceBundle b", "String key"]], "checkAllKeysAreInFrom": [["void", "ResourceBundle b", "ResourceBundle locb"]], "getModifiedSupportedLanguages": [["List<Locale>"]], "checkResourceBundle": [["void", "String bname", "String[] tags"], ["void", "String bname"]], "checkAllKeysFromAreIn": [["void", "ResourceBundle b", "ResourceBundle locb"]]}, "className": "CheckResourceBundle", "renamed": ["void", "function", "(", "ResourceBundle", "arg0", ")", "{", "Set", "<", "Object", ">", "loc0", "=", "new", "HashSet", "<", "Object", ">", "(", ")", ";", "for", "(", "Enumeration", "loc1", "=", "arg0", ".", "getKeys", "(", ")", ";", "loc1", ".", "hasMoreElements", "(", ")", ";", ")", "{", "Object", "loc2", "=", "loc1", ".", "nextElement", "(", ")", ";", "Assert", ".", "assertTrue", "(", "\"srini_string\"", "=", "\"srini_string\"", "+", "arg0", ".", "getClass", "(", ")", ".", "getName", "(", ")", ",", "!", "loc0", ".", "contains", "(", "loc2", ")", ")", ";", "loc0", ".", "add", "(", "loc2", ")", ";", "}", "}"], "nl": "check that no key is entered twice", "nlToks": ["check", "that", "no", "key", "is", "entered", "twice"], "path": "pichiliani/CoArgoUML/tree/master/v0.24/fonte/src/argouml-app/tests/org/argouml/util/CheckResourceBundle.java", "idx": 1131}
{"memberVariables": {"appPath=\"\"": "String", "keys": "Keys", "machine": "Machine", "logPath=\"\"": "String", "options": "Options", "playlists": "HashMap<Integer,Playlist>", "genreListModel": "DefaultListModel", "logger=Logger.getLogger(\"JaMuz\")": "Logger", "db": "DbConnJaMuz", "tags": "ArrayList<String>"}, "code": ["String", "function", "(", ")", "{", "return", "logPath", ";", "}"], "memberFunctions": {"logConfig": [["void", "String id"]], "getCurrentMachine": [["boolean"]], "createLog": [["boolean"]], "getProxy": [["Proxy"]], "readTags": [["void"]], "getPlaylistsVisible": [["List<Playlist>"]], "readGenres": [["void"]], "setProxy": [["boolean"]], "connectDatabase": [["boolean"]], "getPlaylist": [["Playlist", "int id"]], "readPlaylists": [["boolean"]], "getLogger": [["Logger"]], "getTags": [["ArrayList<String>"]], "configure": [["boolean", "String appPath"]], "getKeys": [["Options"]], "getFile": [["File", "String filename", "String... args"]], "getDb": [["DbConnJaMuz"]], "getMachine": [["Machine"]], "getGenreListModel": [["DefaultListModel"]], "getHttpClient": [["DefaultHttpClient"]], "getOptions": [["Options"]], "getGenres": [["List<String>"]], "getPlaylists": [["List<Playlist>"]]}, "className": "Jamuz", "renamed": ["String", "function", "(", ")", "{", "return", "logPath", ";", "}"], "nl": "Get Application LOG path. Used to backup database files also", "nlToks": ["Get", "Application", "LOG", "path", ".", "Used", "to", "backup", "database", "files", "also"], "path": "phramusca/JaMuz/tree/master/src/jamuz/Jamuz.java", "idx": 1132}
{"memberVariables": {"encoder=new HexEncoder()": "Encoder"}, "code": ["int", "function", "(", "String", "data", ",", "OutputStream", "out", ")", "{", "return", "encoder", ".", "decode", "(", "data", ",", "out", ")", ";", "}"], "memberFunctions": {"encode": [["byte[]", "byte[] data"], ["byte[]", "byte[] data", "int off", "int length"], ["int", "byte[] data", "OutputStream out"], ["int", "byte[] data", "int off", "int length", "OutputStream out"]]}, "className": "Hex", "renamed": ["int", "function", "(", "String", "arg0", ",", "OutputStream", "arg1", ")", "{", "return", "encoder", ".", "decode", "(", "arg0", ",", "arg1", ")", ";", "}"], "nl": "decode the Hex encoded String data writing it to the given output stream, whitespace characters will be ignored.", "nlToks": ["decode", "the", "Hex", "encoded", "String", "data", "writing", "it", "to", "the", "given", "output", "stream", ",", "whitespace", "characters", "will", "be", "ignored", "."], "path": "1000000000001/bitcoinj/tree/master/orchid/src/com/subgraph/orchid/encoders/Hex.java", "idx": 1133}
{"memberVariables": {}, "code": ["boolean", "function", "(", "Object", "property", ")", "{", "if", "(", "property", "==", "null", ")", "{", "return", "false", ";", "}", "return", "Boolean", ".", "FALSE", ".", "equals", "(", "property", ")", "||", "\"false\"", ".", "equalsIgnoreCase", "(", "property", ".", "toString", "(", ")", ")", ";", "}"], "memberFunctions": {"getLong": [["Long", "Message message", "String key"]], "isTrue": [["boolean", "Map<String,Object> props", "String key"], ["boolean", "Object property"]], "getInteger": [["Integer", "Message message", "String key"]]}, "className": "PropertyUtils", "renamed": ["boolean", "function", "(", "Object", "arg0", ")", "{", "if", "(", "arg0", "==", "null", ")", "{", "return", "false", ";", "}", "return", "Boolean", ".", "FALSE", ".", "equals", "(", "arg0", ")", "||", "\"srini_string\"", ".", "equalsIgnoreCase", "(", "arg0", ".", "toString", "(", ")", ")", ";", "}"], "nl": "It might seem odd to return 'true' if a property == FALSE, but it is required sometimes. Returns false if a value is either the String \"false\" (regardless of case)  or Boolean.FALSE.", "nlToks": ["It", "might", "seem", "odd", "to", "return", "`", "true", "'", "if", "a", "property", "==", "FALSE", ",", "but", "it", "is", "required", "sometimes", ".", "Returns", "false", "if", "a", "value", "is", "either", "the", "String", "``", "false", "''", "-LRB-", "regardless", "of", "case", "-RRB-", "or", "Boolean.FALSE", "."], "path": "primesign/cxf/tree/master/core/src/main/java/org/apache/cxf/common/util/PropertyUtils.java", "idx": 1134}
{"memberVariables": {"_all=new HashMap<>(11)": "HashMap<String,symbol>"}, "code": ["int", "function", "(", ")", "{", "return", "_all", ".", "size", "(", ")", ";", "}"], "memberFunctions": {"add": [["boolean", "symbol sym"], ["boolean", "symbol_set other"]], "iterator": [["Iterator<symbol>"]], "contains": [["boolean", "symbol sym"]], "not_null": [["void", "Object obj"]], "hashCode": [["int"]], "is_superset_of": [["boolean", "symbol_set other"]], "equals": [["boolean", "symbol_set other"], ["boolean", "Object other"]], "is_subset_of": [["boolean", "symbol_set other"]], "toString": [["String"]], "remove": [["void", "symbol sym"], ["void", "symbol_set other"]]}, "className": "symbol_set", "renamed": ["int", "function", "(", ")", "{", "return", "_all", ".", "size", "(", ")", ";", "}"], "nl": "size of the set", "nlToks": ["size", "of", "the", "set"], "path": "polyglot-compiler/polyglot/tree/master/tools/java_cup/src/java_cup/symbol_set.java", "idx": 1135}
{"memberVariables": {"run=false": "boolean", "serverSockets=new ArrayList<ServerSocket>()": "ArrayList<ServerSocket>", "savePath=\"\"": "String", "disconnectedOnPurpose=false": "boolean", "serverSocket": "ServerSocket", "dataBufSize=1024 * 60": "int", "eventBufSize=10 * 60": "int", "monitor=null": "FieldtripBufferMonitor", "nextClientID=0": "int", "eventBufSize": "int", "serverPort": "int", "portNumber": "int", "dataBufSize": "int", "serverPort=1972": "int", "threads=new ArrayList<ConnectionThread>()": "ArrayList<ConnectionThread>", "dataStore": "DataModel", "logging": "int", "buffer": "BufferServer"}, "code": ["void", "function", "(", ")", "{", "try", "{", "dataStore", ".", "flushEvents", "(", ")", ";", "if", "(", "monitor", "!=", "null", ")", "{", "monitor", ".", "clientFlushedEvents", "(", "-", "1", ",", "System", ".", "currentTimeMillis", "(", ")", ")", ";", "}", "}", "catch", "(", "final", "DataException", "e", ")", "{", "e", ".", "printStackTrace", "(", ")", ";", "}", "}"], "memberFunctions": {"Start": [["void"], ["void", "int serverPort"], ["void", "int serverPort", "int dataBufSize"], ["void", "int serverPort", "int dataBufSize", "int eventBufSize"], ["void", "int serverPort", "int dataBufSize", "int eventBufSize", "java.io.File file"], ["void", "int serverPort", "int dataBufSize", "int eventBufSize", "String path"]], "usage": [["void"]], "listAllServerSockets": [["void"]], "BufferServerStart": [["void", "int serverPort", "int dataBufSize", "int eventBufSize", "String path", "int verbosityLevel"]], "run": [["void"], ["void"]], "flushSamples": [["void"]], "closeConnection": [["void"]], "removeConnection": [["void", "final ConnectionThread connection"]], "cleanup": [["void"]], "addMonitor": [["void", "final FieldtripBufferMonitor monitor"]], "removeAllServerSockets": [["void"]], "putHeader": [["boolean", "final int nChans", "final float fSample", "final int dataType"]], "flushHeader": [["void"]], "stopBuffer": [["void"]]}, "className": "BufferServer", "renamed": ["void", "function", "(", ")", "{", "try", "{", "dataStore", ".", "flushEvents", "(", ")", ";", "if", "(", "monitor", "!=", "null", ")", "{", "monitor", ".", "clientFlushedEvents", "(", "-", "1", ",", "System", ".", "currentTimeMillis", "(", ")", ")", ";", "}", "}", "catch", "(", "final", "DataException", "loc0", ")", "{", "loc0", ".", "printStackTrace", "(", ")", ";", "}", "}"], "nl": "Flushes the events from the datastore.", "nlToks": ["Flushes", "the", "events", "from", "the", "datastore", "."], "path": "phpvdb/buffer_bci/tree/master/dataAcq/buffer/java/nl/fcdonders/fieldtrip/bufferserver/BufferServer.java", "idx": 1136}
{"memberVariables": {"aborted": "boolean", "pool": "RouteSpecificPool", "waiter": "Thread", "cond": "Condition"}, "code": ["Thread", "function", "(", ")", "{", "return", "this", ".", "waiter", ";", "}"], "memberFunctions": {"getCondition": [["Condition"]], "getPool": [["RouteSpecificPool"]], "wakeup": [["void"]], "await": [["boolean", "Date deadline"]], "interrupt": [["void"]]}, "className": "WaitingThread", "renamed": ["Thread", "function", "(", ")", "{", "return", "this", ".", "waiter", ";", "}"], "nl": "Obtains the thread, if there is one.", "nlToks": ["Obtains", "the", "thread", ",", "if", "there", "is", "one", "."], "path": "pritamkhose/open-gpstracker.code/tree/master/external_sources/httpclient-4.1.1/httpclient/src/main/java/org/apache/ogt/http/impl/conn/tsccm/WaitingThread.java", "idx": 1138}
{"memberVariables": {}, "code": ["void", "function", "(", "InputStream", "is", ")", "{", "if", "(", "is", "!=", "null", ")", "is", ".", "close", "(", ")", ";", "}"], "memberFunctions": {"returnHttpInputStream": [["void", "InputStream is"]], "getPageContent": [["String", "DownloadRequest request", "ContentResolver cr"]], "getResourceInputStream": [["InputStream", "String name", "AssetManager mgr"]], "getHttpInputString": [["String", "InputStream is"]], "getContentInputStream": [["InputStream", "String urlStr", "String params", "ContentResolver cr"]], "getHttpGETInputStream": [["InputStream", "String urlStr", "ContentResolver cr"]], "getHttpPOSTInputStream": [["InputStream", "String urlStr", "String params", "ContentResolver cr"]]}, "className": "HttpTools", "renamed": ["void", "function", "(", "InputStream", "arg0", ")", "{", "if", "(", "arg0", "!=", "null", ")", "arg0", ".", "close", "(", ")", ";", "}"], "nl": "Input Stream management not safe", "nlToks": ["Input", "Stream", "management", "not", "safe"], "path": "pranaypatel512/mixare/tree/master/src/org/mixare/mgr/HttpTools.java", "idx": 1140}
{"memberVariables": {"OFFSET=22": "long", "TEMP_UFS_FILE_ID=11": "long", "mBuffer=null": "ByteBuf", "LENGTH=0": "long"}, "code": ["void", "function", "(", ")", "{", "RPCFileWriteRequest", "req", "=", "new", "RPCFileWriteRequest", "(", "TEMP_UFS_FILE_ID", ",", "-", "1", ",", "LENGTH", ",", "null", ")", ";", "assertInvalid", "(", "req", ")", ";", "}"], "memberFunctions": {"encodedLength": [["void"]], "invalidLength": [["void"]], "assertInvalid": [["void", "RPCFileWriteRequest req"]], "encodeDecode": [["void"]], "before": [["void"]], "encodeDecodeData": [["void"]], "validLength": [["void"]], "getPayloadDataBuffer": [["void"]], "assertValid": [["void", "long tempUfsFileId", "long offset", "long length", "RPCFileWriteRequest req"], ["void", "RPCFileWriteRequest req"]], "validate": [["void"]]}, "className": "RPCFileWriteRequestTest", "renamed": ["void", "function", "(", ")", "{", "RPCFileWriteRequest", "loc0", "=", "new", "RPCFileWriteRequest", "(", "TEMP_UFS_FILE_ID", ",", "-", "1", ",", "LENGTH", ",", "null", ")", ";", "assertInvalid", "(", "loc0", ")", ";", "}"], "nl": "Tests the constructor with a negative offset.", "nlToks": ["Tests", "the", "constructor", "with", "a", "negative", "offset", "."], "path": "poemlin/alluxio/tree/master/core/server/src/test/java/alluxio/network/protocol/RPCFileWriteRequestTest.java", "idx": 1141}
{"memberVariables": {"AK_NONE=new AggregationKindEnum(\"ak_none\")": "AggregationKindEnum", "typeName": "java.util.List", "AK_COMPOSITE=new AggregationKindEnum(\"ak_composite\")": "AggregationKindEnum", "AK_AGGREGATE=new AggregationKindEnum(\"ak_aggregate\")": "AggregationKindEnum", "literalName": "java.lang.String"}, "code": ["java", ".", "util", ".", "List", "function", "(", ")", "{", "return", "typeName", ";", "}"], "memberFunctions": {"readResolve": [["java.lang.Object"]], "forName": [["AggregationKind", "java.lang.String name"]], "hashCode": [["int"]], "equals": [["boolean", "java.lang.Object o"]], "toString": [["java.lang.String"]]}, "className": "AggregationKindEnum", "renamed": ["java", ".", "util", ".", "List", "function", "(", ")", "{", "return", "typeName", ";", "}"], "nl": "Returns fully qualified name of the enumeration type.", "nlToks": ["Returns", "fully", "qualified", "name", "of", "the", "enumeration", "type", "."], "path": "pichiliani/CoArgoUML/tree/master/v0.24/fonte/src/argouml-core-model-mdr/build/java/org/omg/uml/foundation/datatypes/AggregationKindEnum.java", "idx": 1142}
{"memberVariables": {"layoutContext": "LayoutContext", "sourceDocument": "String", "sharedContext": "SharedContext", "DEFAULT_DOTS_PER_PIXEL=1": "int", "outputDevice": "Java2DOutputDevice", "renderingHints": "Map", "NO_HEIGHT=-1": "int", "rendered": "boolean", "root": "Box", "dotsPerPoint": "float", "width": "int", "doc": "Document", "DEFAULT_HEIGHT=1000": "int", "sourceDocumentBase": "String", "DEFAULT_DOTS_PER_POINT=1": "int", "height": "int"}, "code": ["BufferedImage", "function", "(", "int", "width", ",", "int", "height", ")", "{", "BufferedImage", "image", "=", "ImageUtil", ".", "createCompatibleBufferedImage", "(", "width", ",", "height", ",", "BufferedImage", ".", "TYPE_INT_RGB", ")", ";", "ImageUtil", ".", "clearImage", "(", "image", ")", ";", "return", "image", ";", "}"], "memberFunctions": {"loadDocument": [["Document", "final String uri"]], "init": [["void", "float dotsPerPoint", "int dotsPerPixel"]], "isHover": [["boolean", "Element e"]], "getLayoutContext": [["LayoutContext"]], "isActive": [["boolean", "Element e"]], "layout": [["void", "int width"]], "setDocument": [["void", "Document doc", "String url", "NamespaceHandler nsh"]], "newSharedContext": [["SharedContext", "int dotsPerPixel", "UserAgentCallback userAgent"]], "isFocus": [["boolean", "Element e"]], "setRenderingHints": [["void", "Map hints"]], "getSharedContext": [["SharedContext"]], "render": [["Box"]], "newLayoutContext": [["LayoutContext"]]}, "className": "BoxRenderer", "renamed": ["BufferedImage", "function", "(", "int", "arg0", ",", "int", "arg1", ")", "{", "BufferedImage", "loc0", "=", "ImageUtil", ".", "createCompatibleBufferedImage", "(", "arg0", ",", "arg1", ",", "BufferedImage", ".", "TYPE_INT_RGB", ")", ";", "ImageUtil", ".", "clearImage", "(", "loc0", ")", ";", "return", "loc0", ";", "}"], "nl": "Returns a BufferedImage using the specified width and height. By default this returns an image compatible with the screen (if not in \"headless\" mode) formatted for RGB.", "nlToks": ["Returns", "a", "BufferedImage", "using", "the", "specified", "width", "and", "height", ".", "By", "default", "this", "returns", "an", "image", "compatible", "with", "the", "screen", "-LRB-", "if", "not", "in", "``", "headless", "''", "mode", "-RRB-", "formatted", "for", "RGB", "."], "path": "plutogeek/flyingsaucer/tree/master/flying-saucer-core/src/main/java/org/xhtmlrenderer/swing/BoxRenderer.java", "idx": 1147}
{"memberVariables": {"LOG=Logger.getLogger(TempFileUtils.class)": "Logger"}, "code": ["File", "function", "(", ")", "{", "File", "tmpdir", "=", "null", ";", "try", "{", "tmpdir", "=", "File", ".", "createTempFile", "(", "\"argouml\"", ",", "null", ")", ";", "tmpdir", ".", "delete", "(", ")", ";", "if", "(", "!", "tmpdir", ".", "mkdir", "(", ")", ")", "{", "return", "null", ";", "}", "return", "tmpdir", ";", "}", "catch", "(", "IOException", "ioe", ")", "{", "LOG", ".", "error", "(", "\"Error while creating a temporary directory\"", ",", "ioe", ")", ";", "return", "null", ";", "}", "}"], "memberFunctions": {"act": [["void", "File file"]], "traverseDir": [["void", "File dir", "FileAction action"]], "readAllFiles": [["Collection<SourceUnit>", "File dir"]], "readFileNames": [["Collection<String>", "File dir"]], "deleteDir": [["void", "File dir"]]}, "className": "TempFileUtils", "renamed": ["File", "function", "(", ")", "{", "File", "loc0", "=", "null", ";", "try", "{", "loc0", "=", "File", ".", "createTempFile", "(", "\"srini_string\"", ",", "null", ")", ";", "loc0", ".", "delete", "(", ")", ";", "if", "(", "!", "loc0", ".", "mkdir", "(", ")", ")", "{", "return", "null", ";", "}", "return", "loc0", ";", "}", "catch", "(", "IOException", "loc1", ")", "{", "LOG", ".", "error", "(", "\"srini_string\"", ",", "loc1", ")", ";", "return", "null", ";", "}", "}"], "nl": "Create a temporary directory.", "nlToks": ["Create", "a", "temporary", "directory", "."], "path": "pichiliani/CoArgoUML/tree/master/v0.24/fonte/src/argouml-app/src/org/argouml/uml/generator/TempFileUtils.java", "idx": 1148}
{"memberVariables": {"lastModifiedTimeStamp": "Date", "feedId": "Long", "createdBy": "String", "fetcherStartTimeStamp": "Date", "createTimeStamp": "Date", "testId": "Long", "runId": "Long", "fetcherEndTimeStamp": "Date", "regTestResultDetailsLst": "List<TestResultDetailsDTO>", "outcome": "OutcomeType", "runStatus": "RunStatusType", "errorMsg": "String"}, "code": ["void", "function", "(", "Date", "fetcherStartTimeStamp", ")", "{", "this", ".", "fetcherStartTimeStamp", "=", "fetcherStartTimeStamp", ";", "}"], "memberFunctions": {"setLastModifiedTimeStamp": [["void", "Date lastModifiedTimeStamp"]], "getFetcherEndTimeStamp": [["Date"]], "setFeedId": [["void", "Long feedId"]], "getLastModifiedTimeStamp": [["Date"]], "getOutcome": [["OutcomeType"]], "getRunId": [["Long"]], "getRegTestResultDetailsLst": [["List<TestResultDetailsDTO>"]], "getFeedId": [["Long"]], "setTestId": [["void", "Long testId"]], "getTestId": [["Long"]], "getFetcherStartTimeStamp": [["Date"]], "setRunId": [["void", "Long runId"]], "setRegTestResultDetailsLst": [["void", "List<TestResultDetailsDTO> regTestResultDetailsLst"]], "setErrorMsg": [["void", "String errorMsg"]], "setFetcherEndTimeStamp": [["void", "Date fetcherEndTimeStamp"]], "setCreateTimeStamp": [["void", "Date createTimeStamp"]], "setCreatedBy": [["void", "String createdBy"]], "getRunStatus": [["RunStatusType"]], "getCreateTimeStamp": [["Date"]], "setOutcome": [["void", "OutcomeType outcome"]], "toString": [["String"]], "getCreatedBy": [["String"]], "getErrorMsg": [["String"]], "setRunStatus": [["void", "RunStatusType runStatus"]]}, "className": "TestResultDTO", "renamed": ["void", "function", "(", "Date", "arg0", ")", "{", "this", ".", "fetcherStartTimeStamp", "=", "arg0", ";", "}"], "nl": "Sets the fetcher start time stamp.", "nlToks": ["Sets", "the", "fetcher", "start", "time", "stamp", "."], "path": "pkesireddy/portico_fletcher/tree/master/FetcherTesterService/src/main/java/org/ithaka/cm/fetchertester/model/TestResultDTO.java", "idx": 1151}
{"memberVariables": {"score": "float", "mSetFragmentsCount": "int", "mSetFoundFragments": "int", "f=new DecimalFormat(\"0.000\")": "NumberFormat", "documentName": "String", "setFragmentsCount": "int", "setFoundFragments": "int"}, "code": ["float", "function", "(", ")", "{", "return", "(", "(", "float", ")", "setFoundFragments", ")", "/", "(", "(", "float", ")", "setFragmentsCount", ")", ";", "}"], "memberFunctions": {"getSetFragmentsCount": [["int"]], "getNaiveScoreMSet": [["float"]], "getMSetFragmentsCount": [["int"]], "getMSetFoundFragments": [["int"]], "toString": [["String"]], "compareTo": [["int", "ResultCandidate w"]], "getDocumentName": [["String"]], "getScore": [["float"]], "getSetFoundFragments": [["int"]]}, "className": "ResultCandidate", "renamed": ["float", "function", "(", ")", "{", "return", "(", "(", "float", ")", "setFoundFragments", ")", "/", "(", "(", "float", ")", "setFragmentsCount", ")", ";", "}"], "nl": "Returns the naive similarity score.", "nlToks": ["Returns", "the", "naive", "similarity", "score", "."], "path": "pombreda/furia-chan/tree/master/src/main/java/org/kit/furia/ResultCandidate.java", "idx": 1152}
{"memberVariables": {"xPosition": "int", "dirArriba": "boolean", "canvas": "Canvas", "ySpeed=1": "int", "ballDegradation=2": "int", "color": "Color", "diameter": "int", "dirIzquierda": "boolean", "yPosition": "int", "groundPosition": "int", "GRAVITY=0": "int", "circle": "Ellipse2D.Double"}, "code": ["int", "function", "(", ")", "{", "return", "yPosition", ";", "}"], "memberFunctions": {"erase": [["void"]], "move": [["void"]], "getXPosition": [["int"]], "draw": [["void"]]}, "className": "BoxBall", "renamed": ["int", "function", "(", ")", "{", "return", "yPosition", ";", "}"], "nl": "return the vertical position of this ball", "nlToks": ["return", "the", "vertical", "position", "of", "this", "ball"], "path": "pizcogirl/100/tree/master/BoxBall.java", "idx": 1153}
{"memberVariables": {"elevation": "int", "noise": "int", "azimuth": "int", "id": "String"}, "code": ["void", "function", "(", "String", "id", ")", "{", "this", ".", "id", "=", "id", ";", "}"], "memberFunctions": {"getAzimuth": [["int"]], "setElevation": [["void", "int elevation"]], "setNoise": [["void", "int noise"]], "getId": [["String"]], "getNoise": [["int"]], "getElevation": [["int"]], "setAzimuth": [["void", "int azimuth"]]}, "className": "SatelliteInfo", "renamed": ["void", "function", "(", "String", "arg0", ")", "{", "this", ".", "id", "=", "arg0", ";", "}"], "nl": "Set the ID of satellite vehicle, for example \"05\".", "nlToks": ["Set", "the", "ID", "of", "satellite", "vehicle", ",", "for", "example", "``", "05", "''", "."], "path": "pkoziol/marine-api/tree/master/src/main/java/net/sf/marineapi/nmea/util/SatelliteInfo.java", "idx": 1155}
{"memberVariables": {"nodePosition=new HashMap<>()": "Map<T,Integer>", "allNodes=new ArrayList<>()": "List<Node>", "weight": "int", "key": "T"}, "code": ["boolean", "function", "(", "T", "key", ")", "{", "return", "nodePosition", ".", "containsKey", "(", "key", ")", ";", "}"], "memberFunctions": {"add": [["void", "int weight", "T key"]], "min": [["T"]], "printPositionMap": [["void"]], "swap": [["void", "Node node1", "Node node2"]], "updatePositionMap": [["void", "T data1", "T data2", "int pos1", "int pos2"]], "getWeight": [["Integer", "T key"]], "extractMinNode": [["Node"]], "printHeap": [["void"]], "main": [["void", "String args[]"]], "extractMin": [["T"]], "decrease": [["void", "T data", "int newWeight"]], "empty": [["boolean"]]}, "className": "BinaryMinHeap", "renamed": ["boolean", "function", "(", "T", "arg0", ")", "{", "return", "nodePosition", ".", "containsKey", "(", "arg0", ")", ";", "}"], "nl": "Checks where the key exists in heap or not", "nlToks": ["Checks", "where", "the", "key", "exists", "in", "heap", "or", "not"], "path": "piyushbajaj/Java_Tutorial_DS/tree/master/Heap/BinaryMinHeap.java", "idx": 1156}
{"memberVariables": {"LOG=LoggerFactory.getLogger(SipMessageUtils.class)": "Logger"}, "code": ["InetAddress", "function", "(", "final", "SipHeaderValue", "via", ")", "{", "final", "String", "baseValue", "=", "via", ".", "getBaseValue", "(", ")", ";", "final", "String", "hostString", "=", "StringUtils", ".", "substringAfterLast", "(", "baseValue", ",", "\" \"", ")", ";", "return", "InetAddress", ".", "getByName", "(", "hostString", ")", ";", "}"], "memberFunctions": {"extractUri": [["URI", "final SipHeader header"], ["URI", "final String headerValue"]], "extractValue": [["String", "final String nameValue"], ["String", "final String nameValue", "final String separator"]], "createValues": [["List<SipHeaderValue>", "final List<String> values"]], "extractCSeqMethod": [["String", "final SipHeader cseq"]], "extractContentLength": [["int", "final Map<String,SipHeader> headers"]], "extractHeaderParams": [["Map<String,String>", "final String headerValue"]], "convertHeaders": [["Map<String,SipHeader>", "Map<String,List<String>> headers"]], "extractCSeqNumber": [["int", "final SipMessage message"]], "toParamString": [["String", "final Map paramsMap"]], "extractNextHopFromVia": [["InetSocketAddress", "final SipMessage message"]], "extractName": [["String", "final String nameValue"], ["String", "final String nameValue", "final String separator"]], "extractUriFromRequestLine": [["URI", "final SipMessage request"]]}, "className": "SipMessageUtils", "renamed": ["InetAddress", "function", "(", "final", "SipHeaderValue", "arg0", ")", "{", "final", "String", "loc0", "=", "arg0", ".", "getBaseValue", "(", ")", ";", "final", "String", "loc1", "=", "StringUtils", ".", "substringAfterLast", "(", "loc0", ",", "\"srini_string\"", ")", ";", "return", "InetAddress", ".", "getByName", "(", "loc1", ")", ";", "}"], "nl": "Extracts the sent-by host from a Via header.", "nlToks": ["Extracts", "the", "sent-by", "host", "from", "a", "Via", "header", "."], "path": "adamfisk/littleshoot-client/tree/master/common/sip/stack/src/main/java/org/lastbamboo/common/sip/stack/message/SipMessageUtils.java", "idx": 1157}
{"memberVariables": {"elem2": "String", "elem1": "String", "elem3": "int"}, "code": ["String", "function", "(", ")", "{", "return", "elem2", ";", "}"], "memberFunctions": {"getElem3": [["int"]], "getElem1": [["String"]], "setElem2": [["void", "String value"]], "setElem1": [["void", "String value"]], "setElem3": [["void", "int value"]]}, "className": "MyComplexStruct", "renamed": ["String", "function", "(", ")", "{", "return", "elem2", ";", "}"], "nl": "Gets the value of the elem2 property.", "nlToks": ["Gets", "the", "value", "of", "the", "elem2", "property", "."], "path": "primesign/cxf/tree/master/rt/bindings/soap/src/test/java/org/apache/cxf/binding/soap/MyComplexStruct.java", "idx": 1158}
{"memberVariables": {"instance": "GLLParser", "EXAMPLE=\"$GPGLL,6011.552,N,02501.941,E,120045,A*26\"": "String", "empty": "GLLParser"}, "code": ["void", "function", "(", ")", "{", "Time", "t", "=", "new", "Time", "(", "1", ",", "2", ",", "3.4", ")", ";", "instance", ".", "setTime", "(", "t", ")", ";", "assertTrue", "(", "instance", ".", "toString", "(", ")", ".", "contains", "(", "\",E,010203.400,A*\"", ")", ")", ";", "}"], "memberFunctions": {"testSetPositionWithZeroValues": [["void"]], "testGetPosition": [["void"]], "testSetDataStatus": [["void"]], "testSetPositionWithNonZeroValues": [["void"]], "setUp": [["void"]], "testGetDataStatus": [["void"]], "testConstructor": [["void"]], "testGetTime": [["void"]]}, "className": "GLLTest", "renamed": ["void", "function", "(", ")", "{", "Time", "loc0", "=", "new", "Time", "(", "1", ",", "2", ",", "3.4", ")", ";", "instance", ".", "setTime", "(", "loc0", ")", ";", "assertTrue", "(", "instance", ".", "toString", "(", ")", ".", "contains", "(", "\"srini_string\"", ")", ")", ";", "}"], "nl": "Test method for {@link net.sf.marineapi.nmea.parser.GLLParser#setTime(Time)}.", "nlToks": ["Test", "method", "for", "-LCB-", "@link", "net.sf.marineapi.nmea.parser.GLLParser", "#setTime", "-LRB-", "Time", "-RRB-", "-RCB-", "."], "path": "pkoziol/marine-api/tree/master/src/test/java/net/sf/marineapi/nmea/parser/GLLTest.java", "idx": 1159}
{"memberVariables": {}, "code": ["boolean", "function", "(", "final", "ByteBufferExt", "bb", ")", "{", "final", "int", "checkSumIndex", "=", "bb", ".", "position", "(", ")", "+", "RudpConstants", ".", "CHECKSUM_INDEX", ";", "final", "UInt", "checksum", "=", "bb", ".", "getUInt", "(", "checkSumIndex", ")", ";", "final", "UInt", "zero", "=", "new", "UIntImpl", "(", "0", ")", ";", "bb", ".", "putUInt", "(", "checkSumIndex", ",", "zero", ")", ";", "final", "UInt", "expectedChecksum", "=", "getChecksum", "(", "bb", ")", ";", "return", "checksum", ".", "equals", "(", "expectedChecksum", ")", ";", "}"], "memberFunctions": {"toId": [["RudpConnectionId", "final IoSession session"]], "safeGet": [["byte", "final ByteBufferExt bb"]], "getChecksum": [["UInt", "final ByteBuffer bb"], ["UInt", "final ByteBufferExt bb"]], "toListeningId": [["RudpListeningConnectionId", "final IoSession session"]]}, "className": "RudpUtils", "renamed": ["boolean", "function", "(", "final", "ByteBufferExt", "arg0", ")", "{", "final", "int", "loc0", "=", "arg0", ".", "position", "(", ")", "+", "RudpConstants", ".", "CHECKSUM_INDEX", ";", "final", "UInt", "loc1", "=", "arg0", ".", "getUInt", "(", "loc0", ")", ";", "final", "UInt", "loc2", "=", "new", "UIntImpl", "(", "0", ")", ";", "arg0", ".", "putUInt", "(", "loc0", ",", "loc2", ")", ";", "final", "UInt", "loc3", "=", "getChecksum", "(", "arg0", ")", ";", "return", "loc1", ".", "equals", "(", "loc3", ")", ";", "}"], "nl": "Returns whether the checksum held in a byte buffer holding a RUDP segment is correct.", "nlToks": ["Returns", "whether", "the", "checksum", "held", "in", "a", "byte", "buffer", "holding", "a", "RUDP", "segment", "is", "correct", "."], "path": "adamfisk/littleshoot-client/tree/master/common/rudp/src/main/java/org/lastbamboo/common/rudp/RudpUtils.java", "idx": 1160}
{"memberVariables": {"VERTICES_FORMAT_REGEX=\"([a-zA-Z](\\\\, )?)+\"": "String", "ARESTAS_FORMAT_REGEX=\"(\\\\[([a-zA-Z]\\\\,[a-zA-Z])\\\\])+\"": "String", "ARESTAS_PESO_FORMAT_REGEX=\"(\\\\[([a-zA-Z]\\\\,[a-zA-Z]) - (\\\\d)\\\\])+\"": "String", "EXTRACT_ARESTAS_PESO_REGEX=\"\\\\[([a-zA-Z]\\\\,[a-zA-Z]) - (\\\\d)\\\\]\"": "String", "EXTRACT_ARESTAS_REGEX=\"\\\\[([a-zA-Z]\\\\,[a-zA-Z])\\\\]\"": "String"}, "code": ["List", "<", "Vertice", ">", "function", "(", "Grafo", "grafo", ")", "{", "return", "obterVerticesOrdenados", "(", "grafo", ".", "getVertices", "(", ")", ")", ";", "}"], "memberFunctions": {"carregarArestas": [["void", "Grafo grafo", "String textArestas", "boolean possuiPeso"]], "obterArestasAdjacentes": [["List<Aresta>", "Vertice vertice", "Grafo grafo"]], "criarGrafo": [["Grafo", "String verticeRaiz", "String textoVertices", "String arestas"], ["Grafo", "String verticeRaiz", "String textoVertices", "String arestas", "boolean possuiPeso"]], "carregarVertices": [["void", "Grafo grafo", "String textoVertices"]]}, "className": "GrafoUtils", "renamed": ["List", "<", "Vertice", ">", "function", "(", "Grafo", "arg0", ")", "{", "return", "obterVerticesOrdenados", "(", "arg0", ".", "getVertices", "(", ")", ")", ";", "}"], "nl": "Recebe um  {@link Grafo} e retorna uma {@link List} com os seus vertices ordenados.", "nlToks": ["Recebe", "um", "-LCB-", "@link", "Grafo", "-RCB-", "e", "retorna", "uma", "-LCB-", "@link", "List", "-RCB-", "com", "os", "seus", "vertices", "ordenados", "."], "path": "phoms/algoritmos-grafo/tree/master/src/main/java/br/com/infnet/gec/util/GrafoUtils.java", "idx": 1161}
{"memberVariables": {"mob": "EntityMobWithInventory", "world": "World", "itemQuantity": "int", "itemDropped": "Item", "range": "int", "nextBlock": "BlockPos"}, "code": ["void", "function", "(", "Item", "item", ")", "{", "this", ".", "mob", ".", "setCurrentItemOrArmor", "(", "0", ",", "new", "ItemStack", "(", "item", ")", ")", ";", "}"], "memberFunctions": {"reachedBlock": [["boolean"]], "storeItemDroppedDetails": [["void"]], "isCorrectBlock": [["boolean", "int i", "int j", "int k", "int mode"]], "obtainItems": [["void"]], "distToNearestBlock": [["double"]], "moveToBlock": [["void"]], "nextStep": [["void"]], "getNextBlock": [["BlockPos", "int mode"]]}, "className": "SearchTaskGeneric", "renamed": ["void", "function", "(", "Item", "arg0", ")", "{", "this", ".", "mob", ".", "setCurrentItemOrArmor", "(", "0", ",", "new", "ItemStack", "(", "arg0", ")", ")", ";", "}"], "nl": "Sets the equipped item of the AI", "nlToks": ["Sets", "the", "equipped", "item", "of", "the", "AI"], "path": "pregnantboy/fyp/tree/master/forge/src/main/java/fuzzyMod/tasks/SearchTaskGeneric.java", "idx": 1162}
{"memberVariables": {"mLoadMetadataType": "LoadMetadataType"}, "code": ["ListStatusOptions", "function", "(", "LoadMetadataType", "loadMetadataType", ")", "{", "mLoadMetadataType", "=", "loadMetadataType", ";", "return", "this", ";", "}"], "memberFunctions": {"defaults": [["ListStatusOptions"]], "hashCode": [["int"]], "equals": [["boolean", "Object o"]], "toString": [["String"]], "getLoadMetadataType": [["LoadMetadataType"]]}, "className": "ListStatusOptions", "renamed": ["ListStatusOptions", "function", "(", "LoadMetadataType", "arg0", ")", "{", "mLoadMetadataType", "=", "arg0", ";", "return", "this", ";", "}"], "nl": "Sets the  {@link ListStatusOptions#mLoadMetadataType}.", "nlToks": ["Sets", "the", "-LCB-", "@link", "ListStatusOptions", "#mLoadMetadataType", "-RCB-", "."], "path": "poemlin/alluxio/tree/master/core/server/src/main/java/alluxio/master/file/options/ListStatusOptions.java", "idx": 1164}
{"memberVariables": {"plugins": "SortedUniqueList<AbstractPlugin>", "serialVersionUID=1L": "long"}, "code": ["AbstractPlugin", "function", "(", "String", "pluginName", ")", "{", "for", "(", "AbstractPlugin", "plugin", ":", "plugins", ")", "{", "if", "(", "plugin", ".", "getName", "(", ")", ".", "equals", "(", "pluginName", ")", ")", "{", "return", "plugin", ";", "}", "}", "return", "null", ";", "}"], "memberFunctions": {"add": [["boolean", "AbstractPlugin plugin"]], "removeByIndex": [["boolean", "int index"]], "contains": [["boolean", "AbstractPlugin plugin"]], "iterator": [["Iterator<AbstractPlugin>"]], "removeByName": [["boolean", "String pluginName"]], "size": [["int"]], "getByIndex": [["AbstractPlugin", "int index"]], "clear": [["void"]], "indexOf": [["int", "AbstractPlugin plugin"]], "remove": [["boolean", "AbstractPlugin plugin"]]}, "className": "PluginContainer", "renamed": ["AbstractPlugin", "function", "(", "String", "arg0", ")", "{", "for", "(", "AbstractPlugin", "loc0", ":", "plugins", ")", "{", "if", "(", "loc0", ".", "getName", "(", ")", ".", "equals", "(", "arg0", ")", ")", "{", "return", "loc0", ";", "}", "}", "return", "null", ";", "}"], "nl": "Get plugin by its name", "nlToks": ["Get", "plugin", "by", "its", "name"], "path": "0xwindows/WS-Attacker/tree/master/framework/src/main/java/wsattacker/main/plugin/PluginContainer.java", "idx": 1165}
{"memberVariables": {"inclusive_time=0": "long", "goal": "Goal", "exclusive_time=0": "long"}, "code": ["void", "function", "(", "boolean", "exclusive_only", ")", "{", "if", "(", "!", "exclusive_only", ")", "{", "inclusive_time", "=", "System", ".", "currentTimeMillis", "(", ")", "-", "inclusive_time", ";", "}", "exclusive_time", "=", "System", ".", "currentTimeMillis", "(", ")", "-", "exclusive_time", ";", "}"], "memberFunctions": {"goal": [["Goal"]], "resetTimers": [["void"]], "inclusiveTime": [["long"]], "name": [["String"]], "exclusiveTime": [["long"]], "run": [["boolean"]], "toString": [["String"]], "lang": [["Lang"]]}, "className": "AbstractPass", "renamed": ["void", "function", "(", "boolean", "arg0", ")", "{", "if", "(", "!", "arg0", ")", "{", "inclusive_time", "=", "System", ".", "currentTimeMillis", "(", ")", "-", "inclusive_time", ";", "}", "exclusive_time", "=", "System", ".", "currentTimeMillis", "(", ")", "-", "exclusive_time", ";", "}"], "nl": "Start or stop the pass timer.", "nlToks": ["Start", "or", "stop", "the", "pass", "timer", "."], "path": "polyglot-compiler/polyglot/tree/master/src/polyglot/frontend/AbstractPass.java", "idx": 1166}
{"memberVariables": {"TEST_DIR=0": "int", "TEST_BLOCK_ID=9": "long", "mMetaManager": "BlockMetadataManager", "mThrown=ExpectedException.none()": "ExpectedException", "mTestFolder=new TemporaryFolder()": "TemporaryFolder", "TEST_TIER_ORDINAL=0": "int", "mMetaManagerView": "BlockMetadataManagerView", "TEST_BLOCK_SIZE=20": "long"}, "code": ["void", "function", "(", ")", "{", "mThrown", ".", "expect", "(", "BlockDoesNotExistException", ".", "class", ")", ";", "mThrown", ".", "expectMessage", "(", "ExceptionMessage", ".", "BLOCK_META_NOT_FOUND", ".", "getMessage", "(", "TEST_BLOCK_ID", ")", ")", ";", "mMetaManagerView", ".", "getBlockMeta", "(", "TEST_BLOCK_ID", ")", ";", "}"], "memberFunctions": {"getTierViews": [["void"]], "getTierViewsBelow": [["void"]], "getTierView": [["void"]], "before": [["void"]], "getTierNotExisting": [["void"]], "getBlockMeta": [["void"]], "sameTierViewsBelow": [["void"]], "getAvailableBytes": [["void"]], "assertSameTierView": [["void", "StorageTierView tierView1", "StorageTierView tierView2"]], "sameTierView": [["void"]], "isBlockPinnedOrLocked": [["void"]]}, "className": "BlockMetadataManagerViewTest", "renamed": ["void", "function", "(", ")", "{", "mThrown", ".", "expect", "(", "BlockDoesNotExistException", ".", "class", ")", ";", "mThrown", ".", "expectMessage", "(", "ExceptionMessage", ".", "BLOCK_META_NOT_FOUND", ".", "getMessage", "(", "TEST_BLOCK_ID", ")", ")", ";", "mMetaManagerView", ".", "getBlockMeta", "(", "TEST_BLOCK_ID", ")", ";", "}"], "nl": "Tests that an exception is thrown in the  {@link BlockMetadataManagerView#getBlockMeta(long)}method when the block does not exist.", "nlToks": ["Tests", "that", "an", "exception", "is", "thrown", "in", "the", "-LCB-", "@link", "BlockMetadataManagerView", "#getBlockMeta", "-LRB-", "long", "-RRB-", "-RCB-", "method", "when", "the", "block", "does", "not", "exist", "."], "path": "poemlin/alluxio/tree/master/core/server/src/test/java/alluxio/worker/block/BlockMetadataManagerViewTest.java", "idx": 1167}
{"memberVariables": {"mMode": "Mode", "mOwner": "String", "FILE_UMASK=new Mode(Constants.FILE_DIR_PERMISSION_DIFF)": "Mode", "mGroup": "String"}, "code": ["Permission", "function", "(", ")", "{", "mMode", "=", "mMode", ".", "applyUMask", "(", "Mode", ".", "getUMask", "(", ")", ")", ".", "applyUMask", "(", "FILE_UMASK", ")", ";", "return", "this", ";", "}"], "memberFunctions": {"setOwnerFromThriftClient": [["Permission"]], "defaults": [["Permission"]], "applyUMask": [["Permission", "Mode umask"]], "setOwnerFromLoginModule": [["Permission"]], "hashCode": [["int"]], "getGroup": [["String"]], "equals": [["boolean", "Object o"]], "toString": [["String"]], "getMode": [["Mode"]], "getOwner": [["String"]], "applyDirectoryUMask": [["Permission"]]}, "className": "Permission", "renamed": ["Permission", "function", "(", ")", "{", "mMode", "=", "mMode", ".", "applyUMask", "(", "Mode", ".", "getUMask", "(", ")", ")", ".", "applyUMask", "(", "FILE_UMASK", ")", ";", "return", "this", ";", "}"], "nl": "Applies the default umask for newly created files to the mode bits.", "nlToks": ["Applies", "the", "default", "umask", "for", "newly", "created", "files", "to", "the", "mode", "bits", "."], "path": "poemlin/alluxio/tree/master/core/common/src/main/java/alluxio/security/authorization/Permission.java", "idx": 1169}
{"memberVariables": {"awsSecretKey=null": "String", "awsAccessKeyId=null": "String", "associatetag=null": "String", "secretKeySpec=null": "SecretKeySpec", "HMAC_SHA256_ALGORITHM=\"HmacSHA256\"": "String", "REQUEST_METHOD=\"GET\"": "String", "UTF8_CHARSET=\"UTF-8\"": "String", "endpoint=null": "String", "REQUEST_URI=\"/onca/xml\"": "String", "mac=null": "Mac"}, "code": ["String", "function", "(", "String", "s", ")", "{", "String", "out", ";", "try", "{", "out", "=", "URLEncoder", ".", "encode", "(", "s", ",", "UTF8_CHARSET", ")", ".", "replace", "(", "\"+\"", ",", "\"%20\"", ")", ".", "replace", "(", "\"*\"", ",", "\"%2A\"", ")", ".", "replace", "(", "\"%7E\"", ",", "\"~\"", ")", ";", "}", "catch", "(", "UnsupportedEncodingException", "e", ")", "{", "out", "=", "s", ";", "}", "return", "out", ";", "}"], "memberFunctions": {"createParameterMap": [["Map<String,String>", "String queryString"]], "hmac": [["String", "String stringToSign"]], "sign": [["String", "Map<String,String> params"], ["String", "String queryString"]], "getInstance": [["SignedRequestsHelper", "String endpoint", "String awsAccessKeyId", "String awsSecretKey", "String associatetag"]], "canonicalize": [["String", "SortedMap<String,String> sortedParamMap"]], "timestamp": [["String"]]}, "className": "SignedRequestsHelper", "renamed": ["String", "function", "(", "String", "arg0", ")", "{", "String", "loc0", ";", "try", "{", "loc0", "=", "URLEncoder", ".", "encode", "(", "arg0", ",", "UTF8_CHARSET", ")", ".", "replace", "(", "\"srini_string\"", ",", "\"srini_string\"", ")", ".", "replace", "(", "\"srini_string\"", ",", "\"srini_string\"", ")", ".", "replace", "(", "\"srini_string\"", ",", "\"srini_string\"", ")", ";", "}", "catch", "(", "UnsupportedEncodingException", "loc1", ")", "{", "loc0", "=", "arg0", ";", "}", "return", "loc0", ";", "}"], "nl": "Percent-encode values according the RFC 3986. The built-in Java URLEncoder does not encode according to the RFC, so we make the extra replacements.", "nlToks": ["Percent-encode", "values", "according", "the", "RFC", "3986", ".", "The", "built-in", "Java", "URLEncoder", "does", "not", "encode", "according", "to", "the", "RFC", ",", "so", "we", "make", "the", "extra", "replacements", "."], "path": "adarsh-ideal/loklak_server/tree/master/src/org/loklak/api/amazon/SignedRequestsHelper.java", "idx": 1170}
{"memberVariables": {"LOG=LoggerFactory.getLogger(Constants.LOGGER_TYPE)": "Logger"}, "code": ["void", "function", "(", "String", "filePath", ")", "{", "File", "file", "=", "new", "File", "(", "filePath", ")", ";", "com", ".", "google", ".", "common", ".", "io", ".", "Files", ".", "createParentDirs", "(", "file", ")", ";", "if", "(", "!", "file", ".", "createNewFile", "(", ")", ")", "{", "throw", "new", "IOException", "(", "\"File already exists \"", "+", "filePath", ")", ";", "}", "}"], "memberFunctions": {"setLocalDirStickyBit": [["void", "String dir"]], "move": [["void", "String srcPath", "String dstPath"]], "getLocalFileMode": [["short", "String filePath"]], "changeLocalFileUser": [["void", "String path", "String user"]], "delete": [["void", "String path"]], "getLocalFileOwner": [["String", "String filePath"]], "createStorageDirPath": [["void", "String path"]], "changeLocalFileToFullPermission": [["void", "String filePath"]], "changeLocalFileGroup": [["void", "String path", "String group"]], "getLocalFileGroup": [["String", "String filePath"]], "createDir": [["void", "String path"]], "exists": [["boolean", "String path"]], "createBlockPath": [["void", "String path"]], "changeLocalFilePermission": [["void", "String filePath", "String perms"]], "deletePathRecursively": [["void", "String path"]]}, "className": "FileUtils", "renamed": ["void", "function", "(", "String", "arg0", ")", "{", "File", "loc0", "=", "new", "File", "(", "arg0", ")", ";", "com", ".", "google", ".", "common", ".", "io", ".", "Files", ".", "createParentDirs", "(", "loc0", ")", ";", "if", "(", "!", "loc0", ".", "createNewFile", "(", ")", ")", "{", "throw", "new", "IOException", "(", "\"srini_string\"", "+", "arg0", ")", ";", "}", "}"], "nl": "Creates an empty file and its intermediate directories if necessary.", "nlToks": ["Creates", "an", "empty", "file", "and", "its", "intermediate", "directories", "if", "necessary", "."], "path": "poemlin/alluxio/tree/master/core/common/src/main/java/alluxio/util/io/FileUtils.java", "idx": 1172}
{"memberVariables": {"EXAMPLE=\"$GPRMC,120044.567,A,6011.552,N,02501.941,E,000.0,360.0,160705,006.1,E,A*0B\"": "String", "rmc": "RMCParser", "empty": "RMCParser"}, "code": ["void", "function", "(", ")", "{", "assertEquals", "(", "7", ",", "rmc", ".", "getDate", "(", ")", ".", "getMonth", "(", ")", ")", ";", "}"], "memberFunctions": {"testSetFaaModeWhenOmitted": [["void"]], "testSetDirectionOfVariationWithInvalidDirection": [["void"]], "testGetCorrectedCourse": [["void"]], "testGetDataStatus": [["void"]], "testConstructor": [["void"]], "testGetTime": [["void"]], "testSetCourse": [["void"]], "testSetFaaMode": [["void"]], "testSetVariation": [["void"]], "setUp": [["void"]], "testGetCourse": [["void"]], "testSetDate": [["void"]], "testGetYear": [["void"]], "testSetDataStatus": [["void"]], "testGetDirectionOfVariation": [["void"]], "testGetDate": [["void"]], "testGetMagneticVariation": [["void"]], "testSetPosition": [["void"]], "testGetPosition": [["void"]], "testSetDirectionOfVariation": [["void"]], "testSetTime": [["void"]], "testGetDay": [["void"]], "testGetSpeed": [["void"]], "testGetFaaMode": [["void"]], "testSetSpeed": [["void"]]}, "className": "RMCTest", "renamed": ["void", "function", "(", ")", "{", "assertEquals", "(", "7", ",", "rmc", ".", "getDate", "(", ")", ".", "getMonth", "(", ")", ")", ";", "}"], "nl": "Test method for  {@link net.sf.marineapi.nmea.parser.RMCParser#getMonth()}.", "nlToks": ["Test", "method", "for", "-LCB-", "@link", "net.sf.marineapi.nmea.parser.RMCParser", "#getMonth", "-LRB-", "-RRB-", "-RCB-", "."], "path": "pkoziol/marine-api/tree/master/src/test/java/net/sf/marineapi/nmea/parser/RMCTest.java", "idx": 1173}
{"memberVariables": {"sigList": "List<SignatureElement>", "doc": "Document"}, "code": ["void", "function", "(", "Document", "doc", ")", "{", "this", ".", "doc", "=", "doc", ";", "eval", "(", ")", ";", "}"], "memberFunctions": {"getPayloads": [["List<Payload>"]], "eval": [["void"]], "log": [["Logger"]], "getDocument": [["Document"]], "getSignatureElements": [["List<SignatureElement>"]]}, "className": "SignatureManager", "renamed": ["void", "function", "(", "Document", "arg0", ")", "{", "this", ".", "doc", "=", "arg0", ";", "eval", "(", ")", ";", "}"], "nl": "Sets the current working Document.", "nlToks": ["Sets", "the", "current", "working", "Document", "."], "path": "0xwindows/WS-Attacker/tree/master/libs/Signature_Wrapping_Library/src/main/java/wsattacker/library/signatureWrapping/util/signature/SignatureManager.java", "idx": 1174}
{"memberVariables": {"billTo": "USAddress", "comment": "String", "items": "Items", "orderDate": "XMLGregorianCalendar", "shipTo": "USAddress"}, "code": ["USAddress", "function", "(", ")", "{", "return", "billTo", ";", "}"], "memberFunctions": {"getItems": [["Items"]], "getShipTo": [["USAddress"]], "setBillTo": [["void", "USAddress value"]], "setItems": [["void", "Items value"]], "setOrderDate": [["void", "XMLGregorianCalendar value"]], "setComment": [["void", "String value"]], "getOrderDate": [["XMLGregorianCalendar"]], "getComment": [["String"]], "setShipTo": [["void", "USAddress value"]]}, "className": "PurchaseOrderType", "renamed": ["USAddress", "function", "(", ")", "{", "return", "billTo", ";", "}"], "nl": "Gets the value of the billTo property.", "nlToks": ["Gets", "the", "value", "of", "the", "billTo", "property", "."], "path": "pmeijer/meta-core/tree/master/meta/DesignDataPackage/tools/jaxb-ri-2.2.6/samples/streaming-unmarshalling/src/primer/PurchaseOrderType.java", "idx": 1176}
{"memberVariables": {"mOutputStreamMock": "OutputStream", "mHttpConMock": "HttpURLConnection", "mThrown=ExpectedException.none()": "ExpectedException"}, "code": ["void", "function", "(", ")", "{", "String", "errorMessage", "=", "\"protocol doesn't support output\"", ";", "when", "(", "mHttpConMock", ".", "getOutputStream", "(", ")", ")", ".", "thenThrow", "(", "new", "IOException", "(", "errorMessage", ")", ")", ";", "mThrown", ".", "expect", "(", "IOException", ".", "class", ")", ";", "mThrown", ".", "expectMessage", "(", "errorMessage", ")", ";", "new", "SwiftOutputStream", "(", "mHttpConMock", ")", ".", "close", "(", ")", ";", "}"], "memberFunctions": {"testCloseError": [["void"]], "testCloseSuccess": [["void"]], "before": [["void"]], "testFlush": [["void"]], "testWrite3": [["void"]], "testWrite1": [["void"]], "testWrite2": [["void"]]}, "className": "SwiftOutputStreamTest", "renamed": ["void", "function", "(", ")", "{", "String", "loc0", "=", "\"srini_string\"", ";", "when", "(", "mHttpConMock", ".", "getOutputStream", "(", ")", ")", ".", "thenThrow", "(", "new", "IOException", "(", "loc0", ")", ")", ";", "mThrown", ".", "expect", "(", "IOException", ".", "class", ")", ";", "mThrown", ".", "expectMessage", "(", "loc0", ")", ";", "new", "SwiftOutputStream", "(", "mHttpConMock", ")", ".", "close", "(", ")", ";", "}"], "nl": "Tests to ensure IOException is thrown if  {@link HttpURLConnection#getOutputStream()} throws anIOException.", "nlToks": ["Tests", "to", "ensure", "IOException", "is", "thrown", "if", "-LCB-", "@link", "HttpURLConnection", "#getOutputStream", "-LRB-", "-RRB-", "-RCB-", "throws", "anIOException", "."], "path": "poemlin/alluxio/tree/master/underfs/swift/src/test/java/alluxio/underfs/swift/SwiftOutputStreamTest.java", "idx": 1177}
{"memberVariables": {"keySize=256": "int", "entropyBytes": "byte[]", "clientEntropy": "Entropy", "secret": "byte[]", "computedKey": "boolean", "LOG=LogUtils.getL7dLogger(SymmetricKeyHandler.class)": "Logger"}, "code": ["byte", "[", "]", "function", "(", ")", "{", "return", "secret", ";", "}"], "memberFunctions": {"createSymmetricKey": [["void"]], "isComputedKey": [["boolean"]], "getKeySize": [["long"]], "getEntropyBytes": [["byte[]"]]}, "className": "SymmetricKeyHandler", "renamed": ["byte", "[", "]", "function", "(", ")", "{", "return", "secret", ";", "}"], "nl": "Get the secret", "nlToks": ["Get", "the", "secret"], "path": "primesign/cxf/tree/master/services/sts/sts-core/src/main/java/org/apache/cxf/sts/token/provider/SymmetricKeyHandler.java", "idx": 1178}
{"memberVariables": {"_to_state": "lalr_state", "_next": "lalr_transition", "_on_symbol": "symbol"}, "code": ["symbol", "function", "(", ")", "{", "return", "_on_symbol", ";", "}"], "memberFunctions": {"next": [["lalr_transition"]], "toString": [["String"]], "to_state": [["lalr_state"]]}, "className": "lalr_transition", "renamed": ["symbol", "function", "(", ")", "{", "return", "_on_symbol", ";", "}"], "nl": "The symbol we make the transition on.", "nlToks": ["The", "symbol", "we", "make", "the", "transition", "on", "."], "path": "polyglot-compiler/polyglot/tree/master/tools/java_cup/src/java_cup/lalr_transition.java", "idx": 1179}
{"memberVariables": {}, "code": ["void", "function", "(", "DAVTransaction", "transaction", ",", "DAVResource", "resource", ")", "{", "transaction", ".", "setHeader", "(", "\"Content-Type\"", ",", "resource", ".", "getContentType", "(", ")", ")", ";", "transaction", ".", "setHeader", "(", "\"Allow\"", ",", "DAVProcessor", ".", "METHODS", ")", ";", "transaction", ".", "setStatus", "(", "200", ")", ";", "}"], "memberFunctions": {}, "className": "OPTIONS", "renamed": ["void", "function", "(", "DAVTransaction", "arg0", ",", "DAVResource", "arg1", ")", "{", "arg0", ".", "setHeader", "(", "\"srini_string\"", ",", "arg1", ".", "getContentType", "(", ")", ")", ";", "arg0", ".", "setHeader", "(", "\"srini_string\"", ",", "DAVProcessor", ".", "METHODS", ")", ";", "arg0", ".", "setStatus", "(", "200", ")", ";", "}"], "nl": "Process the OPTIONS method.", "nlToks": ["Process", "the", "OPTIONS", "method", "."], "path": "pfumagalli/webdav/tree/master/src/main/java/it/could/webdav/methods/OPTIONS.java", "idx": 1180}
{"memberVariables": {"name": "String", "UNSPEC=new Decision(\"misc.decision.uncategorized\",1)": "Decision", "priority": "int"}, "code": ["boolean", "function", "(", "Object", "d2", ")", "{", "if", "(", "!", "(", "d2", "instanceof", "Decision", ")", ")", "{", "return", "false", ";", "}", "return", "(", "(", "Decision", ")", "d2", ")", ".", "getName", "(", ")", ".", "equals", "(", "getName", "(", ")", ")", ";", "}"], "memberFunctions": {"setName": [["void", "String n"]], "getName": [["String"]], "hashCode": [["int"]], "getPriority": [["int"]], "toString": [["String"]], "setPriority": [["void", "int p"]]}, "className": "Decision", "renamed": ["boolean", "function", "(", "Object", "arg0", ")", "{", "if", "(", "!", "(", "arg0", "instanceof", "Decision", ")", ")", "{", "return", "false", ";", "}", "return", "(", "(", "Decision", ")", "arg0", ")", ".", "getName", "(", ")", ".", "equals", "(", "getName", "(", ")", ")", ";", "}"], "nl": "Two decisions are considered to be equal if their names are equal. The priority is not considered. {@inheritDoc}", "nlToks": ["Two", "decisions", "are", "considered", "to", "be", "equal", "if", "their", "names", "are", "equal", ".", "The", "priority", "is", "not", "considered", ".", "-LCB-", "@inheritDoc", "-RCB-"], "path": "pichiliani/CoArgoUML/tree/master/v0.24/fonte/src/argouml-app/src/org/argouml/cognitive/Decision.java", "idx": 1181}
{"memberVariables": {}, "code": ["AddressingProperties", "function", "(", "Message", "message", ",", "boolean", "isProviderContext", ",", "boolean", "isOutbound", ")", "{", "return", "org", ".", "apache", ".", "cxf", ".", "ws", ".", "addressing", ".", "ContextUtils", ".", "retrieveMAPs", "(", "message", ",", "isProviderContext", ",", "isOutbound", ")", ";", "}"], "memberFunctions": {"retrieveRMProperties": [["RMProperties", "Message message", "boolean outbound"]], "storeRMProperties": [["void", "Message message", "RMProperties rmps", "boolean outbound"]], "isServerSide": [["boolean", "Message message"]], "getProtocolVariation": [["ProtocolVariation", "Message message"]], "setProtocolVariation": [["void", "Message message", "ProtocolVariation protocol"]], "getRMPropertiesKey": [["String", "boolean outbound"]], "isRMProtocolMessage": [["boolean", "String action"]], "storeMAPs": [["void", "AddressingProperties maps", "Message message", "boolean isOutbound", "boolean isRequestor"]], "generateUUID": [["String"]]}, "className": "RMContextUtils", "renamed": ["AddressingProperties", "function", "(", "Message", "arg0", ",", "boolean", "arg1", ",", "boolean", "arg2", ")", "{", "return", "org", ".", "apache", ".", "cxf", ".", "ws", ".", "addressing", ".", "ContextUtils", ".", "retrieveMAPs", "(", "arg0", ",", "arg1", ",", "arg2", ")", ";", "}"], "nl": "Retrieves the addressing properties from the current message.", "nlToks": ["Retrieves", "the", "addressing", "properties", "from", "the", "current", "message", "."], "path": "primesign/cxf/tree/master/rt/ws/rm/src/main/java/org/apache/cxf/ws/rm/RMContextUtils.java", "idx": 1182}
{"memberVariables": {}, "code": ["GetOfferDetailsResponse", ".", "Return", ".", "DetailOfferData", ".", "Products", ".", "Product", "function", "(", ")", "{", "return", "new", "GetOfferDetailsResponse", ".", "Return", ".", "DetailOfferData", ".", "Products", ".", "Product", "(", ")", ";", "}"], "memberFunctions": {"createGetOfferDetailsResponseReturnDetailOfferDataSourceGeos": [["GetOfferDetailsResponse.Return.DetailOfferData.SourceGeos"]], "createGetOfferDetailsResponseReturnDetailOfferDataSeo": [["GetOfferDetailsResponse.Return.DetailOfferData.Seo"]], "createGetOfferDetailsResponseReturnDetailOfferDataMerchantAddresses": [["GetOfferDetailsResponse.Return.DetailOfferData.Merchant.Addresses"]], "createGetOfferDetailsResponseReturnDetailOfferDataTargetGeosGeoCountry": [["GetOfferDetailsResponse.Return.DetailOfferData.TargetGeos.Geo.Country"]], "createGetOfferDetailsResponseReturnDetailOfferDataOfferMediaOfferImageEntry": [["GetOfferDetailsResponse.Return.DetailOfferData.OfferMedia.OfferImage.Entry"]], "createGetOfferDetailsResponseReturnDetailOfferDataTargetGeosGeo": [["GetOfferDetailsResponse.Return.DetailOfferData.TargetGeos.Geo"]], "createGetOfferDetailsResponseReturnDetailOfferDataOfferMedia": [["GetOfferDetailsResponse.Return.DetailOfferData.OfferMedia"]], "createGetOfferDetailsResponseReturnDetailOfferDataFulfillmentPartner": [["GetOfferDetailsResponse.Return.DetailOfferData.FulfillmentPartner"]], "createGetOfferDetailsResponseReturnDetailOfferDataOfferMediaOfferImageEntryValue": [["GetOfferDetailsResponse.Return.DetailOfferData.OfferMedia.OfferImage.Entry.Value"]], "createGetOfferDetailsResponseReturnDetailOfferDataRedemptionAddressesRedemptionAddress": [["GetOfferDetailsResponse.Return.DetailOfferData.RedemptionAddresses.RedemptionAddress"]], "createGetOfferDetailsResponseReturnDetailOfferDataSourceGeosGeoRegion": [["GetOfferDetailsResponse.Return.DetailOfferData.SourceGeos.Geo.Region"]], "createGetOfferDetailsResponseReturnDetailOfferDataTargetGeosGeoCity": [["GetOfferDetailsResponse.Return.DetailOfferData.TargetGeos.Geo.City"]], "createGetOfferDetailsResponseReturnDetailOfferData": [["GetOfferDetailsResponse.Return.DetailOfferData"]], "createGetOfferDetailsResponse": [["GetOfferDetailsResponse"]], "createGetOfferDetailsResponseReturnDetailOfferDataSourceGeosGeoCity": [["GetOfferDetailsResponse.Return.DetailOfferData.SourceGeos.Geo.City"]], "createGetOfferDetailsResponseReturnDetailOfferDataOfferMediaOfferImageEntryValueItem": [["GetOfferDetailsResponse.Return.DetailOfferData.OfferMedia.OfferImage.Entry.Value.Item"]], "createGetOfferDetailsResponseReturnDetailOfferDataProducts": [["GetOfferDetailsResponse.Return.DetailOfferData.Products"]], "createGetOfferDetailsResponseReturnDetailOfferDataOfferMediaOfferImage": [["GetOfferDetailsResponse.Return.DetailOfferData.OfferMedia.OfferImage"]], "createGetOfferDetailsResponseReturnDetailOfferDataRedemptionAddresses": [["GetOfferDetailsResponse.Return.DetailOfferData.RedemptionAddresses"]], "createGetOfferDetailsResponseReturn": [["GetOfferDetailsResponse.Return"]], "createGetOfferDetailsResponseReturnDetailOfferDataSourceGeosGeoCountry": [["GetOfferDetailsResponse.Return.DetailOfferData.SourceGeos.Geo.Country"]], "createGetOfferDetailsResponseReturnDetailOfferDataTargetGeos": [["GetOfferDetailsResponse.Return.DetailOfferData.TargetGeos"]], "createGetOfferDetailsResponseReturnDetailOfferDataTargetGeosGeoRegion": [["GetOfferDetailsResponse.Return.DetailOfferData.TargetGeos.Geo.Region"]], "createGetOfferDetailsResponseReturnDetailOfferDataMerchant": [["GetOfferDetailsResponse.Return.DetailOfferData.Merchant"]], "createGetOfferDetailsResponseReturnDetailOfferDataSourceGeosGeo": [["GetOfferDetailsResponse.Return.DetailOfferData.SourceGeos.Geo"]], "createGetOfferDetailsResponseReturnDetailOfferDataOfferDisplay": [["GetOfferDetailsResponse.Return.DetailOfferData.OfferDisplay"]]}, "className": "ObjectFactory", "renamed": ["GetOfferDetailsResponse", ".", "Return", ".", "DetailOfferData", ".", "Products", ".", "Product", "function", "(", ")", "{", "return", "new", "GetOfferDetailsResponse", ".", "Return", ".", "DetailOfferData", ".", "Products", ".", "Product", "(", ")", ";", "}"], "nl": "Create an instance of  {@link GetOfferDetailsResponse.Return.DetailOfferData.Products.Product }", "nlToks": ["Create", "an", "instance", "of", "-LCB-", "@link", "GetOfferDetailsResponse.Return.DetailOfferData.Products.Product", "-RCB-"], "path": "priyankgandhi/mastercard/tree/master/eop-openapi-client/src/main/java/com/eop/api/offerdetail/gen/ObjectFactory.java", "idx": 1183}
{"memberVariables": {"mockServerMessage=mock(ServerMessage.class)": "ServerMessage", "mockServerSession=mock(ServerSession.class)": "ServerSession", "testEventProperties": "HashMap<String,Object>", "MOCK_SESSION_ID=\"1234-5678-9012-3456\"": "String", "acitivityController": "ActivityController"}, "code": ["void", "function", "(", ")", "{", "acitivityController", ".", "deregisterUserSession", "(", "null", ",", "mockServerMessage", ")", ";", "}"], "memberFunctions": {"testHandleEventThrowsIllegalArgumentExceptionOnEmptyUser": [["void"]], "testHandleEventThrowsIllegalArgumentExceptionOnEmptyApplication": [["void"]], "testDeregisterUserSessionWithNullServerSessionIdThrowsException": [["void"]], "testGetServerSessionByUserId": [["void"]], "tearDown": [["void"]], "testDeregisterUserSessionRemovesUserFromKnownClients": [["void"]], "testHandleEventThrowsIllegalArgumentExceptionOnEmptyMessage": [["void"]], "testHandleEventThrowsIllegalArgumentExceptionOnNullApplication": [["void"]], "testRegisterUserSessionWithNullServerSessionThrowsException": [["void"]], "testHandleEventThrowsIllegalArgumentExceptionOnNullUser": [["void"]], "testRegisterUserSession": [["void"]], "setUp": [["void"]], "testHandleEventThrowsIllegalArgumentExceptionOnNullTimestamp": [["void"]], "testRegisterUserSessionWithNullServerSessionIdThrowsException": [["void"]], "testHandleEventThrowsIllegalArgumentExceptionOnNullMessage": [["void"]]}, "className": "ActivityControllerTest", "renamed": ["void", "function", "(", ")", "{", "acitivityController", ".", "deregisterUserSession", "(", "null", ",", "mockServerMessage", ")", ";", "}"], "nl": "Test method for  {@link ActivityController#deregisterUserSession(ServerSession,ServerMessage)}Verifies that  {@code NullPointerException} is thrown when {@code ServerSession} is null.", "nlToks": ["Test", "method", "for", "-LCB-", "@link", "ActivityController", "#deregisterUserSession", "-LRB-", "ServerSession", ",", "ServerMessage", "-RRB-", "-RCB-", "Verifies", "that", "-LCB-", "@code", "NullPointerException", "-RCB-", "is", "thrown", "when", "-LCB-", "@code", "ServerSession", "-RCB-", "is", "null", "."], "path": "pklinef/ddf-ui/tree/master/search-ui/search-endpoint/src/test/java/org/codice/ddf/ui/searchui/query/controller/ActivityControllerTest.java", "idx": 1184}
{"memberVariables": {"channelOpenFuture=SettableFuture.create()": "SettableFuture<PaymentChannelClientConnection>", "wireParser": "ProtobufParser<Protos.TwoWayChannelMessage>", "channelClient": "PaymentChannelClient"}, "code": ["void", "function", "(", ")", "{", "wireParser", ".", "closeConnection", "(", ")", ";", "}"], "memberFunctions": {"getChannelOpenFuture": [["ListenableFuture<PaymentChannelClientConnection>"]], "settle": [["void"]], "incrementPayment": [["ListenableFuture<BigInteger>", "BigInteger size"]], "state": [["PaymentChannelClientState"]]}, "className": "PaymentChannelClientConnection", "renamed": ["void", "function", "(", ")", "{", "wireParser", ".", "closeConnection", "(", ")", ";", "}"], "nl": "Disconnects the network connection but doesn't request the server to settle the channel first (literally just unplugs the network socket and marks the stored channel state as inactive).", "nlToks": ["Disconnects", "the", "network", "connection", "but", "does", "n't", "request", "the", "server", "to", "settle", "the", "channel", "first", "-LRB-", "literally", "just", "unplugs", "the", "network", "socket", "and", "marks", "the", "stored", "channel", "state", "as", "inactive", "-RRB-", "."], "path": "plncoin/plncoin-and/tree/master/plncoinj/core/src/main/java/com/google/bitcoin/protocols/channels/PaymentChannelClientConnection.java", "idx": 1185}
{"memberVariables": {"log=LogFactory.getLog(CancerStudyPermissionEvaluator.class)": "Log"}, "code": ["boolean", "function", "(", "Authentication", "authentication", ",", "Serializable", "targetId", ",", "String", "targetType", ",", "Object", "permission", ")", "{", "throw", "new", "UnsupportedOperationException", "(", ")", ";", "}"], "memberFunctions": {"getGrantedAuthorities": [["Set<String>", "Authentication authentication"]]}, "className": "CancerStudyPermissionEvaluator", "renamed": ["boolean", "function", "(", "Authentication", "arg0", ",", "Serializable", "arg1", ",", "String", "arg2", ",", "Object", "arg3", ")", "{", "throw", "new", "UnsupportedOperationException", "(", ")", ";", "}"], "nl": "Implementation of  {@code PermissionEvaluator}. We do not support this method call.", "nlToks": ["Implementation", "of", "-LCB-", "@code", "PermissionEvaluator", "-RCB-", ".", "We", "do", "not", "support", "this", "method", "call", "."], "path": "adamabeshouse/cbioportal/tree/master/core/src/main/java/org/mskcc/cbio/portal/util/CancerStudyPermissionEvaluator.java", "idx": 1188}
{"memberVariables": {"leftButton": "JButton", "zoomOutButton": "JButton", "upButton": "JButton", "downButton": "JButton", "nightButton": "JToggleButton", "zoomInButton": "JButton", "rightButton": "JButton", "frame": "MapViewFrame"}, "code": ["void", "function", "(", "String", "[", "]", "args", ")", "{", "Locale", ".", "setDefault", "(", "Locale", ".", "US", ")", ";", "OsmViewerPlusApp", "demo", "=", "new", "OsmViewerPlusApp", "(", "args", ")", ";", "demo", ".", "getFrame", "(", ")", ".", "readMap", "(", "DataResource", ".", "getULMFileResource", "(", ")", ")", ";", "demo", ".", "showFrame", "(", ")", ";", "}"], "memberFunctions": {"actionPerformed": [["void", "ActionEvent e"]], "getFrame": [["MapViewFrame"]], "showFrame": [["void"]], "createDayRenderer": [["DefaultEntityRenderer"]]}, "className": "OsmViewerPlusApp", "renamed": ["void", "function", "(", "String", "[", "]", "arg0", ")", "{", "Locale", ".", "setDefault", "(", "Locale", ".", "US", ")", ";", "OsmViewerPlusApp", "loc0", "=", "new", "OsmViewerPlusApp", "(", "arg0", ")", ";", "loc0", ".", "getFrame", "(", ")", ".", "readMap", "(", "DataResource", ".", "getULMFileResource", "(", ")", ")", ";", "loc0", ".", "showFrame", "(", ")", ";", "}"], "nl": "Start application with program arg -screenwidth=xx (with xx the width in cm) or -screensize=yy (with yy measured diagonally in inch).", "nlToks": ["Start", "application", "with", "program", "arg", "-", "screenwidth", "=", "xx", "-LRB-", "with", "xx", "the", "width", "in", "cm", "-RRB-", "or", "-", "screensize", "=", "yy", "-LRB-", "with", "yy", "measured", "diagonally", "in", "inch", "-RRB-", "."], "path": "peterplupo/ia201102/tree/master/trabalho1/aimax-osm/src/main/java/aimax/osm/applications/OsmViewerPlusApp.java", "idx": 1189}
{"memberVariables": {"EXAMPLE=\"$RATTM,11,25.3,13.7,T,7.0,20.0,T,10.1,20.2,N,NAME,Q,,175550.24,A*34\"": "String", "ttm": "TTMParser", "empty": "TTMParser"}, "code": ["void", "function", "(", ")", "{", "assertEquals", "(", "7.0", ",", "ttm", ".", "getSpeed", "(", ")", ",", "0.001", ")", ";", "}"], "memberFunctions": {"testGetAcquisitionType": [["void"]], "testGetDistance": [["void"]], "testSetStatus": [["void"]], "testSetNumber": [["void"]], "testSetDistanceOfCPA": [["void"]], "testConstructor": [["void"]], "testGetTime": [["void"]], "testSetCourse": [["void"]], "testGetName": [["void"]], "testGetNumber": [["void"]], "testGetDistanceOfCPA": [["void"]], "setUp": [["void"]], "testGetCourse": [["void"]], "testSetReferenceTrue": [["void"]], "testSetReferenceFalse": [["void"]], "testSetAcquisitionType": [["void"]], "testSetBearing": [["void"]], "testGetBearing": [["void"]], "testSetDistance": [["void"]], "testSetTimeToCPA": [["void"]], "testSetTime": [["void"]], "testGetStatus": [["void"]], "testGetTimeToCPA": [["void"]], "testSetName": [["void"]], "testSetSpeed": [["void"]]}, "className": "TTMTest", "renamed": ["void", "function", "(", ")", "{", "assertEquals", "(", "7.0", ",", "ttm", ".", "getSpeed", "(", ")", ",", "0.001", ")", ";", "}"], "nl": "Test method for {@link net.sf.marineapi.nmea.parser.TTMParser#getSpeed()} .", "nlToks": ["Test", "method", "for", "-LCB-", "@link", "net.sf.marineapi.nmea.parser.TTMParser", "#getSpeed", "-LRB-", "-RRB-", "-RCB-", "."], "path": "pkoziol/marine-api/tree/master/src/test/java/net/sf/marineapi/nmea/parser/TTMTest.java", "idx": 1190}
{"memberVariables": {"dev": "Device"}, "code": ["void", "function", "(", ")", "{", "System", ".", "out", ".", "println", "(", "\"getCapabilities\"", ")", ";", "Device", "instance", "=", "null", ";", "ArrayList", "<", "Capability", ">", "expResult", "=", "null", ";", "ArrayList", "<", "Capability", ">", "result", "=", "instance", ".", "getCapabilities", "(", ")", ";", "assertEquals", "(", "expResult", ",", "result", ")", ";", "fail", "(", "\"The test case is a prototype.\"", ")", ";", "}"], "memberFunctions": {"testGetType": [["void"]], "setUpClass": [["void"]], "testGetDeviceName_0args": [["void"]], "testAddToPane": [["void"]], "testGetAddress": [["void"]], "tearDownClass": [["void"]], "tearDown": [["void"]], "testGetDeviceNames": [["void"]], "testGetDeviceBlock": [["void"]], "testAddCapabilities": [["void"]], "testToString": [["void"]], "testGetImgName": [["void"]], "testAddCapability": [["void"]], "testGetDeviceName_Locale": [["void"]], "setUp": [["void"]], "testGetImage": [["void"]], "testGetDeviceID": [["void"]], "testGetCapabilityBlock": [["void"]], "testRemoveCapability": [["void"]]}, "className": "DeviceTest", "renamed": ["void", "function", "(", ")", "{", "System", ".", "out", ".", "println", "(", "\"srini_string\"", ")", ";", "Device", "loc0", "=", "null", ";", "ArrayList", "<", "Capability", ">", "loc1", "=", "null", ";", "ArrayList", "<", "Capability", ">", "loc2", "=", "loc0", ".", "getCapabilities", "(", ")", ";", "assertEquals", "(", "loc1", ",", "loc2", ")", ";", "fail", "(", "\"srini_string\"", ")", ";", "}"], "nl": "Test of getCapabilities method, of class Device.", "nlToks": ["Test", "of", "getCapabilities", "method", ",", "of", "class", "Device", "."], "path": "hashinisenaratne/SIFEB/tree/master/Visual Programming Editor/SiFEB_VE/test/com/sifeb/ve/DeviceTest.java", "idx": 1191}
{"memberVariables": {"endLine": "int", "UNKNOWN=-1": "int", "endColumn": "int", "endOffset": "int", "COMPILER_GENERATED=new Position(\"Compiler Generated\",true)": "Position", "CALLER=THIS_METHOD + 1": "int", "offset": "int", "compilerGenerated=false": "boolean", "line": "int", "column": "int", "THIS_METHOD=1": "int", "END_UNUSED=-2": "int", "serialVersionUID=-4588386982624074261L": "long", "path": "String", "file": "String", "info": "String"}, "code": ["Position", "function", "(", "Position", "pos1", ",", "Position", "pos2", ")", "{", "if", "(", "!", "isComparable", "(", "pos1", ",", "pos2", ")", ")", "return", "null", ";", "if", "(", "pos1", ".", "endLine", ">", "pos2", ".", "endLine", ")", "return", "pos1", ";", "if", "(", "pos1", ".", "endLine", "==", "pos2", ".", "endLine", "&&", "pos1", ".", "endColumn", ">=", "pos2", ".", "endColumn", ")", "return", "pos1", ";", "return", "pos2", ";", "}"], "memberFunctions": {"endLine": [["int"]], "endColumn": [["int"]], "endOffset": [["int"]], "offset": [["int"]], "line": [["int"]], "column": [["int"]], "truncateEnd": [["Position", "int len"]], "endOf": [["Position"]], "path": [["String"]], "startOf": [["Position"]], "file": [["String"]], "isComparable": [["boolean", "Position pos1", "Position pos2"]], "isCompilerGenerated": [["boolean"]], "toString": [["String"]], "setInfo": [["void", "String info"]], "first": [["Position", "Position pos1", "Position pos2"]], "compilerGenerated": [["Position", "int depth"], ["Position"], ["Position", "String info"]], "nameAndLineString": [["String"]]}, "className": "Position", "renamed": ["Position", "function", "(", "Position", "arg0", ",", "Position", "arg1", ")", "{", "if", "(", "!", "isComparable", "(", "arg0", ",", "arg1", ")", ")", "return", "null", ";", "if", "(", "arg0", ".", "endLine", ">", "arg1", ".", "endLine", ")", "return", "arg0", ";", "if", "(", "arg0", ".", "endLine", "==", "arg1", ".", "endLine", "&&", "arg0", ".", "endColumn", ">=", "arg1", ".", "endColumn", ")", "return", "arg0", ";", "return", "arg1", ";", "}"], "nl": "Returns the last of the given 2 positions i.e. if pos1 ends after pos2, then last(pos1, pos2) = pos1. Returns null if the given 2 positions are not comparable.", "nlToks": ["Returns", "the", "last", "of", "the", "given", "2", "positions", "i.e.", "if", "pos1", "ends", "after", "pos2", ",", "then", "last", "-LRB-", "pos1", ",", "pos2", "-RRB-", "=", "pos1", ".", "Returns", "null", "if", "the", "given", "2", "positions", "are", "not", "comparable", "."], "path": "polyglot-compiler/polyglot/tree/master/src/polyglot/util/Position.java", "idx": 1193}
{"memberVariables": {"expires": "Date", "data": "byte[]", "transformedTokenIdentifier": "String", "created": "Date", "unattachedReference": "Element", "secret": "byte[]", "securityContext": "SecurityContext", "tokenHash": "int", "token": "Element", "crypto": "Crypto", "principal": "Principal", "serialVersionUID=3820740387121650613L": "long", "wsuId": "String", "issuerAddress": "String", "encrKeySha1Value": "String", "id": "String", "x509cert": "X509Certificate", "BOOTSTRAP_TOKEN_ID=\"bootstrap_security_token_id\"": "String", "tokenType": "String", "attachedReference": "Element", "properties": "Map<String,Object>", "key": "Key"}, "code": ["void", "function", "(", "String", "transformedTokenIdentifier", ")", "{", "this", ".", "transformedTokenIdentifier", "=", "transformedTokenIdentifier", ";", "}"], "memberFunctions": {"setAttachedReference": [["void", "Element attachedReference"]], "getTokenType": [["String"]], "setProperties": [["void", "Map<String,Object> properties"]], "setExpires": [["void", "Date expires"]], "getIssuerAddress": [["String"]], "setSHA1": [["void", "String sha"]], "getId": [["String"]], "setX509Certificate": [["void", "X509Certificate cert", "Crypto cpt"]], "getTransformedTokenIdentifier": [["String"]], "setTokenHash": [["void", "int hash"]], "setPrincipal": [["void", "Principal principal"]], "getPrincipal": [["Principal"]], "getIdFromSTR": [["String", "Element str"]], "setId": [["void", "String id"]], "setIssuerAddress": [["void", "String issuerAddress"]], "getData": [["byte[]"]], "setKey": [["void", "Key key"]], "setTokenType": [["void", "String s"]], "getKey": [["Key"]], "setData": [["void", "byte[] data"]], "getProperties": [["Map<String,Object>"]], "getTokenHash": [["int"]], "getCreated": [["Date"]], "getUnattachedReference": [["Element"]], "processLifeTime": [["void", "Element lifetimeElem"]], "setUnattachedReference": [["void", "Element unattachedReference"]], "setSecurityContext": [["void", "SecurityContext securityContext"]], "getCrypto": [["Crypto"]], "getSecret": [["byte[]"]], "setToken": [["void", "Element token"]], "setSecret": [["void", "byte[] secret"]], "getX509Certificate": [["X509Certificate"]], "getToken": [["Element"]], "isAboutToExpire": [["boolean", "long secondsToExpiry"]], "isExpired": [["boolean"]], "setWsuId": [["void", "String wsuId"]], "getExpires": [["Date"]], "getWsuId": [["String"]], "cloneElement": [["Element", "Element el"]], "getAttachedReference": [["Element"]], "getSHA1": [["String"]], "getSecurityContext": [["SecurityContext"]]}, "className": "SecurityToken", "renamed": ["void", "function", "(", "String", "arg0", ")", "{", "this", ".", "transformedTokenIdentifier", "=", "arg0", ";", "}"], "nl": "Set the identifier corresponding to a transformed version of this token", "nlToks": ["Set", "the", "identifier", "corresponding", "to", "a", "transformed", "version", "of", "this", "token"], "path": "primesign/cxf/tree/master/rt/ws/security/src/main/java/org/apache/cxf/ws/security/tokenstore/SecurityToken.java", "idx": 1194}
{"memberVariables": {"vertexLabels": "List<VertexLabelType>", "globalEdgeLookup": "Hashtable<VertexLabelType,Hashtable<VertexLabelType,EdgeLabelType>>"}, "code": ["List", "<", "VertexLabelType", ">", "function", "(", ")", "{", "return", "vertexLabels", ";", "}"], "memberFunctions": {"set": [["void", "VertexLabelType from", "VertexLabelType to", "EdgeLabelType el"]], "getSuccessors": [["List<VertexLabelType>", "VertexLabelType v"]], "get": [["EdgeLabelType", "VertexLabelType from", "VertexLabelType to"]], "isVertexLabel": [["boolean", "VertexLabelType v"]], "clear": [["void"]], "checkForNewVertex": [["Hashtable<VertexLabelType,EdgeLabelType>", "VertexLabelType v"]], "addVertex": [["void", "VertexLabelType v"]], "remove": [["void", "VertexLabelType from", "VertexLabelType to"]]}, "className": "LabeledGraph", "renamed": ["List", "<", "VertexLabelType", ">", "function", "(", ")", "{", "return", "vertexLabels", ";", "}"], "nl": "Returns the labels of all vertices within the graph.", "nlToks": ["Returns", "the", "labels", "of", "all", "vertices", "within", "the", "graph", "."], "path": "peterplupo/ia201102/tree/master/trabalho1/aima-core/src/main/java/aima/core/util/datastructure/LabeledGraph.java", "idx": 1197}
{"memberVariables": {"rte": "RTESentence", "EXAMPLE=\"$GPRTE,1,1,c,0,MELIN,RUSKI,KNUDAN*25\"": "String", "empty": "RTESentence"}, "code": ["void", "function", "(", ")", "{", "assertTrue", "(", "rte", ".", "isActiveRoute", "(", ")", ")", ";", "}"], "memberFunctions": {"testGetWaypointIds": [["void"]], "testIsFirst": [["void"]], "testGetSentenceIndex": [["void"]], "testConstructor": [["void"]], "testSetSentenceCountWithNegativeValue": [["void"]], "testAddWaypointId": [["void"]], "testGetSentenceCount": [["void"]], "testSetWaypointIds": [["void"]], "testSetRouteId": [["void"]], "testIsWorkingRoute": [["void"]], "testSetSentenceCount": [["void"]], "testGetRouteId": [["void"]], "testSetRouteTypeActive": [["void"]], "setUp": [["void"]], "testIsLast": [["void"]], "testGetWaypointCount": [["void"]], "testSetSentenceIndex": [["void"]], "testSetRouteTypeWorking": [["void"]], "testSetSentenceIndexWithNegativeValue": [["void"]]}, "className": "RTETest", "renamed": ["void", "function", "(", ")", "{", "assertTrue", "(", "rte", ".", "isActiveRoute", "(", ")", ")", ";", "}"], "nl": "Test method for {@link net.sf.marineapi.nmea.parser.RTEParser#isActiveRoute()}.", "nlToks": ["Test", "method", "for", "-LCB-", "@link", "net.sf.marineapi.nmea.parser.RTEParser", "#isActiveRoute", "-LRB-", "-RRB-", "-RCB-", "."], "path": "pkoziol/marine-api/tree/master/src/test/java/net/sf/marineapi/nmea/parser/RTETest.java", "idx": 1198}
{"memberVariables": {"lonMax": "float", "latMin": "float", "lonMin": "float", "latMax": "float"}, "code": ["float", "function", "(", ")", "{", "return", "(", "float", ")", "Position", ".", "getDistKM", "(", "latMax", ",", "lonMin", ",", "latMin", ",", "lonMin", ")", ";", "}"], "memberFunctions": {"getWestEastDistKM": [["float"]], "getLatMax": [["float"]], "intersectsWith": [["boolean", "BoundingBox bb"]], "adjust": [["void", "Collection<MapNode> nodes"]], "getLatMin": [["float"]], "toString": [["String"]], "intersectWith": [["BoundingBox", "BoundingBox bb"]], "isInside": [["boolean", "double lat", "double lon"]], "getLonMin": [["float"]], "getLonMax": [["float"]], "unifyWith": [["BoundingBox", "BoundingBox bb"]]}, "className": "BoundingBox", "renamed": ["float", "function", "(", ")", "{", "return", "(", "float", ")", "Position", ".", "getDistKM", "(", "latMax", ",", "lonMin", ",", "latMin", ",", "lonMin", ")", ";", "}"], "nl": "Returns the distance between latMax and latMin in Kilometers.", "nlToks": ["Returns", "the", "distance", "between", "latMax", "and", "latMin", "in", "Kilometers", "."], "path": "peterplupo/ia201102/tree/master/trabalho1/aimax-osm/src/main/java/aimax/osm/data/BoundingBox.java", "idx": 1199}
{"memberVariables": {"hdg": "HDGSentence", "EXAMPLE=\"$HCHDG,123.4,1.2,E,1.2,W\"": "String"}, "code": ["void", "function", "(", ")", "{", "final", "double", "value", "=", "180.000001", ";", "try", "{", "hdg", ".", "setDeviation", "(", "value", ")", ";", "fail", "(", "\"Did not throw exception\"", ")", ";", "}", "catch", "(", "IllegalArgumentException", "iae", ")", "{", "}", "catch", "(", "Exception", "e", ")", "{", "fail", "(", "e", ".", "getMessage", "(", ")", ")", ";", "}", "}"], "memberFunctions": {"testSetHeadingTooHigh": [["void"]], "testIsTrue": [["void"]], "testSetHeading": [["void"]], "testHDGParserTalkerId": [["void"]], "testSetVariationWest": [["void"]], "testConstructor": [["void"]], "testSetVariationTooLow": [["void"]], "testGetVariation": [["void"]], "testSetVariationTooHigh": [["void"]], "testSetVariationEast": [["void"]], "testGetDeviation": [["void"]], "testSetDeviationTooLow": [["void"]], "setUp": [["void"]], "testGetHeading": [["void"]], "testSetDeviationEast": [["void"]], "testHDGParserString": [["void"]], "testSetDeviationWest": [["void"]], "testSetHeadingTooLow": [["void"]]}, "className": "HDGTest", "renamed": ["void", "function", "(", ")", "{", "final", "double", "loc0", "=", "180.000001", ";", "try", "{", "hdg", ".", "setDeviation", "(", "loc0", ")", ";", "fail", "(", "\"srini_string\"", ")", ";", "}", "catch", "(", "IllegalArgumentException", "loc1", ")", "{", "}", "catch", "(", "Exception", "loc1", ")", "{", "fail", "(", "loc1", ".", "getMessage", "(", ")", ")", ";", "}", "}"], "nl": "Test method for {@link net.sf.marineapi.nmea.parser.HDGParser#setDeviation(double)}.", "nlToks": ["Test", "method", "for", "-LCB-", "@link", "net.sf.marineapi.nmea.parser.HDGParser", "#setDeviation", "-LRB-", "double", "-RRB-", "-RCB-", "."], "path": "pkoziol/marine-api/tree/master/src/test/java/net/sf/marineapi/nmea/parser/HDGTest.java", "idx": 1200}
{"memberVariables": {"FRAME_SIZE_EXCEPTION_PATTERN=Pattern.compile(\"Frame size \\\\((\\\\d+)\\\\) larger than max length\")": "Pattern", "mConnected=false": "boolean", "mProtocol=null": "TProtocol", "mMode": "String", "mServiceVersion": "long", "mAddress=null": "InetSocketAddress", "mTransportProvider": "TransportProvider", "LOG=LoggerFactory.getLogger(Constants.LOGGER_TYPE)": "Logger", "RPC_MAX_NUM_RETRY=30": "int", "mClosed=false": "boolean"}, "code": ["boolean", "function", "(", ")", "{", "return", "mConnected", ";", "}"], "memberFunctions": {"beforeDisconnect": [["void"]], "disconnect": [["void"]], "afterDisconnect": [["void"]], "afterConnect": [["void"]], "checkVersion": [["void", "AlluxioService.Client client", "long version"]], "getServiceName": [["String"]], "getClient": [["AlluxioService.Client"]], "call": [["V"], ["V"]], "retryRPC": [["V", "RpcCallable<V> rpc"], ["V", "RpcCallableThrowsAlluxioTException<V> rpc"]], "getServiceVersion": [["long"]], "resetConnection": [["void"]], "getAddress": [["InetSocketAddress"]], "close": [["void"]], "connect": [["void"]]}, "className": "AbstractClient", "renamed": ["boolean", "function", "(", ")", "{", "return", "mConnected", ";", "}"], "nl": "Returns the connected status of the client.", "nlToks": ["Returns", "the", "connected", "status", "of", "the", "client", "."], "path": "poemlin/alluxio/tree/master/core/common/src/main/java/alluxio/AbstractClient.java", "idx": 1201}
{"memberVariables": {"W3CDATETIME_MASKS={\"yyyy-MM-dd'T'HH:mmz\"}": "String[]", "UTC=getTimeZone(\"UTC\")": "TimeZone"}, "code": ["Calendar", "function", "(", "String", "dateString", ")", "{", "return", "getCalendar", "(", "dateString", ",", "DateUtils", ".", "getTimeZone", "(", "\"UTC\"", ")", ")", ";", "}"], "memberFunctions": {"isDSTChangeDay": [["boolean", "Calendar cal"]], "formatDateUTC": [["String", "Date d"], ["String", "Calendar c"]], "getISO8601DateFormat": [["DateFormat"]], "getTimeZone": [["TimeZone", "String tzId"]], "toDate": [["java.util.Date", "java.sql.Timestamp timestamp"]], "convertDateToTimestamp": [["Timestamp", "Date d"]], "parseDateUTC": [["Date", "String s"]], "convertDateToString": [["String", "Date date"]], "moveToEnd": [["void", "Calendar cal", "TimeUnit endOfFlag"]], "parseUsingMask": [["Date", "String[] masks", "String sDate"]], "hoursInDay": [["int", "Calendar cal"]]}, "className": "DateUtils", "renamed": ["Calendar", "function", "(", "String", "arg0", ")", "{", "return", "getCalendar", "(", "arg0", ",", "DateUtils", ".", "getTimeZone", "(", "\"srini_string\"", ")", ")", ";", "}"], "nl": "Create a Calendar instance for UTC time zone using the specified date.", "nlToks": ["Create", "a", "Calendar", "instance", "for", "UTC", "time", "zone", "using", "the", "specified", "date", "."], "path": "pingpangkuangmo/oozie/tree/master/core/src/main/java/org/apache/oozie/util/DateUtils.java", "idx": 1204}
{"memberVariables": {"mBuffer=null": "ByteBuf", "mThrown=ExpectedException.none()": "ExpectedException", "LENGTH=4": "int"}, "code": ["void", "function", "(", ")", "{", "DataNettyBuffer", "data", "=", "new", "DataNettyBuffer", "(", "mBuffer", ",", "LENGTH", ")", ";", "Assert", ".", "assertEquals", "(", "LENGTH", ",", "data", ".", "getLength", "(", ")", ")", ";", "}"], "memberFunctions": {"bufferAlreadyReleased": [["void"]], "before": [["void"]], "getNettyOutputNotSupported": [["void"]], "singleNioBufferCheckFailed": [["void"]], "releaseBuffer": [["void"]], "releaseBufferTest": [["void"]], "refCountCheckFailed": [["void"]], "readOnlyByteBuffer": [["void"]], "after": [["void"]], "releaseBufferFail": [["void"]]}, "className": "DataNettyBufferTest", "renamed": ["void", "function", "(", ")", "{", "DataNettyBuffer", "loc0", "=", "new", "DataNettyBuffer", "(", "mBuffer", ",", "LENGTH", ")", ";", "Assert", ".", "assertEquals", "(", "LENGTH", ",", "loc0", ".", "getLength", "(", ")", ")", ";", "}"], "nl": "Tests the  {@link DataNettyBuffer#getLength()} method.", "nlToks": ["Tests", "the", "-LCB-", "@link", "DataNettyBuffer", "#getLength", "-LRB-", "-RRB-", "-RCB-", "method", "."], "path": "poemlin/alluxio/tree/master/core/server/src/test/java/alluxio/network/protocol/databuffer/DataNettyBufferTest.java", "idx": 1205}
{"memberVariables": {"comments": "String", "feedId": "String", "testId": "String", "elapsedTime": "String"}, "code": ["void", "function", "(", "String", "testId", ")", "{", "this", ".", "testId", "=", "testId", ";", "}"], "memberFunctions": {"setFeedId": [["void", "String feedId"]], "setElapsedTime": [["void", "String elapsedTime"]], "getComments": [["String"]], "toString": [["String"]], "getFeedId": [["String"]], "setComments": [["void", "String comments"]], "getTestId": [["String"]], "getElapsedTime": [["String"]], "isFileDownLoadedToDestination": [["boolean"]]}, "className": "PubFilesOperationResp", "renamed": ["void", "function", "(", "String", "arg0", ")", "{", "this", ".", "testId", "=", "arg0", ";", "}"], "nl": "Sets the test id.", "nlToks": ["Sets", "the", "test", "id", "."], "path": "pkesireddy/portico_fletcher/tree/master/FetcherTesterService/src/main/java/org/ithaka/cm/fetchertester/model/PubFilesOperationResp.java", "idx": 1206}
{"memberVariables": {"hdg": "HDGSentence", "EXAMPLE=\"$HCHDG,123.4,1.2,E,1.2,W\"": "String"}, "code": ["void", "function", "(", ")", "{", "assertEquals", "(", "1.2", ",", "hdg", ".", "getDeviation", "(", ")", ",", "0.1", ")", ";", "}"], "memberFunctions": {"testSetDeviationTooHigh": [["void"]], "testSetHeadingTooHigh": [["void"]], "testIsTrue": [["void"]], "testSetHeading": [["void"]], "testHDGParserTalkerId": [["void"]], "testSetVariationWest": [["void"]], "testConstructor": [["void"]], "testSetVariationTooLow": [["void"]], "testGetVariation": [["void"]], "testSetVariationTooHigh": [["void"]], "testSetVariationEast": [["void"]], "testSetDeviationTooLow": [["void"]], "setUp": [["void"]], "testGetHeading": [["void"]], "testSetDeviationEast": [["void"]], "testHDGParserString": [["void"]], "testSetDeviationWest": [["void"]], "testSetHeadingTooLow": [["void"]]}, "className": "HDGTest", "renamed": ["void", "function", "(", ")", "{", "assertEquals", "(", "1.2", ",", "hdg", ".", "getDeviation", "(", ")", ",", "0.1", ")", ";", "}"], "nl": "Test method for {@link net.sf.marineapi.nmea.parser.HDGParser#getDeviation()}.", "nlToks": ["Test", "method", "for", "-LCB-", "@link", "net.sf.marineapi.nmea.parser.HDGParser", "#getDeviation", "-LRB-", "-RRB-", "-RCB-", "."], "path": "pkoziol/marine-api/tree/master/src/test/java/net/sf/marineapi/nmea/parser/HDGTest.java", "idx": 1208}
{"memberVariables": {}, "code": ["void", "function", "(", ")", "{", "System", ".", "out", ".", "println", "(", "\"getNumberRequests\"", ")", ";", "LogEntryInterval", "instance", "=", "new", "LogEntryInterval", "(", ")", ";", "int", "expResult", "=", "0", ";", "int", "result", "=", "instance", ".", "getNumberRequests", "(", ")", ";", "assertEquals", "(", "expResult", ",", "result", ")", ";", "}"], "memberFunctions": {"testSetIntervalNumber": [["void"]], "testGetIntervalNumber": [["void"]], "testSetMeanResponseTime": [["void"]], "testSetNumberRequests": [["void"]], "testGetMeanResponseTime": [["void"]], "testIncNumberRequests": [["void"]]}, "className": "LogEntryIntervalTest", "renamed": ["void", "function", "(", ")", "{", "System", ".", "out", ".", "println", "(", "\"srini_string\"", ")", ";", "LogEntryInterval", "loc0", "=", "new", "LogEntryInterval", "(", ")", ";", "int", "loc1", "=", "0", ";", "int", "loc2", "=", "loc0", ".", "getNumberRequests", "(", ")", ";", "assertEquals", "(", "loc1", ",", "loc2", ")", ";", "}"], "nl": "Test of getNumberRequests method, of class LogEntryInterval.", "nlToks": ["Test", "of", "getNumberRequests", "method", ",", "of", "class", "LogEntryInterval", "."], "path": "0xwindows/WS-Attacker/tree/master/plugins/Denial_of_Service/src/test/java/wsattacker/plugin/dos/dosExtension/logEntry/LogEntryIntervalTest.java", "idx": 1209}
{"memberVariables": {}, "code": ["void", "function", "(", "char", "[", "]", "array", ",", "int", "start", ",", "int", "end", ")", "{", "while", "(", "start", "<", "end", ")", "{", "char", "temp", "=", "array", "[", "start", "]", ";", "array", "[", "start", "]", "=", "array", "[", "end", "]", ";", "array", "[", "end", "]", "=", "temp", ";", "start", "++", ";", "end", "--", ";", "}", "}"], "memberFunctions": {"isUniqueChars": [["boolean", "String str"]], "isPermutation": [["boolean", "String source", "String target"]], "searchString": [["int", "String source", "String pattern"]], "findFirstUniqueChar": [["char", "String str"]], "compress": [["String", "String str"]], "isPermutationOfPalindrome": [["boolean", "String str"]], "reverseByWord": [["String", "String str"]], "longestSubstring": [["int", "String s"]], "sort": [["String", "String str"]], "urlify": [["String", "String str"]], "lookAndSay": [["String", "String str"]]}, "className": "StringUtils", "renamed": ["void", "function", "(", "char", "[", "]", "arg0", ",", "int", "arg1", ",", "int", "arg2", ")", "{", "while", "(", "arg1", "<", "arg2", ")", "{", "char", "loc0", "=", "arg0", "[", "arg1", "]", ";", "arg0", "[", "arg1", "]", "=", "arg0", "[", "arg2", "]", ";", "arg0", "[", "arg2", "]", "=", "loc0", ";", "arg1", "++", ";", "arg2", "--", ";", "}", "}"], "nl": "reverse char array", "nlToks": ["reverse", "char", "array"], "path": "prakashthelight/my-eclipse-workspace/tree/master/console-app/src/com/samples/utils/StringUtils.java", "idx": 1211}
{"memberVariables": {}, "code": ["void", "function", "(", ")", "{", "Assert", ".", "assertEquals", "(", "Mode", ".", "Bits", ".", "WRITE_EXECUTE", ",", "Mode", ".", "Bits", ".", "WRITE", ".", "or", "(", "Mode", ".", "Bits", ".", "EXECUTE", ")", ")", ";", "Assert", ".", "assertEquals", "(", "Mode", ".", "Bits", ".", "READ_EXECUTE", ",", "Mode", ".", "Bits", ".", "READ", ".", "or", "(", "Mode", ".", "Bits", ".", "EXECUTE", ")", ")", ";", "Assert", ".", "assertEquals", "(", "Mode", ".", "Bits", ".", "READ_WRITE", ",", "Mode", ".", "Bits", ".", "WRITE", ".", "or", "(", "Mode", ".", "Bits", ".", "READ", ")", ")", ";", "}"], "memberFunctions": {"andOperation": [["void"]], "notOperation": [["void"]], "implies": [["void"]], "getSymbol": [["void"]]}, "className": "ModeBitsTest", "renamed": ["void", "function", "(", ")", "{", "Assert", ".", "assertEquals", "(", "Mode", ".", "Bits", ".", "WRITE_EXECUTE", ",", "Mode", ".", "Bits", ".", "WRITE", ".", "or", "(", "Mode", ".", "Bits", ".", "EXECUTE", ")", ")", ";", "Assert", ".", "assertEquals", "(", "Mode", ".", "Bits", ".", "READ_EXECUTE", ",", "Mode", ".", "Bits", ".", "READ", ".", "or", "(", "Mode", ".", "Bits", ".", "EXECUTE", ")", ")", ";", "Assert", ".", "assertEquals", "(", "Mode", ".", "Bits", ".", "READ_WRITE", ",", "Mode", ".", "Bits", ".", "WRITE", ".", "or", "(", "Mode", ".", "Bits", ".", "READ", ")", ")", ";", "}"], "nl": "Tests the  {@link Mode.Bits#or(Mode.Bits)} method.", "nlToks": ["Tests", "the", "-LCB-", "@link", "Mode.Bits", "#or", "-LRB-", "Mode.Bits", "-RRB-", "-RCB-", "method", "."], "path": "poemlin/alluxio/tree/master/core/common/src/test/java/alluxio/security/authorization/ModeBitsTest.java", "idx": 1212}
{"memberVariables": {"DEFAULT_TITLE=\"Install Barcode Scanner?\"": "String", "DEFAULT_YES=\"Yes\"": "String", "activity": "Activity", "DATA_MATRIX_TYPES=Collections.singleton(\"DATA_MATRIX\")": "Collection<String>", "buttonYes": "String", "buttonNo": "String", "TAG=IntentIntegrator.class.getSimpleName()": "String", "QR_CODE_TYPES=Collections.singleton(\"QR_CODE\")": "Collection<String>", "ONE_D_CODE_TYPES=list(\"UPC_A\",\"UPC_E\",\"EAN_8\",\"EAN_13\",\"CODE_39\",\"CODE_93\",\"CODE_128\",\"ITF\",\"RSS_14\",\"RSS_EXPANDED\")": "Collection<String>", "title": "String", "message": "String", "TARGET_ALL_KNOWN=list(BS_PACKAGE,\"com.srowen.bs.android\",\"com.srowen.bs.android.simple\")": "Collection<String>", "targetApplications": "Collection<String>", "PRODUCT_CODE_TYPES=list(\"UPC_A\",\"UPC_E\",\"EAN_8\",\"EAN_13\",\"RSS_14\")": "Collection<String>", "ALL_CODE_TYPES=null": "Collection<String>", "BS_PACKAGE=\"com.google.zxing.client.android\"": "String", "DEFAULT_MESSAGE=\"This application requires Barcode Scanner. Would you like to install it?\"": "String", "REQUEST_CODE=0x0000c0de": "int", "DEFAULT_NO=\"No\"": "String", "TARGET_BARCODE_SCANNER_ONLY=Collections.singleton(BS_PACKAGE)": "Collection<String>"}, "code": ["void", "function", "(", "Intent", "intent", ",", "int", "code", ")", "{", "activity", ".", "startActivityForResult", "(", "intent", ",", "code", ")", ";", "}"], "memberFunctions": {"getButtonYes": [["String"]], "setButtonYes": [["void", "String buttonYes"]], "setTitleByID": [["void", "int titleID"]], "getButtonNo": [["String"]], "setTitle": [["void", "String title"]], "getMessage": [["String"]], "setMessage": [["void", "String message"]], "list": [["Collection<String>", "String... values"]], "showDownloadDialog": [["AlertDialog"]], "parseActivityResult": [["IntentResult", "int requestCode", "int resultCode", "Intent intent"]], "setButtonNo": [["void", "String buttonNo"]], "getTitle": [["String"]], "setButtonNoByID": [["void", "int buttonNoID"]], "setTargetApplications": [["void", "Collection<String> targetApplications"]], "initiateScan": [["AlertDialog"], ["AlertDialog", "Collection<String> desiredBarcodeFormats"]], "setButtonYesByID": [["void", "int buttonYesID"]], "shareText": [["void", "CharSequence text"]], "setSingleTargetApplication": [["void", "String targetApplication"]], "getTargetApplications": [["Collection<String>"]], "setMessageByID": [["void", "int messageID"]], "findTargetAppPackage": [["String", "Intent intent"]]}, "className": "IntentIntegrator", "renamed": ["void", "function", "(", "Intent", "arg0", ",", "int", "arg1", ")", "{", "activity", ".", "startActivityForResult", "(", "arg0", ",", "arg1", ")", ";", "}"], "nl": "Start an activity. This method is defined to allow different methods of activity starting for newer versions of Android and for compatibility library.", "nlToks": ["Start", "an", "activity", ".", "This", "method", "is", "defined", "to", "allow", "different", "methods", "of", "activity", "starting", "for", "newer", "versions", "of", "Android", "and", "for", "compatibility", "library", "."], "path": "pranaypatel512/mixare/tree/master/plugins/mixare-barcode-plugin/src/org/mixare/plugin/barcode/intent/IntentIntegrator.java", "idx": 1213}
{"memberVariables": {"A": "DenseMatrix64F", "d": "DenseMatrix64F", "jacobian": "DenseMatrix64F", "finalCost": "double", "H": "DenseMatrix64F", "tempDH": "DenseMatrix64F", "initialLambda": "double", "initialCost": "double", "tempParam": "DenseMatrix64F", "temp0": "DenseMatrix64F", "negDelta": "DenseMatrix64F", "temp1": "DenseMatrix64F", "DELTA=1e-8": "double", "func": "Function", "param": "DenseMatrix64F"}, "code": ["double", "function", "(", "DenseMatrix64F", "param", ",", "DenseMatrix64F", "X", ",", "DenseMatrix64F", "Y", ")", "{", "func", ".", "compute", "(", "param", ",", "X", ",", "temp0", ")", ";", "double", "error", "=", "diffNormF", "(", "temp0", ",", "Y", ")", ";", "return", "error", "*", "error", "/", "(", "double", ")", "X", ".", "numRows", ";", "}"], "memberFunctions": {"compute": [["void", "DenseMatrix64F param", "DenseMatrix64F x", "DenseMatrix64F y"]], "computeA": [["void", "DenseMatrix64F A", "DenseMatrix64F H", "double lambda"]], "optimize": [["boolean", "DenseMatrix64F initParam", "DenseMatrix64F X", "DenseMatrix64F Y"]], "adjustParam": [["boolean", "DenseMatrix64F X", "DenseMatrix64F Y", "double prevCost"]], "getParameters": [["DenseMatrix64F"]], "computeNumericalJacobian": [["void", "DenseMatrix64F param", "DenseMatrix64F pt", "DenseMatrix64F deriv"]], "getInitialCost": [["double"]], "computeDandH": [["void", "DenseMatrix64F param", "DenseMatrix64F x", "DenseMatrix64F y"]], "configure": [["void", "DenseMatrix64F initParam", "DenseMatrix64F X", "DenseMatrix64F Y"]], "getFinalCost": [["double"]]}, "className": "LevenbergMarquardt", "renamed": ["double", "function", "(", "DenseMatrix64F", "arg0", ",", "DenseMatrix64F", "arg1", ",", "DenseMatrix64F", "arg2", ")", "{", "func", ".", "compute", "(", "arg0", ",", "arg1", ",", "temp0", ")", ";", "double", "loc0", "=", "diffNormF", "(", "temp0", ",", "arg2", ")", ";", "return", "loc0", "*", "loc0", "/", "(", "double", ")", "arg1", ".", "numRows", ";", "}"], "nl": "Computes the \"cost\" for the parameters given. cost = (1/N) Sum (f(x;p) - y)^2", "nlToks": ["Computes", "the", "``", "cost", "''", "for", "the", "parameters", "given", ".", "cost", "=", "-LRB-", "1/N", "-RRB-", "Sum", "-LRB-", "f", "-LRB-", "x", ";p", "-RRB-", "-", "y", "-RRB-", "^", "2"], "path": "adamaulia/efficient-java-matrix-library/tree/master/examples/src/org/ejml/example/LevenbergMarquardt.java", "idx": 1215}
{"memberVariables": {"factory": "DAVResourceFactory", "listeners=new HashSet()": "Set", "root": "File", "ACCEPTABLE=\"ABCDEFGHIJLKMNOPQRSTUVWXYZ\" + \"abcdefghijklmnopqrstuvwxyz\" + \"0123456789\"+ \"_-!.~'()*\"+ \",;:$&+=\"+ \"?/[]@\"": "String", "base": "URI"}, "code": ["DAVResource", "function", "(", "URI", "uri", ")", "{", "if", "(", "uri", "==", "null", ")", "return", "factory", ".", "getResource", "(", "this", ",", "this", ".", "root", ")", ";", "if", "(", "!", "uri", ".", "isAbsolute", "(", ")", ")", "uri", "=", "this", ".", "base", ".", "resolve", "(", "uri", ")", ".", "normalize", "(", ")", ";", "return", "factory", ".", "getResource", "(", "this", ",", "new", "File", "(", "uri", ")", ".", "getAbsoluteFile", "(", ")", ")", ";", "}"], "memberFunctions": {"getRepositoryURI": [["URI"]], "removeListener": [["void", "DAVListener listener"]], "notify": [["void", "DAVResource resource", "int event"]], "addListener": [["void", "DAVListener listener"]]}, "className": "DAVRepository", "renamed": ["DAVResource", "function", "(", "URI", "arg0", ")", "{", "if", "(", "arg0", "==", "null", ")", "return", "factory", ".", "getResource", "(", "this", ",", "this", ".", "root", ")", ";", "if", "(", "!", "arg0", ".", "isAbsolute", "(", ")", ")", "arg0", "=", "this", ".", "base", ".", "resolve", "(", "arg0", ")", ".", "normalize", "(", ")", ";", "return", "factory", ".", "getResource", "(", "this", ",", "new", "File", "(", "arg0", ")", ".", "getAbsoluteFile", "(", ")", ")", ";", "}"], "nl": "Return the  {@link DAVResource} associated with a {@link URI}. If the specified  {@link URI} is relative it will be resolved againstthe root of this  {@link DAVRepository}.", "nlToks": ["Return", "the", "-LCB-", "@link", "DAVResource", "-RCB-", "associated", "with", "a", "-LCB-", "@link", "URI", "-RCB-", ".", "If", "the", "specified", "-LCB-", "@link", "URI", "-RCB-", "is", "relative", "it", "will", "be", "resolved", "againstthe", "root", "of", "this", "-LCB-", "@link", "DAVRepository", "-RCB-", "."], "path": "pfumagalli/webdav/tree/master/src/main/java/it/could/webdav/DAVRepository.java", "idx": 1218}
{"memberVariables": {"consoleMode": "boolean", "logger=org.apache.log4j.Logger.getLogger(ProgressMonitor.class)": "org.apache.log4j.Logger", "maxValue": "int", "showProgress": "boolean", "progressMonitor=new ProgressMonitor()": "ProgressMonitor", "log=new StringBuffer()": "StringBuffer", "currentMessage": "String", "debugMessages=new ArrayList<>()": "List<String>", "warnings=new TreeSet<>()": "TreeSet<String>", "curValue": "int", "warningCounts=new HashMap<>()": "HashMap<String,Integer>"}, "code": ["void", "function", "(", "String", "currentMessage", ")", "{", "if", "(", "isRunningOnServer", "(", ")", ")", "return", ";", "progressMonitor", ".", "currentMessage", "=", "currentMessage", ";", "progressMonitor", ".", "log", ".", "append", "(", "currentMessage", "+", "\" \"", ")", ";", "if", "(", "progressMonitor", ".", "consoleMode", ")", "{", "System", ".", "out", ".", "println", "(", "currentMessage", ")", ";", "}", "}"], "memberFunctions": {"setCurValue": [["void", "int curValue"]], "setConsoleModeAndParseShowProgress": [["void", "String[] args"]], "setShowProgress": [["void", "boolean showProgress"]], "getMaxValue": [["int"]], "getLog": [["String"]], "logWarning": [["void", "String warning"]], "getWarnings": [["ArrayList<String>"]], "logDebug": [["void", "String debugMessage"]], "getMessages": [["ArrayList<String>"]], "isConsoleMode": [["boolean"]], "getDebugMessages": [["List<String>"]], "setMaxValue": [["void", "int maxValue"]], "incrementCurValue": [["void"]], "isRunningOnServer": [["boolean"]], "getCurrentMessage": [["String"]], "setConsoleMode": [["void", "boolean consoleFlag"]], "getCurValue": [["int"]], "isShowProgress": [["boolean"]], "getPercentComplete": [["double"]]}, "className": "ProgressMonitor", "renamed": ["void", "function", "(", "String", "arg0", ")", "{", "if", "(", "isRunningOnServer", "(", ")", ")", "return", ";", "progressMonitor", ".", "arg0", "=", "arg0", ";", "progressMonitor", ".", "log", ".", "append", "(", "arg0", "+", "\"srini_string\"", ")", ";", "if", "(", "progressMonitor", ".", "consoleMode", ")", "{", "System", ".", "out", ".", "println", "(", "arg0", ")", ";", "}", "}"], "nl": "Logs a Message.", "nlToks": ["Logs", "a", "Message", "."], "path": "adamabeshouse/cbioportal/tree/master/core/src/main/java/org/mskcc/cbio/portal/util/ProgressMonitor.java", "idx": 1220}
{"memberVariables": {}, "code": ["boolean", "function", "(", "Pattern", "pattern", ",", "String", "subject", ")", "{", "if", "(", "subject", "!=", "null", "&&", "!", "\"\"", ".", "equals", "(", "subject", ")", ")", "{", "Matcher", "matcher", "=", "pattern", ".", "matcher", "(", "subject", ")", ";", "if", "(", "matcher", ".", "find", "(", ")", ")", "{", "return", "true", ";", "}", "}", "return", "false", ";", "}"], "memberFunctions": {"compilePatternsFromList": [["List<Pattern>", "List<String> list"]]}, "className": "RegexHelper", "renamed": ["boolean", "function", "(", "Pattern", "arg0", ",", "String", "arg1", ")", "{", "if", "(", "arg1", "!=", "null", "&&", "!", "\"srini_string\"", ".", "equals", "(", "arg1", ")", ")", "{", "Matcher", "loc0", "=", "arg0", ".", "loc0", "(", "arg1", ")", ";", "if", "(", "loc0", ".", "find", "(", ")", ")", "{", "return", "true", ";", "}", "}", "return", "false", ";", "}"], "nl": "Simple commodity method (also designed to increase readability of source code, and to decrease import in the calling class). Provide a pattern and a subject, it'll do the proper matching.", "nlToks": ["Simple", "commodity", "method", "-LRB-", "also", "designed", "to", "increase", "readability", "of", "source", "code", ",", "and", "to", "decrease", "import", "in", "the", "calling", "class", "-RRB-", ".", "Provide", "a", "pattern", "and", "a", "subject", ",", "it", "'ll", "do", "the", "proper", "matching", "."], "path": "adangel/pmd/tree/master/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/regex/RegexHelper.java", "idx": 1221}
{"memberVariables": {"settings": "IStoredSettings", "legacyBackingServices": "Map<String,String>", "runtimeManager": "IRuntimeManager", "logger=LoggerFactory.getLogger(getClass())": "Logger", "userService": "IUserService"}, "code": ["boolean", "function", "(", "UserModel", "model", ")", "{", "return", "userService", ".", "updateUserModel", "(", "model", ")", ";", "}"], "memberFunctions": {"deleteRepositoryRole": [["boolean", "String role"]], "getAllUsernames": [["List<String>"]], "getAllUsers": [["List<UserModel>"]], "getUserModel": [["UserModel", "char[] cookie"], ["UserModel", "String username"]], "getTeamModel": [["TeamModel", "String teamname"]], "updateTeamModel": [["boolean", "TeamModel model"], ["boolean", "String teamname", "TeamModel model"]], "isInternalAccount": [["boolean", "String username"]], "getTeamNamesForRepositoryRole": [["List<String>", "String role"]], "deleteTeam": [["boolean", "String teamname"]], "updateUserModels": [["boolean", "Collection<UserModel> models"]], "getUsernamesForRepositoryRole": [["List<String>", "String role"]], "deleteTeamModel": [["boolean", "TeamModel model"]], "start": [["UserManager"]], "setUserService": [["void", "IUserService userService"]], "createUserService": [["IUserService", "File realmFile"]], "getAllTeams": [["List<TeamModel>"]], "getCookie": [["String", "UserModel model"]], "deleteUserModel": [["boolean", "UserModel model"]], "stop": [["UserManager"]], "deleteUser": [["boolean", "String username"]], "setup": [["void", "IRuntimeManager runtimeManager"]], "renameRepositoryRole": [["boolean", "String oldRole", "String newRole"]], "getAllTeamNames": [["List<String>"]], "updateTeamModels": [["boolean", "Collection<TeamModel> models"]]}, "className": "UserManager", "renamed": ["boolean", "function", "(", "UserModel", "arg0", ")", "{", "return", "userService", ".", "updateUserModel", "(", "arg0", ")", ";", "}"], "nl": "Updates/writes a complete user object.", "nlToks": ["Updates/writes", "a", "complete", "user", "object", "."], "path": "pombreda/gitblit/tree/master/src/main/java/com/gitblit/manager/UserManager.java", "idx": 1224}
{"memberVariables": {"FILE_PATH=PathUtils.concatPath(MOUNT_PATH,\"file\")": "String", "mAlternateUfsRoot": "String", "MOUNT_PATH=PathUtils.concatPath(\"/\",\"mnt\",\"foo\")": "String", "SUB_FILE_PATH=PathUtils.concatPath(SUB_DIR_PATH,\"subfile\")": "String", "mLocalAlluxioClusterResource=new LocalAlluxioClusterResource.Builder().build()": "LocalAlluxioClusterResource", "mFileSystem=null": "FileSystem", "SUB_DIR_PATH=PathUtils.concatPath(MOUNT_PATH,\"sub\",\"dir\")": "String"}, "code": ["void", "function", "(", "String", "alternateUfsRoot", ")", "{", "UnderFileSystemUtils", ".", "deleteDir", "(", "alternateUfsRoot", ")", ";", "}"], "memberFunctions": {"deleteFile": [["void"]], "openFile": [["void"]], "before": [["void"]], "loadMetadata": [["void"]], "renameFileDst": [["void"]], "renameFileSrc": [["void"]], "createFile": [["void"]], "renameDirectory": [["void"]], "getFileStatus": [["void"]], "renameFile": [["void"]], "createDirectory": [["void"]], "after": [["void"]], "createAlternateUfs": [["String"]]}, "className": "ReadOnlyMountIntegrationTest", "renamed": ["void", "function", "(", "String", "arg0", ")", "{", "UnderFileSystemUtils", ".", "deleteDir", "(", "arg0", ")", ";", "}"], "nl": "Deletes the alternate under file system directory.", "nlToks": ["Deletes", "the", "alternate", "under", "file", "system", "directory", "."], "path": "poemlin/alluxio/tree/master/tests/src/test/java/alluxio/client/ReadOnlyMountIntegrationTest.java", "idx": 1226}
{"memberVariables": {"TAB=\"\\t\"": "String", "NEW_LINE=\"\\n\"": "String"}, "code": ["String", "function", "(", "File", "file", ")", "{", "BufferedReader", "in", "=", "new", "BufferedReader", "(", "new", "FileReader", "(", "file", ")", ")", ";", "return", "readFile", "(", "in", ")", ";", "}"], "memberFunctions": {"retrieveMatrix": [["String[][]", "File file"]], "readFile": [["String", "BufferedReader in"]], "parseMatrix": [["String[][]", "String content"]], "prepareMatrix": [["String[][]", "String content"]]}, "className": "WebFileConnect", "renamed": ["String", "function", "(", "File", "arg0", ")", "{", "BufferedReader", "loc0", "=", "new", "BufferedReader", "(", "new", "FileReader", "(", "arg0", ")", ")", ";", "return", "readFile", "(", "loc0", ")", ";", "}"], "nl": "Retrieves the Content from the Specified File.", "nlToks": ["Retrieves", "the", "Content", "from", "the", "Specified", "File", "."], "path": "adamabeshouse/cbioportal/tree/master/core/src/main/java/org/mskcc/cbio/io/WebFileConnect.java", "idx": 1227}
{"memberVariables": {"mockServerMessage=mock(ServerMessage.class)": "ServerMessage", "mockServerSession=mock(ServerSession.class)": "ServerSession", "testEventProperties": "HashMap<String,Object>", "MOCK_SESSION_ID=\"1234-5678-9012-3456\"": "String", "acitivityController": "ActivityController"}, "code": ["void", "function", "(", ")", "{", "testEventProperties", ".", "put", "(", "ActivityEvent", ".", "ID_KEY", ",", "\"\"", ")", ";", "acitivityController", ".", "handleEvent", "(", "new", "Event", "(", "ActivityEvent", ".", "EVENT_TOPIC", ",", "testEventProperties", ")", ")", ";", "}"], "memberFunctions": {"testHandleEventThrowsIllegalArgumentExceptionOnEmptyUser": [["void"]], "testDeregisterUserSessionWithNullServerSessonThrowsException": [["void"]], "testDeregisterUserSessionWithNullServerSessionIdThrowsException": [["void"]], "testGetServerSessionByUserId": [["void"]], "tearDown": [["void"]], "testDeregisterUserSessionRemovesUserFromKnownClients": [["void"]], "testHandleEventThrowsIllegalArgumentExceptionOnEmptyMessage": [["void"]], "testHandleEventThrowsIllegalArgumentExceptionOnNullApplication": [["void"]], "testRegisterUserSessionWithNullServerSessionThrowsException": [["void"]], "testHandleEventThrowsIllegalArgumentExceptionOnNullUser": [["void"]], "testRegisterUserSession": [["void"]], "setUp": [["void"]], "testHandleEventThrowsIllegalArgumentExceptionOnNullTimestamp": [["void"]], "testRegisterUserSessionWithNullServerSessionIdThrowsException": [["void"]], "testHandleEventThrowsIllegalArgumentExceptionOnNullMessage": [["void"]]}, "className": "ActivityControllerTest", "renamed": ["void", "function", "(", ")", "{", "testEventProperties", ".", "put", "(", "ActivityEvent", ".", "ID_KEY", ",", "\"srini_string\"", ")", ";", "acitivityController", ".", "handleEvent", "(", "new", "Event", "(", "ActivityEvent", ".", "EVENT_TOPIC", ",", "testEventProperties", ")", ")", ";", "}"], "nl": "Test method for  {@link ActivityController#handleEvent(org.osgi.service.event.Event)}Verifies that  {@code IllegalArgumentException} is thrown when {@code Event}'s  {@link ActivityEvent#ID_KEY} property is empty.", "nlToks": ["Test", "method", "for", "-LCB-", "@link", "ActivityController", "#handleEvent", "-LRB-", "org.osgi.service.event.Event", "-RRB-", "-RCB-", "Verifies", "that", "-LCB-", "@code", "IllegalArgumentException", "-RCB-", "is", "thrown", "when", "-LCB-", "@code", "Event", "-RCB-", "'s", "-LCB-", "@link", "ActivityEvent", "#ID_KEY", "-RCB-", "property", "is", "empty", "."], "path": "pklinef/ddf-ui/tree/master/search-ui/search-endpoint/src/test/java/org/codice/ddf/ui/searchui/query/controller/ActivityControllerTest.java", "idx": 1228}
{"memberVariables": {"PRIMITIVE_TYPE_NAMES=new TypeMap(new Class[]{int.class,byte.class,long.class,short.class,float.class,double.class,char.class,boolean.class})": "TypeMap", "TYPES_BY_NAME=new TypeMap(new Class[]{Integer.class,Byte.class,Long.class,Short.class,Float.class,Double.class,Character.class,Boolean.class,BigDecimal.class,String.class,Object.class,Class.class})": "TypeMap", "SHORT_NAMES_BY_TYPE=computeClassShortNames()": "Map<Class<?>,String>", "EMPTY_CLASS_ARRAY=new Class[0]": "Class<?>[]"}, "code": ["String", "function", "(", "Class", "<", "?", ">", "type", ")", "{", "String", "name", "=", "SHORT_NAMES_BY_TYPE", ".", "get", "(", "type", ")", ";", "return", "name", "==", "null", "?", "type", ".", "getName", "(", ")", ":", "name", ";", "}"], "memberFunctions": {"getPrimitiveTypeFor": [["Class<?>", "String name"]], "asMethodGroupsByTypeName": [["Map<String,List<Method>>", "Method[] methods"]], "getClassShortNames": [["Map<Class<?>,String>"]], "computeClassShortNames": [["Map<Class<?>,String>"]], "methodFor": [["Method", "Class<?> clasz", "String methodName", "Class<?>[] paramTypes"]], "getTypeFor": [["Class<?>", "String shortName"]], "withoutPackageName": [["String", "String fullTypeName"]]}, "className": "ClassUtil", "renamed": ["String", "function", "(", "Class", "<", "?", ">", "arg0", ")", "{", "String", "loc0", "=", "SHORT_NAMES_BY_TYPE", ".", "get", "(", "arg0", ")", ";", "return", "loc0", "==", "null", "?", "arg0", ".", "getName", "(", ")", ":", "loc0", ";", "}"], "nl": "Return the name of the type in its short form if its known to us otherwise return its name fully packaged.", "nlToks": ["Return", "the", "name", "of", "the", "type", "in", "its", "short", "form", "if", "its", "known", "to", "us", "otherwise", "return", "its", "name", "fully", "packaged", "."], "path": "adangel/pmd/tree/master/pmd-core/src/main/java/net/sourceforge/pmd/util/ClassUtil.java", "idx": 1230}
{"memberVariables": {"IMPL": "AccessibilityEventVersionImpl", "TYPE_VIEW_HOVER_EXIT=0x00000100": "int", "TYPE_VIEW_TEXT_SELECTION_CHANGED=0x00002000": "int", "TYPE_WINDOW_CONTENT_CHANGED=0x00000800": "int", "TYPE_VIEW_SCROLLED=0x00001000": "int", "TYPE_VIEW_HOVER_ENTER=0x00000080": "int", "TYPE_TOUCH_EXPLORATION_GESTURE_END=0x00000400": "int", "TYPE_TOUCH_EXPLORATION_GESTURE_START=0x00000200": "int"}, "code": ["AccessibilityRecordCompat", "function", "(", "AccessibilityEvent", "event", ",", "int", "index", ")", "{", "return", "new", "AccessibilityRecordCompat", "(", "IMPL", ".", "getRecord", "(", "event", ",", "index", ")", ")", ";", "}"], "memberFunctions": {"appendRecord": [["void", "AccessibilityEvent event", "Object record"], ["void", "AccessibilityEvent event", "Object record"], ["void", "AccessibilityEvent event", "AccessibilityRecordCompat record"]], "getRecordCount": [["int", "AccessibilityEvent event"], ["int", "AccessibilityEvent event"], ["int", "AccessibilityEvent event"]]}, "className": "AccessibilityEventCompat", "renamed": ["AccessibilityRecordCompat", "function", "(", "AccessibilityEvent", "arg0", ",", "int", "arg1", ")", "{", "return", "new", "AccessibilityRecordCompat", "(", "IMPL", ".", "getRecord", "(", "arg0", ",", "arg1", ")", ")", ";", "}"], "nl": "Gets the record at a given index.", "nlToks": ["Gets", "the", "record", "at", "a", "given", "index", "."], "path": "prateeka/AndroidDev/tree/master/SherlockActionBar/src/android/support/v4/view/accessibility/AccessibilityEventCompat.java", "idx": 1231}
{"memberVariables": {}, "code": ["QRDecomposition", "<", "DenseMatrix64F", ">", "function", "(", "int", "numRows", ",", "int", "numCols", ")", "{", "return", "new", "QRDecompositionHouseholderColumn_D64", "(", ")", ";", "}"], "memberFunctions": {"svd": [["SingularValueDecomposition<DenseMatrix64F>", "int numRows", "int numCols", "boolean needU", "boolean needV", "boolean compact"]], "tridiagonal": [["TridiagonalSimilarDecomposition<DenseMatrix64F>", "int matrixSize"]], "eig": [["EigenDecomposition<DenseMatrix64F>", "int matrixSize", "boolean needVectors"], ["EigenDecomposition<DenseMatrix64F>", "int matrixSize", "boolean computeVectors", "boolean isSymmetric"]], "decomposeSafe": [["boolean", "DecompositionInterface<T> decomp", "T M"]], "lu": [["LUDecomposition<DenseMatrix64F>", "int numRows", "int numCol"]], "chol": [["CholeskyDecomposition<DenseMatrix64F>", "int matrixSize", "boolean lower"]], "cholLDL": [["CholeskyDecompositionLDL_D64", "int matrixSize"]], "qrp": [["QRPDecomposition<DenseMatrix64F>", "int numRows", "int numCols"]], "quality": [["double", "DenseMatrix64F orig", "SingularValueDecomposition<DenseMatrix64F> svd"], ["double", "DenseMatrix64F orig", "DenseMatrix64F U", "DenseMatrix64F W", "DenseMatrix64F Vt"], ["double", "DenseMatrix64F orig", "EigenDecomposition<DenseMatrix64F> eig"]]}, "className": "DecompositionFactory", "renamed": ["QRDecomposition", "<", "DenseMatrix64F", ">", "function", "(", "int", "arg0", ",", "int", "arg1", ")", "{", "return", "new", "QRDecompositionHouseholderColumn_D64", "(", ")", ";", "}"], "nl": " Returns a  {@link org.ejml.interfaces.decomposition.QRDecomposition} that has been optimized for the specified matrix size.", "nlToks": ["Returns", "a", "-LCB-", "@link", "org.ejml.interfaces.decomposition.QRDecomposition", "-RCB-", "that", "has", "been", "optimized", "for", "the", "specified", "matrix", "size", "."], "path": "adamaulia/efficient-java-matrix-library/tree/master/src/org/ejml/factory/DecompositionFactory.java", "idx": 1232}
{"memberVariables": {"_utf8=\"UTF-8\"": "String", "_highPriority": "boolean", "_messageBody": "byte[]", "_encoding=\"UTF-16LE\"": "String", "_correlationId": "byte[]", "_label": "String"}, "code": ["void", "function", "(", "byte", "[", "]", "value", ")", "{", "_messageBody", "=", "value", ";", "}"], "memberFunctions": {"getCorrelationId": [["byte[]"]], "getBodyAsString": [["String"]], "getLabel": [["String"]], "getCorrelationIdAsString": [["String"]], "setBodyAsString": [["void", "String value"]], "getBody": [["byte[]"]], "setCorrelationId": [["void", "byte[] value"]], "setHighPriority": [["void", "boolean value"]], "setLabel": [["void", "String value"]], "getHighPriority": [["boolean"]], "setCorrelationIdAsString": [["void", "String value"]]}, "className": "Message", "renamed": ["void", "function", "(", "byte", "[", "]", "arg0", ")", "{", "_messageBody", "=", "arg0", ";", "}"], "nl": "Sets the message body.", "nlToks": ["Sets", "the", "message", "body", "."], "path": "harsha89/wso2-axis2-transports/tree/master/modules/msmq/src/main/java/org/apache/axis2/transport/msmq/util/Message.java", "idx": 1233}
{"memberVariables": {"mMenuItem": "android.view.MenuItem"}, "code": ["MenuItem", "function", "(", "OnMenuItemClickListener", "menuItemClickListener", ")", "{", "mMenuItem", ".", "setOnMenuItemClickListener", "(", "menuItemClickListener", ")", ";", "return", "this", ";", "}"], "memberFunctions": {"hasSubMenu": [["boolean"]], "getTitleCondensed": [["CharSequence"]], "getGroupId": [["int"]], "getItemId": [["int"]], "getActionView": [["View", "android.view.MenuItem item"], ["View"]], "getTitle": [["CharSequence"]], "setChecked": [["MenuItem", "boolean checked"]], "getAlphabeticShortcut": [["char"]], "getIntent": [["Intent"]], "isCheckable": [["boolean"]], "setShortcut": [["MenuItem", "char numericChar", "char alphaChar"]], "setVisible": [["MenuItem", "boolean visible"]], "setShowAsAction": [["void", "android.view.MenuItem item", "int actionEnum"], ["void", "int actionEnum"]], "getSubMenu": [["SubMenu"]], "setIntent": [["MenuItem", "Intent intent"]], "setCheckable": [["MenuItem", "boolean checkable"]], "setAlphabeticShortcut": [["MenuItem", "char alphaChar"]], "setTitle": [["MenuItem", "CharSequence title"], ["MenuItem", "int title"]], "setNumericShortcut": [["MenuItem", "char numericChar"]], "isVisible": [["boolean"]], "isChecked": [["boolean"]], "setTitleCondensed": [["MenuItem", "CharSequence title"]], "getIcon": [["Drawable"]], "setIcon": [["MenuItem", "Drawable icon"], ["MenuItem", "int iconRes"]], "setEnabled": [["MenuItem", "boolean enabled"]], "getOrder": [["int"]], "isEnabled": [["boolean"]], "getNumericShortcut": [["char"]], "setActionView": [["void", "android.view.MenuItem item", "int resId"], ["void", "android.view.MenuItem item", "View view"], ["MenuItem", "int resId"], ["MenuItem", "View view"]], "getMenuInfo": [["ContextMenuInfo"]]}, "className": "MenuItemWrapper", "renamed": ["MenuItem", "function", "(", "OnMenuItemClickListener", "arg0", ")", "{", "mMenuItem", ".", "setOnMenuItemClickListener", "(", "arg0", ")", ";", "return", "this", ";", "}"], "nl": "Set a custom listener for invocation of this menu item.", "nlToks": ["Set", "a", "custom", "listener", "for", "invocation", "of", "this", "menu", "item", "."], "path": "prateeka/AndroidDev/tree/master/SherlockActionBar/src/com/actionbarsherlock/internal/view/menu/MenuItemWrapper.java", "idx": 1235}
{"memberVariables": {"vhw": "VHWParser", "EXAMPLE=\"$VWVHW,000.0,T,001.5,M,1.0,N,1.85,K\"": "String"}, "code": ["void", "function", "(", ")", "{", "assertTrue", "(", "vhw", ".", "getTalkerId", "(", ")", "==", "TalkerId", ".", "VW", ")", ";", "assertTrue", "(", "SentenceId", ".", "valueOf", "(", "vhw", ".", "getSentenceId", "(", ")", ")", "==", "SentenceId", ".", "VHW", ")", ";", "}"], "memberFunctions": {"testGetSpeedKnots": [["void"]], "testSetMagneticHeading": [["void"]], "testGetMagneticHeading": [["void"]], "testConstructorTalkerId": [["void"]], "testIsTrue": [["void"]], "testSetHeading": [["void"]], "testSetSpeedKilometres": [["void"]], "setUp": [["void"]], "testSetSpeedKnots": [["void"]], "testGetHeading": [["void"]], "testGetSpeedKilometres": [["void"]]}, "className": "VHWTest", "renamed": ["void", "function", "(", ")", "{", "assertTrue", "(", "vhw", ".", "getTalkerId", "(", ")", "==", "TalkerId", ".", "VW", ")", ";", "assertTrue", "(", "SentenceId", ".", "valueOf", "(", "vhw", ".", "getSentenceId", "(", ")", ")", "==", "SentenceId", ".", "VHW", ")", ";", "}"], "nl": "Test method for {@link net.sf.marineapi.nmea.parser.VHWParser#VHWParser(java.lang.String)}.", "nlToks": ["Test", "method", "for", "-LCB-", "@link", "net.sf.marineapi.nmea.parser.VHWParser", "#VHWParser", "-LRB-", "java.lang.String", "-RRB-", "-RCB-", "."], "path": "pkoziol/marine-api/tree/master/src/test/java/net/sf/marineapi/nmea/parser/VHWTest.java", "idx": 1236}
{"memberVariables": {"m_socketChannel": "SocketChannel", "LOG=LoggerFactory.getLogger(ReadHandlerImpl.class)": "Logger", "m_protocolHandler": "ProtocolHandler", "m_inetSocketAddress": "InetSocketAddress", "m_readBuffer": "ByteBuffer"}, "code": ["void", "function", "(", ")", "{", "LOG", ".", "trace", "(", "\"Processing input buffer...\"", ")", ";", "this", ".", "m_protocolHandler", ".", "handleMessages", "(", "this", ".", "m_readBuffer", ",", "this", ".", "m_inetSocketAddress", ")", ";", "this", ".", "m_readBuffer", ".", "clear", "(", ")", ";", "}"], "memberFunctions": {"read": [["void"]], "setProtocolHandler": [["void", "final ProtocolHandler protocolHandler"]], "toString": [["String"]]}, "className": "ReadHandlerImpl", "renamed": ["void", "function", "(", ")", "{", "LOG", ".", "trace", "(", "\"srini_string\"", ")", ";", "this", ".", "m_protocolHandler", ".", "handleMessages", "(", "this", ".", "m_readBuffer", ",", "this", ".", "m_inetSocketAddress", ")", ";", "this", ".", "m_readBuffer", ".", "clear", "(", ")", ";", "}"], "nl": "Processes the internal buffer, converting it into packets if enough data is available.", "nlToks": ["Processes", "the", "internal", "buffer", ",", "converting", "it", "into", "packets", "if", "enough", "data", "is", "available", "."], "path": "adamfisk/littleshoot-client/tree/master/common/nio/src/main/java/org/lastbamboo/common/nio/ReadHandlerImpl.java", "idx": 1237}
{"memberVariables": {"count=0": "long", "max=NaN": "double", "mean=0.0": "double", "sumOfSquaresOfDeltas=0.0": "double", "min=NaN": "double"}, "code": ["double", "function", "(", ")", "{", "checkState", "(", "count", ">", "1", ")", ";", "if", "(", "isNaN", "(", "sumOfSquaresOfDeltas", ")", ")", "{", "return", "NaN", ";", "}", "return", "ensureNonNegative", "(", "sumOfSquaresOfDeltas", ")", "/", "(", "count", "-", "1", ")", ";", "}"], "memberFunctions": {"add": [["void", "double value"]], "sumOfSquaresOfDeltas": [["double"]], "max": [["double"]], "count": [["long"]], "sum": [["double"]], "populationVariance": [["double"]], "sampleStandardDeviation": [["double"]], "min": [["double"]], "calculateNewMeanNonFinite": [["double", "double previousMean", "double value"]], "addAll": [["void", "Iterable<? extends Number> values"], ["void", "Iterator<? extends Number> values"], ["void", "double... values"], ["void", "int... values"], ["void", "long... values"], ["void", "Stats values"]], "mean": [["double"]], "populationStandardDeviation": [["double"]], "snapshot": [["Stats"]]}, "className": "StatsAccumulator", "renamed": ["double", "function", "(", ")", "{", "checkState", "(", "count", ">", "1", ")", ";", "if", "(", "isNaN", "(", "sumOfSquaresOfDeltas", ")", ")", "{", "return", "NaN", ";", "}", "return", "ensureNonNegative", "(", "sumOfSquaresOfDeltas", ")", "/", "(", "count", "-", "1", ")", ";", "}"], "nl": "Returns the unbiased sample variance of the values. If this dataset is a sample drawn from a population, this is an unbiased estimator of the population variance of the population. The count must be greater than one. This is not guaranteed to return zero when the dataset consists of the same value multiple times, due to numerical errors. However, it is guaranteed never to return a negative result. Non-finite values If the dataset contains any non-finite values ( {@link Double#POSITIVE_INFINITY}, {@link Double#NEGATIVE_INFINITY}, or  {@link Double#NaN}) then the result is  {@link Double#NaN}.", "nlToks": ["Returns", "the", "unbiased", "sample", "variance", "of", "the", "values", ".", "If", "this", "dataset", "is", "a", "sample", "drawn", "from", "a", "population", ",", "this", "is", "an", "unbiased", "estimator", "of", "the", "population", "variance", "of", "the", "population", ".", "The", "count", "must", "be", "greater", "than", "one", ".", "This", "is", "not", "guaranteed", "to", "return", "zero", "when", "the", "dataset", "consists", "of", "the", "same", "value", "multiple", "times", ",", "due", "to", "numerical", "errors", ".", "However", ",", "it", "is", "guaranteed", "never", "to", "return", "a", "negative", "result", ".", "Non-finite", "values", "If", "the", "dataset", "contains", "any", "non-finite", "values", "-LRB-", "-LCB-", "@link", "Double", "#POSITIVE_INFINITY", "-RCB-", ",", "-LCB-", "@link", "Double", "#NEGATIVE_INFINITY", "-RCB-", ",", "or", "-LCB-", "@link", "Double", "#NaN", "-RCB-", "-RRB-", "then", "the", "result", "is", "-LCB-", "@link", "Double", "#NaN", "-RCB-", "."], "path": "hazendaz/guava/tree/master/guava/src/com/google/common/math/StatsAccumulator.java", "idx": 1240}
{"memberVariables": {"classnamePrefix": "String", "LOG=Logger.getLogger(ParseState.class)": "Logger", "obsoleteInnerClasses": "Collection", "component": "Object", "anonymousClassCounter": "int", "context": "Context", "classifier": "Object", "obsoleteFeatures": "Collection"}, "code": ["Object", "function", "(", "String", "name", ")", "{", "for", "(", "Object", "mFeature", ":", "obsoleteFeatures", ")", "{", "if", "(", "Model", ".", "getFacade", "(", ")", ".", "isAMethod", "(", "mFeature", ")", "&&", "name", ".", "equals", "(", "Model", ".", "getFacade", "(", ")", ".", "getName", "(", "mFeature", ")", ")", ")", "{", "return", "mFeature", ";", "}", "}", "return", "null", ";", "}"], "memberFunctions": {"addClassifierContext": [["void", "Object mClassifier"]], "addPackageContext": [["void", "Object mPackage"]], "removeObsoleteFeatures": [["void"]], "innerClassifier": [["void", "Object mClassifier"]], "addComponent": [["void", "Object c"]], "outerClassifier": [["void"]], "getClassifier": [["Object"]], "getFeature": [["Object", "String name"]], "removeObsoleteInnerClasses": [["void"]], "getAttribute": [["Object", "String name"]], "feature": [["void", "Object feature"]], "getFeatures": [["Collection", "String name"]], "getClassnamePrefix": [["String"]], "getOperation": [["Object", "String name"]], "getComponent": [["Object"]], "anonymousClass": [["String"]], "getContext": [["Context"]]}, "className": "ParseState", "renamed": ["Object", "function", "(", "String", "arg0", ")", "{", "for", "(", "Object", "loc0", ":", "obsoleteFeatures", ")", "{", "if", "(", "Model", ".", "getFacade", "(", ")", ".", "isAMethod", "(", "loc0", ")", "&&", "arg0", ".", "equals", "(", "Model", ".", "getFacade", "(", ")", ".", "getName", "(", "loc0", ")", ")", ")", "{", "return", "loc0", ";", "}", "}", "return", "null", ";", "}"], "nl": "Get a method from the current classifier not yet modeled.", "nlToks": ["Get", "a", "method", "from", "the", "current", "classifier", "not", "yet", "modeled", "."], "path": "pichiliani/CoArgoUML/tree/master/v0.24/fonte/src/argouml-app/src/org/argouml/uml/reveng/java/ParseState.java", "idx": 1241}
{"memberVariables": {}, "code": ["void", "function", "(", "final", "HttpParams", "params", ",", "boolean", "value", ")", "{", "if", "(", "params", "==", "null", ")", "{", "throw", "new", "IllegalArgumentException", "(", "\"HTTP parameters may not be null\"", ")", ";", "}", "params", ".", "setBooleanParameter", "(", "CoreConnectionPNames", ".", "TCP_NODELAY", ",", "value", ")", ";", "}"], "memberFunctions": {"setSoReuseaddr": [["void", "final HttpParams params", "boolean reuseaddr"]], "getLinger": [["int", "final HttpParams params"]], "setConnectionTimeout": [["void", "final HttpParams params", "int timeout"]], "setSoTimeout": [["void", "final HttpParams params", "int timeout"]], "getSoReuseaddr": [["boolean", "final HttpParams params"]], "getTcpNoDelay": [["boolean", "final HttpParams params"]], "setLinger": [["void", "final HttpParams params", "int value"]], "getSocketBufferSize": [["int", "final HttpParams params"]], "setSocketBufferSize": [["void", "final HttpParams params", "int size"]], "getSoTimeout": [["int", "final HttpParams params"]], "isStaleCheckingEnabled": [["boolean", "final HttpParams params"]], "setStaleCheckingEnabled": [["void", "final HttpParams params", "boolean value"]], "getConnectionTimeout": [["int", "final HttpParams params"]]}, "className": "HttpConnectionParams", "renamed": ["void", "function", "(", "final", "HttpParams", "arg0", ",", "boolean", "arg1", ")", "{", "if", "(", "arg0", "==", "null", ")", "{", "throw", "new", "IllegalArgumentException", "(", "\"srini_string\"", ")", ";", "}", "arg0", ".", "setBooleanParameter", "(", "CoreConnectionPNames", ".", "TCP_NODELAY", ",", "arg1", ")", ";", "}"], "nl": "Sets value of the  {@link CoreConnectionPNames#TCP_NODELAY} parameter.", "nlToks": ["Sets", "value", "of", "the", "-LCB-", "@link", "CoreConnectionPNames", "#TCP_NODELAY", "-RCB-", "parameter", "."], "path": "pritamkhose/open-gpstracker.code/tree/master/external_sources/httpcore-4.1.1/httpcore/src/main/java/org/apache/ogt/http/params/HttpConnectionParams.java", "idx": 1243}
{"memberVariables": {}, "code": ["boolean", "function", "(", "final", "HttpServletRequest", "request", ")", "{", "return", "(", "request", "==", "null", ")", "?", "false", ":", "check", "(", "request", ".", "getHeader", "(", "\"user-agent\"", ")", ")", ";", "}"], "memberFunctions": {"getBrowserVersion": [["float", "final String userAgent", "final String regex"]], "check": [["boolean", "final String userAgentString"]]}, "className": "Compatibility", "renamed": ["boolean", "function", "(", "final", "HttpServletRequest", "arg0", ")", "{", "return", "(", "arg0", "==", "null", ")", "?", "false", ":", "check", "(", "arg0", ".", "getHeader", "(", "\"srini_string\"", ")", ")", ";", "}"], "nl": "Just a wrapper to  {@link #check(String)}.", "nlToks": ["Just", "a", "wrapper", "to", "-LCB-", "@link", "#check", "-LRB-", "String", "-RRB-", "-RCB-", "."], "path": "pobing/company/tree/master/maxcomy/src/net/fckeditor/tool/Compatibility.java", "idx": 1245}
{"memberVariables": {"childNodes=new ArrayList<>()": "List<AbstractReportNode>", "parentNode=null": "AbstractReportNode", "numberOfViolations": "int"}, "code": ["void", "function", "(", "AbstractReportNode", "child", ")", "{", "childNodes", ".", "add", "(", "0", ",", "child", ")", ";", "child", ".", "parentNode", "=", "this", ";", "}"], "memberFunctions": {"add": [["void", "AbstractReportNode child"]], "addNumberOfViolation": [["void", "int number"]], "getChildIndex": [["int", "AbstractReportNode child"]], "getParent": [["AbstractReportNode"]], "getNextSibling": [["AbstractReportNode"]], "getNumberOfViolations": [["int"]], "isLeaf": [["boolean"]], "accept": [["void", "ReportVisitor visitor"]], "getChildCount": [["int"]], "getChildAt": [["AbstractReportNode", "int arg0"]], "childrenAccept": [["void", "ReportVisitor visitor"]], "equalsNode": [["boolean", "AbstractReportNode arg0"]], "getFirstChild": [["AbstractReportNode"]]}, "className": "AbstractReportNode", "renamed": ["void", "function", "(", "AbstractReportNode", "arg0", ")", "{", "childNodes", ".", "add", "(", "0", ",", "arg0", ")", ";", "arg0", ".", "parentNode", "=", "this", ";", "}"], "nl": "Adds the child in front of any other childs.", "nlToks": ["Adds", "the", "child", "in", "front", "of", "any", "other", "childs", "."], "path": "adangel/pmd/tree/master/pmd-core/src/main/java/net/sourceforge/pmd/lang/dfa/report/AbstractReportNode.java", "idx": 1246}
{"memberVariables": {"buffer=new byte[INITIAL_BUFFER_CAPACITY]": "byte[]", "INITIAL_BUFFER_CAPACITY=10240": "int", "bufferSize": "int"}, "code": ["boolean", "function", "(", ")", "{", "return", "bufferSize", "==", "0", ";", "}"], "memberFunctions": {"add": [["void", "int b"]], "clear": [["void"]], "toArray": [["byte[]"]], "toString": [["String"]]}, "className": "ByteBuffer", "renamed": ["boolean", "function", "(", ")", "{", "return", "bufferSize", "==", "0", ";", "}"], "nl": "Determines if the buffer is empty.", "nlToks": ["Determines", "if", "the", "buffer", "is", "empty", "."], "path": "harrisaoz/rtfparserkit/tree/master/RTF Parser Kit/src/main/java/com/rtfparserkit/parser/raw/ByteBuffer.java", "idx": 1247}
{"memberVariables": {"serialVersionUID=0": "long", "predicate": "Predicate<T>", "defaultValue": "V", "f": "Function<A,? extends B>", "g": "Function<B,C>", "supplier": "Supplier<T>", "map": "Map<K,? extends V>", "value": "E"}, "code": ["Function", "<", "Object", ",", "T", ">", "function", "(", "Supplier", "<", "T", ">", "supplier", ")", "{", "return", "new", "SupplierFunction", "<", "T", ">", "(", "supplier", ")", ";", "}"], "memberFunctions": {"forPredicate": [["Function<T,Boolean>", "Predicate<T> predicate"]], "constant": [["Function<Object,E>", "@Nullable E value"]], "apply": [["String", "Object o"], ["Object", "@Nullable Object o"], ["V", "@Nullable K key"], ["V", "@Nullable K key"], ["C", "@Nullable A a"], ["Boolean", "@Nullable T t"], ["E", "@Nullable Object from"], ["T", "@Nullable Object input"]], "compose": [["Function<A,C>", "Function<B,C> g", "Function<A,? extends B> f"]], "identity": [["Function<E,E>"]], "hashCode": [["int"], ["int"], ["int"], ["int"], ["int"], ["int"]], "equals": [["boolean", "@Nullable Object o"], ["boolean", "@Nullable Object o"], ["boolean", "@Nullable Object obj"], ["boolean", "@Nullable Object obj"], ["boolean", "@Nullable Object obj"], ["boolean", "@Nullable Object obj"]], "toStringFunction": [["Function<Object,String>"]], "toString": [["String"], ["String"], ["String"], ["String"], ["String"], ["String"], ["String"], ["String"]], "forMap": [["Function<K,V>", "Map<K,V> map"], ["Function<K,V>", "Map<K,? extends V> map", "@Nullable V defaultValue"]]}, "className": "Functions", "renamed": ["Function", "<", "Object", ",", "T", ">", "function", "(", "Supplier", "<", "T", ">", "arg0", ")", "{", "return", "new", "SupplierFunction", "<", "T", ">", "(", "arg0", ")", ";", "}"], "nl": "Returns a function that ignores its input and returns the result of  {@code supplier.get()}. Java 8 users: use the lambda expression  {@code o -> supplier.get()} instead.", "nlToks": ["Returns", "a", "function", "that", "ignores", "its", "input", "and", "returns", "the", "result", "of", "-LCB-", "@code", "supplier.get", "-LRB-", "-RRB-", "-RCB-", ".", "Java", "8", "users", ":", "use", "the", "lambda", "expression", "-LCB-", "@code", "o", "-", ">", "supplier.get", "-LRB-", "-RRB-", "-RCB-", "instead", "."], "path": "hazendaz/guava/tree/master/guava/src/com/google/common/base/Functions.java", "idx": 1248}
{"memberVariables": {"hdg": "HDGSentence", "EXAMPLE=\"$HCHDG,123.4,1.2,E,1.2,W\"": "String"}, "code": ["void", "function", "(", ")", "{", "final", "double", "value", "=", "359.9", ";", "hdg", ".", "setHeading", "(", "value", ")", ";", "assertEquals", "(", "value", ",", "hdg", ".", "getHeading", "(", ")", ",", "0.1", ")", ";", "}"], "memberFunctions": {"testSetDeviationTooHigh": [["void"]], "testSetHeadingTooHigh": [["void"]], "testIsTrue": [["void"]], "testHDGParserTalkerId": [["void"]], "testSetVariationWest": [["void"]], "testConstructor": [["void"]], "testSetVariationTooLow": [["void"]], "testGetVariation": [["void"]], "testSetVariationTooHigh": [["void"]], "testSetVariationEast": [["void"]], "testGetDeviation": [["void"]], "testSetDeviationTooLow": [["void"]], "setUp": [["void"]], "testGetHeading": [["void"]], "testSetDeviationEast": [["void"]], "testHDGParserString": [["void"]], "testSetDeviationWest": [["void"]], "testSetHeadingTooLow": [["void"]]}, "className": "HDGTest", "renamed": ["void", "function", "(", ")", "{", "final", "double", "loc0", "=", "359.9", ";", "hdg", ".", "setHeading", "(", "loc0", ")", ";", "assertEquals", "(", "loc0", ",", "hdg", ".", "getHeading", "(", ")", ",", "0.1", ")", ";", "}"], "nl": "Test method for {@link net.sf.marineapi.nmea.parser.HDGParser#setHeading(double)}.", "nlToks": ["Test", "method", "for", "-LCB-", "@link", "net.sf.marineapi.nmea.parser.HDGParser", "#setHeading", "-LRB-", "double", "-RRB-", "-RCB-", "."], "path": "pkoziol/marine-api/tree/master/src/test/java/net/sf/marineapi/nmea/parser/HDGTest.java", "idx": 1249}
{"memberVariables": {"mTierViews=new ArrayList<>()": "List<StorageTierView>", "mMetadataManager": "BlockMetadataManager", "mAliasToTierViews=new HashMap<>()": "Map<String,StorageTierView>", "mPinnedInodes=new HashSet<>()": "Set<Long>", "mInUseBlocks=new HashSet<>()": "Set<Long>"}, "code": ["StorageTierView", "function", "(", "StorageTierView", "tierView", ")", "{", "int", "nextOrdinal", "=", "tierView", ".", "getTierViewOrdinal", "(", ")", "+", "1", ";", "if", "(", "nextOrdinal", "<", "mTierViews", ".", "size", "(", ")", ")", "{", "return", "mTierViews", ".", "get", "(", "nextOrdinal", ")", ";", "}", "return", "null", ";", "}"], "memberFunctions": {"getTierViews": [["List<StorageTierView>"]], "getTierViewsBelow": [["List<StorageTierView>", "String tierAlias"]], "getTierView": [["StorageTierView", "String tierAlias"]], "isBlockMarked": [["boolean", "long blockId"]], "getBlockMeta": [["BlockMeta", "long blockId"]], "clearBlockMarks": [["void"]], "isBlockPinned": [["boolean", "long blockId"]], "getAvailableBytes": [["long", "BlockStoreLocation location"]], "isBlockLocked": [["boolean", "long blockId"]], "isBlockEvictable": [["boolean", "long blockId"]]}, "className": "BlockMetadataManagerView", "renamed": ["StorageTierView", "function", "(", "StorageTierView", "arg0", ")", "{", "int", "loc0", "=", "arg0", ".", "getTierViewOrdinal", "(", ")", "+", "1", ";", "if", "(", "loc0", "<", "mTierViews", ".", "size", "(", ")", ")", "{", "return", "mTierViews", ".", "get", "(", "loc0", ")", ";", "}", "return", "null", ";", "}"], "nl": "Gets the next storage tier view.", "nlToks": ["Gets", "the", "next", "storage", "tier", "view", "."], "path": "poemlin/alluxio/tree/master/core/server/src/main/java/alluxio/worker/block/BlockMetadataManagerView.java", "idx": 1250}
{"memberVariables": {"m_searcher": "RestSearcher<YouTubeGDataVideo>", "m_log=LoggerFactory.getLogger(getClass())": "Logger", "m_documentBuilder": "DocumentBuilder"}, "code": ["void", "function", "(", "final", "String", "str", ")", "{", "final", "File", "outFile", "=", "new", "File", "(", "\"YouTubeErrorResults.xml\"", ")", ";", "outFile", ".", "delete", "(", ")", ";", "final", "OutputStream", "os", "=", "new", "FileOutputStream", "(", "outFile", ")", ";", "final", "Reader", "is", "=", "new", "StringReader", "(", "str", ")", ";", "IOUtils", ".", "copy", "(", "is", ",", "os", ")", ";", "os", ".", "flush", "(", ")", ";", "os", ".", "close", "(", ")", ";", "is", ".", "close", "(", ")", ";", "}"], "memberFunctions": {"processResults": [["RestResults<YouTubeGDataVideo>", "final InputStream is"]]}, "className": "YouTubeRestResultBodyProcessor", "renamed": ["void", "function", "(", "final", "String", "arg0", ")", "{", "final", "File", "loc0", "=", "new", "File", "(", "\"srini_string\"", ")", ";", "loc0", ".", "delete", "(", ")", ";", "final", "OutputStream", "loc1", "=", "new", "FileOutputStream", "(", "loc0", ")", ";", "final", "Reader", "loc2", "=", "new", "StringReader", "(", "arg0", ")", ";", "IOUtils", ".", "copy", "(", "loc2", ",", "loc1", ")", ";", "loc1", ".", "flush", "(", ")", ";", "loc1", ".", "close", "(", ")", ";", "loc2", ".", "close", "(", ")", ";", "}"], "nl": "Just for debugging XML feeds.", "nlToks": ["Just", "for", "debugging", "XML", "feeds", "."], "path": "adamfisk/littleshoot-client/tree/master/common/searchers/youtube/src/main/java/org/lastbamboo/common/searchers/youtube/YouTubeRestResultBodyProcessor.java", "idx": 1251}
{"memberVariables": {"mParseWhitelist": "boolean", "mRedirectionList": "THashMap<String,String>", "mHostsParserMatcher": "Matcher", "mWhitelist": "THashSet<String>", "mBlacklist": "THashSet<String>", "mHostsParserPattern": "Pattern", "mParseRedirections": "boolean"}, "code": ["void", "function", "(", "THashSet", "<", "String", ">", "whitelist", ")", "{", "mWhitelist", ".", "addAll", "(", "whitelist", ")", ";", "}"], "memberFunctions": {"addRedirectionList": [["void", "THashMap<String,String> redirectionList"]], "getBlacklist": [["THashSet<String>"]], "addBlacklist": [["void", "THashSet<String> blacklist"]], "getWhitelist": [["THashSet<String>"]], "getRedirectionList": [["THashMap<String,String>"]], "parse": [["void", "BufferedReader reader"]], "compileList": [["void"]]}, "className": "HostsParser", "renamed": ["void", "function", "(", "THashSet", "<", "String", ">", "arg0", ")", "{", "mWhitelist", ".", "addAll", "(", "arg0", ")", ";", "}"], "nl": "Add whitelist to this host file. This supports simple regex in entries.", "nlToks": ["Add", "whitelist", "to", "this", "host", "file", ".", "This", "supports", "simple", "regex", "in", "entries", "."], "path": "0-kaladin/ad-away/tree/master/AdAway/src/main/java/org/adaway/util/HostsParser.java", "idx": 1252}
{"memberVariables": {"fldname2": "String", "p1": "Plan", "fldname1": "String", "p2": "Plan", "sch=new Schema()": "Schema"}, "code": ["int", "function", "(", "String", "fldname", ")", "{", "if", "(", "p1", ".", "schema", "(", ")", ".", "hasField", "(", "fldname", ")", ")", "return", "p1", ".", "distinctValues", "(", "fldname", ")", ";", "else", "return", "p2", ".", "distinctValues", "(", "fldname", ")", ";", "}"], "memberFunctions": {"schema": [["Schema"]], "blocksAccessed": [["int"]], "recordsOutput": [["int"]], "open": [["Scan"]]}, "className": "MergeJoinPlan", "renamed": ["int", "function", "(", "String", "arg0", ")", "{", "if", "(", "p1", ".", "schema", "(", ")", ".", "hasField", "(", "arg0", ")", ")", "return", "p1", ".", "distinctValues", "(", "arg0", ")", ";", "else", "return", "p2", ".", "distinctValues", "(", "arg0", ")", ";", "}"], "nl": "Estimates the distinct number of field values in the join. Since the join does not increase or decrease field values, the estimate is the same as in the appropriate underlying query.", "nlToks": ["Estimates", "the", "distinct", "number", "of", "field", "values", "in", "the", "join", ".", "Since", "the", "join", "does", "not", "increase", "or", "decrease", "field", "values", ",", "the", "estimate", "is", "the", "same", "as", "in", "the", "appropriate", "underlying", "query", "."], "path": "prerit2803/DBMSProject2/tree/master/simpledb/materialize/MergeJoinPlan.java", "idx": 1253}
{"memberVariables": {"KB=1024": "int", "MB=1024 * KB": "int", "GB=1024 * MB": "int"}, "code": ["File", "function", "(", "File", "path", ")", "{", "try", "{", "return", "path", ".", "getCanonicalFile", "(", ")", ";", "}", "catch", "(", "IOException", "e", ")", "{", "return", "path", ".", "getAbsoluteFile", "(", ")", ";", "}", "}"], "memberFunctions": {"resolveParameter": [["File", "String parameter", "File aFolder", "String path"]], "convertSizeToInt": [["int", "String aString", "int defaultValue"]], "convertSizeToLong": [["long", "String aString", "long defaultValue"]], "readContent": [["byte[]", "File file"], ["String", "File file", "String lineEnding"]], "writeContent": [["void", "File file", "String content"]], "folderSize": [["long", "File directory"]], "copy": [["void", "File destinationFolder", "File... filesOrFolders"]], "delete": [["boolean", "File fileOrFolder"]], "getRelativePath": [["String", "File basePath", "File path"]]}, "className": "FileUtils", "renamed": ["File", "function", "(", "File", "arg0", ")", "{", "try", "{", "return", "arg0", ".", "getCanonicalFile", "(", ")", ";", "}", "catch", "(", "IOException", "loc0", ")", "{", "return", "arg0", ".", "getAbsoluteFile", "(", ")", ";", "}", "}"], "nl": "Returns the exact path for a file. This path will be the canonical path unless an exception is thrown in which case it will be the absolute path.", "nlToks": ["Returns", "the", "exact", "path", "for", "a", "file", ".", "This", "path", "will", "be", "the", "canonical", "path", "unless", "an", "exception", "is", "thrown", "in", "which", "case", "it", "will", "be", "the", "absolute", "path", "."], "path": "pombreda/gitblit/tree/master/src/main/java/com/gitblit/utils/FileUtils.java", "idx": 1254}
{"memberVariables": {"MIN_ALLOWED=1024": "int", "MAX_ALLOWED=8192": "int", "min_group_len": "int", "max_group_len": "int", "pref_group_len": "int"}, "code": ["int", "function", "(", ")", "{", "return", "pref_group_len", ";", "}"], "memberFunctions": {"getMax_group_len": [["int"]], "getMin_group_len": [["int"]]}, "className": "DHGexParameters", "renamed": ["int", "function", "(", ")", "{", "return", "pref_group_len", ";", "}"], "nl": "Get the preferred group length.", "nlToks": ["Get", "the", "preferred", "group", "length", "."], "path": "pooyanjamshidi/BO4CO/tree/master/src/external/libs/ssh2/ssh2v2/ganymed-ssh2-build250/src/ch/ethz/ssh2/DHGexParameters.java", "idx": 1255}
{"memberVariables": {}, "code": ["double", "function", "(", "D1Matrix64F", "a", ")", "{", "double", "total", "=", "0", ";", "int", "size", "=", "a", ".", "getNumElements", "(", ")", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "size", ";", "i", "++", ")", "{", "double", "val", "=", "a", ".", "get", "(", "i", ")", ";", "total", "+=", "val", "*", "val", ";", "}", "return", "Math", ".", "sqrt", "(", "total", ")", ";", "}"], "memberFunctions": {"inducedP2": [["double", "DenseMatrix64F A"]], "inducedP1": [["double", "DenseMatrix64F A"]], "normalizeF": [["void", "DenseMatrix64F A"]], "normF": [["double", "D1Matrix64F a"]], "fastNormP": [["double", "DenseMatrix64F A", "double p"]], "fastNormP2": [["double", "DenseMatrix64F A"]], "normPInf": [["double", "DenseMatrix64F A"]], "conditionP": [["double", "DenseMatrix64F A", "double p"]], "elementP": [["double", "RowD1Matrix64F A", "double p"]], "inducedPInf": [["double", "DenseMatrix64F A"]], "normP": [["double", "DenseMatrix64F A", "double p"]], "normP2": [["double", "DenseMatrix64F A"]], "fastElementP": [["double", "D1Matrix64F A", "double p"]], "normP1": [["double", "DenseMatrix64F A"]], "conditionP2": [["double", "DenseMatrix64F A"]]}, "className": "NormOps", "renamed": ["double", "function", "(", "D1Matrix64F", "arg0", ")", "{", "double", "loc0", "=", "0", ";", "int", "loc1", "=", "arg0", ".", "getNumElements", "(", ")", ";", "for", "(", "int", "loc2", "=", "0", ";", "loc2", "<", "loc1", ";", "loc2", "++", ")", "{", "double", "loc3", "=", "arg0", ".", "get", "(", "loc2", ")", ";", "loc0", "+=", "loc3", "*", "loc3", ";", "}", "return", "Math", ".", "sqrt", "(", "loc0", ")", ";", "}"], "nl": " This implementation of the Frobenius norm is a straight forward implementation and can be susceptible for overflow/underflow issues.  A more resilient implementation is {@link #normF}. ", "nlToks": ["This", "implementation", "of", "the", "Frobenius", "norm", "is", "a", "straight", "forward", "implementation", "and", "can", "be", "susceptible", "for", "overflow/underflow", "issues", ".", "A", "more", "resilient", "implementation", "is", "-LCB-", "@link", "#normF", "-RCB-", "."], "path": "adamaulia/efficient-java-matrix-library/tree/master/src/org/ejml/ops/NormOps.java", "idx": 1256}
{"memberVariables": {}, "code": ["double", "function", "(", "D1Matrix64F", "m", ")", "{", "double", "total", "=", "0", ";", "int", "N", "=", "m", ".", "getNumElements", "(", ")", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "N", ";", "i", "++", ")", "{", "double", "d", "=", "m", ".", "data", "[", "i", "]", ";", "total", "+=", "d", "*", "d", ";", "}", "return", "total", ";", "}"], "memberFunctions": {"subvector": [["void", "RowD1Matrix64F A", "int rowA", "int colA", "int length", "boolean row", "int offsetV", "RowD1Matrix64F v"]], "diffNormP1": [["double", "D1Matrix64F a", "D1Matrix64F b"]], "pivotMatrix": [["DenseMatrix64F", "DenseMatrix64F ret", "int pivots[]", "int numPivots", "boolean transposed"]], "copyChangeRow": [["DenseMatrix64F", "int order[]", "DenseMatrix64F src", "DenseMatrix64F dst"]], "createReflector": [["DenseMatrix64F", "RowD1Matrix64F u"], ["DenseMatrix64F", "DenseMatrix64F u", "double gamma"]], "diffNormF": [["double", "D1Matrix64F a", "D1Matrix64F b"]], "qualityTriangular": [["double", "boolean upper", "D1Matrix64F T"]], "diffNormF_fast": [["double", "D1Matrix64F a", "D1Matrix64F b"]], "addIdentity": [["void", "RowD1Matrix64F A", "RowD1Matrix64F B", "double alpha"]], "diagProd": [["double", "RowD1Matrix64F T"]], "copyTriangle": [["DenseMatrix64F", "DenseMatrix64F src", "DenseMatrix64F dst", "boolean upper"]], "splitIntoVectors": [["DenseMatrix64F[]", "RowD1Matrix64F A", "boolean column"]]}, "className": "SpecializedOps", "renamed": ["double", "function", "(", "D1Matrix64F", "arg0", ")", "{", "double", "loc0", "=", "0", ";", "int", "loc1", "=", "arg0", ".", "getNumElements", "(", ")", ";", "for", "(", "int", "loc2", "=", "0", ";", "loc2", "<", "loc1", ";", "loc2", "++", ")", "{", "double", "loc3", "=", "arg0", ".", "data", "[", "loc2", "]", ";", "loc0", "+=", "loc3", "*", "loc3", ";", "}", "return", "loc0", ";", "}"], "nl": "Sums up the square of each element in the matrix.  This is equivalent to the Frobenius norm squared.", "nlToks": ["Sums", "up", "the", "square", "of", "each", "element", "in", "the", "matrix", ".", "This", "is", "equivalent", "to", "the", "Frobenius", "norm", "squared", "."], "path": "adamaulia/efficient-java-matrix-library/tree/master/src/org/ejml/ops/SpecializedOps.java", "idx": 1258}
{"memberVariables": {}, "code": ["boolean", "function", "(", "Message", "message", ")", "{", "Boolean", "requestor", "=", "(", "Boolean", ")", "message", ".", "get", "(", "Message", ".", "REQUESTOR_ROLE", ")", ";", "return", "requestor", "!=", "null", "&&", "requestor", ".", "booleanValue", "(", ")", ";", "}"], "memberFunctions": {"getFaultMode": [["FaultMode", "Message message"]], "isDOMPresent": [["boolean", "Message m"]], "isTrue": [["boolean", "Object value"]], "isOutbound": [["boolean", "Message message"]], "isEmptyPartialResponse": [["boolean", "Message message"]], "getContextualBoolean": [["boolean", "Message m", "String key", "boolean defaultValue"]], "isFault": [["boolean", "Message message"]], "isPartialResponse": [["boolean", "Message message"]], "getContextualProperty": [["Object", "Message m", "String propPreferred", "String propDefault"]]}, "className": "MessageUtils", "renamed": ["boolean", "function", "(", "Message", "arg0", ")", "{", "Boolean", "loc0", "=", "(", "Boolean", ")", "arg0", ".", "get", "(", "Message", ".", "REQUESTOR_ROLE", ")", ";", "return", "loc0", "!=", "null", "&&", "loc0", ".", "booleanValue", "(", ")", ";", "}"], "nl": "Determine if current messaging role is that of requestor.", "nlToks": ["Determine", "if", "current", "messaging", "role", "is", "that", "of", "requestor", "."], "path": "primesign/cxf/tree/master/core/src/main/java/org/apache/cxf/message/MessageUtils.java", "idx": 1261}
{"memberVariables": {"fldname": "String", "pred": "Predicate", "tblname": "String", "newval": "Expression"}, "code": ["String", "function", "(", ")", "{", "return", "fldname", ";", "}"], "memberFunctions": {"newValue": [["Expression"]], "pred": [["Predicate"]], "tableName": [["String"]]}, "className": "ModifyData", "renamed": ["String", "function", "(", ")", "{", "return", "fldname", ";", "}"], "nl": "Returns the field whose values will be modified", "nlToks": ["Returns", "the", "field", "whose", "values", "will", "be", "modified"], "path": "prerit2803/DBMSProject2/tree/master/simpledb/parse/ModifyData.java", "idx": 1263}
{"memberVariables": {"myLocation": "String", "suffix": "String"}, "code": ["void", "function", "(", "String", "type", ",", "String", "unit", ",", "List", "<", "String", ">", "imageLocations", ")", "{", "List", "<", "File", ">", "files", "=", "new", "ArrayList", "<", ">", "(", ")", ";", "for", "(", "String", "s", ":", "imageLocations", ")", "{", "File", "f", "=", "new", "File", "(", "s", ")", ";", "files", ".", "add", "(", "f", ")", ";", "}", "this", ".", "saveFiles", "(", "type", ",", "unit", ",", "files", ")", ";", "}"], "memberFunctions": {"saveFile": [["void", "String rename", "File file"]], "saveFiles": [["void", "String type", "String unit", "List<File> images"]]}, "className": "StateImageSaver", "renamed": ["void", "function", "(", "String", "arg0", ",", "String", "arg1", ",", "List", "<", "String", ">", "arg2", ")", "{", "List", "<", "File", ">", "loc0", "=", "new", "ArrayList", "<", ">", "(", ")", ";", "for", "(", "String", "loc1", ":", "arg2", ")", "{", "File", "loc2", "=", "new", "File", "(", "loc1", ")", ";", "loc0", ".", "add", "(", "loc2", ")", ";", "}", "this", ".", "saveFiles", "(", "arg0", ",", "arg1", ",", "loc0", ")", ";", "}"], "nl": "Takes in a list of file locations instead of actual files and renames/saves them", "nlToks": ["Takes", "in", "a", "list", "of", "file", "locations", "instead", "of", "actual", "files", "and", "renames/saves", "them"], "path": "adamtache/tower-defense-engine/tree/master/src/auth_environment/delegatesAndFactories/StateImageSaver.java", "idx": 1264}
{"memberVariables": {}, "code": ["boolean", "function", "(", "ActivityRequest", "activityRequest", ")", "{", "if", "(", "activityRequest", "==", "null", ")", "{", "return", "false", ";", "}", "if", "(", "activityRequest", ".", "getFeedId", "(", ")", "==", "null", ")", "{", "return", "false", ";", "}", "return", "activityRequest", ".", "getConfigProperties", "(", ")", "!=", "null", ";", "}"], "memberFunctions": {}, "className": "DeleteFilesFromTheSourceActivity", "renamed": ["boolean", "function", "(", "ActivityRequest", "arg0", ")", "{", "if", "(", "arg0", "==", "null", ")", "{", "return", "false", ";", "}", "if", "(", "arg0", ".", "getFeedId", "(", ")", "==", "null", ")", "{", "return", "false", ";", "}", "return", "arg0", ".", "getConfigProperties", "(", ")", "!=", "null", ";", "}"], "nl": "Validate the incoming request for mandatory parameters.", "nlToks": ["Validate", "the", "incoming", "request", "for", "mandatory", "parameters", "."], "path": "pkesireddy/portico_fletcher/tree/master/fetcher-master/fetcher-core/src/main/java/org/ithaka/cm/fetcher/core/activites/DeleteFilesFromTheSourceActivity.java", "idx": 1265}
{"memberVariables": {}, "code": ["byte", "[", "]", "function", "(", "byte", "[", "]", "src", ",", "int", "destLen", ")", "{", "return", "decompress", "(", "src", ",", "0", ",", "destLen", ")", ";", "}"], "memberFunctions": {"toString": [["String"]]}, "className": "LZ4FastDecompressor", "renamed": ["byte", "[", "]", "function", "(", "byte", "[", "]", "arg0", ",", "int", "arg1", ")", "{", "return", "decompress", "(", "arg0", ",", "0", ",", "arg1", ")", ";", "}"], "nl": "Convenience method, equivalent to calling {@link #decompress(byte[],int,int) decompress(src, 0, destLen)}.", "nlToks": ["Convenience", "method", ",", "equivalent", "to", "calling", "-LCB-", "@link", "#decompress", "-LRB-", "byte", "-LSB-", "-RSB-", ",", "int", ",", "int", "-RRB-", "decompress", "-LRB-", "src", ",", "0", ",", "destLen", "-RRB-", "-RCB-", "."], "path": "10people/disunity/tree/master/disunity-core/src/main/java/info/ata4/util/lz4/LZ4FastDecompressor.java", "idx": 1266}
{"memberVariables": {"label": "String", "map": "Map<String,Integer>"}, "code": ["void", "function", "(", "String", "text", ")", "{", "String", "[", "]", "array", "=", "text", ".", "replaceAll", "(", "\"|pP\"", ",", "\" \"", ")", ".", "toLowerCase", "(", ")", ".", "split", "(", "\"|s+\"", ")", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "array", ".", "length", ";", "i", "++", ")", "{", "String", "term", "=", "array", "[", "i", "]", ";", "incrementTermCount", "(", "term", ")", ";", "}", "}"], "memberFunctions": {"processElements": [["void", "Elements paragraphs"]], "incrementTermCount": [["void", "String term"]], "getLabel": [["String"]], "size": [["int"]], "get": [["Integer", "String term"]], "main": [["void", "String[] args"]], "keySet": [["Set<String>"]], "put": [["void", "String term", "int count"]], "printCounts": [["void"]], "processTree": [["void", "Node root"]]}, "className": "TermCounter", "renamed": ["void", "function", "(", "String", "arg0", ")", "{", "String", "[", "]", "loc0", "=", "arg0", ".", "replaceAll", "(", "\"srini_string\"", ",", "\"srini_string\"", ")", ".", "toLowerCase", "(", ")", ".", "split", "(", "\"srini_string\"", ")", ";", "for", "(", "int", "loc1", "=", "0", ";", "loc1", "<", "loc0", ".", "length", ";", "loc1", "++", ")", "{", "String", "loc2", "=", "loc0", "[", "loc1", "]", ";", "incrementTermCount", "(", "loc2", ")", ";", "}", "}"], "nl": "Splits `text` into words and counts them.", "nlToks": ["Splits", "`", "text", "`", "into", "words", "and", "counts", "them", "."], "path": "hayleycall/cs-application-backing-with-redis-lab-codeU/tree/master/javacs-lab10/src/com/flatironschool/javacs/TermCounter.java", "idx": 1267}
{"memberVariables": {"goal": "Object", "map": "Map"}, "code": ["AdaptableHeuristicFunction", "function", "(", "Object", "goal", ",", "Map", "map", ")", "{", "this", ".", "goal", "=", "goal", ";", "this", ".", "map", "=", "map", ";", "return", "this", ";", "}"], "memberFunctions": {}, "className": "AdaptableHeuristicFunction", "renamed": ["AdaptableHeuristicFunction", "function", "(", "Object", "arg0", ",", "Map", "arg1", ")", "{", "this", ".", "goal", "=", "arg0", ";", "this", ".", "map", "=", "arg1", ";", "return", "this", ";", "}"], "nl": "Modifies goal and map information and returns the modified heuristic function.", "nlToks": ["Modifies", "goal", "and", "map", "information", "and", "returns", "the", "modified", "heuristic", "function", "."], "path": "peterplupo/ia201102/tree/master/trabalho1/aima-core/src/main/java/aima/core/environment/map/AdaptableHeuristicFunction.java", "idx": 1268}
{"memberVariables": {"decisions=0": "int", "somaticWhitelistAccepts=0": "int", "whiteListGenesForPromoterMutations": "Set<Long>", "germlineWhitelistAccepts=0": "int", "utrRejects=0": "int", "silentOrIntronRejects=0": "int", "missenseGermlineRejects=0": "int", "mutationStatusNoneRejects=0": "int", "emptyAnnotationRejects=0": "int", "redactedRejects=0": "int", "unknownAccepts=0": "int", "accepts=0": "int", "lohOrWildTypeRejects=0": "int", "igrRejects=0": "int"}, "code": ["int", "function", "(", ")", "{", "return", "this", ".", "emptyAnnotationRejects", ";", "}"], "memberFunctions": {"getUnknownAccepts": [["int"]], "getStatistics": [["String"]], "safeStringTest": [["boolean", "String data", "String pattern"]], "acceptMutation": [["boolean", "ExtendedMutation mutation"]], "getMissenseGermlineRejects": [["int"]], "getAccepts": [["int"]], "getRejects": [["int"]], "getIGRRejects": [["int"]], "getLohOrWildTypeRejects": [["int"]], "getSilentOrIntronRejects": [["int"]], "getSomaticWhitelistAccepts": [["int"]], "getUTRRejects": [["int"]], "getGermlineWhitelistAccepts": [["int"]], "getDecisions": [["int"]], "getMutationStatusNoneRejects": [["int"]], "toString": [["String"]], "getRedactedRejects": [["int"]]}, "className": "MutationFilter", "renamed": ["int", "function", "(", ")", "{", "return", "this", ".", "emptyAnnotationRejects", ";", "}"], "nl": "Provide number of REJECT decisions for Emtpy Annotation Mutations.", "nlToks": ["Provide", "number", "of", "REJECT", "decisions", "for", "Emtpy", "Annotation", "Mutations", "."], "path": "adamabeshouse/cbioportal/tree/master/core/src/main/java/org/mskcc/cbio/portal/scripts/MutationFilter.java", "idx": 1269}
{"memberVariables": {"INCREASING_BYTES=BufferUtils.getIncreasingByteArray((int)BLOCK_LENGTH)": "byte[]", "BLOCK_LENGTH=100L": "long", "mTestStream": "TestBufferedBlockOutStream", "mThrown=ExpectedException.none()": "ExpectedException"}, "code": ["void", "function", "(", ")", "{", "mTestStream", ".", "setWrittenBytes", "(", "BLOCK_LENGTH", ")", ";", "Assert", ".", "assertEquals", "(", "0L", ",", "mTestStream", ".", "remaining", "(", ")", ")", ";", "mTestStream", ".", "setWrittenBytes", "(", "40L", ")", ";", "Assert", ".", "assertEquals", "(", "BLOCK_LENGTH", "-", "40L", ",", "mTestStream", ".", "remaining", "(", ")", ")", ";", "mTestStream", ".", "setWrittenBytes", "(", "0L", ")", ";", "Assert", ".", "assertEquals", "(", "BLOCK_LENGTH", ",", "mTestStream", ".", "remaining", "(", ")", ")", ";", "}"], "memberFunctions": {"byteArrayAtOffset": [["void"]], "byteArrayWrite": [["void"]], "before": [["void"]], "doubleFlush": [["void"]], "singleByteWrite": [["void"]], "writePastBlock": [["void"]], "writeToClosed": [["void"]]}, "className": "BufferedBlockOutStreamTest", "renamed": ["void", "function", "(", ")", "{", "mTestStream", ".", "setWrittenBytes", "(", "BLOCK_LENGTH", ")", ";", "Assert", ".", "assertEquals", "(", "0L", ",", "mTestStream", ".", "remaining", "(", ")", ")", ";", "mTestStream", ".", "setWrittenBytes", "(", "40L", ")", ";", "Assert", ".", "assertEquals", "(", "BLOCK_LENGTH", "-", "40L", ",", "mTestStream", ".", "remaining", "(", ")", ")", ";", "mTestStream", ".", "setWrittenBytes", "(", "0L", ")", ";", "Assert", ".", "assertEquals", "(", "BLOCK_LENGTH", ",", "mTestStream", ".", "remaining", "(", ")", ")", ";", "}"], "nl": "Tests for the  {@link BufferedBlockOutStream#remaining()} method.", "nlToks": ["Tests", "for", "the", "-LCB-", "@link", "BufferedBlockOutStream", "#remaining", "-LRB-", "-RRB-", "-RCB-", "method", "."], "path": "poemlin/alluxio/tree/master/core/client/src/test/java/alluxio/client/block/BufferedBlockOutStreamTest.java", "idx": 1270}
{"memberVariables": {"mTierViews=new ArrayList<>()": "List<StorageTierView>", "mMetadataManager": "BlockMetadataManager", "mAliasToTierViews=new HashMap<>()": "Map<String,StorageTierView>", "mPinnedInodes=new HashSet<>()": "Set<Long>", "mInUseBlocks=new HashSet<>()": "Set<Long>"}, "code": ["List", "<", "StorageTierView", ">", "function", "(", "String", "tierAlias", ")", "{", "int", "ordinal", "=", "getTierView", "(", "tierAlias", ")", ".", "getTierViewOrdinal", "(", ")", ";", "return", "mTierViews", ".", "subList", "(", "ordinal", "+", "1", ",", "mTierViews", ".", "size", "(", ")", ")", ";", "}"], "memberFunctions": {"getTierViews": [["List<StorageTierView>"]], "getTierView": [["StorageTierView", "String tierAlias"]], "isBlockMarked": [["boolean", "long blockId"]], "getBlockMeta": [["BlockMeta", "long blockId"]], "clearBlockMarks": [["void"]], "getNextTier": [["StorageTierView", "StorageTierView tierView"]], "isBlockPinned": [["boolean", "long blockId"]], "getAvailableBytes": [["long", "BlockStoreLocation location"]], "isBlockLocked": [["boolean", "long blockId"]], "isBlockEvictable": [["boolean", "long blockId"]]}, "className": "BlockMetadataManagerView", "renamed": ["List", "<", "StorageTierView", ">", "function", "(", "String", "arg0", ")", "{", "int", "loc0", "=", "getTierView", "(", "arg0", ")", ".", "getTierViewOrdinal", "(", ")", ";", "return", "mTierViews", ".", "subList", "(", "loc0", "+", "1", ",", "mTierViews", ".", "size", "(", ")", ")", ";", "}"], "nl": "Gets all tierViews before certain tierView. Throws an  {@link IllegalArgumentException} if thetierAlias is not found.", "nlToks": ["Gets", "all", "tierViews", "before", "certain", "tierView", ".", "Throws", "an", "-LCB-", "@link", "IllegalArgumentException", "-RCB-", "if", "thetierAlias", "is", "not", "found", "."], "path": "poemlin/alluxio/tree/master/core/server/src/main/java/alluxio/worker/block/BlockMetadataManagerView.java", "idx": 1271}
{"memberVariables": {"PATH_JOINER=Joiner.on(\"/\")": "Joiner", "parent": "DeterministicKey", "childNumberPath": "ImmutableList<ChildNumber>", "chainCode": "byte[]", "publicAsPoint": "ECPoint", "serialVersionUID=1L": "long", "privateAsFieldElement": "BigInteger"}, "code": ["DeterministicKey", "function", "(", ")", "{", "if", "(", "!", "hasPrivate", "(", ")", ")", "return", "this", ";", "final", "DeterministicKey", "parentPub", "=", "getParent", "(", ")", "==", "null", "?", "null", ":", "getParent", "(", ")", ".", "getPubOnly", "(", ")", ";", "return", "new", "DeterministicKey", "(", "getChildNumberPath", "(", ")", ",", "getChainCode", "(", ")", ",", "getPubPoint", "(", ")", ",", "null", ",", "parentPub", ")", ";", "}"], "memberFunctions": {"getParent": [["DeterministicKey"]], "getDepth": [["int"]], "getPubPoint": [["ECPoint"]], "serializePrivB58": [["String"]], "toBase58": [["String", "byte[] ser"]], "serializePubB58": [["String"]], "serializePublic": [["byte[]"]], "getPrivKeyBytes33": [["byte[]"]], "hasPrivate": [["boolean"]], "addChecksum": [["byte[]", "byte[] input"]], "getChainCode": [["byte[]"]], "toECKey": [["ECKey"]], "serialize": [["byte[]", "boolean pub"]], "serializePrivate": [["byte[]"]], "getChildNumber": [["ChildNumber"]], "getIdentifier": [["byte[]"]], "getPath": [["String"]], "getPrivAsFieldElement": [["BigInteger"]], "getPubKeyBytes": [["byte[]"]], "toString": [["String"]], "getFingerprint": [["byte[]"]], "getChildNumberPath": [["ImmutableList<ChildNumber>"]], "getPrivKeyBytes": [["byte[]"]]}, "className": "DeterministicKey", "renamed": ["DeterministicKey", "function", "(", ")", "{", "if", "(", "!", "hasPrivate", "(", ")", ")", "return", "this", ";", "final", "DeterministicKey", "loc0", "=", "getParent", "(", ")", "==", "null", "?", "null", ":", "getParent", "(", ")", ".", "getPubOnly", "(", ")", ";", "return", "new", "DeterministicKey", "(", "getChildNumberPath", "(", ")", ",", "getChainCode", "(", ")", ",", "getPubPoint", "(", ")", ",", "null", ",", "loc0", ")", ";", "}"], "nl": "Returns the same key with the private part removed. May return the same instance.", "nlToks": ["Returns", "the", "same", "key", "with", "the", "private", "part", "removed", ".", "May", "return", "the", "same", "instance", "."], "path": "plncoin/plncoin-and/tree/master/plncoinj/core/src/main/java/com/google/bitcoin/crypto/DeterministicKey.java", "idx": 1272}
{"memberVariables": {"mPlan": "RecomputePlan", "mFileSystemMaster": "FileSystemMaster", "mRecomputeLauncherService=Executors.newFixedThreadPool(DEFAULT_RECOMPUTE_LAUNCHER_POOL_SIZE,ThreadFactoryUtils.build(\"recompute-launcher-%d\",true))": "ExecutorService", "DEFAULT_RECOMPUTE_LAUNCHER_POOL_SIZE=10": "int", "LOG=LoggerFactory.getLogger(Constants.LOGGER_TYPE)": "Logger", "mPlanner": "RecomputePlanner"}, "code": ["Future", "<", "?", ">", "function", "(", ")", "{", "RecomputePlan", "plan", "=", "mPlanner", ".", "plan", "(", ")", ";", "if", "(", "plan", "!=", "null", "&&", "!", "plan", ".", "isEmpty", "(", ")", ")", "{", "return", "mRecomputeLauncherService", ".", "submit", "(", "new", "RecomputeLauncher", "(", "plan", ")", ")", ";", "}", "return", "Futures", ".", "<", "Void", ">", "immediateFuture", "(", "null", ")", ";", "}"], "memberFunctions": {"heartbeat": [["void"]], "run": [["void"]], "close": [["void"]]}, "className": "RecomputeExecutor", "renamed": ["Future", "<", "?", ">", "function", "(", ")", "{", "RecomputePlan", "loc0", "=", "mPlanner", ".", "loc0", "(", ")", ";", "if", "(", "loc0", "!=", "null", "&&", "!", "loc0", ".", "isEmpty", "(", ")", ")", "{", "return", "mRecomputeLauncherService", ".", "submit", "(", "new", "RecomputeLauncher", "(", "loc0", ")", ")", ";", "}", "return", "Futures", ".", "<", "Void", ">", "immediateFuture", "(", "null", ")", ";", "}"], "nl": "A version of  {@code heartbeat} which returns a {@link Future} representing completion of therecompute plan. This is especially useful for tests.", "nlToks": ["A", "version", "of", "-LCB-", "@code", "heartbeat", "-RCB-", "which", "returns", "a", "-LCB-", "@link", "Future", "-RCB-", "representing", "completion", "of", "therecompute", "plan", ".", "This", "is", "especially", "useful", "for", "tests", "."], "path": "poemlin/alluxio/tree/master/core/server/src/main/java/alluxio/master/lineage/recompute/RecomputeExecutor.java", "idx": 1275}
{"memberVariables": {"m_SignedPart=null": "Element", "m_SignMode=-1": "int", "PROP_SIGNEDELEMENT=\"signedElement\"": "String", "m_WrappingPayloadElemnt=null": "Element", "PROP_REFERRINGELEMENT=\"referringElement\"": "String", "m_CurrWrappingMode=NO_WRAP": "WrappingAttackMode", "PROP_WRAPPINGELMENT=\"wrappingElement\"": "String", "m_PropertyChangeSupport=new java.beans.PropertyChangeSupport(this)": "PropertyChangeSupport", "m_CurrWrappingPayloadIdx=NO_CURR_WRAP_IDX": "int", "m_AttackPayloadElemnt=null": "Element", "m_IsAdditionalWrap=false": "boolean", "PROP_ATTACKELEMENT=\"attackElement\"": "String"}, "code": ["void", "function", "(", "final", "String", "propertyName", ",", "final", "PropertyChangeListener", "listener", ")", "{", "m_PropertyChangeSupport", ".", "removePropertyChangeListener", "(", "propertyName", ",", "listener", ")", ";", "}"], "memberFunctions": {"setAttackPayloadElement": [["void", "Element attackPayloadEl"]], "setCurrWrappingPayloadIdx": [["void", "int m_CurrWrappingPayloadIdx"]], "setWrappingPayloadElement": [["void", "Element wrappingPayloadEl"]], "isSigned": [["boolean"]], "isAdditionalWrap": [["boolean"]], "getWrappingPayloadElement": [["Element"]], "setCurrWrappingMode": [["void", "WrappingAttackMode currWrappingMode"]], "setIsAdditionalWrap": [["void", "boolean isAdditionalWrap"]], "getAttackPayloadElement": [["Element"]], "setSignedPart": [["void", "Element referencedElement"]], "getCurrWrappingPayloadIdx": [["int"]], "getCurrWrappingMode": [["WrappingAttackMode"]], "getSignedPart": [["Element"]], "getSignMode": [["int"]], "setSignMode": [["void", "int signMode"]], "addPropertyChangeListener": [["void", "final PropertyChangeListener listener"], ["void", "final String propertyName", "final PropertyChangeListener listener"]]}, "className": "ElementAttackProperties", "renamed": ["void", "function", "(", "final", "String", "arg0", ",", "final", "PropertyChangeListener", "arg1", ")", "{", "m_PropertyChangeSupport", ".", "removePropertyChangeListener", "(", "arg0", ",", "arg1", ")", ";", "}"], "nl": "Remove PropertyChangeListener.", "nlToks": ["Remove", "PropertyChangeListener", "."], "path": "0xwindows/WS-Attacker/tree/master/libs/XML_Encryption_Attack_Library/src/main/java/wsattacker/library/xmlencryptionattack/encryptedelements/ElementAttackProperties.java", "idx": 1276}
{"memberVariables": {"PWD=new File(\".\")": "File", "parameters=new HashMap<String,Object>()": "Map<String,Object>", "transformation": "Transformation"}, "code": ["String", "function", "(", ")", "{", "return", "withExceptionHandling", "(", "new", "Trans", "<", "String", ">", "(", ")", "{", "public", "String", "transform", "(", ")", "{", "return", "transformation", ".", "transformToString", "(", ")", ";", "}", "}", ")", ";", "}"], "memberFunctions": {"withExceptionHandling": [["R", "Trans<R> trans"]], "setOutputProperties": [["void", "Properties outputProperties"]], "transform": [["R"]], "transformTo": [["void", "final Result result"]], "getDefaultSystemId": [["String"]], "setParameter": [["void", "String name", "Object value"]], "setErrorListener": [["void", "ErrorListener errorListener"]], "setOutputProperty": [["void", "String name", "String value"]], "clearParameters": [["void"]], "getResultDocument": [["Document"]], "setURIResolver": [["void", "URIResolver uriResolver"]], "provideSystemIdIfRequired": [["void", "Source source"]], "getParameter": [["Object", "String name"]]}, "className": "Transform", "renamed": ["String", "function", "(", ")", "{", "return", "withExceptionHandling", "(", "new", "Trans", "<", "String", ">", "(", ")", "{", "public", "String", "transform", "(", ")", "{", "return", "transformation", ".", "transformToString", "(", ")", ";", "}", "}", ")", ";", "}"], "nl": "Perform the XSLT transformation specified in the constructor", "nlToks": ["Perform", "the", "XSLT", "transformation", "specified", "in", "the", "constructor"], "path": "phbenisc/xmlunit/tree/master/xmlunit-legacy/src/main/java/org/custommonkey/xmlunit/Transform.java", "idx": 1277}
{"memberVariables": {"timeElapsed": "long", "request": "HttpServletRequest", "messages": "ArrayList", "startTime": "Date", "stopTime": "Date", "parameters": "ArrayList"}, "code": ["ArrayList", "function", "(", ")", "{", "return", "parameters", ";", "}"], "memberFunctions": {"getDebugMessages": [["ArrayList"]], "getRequest": [["HttpServletRequest"]], "getCompleteLog": [["String"]], "startTimer": [["void"]], "logMsg": [["void", "Object caller", "String msg", "String color"], ["void", "Object caller", "String msg"]], "stopTimer": [["void"]], "getTimeElapsed": [["long"]], "addParameter": [["void", "int type", "String name", "String value"], ["void", "int type", "String name", "int value"], ["void", "int type", "String name", "boolean value"]]}, "className": "XDebug", "renamed": ["ArrayList", "function", "(", ")", "{", "return", "parameters", ";", "}"], "nl": "Gets all Parameters.", "nlToks": ["Gets", "all", "Parameters", "."], "path": "adamabeshouse/cbioportal/tree/master/core/src/main/java/org/mskcc/cbio/portal/util/XDebug.java", "idx": 1278}
{"memberVariables": {"comments": "String", "inactivationReasonType": "String", "receiptDate": "Timestamp", "isActive": "String", "predecessorId": "BigDecimal", "srcFileName": "String", "serialVersionUID=-2837724379118220768L": "long", "srcUniqueFileName": "String", "successorId": "BigDecimal", "createdDate": "Timestamp", "pclDataUnits": "List<PCLDataUnitEntity>", "dataSetId": "long", "feedId": "BigDecimal", "fileSize": "BigDecimal", "destFileName": "String", "checksum": "String", "checksumType": "String", "modifiedDate": "Timestamp", "runId": "BigDecimal", "isPrepopulated": "String", "isUpdate": "String", "receiptDateType": "String", "status": "String"}, "code": ["BigDecimal", "function", "(", ")", "{", "return", "this", ".", "fileSize", ";", "}"], "memberFunctions": {"setFeedId": [["void", "BigDecimal feedId"]], "getInactivationReasonType": [["String"]], "getSrcUniqueFileName": [["String"]], "getDataSetId": [["long"]], "setReceiptDateType": [["void", "String receiptDateType"]], "setIsPrepopulated": [["void", "String isPrepopulated"]], "getRunId": [["BigDecimal"]], "setSrcFileName": [["void", "String srcFileName"]], "getChecksumType": [["String"]], "getSrcFileName": [["String"]], "getChecksum": [["String"]], "getStatus": [["String"]], "getDestFileName": [["String"]], "getIsUpdate": [["String"]], "getPclDataUnits": [["List<PCLDataUnitEntity>"]], "setPclDataUnits": [["void", "List<PCLDataUnitEntity> pclDataUnits"]], "setInactivationReasonType": [["void", "String inactivationReasonType"]], "getReceiptDate": [["Timestamp"]], "getComments": [["String"]], "getCreatedDate": [["Timestamp"]], "setComments": [["void", "String comments"]], "removePclDataUnit": [["PCLDataUnitEntity", "PCLDataUnitEntity pclDataUnit"]], "getSuccessorId": [["BigDecimal"]], "getIsPrepopulated": [["String"]], "setSrcUniqueFileName": [["void", "String srcUniqueFileName"]], "setFileSize": [["void", "BigDecimal fileSize"]], "getPredecessorId": [["BigDecimal"]], "setChecksum": [["void", "String checksum"]], "setIsUpdate": [["void", "String isUpdate"]], "getReceiptDateType": [["String"]], "getFeedId": [["BigDecimal"]], "setRunId": [["void", "BigDecimal runId"]], "setReceiptDate": [["void", "Timestamp receiptDate"]], "setStatus": [["void", "String status"]], "getModifiedDate": [["Timestamp"]], "getIsActive": [["String"]], "setSuccessorId": [["void", "BigDecimal successorId"]], "setDestFileName": [["void", "String destFileName"]], "addPclDataUnit": [["PCLDataUnitEntity", "PCLDataUnitEntity pclDataUnit"]], "setModifiedDate": [["void", "Timestamp modifiedDate"]], "setCreatedDate": [["void", "Timestamp createdDate"]], "setDataSetId": [["void", "long dataSetId"]], "setPredecessorId": [["void", "BigDecimal predecessorId"]], "setIsActive": [["void", "String isActive"]], "setChecksumType": [["void", "String checksumType"]]}, "className": "PCLDataSetEntity", "renamed": ["BigDecimal", "function", "(", ")", "{", "return", "this", ".", "fileSize", ";", "}"], "nl": "Gets the file size.", "nlToks": ["Gets", "the", "file", "size", "."], "path": "pkesireddy/portico_fletcher/tree/master/FetcherTesterService/src/main/java/org/ithaka/cm/fetchertester/entity/PCLDataSetEntity.java", "idx": 1279}
{"memberVariables": {"component": "Component", "properties": "HashMap<String,String>"}, "code": ["void", "function", "(", "String", "key", ",", "String", "value", ")", "{", "switch", "(", "key", ")", "{", "case", "\"background-color\"", ":", "if", "(", "addBackgroundColor", "(", "value", ")", ")", "{", "properties", ".", "put", "(", "key", ",", "value", ")", ";", "}", "break", ";", "case", "\"width\"", ":", "if", "(", "addWidth", "(", "value", ")", ")", "{", "properties", ".", "put", "(", "key", ",", "value", ")", ";", "}", "break", ";", "}", "}"], "memberFunctions": {"addBackgroundColor": [["boolean", "String value"]], "addWidth": [["boolean", "String value"]], "getProperties": [["HashMap<String,String>"]]}, "className": "CSS", "renamed": ["void", "function", "(", "String", "arg0", ",", "String", "arg1", ")", "{", "switch", "(", "arg0", ")", "{", "case", "\"srini_string\"", ":", "if", "(", "addBackgroundColor", "(", "arg1", ")", ")", "{", "properties", ".", "put", "(", "arg0", ",", "arg1", ")", ";", "}", "break", ";", "case", "\"srini_string\"", ":", "if", "(", "addWidth", "(", "arg1", ")", ")", "{", "properties", ".", "put", "(", "arg0", ",", "arg1", ")", ";", "}", "break", ";", "}", "}"], "nl": "Adds a CSS property to a component. e.g.: key = background-color value = yellow", "nlToks": ["Adds", "a", "CSS", "property", "to", "a", "component", ".", "e.g.", ":", "key", "=", "background-color", "value", "=", "yellow"], "path": "porthunt/NovaUI/tree/master/src/model/CSS.java", "idx": 1280}
{"memberVariables": {"devices": "HashMap<Integer,Device>", "options": "ArrayList<Option>", "name": "String", "description": "String", "statSources": "HashMap<Integer,StatSource>"}, "code": ["StatSource", "function", "(", "int", "id", ")", "{", "if", "(", "id", ">", "0", ")", "{", "return", "this", ".", "statSources", ".", "get", "(", "id", ")", ";", "}", "else", "{", "return", "null", ";", "}", "}"], "memberFunctions": {"getDevices": [["Collection<Device>"]], "read": [["boolean"]], "getName": [["String"]], "getOptionValue": [["String", "String id"]], "getOption": [["Option", "int index"], ["Option", "String id"]], "getOptions": [["ArrayList<Option>"]], "getStatSources": [["Collection<StatSource>"]], "getDescription": [["String"]], "getDevice": [["Device", "int id"]]}, "className": "Machine", "renamed": ["StatSource", "function", "(", "int", "arg0", ")", "{", "if", "(", "arg0", ">", "0", ")", "{", "return", "this", ".", "statSources", ".", "get", "(", "arg0", ")", ";", "}", "else", "{", "return", "null", ";", "}", "}"], "nl": "Return linked stat source", "nlToks": ["Return", "linked", "stat", "source"], "path": "phramusca/JaMuz/tree/master/src/jamuz/Machine.java", "idx": 1282}
{"memberVariables": {"responseParameters": "HttpParameters", "authorizationWebsiteUrl": "String", "listener": "OAuthProviderListener", "serialVersionUID=1L": "long", "accessTokenEndpointUrl": "String", "isOAuth10a": "boolean", "requestTokenEndpointUrl": "String", "defaultHeaders": "Map<String,String>"}, "code": ["void", "function", "(", "HttpRequest", "request", ",", "HttpResponse", "response", ")", "{", "}"], "memberFunctions": {"retrieveAccessToken": [["void", "OAuthConsumer consumer", "String oauthVerifier"]], "retrieveToken": [["void", "OAuthConsumer consumer", "String endpointUrl", "String... additionalParameters"]], "getResponseParameters": [["HttpParameters"]], "getRequestTokenEndpointUrl": [["String"]], "createRequest": [["HttpRequest", "String endpointUrl"]], "setRequestHeader": [["void", "String header", "String value"]], "getAuthorizationWebsiteUrl": [["String"]], "removeListener": [["void", "OAuthProviderListener listener"]], "getAccessTokenEndpointUrl": [["String"]], "setOAuth10a": [["void", "boolean isOAuth10aProvider"]], "handleUnexpectedResponse": [["void", "int statusCode", "HttpResponse response"]], "retrieveRequestToken": [["String", "OAuthConsumer consumer", "String callbackUrl"]], "getRequestHeaders": [["Map<String,String>"]], "getResponseParameter": [["String", "String key"]], "setListener": [["void", "OAuthProviderListener listener"]], "sendRequest": [["HttpResponse", "HttpRequest request"]], "setResponseParameters": [["void", "HttpParameters parameters"]], "isOAuth10a": [["boolean"]]}, "className": "AbstractOAuthProvider", "renamed": ["void", "function", "(", "HttpRequest", "arg0", ",", "HttpResponse", "arg1", ")", "{", "}"], "nl": "Called when the connection is being finalized after receiving the response. Use this to do any cleanup / resource freeing.", "nlToks": ["Called", "when", "the", "connection", "is", "being", "finalized", "after", "receiving", "the", "response", ".", "Use", "this", "to", "do", "any", "cleanup", "/", "resource", "freeing", "."], "path": "pritamkhose/open-gpstracker.code/tree/master/external_sources/signpost/signpost-core/src/main/java/oauth/signpost/AbstractOAuthProvider.java", "idx": 1283}
{"memberVariables": {"ruleSetRules=new LinkedHashMap<>()": "Map<RuleSet,List<Rule>>", "nodeNameToNodes": "Map<String,List<Node>>"}, "code": ["void", "function", "(", "Node", "node", ")", "{", "List", "<", "Node", ">", "nodes", "=", "nodeNameToNodes", ".", "get", "(", "node", ".", "toString", "(", ")", ")", ";", "if", "(", "nodes", "!=", "null", ")", "{", "nodes", ".", "add", "(", "node", ")", ";", "}", "}"], "memberFunctions": {"add": [["void", "RuleSet ruleSet", "Rule rule"]], "visitAll": [["void", "List<Node> nodes", "RuleContext ctx"]], "clear": [["void"]], "indexNodes": [["void", "List<Node> nodes", "RuleContext ctx"]], "visit": [["void", "Rule rule", "Node node", "RuleContext ctx"]], "initialize": [["void"]]}, "className": "AbstractRuleChainVisitor", "renamed": ["void", "function", "(", "Node", "arg0", ")", "{", "List", "<", "Node", ">", "loc0", "=", "nodeNameToNodes", ".", "get", "(", "arg0", ".", "toString", "(", ")", ")", ";", "if", "(", "loc0", "!=", "null", ")", "{", "loc0", ".", "add", "(", "arg0", ")", ";", "}", "}"], "nl": "Index a single node for visitation by rules.", "nlToks": ["Index", "a", "single", "node", "for", "visitation", "by", "rules", "."], "path": "adangel/pmd/tree/master/pmd-core/src/main/java/net/sourceforge/pmd/lang/rule/AbstractRuleChainVisitor.java", "idx": 1285}
{"memberVariables": {"testId": "long", "serialVersionUID=1L": "long", "seqId": "long"}, "code": ["long", "function", "(", ")", "{", "return", "this", ".", "testId", ";", "}"], "memberFunctions": {"getSeqId": [["long"]], "hashCode": [["int"]], "setSeqId": [["void", "long seqId"]], "equals": [["boolean", "Object other"]], "setTestId": [["void", "long testId"]]}, "className": "RegPCLTestResultDetailsEntityPK", "renamed": ["long", "function", "(", ")", "{", "return", "this", ".", "testId", ";", "}"], "nl": "Gets the test id.", "nlToks": ["Gets", "the", "test", "id", "."], "path": "pkesireddy/portico_fletcher/tree/master/FetcherTesterService/src/main/java/org/ithaka/cm/fetchertester/entity/RegPCLTestResultDetailsEntityPK.java", "idx": 1286}
{"memberVariables": {"intBuf": "byte[]", "MAX_INT_BYTES=21": "int", "format": "PackFormatInputStream", "packed": "ByteArrayOutputStream"}, "code": ["void", "function", "(", "short", "value", ")", "{", "format", ".", "checkType", "(", "'h'", ",", "true", ")", ";", "packLong", "(", "value", ",", "true", ")", ";", "}"], "memberFunctions": {"getValue": [["byte[]"]], "packLong": [["void", "long x", "boolean signed"]], "reset": [["void"]], "getFormat": [["String"]], "addByte": [["void", "byte value"]], "addInt": [["void", "int value"]], "addLong": [["void", "long value"]], "addRecord": [["void", "long value"]], "addByteArray": [["void", "byte[] value"], ["void", "byte[] value", "int off", "int len"]], "addString": [["void", "String value"]]}, "className": "PackOutputStream", "renamed": ["void", "function", "(", "short", "arg0", ")", "{", "format", ".", "checkType", "(", "'h'", ",", "true", ")", ";", "packLong", "(", "arg0", ",", "true", ")", ";", "}"], "nl": "Add a short field to the stream. \\param value The short value to be added.", "nlToks": ["Add", "a", "short", "field", "to", "the", "stream", ".", "\\", "param", "value", "The", "short", "value", "to", "be", "added", "."], "path": "pgunn/wiredtiger/tree/master/lang/java/src/com/wiredtiger/db/PackOutputStream.java", "idx": 1288}
{"memberVariables": {"blockHash": "Sha256Hash", "serialVersionUID=5127353027086786117L": "long", "txOutChanges": "TransactionOutputChanges", "transactions": "List<Transaction>"}, "code": ["TransactionOutputChanges", "function", "(", ")", "{", "return", "txOutChanges", ";", "}"], "memberFunctions": {"getHash": [["Sha256Hash"]], "hashCode": [["int"]], "getTransactions": [["List<Transaction>"]], "equals": [["boolean", "Object o"]], "toString": [["String"]]}, "className": "StoredUndoableBlock", "renamed": ["TransactionOutputChanges", "function", "(", ")", "{", "return", "txOutChanges", ";", "}"], "nl": "Get the transaction output changes if they have been calculated, otherwise null. Only one of this and getTransactions() will return a non-null value.", "nlToks": ["Get", "the", "transaction", "output", "changes", "if", "they", "have", "been", "calculated", ",", "otherwise", "null", ".", "Only", "one", "of", "this", "and", "getTransactions", "-LRB-", "-RRB-", "will", "return", "a", "non-null", "value", "."], "path": "1000000000001/bitcoinj/tree/master/core/src/main/java/org/bitcoinj/core/StoredUndoableBlock.java", "idx": 1290}
{"memberVariables": {"callbackHandler": "CallbackHandler", "LOG=LogUtils.getL7dLogger(SAMLRealm.class)": "Logger", "signatureCrypto": "Crypto", "signatureProperties": "SignatureProperties", "callbackHandlerClass": "String", "signaturePropertiesFile": "String", "signatureAlias": "String", "issuer": "String"}, "code": ["void", "function", "(", "String", "callbackHandlerClass", ")", "{", "this", ".", "callbackHandlerClass", "=", "callbackHandlerClass", ";", "LOG", ".", "fine", "(", "\"Setting callbackHandlerClass: \"", "+", "callbackHandlerClass", ")", ";", "}"], "memberFunctions": {"getIssuer": [["String"]], "getSignatureAlias": [["String"]], "setSignatureCrypto": [["void", "Crypto signatureCrypto"]], "setIssuer": [["void", "String issuer"]], "getSignatureCrypto": [["Crypto"]], "getCallbackHandler": [["CallbackHandler"]], "getSignatureProperties": [["SignatureProperties"]], "setSignatureAlias": [["void", "String signatureAlias"]], "setSignaturePropertiesFile": [["void", "String signaturePropertiesFile"]], "setSignatureProperties": [["void", "SignatureProperties signatureProperties"]], "setCallbackHandler": [["void", "CallbackHandler callbackHandler"]]}, "className": "SAMLRealm", "renamed": ["void", "function", "(", "String", "arg0", ")", "{", "this", ".", "callbackHandlerClass", "=", "arg0", ";", "LOG", ".", "fine", "(", "\"srini_string\"", "+", "arg0", ")", ";", "}"], "nl": "Set the String corresponding to the CallbackHandler class.", "nlToks": ["Set", "the", "String", "corresponding", "to", "the", "CallbackHandler", "class", "."], "path": "primesign/cxf/tree/master/services/sts/sts-core/src/main/java/org/apache/cxf/sts/token/realm/SAMLRealm.java", "idx": 1291}
{"memberVariables": {"AMPLIFIED=true": "boolean", "DELETED=false": "boolean", "gisticID": "int", "peakStart": "int", "genes_in_ROI": "ArrayList<CanonicalGene>", "cytoband": "String", "amp": "boolean", "NO_SUCH_GISTIC=-1": "int", "cancerStudyId": "int", "chromosome": "int", "peakEnd": "int", "qValue": "double"}, "code": ["int", "function", "(", ")", "{", "return", "this", ".", "peakEnd", "-", "this", ".", "peakStart", ";", "}"], "memberFunctions": {"setPeakEnd": [["void", "int peakEnd"]], "setAmp": [["void", "boolean amp"]], "getCytoband": [["String"]], "setPeakStart": [["void", "int peakStart"]], "getPeakStart": [["int"]], "setqValue": [["void", "double qValue"]], "getAmp": [["boolean"]], "getInternalId": [["int"]], "setGenes_in_ROI": [["void", "ArrayList<CanonicalGene> genes_in_ROI"]], "getCancerStudyId": [["int"]], "getChromosome": [["int"]], "getPeakEnd": [["int"]], "addGene": [["void", "CanonicalGene gene"]], "setInternalId": [["void", "int internalId"]], "setCancerStudyId": [["void", "int cancerStudyId"]], "getqValue": [["double"]], "toString": [["String"]], "getGenes_in_ROI": [["ArrayList<CanonicalGene>"]], "setCytoband": [["void", "String cytoband"]], "setChromosome": [["void", "int chromosome"]]}, "className": "Gistic", "renamed": ["int", "function", "(", ")", "{", "return", "this", ".", "peakEnd", "-", "this", ".", "peakStart", ";", "}"], "nl": "Calculates the size of the ROI", "nlToks": ["Calculates", "the", "size", "of", "the", "ROI"], "path": "adamabeshouse/cbioportal/tree/master/core/src/main/java/org/mskcc/cbio/portal/model/Gistic.java", "idx": 1292}
{"memberVariables": {"mapN": "Map<String,IntegerHolder>", "maxId": "int", "mapS": "Map<MTDFragmentAST,Tuple>", "tree": "MTDFragmentAST", "id": "int", "repetitions": "IntegerHolder"}, "code": ["void", "function", "(", "String", "x", ")", "{", "tree", "=", "parseTree", "(", "x", ")", ";", "mapS", "=", "new", "HashMap", "<", "MTDFragmentAST", ",", "Tuple", ">", "(", ")", ";", "mapN", "=", "new", "HashMap", "<", "String", ",", "IntegerHolder", ">", "(", ")", ";", "decorate", "(", "tree", ",", "new", "IntegerHolder", "(", "0", ")", ")", ";", "}"], "memberFunctions": {"decorate": [["void", "MTDFragmentAST t", "IntegerHolder id"]], "distance": [["short", "OBShort other"], ["short", "FragmentAST a", "FragmentAST b"]], "update": [["int", "MTDFragmentAST current", "MTDFragmentAST current2", "boolean[] visited"]], "dn": [["int", "OBFragment other"]], "updateAux": [["int", "MTDFragmentAST current", "MTDFragmentAST current2", "boolean[] visited"]], "store": [["void", "TupleOutput out"]], "parseTree": [["MTDFragmentAST", "String x"]], "dnAux": [["int", "OBFragment other"]], "ds": [["int", "OBFragment other"], ["int", "MTDFragmentAST current", "OBFragment other", "boolean[] visited"]], "setTree": [["void", "MTDFragmentAST tree"]], "getTree": [["MTDFragmentAST"]], "size": [["int"]], "load": [["void", "TupleInput in"]], "hashCode": [["int"]], "equals": [["boolean", "final Object obj"]], "toString": [["String"], ["String"]], "mtd": [["short", "OBFragment other"]]}, "className": "OBFragment", "renamed": ["void", "function", "(", "String", "arg0", ")", "{", "tree", "=", "parseTree", "(", "arg0", ")", ";", "mapS", "=", "new", "HashMap", "<", "MTDFragmentAST", ",", "Tuple", ">", "(", ")", ";", "mapN", "=", "new", "HashMap", "<", "String", ",", "IntegerHolder", ">", "(", ")", ";", "decorate", "(", "tree", ",", "new", "IntegerHolder", "(", "0", ")", ")", ";", "}"], "nl": "Internal method that updates the Tree from the String", "nlToks": ["Internal", "method", "that", "updates", "the", "Tree", "from", "the", "String"], "path": "pombreda/furia-chan/tree/master/src/main/java/org/kit/furia/fragment/OBFragment.java", "idx": 1293}
{"memberVariables": {"mParseWhitelist": "boolean", "mRedirectionList": "THashMap<String,String>", "mHostsParserMatcher": "Matcher", "mWhitelist": "THashSet<String>", "mBlacklist": "THashSet<String>", "mHostsParserPattern": "Pattern", "mParseRedirections": "boolean"}, "code": ["void", "function", "(", "THashSet", "<", "String", ">", "blacklist", ")", "{", "mBlacklist", ".", "addAll", "(", "blacklist", ")", ";", "}"], "memberFunctions": {"addWhitelist": [["void", "THashSet<String> whitelist"]], "addRedirectionList": [["void", "THashMap<String,String> redirectionList"]], "getBlacklist": [["THashSet<String>"]], "getWhitelist": [["THashSet<String>"]], "getRedirectionList": [["THashMap<String,String>"]], "parse": [["void", "BufferedReader reader"]], "compileList": [["void"]]}, "className": "HostsParser", "renamed": ["void", "function", "(", "THashSet", "<", "String", ">", "arg0", ")", "{", "mBlacklist", ".", "addAll", "(", "arg0", ")", ";", "}"], "nl": "Add blacklist to this hosts file", "nlToks": ["Add", "blacklist", "to", "this", "hosts", "file"], "path": "0-kaladin/ad-away/tree/master/AdAway/src/main/java/org/adaway/util/HostsParser.java", "idx": 1294}
{"memberVariables": {"expDataUnitId": "BigDecimal", "dataUnitId": "BigDecimal", "createTimeStamp": "Timestamp", "actValue": "String", "errorCode": "String", "srcFileName": "String", "errorMsg": "String", "failedAttrib": "String", "expDataSetId": "BigDecimal", "regPclTestResult": "RegPCLTestResultEntity", "dataSetId": "BigDecimal", "id": "RegPCLTestResultDetailsEntityPK", "serialVersionUID=3309870439513279844L": "long", "expValue": "String"}, "code": ["BigDecimal", "function", "(", ")", "{", "return", "this", ".", "expDataSetId", ";", "}"], "memberFunctions": {"updateCreateTimeStamp": [["void"]], "setActValue": [["void", "String actValue"]], "getDataSetId": [["BigDecimal"]], "getId": [["RegPCLTestResultDetailsEntityPK"]], "setSrcFileName": [["void", "String srcFileName"]], "getRegPclTestResult": [["RegPCLTestResultEntity"]], "setExpValue": [["void", "String expValue"]], "getSrcFileName": [["String"]], "setErrorCode": [["void", "String errorCode"]], "getDataUnitId": [["BigDecimal"]], "setErrorMsg": [["void", "String errorMsg"]], "getErrorCode": [["String"]], "setDataUnitId": [["void", "BigDecimal dataUnitId"]], "setId": [["void", "RegPCLTestResultDetailsEntityPK id"]], "setFailedAttrib": [["void", "String failedAttrib"]], "getErrorMsg": [["String"]], "getActValue": [["String"]], "setRegPclTestResult": [["void", "RegPCLTestResultEntity regPclTestResult"]], "getExpValue": [["String"]], "setCreateTimeStamp": [["void", "Timestamp createTimeStamp"]], "getExpDataUnitId": [["BigDecimal"]], "getCreateTimeStamp": [["Timestamp"]], "getFailedAttrib": [["String"]], "setExpDataSetId": [["void", "BigDecimal expDataSetId"]], "setDataSetId": [["void", "BigDecimal dataSetId"]], "setExpDataUnitId": [["void", "BigDecimal expDataUnitId"]]}, "className": "RegPCLTestResultDetailsEntity", "renamed": ["BigDecimal", "function", "(", ")", "{", "return", "this", ".", "expDataSetId", ";", "}"], "nl": "Gets the exp data set id.", "nlToks": ["Gets", "the", "exp", "data", "set", "id", "."], "path": "pkesireddy/portico_fletcher/tree/master/FetcherTesterService/src/main/java/org/ithaka/cm/fetchertester/entity/RegPCLTestResultDetailsEntity.java", "idx": 1295}
{"memberVariables": {"lastModifiedTimeStamp": "Date", "feedId": "Long", "createdBy": "String", "fetcherStartTimeStamp": "Date", "createTimeStamp": "Date", "testId": "Long", "runId": "Long", "fetcherEndTimeStamp": "Date", "regTestResultDetailsLst": "List<TestResultDetailsDTO>", "outcome": "OutcomeType", "runStatus": "RunStatusType", "errorMsg": "String"}, "code": ["void", "function", "(", "String", "errorMsg", ")", "{", "this", ".", "errorMsg", "=", "errorMsg", ";", "}"], "memberFunctions": {"setLastModifiedTimeStamp": [["void", "Date lastModifiedTimeStamp"]], "getFetcherEndTimeStamp": [["Date"]], "setFeedId": [["void", "Long feedId"]], "setFetcherStartTimeStamp": [["void", "Date fetcherStartTimeStamp"]], "getLastModifiedTimeStamp": [["Date"]], "getOutcome": [["OutcomeType"]], "getRunId": [["Long"]], "getRegTestResultDetailsLst": [["List<TestResultDetailsDTO>"]], "getFeedId": [["Long"]], "setTestId": [["void", "Long testId"]], "getTestId": [["Long"]], "getFetcherStartTimeStamp": [["Date"]], "setRunId": [["void", "Long runId"]], "setRegTestResultDetailsLst": [["void", "List<TestResultDetailsDTO> regTestResultDetailsLst"]], "setFetcherEndTimeStamp": [["void", "Date fetcherEndTimeStamp"]], "setCreateTimeStamp": [["void", "Date createTimeStamp"]], "setCreatedBy": [["void", "String createdBy"]], "getRunStatus": [["RunStatusType"]], "getCreateTimeStamp": [["Date"]], "setOutcome": [["void", "OutcomeType outcome"]], "toString": [["String"]], "getCreatedBy": [["String"]], "getErrorMsg": [["String"]], "setRunStatus": [["void", "RunStatusType runStatus"]]}, "className": "TestResultDTO", "renamed": ["void", "function", "(", "String", "arg0", ")", "{", "this", ".", "errorMsg", "=", "arg0", ";", "}"], "nl": "Sets the exp msg.", "nlToks": ["Sets", "the", "exp", "msg", "."], "path": "pkesireddy/portico_fletcher/tree/master/FetcherTesterService/src/main/java/org/ithaka/cm/fetchertester/model/TestResultDTO.java", "idx": 1297}
{"memberVariables": {"HAS_REMOTE_CONTROL_APIS=Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH": "boolean", "mActualMetadataEditor": "Object", "METADATA_KEY_ARTWORK=100": "int", "mActualRemoteControlClient": "Object"}, "code": ["MetadataEditorCompat", "function", "(", "int", "key", ",", "Bitmap", "bitmap", ")", "{", "if", "(", "HAS_REMOTE_CONTROL_APIS", ")", "{", "(", "(", "RemoteControlClient", ".", "MetadataEditor", ")", "mActualMetadataEditor", ")", ".", "putBitmap", "(", "key", ",", "bitmap", ")", ";", "}", "return", "this", ";", "}"], "memberFunctions": {"setPlaybackState": [["void", "int state"]], "apply": [["void"]], "removeFromMediaRouter": [["void", "MediaRouter router"]], "putString": [["MetadataEditorCompat", "int key", "String value"]], "clear": [["void"]], "addToMediaRouter": [["void", "MediaRouter router"]], "getActualRemoteControlClientObject": [["Object"]], "putLong": [["MetadataEditorCompat", "int key", "long value"]], "editMetadata": [["MetadataEditorCompat", "boolean startEmpty"]], "setTransportControlFlags": [["void", "int transportControlFlags"]]}, "className": "RemoteControlClientCompat", "renamed": ["MetadataEditorCompat", "function", "(", "int", "arg0", ",", "Bitmap", "arg1", ")", "{", "if", "(", "HAS_REMOTE_CONTROL_APIS", ")", "{", "(", "(", "RemoteControlClient", ".", "MetadataEditor", ")", "mActualMetadataEditor", ")", ".", "putBitmap", "(", "arg0", ",", "arg1", ")", ";", "}", "return", "this", ";", "}"], "nl": "Sets the album / artwork picture to be displayed on the remote control.", "nlToks": ["Sets", "the", "album", "/", "artwork", "picture", "to", "be", "displayed", "on", "the", "remote", "control", "."], "path": "phpeng-ms/CastCompanionLibrary-android/tree/master/src/com/google/android/libraries/cast/companionlibrary/remotecontrol/RemoteControlClientCompat.java", "idx": 1298}
{"memberVariables": {"WORKFLOW=\"oozie.el.workflow.bean\"": "String", "ACTION_TRACKER_URI=\"action.tracker.uri\"": "String", "LAST_ACTION_IN_ERROR=\"oozie.el.last.action.in.error\"": "String", "ACTION_PROTO_CONF=\"oozie.el.action.proto.conf\"": "String", "ACTION_DATA=\"action.data\"": "String", "ACTION_EXTERNAL_STATUS=\"action.external.status\"": "String", "ACTION_ERROR_CODE=\"action.error.code\"": "String", "ACTION_EXTERNAL_ID=\"action.external.id\"": "String", "ACTION=\"oozie.el.action.bean\"": "String", "ACTION_ERROR_MESSAGE=\"action.error.message\"": "String"}, "code": ["String", "function", "(", "String", "actionName", ")", "{", "return", "getWorkflow", "(", ")", ".", "getWorkflowInstance", "(", ")", ".", "getVar", "(", "actionName", "+", "WorkflowInstance", ".", "NODE_VAR_SEPARATOR", "+", "ACTION_EXTERNAL_ID", ")", ";", "}"], "memberFunctions": {"wf_run": [["int"]], "getWorkflow": [["WorkflowJobBean"]], "getActionVar": [["String", "String actionName", "String varName"]], "wf_callback": [["String", "String externalStatusVar"]], "setActionInfo": [["void", "WorkflowInstance workflowInstance", "WorkflowAction action"]], "wf_conf": [["String", "String property"]], "wf_actionExternalStatus": [["String", "String actionName"]], "getAction": [["WorkflowActionBean"]], "getProtoActionConf": [["Configuration"]], "wf_group": [["String"]], "wf_transition": [["String", "String actionName"]], "wf_lastErrorNode": [["String"]], "wf_appPath": [["String"]], "wf_errorCode": [["String", "String actionName"]], "configureEvaluator": [["void", "ELEvaluator evaluator", "WorkflowJobBean workflow", "WorkflowActionBean action"]], "wf_id": [["String"]], "wf_actionTrackerUri": [["String", "String actionName"]], "wf_actionData": [["Map<String,String>", "String actionName"]], "wf_name": [["String"]], "wf_errorMessage": [["String", "String actionName"]], "wf_user": [["String"]]}, "className": "DagELFunctions", "renamed": ["String", "function", "(", "String", "arg0", ")", "{", "return", "getWorkflow", "(", ")", ".", "getWorkflowInstance", "(", ")", ".", "getVar", "(", "arg0", "+", "WorkflowInstance", ".", "NODE_VAR_SEPARATOR", "+", "ACTION_EXTERNAL_ID", ")", ";", "}"], "nl": "Return the external ID of an action.", "nlToks": ["Return", "the", "external", "ID", "of", "an", "action", "."], "path": "pingpangkuangmo/oozie/tree/master/core/src/main/java/org/apache/oozie/DagELFunctions.java", "idx": 1300}
{"memberVariables": {"URL_SAVED=\"configuration.save.url\"": "String", "FILE_SAVED=\"configuration.save.file\"": "String", "URL_LOADED=\"configuration.load.url\"": "String", "config=getFactory().getConfigurationHandler()": "ConfigurationHandler", "FILE_LOADED=\"configuration.load.file\"": "String"}, "code": ["String", "function", "(", "ConfigurationKey", "key", ")", "{", "return", "getString", "(", "key", ",", "\"\"", ")", ";", "}"], "memberFunctions": {"save": [["boolean"], ["boolean", "boolean force"]], "setInteger": [["void", "ConfigurationKey key", "int newValue"]], "getDouble": [["double", "ConfigurationKey key", "double defaultValue"], ["double", "ConfigurationKey key"]], "getInteger": [["int", "ConfigurationKey key"], ["int", "ConfigurationKey key", "int defaultValue"]], "removeListener": [["void", "PropertyChangeListener pcl"], ["void", "ConfigurationKey key", "PropertyChangeListener pcl"]], "getFactory": [["IConfigurationFactory"]], "setDouble": [["void", "ConfigurationKey key", "double newValue"]], "makeKey": [["ConfigurationKey", "String k1"], ["ConfigurationKey", "ConfigurationKey ck", "String k1"], ["ConfigurationKey", "String k1", "String k2"], ["ConfigurationKey", "String k1", "String k2", "String k3"], ["ConfigurationKey", "String k1", "String k2", "String k3", "String k4"], ["ConfigurationKey", "String k1", "String k2", "String k3", "String k4", "String k5"]], "setString": [["void", "ConfigurationKey key", "String newValue"]], "load": [["boolean"], ["boolean", "File file"], ["boolean", "URL url"]], "removeKey": [["void", "ConfigurationKey key"]], "getConfigurationHandler": [["ConfigurationHandler"]], "getBoolean": [["boolean", "ConfigurationKey key"], ["boolean", "ConfigurationKey key", "boolean defaultValue"]], "setBoolean": [["void", "ConfigurationKey key", "boolean newValue"]], "addListener": [["void", "PropertyChangeListener pcl"], ["void", "ConfigurationKey key", "PropertyChangeListener pcl"]]}, "className": "Configuration", "renamed": ["String", "function", "(", "ConfigurationKey", "arg0", ")", "{", "return", "getString", "(", "arg0", ",", "\"srini_string\"", ")", ";", "}"], "nl": "Returns the string value of a configuration property.", "nlToks": ["Returns", "the", "string", "value", "of", "a", "configuration", "property", "."], "path": "pichiliani/CoArgoUML/tree/master/v0.24/fonte/src/argouml-app/src/org/argouml/configuration/Configuration.java", "idx": 1301}
{"memberVariables": {"valueLen": "int", "format": "PackFormatInputStream", "valueOff": "int", "value": "byte[]"}, "code": ["int", "function", "(", ")", "{", "int", "itemLen", "=", "0", ";", "if", "(", "format", ".", "available", "(", ")", "==", "1", ")", "{", "itemLen", "=", "valueLen", "-", "valueOff", ";", "}", "else", "{", "itemLen", "=", "unpackInt", "(", "false", ")", ";", "}", "return", "itemLen", ";", "}"], "memberFunctions": {"getByteArrayInternal": [["void", "int itemLen", "byte[] dest", "int off", "int destLen"]], "getByte": [["byte"]], "getShort": [["short"]], "getString": [["String"]], "getLong": [["long"]], "getValue": [["byte[]"]], "getInt": [["int"]], "unpackInt": [["int", "boolean signed"]], "unpackShort": [["short", "boolean signed"]], "getByteArray": [["void", "byte[] dest"], ["void", "byte[] dest", "int off", "int len"], ["byte[]"]], "getFormat": [["String"]], "getRecord": [["long"]], "unpackLong": [["long", "boolean signed"]]}, "className": "PackInputStream", "renamed": ["int", "function", "(", ")", "{", "int", "loc0", "=", "0", ";", "if", "(", "format", ".", "available", "(", ")", "==", "1", ")", "{", "loc0", "=", "valueLen", "-", "valueOff", ";", "}", "else", "{", "loc0", "=", "unpackInt", "(", "false", ")", ";", "}", "return", "loc0", ";", "}"], "nl": "Finds the length of a byte array. Either by decoding the length from the format or using the remaining size of the stream.", "nlToks": ["Finds", "the", "length", "of", "a", "byte", "array", ".", "Either", "by", "decoding", "the", "length", "from", "the", "format", "or", "using", "the", "remaining", "size", "of", "the", "stream", "."], "path": "pgunn/wiredtiger/tree/master/lang/java/src/com/wiredtiger/db/PackInputStream.java", "idx": 1302}
{"memberVariables": {"numOfClasses=3": "int"}, "code": ["String", "function", "(", "int", "i", ")", "{", "if", "(", "i", "==", "0", ")", "{", "return", "\"teens\"", ";", "}", "else", "if", "(", "i", "==", "1", ")", "{", "return", "\"twenties\"", ";", "}", "else", "{", "return", "\"thirtees\"", ";", "}", "}"], "memberFunctions": {"getClassWordCount": [["int", "String className", "NaiveBayesTrain naiveBayes"]], "testNaiveBayes": [["float", "HashMap<String,HashMap<String,Integer>> naiveBayesMap", "File cleanxmlfoldertest", "NaiveBayesTrain naiveBayes"]], "calculateProductOfProbGivenClass": [["double", "ArrayList<String> posts", "String className", "HashMap<String,HashMap<String,Integer>> naiveBayesMap", "NaiveBayesTrain naiveBayes"]], "findProbFromNaiveBayesMap": [["double", "String word", "HashMap<String,HashMap<String,Integer>> naiveBayesMap", "NaiveBayesTrain naiveBayes", "String className"]], "isPersonCorrectlyClassified": [["boolean", "File fileEntry", "String fileName", "HashMap<String,HashMap<String,Integer>> naiveBayesMap", "NaiveBayesTrain naiveBayes"]], "predictClassFromBlogs": [["String", "PersonBlogs pbBlogs", "HashMap<String,HashMap<String,Integer>> naiveBayesMap", "NaiveBayesTrain naiveBayes"]]}, "className": "NaiveBayesTest", "renamed": ["String", "function", "(", "int", "arg0", ")", "{", "if", "(", "arg0", "==", "0", ")", "{", "return", "\"srini_string\"", ";", "}", "else", "if", "(", "arg0", "==", "1", ")", "{", "return", "\"srini_string\"", ";", "}", "else", "{", "return", "\"srini_string\"", ";", "}", "}"], "nl": "returns the class name corresponding to a number", "nlToks": ["returns", "the", "class", "name", "corresponding", "to", "a", "number"], "path": "prap19/Sem3_SourceCode/tree/master/AgeAttribution/src/edu/nlp/ageattr/Baseline/NaiveBayesTest.java", "idx": 1304}
{"memberVariables": {"hdm": "HDMSentence", "EXAMPLE=\"$GPHDM,90.0,M\"": "String"}, "code": ["void", "function", "(", ")", "{", "hdm", ".", "setHeading", "(", "123.45", ")", ";", "assertEquals", "(", "123.5", ",", "hdm", ".", "getHeading", "(", ")", ",", "0.1", ")", ";", "}"], "memberFunctions": {"testSetHeadingTooHigh": [["void"]], "testIsTrue": [["void"]], "setUp": [["void"]], "testGetHeading": [["void"]], "testSetNegativeHeading": [["void"]], "testConstructor": [["void"]]}, "className": "HDMTest", "renamed": ["void", "function", "(", ")", "{", "hdm", ".", "setHeading", "(", "123.45", ")", ";", "assertEquals", "(", "123.5", ",", "hdm", ".", "getHeading", "(", ")", ",", "0.1", ")", ";", "}"], "nl": "Test method for {@link net.sf.marineapi.nmea.parser.HDMParser#setHeading(double)}.", "nlToks": ["Test", "method", "for", "-LCB-", "@link", "net.sf.marineapi.nmea.parser.HDMParser", "#setHeading", "-LRB-", "double", "-RRB-", "-RCB-", "."], "path": "pkoziol/marine-api/tree/master/src/test/java/net/sf/marineapi/nmea/parser/HDMTest.java", "idx": 1305}
{"memberVariables": {"circularArray": "List<T>", "max": "int", "position=0": "int", "haveOverflow=false": "boolean"}, "code": ["void", "function", "(", "T", "entry", ")", "{", "if", "(", "position", ">=", "max", ")", "{", "position", "=", "0", ";", "haveOverflow", "=", "true", ";", "}", "if", "(", "circularArray", ".", "size", "(", ")", ">", "position", ")", "{", "circularArray", ".", "remove", "(", "position", ")", ";", "}", "circularArray", ".", "add", "(", "position", ",", "entry", ")", ";", "position", "++", ";", "}"], "memberFunctions": {"size": [["int"]], "toString": [["String"]]}, "className": "CircularArray", "renamed": ["void", "function", "(", "T", "arg0", ")", "{", "if", "(", "position", ">=", "max", ")", "{", "position", "=", "0", ";", "haveOverflow", "=", "true", ";", "}", "if", "(", "circularArray", ".", "size", "(", ")", ">", "position", ")", "{", "circularArray", ".", "remove", "(", "position", ")", ";", "}", "circularArray", ".", "add", "(", "position", ",", "arg0", ")", ";", "position", "++", ";", "}"], "nl": "add an entry", "nlToks": ["add", "an", "entry"], "path": "adamfisk/littleshoot-client/tree/master/common/udt/src/main/java/udt/util/CircularArray.java", "idx": 1307}
{"memberVariables": {"mClientSupplier=new Supplier<String>(){\n  @Override public String get(){\n    return getUri();\n  }\n}\n": "Supplier<String>", "mJournalFolder": "String", "mClientPool=new ClientPool(mClientSupplier)": "ClientPool", "mAlluxioMaster": "AlluxioMaster", "mMasterThread": "Thread", "LOG=LoggerFactory.getLogger(Constants.LOGGER_TYPE)": "Logger", "mHostname": "String"}, "code": ["void", "function", "(", ")", "{", "mMasterThread", ".", "start", "(", ")", ";", "}"], "memberFunctions": {"getInternalMaster": [["AlluxioMaster"]], "getRPCLocalPort": [["int"]], "getWebBindHost": [["String"]], "uniquePath": [["String"]], "getRPCBindHost": [["String"]], "getClient": [["FileSystem"]], "kill": [["void"]], "getJournalFolder": [["String"]], "stop": [["void"]], "getWebLocalPort": [["int"]], "get": [["String"]], "isServing": [["boolean"]], "create": [["LocalAlluxioMaster"], ["LocalAlluxioMaster", "final String workDirectory"]], "getAddress": [["InetSocketAddress"]], "clearClients": [["void"]], "getUri": [["String"]]}, "className": "LocalAlluxioMaster", "renamed": ["void", "function", "(", ")", "{", "mMasterThread", ".", "start", "(", ")", ";", "}"], "nl": "Starts the master.", "nlToks": ["Starts", "the", "master", "."], "path": "poemlin/alluxio/tree/master/minicluster/src/main/java/alluxio/master/LocalAlluxioMaster.java", "idx": 1308}
{"memberVariables": {"identifier": "String", "wsseValueType": "String", "useKeyIdentifier": "boolean", "useDirectReference": "boolean", "wsse11TokenType": "String"}, "code": ["void", "function", "(", "String", "identifier", ")", "{", "this", ".", "identifier", "=", "identifier", ";", "}"], "memberFunctions": {"setWsse11TokenType": [["void", "String wsse11TokenType"]], "setWsseValueType": [["void", "String wsseValueType"]], "getWsse11TokenType": [["String"]], "getIdentifier": [["String"]], "setUseDirectReference": [["void", "boolean useDirectReference"]], "isUseKeyIdentifier": [["boolean"]], "getWsseValueType": [["String"]], "isUseDirectReference": [["boolean"]], "setUseKeyIdentifier": [["void", "boolean useKeyIdentifier"]]}, "className": "TokenReference", "renamed": ["void", "function", "(", "String", "arg0", ")", "{", "this", ".", "identifier", "=", "arg0", ";", "}"], "nl": "Set the identifier associated with this token", "nlToks": ["Set", "the", "identifier", "associated", "with", "this", "token"], "path": "primesign/cxf/tree/master/services/sts/sts-core/src/main/java/org/apache/cxf/sts/token/provider/TokenReference.java", "idx": 1309}
{"memberVariables": {}, "code": ["void", "function", "(", "byte", "[", "]", "buf", ",", "int", "pos", ",", "int", "len", ")", "{", "if", "(", "pos", "+", "len", ">", "buf", ".", "length", ")", "{", "throw", "new", "ArrayIndexOutOfBoundsException", "(", ")", ";", "}", "}"], "memberFunctions": {"writeInt": [["void", "byte[] buf", "int pos", "int v"], ["void", "ByteBuffer buf", "int pos", "int v"], ["void", "OutputStream out", "int v"]], "writeByte": [["void", "byte[] buf", "int pos", "byte v"], ["void", "ByteBuffer buf", "int pos", "byte v"], ["void", "OutputStream out", "byte v"]], "writeLong": [["void", "byte[] buf", "int pos", "long v"], ["void", "OutputStream out", "long v"]], "readLong": [["long", "byte[] buf", "int pos"]], "readShort": [["short", "byte[] buf", "int pos"]], "writeShort": [["void", "byte[] buf", "int pos", "short v"], ["void", "OutputStream out", "short v"]], "readByte": [["byte", "byte[] buf", "int pos"], ["byte", "ByteBuffer buf", "int pos"]], "readInt": [["int", "byte[] buf", "int pos"], ["int", "ByteBuffer buf", "int pos"]]}, "className": "ByteIOUtils", "renamed": ["void", "function", "(", "byte", "[", "]", "arg0", ",", "int", "arg1", ",", "int", "arg2", ")", "{", "if", "(", "arg1", "+", "arg2", ">", "arg0", ".", "length", ")", "{", "throw", "new", "ArrayIndexOutOfBoundsException", "(", ")", ";", "}", "}"], "nl": "Ensures that the given buffer contains at least the given number of bytes after the given offset.", "nlToks": ["Ensures", "that", "the", "given", "buffer", "contains", "at", "least", "the", "given", "number", "of", "bytes", "after", "the", "given", "offset", "."], "path": "poemlin/alluxio/tree/master/core/common/src/main/java/alluxio/util/io/ByteIOUtils.java", "idx": 1310}
{"memberVariables": {"mClientRWLock": "ClientRWLock", "mReadLock": "Lock", "mWriteLock": "Lock"}, "code": ["void", "function", "(", ")", "{", "mWriteLock", ".", "lock", "(", ")", ";", "Assert", ".", "assertFalse", "(", "mWriteLock", ".", "tryLock", "(", ")", ")", ";", "}"], "memberFunctions": {"unlock": [["void"]], "lockInterruptibly": [["void"]], "notSameLock": [["void"]], "before": [["void"]], "referenceCounting": [["void"]]}, "className": "ClientRWLockTest", "renamed": ["void", "function", "(", ")", "{", "mWriteLock", ".", "lock", "(", ")", ";", "Assert", ".", "assertFalse", "(", "mWriteLock", ".", "tryLock", "(", ")", ")", ";", "}"], "nl": "Tests the  {@link ClientRWLock#tryLock()} method.", "nlToks": ["Tests", "the", "-LCB-", "@link", "ClientRWLock", "#tryLock", "-LRB-", "-RRB-", "-RCB-", "method", "."], "path": "poemlin/alluxio/tree/master/core/server/src/test/java/alluxio/worker/block/ClientRWLockTest.java", "idx": 1311}
{"memberVariables": {"lastModifiedTimeStamp": "Date", "feedId": "Long", "createdBy": "String", "fetcherStartTimeStamp": "Date", "createTimeStamp": "Date", "testId": "Long", "runId": "Long", "fetcherEndTimeStamp": "Date", "regTestResultDetailsLst": "List<TestResultDetailsDTO>", "outcome": "OutcomeType", "runStatus": "RunStatusType", "errorMsg": "String"}, "code": ["Long", "function", "(", ")", "{", "return", "testId", ";", "}"], "memberFunctions": {"setLastModifiedTimeStamp": [["void", "Date lastModifiedTimeStamp"]], "getFetcherEndTimeStamp": [["Date"]], "setFeedId": [["void", "Long feedId"]], "setFetcherStartTimeStamp": [["void", "Date fetcherStartTimeStamp"]], "getLastModifiedTimeStamp": [["Date"]], "getOutcome": [["OutcomeType"]], "getRunId": [["Long"]], "getRegTestResultDetailsLst": [["List<TestResultDetailsDTO>"]], "getFeedId": [["Long"]], "setTestId": [["void", "Long testId"]], "getFetcherStartTimeStamp": [["Date"]], "setRunId": [["void", "Long runId"]], "setRegTestResultDetailsLst": [["void", "List<TestResultDetailsDTO> regTestResultDetailsLst"]], "setErrorMsg": [["void", "String errorMsg"]], "setFetcherEndTimeStamp": [["void", "Date fetcherEndTimeStamp"]], "setCreateTimeStamp": [["void", "Date createTimeStamp"]], "setCreatedBy": [["void", "String createdBy"]], "getRunStatus": [["RunStatusType"]], "getCreateTimeStamp": [["Date"]], "setOutcome": [["void", "OutcomeType outcome"]], "toString": [["String"]], "getCreatedBy": [["String"]], "getErrorMsg": [["String"]], "setRunStatus": [["void", "RunStatusType runStatus"]]}, "className": "TestResultDTO", "renamed": ["Long", "function", "(", ")", "{", "return", "testId", ";", "}"], "nl": "Gets the test id.", "nlToks": ["Gets", "the", "test", "id", "."], "path": "pkesireddy/portico_fletcher/tree/master/FetcherTesterService/src/main/java/org/ithaka/cm/fetchertester/model/TestResultDTO.java", "idx": 1315}
{"memberVariables": {"log=new ArrayList<String>()": "List<String>"}, "code": ["List", "<", "String", ">", "function", "(", ")", "{", "return", "log", ";", "}"], "memberFunctions": {"clean": [["void"]], "representation": [["String"]], "append": [["void", "String message"]]}, "className": "WeaknessLog", "renamed": ["List", "<", "String", ">", "function", "(", ")", "{", "return", "log", ";", "}"], "nl": "Returns the entries as a List.", "nlToks": ["Returns", "the", "entries", "as", "a", "List", "."], "path": "0xwindows/WS-Attacker/tree/master/libs/Signature_Wrapping_Library/src/main/java/wsattacker/library/signatureWrapping/xpath/weakness/util/WeaknessLog.java", "idx": 1316}
{"memberVariables": {"EXAMPLE=\"$GPRMC,120044.567,A,6011.552,N,02501.941,E,000.0,360.0,160705,006.1,E,A*0B\"": "String", "rmc": "RMCParser", "empty": "RMCParser"}, "code": ["void", "function", "(", ")", "{", "assertEquals", "(", "-", "6.1", ",", "rmc", ".", "getVariation", "(", ")", ",", "0.001", ")", ";", "}"], "memberFunctions": {"testSetFaaModeWhenOmitted": [["void"]], "testSetDirectionOfVariationWithInvalidDirection": [["void"]], "testGetCorrectedCourse": [["void"]], "testGetDataStatus": [["void"]], "testConstructor": [["void"]], "testGetTime": [["void"]], "testSetCourse": [["void"]], "testSetFaaMode": [["void"]], "testSetVariation": [["void"]], "setUp": [["void"]], "testGetMonth": [["void"]], "testGetCourse": [["void"]], "testSetDate": [["void"]], "testGetYear": [["void"]], "testSetDataStatus": [["void"]], "testGetDirectionOfVariation": [["void"]], "testGetDate": [["void"]], "testSetPosition": [["void"]], "testGetPosition": [["void"]], "testSetDirectionOfVariation": [["void"]], "testSetTime": [["void"]], "testGetDay": [["void"]], "testGetSpeed": [["void"]], "testGetFaaMode": [["void"]], "testSetSpeed": [["void"]]}, "className": "RMCTest", "renamed": ["void", "function", "(", ")", "{", "assertEquals", "(", "-", "6.1", ",", "rmc", ".", "getVariation", "(", ")", ",", "0.001", ")", ";", "}"], "nl": "Test method for {@link net.sf.marineapi.nmea.parser.RMCParser#getVariation()} .", "nlToks": ["Test", "method", "for", "-LCB-", "@link", "net.sf.marineapi.nmea.parser.RMCParser", "#getVariation", "-LRB-", "-RRB-", "-RCB-", "."], "path": "pkoziol/marine-api/tree/master/src/test/java/net/sf/marineapi/nmea/parser/RMCTest.java", "idx": 1317}
{"memberVariables": {"MIN=1000 * 60L": "long", "ONEYEAR=ONEDAY * 365L": "long", "timezone": "TimeZone", "translation": "ResourceBundle", "ONEHOUR=HALFHOUR * 2": "long", "HALFHOUR=MIN * 30L": "long", "ONEDAY=ONEHOUR * 24L": "long"}, "code": ["int", "function", "(", "Date", "date", ",", "boolean", "roundup", ")", "{", "return", "minutesAgo", "(", "date", ",", "System", ".", "currentTimeMillis", "(", ")", ",", "roundup", ")", ";", "}"], "memberFunctions": {"duration": [["String", "int days"]], "yesterday": [["String"]], "daysAgo": [["int", "Date date"]], "timeAgo": [["String", "Date date"], ["String", "Date date", "boolean css"]], "isYesterday": [["boolean", "Date date", "TimeZone timezone"]], "today": [["String"]], "isToday": [["boolean", "Date date", "TimeZone timezone"]], "hoursAgo": [["int", "Date date", "boolean roundup"]], "inFuture": [["String", "Date date"]], "convertFrequencyToMinutes": [["int", "String frequency"]], "translate": [["String", "String key", "String defaultValue"], ["String", "int val", "String key", "String defaultPattern"]], "timeAgoCss": [["String", "Date date"]]}, "className": "TimeUtils", "renamed": ["int", "function", "(", "Date", "arg0", ",", "boolean", "arg1", ")", "{", "return", "minutesAgo", "(", "arg0", ",", "System", ".", "currentTimeMillis", "(", ")", ",", "arg1", ")", ";", "}"], "nl": "Return the difference in minutes between now and the date.", "nlToks": ["Return", "the", "difference", "in", "minutes", "between", "now", "and", "the", "date", "."], "path": "pombreda/gitblit/tree/master/src/main/java/com/gitblit/utils/TimeUtils.java", "idx": 1318}
{"memberVariables": {"cachedBuffer=null": "byte[]"}, "code": ["File", "function", "(", "Context", "context", ")", "{", "File", "libsDirectory", "=", "getLibsDirectory", "(", "context", ")", ";", "if", "(", "!", "libsDirectory", ".", "isDirectory", "(", ")", "&&", "!", "libsDirectory", ".", "mkdirs", "(", ")", ")", "{", "throw", "new", "RuntimeException", "(", "\"could not create libs directory\"", ")", ";", "}", "return", "libsDirectory", ";", "}"], "memberFunctions": {"reliablyCopyExecutable": [["void", "InputStream is", "File destination", "long expectedSize", "long time"]], "deleteOrThrow": [["void", "File file"]], "lockLibsDirectory": [["FileLocker", "Context context"]], "freeCopyBuffer": [["void"]], "getLibsDirectory": [["File", "Context context"]], "findAbiScore": [["int", "String[] supportedAbis", "String abi"]], "dumbDeleteRecrusive": [["void", "File file"]], "getSupportedAbis": [["String[]"], ["String[]"]], "fallocateIfSupported": [["void", "FileDescriptor fd", "long length"]], "fallocate": [["void", "FileDescriptor fd", "long length"]]}, "className": "SysUtil", "renamed": ["File", "function", "(", "Context", "arg0", ")", "{", "File", "loc0", "=", "getLibsDirectory", "(", "arg0", ")", ";", "if", "(", "!", "loc0", ".", "isDirectory", "(", ")", "&&", "!", "loc0", ".", "mkdirs", "(", ")", ")", "{", "throw", "new", "RuntimeException", "(", "\"srini_string\"", ")", ";", "}", "return", "loc0", ";", "}"], "nl": "Return the directory into which we put our self-extracted native libraries and make sure it exists.", "nlToks": ["Return", "the", "directory", "into", "which", "we", "put", "our", "self-extracted", "native", "libraries", "and", "make", "sure", "it", "exists", "."], "path": "plrthink/react-native/tree/master/ReactAndroid/src/main/java/com/facebook/soloader/SysUtil.java", "idx": 1319}
{"memberVariables": {"extensionsDenied=new HashMap<ResourceTypeHandler,Set<String>>()": "Map<ResourceTypeHandler,Set<String>>", "extensionsAllowed=new HashMap<ResourceTypeHandler,Set<String>>()": "Map<ResourceTypeHandler,Set<String>>"}, "code": ["Set", "<", "String", ">", "function", "(", "final", "ResourceTypeHandler", "type", ")", "{", "return", "extensionsDenied", ".", "get", "(", "type", ")", ";", "}"], "memberFunctions": {"isAllowed": [["boolean", "final ResourceTypeHandler type", "final String extension"]], "setExtensionsAllowed": [["void", "final ResourceTypeHandler type", "final String extensionsList"]], "setExtensionsDenied": [["void", "final ResourceTypeHandler type", "final String extensionsList"]], "getExtensionsAllowed": [["Set<String>", "final ResourceTypeHandler type"]]}, "className": "ExtensionsHandler", "renamed": ["Set", "<", "String", ">", "function", "(", "final", "ResourceTypeHandler", "arg0", ")", "{", "return", "extensionsDenied", ".", "get", "(", "arg0", ")", ";", "}"], "nl": "Getter for the denied extensions of a file type.", "nlToks": ["Getter", "for", "the", "denied", "extensions", "of", "a", "file", "type", "."], "path": "pobing/company/tree/master/maxcomy/src/net/fckeditor/handlers/ExtensionsHandler.java", "idx": 1320}
{"memberVariables": {"OFFSET=22": "long", "TEMP_UFS_FILE_ID=11": "long", "mBuffer=null": "ByteBuf", "mThrown=ExpectedException.none()": "ExpectedException", "LENGTH=0": "long", "STATUS=RPCResponse.Status.SUCCESS": "RPCResponse.Status"}, "code": ["void", "function", "(", ")", "{", "RPCFileReadResponse", "resp", "=", "new", "RPCFileReadResponse", "(", "TEMP_UFS_FILE_ID", ",", "OFFSET", ",", "LENGTH", ",", "null", ",", "STATUS", ")", ";", "int", "encodedLength", "=", "resp", ".", "getEncodedLength", "(", ")", ";", "resp", ".", "encode", "(", "mBuffer", ")", ";", "Assert", ".", "assertEquals", "(", "encodedLength", ",", "mBuffer", ".", "readableBytes", "(", ")", ")", ";", "}"], "memberFunctions": {"encodeDecode": [["void"]], "before": [["void"]], "getPayloadDataBuffer": [["void"]], "assertValid": [["void", "long tempUfsFileId", "long offset", "long length", "RPCResponse.Status status", "RPCFileReadResponse resp"], ["void", "RPCFileReadResponse resp"]], "createErrorResponse": [["void"]], "validate": [["void"]]}, "className": "RPCFileReadResponseTest", "renamed": ["void", "function", "(", ")", "{", "RPCFileReadResponse", "loc0", "=", "new", "RPCFileReadResponse", "(", "TEMP_UFS_FILE_ID", ",", "OFFSET", ",", "LENGTH", ",", "null", ",", "STATUS", ")", ";", "int", "loc1", "=", "loc0", ".", "getEncodedLength", "(", ")", ";", "loc0", ".", "encode", "(", "mBuffer", ")", ";", "Assert", ".", "assertEquals", "(", "loc1", ",", "mBuffer", ".", "readableBytes", "(", ")", ")", ";", "}"], "nl": "Tests the  {@link RPCBlockReadResponse#getEncodedLength()} method.", "nlToks": ["Tests", "the", "-LCB-", "@link", "RPCBlockReadResponse", "#getEncodedLength", "-LRB-", "-RRB-", "-RCB-", "method", "."], "path": "poemlin/alluxio/tree/master/core/server/src/test/java/alluxio/network/protocol/RPCFileReadResponseTest.java", "idx": 1321}
{"memberVariables": {}, "code": ["String", "function", "(", "String", "template", ",", "Object", "...", "args", ")", "{", "return", "String", ".", "format", "(", "Locale", ".", "ROOT", ",", "template", ",", "args", ")", ";", "}"], "memberFunctions": {"listListIteratorTesterNumIterations": [["int"]], "collectionIteratorTesterNumIterations": [["int"]]}, "className": "Platform", "renamed": ["String", "function", "(", "String", "arg0", ",", "Object", "...", "arg1", ")", "{", "return", "String", ".", "format", "(", "Locale", ".", "ROOT", ",", "arg0", ",", "arg1", ")", ";", "}"], "nl": "Format the template with args, only supports the placeholder {@code %s}.", "nlToks": ["Format", "the", "template", "with", "args", ",", "only", "supports", "the", "placeholder", "-LCB-", "@code", "%", "s", "-RCB-", "."], "path": "hazendaz/guava/tree/master/guava-testlib/src/com/google/common/collect/testing/testers/Platform.java", "idx": 1324}
{"memberVariables": {}, "code": ["List", "<", "T", ">", "function", "(", "T", "o1", ",", "T", "o2", ",", "T", "o3", ")", "{", "List", "<", "T", ">", "l", "=", "new", "ArrayList", "<", ">", "(", "3", ")", ";", "l", ".", "add", "(", "o1", ")", ";", "l", ".", "add", "(", "o2", ")", ";", "l", ".", "add", "(", "o3", ")", ";", "return", "l", ";", "}"], "memberFunctions": {"add": [["List<T>", "List<T> l", "T o"]], "firstOrElse": [["T", "Collection<U> l", "V alt"]], "equals": [["boolean", "Collection<T> a", "Collection<U> b"]], "nonNullList": [["List<T>", "List<T> l"]], "map": [["List<U>", "List<T> l", "Transformation<T,U> t"]], "pairs": [["Iterator<Pair<T,T>>", "Collection<T> l"]]}, "className": "CollectionUtil", "renamed": ["List", "<", "T", ">", "function", "(", "T", "arg0", ",", "T", "arg1", ",", "T", "arg2", ")", "{", "List", "<", "T", ">", "loc0", "=", "new", "ArrayList", "<", ">", "(", "3", ")", ";", "loc0", ".", "add", "(", "arg0", ")", ";", "loc0", ".", "add", "(", "arg1", ")", ";", "loc0", ".", "add", "(", "arg2", ")", ";", "return", "loc0", ";", "}"], "nl": "Return a list containing  {@code o1}, ...,  {@code o3}.", "nlToks": ["Return", "a", "list", "containing", "-LCB-", "@code", "o1", "-RCB-", ",", "...", ",", "-LCB-", "@code", "o3", "-RCB-", "."], "path": "polyglot-compiler/polyglot/tree/master/src/polyglot/util/CollectionUtil.java", "idx": 1325}
{"memberVariables": {}, "code": ["void", "function", "(", "Class", "<", "?", ">", "clazz", ",", "Object", "obj", ")", "{", "isInstanceOf", "(", "clazz", ",", "obj", ",", "\"\"", ")", ";", "}"], "memberFunctions": {"isTrue": [["void", "boolean expression", "String message"], ["void", "boolean expression"]], "isAssignable": [["void", "Class<?> superType", "Class<?> subType"], ["void", "Class<?> superType", "Class<?> subType", "String message"]], "notNull": [["void", "Object object", "String message"], ["void", "Object object"]], "isNull": [["void", "Object object", "String message"], ["void", "Object object"]], "noNullElements": [["void", "Object[] array", "String message"], ["void", "Object[] array"]], "state": [["void", "boolean expression", "String message"], ["void", "boolean expression"]], "notEmpty": [["void", "Object[] array", "String message"], ["void", "Object[] array"], ["void", "Collection collection", "String message"], ["void", "Collection collection"], ["void", "Map map", "String message"], ["void", "Map map"]]}, "className": "Assert", "renamed": ["void", "function", "(", "Class", "<", "?", ">", "arg0", ",", "Object", "arg1", ")", "{", "isInstanceOf", "(", "arg0", ",", "arg1", ",", "\"srini_string\"", ")", ";", "}"], "nl": "Assert that the provided object is an instance of the provided class. Assert.instanceOf(Foo.class, foo);", "nlToks": ["Assert", "that", "the", "provided", "object", "is", "an", "instance", "of", "the", "provided", "class", ".", "Assert.instanceOf", "-LRB-", "Foo.class", ",", "foo", "-RRB-", ";"], "path": "16ren/Android-Next/tree/master/bus/src/main/java/com/mcxiaoke/next/bus/support/Assert.java", "idx": 1326}
{"memberVariables": {"bus": "Bus", "preKeepAlive": "String", "UTF8=Charset.forName(\"utf-8\")": "Charset", "classpathAnchor": "Class<?>", "namespaces=new HashMap<String,String>()": "Map<String,String>", "xmlInputFactory": "XMLInputFactory", "response=new ByteArrayOutputStream()": "ByteArrayOutputStream", "written": "boolean", "basedirPath": "String", "contentType": "String"}, "code": ["Definition", "function", "(", "Server", "server", ")", "{", "Service", "service", "=", "server", ".", "getEndpoint", "(", ")", ".", "getService", "(", ")", ";", "ServiceWSDLBuilder", "wsdlBuilder", "=", "new", "ServiceWSDLBuilder", "(", "bus", ",", "service", ".", "getServiceInfos", "(", ")", ".", "get", "(", "0", ")", ")", ";", "wsdlBuilder", ".", "setUseSchemaImports", "(", "false", ")", ";", "return", "wsdlBuilder", ".", "build", "(", ")", ";", "}"], "memberFunctions": {"getBus": [["Bus"]], "getWSDLDocument": [["Document", "Server server"]], "getResponseStream": [["ByteArrayOutputStream"]], "assertValidBoolean": [["void", "String xpath", "Node node"]], "assertValid": [["NodeList", "String xpath", "Node node"]], "invoke": [["Node", "String address", "String transport", "String message"], ["Node", "String address", "String transport", "byte[] message"]], "getResponseContentType": [["String"]], "getServerForService": [["Server", "QName serviceName"]], "resolveNamespacePrefix": [["String", "String prefix", "Node node"]], "addNamespace": [["void", "String ns", "String uri"]], "getResourceAsXMLStreamReader": [["XMLStreamReader", "String resource"]], "getServerForAddress": [["Server", "String address"]], "recoverKeepAliveSystemProperty": [["void"]], "getTestFile": [["File", "String relativePath"]], "getBasedir": [["String"]], "assertInvalid": [["NodeList", "String xpath", "Node node"]], "getNamespaces": [["Map<String,String>"]], "getResourceAsStream": [["InputStream", "String resource"]], "invokeBytes": [["byte[]", "String address", "String transport", "String message"], ["byte[]", "String address", "String transport", "byte[] message"]], "setKeepAliveSystemProperty": [["void", "boolean setAlive"]], "addDefaultNamespaces": [["void"]], "getResourceAsReader": [["Reader", "String resource"]], "assertNoFault": [["void", "Node node"]], "onMessage": [["void", "Message message"]], "setBus": [["void", "Bus bus"]], "assertXPathEquals": [["void", "String xpath", "String value", "Node node"], ["void", "String xpath", "QName value", "Node node"]]}, "className": "TestUtilities", "renamed": ["Definition", "function", "(", "Server", "arg0", ")", "{", "Service", "loc0", "=", "arg0", ".", "getEndpoint", "(", ")", ".", "getService", "(", ")", ";", "ServiceWSDLBuilder", "loc1", "=", "new", "ServiceWSDLBuilder", "(", "bus", ",", "loc0", ".", "getServiceInfos", "(", ")", ".", "get", "(", "0", ")", ")", ";", "loc1", ".", "setUseSchemaImports", "(", "false", ")", ";", "return", "loc1", ".", "build", "(", ")", ";", "}"], "nl": "Return a WSDL definition model for a server.", "nlToks": ["Return", "a", "WSDL", "definition", "model", "for", "a", "server", "."], "path": "primesign/cxf/tree/master/testutils/src/main/java/org/apache/cxf/test/TestUtilities.java", "idx": 1327}
{"memberVariables": {"DATA_SEPARATOR=\",\"": "String", "report": "Object", "ILLEGAL_DATAPATH=\"Constructor dataPath contains headers that don't exists in report\"": "String", "MAP_SEPARATOR=\"->\"": "String", "NO_DATA_FOUND=\"No data found. Collected data don't contains requested data. Please compare ReportReader dataPath with get method dataPath.\"": "String"}, "code": ["String", "function", "(", "String", "dataPath", ")", "{", "return", "getList", "(", "dataPath", ")", ".", "get", "(", "0", ")", ";", "}"], "memberFunctions": {"getSet": [["Set<String>", "String dataPath"]], "loadRowToReport": [["void", "String dataPath", "HSSFRow row", "Object reportObject", "Map<String,Integer> columnIndexes"]], "getList": [["List<String>", "String dataPath"]], "initializeColumnIndex": [["Map<String,Integer>", "String dataPath", "HSSFSheet sheet"]], "getCellToStringValue": [["String", "Cell cell"]], "getSheet": [["HSSFSheet", "String filePath", "String sheetName"]], "initializeReport": [["void"]], "translateAsterix": [["String", "String dataPath", "HSSFSheet sheet"]]}, "className": "ReportReader", "renamed": ["String", "function", "(", "String", "arg0", ")", "{", "return", "getList", "(", "arg0", ")", ".", "get", "(", "0", ")", ";", "}"], "nl": "Used to read only single data", "nlToks": ["Used", "to", "read", "only", "single", "data"], "path": "piotrheliosz/tests/tree/master/src/test/java/SetUp/ReportReader.java", "idx": 1328}
{"memberVariables": {"events=new ArrayList<SentenceEvent>()": "List<SentenceEvent>", "reader": "SentenceReader", "listeners=new ArrayList<ProviderListener<T>>()": "List<ProviderListener<T>>"}, "code": ["boolean", "function", "(", ")", "{", "long", "now", "=", "System", ".", "currentTimeMillis", "(", ")", ";", "for", "(", "SentenceEvent", "se", ":", "events", ")", "{", "long", "age", "=", "now", "-", "se", ".", "getTimeStamp", "(", ")", ";", "if", "(", "age", ">", "1000", ")", "{", "return", "false", ";", "}", "}", "return", "isValid", "(", ")", ";", "}"], "memberFunctions": {"fireProviderEvent": [["void", "T event"]], "readingStopped": [["void"]], "hasAll": [["boolean", "String... id"]], "createProviderEvent": [["T"]], "isReady": [["boolean"]], "isValid": [["boolean"]], "hasOne": [["boolean", "String... id"]], "readingStarted": [["void"]], "removeListener": [["void", "ProviderListener<T> listener"]], "readingPaused": [["void"]], "reset": [["void"]], "sentenceRead": [["void", "SentenceEvent event"]], "getSentences": [["List<Sentence>"]], "addListener": [["void", "ProviderListener<T> listener"]]}, "className": "AbstractProvider", "renamed": ["boolean", "function", "(", ")", "{", "long", "loc0", "=", "System", ".", "currentTimeMillis", "(", ")", ";", "for", "(", "SentenceEvent", "loc1", ":", "events", ")", "{", "long", "loc2", "=", "loc0", "-", "loc1", ".", "getTimeStamp", "(", ")", ";", "if", "(", "loc2", ">", "1000", ")", "{", "return", "false", ";", "}", "}", "return", "isValid", "(", ")", ";", "}"], "nl": "Validates the collected sentences by checking the ages of each sentence and then by calling  {@link #isValid()}. If extending implementation has no validation criteria, it should return always true.", "nlToks": ["Validates", "the", "collected", "sentences", "by", "checking", "the", "ages", "of", "each", "sentence", "and", "then", "by", "calling", "-LCB-", "@link", "#isValid", "-LRB-", "-RRB-", "-RCB-", ".", "If", "extending", "implementation", "has", "no", "validation", "criteria", ",", "it", "should", "return", "always", "true", "."], "path": "pkoziol/marine-api/tree/master/src/main/java/net/sf/marineapi/provider/AbstractProvider.java", "idx": 1330}
{"memberVariables": {"cpd": "CPD", "BASE_TEST_RESOURCE_PATH": "String", "files": "int", "expectedFilesCount": "int", "canTestSymLinks=false": "boolean"}, "code": ["void", "function", "(", ")", "{", "NoFileAssertListener", "listener", "=", "new", "NoFileAssertListener", "(", "1", ")", ";", "cpd", ".", "setCpdListener", "(", "listener", ")", ";", "cpd", ".", "add", "(", "new", "File", "(", "\"./\"", "+", "BASE_TEST_RESOURCE_PATH", ",", "\"real-file.txt\"", ")", ")", ";", "listener", ".", "verify", "(", ")", ";", "}"], "memberFunctions": {"addedFile": [["void", "int fileCount", "File file"]], "prepareSymLinks": [["void"]], "testFileSectionWithBrokenSymlinks": [["void"]], "phaseUpdate": [["void", "int phase"]], "setup": [["void"]], "verify": [["void"]], "testFileAddedAsSymlinkAndReal": [["void"]]}, "className": "CPDTest", "renamed": ["void", "function", "(", ")", "{", "NoFileAssertListener", "loc0", "=", "new", "NoFileAssertListener", "(", "1", ")", ";", "cpd", ".", "setCpdListener", "(", "loc0", ")", ";", "cpd", ".", "add", "(", "new", "File", "(", "\"srini_string\"", "+", "BASE_TEST_RESOURCE_PATH", ",", "\"srini_string\"", ")", ")", ";", "loc0", ".", "verify", "(", ")", ";", "}"], "nl": "Add a file with a relative path - should still be added and not be detected as a sym link.", "nlToks": ["Add", "a", "file", "with", "a", "relative", "path", "-", "should", "still", "be", "added", "and", "not", "be", "detected", "as", "a", "sym", "link", "."], "path": "adangel/pmd/tree/master/pmd-core/src/test/java/net/sourceforge/pmd/cpd/CPDTest.java", "idx": 1331}
{"memberVariables": {}, "code": ["Method", "function", "(", "Class", "type", ",", "Method", "bridgeMethod", ")", "{", "return", "ReflectionUtils", ".", "findMethod", "(", "type", ",", "bridgeMethod", ".", "getName", "(", ")", ",", "bridgeMethod", ".", "getParameterTypes", "(", ")", ")", ";", "}"], "memberFunctions": {"searchCandidates": [["Method", "List<Method> candidateMethods", "Method bridgeMethod"]], "isVisibilityBridgeMethodPair": [["boolean", "Method bridgeMethod", "Method bridgedMethod"]], "isBridgedCandidateFor": [["boolean", "Method candidateMethod", "Method bridgeMethod"]], "findBridgedMethod": [["Method", "Method bridgeMethod"]], "findGenericDeclaration": [["Method", "Method bridgeMethod"]], "isResolvedTypeMatch": [["boolean", "Method genericMethod", "Method candidateMethod", "Map<TypeVariable,Type> typeVariableMap"]], "isBridgeMethodFor": [["boolean", "Method bridgeMethod", "Method candidateMethod", "Map<TypeVariable,Type> typeVariableMap"]]}, "className": "BridgeMethodResolver", "renamed": ["Method", "function", "(", "Class", "arg0", ",", "Method", "arg1", ")", "{", "return", "ReflectionUtils", ".", "findMethod", "(", "arg0", ",", "arg1", ".", "getName", "(", ")", ",", "arg1", ".", "getParameterTypes", "(", ")", ")", ";", "}"], "nl": "If the supplied  {@link Class} has a declared {@link Method} whose signature matchesthat of the supplied  {@link Method}, then this matching  {@link Method} is returned,otherwise  {@code null} is returned.", "nlToks": ["If", "the", "supplied", "-LCB-", "@link", "Class", "-RCB-", "has", "a", "declared", "-LCB-", "@link", "Method", "-RCB-", "whose", "signature", "matchesthat", "of", "the", "supplied", "-LCB-", "@link", "Method", "-RCB-", ",", "then", "this", "matching", "-LCB-", "@link", "Method", "-RCB-", "is", "returned", ",", "otherwise", "-LCB-", "@code", "null", "-RCB-", "is", "returned", "."], "path": "16ren/Android-Next/tree/master/bus/src/main/java/com/mcxiaoke/next/bus/support/BridgeMethodResolver.java", "idx": 1332}
{"memberVariables": {}, "code": ["void", "function", "(", "Map", "<", "K", ",", "V", ">", "map", ",", "Parcel", "out", ",", "int", "flags", ")", "{", "if", "(", "map", "!=", "null", ")", "{", "out", ".", "writeInt", "(", "map", ".", "size", "(", ")", ")", ";", "for", "(", "Entry", "<", "K", ",", "V", ">", "entry", ":", "map", ".", "entrySet", "(", ")", ")", "{", "out", ".", "writeParcelable", "(", "entry", ".", "getKey", "(", ")", ",", "flags", ")", ";", "out", ".", "writeParcelable", "(", "entry", ".", "getValue", "(", ")", ",", "flags", ")", ";", "}", "}", "else", "{", "out", ".", "writeInt", "(", "-", "1", ")", ";", "}", "}"], "memberFunctions": {"readHashMapStringAndString": [["Map<String,String>", "Parcel in"]], "writeHashMapStringAndString": [["void", "Map<String,String> map", "Parcel out", "int flags"]], "readHashMapStringKey": [["Map<String,V>", "Parcel in", "ClassLoader loader"]], "readHashMap": [["Map<K,V>", "Parcel in", "ClassLoader loader"]], "readBoolean": [["boolean", "Parcel in"]], "writeHashMapStringKey": [["void", "Map<String,V> map", "Parcel out", "int flags"]], "writeBoolean": [["void", "boolean b", "Parcel out"]]}, "className": "UtilParcel", "renamed": ["void", "function", "(", "Map", "<", "K", ",", "V", ">", "arg0", ",", "Parcel", "arg1", ",", "int", "arg2", ")", "{", "if", "(", "arg0", "!=", "null", ")", "{", "arg1", ".", "writeInt", "(", "arg0", ".", "size", "(", ")", ")", ";", "for", "(", "Entry", "<", "K", ",", "V", ">", "loc0", ":", "arg0", ".", "entrySet", "(", ")", ")", "{", "arg1", ".", "writeParcelable", "(", "loc0", ".", "getKey", "(", ")", ",", "arg2", ")", ";", "arg1", ".", "writeParcelable", "(", "loc0", ".", "getValue", "(", ")", ",", "arg2", ")", ";", "}", "}", "else", "{", "arg1", ".", "writeInt", "(", "-", "1", ")", ";", "}", "}"], "nl": "Write a HashMap to a Parcel, class of key and value can parcelable both", "nlToks": ["Write", "a", "HashMap", "to", "a", "Parcel", ",", "class", "of", "key", "and", "value", "can", "parcelable", "both"], "path": "13383848500/dashihui/tree/master/MIT-Afford/app/src/main/java/com/dashihui/afford/util/parcel/UtilParcel.java", "idx": 1333}
{"memberVariables": {"AUTHOR=2": "int", "USER=1": "int", "USER_AGENT=0": "int", "stylesheet=null": "Stylesheet", "origin=USER_AGENT": "int", "mediaTypes=new ArrayList()": "List", "title": "String", "type": "String", "uri": "String", "content": "String"}, "code": ["String", "function", "(", ")", "{", "return", "title", ";", "}"], "memberFunctions": {"addMedium": [["void", "String medium"]], "setContent": [["void", "String content"]], "setStylesheet": [["void", "Stylesheet stylesheet"]], "getMedia": [["List"]], "getOrigin": [["int"]], "appliesToMedia": [["boolean", "String m"]], "setOrigin": [["void", "int origin"]], "getContent": [["String"]], "setUri": [["void", "String uri"]], "setTitle": [["void", "String title"]], "getStylesheet": [["Stylesheet"]], "setType": [["void", "String type"]], "getType": [["String"]], "setMedia": [["void", "String media"], ["void", "List mediaTypes"]], "isInline": [["boolean"]], "getUri": [["String"]]}, "className": "StylesheetInfo", "renamed": ["String", "function", "(", ")", "{", "return", "title", ";", "}"], "nl": "Gets the title attribute of the StylesheetInfo object", "nlToks": ["Gets", "the", "title", "attribute", "of", "the", "StylesheetInfo", "object"], "path": "plutogeek/flyingsaucer/tree/master/flying-saucer-core/src/main/java/org/xhtmlrenderer/css/sheet/StylesheetInfo.java", "idx": 1336}
{"memberVariables": {"serialVersionUID=1L": "long", "isSystemDerived": "String", "isActive": "String", "predecessorId": "BigDecimal", "srcFileName": "String", "successorId": "BigDecimal", "feedId": "BigDecimal", "checksum": "String", "transmissionDatasetId": "String", "comments": "String", "inactivationReasonType": "String", "isFormatValid": "String", "dataUnitId": "long", "receiptDate": "Timestamp", "srcUniqueFileName": "String", "createdDate": "Timestamp", "dataSetId": "Long", "fileSize": "BigDecimal", "destFileName": "String", "loadedInCats": "String", "checksumType": "String", "modifiedDate": "Timestamp", "runId": "BigDecimal", "isPrepopulated": "String", "isBulk": "String", "isUpdate": "String", "receiptDateType": "String", "status": "String"}, "code": ["void", "function", "(", "Timestamp", "modifiedDate", ")", "{", "this", ".", "modifiedDate", "=", "modifiedDate", ";", "}"], "memberFunctions": {"setIsSystemDerived": [["void", "String isSystemDerived"]], "setIsPrepopulated": [["void", "String isPrepopulated"]], "getStatus": [["String"]], "getIsUpdate": [["String"]], "getDataUnitId": [["long"]], "getFileSize": [["BigDecimal"]], "setInactivationReasonType": [["void", "String inactivationReasonType"]], "setDataUnitId": [["void", "long dataUnitId"]], "getComments": [["String"]], "getCreatedDate": [["Timestamp"]], "setFileSize": [["void", "BigDecimal fileSize"]], "getPredecessorId": [["BigDecimal"]], "setIsUpdate": [["void", "String isUpdate"]], "getReceiptDateType": [["String"]], "getFeedId": [["BigDecimal"]], "setReceiptDate": [["void", "Timestamp receiptDate"]], "getModifiedDate": [["Timestamp"]], "setSuccessorId": [["void", "BigDecimal successorId"]], "setDestFileName": [["void", "String destFileName"]], "setIsBulk": [["void", "String isBulk"]], "getIsFormatValid": [["String"]], "setDataSetId": [["void", "Long dataSetId"]], "setIsActive": [["void", "String isActive"]], "setChecksumType": [["void", "String checksumType"]], "setFeedId": [["void", "BigDecimal feedId"]], "getInactivationReasonType": [["String"]], "getSrcUniqueFileName": [["String"]], "getDataSetId": [["Long"]], "setReceiptDateType": [["void", "String receiptDateType"]], "getRunId": [["BigDecimal"]], "setSrcFileName": [["void", "String srcFileName"]], "getChecksumType": [["String"]], "getSrcFileName": [["String"]], "getChecksum": [["String"]], "getDestFileName": [["String"]], "getReceiptDate": [["Timestamp"]], "setTransmissionDatasetId": [["void", "String transmissionDatasetId"]], "getTransmissionDatasetId": [["String"]], "setComments": [["void", "String comments"]], "getLoadedInCats": [["String"]], "getSuccessorId": [["BigDecimal"]], "setLoadedInCats": [["void", "String loadedInCats"]], "getIsPrepopulated": [["String"]], "setSrcUniqueFileName": [["void", "String srcUniqueFileName"]], "setChecksum": [["void", "String checksum"]], "setIsFormatValid": [["void", "String isFormatValid"]], "getIsBulk": [["String"]], "setRunId": [["void", "BigDecimal runId"]], "setStatus": [["void", "String status"]], "getIsActive": [["String"]], "setCreatedDate": [["void", "Timestamp createdDate"]], "setPredecessorId": [["void", "BigDecimal predecessorId"]], "getIsSystemDerived": [["String"]]}, "className": "PCLDataUnitEntity", "renamed": ["void", "function", "(", "Timestamp", "arg0", ")", "{", "this", ".", "modifiedDate", "=", "arg0", ";", "}"], "nl": "Sets the modified date.", "nlToks": ["Sets", "the", "modified", "date", "."], "path": "pkesireddy/portico_fletcher/tree/master/FetcherTesterService/src/main/java/org/ithaka/cm/fetchertester/entity/PCLDataUnitEntity.java", "idx": 1338}
{"memberVariables": {"throwable": "Throwable", "value": "T", "done": "boolean"}, "code": ["boolean", "function", "(", ")", "{", "return", "false", ";", "}"], "memberFunctions": {"cancel": [["boolean", "boolean mayInterruptIfRunning"]], "exception": [["void", "Throwable ex"]], "set": [["void", "T t"]], "get": [["T"], ["T", "long timeout", "TimeUnit unit"]], "isDone": [["boolean"]], "getContext": [["Map<String,Object>"]]}, "className": "ServerAsyncResponse", "renamed": ["boolean", "function", "(", ")", "{", "return", "false", ";", "}"], "nl": "Currently unused", "nlToks": ["Currently", "unused"], "path": "primesign/cxf/tree/master/rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/ServerAsyncResponse.java", "idx": 1340}
{"memberVariables": {"LOG=Logger.getLogger(NotationProvider.class)": "Logger", "listeners=new ArrayList<Object[]>()": "Collection<Object[]>"}, "code": ["boolean", "function", "(", "final", "String", "key", ",", "final", "Map", "map", ")", "{", "if", "(", "map", "==", "null", ")", "{", "return", "false", ";", "}", "Object", "o", "=", "map", ".", "get", "(", "key", ")", ";", "if", "(", "!", "(", "o", "instanceof", "Boolean", ")", ")", "{", "return", "false", ";", "}", "return", "(", "(", "Boolean", ")", "o", ")", ".", "booleanValue", "(", ")", ";", "}"], "memberFunctions": {"getParsingHelp": [["String"]], "removeElementListener": [["void", "PropertyChangeListener listener", "Object element"]], "cleanListener": [["void", "final PropertyChangeListener listener", "final Object modelElement"]], "updateListener": [["void", "final PropertyChangeListener listener", "Object modelElement", "PropertyChangeEvent pce"]], "addElementListener": [["void", "PropertyChangeListener listener", "Object element"], ["void", "PropertyChangeListener listener", "Object element", "String property"], ["void", "PropertyChangeListener listener", "Object element", "String[] property"]], "removeAllElementListeners": [["void", "PropertyChangeListener listener"]], "toString": [["String", "Object modelElement", "Map args"]], "parse": [["void", "Object modelElement", "String text"]], "initialiseListener": [["void", "PropertyChangeListener listener", "Object modelElement"]]}, "className": "NotationProvider", "renamed": ["boolean", "function", "(", "final", "String", "arg0", ",", "final", "Map", "arg1", ")", "{", "if", "(", "arg1", "==", "null", ")", "{", "return", "false", ";", "}", "Object", "loc0", "=", "arg1", ".", "get", "(", "arg0", ")", ";", "if", "(", "!", "(", "loc0", "instanceof", "Boolean", ")", ")", "{", "return", "false", ";", "}", "return", "(", "(", "Boolean", ")", "loc0", ")", ".", "booleanValue", "(", ")", ";", "}"], "nl": "Utility function to determine the presence of a key.  The default is false.", "nlToks": ["Utility", "function", "to", "determine", "the", "presence", "of", "a", "key", ".", "The", "default", "is", "false", "."], "path": "pichiliani/CoArgoUML/tree/master/v0.24/fonte/src/argouml-app/src/org/argouml/notation/NotationProvider.java", "idx": 1341}
{"memberVariables": {"channelOpenFuture=SettableFuture.create()": "SettableFuture<PaymentChannelClientConnection>", "wireParser": "ProtobufParser<Protos.TwoWayChannelMessage>", "channelClient": "PaymentChannelClient"}, "code": ["ListenableFuture", "<", "PaymentChannelClientConnection", ">", "function", "(", ")", "{", "return", "channelOpenFuture", ";", "}"], "memberFunctions": {"disconnectWithoutSettlement": [["void"]], "settle": [["void"]], "incrementPayment": [["ListenableFuture<BigInteger>", "BigInteger size"]], "state": [["PaymentChannelClientState"]]}, "className": "PaymentChannelClientConnection", "renamed": ["ListenableFuture", "<", "PaymentChannelClientConnection", ">", "function", "(", ")", "{", "return", "channelOpenFuture", ";", "}"], "nl": "Gets a future which returns this when the channel is successfully opened, or throws an exception if there is an error before the channel has reached the open state. After this future completes successfully, you may call {@link PaymentChannelClientConnection#incrementPayment(java.math.BigInteger)} to begin paying the server.", "nlToks": ["Gets", "a", "future", "which", "returns", "this", "when", "the", "channel", "is", "successfully", "opened", ",", "or", "throws", "an", "exception", "if", "there", "is", "an", "error", "before", "the", "channel", "has", "reached", "the", "open", "state", ".", "After", "this", "future", "completes", "successfully", ",", "you", "may", "call", "-LCB-", "@link", "PaymentChannelClientConnection", "#incrementPayment", "-LRB-", "java.math.BigInteger", "-RRB-", "-RCB-", "to", "begin", "paying", "the", "server", "."], "path": "plncoin/plncoin-and/tree/master/plncoinj/core/src/main/java/com/google/bitcoin/protocols/channels/PaymentChannelClientConnection.java", "idx": 1342}
{"memberVariables": {"TEMP_DIR=\"/Users/wendellpbarreto/Downloads\"": "String", "graph=new StringBuilder()": "StringBuilder", "DOT=\"/usr/local/bin/dot\"": "String"}, "code": ["String", "function", "(", ")", "{", "return", "\"}\"", ";", "}"], "memberFunctions": {"add": [["void", "String line"]], "addln": [["void", "String line"], ["void"]], "getGraph": [["byte[]", "String dot_source", "String type"]], "writeGraphToFile": [["int", "byte[] img", "String file"], ["int", "byte[] img", "File to"]], "start_graph": [["String"]], "start_subgraph": [["String", "String name"]], "readSource": [["void", "String input"]], "getDotSource": [["String"]], "writeDotSourceToFile": [["File", "String str"]], "get_img_stream": [["byte[]", "File dot", "String type"]], "end_subgraph": [["String"]]}, "className": "GraphViz", "renamed": ["String", "function", "(", ")", "{", "return", "\"srini_string\"", ";", "}"], "nl": "Returns a string that is used to end a graph.", "nlToks": ["Returns", "a", "string", "that", "is", "used", "to", "end", "a", "graph", "."], "path": "adelinosegundo/gene_analytics/tree/master/src/util/graphviz/GraphViz.java", "idx": 1344}
{"memberVariables": {"serialVersionUID=1L": "long", "isSystemDerived": "String", "isActive": "String", "predecessorId": "BigDecimal", "srcFileName": "String", "successorId": "BigDecimal", "feedId": "BigDecimal", "checksum": "String", "transmissionDatasetId": "String", "comments": "String", "inactivationReasonType": "String", "isFormatValid": "String", "dataUnitId": "long", "receiptDate": "Timestamp", "srcUniqueFileName": "String", "createdDate": "Timestamp", "dataSetId": "Long", "fileSize": "BigDecimal", "destFileName": "String", "loadedInCats": "String", "checksumType": "String", "modifiedDate": "Timestamp", "runId": "BigDecimal", "isPrepopulated": "String", "isBulk": "String", "isUpdate": "String", "receiptDateType": "String", "status": "String"}, "code": ["Timestamp", "function", "(", ")", "{", "return", "this", ".", "modifiedDate", ";", "}"], "memberFunctions": {"setIsSystemDerived": [["void", "String isSystemDerived"]], "setIsPrepopulated": [["void", "String isPrepopulated"]], "getStatus": [["String"]], "getIsUpdate": [["String"]], "getDataUnitId": [["long"]], "getFileSize": [["BigDecimal"]], "setInactivationReasonType": [["void", "String inactivationReasonType"]], "setDataUnitId": [["void", "long dataUnitId"]], "getComments": [["String"]], "getCreatedDate": [["Timestamp"]], "setFileSize": [["void", "BigDecimal fileSize"]], "getPredecessorId": [["BigDecimal"]], "setIsUpdate": [["void", "String isUpdate"]], "getReceiptDateType": [["String"]], "getFeedId": [["BigDecimal"]], "setReceiptDate": [["void", "Timestamp receiptDate"]], "setSuccessorId": [["void", "BigDecimal successorId"]], "setDestFileName": [["void", "String destFileName"]], "setIsBulk": [["void", "String isBulk"]], "getIsFormatValid": [["String"]], "setDataSetId": [["void", "Long dataSetId"]], "setIsActive": [["void", "String isActive"]], "setChecksumType": [["void", "String checksumType"]], "setFeedId": [["void", "BigDecimal feedId"]], "getInactivationReasonType": [["String"]], "getSrcUniqueFileName": [["String"]], "getDataSetId": [["Long"]], "setReceiptDateType": [["void", "String receiptDateType"]], "getRunId": [["BigDecimal"]], "setSrcFileName": [["void", "String srcFileName"]], "getChecksumType": [["String"]], "getSrcFileName": [["String"]], "getChecksum": [["String"]], "getDestFileName": [["String"]], "getReceiptDate": [["Timestamp"]], "setTransmissionDatasetId": [["void", "String transmissionDatasetId"]], "getTransmissionDatasetId": [["String"]], "setComments": [["void", "String comments"]], "getLoadedInCats": [["String"]], "getSuccessorId": [["BigDecimal"]], "setLoadedInCats": [["void", "String loadedInCats"]], "getIsPrepopulated": [["String"]], "setSrcUniqueFileName": [["void", "String srcUniqueFileName"]], "setChecksum": [["void", "String checksum"]], "setIsFormatValid": [["void", "String isFormatValid"]], "getIsBulk": [["String"]], "setRunId": [["void", "BigDecimal runId"]], "setStatus": [["void", "String status"]], "getIsActive": [["String"]], "setModifiedDate": [["void", "Timestamp modifiedDate"]], "setCreatedDate": [["void", "Timestamp createdDate"]], "setPredecessorId": [["void", "BigDecimal predecessorId"]], "getIsSystemDerived": [["String"]]}, "className": "PCLDataUnitEntity", "renamed": ["Timestamp", "function", "(", ")", "{", "return", "this", ".", "modifiedDate", ";", "}"], "nl": "Gets the modified date.", "nlToks": ["Gets", "the", "modified", "date", "."], "path": "pkesireddy/portico_fletcher/tree/master/FetcherTesterService/src/main/java/org/ithaka/cm/fetchertester/entity/PCLDataUnitEntity.java", "idx": 1345}
{"memberVariables": {}, "code": ["void", "function", "(", "final", "int", "x", ",", "final", "byte", "[", "]", "buf", ",", "final", "int", "offset", ")", "{", "buf", "[", "offset", "]", "=", "(", "byte", ")", "x", ";", "buf", "[", "offset", "+", "1", "]", "=", "(", "byte", ")", "(", "x", ">>", "8", ")", ";", "buf", "[", "offset", "+", "2", "]", "=", "(", "byte", ")", "(", "x", ">>", "16", ")", ";", "buf", "[", "offset", "+", "3", "]", "=", "(", "byte", ")", "(", "x", ">>", "24", ")", ";", "}"], "memberFunctions": {"leb2int": [["int", "final byte[] x", "final int offset"]], "leb2short": [["short", "final byte[] x", "final int offset"]], "beb2short": [["short", "final byte[] x", "final int offset"]], "short2leb": [["void", "final short x", "final OutputStream os"]], "ubyte2int": [["int", "final byte x"]]}, "className": "ByteOrder", "renamed": ["void", "function", "(", "final", "int", "arg0", ",", "final", "byte", "[", "]", "arg1", ",", "final", "int", "arg2", ")", "{", "arg1", "[", "arg2", "]", "=", "(", "byte", ")", "arg0", ";", "arg1", "[", "arg2", "+", "1", "]", "=", "(", "byte", ")", "(", "arg0", ">>", "8", ")", ";", "arg1", "[", "arg2", "+", "2", "]", "=", "(", "byte", ")", "(", "arg0", ">>", "16", ")", ";", "arg1", "[", "arg2", "+", "3", "]", "=", "(", "byte", ")", "(", "arg0", ">>", "24", ")", ";", "}"], "nl": "Int to little-endian bytes: writes x to buf[offset ..].", "nlToks": ["Int", "to", "little-endian", "bytes", ":", "writes", "x", "to", "buf", "-LSB-", "offset", ".", ".", "-RSB-", "."], "path": "adamfisk/littleshoot-client/tree/master/client/util/src/main/java/org/lastbamboo/client/util/ByteOrder.java", "idx": 1347}
{"memberVariables": {"fb": "Facebook"}, "code": ["void", "function", "(", "String", "graphPath", ",", "Bundle", "parameters", ",", "RequestListener", "listener", ",", "final", "Object", "state", ")", "{", "request", "(", "graphPath", ",", "parameters", ",", "\"GET\"", ",", "listener", ",", "state", ")", ";", "}"], "memberFunctions": {"onFileNotFoundException": [["void", "FileNotFoundException e", "Object state"]], "logout": [["void", "final Context context", "final RequestListener listener", "final Object state"], ["void", "final Context context", "final RequestListener listener"]], "onComplete": [["void", "String response", "Object state"]], "onIOException": [["void", "IOException e", "Object state"]], "onMalformedURLException": [["void", "MalformedURLException e", "Object state"]], "onFacebookError": [["void", "FacebookError e", "Object state"]]}, "className": "AsyncFacebookRunner", "renamed": ["void", "function", "(", "String", "arg0", ",", "Bundle", "arg1", ",", "RequestListener", "arg2", ",", "final", "Object", "arg3", ")", "{", "request", "(", "arg0", ",", "arg1", ",", "\"srini_string\"", ",", "arg2", ",", "arg3", ")", ";", "}"], "nl": "Make a request to the Facebook Graph API with the given string parameters using an HTTP GET (default method).  See http://developers.facebook.com/docs/api  Note that this method is asynchronous and the callback will be invoked in a background thread; operations that affect the UI will need to be posted to the UI thread or an appropriate handler.  This method is deprecated.  See  {@link Facebook} and {@link com.facebook.Request} for more info.", "nlToks": ["Make", "a", "request", "to", "the", "Facebook", "Graph", "API", "with", "the", "given", "string", "parameters", "using", "an", "HTTP", "GET", "-LRB-", "default", "method", "-RRB-", ".", "See", "http://developers.facebook.com/docs/api", "Note", "that", "this", "method", "is", "asynchronous", "and", "the", "callback", "will", "be", "invoked", "in", "a", "background", "thread", ";", "operations", "that", "affect", "the", "UI", "will", "need", "to", "be", "posted", "to", "the", "UI", "thread", "or", "an", "appropriate", "handler", ".", "This", "method", "is", "deprecated", ".", "See", "-LCB-", "@link", "Facebook", "-RCB-", "and", "-LCB-", "@link", "com.facebook.Request", "-RCB-", "for", "more", "info", "."], "path": "planktons/CrazyHero/tree/master/Assets/Plugins/Android/facebook/src/com/facebook/android/AsyncFacebookRunner.java", "idx": 1349}
{"memberVariables": {"apiKey": "String", "debugStream": "OutputStream", "scope": "String", "signatureType": "SignatureType", "callback": "String", "apiSecret": "String", "api": "Api"}, "code": ["ServiceBuilder", "function", "(", "Class", "<", "?", "extends", "Api", ">", "apiClass", ")", "{", "this", ".", "api", "=", "createApi", "(", "apiClass", ")", ";", "return", "this", ";", "}"], "memberFunctions": {"debug": [["ServiceBuilder"]], "apiKey": [["ServiceBuilder", "String apiKey"]], "debugStream": [["ServiceBuilder", "OutputStream stream"]], "build": [["OAuthService"]], "createApi": [["Api", "Class<? extends Api> apiClass"]], "scope": [["ServiceBuilder", "String scope"]], "signatureType": [["ServiceBuilder", "SignatureType type"]], "callback": [["ServiceBuilder", "String callback"]], "apiSecret": [["ServiceBuilder", "String apiSecret"]]}, "className": "ServiceBuilder", "renamed": ["ServiceBuilder", "function", "(", "Class", "<", "?", "extends", "Api", ">", "arg0", ")", "{", "this", ".", "api", "=", "createApi", "(", "arg0", ")", ";", "return", "this", ";", "}"], "nl": "Configures the  {@link Api}", "nlToks": ["Configures", "the", "-LCB-", "@link", "Api", "-RCB-"], "path": "pnsantos/scribe-java/tree/master/src/main/java/org/scribe/builder/ServiceBuilder.java", "idx": 1352}
{"memberVariables": {"TYPE_DESCRIPTIONS": "List", "sacTypesStrings": "Map"}, "code": ["boolean", "function", "(", "CSSPrimitiveValue", "primitive", ")", "{", "short", "type", "=", "0", ";", "type", "=", "(", "(", "CSSPrimitiveValue", ")", "primitive", ")", ".", "getPrimitiveType", "(", ")", ";", "return", "isAbsoluteUnit", "(", "type", ")", ";", "}"], "memberFunctions": {"guessType": [["short", "String value"]], "sacPrimitiveTypeForString": [["short", "String type"]], "stringForSACPrimitiveType": [["String", "short type"]], "isNumber": [["boolean", "short cssPrimitiveType"]], "getCssValueTypeDesc": [["String", "CSSValue cssValue"]], "cssType": [["String", "int cssType", "int primitiveValueType"]]}, "className": "ValueConstants", "renamed": ["boolean", "function", "(", "CSSPrimitiveValue", "arg0", ")", "{", "short", "loc0", "=", "0", ";", "loc0", "=", "(", "(", "CSSPrimitiveValue", ")", "arg0", ")", ".", "getPrimitiveType", "(", ")", ";", "return", "isAbsoluteUnit", "(", "loc0", ")", ";", "}"], "nl": "Returns true if the specified value was absolute (even if we have a computed value for it), meaning that either the value can be used directly (e.g. pixels) or there is a fixed context-independent conversion for it (e.g. inches). Proportional types (e.g. %) return false.", "nlToks": ["Returns", "true", "if", "the", "specified", "value", "was", "absolute", "-LRB-", "even", "if", "we", "have", "a", "computed", "value", "for", "it", "-RRB-", ",", "meaning", "that", "either", "the", "value", "can", "be", "used", "directly", "-LRB-", "e.g.", "pixels", "-RRB-", "or", "there", "is", "a", "fixed", "context-independent", "conversion", "for", "it", "-LRB-", "e.g.", "inches", "-RRB-", ".", "Proportional", "types", "-LRB-", "e.g.", "%", "-RRB-", "return", "false", "."], "path": "plutogeek/flyingsaucer/tree/master/flying-saucer-core/src/main/java/org/xhtmlrenderer/css/constants/ValueConstants.java", "idx": 1353}
{"memberVariables": {}, "code": ["boolean", "function", "(", ")", "{", "return", "(", "System", ".", "getProperty", "(", "\"mrj.version\"", ")", "!=", "null", ")", ";", "}"], "memberFunctions": {"isSunJdk": [["boolean"]], "isWin32": [["boolean"]]}, "className": "OsUtil", "renamed": ["boolean", "function", "(", ")", "{", "return", "(", "System", ".", "getProperty", "(", "\"srini_string\"", ")", "!=", "null", ")", ";", "}"], "nl": "Check whether we deal with a Macintosh.", "nlToks": ["Check", "whether", "we", "deal", "with", "a", "Macintosh", "."], "path": "pichiliani/CoArgoUML/tree/master/v0.24/fonte/src/argouml-app/src/org/argouml/util/osdep/OsUtil.java", "idx": 1354}
{"memberVariables": {"instance": "Position"}, "code": ["void", "function", "(", ")", "{", "assertEquals", "(", "25.0", ",", "instance", ".", "getLongitude", "(", ")", ",", "0.0000001", ")", ";", "}"], "memberFunctions": {"testGetLatitude": [["void"]], "testSetIllegalLatitudeSouth": [["void"]], "testDistanceToSelf": [["void"]], "testSetIllegalLongitudeWest": [["void"]], "testGetDatum": [["void"]], "testSetLatitudeSouth": [["void"]], "testDistanceTo": [["void"]], "testSetIllegalLongitudeEast": [["void"]], "testToWaypoint": [["void"]], "testSetLongitudeEast": [["void"]], "setUp": [["void"]], "testSetLongitudeWest": [["void"]], "testGetLatitudeHemisphere": [["void"]], "testSetLatitudeNorth": [["void"]], "testGetLongitudeHemisphere": [["void"]], "testSetIllegalLatitudeNorth": [["void"]]}, "className": "PositionTest", "renamed": ["void", "function", "(", ")", "{", "assertEquals", "(", "25.0", ",", "instance", ".", "getLongitude", "(", ")", ",", "0.0000001", ")", ";", "}"], "nl": "Test for getLongitude()", "nlToks": ["Test", "for", "getLongitude", "-LRB-", "-RRB-"], "path": "pkoziol/marine-api/tree/master/src/test/java/net/sf/marineapi/nmea/util/PositionTest.java", "idx": 1358}
{"memberVariables": {"OFFSET=22": "long", "TEMP_UFS_FILE_ID=11": "long", "mBuffer=null": "ByteBuf", "LENGTH=33": "long"}, "code": ["void", "function", "(", ")", "{", "RPCFileReadRequest", "req", "=", "new", "RPCFileReadRequest", "(", "TEMP_UFS_FILE_ID", ",", "OFFSET", ",", "LENGTH", ")", ";", "assertValid", "(", "req", ")", ";", "req", "=", "new", "RPCFileReadRequest", "(", "TEMP_UFS_FILE_ID", ",", "OFFSET", ",", "0", ")", ";", "assertValid", "(", "req", ")", ";", "}"], "memberFunctions": {"encodedLength": [["void"]], "invalidLength": [["void"]], "assertInvalid": [["void", "RPCFileReadRequest req"]], "encodeDecode": [["void"]], "before": [["void"]], "assertValid": [["void", "long tempUfsFileId", "long offset", "long length", "RPCFileReadRequest req"], ["void", "RPCFileReadRequest req"]], "negativeOffset": [["void"]], "validate": [["void"]]}, "className": "RPCFileReadRequestTest", "renamed": ["void", "function", "(", ")", "{", "RPCFileReadRequest", "loc0", "=", "new", "RPCFileReadRequest", "(", "TEMP_UFS_FILE_ID", ",", "OFFSET", ",", "LENGTH", ")", ";", "assertValid", "(", "loc0", ")", ";", "loc0", "=", "new", "RPCFileReadRequest", "(", "TEMP_UFS_FILE_ID", ",", "OFFSET", ",", "0", ")", ";", "assertValid", "(", "loc0", ")", ";", "}"], "nl": "Tests the  {@link RPCFileReadRequest#RPCFileReadRequest(long,long,long)} constructor with avalid length.", "nlToks": ["Tests", "the", "-LCB-", "@link", "RPCFileReadRequest", "#RPCFileReadRequest", "-LRB-", "long", ",", "long", ",", "long", "-RRB-", "-RCB-", "constructor", "with", "avalid", "length", "."], "path": "poemlin/alluxio/tree/master/core/server/src/test/java/alluxio/network/protocol/RPCFileReadRequestTest.java", "idx": 1359}
{"memberVariables": {"COMPACT_SERIALIZED_SIZE=Block.HEADER_SIZE + CHAIN_WORK_BYTES + 4": "int", "chainWork": "BigInteger", "CHAIN_WORK_BYTES=12": "int", "header": "Block", "serialVersionUID=-6097565241243701771L": "long", "EMPTY_BYTES=new byte[CHAIN_WORK_BYTES]": "byte[]", "height": "int"}, "code": ["boolean", "function", "(", "StoredBlock", "other", ")", "{", "return", "chainWork", ".", "compareTo", "(", "other", ".", "chainWork", ")", ">", "0", ";", "}"], "memberFunctions": {"getHeight": [["int"]], "getChainWork": [["BigInteger"]], "deserializeCompact": [["StoredBlock", "NetworkParameters params", "ByteBuffer buffer"]], "build": [["StoredBlock", "Block block"]], "serializeCompact": [["void", "ByteBuffer buffer"]], "hashCode": [["int"]], "equals": [["boolean", "Object o"]], "toString": [["String"]], "getPrev": [["StoredBlock", "BlockStore store"]], "getHeader": [["Block"]]}, "className": "StoredBlock", "renamed": ["boolean", "function", "(", "StoredBlock", "arg0", ")", "{", "return", "chainWork", ".", "compareTo", "(", "arg0", ".", "chainWork", ")", ">", "0", ";", "}"], "nl": "Returns true if this objects chainWork is higher than the others.", "nlToks": ["Returns", "true", "if", "this", "objects", "chainWork", "is", "higher", "than", "the", "others", "."], "path": "1000000000001/bitcoinj/tree/master/core/src/main/java/org/bitcoinj/core/StoredBlock.java", "idx": 1360}
{"memberVariables": {"dataSetFieldColumnMapping": "Map<String,Field>", "LOGGER=LoggerFactory.getLogger(FetcherTesterDataSetVerifier.class)": "Logger", "fetcherContext": "IFetcherContext", "fetcherRegDataUnitVerifier": "IFetcherTesterDataUnitVerifier"}, "code": ["void", "function", "(", ")", "{", "dataSetFieldColumnMapping", "=", "fetcherRegDataUnitVerifier", ".", "buildFieldAndColumnMapping", "(", "new", "PCLDataSetEntity", "(", ")", ")", ";", "}"], "memberFunctions": {"getDataSetCompareKey": [["String", "PCLDataSetEntity dataSetEntity"]], "verifyDataSet": [["List<RegPCLTestResultDetailsEntity>", "FeedTestConfig feedTestConfig", "List<PCLDataSetEntity> expectedDataSetLst", "List<PCLDataSetEntity> pclDataSetLst"]]}, "className": "FetcherTesterDataSetVerifier", "renamed": ["void", "function", "(", ")", "{", "dataSetFieldColumnMapping", "=", "fetcherRegDataUnitVerifier", ".", "buildFieldAndColumnMapping", "(", "new", "PCLDataSetEntity", "(", ")", ")", ";", "}"], "nl": "Inits the.", "nlToks": ["Inits", "the", "."], "path": "pkesireddy/portico_fletcher/tree/master/FetcherTesterService/src/main/java/org/ithaka/cm/fetchertester/bo/FetcherTesterDataSetVerifier.java", "idx": 1362}
{"memberVariables": {"connection=null": "Connection", "targetEPR=null": "String", "properties": "Hashtable<String,String>", "log=LogFactory.getLog(RabbitMQMessageSender.class)": "Log"}, "code": ["void", "function", "(", ")", "{", "if", "(", "connection", "!=", "null", "&&", "connection", ".", "isOpen", "(", ")", ")", "{", "try", "{", "connection", ".", "close", "(", ")", ";", "}", "catch", "(", "IOException", "e", ")", "{", "handleException", "(", "\"Error while closing the connection ..\"", ",", "e", ")", ";", "}", "finally", "{", "connection", "=", "null", ";", "}", "}", "}"], "memberFunctions": {"buildBasicProperties": [["AMQP.BasicProperties.Builder", "RabbitMQMessage message"]], "handleException": [["void", "String s"], ["void", "String message", "Exception e"]], "send": [["void", "RabbitMQMessage message", "MessageContext msgContext"]]}, "className": "RabbitMQMessageSender", "renamed": ["void", "function", "(", ")", "{", "if", "(", "connection", "!=", "null", "&&", "connection", ".", "isOpen", "(", ")", ")", "{", "try", "{", "connection", ".", "close", "(", ")", ";", "}", "catch", "(", "IOException", "loc0", ")", "{", "handleException", "(", "\"srini_string\"", ",", "loc0", ")", ";", "}", "finally", "{", "connection", "=", "null", ";", "}", "}", "}"], "nl": "Close the connection", "nlToks": ["Close", "the", "connection"], "path": "harsha89/wso2-axis2-transports/tree/master/modules/rabbitmq/src/main/java/org/apache/axis2/transport/rabbitmq/RabbitMQMessageSender.java", "idx": 1364}
{"memberVariables": {"coinbase": "boolean", "serialVersionUID=-8744924157056340509L": "long", "index": "long", "value": "Coin", "scriptBytes": "byte[]", "hash": "Sha256Hash", "height": "int"}, "code": ["Sha256Hash", "function", "(", ")", "{", "return", "hash", ";", "}"], "memberFunctions": {"getValue": [["Coin"]], "getHeight": [["int"]], "getIndex": [["long"]], "isCoinbase": [["boolean"]], "hashCode": [["int"]], "serializeToStream": [["void", "OutputStream bos"]], "equals": [["boolean", "Object o"]], "toString": [["String"]], "getScriptBytes": [["byte[]"]]}, "className": "StoredTransactionOutput", "renamed": ["Sha256Hash", "function", "(", ")", "{", "return", "hash", ";", "}"], "nl": "The hash of the transaction which holds this output.", "nlToks": ["The", "hash", "of", "the", "transaction", "which", "holds", "this", "output", "."], "path": "1000000000001/bitcoinj/tree/master/core/src/main/java/org/bitcoinj/core/StoredTransactionOutput.java", "idx": 1366}
{"memberVariables": {"tagList": "OpenTagRegister", "elmId=0": "int"}, "code": ["void", "function", "(", ")", "{", "ASTElement", "elm", "=", "element", "(", "\"a\"", ")", ";", "ASTElement", "elm2", "=", "element", "(", "\"b\"", ")", ";", "ASTElement", "elm3", "=", "element", "(", "\"b\"", ")", ";", "tagList", ".", "openTag", "(", "elm", ")", ";", "tagList", ".", "openTag", "(", "elm2", ")", ";", "tagList", ".", "openTag", "(", "elm3", ")", ";", "tagList", ".", "closeTag", "(", "elm", ")", ";", "assertFalse", "(", "elm", ".", "isUnclosed", "(", ")", ")", ";", "assertTrue", "(", "elm2", ".", "isUnclosed", "(", ")", ")", ";", "assertTrue", "(", "elm3", ".", "isUnclosed", "(", ")", ")", ";", "}"], "memberFunctions": {"openedIsolatedTag": [["void"]], "interleavedTags": [["void"]], "newRegister": [["void"]], "testSimpleNesting": [["void"]], "unopenedTags": [["void"]], "element": [["ASTElement", "String name"]]}, "className": "OpenTagRegisterTest", "renamed": ["void", "function", "(", ")", "{", "ASTElement", "loc0", "=", "element", "(", "\"srini_string\"", ")", ";", "ASTElement", "loc1", "=", "element", "(", "\"srini_string\"", ")", ";", "ASTElement", "loc2", "=", "element", "(", "\"srini_string\"", ")", ";", "tagList", ".", "openTag", "(", "loc0", ")", ";", "tagList", ".", "openTag", "(", "loc1", ")", ";", "tagList", ".", "openTag", "(", "loc2", ")", ";", "tagList", ".", "closeTag", "(", "loc0", ")", ";", "assertFalse", "(", "loc0", ".", "isUnclosed", "(", ")", ")", ";", "assertTrue", "(", "loc1", ".", "isUnclosed", "(", ")", ")", ";", "assertTrue", "(", "loc2", ".", "isUnclosed", "(", ")", ")", ";", "}"], "nl": "&lt;a&gt; &lt;b&gt; &lt;b&gt; &lt;/a&gt;", "nlToks": ["<", "a", ">", "<", "b", ">", "<", "b", ">", "<", "/", "a", ">"], "path": "adangel/pmd/tree/master/pmd-visualforce/src/test/java/net/sourceforge/pmd/lang/vf/ast/OpenTagRegisterTest.java", "idx": 1367}
{"memberVariables": {"mapping=new LinkedHashMap<String,String>()": "Map<String,String>", "writer": "XMLStreamWriter", "inCDATA": "boolean"}, "code": ["void", "function", "(", "char", "ch", "[", "]", ",", "int", "start", ",", "int", "length", ")", "{", "try", "{", "writer", ".", "writeCharacters", "(", "ch", ",", "start", ",", "length", ")", ";", "}", "catch", "(", "XMLStreamException", "e", ")", "{", "throw", "new", "SAXException", "(", "e", ")", ";", "}", "}"], "memberFunctions": {"getPrefix": [["String", "String ns", "String namespaceURI"]], "endPrefixMapping": [["void", "String prefix"]], "startElement": [["void", "String namespaceURI", "String localName", "String qName", "Attributes atts"]], "startEntity": [["void", "String name"]], "endCDATA": [["void"]], "endDocument": [["void"]], "startDocument": [["void"]], "endEntity": [["void", "String name"]], "startDTD": [["void", "String name", "String publicId", "String systemId"]], "endDTD": [["void"]], "characters": [["void", "char ch[]", "int start", "int length"]], "startCDATA": [["void"]], "startPrefixMapping": [["void", "String prefix", "String uri"]], "endElement": [["void", "String namespaceURI", "String localName", "String qName"]], "skippedEntity": [["void", "String name"]], "comment": [["void", "char[] ch", "int start", "int length"]], "setDocumentLocator": [["void", "Locator locator"]], "processingInstruction": [["void", "String target", "String data"]]}, "className": "StreamWriterContentHandler", "renamed": ["void", "function", "(", "char", "arg0", "[", "]", ",", "int", "arg1", ",", "int", "arg2", ")", "{", "try", "{", "writer", ".", "writeCharacters", "(", "arg0", ",", "arg1", ",", "arg2", ")", ";", "}", "catch", "(", "XMLStreamException", "loc0", ")", "{", "throw", "new", "SAXException", "(", "loc0", ")", ";", "}", "}"], "nl": "Method ignorableWhitespace.", "nlToks": ["Method", "ignorableWhitespace", "."], "path": "primesign/cxf/tree/master/core/src/main/java/org/apache/cxf/staxutils/StreamWriterContentHandler.java", "idx": 1369}
{"memberVariables": {"iConstant": "int", "iTotal=0": "int"}, "code": ["HashCodeBuilder", "function", "(", "Object", "[", "]", "array", ")", "{", "if", "(", "array", "==", "null", ")", "{", "iTotal", "=", "iTotal", "*", "iConstant", ";", "}", "else", "{", "for", "(", "Object", "element", ":", "array", ")", "{", "append", "(", "element", ")", ";", "}", "}", "return", "this", ";", "}"], "memberFunctions": {"appendSuper": [["HashCodeBuilder", "int superHashCode"]], "toHashCode": [["int"]]}, "className": "HashCodeBuilder", "renamed": ["HashCodeBuilder", "function", "(", "Object", "[", "]", "arg0", ")", "{", "if", "(", "arg0", "==", "null", ")", "{", "iTotal", "=", "iTotal", "*", "iConstant", ";", "}", "else", "{", "for", "(", "Object", "loc0", ":", "arg0", ")", "{", "append", "(", "loc0", ")", ";", "}", "}", "return", "this", ";", "}"], "nl": " Append a hashCode for an Object array. ", "nlToks": ["Append", "a", "hashCode", "for", "an", "Object", "array", "."], "path": "007slm/citrus/tree/master/common/util/src/main/java/com/alibaba/citrus/util/internal/apache/lang/HashCodeBuilder.java", "idx": 1370}
{"memberVariables": {"testData": "String", "method": "String", "filepath": "String", "step": "String", "stepResult": "String", "time": "String"}, "code": ["void", "function", "(", "String", "value", ")", "{", "this", ".", "filepath", "=", "value", ";", "}"], "memberFunctions": {"setMethod": [["void", "String value"]], "setStepResult": [["void", "String value"]], "getTime": [["String"]], "getStep": [["String"]], "getFilepath": [["String"]], "getTestData": [["String"]], "getMethod": [["String"]], "getStepResult": [["String"]], "setStep": [["void", "String value"]], "setTestData": [["void", "String value"]], "setTime": [["void", "String value"]]}, "className": "Steps", "renamed": ["void", "function", "(", "String", "arg0", ")", "{", "this", ".", "filepath", "=", "arg0", ";", "}"], "nl": "Sets the value of the filepath property.", "nlToks": ["Sets", "the", "value", "of", "the", "filepath", "property", "."], "path": "prabalbsws/selenium_automation/tree/master/src/newpojo/Steps.java", "idx": 1372}
{"memberVariables": {"_printer": "Printer", "_sharedContext": "SharedContext"}, "code": ["void", "function", "(", ")", "{", "_sharedContext", ".", "flushFonts", "(", ")", ";", "(", "(", "SWTReplacedElementFactory", ")", "_sharedContext", ".", "getReplacedElementFactory", "(", ")", ")", ".", "clean", "(", ")", ";", "UserAgentCallback", "uac", "=", "_sharedContext", ".", "getUac", "(", ")", ";", "if", "(", "uac", "instanceof", "NaiveUserAgent", ")", "{", "(", "(", "NaiveUserAgent", ")", "uac", ")", ".", "disposeCache", "(", ")", ";", "}", "}"], "memberFunctions": {"loadDocument": [["Document", "final String uri"]], "print": [["void", "Document doc", "String url", "NamespaceHandler nsh", "String jobName", "int startPage", "int endPage"], ["void", "String url", "NamespaceHandler nsh", "String jobName", "int startPage", "int endPage"], ["void", "Printer printer", "Document doc", "String url", "NamespaceHandler nsh", "String jobName", "int startPage", "int endPage"], ["void", "Printer printer", "String url", "NamespaceHandler nsh", "String jobName", "int startPage", "int endPage"], ["void", "PrinterData printerData", "Document doc", "String url", "NamespaceHandler nsh", "String jobName"], ["void", "PrinterData printerData", "String url", "NamespaceHandler nsh", "String jobName"]], "printDialog": [["void", "Shell shell", "Document doc", "String url", "NamespaceHandler nsh", "String jobName"], ["void", "Shell shell", "String url", "NamespaceHandler nsh", "String jobName"]], "isFocus": [["boolean", "Element e"]], "isHover": [["boolean", "Element e"]], "newLayoutcontext": [["LayoutContext", "GC gc"]], "isActive": [["boolean", "Element e"]], "newRenderingContext": [["RenderingContext", "GC gc"]]}, "className": "PrinterRenderer", "renamed": ["void", "function", "(", ")", "{", "_sharedContext", ".", "flushFonts", "(", ")", ";", "(", "(", "SWTReplacedElementFactory", ")", "_sharedContext", ".", "getReplacedElementFactory", "(", ")", ")", ".", "clean", "(", ")", ";", "UserAgentCallback", "loc0", "=", "_sharedContext", ".", "getUac", "(", ")", ";", "if", "(", "loc0", "instanceof", "NaiveUserAgent", ")", "{", "(", "(", "NaiveUserAgent", ")", "loc0", ")", ".", "disposeCache", "(", ")", ";", "}", "}"], "nl": "Dispose resources used by this  {@link PrinterRenderer}. This does NOT dispose the attached  {@link Printer}.", "nlToks": ["Dispose", "resources", "used", "by", "this", "-LCB-", "@link", "PrinterRenderer", "-RCB-", ".", "This", "does", "NOT", "dispose", "the", "attached", "-LCB-", "@link", "Printer", "-RCB-", "."], "path": "plutogeek/flyingsaucer/tree/master/flying-saucer-swt/src/main/java/org/xhtmlrenderer/swt/PrinterRenderer.java", "idx": 1373}
{"memberVariables": {"uniqueName": "String", "project=null": "Project"}, "code": ["String", "function", "(", ")", "{", "String", "s", "=", "uniqueName", ";", "if", "(", "s", "!=", "null", ")", "{", "if", "(", "!", "s", ".", "endsWith", "(", "getZipFileExtension", "(", ")", ")", ")", "{", "s", "+=", "getZipFileExtension", "(", ")", ";", "}", "}", "return", "s", ";", "}"], "memberFunctions": {"makeUniqueName": [["void", "String s"]], "getType": [["String"]], "getZipName": [["String"]], "toString": [["String"]], "remove": [["void"]], "getZipFileExtension": [["String"]]}, "className": "AbstractProjectMember", "renamed": ["String", "function", "(", ")", "{", "String", "loc0", "=", "uniqueName", ";", "if", "(", "loc0", "!=", "null", ")", "{", "if", "(", "!", "loc0", ".", "endsWith", "(", "getZipFileExtension", "(", ")", ")", ")", "{", "loc0", "+=", "getZipFileExtension", "(", ")", ";", "}", "}", "return", "loc0", ";", "}"], "nl": "In contrast to  {@link #getZipName()} returns the member'sname without the prepended name of the project (but with the extension).  TODO: This is not used anywhere - shall we remove it?", "nlToks": ["In", "contrast", "to", "-LCB-", "@link", "#getZipName", "-LRB-", "-RRB-", "-RCB-", "returns", "the", "member", "`", "sname", "without", "the", "prepended", "name", "of", "the", "project", "-LRB-", "but", "with", "the", "extension", "-RRB-", ".", "TODO", ":", "This", "is", "not", "used", "anywhere", "-", "shall", "we", "remove", "it", "?"], "path": "pichiliani/CoArgoUML/tree/master/v0.24/fonte/src/argouml-app/src/org/argouml/kernel/AbstractProjectMember.java", "idx": 1374}
{"memberVariables": {"FRIENDLY_FORMAT=MonetaryFormat.FIAT.postfixCode()": "MonetaryFormat", "PLAIN_FORMAT=MonetaryFormat.FIAT.minDecimals(0).repeatOptionalDecimals(1,4).noCode()": "MonetaryFormat", "SMALLEST_UNIT_EXPONENT=4": "int", "value": "long", "currencyCode": "String"}, "code": ["long", "function", "(", ")", "{", "return", "this", ".", "value", ";", "}"], "memberFunctions": {"add": [["Fiat", "final Fiat value"]], "signum": [["int"]], "isNegative": [["boolean"]], "isLessThan": [["boolean", "Fiat other"]], "getCurrencyCode": [["String"]], "valueOf": [["Fiat", "final String currencyCode", "final long value"]], "subtract": [["Fiat", "final Fiat value"]], "isGreaterThan": [["boolean", "Fiat other"]], "isPositive": [["boolean"]], "smallestUnitExponent": [["int"]], "toPlainString": [["String"]], "compareTo": [["int", "final Fiat other"]], "getValue": [["long"]], "toFriendlyString": [["String"]], "divideAndRemainder": [["Fiat[]", "final long divisor"]], "negate": [["Fiat"]], "hashCode": [["int"]], "equals": [["boolean", "final Object o"]], "isZero": [["boolean"]], "divide": [["Fiat", "final long divisor"], ["long", "final Fiat divisor"]], "toString": [["String"]], "multiply": [["Fiat", "final long factor"]], "parseFiat": [["Fiat", "final String currencyCode", "final String str"]]}, "className": "Fiat", "renamed": ["long", "function", "(", ")", "{", "return", "this", ".", "value", ";", "}"], "nl": "Returns the number of satoshis of this monetary value. It's deprecated in favour of accessing  {@link #value}directly.", "nlToks": ["Returns", "the", "number", "of", "satoshis", "of", "this", "monetary", "value", ".", "It", "'s", "deprecated", "in", "favour", "of", "accessing", "-LCB-", "@link", "#value", "-RCB-", "directly", "."], "path": "1000000000001/bitcoinj/tree/master/core/src/main/java/org/bitcoinj/utils/Fiat.java", "idx": 1375}
{"memberVariables": {"THIS_DOT=\"this.\"": "String", "image": "String", "argumentCount": "int", "SUPER_DOT=\"super.\"": "String", "SUPER=\"super\"": "String", "qualifiedName": "NameOccurrence", "location": "JavaNode", "isMethodOrConstructorInvocation": "boolean", "THIS=\"this\"": "String"}, "code": ["boolean", "function", "(", ")", "{", "return", "THIS", ".", "equals", "(", "image", ")", "||", "SUPER", ".", "equals", "(", "image", ")", ";", "}"], "memberFunctions": {"getLocation": [["JavaNode"]], "isMethodReference": [["boolean"]], "setIsMethodOrConstructorInvocation": [["void"]], "getNameForWhichThisIsAQualifier": [["NameOccurrence"]], "thirdChildHasDottedName": [["boolean", "Node primaryExpression"]], "isMethodOrConstructorInvocation": [["boolean"]], "isCompoundAssignment": [["boolean", "Node primaryExpression"]], "isOnRightHandSide": [["boolean"]], "isStandAlonePostfix": [["boolean", "Node primaryExpression"]], "isSelfAssignment": [["boolean"]], "getArgumentCount": [["int"]], "hasAssignmentOperator": [["boolean", "Node node"]], "isPartOfQualifiedName": [["boolean"]], "useThisOrSuper": [["boolean"]], "hashCode": [["int"]], "equals": [["boolean", "Object o"]], "isOnLeftHandSide": [["boolean"]], "setArgumentCount": [["void", "int count"]], "toString": [["String"]], "setNameWhichThisQualifies": [["void", "NameOccurrence qualifiedName"]], "getImage": [["String"]]}, "className": "JavaNameOccurrence", "renamed": ["boolean", "function", "(", ")", "{", "return", "THIS", ".", "equals", "(", "image", ")", "||", "SUPER", ".", "equals", "(", "image", ")", ";", "}"], "nl": "Simply return true is the image is equal to keyword 'this' or 'super'.", "nlToks": ["Simply", "return", "true", "is", "the", "image", "is", "equal", "to", "keyword", "`", "this", "'", "or", "`", "super", "'", "."], "path": "adangel/pmd/tree/master/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/symboltable/JavaNameOccurrence.java", "idx": 1380}
{"memberVariables": {"EXAMPLE=\"$RATTM,11,25.3,13.7,T,7.0,20.0,T,10.1,20.2,N,NAME,Q,,175550.24,A*34\"": "String", "ttm": "TTMParser", "empty": "TTMParser"}, "code": ["void", "function", "(", ")", "{", "Time", "t", "=", "ttm", ".", "getTime", "(", ")", ";", "assertNotNull", "(", "t", ")", ";", "assertEquals", "(", "17", ",", "t", ".", "getHour", "(", ")", ")", ";", "assertEquals", "(", "55", ",", "t", ".", "getMinutes", "(", ")", ")", ";", "assertEquals", "(", "50.24", ",", "t", ".", "getSeconds", "(", ")", ",", "0.001", ")", ";", "}"], "memberFunctions": {"testGetAcquisitionType": [["void"]], "testGetDistance": [["void"]], "testSetStatus": [["void"]], "testSetNumber": [["void"]], "testSetDistanceOfCPA": [["void"]], "testConstructor": [["void"]], "testSetCourse": [["void"]], "testGetName": [["void"]], "testGetNumber": [["void"]], "testGetDistanceOfCPA": [["void"]], "setUp": [["void"]], "testGetCourse": [["void"]], "testSetReferenceTrue": [["void"]], "testSetReferenceFalse": [["void"]], "testSetAcquisitionType": [["void"]], "testSetBearing": [["void"]], "testGetBearing": [["void"]], "testSetDistance": [["void"]], "testSetTimeToCPA": [["void"]], "testSetTime": [["void"]], "testGetSpeed": [["void"]], "testGetStatus": [["void"]], "testGetTimeToCPA": [["void"]], "testSetName": [["void"]], "testSetSpeed": [["void"]]}, "className": "TTMTest", "renamed": ["void", "function", "(", ")", "{", "Time", "loc0", "=", "ttm", ".", "getTime", "(", ")", ";", "assertNotNull", "(", "loc0", ")", ";", "assertEquals", "(", "17", ",", "loc0", ".", "getHour", "(", ")", ")", ";", "assertEquals", "(", "55", ",", "loc0", ".", "getMinutes", "(", ")", ")", ";", "assertEquals", "(", "50.24", ",", "loc0", ".", "getSeconds", "(", ")", ",", "0.001", ")", ";", "}"], "nl": "Test method for {@link net.sf.marineapi.nmea.parser.TTMParser#getTime()} .", "nlToks": ["Test", "method", "for", "-LCB-", "@link", "net.sf.marineapi.nmea.parser.TTMParser", "#getTime", "-LRB-", "-RRB-", "-RCB-", "."], "path": "pkoziol/marine-api/tree/master/src/test/java/net/sf/marineapi/nmea/parser/TTMTest.java", "idx": 1381}
{"memberVariables": {"string1": "String"}, "code": ["String", "function", "(", ")", "{", "return", "string1", ";", "}"], "memberFunctions": {"setString1": [["void", "String value"]]}, "className": "Echo", "renamed": ["String", "function", "(", ")", "{", "return", "string1", ";", "}"], "nl": "Gets the value of the string1 property.", "nlToks": ["Gets", "the", "value", "of", "the", "string1", "property", "."], "path": "primesign/cxf/tree/master/systests/jaxws/src/test/java/org/apache/cxf/systest/jaxws/Echo.java", "idx": 1382}
{"memberVariables": {"serialVersionUID=928301275168169633L": "long", "userStoreDomain": "String", "userName": "String", "tenantDomain": "String"}, "code": ["void", "function", "(", "String", "userName", ")", "{", "this", ".", "userName", "=", "userName", ";", "}"], "memberFunctions": {"getTenantDomain": [["String"]], "getUserStoreDomain": [["String"]], "setUserStoreDomain": [["void", "String userStoreDomain"]], "build": [["User", "OMElement userOM"]], "getUserName": [["String"]], "toString": [["String"]], "setTenantDomain": [["void", "String tenantDomain"]]}, "className": "User", "renamed": ["void", "function", "(", "String", "arg0", ")", "{", "this", ".", "userName", "=", "arg0", ";", "}"], "nl": "Sets the username of the user", "nlToks": ["Sets", "the", "username", "of", "the", "user"], "path": "harsha1979/carbon-identity/tree/master/components/application-mgt/org.wso2.carbon.identity.application.common/src/main/java/org/wso2/carbon/identity/application/common/model/User.java", "idx": 1386}
{"memberVariables": {"m_newDirectoryContents": "Collection<File>", "m_storedDirectoryContents": "Collection<File>", "m_log=LoggerFactory.getLogger(getClass())": "Logger", "m_removed": "boolean", "m_directory": "File", "m_markedForRemoval=false": "boolean"}, "code": ["void", "function", "(", ")", "{", "this", ".", "m_markedForRemoval", "=", "true", ";", "}"], "memberFunctions": {"removed": [["boolean"]], "hashCode": [["int"]], "equals": [["boolean", "final Object obj"]], "markedForRemoval": [["boolean"]], "getDirectory": [["File"]], "shouldUpdate": [["boolean"]], "setRemoved": [["void"]], "getFiles": [["Collection<File>", "final File dir"]], "updated": [["void"]]}, "className": "DirectoryUpdateTracker", "renamed": ["void", "function", "(", ")", "{", "this", ".", "m_markedForRemoval", "=", "true", ";", "}"], "nl": "Marks this directory as one that has been removed, indicating we should also remove all the directory contents.", "nlToks": ["Marks", "this", "directory", "as", "one", "that", "has", "been", "removed", ",", "indicating", "we", "should", "also", "remove", "all", "the", "directory", "contents", "."], "path": "adamfisk/littleshoot-client/tree/master/client/services/src/main/java/org/lastbamboo/client/services/DirectoryUpdateTracker.java", "idx": 1388}
{"memberVariables": {"nsh": "NamespaceHandler", "ui": "UserInterface", "uac": "UserAgentCallback"}, "code": ["boolean", "function", "(", "Object", "e", ")", "{", "return", "isLink", "(", "e", ")", "&&", "uac", ".", "isVisited", "(", "nsh", ".", "getLinkUri", "(", "(", "Element", ")", "e", ")", ")", ";", "}"], "memberFunctions": {"getClass": [["String", "Object e"]], "isLink": [["boolean", "Object e"]], "getAttributeValue": [["String", "Object e", "String attrName"], ["String", "Object e", "String namespaceURI", "String attrName"]], "isHover": [["boolean", "Object e"]], "isFocus": [["boolean", "Object e"]], "getLang": [["String", "Object e"]], "getID": [["String", "Object e"]], "getNonCssStyling": [["String", "Object e"]], "getElementStyling": [["String", "Object e"]], "isActive": [["boolean", "Object e"]]}, "className": "StandardAttributeResolver", "renamed": ["boolean", "function", "(", "Object", "arg0", ")", "{", "return", "isLink", "(", "arg0", ")", "&&", "uac", ".", "isVisited", "(", "nsh", ".", "getLinkUri", "(", "(", "Element", ")", "arg0", ")", ")", ";", "}"], "nl": "Gets the visited attribute of the StandardAttributeResolver object", "nlToks": ["Gets", "the", "visited", "attribute", "of", "the", "StandardAttributeResolver", "object"], "path": "plutogeek/flyingsaucer/tree/master/flying-saucer-core/src/main/java/org/xhtmlrenderer/context/StandardAttributeResolver.java", "idx": 1392}
{"memberVariables": {"webEngine": "WebEngine"}, "code": ["Object", "function", "(", "String", "command", ")", "{", "return", "webEngine", ".", "executeScript", "(", "command", ")", ";", "}"], "memberFunctions": {"load": [["void", "String url"]], "loadContent": [["void", "String content"]], "setOnAlert": [["void", "EventHandler<WebEvent<String>> eventHandler"]], "getLoadWorker": [["Worker<Void>"]], "setOnError": [["void", "EventHandler<WebErrorEvent> eventHandler"]]}, "className": "JavaFxWebEngine", "renamed": ["Object", "function", "(", "String", "arg0", ")", "{", "return", "webEngine", ".", "executeScript", "(", "arg0", ")", ";", "}"], "nl": "Executes the specified JavaScript Command", "nlToks": ["Executes", "the", "specified", "JavaScript", "Command"], "path": "presly808/GMapsFx/tree/master/src/main/java/com/lynden/gmapsfx/javascript/JavaFxWebEngine.java", "idx": 1393}
{"memberVariables": {"globalLog=new Result()": "Result", "log": "List<ResultEntry>", "observers": "Map<ResultObserver,ResultObserverSettings>"}, "code": ["Result", "function", "(", "ResultLevel", "level", ")", "{", "Result", "ret", "=", "new", "Result", "(", ")", ";", "for", "(", "ResultEntry", "l", ":", "this", ".", "log", ")", "{", "if", "(", "l", ".", "getLevel", "(", ")", ".", "compareTo", "(", "level", ")", "<=", "0", ")", "{", "ret", ".", "add", "(", "l", ")", ";", "}", "}", "return", "ret", ";", "}"], "memberFunctions": {"getGlobalResult": [["Result"]], "filterOut": [["Result", "List<String> sources"], ["Result", "String source"], ["Result", "ResultLevel level"]], "removeObserver": [["boolean", "ResultObserver o"]], "addObserverLogSource": [["void", "ResultObserver o", "String source"]], "setSources": [["void", "ResultObserver o", "List<String> sources"]], "remove": [["boolean", "Object arg0"]], "iterator": [["Iterator<ResultEntry>"]], "removeAll": [["boolean", "Collection<?> arg0"]], "get": [["ResultEntry", "int index"]], "toArray": [["Object[]"], ["T[]", "T[] arg0"]], "registerObserver": [["boolean", "ResultObserver o"]], "add": [["boolean", "ResultEntry arg0"]], "removeObserverLogSource": [["void", "ResultObserver o", "String source"]], "containsAll": [["boolean", "Collection<?> arg0"]], "clear": [["void"]], "isEmpty": [["boolean"]], "setObserverLevel": [["void", "ResultObserver o", "ResultLevel level"]], "contains": [["boolean", "Object arg0"]], "size": [["int"]], "addAll": [["boolean", "Collection<? extends ResultEntry> arg0"]], "getSoures": [["List<String>", "ResultObserver o"]], "toString": [["String"]], "notifyObserversClear": [["void"]], "notifyObserversAdd": [["void", "ResultEntry newResult"]], "retainAll": [["boolean", "Collection<?> arg0"]]}, "className": "Result", "renamed": ["Result", "function", "(", "ResultLevel", "arg0", ")", "{", "Result", "loc0", "=", "new", "Result", "(", ")", ";", "for", "(", "ResultEntry", "loc1", ":", "this", ".", "log", ")", "{", "if", "(", "loc1", ".", "getLevel", "(", ")", ".", "compareTo", "(", "arg0", ")", "<=", "0", ")", "{", "loc0", ".", "add", "(", "loc1", ")", ";", "}", "}", "return", "loc0", ";", "}"], "nl": "Complementary operation to filterOnly", "nlToks": ["Complementary", "operation", "to", "filterOnly"], "path": "0xwindows/WS-Attacker/tree/master/framework/src/main/java/wsattacker/main/plugin/result/Result.java", "idx": 1394}
{"memberVariables": {"TOP_LEVEL_PACKAGE=new PackageStats()": "PackageStats", "calculator": "OperationMetric"}, "code": ["double", "function", "(", "OperationMetricKey", "key", ",", "ASTMethodOrConstructorDeclaration", "node", ")", "{", "return", "TOP_LEVEL_PACKAGE", ".", "compute", "(", "key", ",", "node", ",", "false", ")", ";", "}"], "memberFunctions": {"getTopLevelPackageStats": [["PackageStats"]], "getCalculator": [["ClassMetric"], ["OperationMetric"]]}, "className": "Metrics", "renamed": ["double", "function", "(", "OperationMetricKey", "arg0", ",", "ASTMethodOrConstructorDeclaration", "arg1", ")", "{", "return", "TOP_LEVEL_PACKAGE", ".", "compute", "(", "arg0", ",", "arg1", ",", "false", ")", ";", "}"], "nl": "Computes a metric identified by its code on a operation AST node.", "nlToks": ["Computes", "a", "metric", "identified", "by", "its", "code", "on", "a", "operation", "AST", "node", "."], "path": "adangel/pmd/tree/master/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/oom/Metrics.java", "idx": 1395}
{"memberVariables": {"LOG=Logger.getLogger(NotationProvider.class)": "Logger", "listeners=new ArrayList<Object[]>()": "Collection<Object[]>"}, "code": ["void", "function", "(", "final", "PropertyChangeListener", "listener", ",", "Object", "modelElement", ",", "PropertyChangeEvent", "pce", ")", "{", "if", "(", "Model", ".", "getUmlFactory", "(", ")", ".", "isRemoved", "(", "modelElement", ")", ")", "{", "LOG", ".", "warn", "(", "\"Encountered deleted object during delete of \"", "+", "modelElement", ")", ";", "return", ";", "}", "cleanListener", "(", "listener", ",", "modelElement", ")", ";", "initialiseListener", "(", "listener", ",", "modelElement", ")", ";", "}"], "memberFunctions": {"getParsingHelp": [["String"]], "isValue": [["boolean", "final String key", "final Map map"]], "removeElementListener": [["void", "PropertyChangeListener listener", "Object element"]], "cleanListener": [["void", "final PropertyChangeListener listener", "final Object modelElement"]], "addElementListener": [["void", "PropertyChangeListener listener", "Object element"], ["void", "PropertyChangeListener listener", "Object element", "String property"], ["void", "PropertyChangeListener listener", "Object element", "String[] property"]], "removeAllElementListeners": [["void", "PropertyChangeListener listener"]], "toString": [["String", "Object modelElement", "Map args"]], "parse": [["void", "Object modelElement", "String text"]], "initialiseListener": [["void", "PropertyChangeListener listener", "Object modelElement"]]}, "className": "NotationProvider", "renamed": ["void", "function", "(", "final", "PropertyChangeListener", "arg0", ",", "Object", "arg1", ",", "PropertyChangeEvent", "arg2", ")", "{", "if", "(", "Model", ".", "getUmlFactory", "(", ")", ".", "isRemoved", "(", "arg1", ")", ")", "{", "LOG", ".", "warn", "(", "\"srini_string\"", "+", "arg1", ")", ";", "return", ";", "}", "cleanListener", "(", "arg0", ",", "arg1", ")", ";", "initialiseListener", "(", "arg0", ",", "arg1", ")", ";", "}"], "nl": "Update the set of listeners based on the given event.  The default implementation just removes all listeners, and then  re-initialises completely - this is method 1.  A more efficient way would be to dissect  the propertyChangeEvent, and only adapt the listeners that need to be adapted - this is method 2.  Method 2 is explained by the code below that is commented out. Method 1 is the easiest to implement, since at every arrival of an event, we just remove all old listeners, and then inspect the current model,  and add listeners where we need them. I.e. the advantage is  that we only need to traverse the model structure in one location, i.e.  the initialiseListener() method.", "nlToks": ["Update", "the", "set", "of", "listeners", "based", "on", "the", "given", "event", ".", "The", "default", "implementation", "just", "removes", "all", "listeners", ",", "and", "then", "re-initialises", "completely", "-", "this", "is", "method", "1", ".", "A", "more", "efficient", "way", "would", "be", "to", "dissect", "the", "propertyChangeEvent", ",", "and", "only", "adapt", "the", "listeners", "that", "need", "to", "be", "adapted", "-", "this", "is", "method", "2", ".", "Method", "2", "is", "explained", "by", "the", "code", "below", "that", "is", "commented", "out", ".", "Method", "1", "is", "the", "easiest", "to", "implement", ",", "since", "at", "every", "arrival", "of", "an", "event", ",", "we", "just", "remove", "all", "old", "listeners", ",", "and", "then", "inspect", "the", "current", "model", ",", "and", "add", "listeners", "where", "we", "need", "them", ".", "I.e.", "the", "advantage", "is", "that", "we", "only", "need", "to", "traverse", "the", "model", "structure", "in", "one", "location", ",", "i.e.", "the", "initialiseListener", "-LRB-", "-RRB-", "method", "."], "path": "pichiliani/CoArgoUML/tree/master/v0.24/fonte/src/argouml-app/src/org/argouml/notation/NotationProvider.java", "idx": 1397}
{"memberVariables": {}, "code": ["LinearSolver", "<", "DenseMatrix64F", ">", "function", "(", "int", "numRows", ",", "int", "numCols", ")", "{", "if", "(", "numRows", "==", "numCols", ")", "return", "linear", "(", "numRows", ")", ";", "else", "return", "leastSquares", "(", "numRows", ",", "numCols", ")", ";", "}"], "memberFunctions": {"leastSquares": [["LinearSolver<DenseMatrix64F>", "int numRows", "int numCols"]], "pseudoInverse": [["LinearSolver<DenseMatrix64F>", "boolean useSVD"]], "linear": [["LinearSolver<DenseMatrix64F>", "int matrixSize"]], "symmPosDef": [["LinearSolver<DenseMatrix64F>", "int matrixWidth"]], "adjustable": [["AdjustableLinearSolver"]], "leastSquaresQrPivot": [["LinearSolver<DenseMatrix64F>", "boolean computeNorm2", "boolean computeQ"]]}, "className": "LinearSolverFactory", "renamed": ["LinearSolver", "<", "DenseMatrix64F", ">", "function", "(", "int", "arg0", ",", "int", "arg1", ")", "{", "if", "(", "arg0", "==", "arg1", ")", "return", "linear", "(", "arg0", ")", ";", "else", "return", "leastSquares", "(", "arg0", ",", "arg1", ")", ";", "}"], "nl": "Creates a general purpose solver.  Use this if you are not sure what you need.", "nlToks": ["Creates", "a", "general", "purpose", "solver", ".", "Use", "this", "if", "you", "are", "not", "sure", "what", "you", "need", "."], "path": "adamaulia/efficient-java-matrix-library/tree/master/src/org/ejml/factory/LinearSolverFactory.java", "idx": 1398}
{"memberVariables": {"serialVersionUID=1L": "long", "isSystemDerived": "String", "isActive": "String", "predecessorId": "BigDecimal", "srcFileName": "String", "successorId": "BigDecimal", "feedId": "BigDecimal", "checksum": "String", "transmissionDatasetId": "String", "comments": "String", "inactivationReasonType": "String", "isFormatValid": "String", "dataUnitId": "long", "receiptDate": "Timestamp", "srcUniqueFileName": "String", "createdDate": "Timestamp", "dataSetId": "Long", "fileSize": "BigDecimal", "destFileName": "String", "loadedInCats": "String", "checksumType": "String", "modifiedDate": "Timestamp", "runId": "BigDecimal", "isPrepopulated": "String", "isBulk": "String", "isUpdate": "String", "receiptDateType": "String", "status": "String"}, "code": ["Long", "function", "(", ")", "{", "return", "dataSetId", ";", "}"], "memberFunctions": {"setIsSystemDerived": [["void", "String isSystemDerived"]], "setIsPrepopulated": [["void", "String isPrepopulated"]], "getStatus": [["String"]], "getIsUpdate": [["String"]], "getDataUnitId": [["long"]], "getFileSize": [["BigDecimal"]], "setInactivationReasonType": [["void", "String inactivationReasonType"]], "setDataUnitId": [["void", "long dataUnitId"]], "getComments": [["String"]], "getCreatedDate": [["Timestamp"]], "setFileSize": [["void", "BigDecimal fileSize"]], "getPredecessorId": [["BigDecimal"]], "setIsUpdate": [["void", "String isUpdate"]], "getReceiptDateType": [["String"]], "getFeedId": [["BigDecimal"]], "setReceiptDate": [["void", "Timestamp receiptDate"]], "getModifiedDate": [["Timestamp"]], "setSuccessorId": [["void", "BigDecimal successorId"]], "setDestFileName": [["void", "String destFileName"]], "setIsBulk": [["void", "String isBulk"]], "getIsFormatValid": [["String"]], "setDataSetId": [["void", "Long dataSetId"]], "setIsActive": [["void", "String isActive"]], "setChecksumType": [["void", "String checksumType"]], "setFeedId": [["void", "BigDecimal feedId"]], "getInactivationReasonType": [["String"]], "getSrcUniqueFileName": [["String"]], "setReceiptDateType": [["void", "String receiptDateType"]], "getRunId": [["BigDecimal"]], "setSrcFileName": [["void", "String srcFileName"]], "getChecksumType": [["String"]], "getSrcFileName": [["String"]], "getChecksum": [["String"]], "getDestFileName": [["String"]], "getReceiptDate": [["Timestamp"]], "setTransmissionDatasetId": [["void", "String transmissionDatasetId"]], "getTransmissionDatasetId": [["String"]], "setComments": [["void", "String comments"]], "getLoadedInCats": [["String"]], "getSuccessorId": [["BigDecimal"]], "setLoadedInCats": [["void", "String loadedInCats"]], "getIsPrepopulated": [["String"]], "setSrcUniqueFileName": [["void", "String srcUniqueFileName"]], "setChecksum": [["void", "String checksum"]], "setIsFormatValid": [["void", "String isFormatValid"]], "getIsBulk": [["String"]], "setRunId": [["void", "BigDecimal runId"]], "setStatus": [["void", "String status"]], "getIsActive": [["String"]], "setModifiedDate": [["void", "Timestamp modifiedDate"]], "setCreatedDate": [["void", "Timestamp createdDate"]], "setPredecessorId": [["void", "BigDecimal predecessorId"]], "getIsSystemDerived": [["String"]]}, "className": "PCLDataUnitEntity", "renamed": ["Long", "function", "(", ")", "{", "return", "dataSetId", ";", "}"], "nl": "Gets the data set id.", "nlToks": ["Gets", "the", "data", "set", "id", "."], "path": "pkesireddy/portico_fletcher/tree/master/FetcherTesterService/src/main/java/org/ithaka/cm/fetchertester/entity/PCLDataUnitEntity.java", "idx": 1399}
{"memberVariables": {"comments": "String", "inactivationReasonType": "String", "receiptDate": "Timestamp", "isActive": "String", "predecessorId": "BigDecimal", "srcFileName": "String", "serialVersionUID=-2837724379118220768L": "long", "srcUniqueFileName": "String", "successorId": "BigDecimal", "createdDate": "Timestamp", "pclDataUnits": "List<PCLDataUnitEntity>", "dataSetId": "long", "feedId": "BigDecimal", "fileSize": "BigDecimal", "destFileName": "String", "checksum": "String", "checksumType": "String", "modifiedDate": "Timestamp", "runId": "BigDecimal", "isPrepopulated": "String", "isUpdate": "String", "receiptDateType": "String", "status": "String"}, "code": ["void", "function", "(", "Timestamp", "modifiedDate", ")", "{", "this", ".", "modifiedDate", "=", "modifiedDate", ";", "}"], "memberFunctions": {"setFeedId": [["void", "BigDecimal feedId"]], "getInactivationReasonType": [["String"]], "getSrcUniqueFileName": [["String"]], "getDataSetId": [["long"]], "setReceiptDateType": [["void", "String receiptDateType"]], "setIsPrepopulated": [["void", "String isPrepopulated"]], "getRunId": [["BigDecimal"]], "setSrcFileName": [["void", "String srcFileName"]], "getChecksumType": [["String"]], "getSrcFileName": [["String"]], "getChecksum": [["String"]], "getStatus": [["String"]], "getDestFileName": [["String"]], "getIsUpdate": [["String"]], "getFileSize": [["BigDecimal"]], "getPclDataUnits": [["List<PCLDataUnitEntity>"]], "setPclDataUnits": [["void", "List<PCLDataUnitEntity> pclDataUnits"]], "setInactivationReasonType": [["void", "String inactivationReasonType"]], "getReceiptDate": [["Timestamp"]], "getComments": [["String"]], "getCreatedDate": [["Timestamp"]], "setComments": [["void", "String comments"]], "removePclDataUnit": [["PCLDataUnitEntity", "PCLDataUnitEntity pclDataUnit"]], "getSuccessorId": [["BigDecimal"]], "getIsPrepopulated": [["String"]], "setSrcUniqueFileName": [["void", "String srcUniqueFileName"]], "setFileSize": [["void", "BigDecimal fileSize"]], "getPredecessorId": [["BigDecimal"]], "setChecksum": [["void", "String checksum"]], "setIsUpdate": [["void", "String isUpdate"]], "getReceiptDateType": [["String"]], "getFeedId": [["BigDecimal"]], "setRunId": [["void", "BigDecimal runId"]], "setReceiptDate": [["void", "Timestamp receiptDate"]], "setStatus": [["void", "String status"]], "getModifiedDate": [["Timestamp"]], "getIsActive": [["String"]], "setSuccessorId": [["void", "BigDecimal successorId"]], "setDestFileName": [["void", "String destFileName"]], "addPclDataUnit": [["PCLDataUnitEntity", "PCLDataUnitEntity pclDataUnit"]], "setCreatedDate": [["void", "Timestamp createdDate"]], "setDataSetId": [["void", "long dataSetId"]], "setPredecessorId": [["void", "BigDecimal predecessorId"]], "setIsActive": [["void", "String isActive"]], "setChecksumType": [["void", "String checksumType"]]}, "className": "PCLDataSetEntity", "renamed": ["void", "function", "(", "Timestamp", "arg0", ")", "{", "this", ".", "modifiedDate", "=", "arg0", ";", "}"], "nl": "Sets the modified date.", "nlToks": ["Sets", "the", "modified", "date", "."], "path": "pkesireddy/portico_fletcher/tree/master/FetcherTesterService/src/main/java/org/ithaka/cm/fetchertester/entity/PCLDataSetEntity.java", "idx": 1400}
{"memberVariables": {"LOG=Logger.getLogger(Translator.class)": "Logger", "systemDefaultLocale": "Locale", "BUNDLES_PATH=\"org.argouml.i18n\"": "String", "bundles": "Map<String,ResourceBundle>", "classLoaders=new ArrayList<ClassLoader>()": "List<ClassLoader>", "initialized": "boolean"}, "code": ["void", "function", "(", ")", "{", "initInternal", "(", "\"\"", ")", ";", "}"], "memberFunctions": {"initInternal": [["void", "String s"]], "init": [["void"], ["void", "String locale"]], "localize": [["String", "String key", "Object[] args"], ["String", "String key"]], "getName": [["String", "String key"]], "addClassLoader": [["void", "ClassLoader cl"]], "loadBundle": [["void", "String name"]], "messageFormat": [["String", "String key", "Object[] args"]], "getSystemDefaultLocale": [["Locale"]], "getLocales": [["Locale[]"]], "setLocale": [["void", "String name"], ["void", "Locale locale"]]}, "className": "Translator", "renamed": ["void", "function", "(", ")", "{", "initInternal", "(", "\"srini_string\"", ")", ";", "}"], "nl": "Alternate initialization entry point for use by ArgoEclipse. It leaves out telling GEF about bundles that it won't be able to access. NOTE: This must be called before any other methods are called to work properly.", "nlToks": ["Alternate", "initialization", "entry", "point", "for", "use", "by", "ArgoEclipse", ".", "It", "leaves", "out", "telling", "GEF", "about", "bundles", "that", "it", "wo", "n't", "be", "able", "to", "access", ".", "NOTE", ":", "This", "must", "be", "called", "before", "any", "other", "methods", "are", "called", "to", "work", "properly", "."], "path": "pichiliani/CoArgoUML/tree/master/v0.24/fonte/src/argouml-app/src/org/argouml/i18n/Translator.java", "idx": 1402}
{"memberVariables": {"BYTE_ARRAY_BASE_OFFSET": "int", "theUnsafe": "Unsafe", "byteArray": "LittleEndianBytes"}, "code": ["long", "function", "(", "byte", "[", "]", "input", ",", "int", "offset", ",", "int", "length", ")", "{", "long", "result", "=", "0", ";", "int", "limit", "=", "Math", ".", "min", "(", "length", ",", "8", ")", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "limit", ";", "i", "++", ")", "{", "result", "|=", "(", "input", "[", "offset", "+", "i", "]", "&", "0xFFL", ")", "<<", "(", "i", "*", "8", ")", ";", "}", "return", "result", ";", "}"], "memberFunctions": {"load32": [["int", "byte[] source", "int offset"]], "load64": [["long", "byte[] input", "int offset"]], "putLongLittleEndian": [["void", "byte[] array", "int offset", "long value"], ["void", "byte[] array", "int offset", "long value"], ["void", "byte[] array", "int offset", "long value"], ["void", "byte[] sink", "int offset", "long value"]], "usingUnsafe": [["boolean"]], "getUnsafe": [["sun.misc.Unsafe"]], "getLongLittleEndian": [["long", "byte[] array", "int offset"], ["long", "byte[] array", "int offset"], ["long", "byte[] array", "int offset"], ["long", "byte[] source", "int offset"]], "store64": [["void", "byte[] sink", "int offset", "long value"]]}, "className": "LittleEndianByteArray", "renamed": ["long", "function", "(", "byte", "[", "]", "arg0", ",", "int", "arg1", ",", "int", "arg2", ")", "{", "long", "loc0", "=", "0", ";", "int", "loc1", "=", "Math", ".", "min", "(", "arg2", ",", "8", ")", ";", "for", "(", "int", "loc2", "=", "0", ";", "loc2", "<", "loc1", ";", "loc2", "++", ")", "{", "loc0", "|=", "(", "arg0", "[", "arg1", "+", "loc2", "]", "&", "0xFFL", ")", "<<", "(", "loc2", "*", "8", ")", ";", "}", "return", "loc0", ";", "}"], "nl": "Similar to load64, but allows offset + 8 > input.length, padding the result with zeroes. This has to explicitly reverse the order of the bytes as it packs them into the result which makes it slower than the native version.", "nlToks": ["Similar", "to", "load64", ",", "but", "allows", "offset", "+", "8", ">", "input.length", ",", "padding", "the", "result", "with", "zeroes", ".", "This", "has", "to", "explicitly", "reverse", "the", "order", "of", "the", "bytes", "as", "it", "packs", "them", "into", "the", "result", "which", "makes", "it", "slower", "than", "the", "native", "version", "."], "path": "hazendaz/guava/tree/master/guava/src/com/google/common/hash/LittleEndianByteArray.java", "idx": 1403}
{"memberVariables": {"URL_SAVED=\"configuration.save.url\"": "String", "FILE_SAVED=\"configuration.save.file\"": "String", "URL_LOADED=\"configuration.load.url\"": "String", "config=getFactory().getConfigurationHandler()": "ConfigurationHandler", "FILE_LOADED=\"configuration.load.file\"": "String"}, "code": ["int", "function", "(", "ConfigurationKey", "key", ",", "int", "defaultValue", ")", "{", "return", "config", ".", "getInteger", "(", "key", ",", "defaultValue", ")", ";", "}"], "memberFunctions": {"save": [["boolean"], ["boolean", "boolean force"]], "setInteger": [["void", "ConfigurationKey key", "int newValue"]], "getDouble": [["double", "ConfigurationKey key", "double defaultValue"], ["double", "ConfigurationKey key"]], "getString": [["String", "ConfigurationKey key"], ["String", "ConfigurationKey key", "String defaultValue"]], "removeListener": [["void", "PropertyChangeListener pcl"], ["void", "ConfigurationKey key", "PropertyChangeListener pcl"]], "getFactory": [["IConfigurationFactory"]], "setDouble": [["void", "ConfigurationKey key", "double newValue"]], "makeKey": [["ConfigurationKey", "String k1"], ["ConfigurationKey", "ConfigurationKey ck", "String k1"], ["ConfigurationKey", "String k1", "String k2"], ["ConfigurationKey", "String k1", "String k2", "String k3"], ["ConfigurationKey", "String k1", "String k2", "String k3", "String k4"], ["ConfigurationKey", "String k1", "String k2", "String k3", "String k4", "String k5"]], "setString": [["void", "ConfigurationKey key", "String newValue"]], "load": [["boolean"], ["boolean", "File file"], ["boolean", "URL url"]], "removeKey": [["void", "ConfigurationKey key"]], "getConfigurationHandler": [["ConfigurationHandler"]], "getBoolean": [["boolean", "ConfigurationKey key"], ["boolean", "ConfigurationKey key", "boolean defaultValue"]], "setBoolean": [["void", "ConfigurationKey key", "boolean newValue"]], "addListener": [["void", "PropertyChangeListener pcl"], ["void", "ConfigurationKey key", "PropertyChangeListener pcl"]]}, "className": "Configuration", "renamed": ["int", "function", "(", "ConfigurationKey", "arg0", ",", "int", "arg1", ")", "{", "return", "config", ".", "getInteger", "(", "arg0", ",", "arg1", ")", ";", "}"], "nl": "Returns the numeric value of a configuration property.", "nlToks": ["Returns", "the", "numeric", "value", "of", "a", "configuration", "property", "."], "path": "pichiliani/CoArgoUML/tree/master/v0.24/fonte/src/argouml-app/src/org/argouml/configuration/Configuration.java", "idx": 1404}
{"memberVariables": {"consoleMode": "boolean", "logger=org.apache.log4j.Logger.getLogger(ProgressMonitor.class)": "org.apache.log4j.Logger", "maxValue": "int", "showProgress": "boolean", "progressMonitor=new ProgressMonitor()": "ProgressMonitor", "log=new StringBuffer()": "StringBuffer", "currentMessage": "String", "debugMessages=new ArrayList<>()": "List<String>", "warnings=new TreeSet<>()": "TreeSet<String>", "curValue": "int", "warningCounts=new HashMap<>()": "HashMap<String,Integer>"}, "code": ["void", "function", "(", ")", "{", "progressMonitor", ".", "curValue", "++", ";", "}"], "memberFunctions": {"setCurValue": [["void", "int curValue"]], "setConsoleModeAndParseShowProgress": [["void", "String[] args"]], "setShowProgress": [["void", "boolean showProgress"]], "setCurrentMessage": [["void", "String currentMessage"]], "getMaxValue": [["int"]], "getLog": [["String"]], "logWarning": [["void", "String warning"]], "getWarnings": [["ArrayList<String>"]], "logDebug": [["void", "String debugMessage"]], "getMessages": [["ArrayList<String>"]], "isConsoleMode": [["boolean"]], "getDebugMessages": [["List<String>"]], "setMaxValue": [["void", "int maxValue"]], "isRunningOnServer": [["boolean"]], "getCurrentMessage": [["String"]], "setConsoleMode": [["void", "boolean consoleFlag"]], "getCurValue": [["int"]], "isShowProgress": [["boolean"]], "getPercentComplete": [["double"]]}, "className": "ProgressMonitor", "renamed": ["void", "function", "(", ")", "{", "progressMonitor", ".", "curValue", "++", ";", "}"], "nl": "Increments the Current Value.", "nlToks": ["Increments", "the", "Current", "Value", "."], "path": "adamabeshouse/cbioportal/tree/master/core/src/main/java/org/mskcc/cbio/portal/util/ProgressMonitor.java", "idx": 1406}
{"memberVariables": {"nodesByIds": "Map<String,Node>", "graph": "Graph<Node,Edge>"}, "code": ["Collection", "<", "Edge", ">", "function", "(", "Node", "node", ")", "{", "return", "graph", ".", "getIncidentEdges", "(", "node", ")", ";", "}"], "memberFunctions": {"getNodes": [["Collection<Node>"], ["Node[]", "Edge edge"]], "addNode": [["void", "Node node"]], "findEdgeSet": [["Collection", "Node node1", "Node node2"]], "getNodeById": [["Node", "String id"]], "getNeighbors": [["Collection<Node>", "Node node"]], "removeEdge": [["boolean", "Edge edge"]], "countNodes": [["int"], ["int", "boolean excludeDrugs"]], "getDegree": [["int", "Node node"]], "getOpposite": [["Node", "Node node", "Edge edge"]], "getEdges": [["Collection<Edge>"]], "addEdge": [["void", "Edge edge"]], "coundEdges": [["int"]], "removeNode": [["boolean", "Node node"]]}, "className": "Network", "renamed": ["Collection", "<", "Edge", ">", "function", "(", "Node", "arg0", ")", "{", "return", "graph", ".", "getIncidentEdges", "(", "arg0", ")", ";", "}"], "nl": "Returns the collection of nodes in this network which are connected to edge.", "nlToks": ["Returns", "the", "collection", "of", "nodes", "in", "this", "network", "which", "are", "connected", "to", "edge", "."], "path": "adamabeshouse/cbioportal/tree/master/core/src/main/java/org/mskcc/cbio/portal/network/Network.java", "idx": 1407}
{"memberVariables": {"localServer": "LocalTestServer"}, "code": ["HttpHost", "function", "(", ")", "{", "InetSocketAddress", "address", "=", "localServer", ".", "getServiceAddress", "(", ")", ";", "return", "new", "HttpHost", "(", "address", ".", "getHostName", "(", ")", ",", "address", ".", "getPort", "(", ")", ",", "\"http\"", ")", ";", "}"], "memberFunctions": {"tearDown": [["void"]]}, "className": "BasicServerTestBase", "renamed": ["HttpHost", "function", "(", ")", "{", "InetSocketAddress", "loc0", "=", "localServer", ".", "getServiceAddress", "(", ")", ";", "return", "new", "HttpHost", "(", "loc0", ".", "getHostName", "(", ")", ",", "loc0", ".", "getPort", "(", ")", ",", "\"srini_string\"", ")", ";", "}"], "nl": "Obtains the address of the local test server.", "nlToks": ["Obtains", "the", "address", "of", "the", "local", "test", "server", "."], "path": "pritamkhose/open-gpstracker.code/tree/master/external_sources/httpclient-4.1.1/httpclient/src/test/java/org/apache/ogt/http/localserver/BasicServerTestBase.java", "idx": 1408}
{"memberVariables": {"sequence": "SequenceType", "messageNumber": "long", "sourceSequence": "SourceSequence", "closeSequence": "CloseSequenceType", "acks": "Collection<SequenceAcknowledgement>", "lastMessage": "boolean", "namespaceURI": "String", "acksRequested": "Collection<AckRequestedType>"}, "code": ["String", "function", "(", ")", "{", "return", "namespaceURI", ";", "}"], "memberFunctions": {"setSequence": [["void", "SequenceType s"], ["void", "SourceSequence seq"]], "exposeAs": [["void", "String uri"]], "isLastMessage": [["boolean"]], "setAcks": [["void", "Collection<SequenceAcknowledgement> a"]], "getCloseSequence": [["CloseSequenceType"]], "getMessageNumber": [["long"]], "getSourceSequence": [["SourceSequence"]], "setCloseSequence": [["void", "CloseSequenceType cs"]], "setAcksRequested": [["void", "Collection<AckRequestedType> ar"]], "getAcksRequested": [["Collection<AckRequestedType>"]], "getAcks": [["Collection<SequenceAcknowledgement>"]], "getSequence": [["SequenceType"]], "addAck": [["void", "DestinationSequence seq"]]}, "className": "RMProperties", "renamed": ["String", "function", "(", ")", "{", "return", "namespaceURI", ";", "}"], "nl": "Get the WS-ReliableMessaging namespace to be used for encoding and decoding messages.", "nlToks": ["Get", "the", "WS-ReliableMessaging", "namespace", "to", "be", "used", "for", "encoding", "and", "decoding", "messages", "."], "path": "primesign/cxf/tree/master/rt/ws/rm/src/main/java/org/apache/cxf/ws/rm/RMProperties.java", "idx": 1409}
{"memberVariables": {"repository": "TerminalDeviceRepository"}, "code": ["void", "function", "(", "@", "PathVariable", "long", "device_id", ")", "{", "repository", ".", "delete", "(", "device_id", ")", ";", "}"], "memberFunctions": {"addDevice": [["void", "TerminalDevice device"]], "getStatus": [["TerminalDevice", "@PathVariable long device_id"]], "getSchedule": [["Set<Schedule>", "@PathVariable long device_id"]], "setStatus": [["void", "@ModelAttribute TerminalDevice device"]]}, "className": "TerminalDeviceController", "renamed": ["void", "function", "(", "@", "PathVariable", "long", "arg0", ")", "{", "repository", ".", "delete", "(", "arg0", ")", ";", "}"], "nl": "Remove a terminal", "nlToks": ["Remove", "a", "terminal"], "path": "adalee-group/watering-system/tree/master/server/device-service/src/main/java/edu/hucare/controller/TerminalDeviceController.java", "idx": 1410}
{"memberVariables": {"tx": "Transaction", "ti": "TableInfo", "si": "StatInfo"}, "code": ["int", "function", "(", "String", "fldname", ")", "{", "return", "si", ".", "distinctValues", "(", "fldname", ")", ";", "}"], "memberFunctions": {"schema": [["Schema"]], "blocksAccessed": [["int"]], "recordsOutput": [["int"]], "open": [["Scan"]]}, "className": "TablePlan", "renamed": ["int", "function", "(", "String", "arg0", ")", "{", "return", "si", ".", "distinctValues", "(", "arg0", ")", ";", "}"], "nl": "Estimates the number of distinct field values in the table, which is obtainable from the statistics manager.", "nlToks": ["Estimates", "the", "number", "of", "distinct", "field", "values", "in", "the", "table", ",", "which", "is", "obtainable", "from", "the", "statistics", "manager", "."], "path": "prerit2803/DBMSProject2/tree/master/simpledb/query/TablePlan.java", "idx": 1411}
{"memberVariables": {"storeStatistics": "boolean", "dgSendInterval": "MeanValue", "senderLossList": "SenderLossList", "paused=false": "boolean", "iterationStart": "long", "session": "UDTSession", "sendBuffer": "Map<Long,DataPacket>", "started=false": "boolean", "waitForSeqAckLatch=new AtomicReference<CountDownLatch>()": "AtomicReference<CountDownLatch>", "senderThread": "Thread", "lastAckSequenceNumber": "long", "stopped=false": "boolean", "largestSentSequenceNumber=-1": "long", "startLatch=new CountDownLatch(1)": "CountDownLatch", "endpoint": "UDPEndPoint", "logger=Logger.getLogger(UDTClient.class.getName())": "Logger", "waitForAckLatch=new AtomicReference<CountDownLatch>()": "AtomicReference<CountDownLatch>", "dgSendTime": "MeanValue", "unacknowledged=new AtomicInteger(0)": "AtomicInteger", "sendQueue": "BlockingQueue<DataPacket>", "throughput": "MeanThroughput", "currentSequenceNumber=0": "long", "statistics": "UDTStatistics", "sendLock=new Object()": "Object"}, "code": ["void", "function", "(", "long", "sequenceNumber", ")", "{", "while", "(", "!", "session", ".", "isShutdown", "(", ")", "&&", "!", "haveAcknowledgementFor", "(", "sequenceNumber", ")", ")", "{", "waitForSeqAckLatch", ".", "set", "(", "new", "CountDownLatch", "(", "1", ")", ")", ";", "waitForSeqAckLatch", ".", "get", "(", ")", ".", "await", "(", "10", ",", "TimeUnit", ".", "MILLISECONDS", ")", ";", "}", "}"], "memberFunctions": {"sendAck2": [["void", "long ackSequenceNumber"]], "receive": [["void", "UDTPacket p"]], "onNAKPacketReceived": [["void", "NegativeAcknowledgement nak"]], "onAcknowledge": [["void", "Acknowledgement acknowledgement"]], "handleResubmit": [["void", "Long seqNumber"]], "sendKeepAlive": [["void"]], "start": [["void"]], "senderAlgorithm": [["void"]], "pause": [["void"]], "haveAcknowledgementFor": [["boolean", "long sequenceNumber"]], "putUnacknowledgedPacketsIntoLossList": [["void"]], "initMetrics": [["void"]], "sendUdtPacket": [["boolean", "DataPacket p", "int timeout", "TimeUnit units"]], "stop": [["void"]], "getLargestSentSequenceNumber": [["long"]], "doStart": [["void"]], "isSentOut": [["boolean", "final long sequenceNumber"]], "haveLostPackets": [["boolean"]], "getLastAckSequenceNumber": [["long"]], "send": [["void", "DataPacket p"]], "getNextSequenceNumber": [["long"]], "getCurrentSequenceNumber": [["long"]]}, "className": "UDTSender", "renamed": ["void", "function", "(", "long", "arg0", ")", "{", "while", "(", "!", "session", ".", "isShutdown", "(", ")", "&&", "!", "haveAcknowledgementFor", "(", "arg0", ")", ")", "{", "waitForSeqAckLatch", ".", "set", "(", "new", "CountDownLatch", "(", "1", ")", ")", ";", "waitForSeqAckLatch", ".", "get", "(", ")", ".", "await", "(", "10", ",", "TimeUnit", ".", "MILLISECONDS", ")", ";", "}", "}"], "nl": "wait until the given sequence number has been acknowledged", "nlToks": ["wait", "until", "the", "given", "sequence", "number", "has", "been", "acknowledged"], "path": "adamfisk/littleshoot-client/tree/master/common/udt/src/main/java/udt/UDTSender.java", "idx": 1412}
{"memberVariables": {"OFFSET=22": "long", "TEMP_UFS_FILE_ID=11": "long", "mBuffer=null": "ByteBuf", "LENGTH=0": "long"}, "code": ["void", "function", "(", ")", "{", "RPCFileWriteRequest", "req", "=", "new", "RPCFileWriteRequest", "(", "TEMP_UFS_FILE_ID", ",", "OFFSET", ",", "LENGTH", ",", "null", ")", ";", "int", "encodedLength", "=", "req", ".", "getEncodedLength", "(", ")", ";", "req", ".", "encode", "(", "mBuffer", ")", ";", "Assert", ".", "assertEquals", "(", "encodedLength", ",", "mBuffer", ".", "readableBytes", "(", ")", ")", ";", "}"], "memberFunctions": {"invalidLength": [["void"]], "assertInvalid": [["void", "RPCFileWriteRequest req"]], "encodeDecode": [["void"]], "before": [["void"]], "encodeDecodeData": [["void"]], "validLength": [["void"]], "getPayloadDataBuffer": [["void"]], "assertValid": [["void", "long tempUfsFileId", "long offset", "long length", "RPCFileWriteRequest req"], ["void", "RPCFileWriteRequest req"]], "negativeOffset": [["void"]], "validate": [["void"]]}, "className": "RPCFileWriteRequestTest", "renamed": ["void", "function", "(", ")", "{", "RPCFileWriteRequest", "loc0", "=", "new", "RPCFileWriteRequest", "(", "TEMP_UFS_FILE_ID", ",", "OFFSET", ",", "LENGTH", ",", "null", ")", ";", "int", "loc1", "=", "loc0", ".", "getEncodedLength", "(", ")", ";", "loc0", ".", "encode", "(", "mBuffer", ")", ";", "Assert", ".", "assertEquals", "(", "loc1", ",", "mBuffer", ".", "readableBytes", "(", ")", ")", ";", "}"], "nl": "Tests the  {@link RPCFileReadRequest#getEncodedLength()} method.", "nlToks": ["Tests", "the", "-LCB-", "@link", "RPCFileReadRequest", "#getEncodedLength", "-LRB-", "-RRB-", "-RCB-", "method", "."], "path": "poemlin/alluxio/tree/master/core/server/src/test/java/alluxio/network/protocol/RPCFileWriteRequestTest.java", "idx": 1413}
{"memberVariables": {"DEFAULT_ATTACHMENT_TENSION=70": "int", "mListeners=new CopyOnWriteArrayList<SpringListener>()": "CopyOnWriteArrayList<SpringListener>", "mAttachmentSpringConfig": "SpringConfig", "DEFAULT_ATTACHMENT_FRICTION=10": "int", "DEFAULT_MAIN_TENSION=40": "int", "mControlSpringIndex=-1": "int", "registry=SpringConfigRegistry.getInstance()": "SpringConfigRegistry", "mMainSpringConfig": "SpringConfig", "mSpringSystem=SpringSystem.create()": "SpringSystem", "DEFAULT_MAIN_FRICTION=6": "int", "mSprings=new CopyOnWriteArrayList<Spring>()": "CopyOnWriteArrayList<Spring>", "id=0": "int"}, "code": ["SpringChain", "function", "(", ")", "{", "return", "new", "SpringChain", "(", ")", ";", "}"], "memberFunctions": {"getMainSpringConfig": [["SpringConfig"]], "getAllSprings": [["List<Spring>"]], "setControlSpringIndex": [["SpringChain", "int i"]], "onSpringActivate": [["void", "Spring spring"]], "getControlSpring": [["Spring"]], "onSpringAtRest": [["void", "Spring spring"]], "onSpringUpdate": [["void", "Spring spring"]], "addSpring": [["SpringChain", "final SpringListener listener"]], "onSpringEndStateChange": [["void", "Spring spring"]], "getAttachmentSpringConfig": [["SpringConfig"]]}, "className": "SpringChain", "renamed": ["SpringChain", "function", "(", ")", "{", "return", "new", "SpringChain", "(", ")", ";", "}"], "nl": "Factory method for creating a new SpringChain with default SpringConfig.", "nlToks": ["Factory", "method", "for", "creating", "a", "new", "SpringChain", "with", "default", "SpringConfig", "."], "path": "adilek/rebound/tree/master/rebound-android/src/main/java/com/facebook/rebound/SpringChain.java", "idx": 1414}
{"memberVariables": {"instance=null": "FileBasedConfigManager", "log=LogFactory.getLog(FileBasedConfigManager.class)": "Log"}, "code": ["boolean", "function", "(", "String", "path", ")", "{", "File", "file", "=", "new", "File", "(", "path", ")", ";", "if", "(", "file", ".", "exists", "(", ")", ")", "{", "return", "true", ";", "}", "return", "false", ";", "}"], "memberFunctions": {"getTextValue": [["String", "Element element", "String tagName"]], "getTextValueList": [["List<String>", "Element element", "String tagName"]], "getInstance": [["FileBasedConfigManager"]], "addServiceProviders": [["void"]], "readServiceProvidersFromFile": [["SAMLSSOServiceProviderDO[]"]]}, "className": "FileBasedConfigManager", "renamed": ["boolean", "function", "(", "String", "arg0", ")", "{", "File", "loc0", "=", "new", "File", "(", "arg0", ")", ";", "if", "(", "loc0", ".", "exists", "(", ")", ")", "{", "return", "true", ";", "}", "return", "false", ";", "}"], "nl": "Check whether a given file exists in the system", "nlToks": ["Check", "whether", "a", "given", "file", "exists", "in", "the", "system"], "path": "harsha1979/carbon-identity/tree/master/components/sso-saml/org.wso2.carbon.identity.sso.saml/src/main/java/org/wso2/carbon/identity/sso/saml/admin/FileBasedConfigManager.java", "idx": 1416}
{"memberVariables": {"comments": "String", "inactivationReasonType": "String", "receiptDate": "Timestamp", "isActive": "String", "predecessorId": "BigDecimal", "srcFileName": "String", "serialVersionUID=-2837724379118220768L": "long", "srcUniqueFileName": "String", "successorId": "BigDecimal", "createdDate": "Timestamp", "pclDataUnits": "List<PCLDataUnitEntity>", "dataSetId": "long", "feedId": "BigDecimal", "fileSize": "BigDecimal", "destFileName": "String", "checksum": "String", "checksumType": "String", "modifiedDate": "Timestamp", "runId": "BigDecimal", "isPrepopulated": "String", "isUpdate": "String", "receiptDateType": "String", "status": "String"}, "code": ["String", "function", "(", ")", "{", "return", "this", ".", "checksumType", ";", "}"], "memberFunctions": {"setFeedId": [["void", "BigDecimal feedId"]], "getInactivationReasonType": [["String"]], "getSrcUniqueFileName": [["String"]], "getDataSetId": [["long"]], "setReceiptDateType": [["void", "String receiptDateType"]], "setIsPrepopulated": [["void", "String isPrepopulated"]], "getRunId": [["BigDecimal"]], "setSrcFileName": [["void", "String srcFileName"]], "getSrcFileName": [["String"]], "getChecksum": [["String"]], "getStatus": [["String"]], "getDestFileName": [["String"]], "getIsUpdate": [["String"]], "getFileSize": [["BigDecimal"]], "getPclDataUnits": [["List<PCLDataUnitEntity>"]], "setPclDataUnits": [["void", "List<PCLDataUnitEntity> pclDataUnits"]], "setInactivationReasonType": [["void", "String inactivationReasonType"]], "getReceiptDate": [["Timestamp"]], "getComments": [["String"]], "getCreatedDate": [["Timestamp"]], "setComments": [["void", "String comments"]], "removePclDataUnit": [["PCLDataUnitEntity", "PCLDataUnitEntity pclDataUnit"]], "getSuccessorId": [["BigDecimal"]], "getIsPrepopulated": [["String"]], "setSrcUniqueFileName": [["void", "String srcUniqueFileName"]], "setFileSize": [["void", "BigDecimal fileSize"]], "getPredecessorId": [["BigDecimal"]], "setChecksum": [["void", "String checksum"]], "setIsUpdate": [["void", "String isUpdate"]], "getReceiptDateType": [["String"]], "getFeedId": [["BigDecimal"]], "setRunId": [["void", "BigDecimal runId"]], "setReceiptDate": [["void", "Timestamp receiptDate"]], "setStatus": [["void", "String status"]], "getModifiedDate": [["Timestamp"]], "getIsActive": [["String"]], "setSuccessorId": [["void", "BigDecimal successorId"]], "setDestFileName": [["void", "String destFileName"]], "addPclDataUnit": [["PCLDataUnitEntity", "PCLDataUnitEntity pclDataUnit"]], "setModifiedDate": [["void", "Timestamp modifiedDate"]], "setCreatedDate": [["void", "Timestamp createdDate"]], "setDataSetId": [["void", "long dataSetId"]], "setPredecessorId": [["void", "BigDecimal predecessorId"]], "setIsActive": [["void", "String isActive"]], "setChecksumType": [["void", "String checksumType"]]}, "className": "PCLDataSetEntity", "renamed": ["String", "function", "(", ")", "{", "return", "this", ".", "checksumType", ";", "}"], "nl": "Gets the checksum type.", "nlToks": ["Gets", "the", "checksum", "type", "."], "path": "pkesireddy/portico_fletcher/tree/master/FetcherTesterService/src/main/java/org/ithaka/cm/fetchertester/entity/PCLDataSetEntity.java", "idx": 1418}
{"memberVariables": {}, "code": ["void", "function", "(", "AbstractDosPlugin", "instance", ")", "{", "String", "result", "=", "instance", ".", "getName", "(", ")", ";", "assertTrue", "(", "result", ".", "length", "(", ")", ">", "0", ")", ";", "}"], "memberFunctions": {"testGetAuthor": [["void", "AbstractDosPlugin instance"]], "testCreateTamperedRequest": [["void", "AbstractDosPlugin instance"]], "setUpClass": [["void"]], "testGetVersion": [["void", "AbstractDosPlugin instance"]], "testGetCountermeasures": [["void", "AbstractDosPlugin instance"]], "setUp": [["void"]], "tearDownClass": [["void"]], "testGetDescription": [["void", "AbstractDosPlugin instance"]], "testInitializePlugin": [["void", "AbstractDosPlugin instance"]], "tearDown": [["void"]]}, "className": "GenericDosPluginTest", "renamed": ["void", "function", "(", "AbstractDosPlugin", "arg0", ")", "{", "String", "loc0", "=", "arg0", ".", "getName", "(", ")", ";", "assertTrue", "(", "loc0", ".", "length", "(", ")", ">", "0", ")", ";", "}"], "nl": "Test of getName method, of class TestDosAttack.", "nlToks": ["Test", "of", "getName", "method", ",", "of", "class", "TestDosAttack", "."], "path": "0xwindows/WS-Attacker/tree/master/plugins/Denial_of_Service/src/test/java/wsattacker/plugin/dos/GenericDosPluginTest.java", "idx": 1419}
{"memberVariables": {"deliveryAssurance": "DeliveryAssurance", "inactivityTimeout": "Long", "acknowledgementInterval": "Long", "rmNamespace": "String", "sequenceTransportSecurityRequired": "boolean", "rm10AddressingNamespace": "String", "inOrder": "boolean", "exponentialBackoff": "boolean", "baseRetransmissionInterval": "Long", "sequenceSTRRequired": "boolean"}, "code": ["long", "function", "(", ")", "{", "return", "inactivityTimeout", "==", "null", "?", "0", ":", "inactivityTimeout", ".", "longValue", "(", ")", ";", "}"], "memberFunctions": {"setInactivityTimeout": [["void", "Long inactivityTimeout"]], "setRMNamespace": [["void", "String uri"]], "getInactivityTimeout": [["Long"]], "setAcknowledgementInterval": [["void", "Long acknowledgementInterval"]], "setDeliveryAssurance": [["void", "DeliveryAssurance deliveryAssurance"]], "getAcknowledgementIntervalTime": [["long"]], "getAcknowledgementInterval": [["Long"]], "setSequenceSTRRequired": [["void", "boolean sequenceSTRRequired"]], "isSequenceTransportSecurityRequired": [["boolean"]], "getAddressingNamespace": [["String"]], "setRM10AddressingNamespace": [["void", "String addrns"]], "getRMNamespace": [["String"]], "getProtocolVariation": [["ProtocolVariation"]], "getRM10AddressingNamespace": [["String"]], "isSequenceSTRRequired": [["boolean"]], "setExponentialBackoff": [["void", "boolean exponentialBackoff"]], "isExponentialBackoff": [["boolean"]], "setInOrder": [["void", "boolean inOrder"]], "getBaseRetransmissionInterval": [["Long"]], "isInOrder": [["boolean"]], "setSequenceTransportSecurityRequired": [["void", "boolean sequenceTransportSecurityRequired"]], "setBaseRetransmissionInterval": [["void", "Long baseRetransmissionInterval"]], "getDeliveryAssurance": [["DeliveryAssurance"]]}, "className": "RMConfiguration", "renamed": ["long", "function", "(", ")", "{", "return", "inactivityTimeout", "==", "null", "?", "0", ":", "inactivityTimeout", ".", "longValue", "(", ")", ";", "}"], "nl": "Get the number of milliseconds for the inactivity timeout.", "nlToks": ["Get", "the", "number", "of", "milliseconds", "for", "the", "inactivity", "timeout", "."], "path": "primesign/cxf/tree/master/rt/ws/rm/src/main/java/org/apache/cxf/ws/rm/RMConfiguration.java", "idx": 1420}
{"memberVariables": {"HOUR=60 * MINUTE": "Integer", "MINUTE=1": "Integer"}, "code": ["ELEvaluator", "function", "(", "Date", "nominalTime", ",", "Configuration", "conf", ")", "{", "ELEvaluator", "eval", "=", "Services", ".", "get", "(", ")", ".", "get", "(", "ELService", ".", "class", ")", ".", "createEvaluator", "(", "\"coord-sla-create\"", ")", ";", "setConfigToEval", "(", "eval", ",", "conf", ")", ";", "SyncCoordAction", "appInst", "=", "new", "SyncCoordAction", "(", ")", ";", "appInst", ".", "setNominalTime", "(", "nominalTime", ")", ";", "CoordELFunctions", ".", "configureEvaluator", "(", "eval", ",", "null", ",", "appInst", ")", ";", "return", "eval", ";", "}"], "memberFunctions": {"createLazyEvaluator": [["ELEvaluator", "Date actualTime", "Date nominalTime", "Element dEvent", "Configuration conf"]], "make2Digits": [["String", "int num"]], "setConfigToEval": [["void", "ELEvaluator eval", "Configuration conf"]], "createELEvaluatorForGroup": [["ELEvaluator", "Configuration conf", "String group"]], "createELEvaluatorForDataEcho": [["ELEvaluator", "Configuration conf", "String group", "HashMap<String,String> dataNameList"]], "createURIELEvaluator": [["ELEvaluator", "String strDate"]], "getDSObject": [["SyncCoordDataset", "Element eData"]], "createInstancesELEvaluator": [["ELEvaluator", "Element event", "SyncCoordAction appInst", "Configuration conf"], ["ELEvaluator", "String tag", "Element event", "SyncCoordAction appInst", "Configuration conf"]], "createDataEvaluator": [["ELEvaluator", "Element eJob", "Configuration conf", "String actionId"]]}, "className": "CoordELEvaluator", "renamed": ["ELEvaluator", "function", "(", "Date", "arg0", ",", "Configuration", "arg1", ")", "{", "ELEvaluator", "loc0", "=", "Services", ".", "get", "(", ")", ".", "get", "(", "ELService", ".", "class", ")", ".", "createEvaluator", "(", "\"srini_string\"", ")", ";", "setConfigToEval", "(", "loc0", ",", "arg1", ")", ";", "SyncCoordAction", "loc1", "=", "new", "SyncCoordAction", "(", ")", ";", "loc1", ".", "setNominalTime", "(", "arg0", ")", ";", "CoordELFunctions", ".", "configureEvaluator", "(", "loc0", ",", "null", ",", "loc1", ")", ";", "return", "loc0", ";", "}"], "nl": "Create a SLA evaluator to be used during Materialization", "nlToks": ["Create", "a", "SLA", "evaluator", "to", "be", "used", "during", "Materialization"], "path": "pingpangkuangmo/oozie/tree/master/core/src/main/java/org/apache/oozie/coord/CoordELEvaluator.java", "idx": 1421}
{"memberVariables": {"instance": "SentenceFactory", "parsers": "Map<String,Class<? extends SentenceParser>>"}, "code": ["Sentence", "function", "(", "String", "nmea", ")", "{", "String", "sid", "=", "SentenceId", ".", "parseStr", "(", "nmea", ")", ";", "return", "createParserImpl", "(", "sid", ",", "nmea", ")", ";", "}"], "memberFunctions": {"unregisterParser": [["void", "Class<? extends SentenceParser> parser"]], "hasParser": [["boolean", "String type"]], "listParsers": [["List<String>"]], "reset": [["void"]], "registerParser": [["void", "String type", "Class<? extends SentenceParser> parser"]], "getInstance": [["SentenceFactory"]], "createParserImpl": [["Sentence", "String sid", "Object param"]]}, "className": "SentenceFactory", "renamed": ["Sentence", "function", "(", "String", "arg0", ")", "{", "String", "loc0", "=", "SentenceId", ".", "parseStr", "(", "arg0", ")", ";", "return", "createParserImpl", "(", "loc0", ",", "arg0", ")", ";", "}"], "nl": "Creates a parser for specified NMEA 0183 sentence String. The parser implementation is selected from registered parsers according to sentence type. The returned instance must be cast in to correct sentence interface, for which the type should first be checked by using the {@link Sentence#getSentenceId()} method.", "nlToks": ["Creates", "a", "parser", "for", "specified", "NMEA", "0183", "sentence", "String", ".", "The", "parser", "implementation", "is", "selected", "from", "registered", "parsers", "according", "to", "sentence", "type", ".", "The", "returned", "instance", "must", "be", "cast", "in", "to", "correct", "sentence", "interface", ",", "for", "which", "the", "type", "should", "first", "be", "checked", "by", "using", "the", "-LCB-", "@link", "Sentence", "#getSentenceId", "-LRB-", "-RRB-", "-RCB-", "method", "."], "path": "pkoziol/marine-api/tree/master/src/main/java/net/sf/marineapi/nmea/parser/SentenceFactory.java", "idx": 1423}
{"memberVariables": {}, "code": ["TimestampService", "function", "(", ")", "{", "return", "new", "TimestampServiceImpl", "(", ")", ";", "}"], "memberFunctions": {"getAccessTokenExtractor": [["AccessTokenExtractor"]], "getAccessTokenEndpoint": [["String"]], "createService": [["OAuthService", "OAuthConfig config"]], "getAuthorizationUrl": [["String", "Token requestToken"]], "getSignatureService": [["SignatureService"]], "getBaseStringExtractor": [["BaseStringExtractor"]], "getAccessTokenVerb": [["Verb"]], "getRequestTokenEndpoint": [["String"]], "getRequestTokenExtractor": [["RequestTokenExtractor"]], "getRequestTokenVerb": [["Verb"]], "getHeaderExtractor": [["HeaderExtractor"]]}, "className": "DefaultApi10a", "renamed": ["TimestampService", "function", "(", ")", "{", "return", "new", "TimestampServiceImpl", "(", ")", ";", "}"], "nl": "Returns the timestamp service.", "nlToks": ["Returns", "the", "timestamp", "service", "."], "path": "pnsantos/scribe-java/tree/master/src/main/java/org/scribe/builder/api/DefaultApi10a.java", "idx": 1424}
{"memberVariables": {"lastVersion": "String", "sb=null": "StringBuffer", "listMode=Listmode.NONE": "Listmode", "thisVersion": "String", "context": "Context", "VERSION_KEY=\"PREFS_VERSION_KEY\"": "String", "EOCL=\"END_OF_CHANGE_LOG\"": "String", "TAG=\"ChangeLog\"": "String"}, "code": ["void", "function", "(", "String", "lastVersion", ")", "{", "this", ".", "lastVersion", "=", "lastVersion", ";", "}"], "memberFunctions": {"openList": [["void", "Listmode listMode"]], "firstRun": [["boolean"]], "getLastVersion": [["String"]], "getLog": [["String"], ["String", "boolean full"]], "getThisVersion": [["String"]], "getFullLogDialog": [["AlertDialog"]], "getLogDialog": [["AlertDialog"]], "getFullLog": [["String"]], "firstRunEver": [["boolean"]], "closeList": [["void"]], "getDialog": [["AlertDialog", "boolean full"]]}, "className": "ChangeLog", "renamed": ["void", "function", "(", "String", "arg0", ")", "{", "this", ".", "lastVersion", "=", "arg0", ";", "}"], "nl": "manually set the last version name - for testing purposes only", "nlToks": ["manually", "set", "the", "last", "version", "name", "-", "for", "testing", "purposes", "only"], "path": "praveensubramaniam/android-quill/tree/master/src/sheetrock/panda/changelog/ChangeLog.java", "idx": 1425}
{"memberVariables": {"resolver": "HessianRemoteResolver", "_buffer": "byte[]"}, "code": ["void", "function", "(", "InputStream", "is", ")", "{", "}"], "memberFunctions": {"readEnd": [["void"]], "getRemoteResolver": [["HessianRemoteResolver"]], "addRef": [["int", "Object obj"]], "getMethod": [["String"]], "readHeader": [["String"]], "readReply": [["Object", "Class expectedClass"]], "resetReferences": [["void"]], "setRef": [["void", "int i", "Object obj"]], "startReply": [["void"]], "startReplyBody": [["void"]], "readCall": [["int"]], "readDouble": [["double"]], "readInputStream": [["InputStream"]], "readRemote": [["Object"]], "skipOptionalCall": [["void"]], "readInt": [["int"]], "close": [["void"]], "readMapStart": [["int"]], "readMethodArgLength": [["int"]], "readListEnd": [["void"]], "readToOutputStream": [["boolean", "OutputStream os"]], "getReader": [["Reader"]], "readString": [["String"]], "startCall": [["void"]], "isEnd": [["boolean"]], "readObject": [["Object", "Class expectedClass"], ["Object"]], "completeCall": [["void"]], "readMapEnd": [["void"]], "readUTCDate": [["long"]], "readLong": [["long"]], "readListStart": [["int"]], "readLength": [["int"]], "setSerializerFactory": [["void", "SerializerFactory ser"]], "setRemoteResolver": [["void", "HessianRemoteResolver resolver"]], "readMethod": [["String"]], "readRef": [["Object"]], "completeReply": [["void"]], "readBytes": [["byte[]"]], "readBoolean": [["boolean"]], "readNull": [["void"]], "readType": [["String"]], "readNode": [["org.w3c.dom.Node"]]}, "className": "AbstractHessianInput", "renamed": ["void", "function", "(", "InputStream", "arg0", ")", "{", "}"], "nl": "Initialize the Hessian stream with the underlying input stream.", "nlToks": ["Initialize", "the", "Hessian", "stream", "with", "the", "underlying", "input", "stream", "."], "path": "007slm/citrus/tree/master/common/hessian/src/main/java/com/alibaba/citrus/hessian/io/AbstractHessianInput.java", "idx": 1426}
{"memberVariables": {"LOG=LogUtils.getL7dLogger(SCTCanceller.class)": "Logger", "verifyProofOfPossession=true": "boolean"}, "code": ["void", "function", "(", "boolean", "verifyProofOfPossession", ")", "{", "this", ".", "verifyProofOfPossession", "=", "verifyProofOfPossession", ";", "}"], "memberFunctions": {"canHandleToken": [["boolean", "ReceivedToken targetToken"]], "matchDOMSignatureSecret": [["boolean", "MessageContext messageContext", "byte[] secretToMatch"]], "matchStreamingSignatureSecret": [["boolean", "MessageContext messageContext", "byte[] secretToMatch"]], "matchKey": [["boolean", "TokenCancellerParameters tokenParameters", "byte[] secretKey"]], "cancelToken": [["TokenCancellerResponse", "TokenCancellerParameters tokenParameters"]]}, "className": "SCTCanceller", "renamed": ["void", "function", "(", "boolean", "arg0", ")", "{", "this", ".", "verifyProofOfPossession", "=", "arg0", ";", "}"], "nl": "Set whether proof of possession is required or not to cancel a token", "nlToks": ["Set", "whether", "proof", "of", "possession", "is", "required", "or", "not", "to", "cancel", "a", "token"], "path": "primesign/cxf/tree/master/services/sts/sts-core/src/main/java/org/apache/cxf/sts/token/canceller/SCTCanceller.java", "idx": 1429}
{"memberVariables": {"policyPublisher": "PolicyPublisher", "policyDataStore": "PolicyDataStore", "log=LogFactory.getLog(EntitlementAdminEngine.class)": "Log", "entitlementDataFinder": "EntitlementDataFinder", "policyStoreManager": "PolicyStoreManager", "entitlementAdminEngines=new ConcurrentHashMap<String,EntitlementAdminEngine>()": "ConcurrentHashMap<String,EntitlementAdminEngine>", "versionManager": "PolicyVersionManager", "papPolicyStoreManager": "PAPPolicyStoreManager", "papStatusDataHandlers": "Set<PAPStatusDataHandler>", "lock=new Object()": "Object"}, "code": ["PolicyPublisher", "function", "(", ")", "{", "return", "policyPublisher", ";", "}"], "memberFunctions": {"getVersionManager": [["PolicyVersionManager"]], "getPolicyStoreManager": [["PolicyStoreManager"]], "getEntitlementDataFinder": [["EntitlementDataFinder"]], "getPapStatusDataHandlers": [["Set<PAPStatusDataHandler>"]], "getPapPolicyStoreManager": [["PAPPolicyStoreManager"]], "getPolicyDataStore": [["PolicyDataStore"]], "getInstance": [["EntitlementAdminEngine"]]}, "className": "EntitlementAdminEngine", "renamed": ["PolicyPublisher", "function", "(", ")", "{", "return", "policyPublisher", ";", "}"], "nl": "This method returns policy publisher", "nlToks": ["This", "method", "returns", "policy", "publisher"], "path": "harsha1979/carbon-identity/tree/master/components/entitlement/org.wso2.carbon.identity.entitlement/src/main/java/org/wso2/carbon/identity/entitlement/pap/EntitlementAdminEngine.java", "idx": 1430}
{"memberVariables": {"appPath=\"\"": "String", "keys": "Keys", "machine": "Machine", "logPath=\"\"": "String", "options": "Options", "playlists": "HashMap<Integer,Playlist>", "genreListModel": "DefaultListModel", "logger=Logger.getLogger(\"JaMuz\")": "Logger", "db": "DbConnJaMuz", "tags": "ArrayList<String>"}, "code": ["Options", "function", "(", ")", "{", "return", "options", ";", "}"], "memberFunctions": {"logConfig": [["void", "String id"]], "getCurrentMachine": [["boolean"]], "createLog": [["boolean"]], "getProxy": [["Proxy"]], "readTags": [["void"]], "getPlaylistsVisible": [["List<Playlist>"]], "readGenres": [["void"]], "setProxy": [["boolean"]], "connectDatabase": [["boolean"]], "getPlaylist": [["Playlist", "int id"]], "readPlaylists": [["boolean"]], "getLogger": [["Logger"]], "getTags": [["ArrayList<String>"]], "configure": [["boolean", "String appPath"]], "getKeys": [["Options"]], "getFile": [["File", "String filename", "String... args"]], "getDb": [["DbConnJaMuz"]], "getMachine": [["Machine"]], "getGenreListModel": [["DefaultListModel"]], "getHttpClient": [["DefaultHttpClient"]], "getLogPath": [["String"]], "getGenres": [["List<String>"]], "getPlaylists": [["List<Playlist>"]]}, "className": "Jamuz", "renamed": ["Options", "function", "(", ")", "{", "return", "options", ";", "}"], "nl": "Get Application options. Currently only video options.", "nlToks": ["Get", "Application", "options", ".", "Currently", "only", "video", "options", "."], "path": "phramusca/JaMuz/tree/master/src/jamuz/Jamuz.java", "idx": 1431}
{"memberVariables": {"ourInstance=new GeneralMotorCon()": "GeneralMotorCon", "spin90Time=3000": "int", "TAG=\"GMC\"": "String", "batLvl=0": "int", "threadTimer=0": "long", "spinSpeed=2": "int", "cmd": "CommandManager", "hoverTime=2000": "int", "speed=10": "int", "spin90Speed=50": "int", "drone": "ARDrone", "spinTime=50": "int"}, "code": ["void", "function", "(", "ARDrone", "drone", ")", "{", "this", ".", "drone", "=", "drone", ";", "this", ".", "cmd", "=", "this", ".", "drone", ".", "getCommandManager", "(", ")", ";", "}"], "memberFunctions": {"spin90Left": [["void"]], "spinRight": [["void"]], "takeoff": [["void"]], "forward": [["void", "int time"]], "spinLeft": [["void"]], "right": [["void"]], "lowerAltitude": [["void"]], "spin90Right": [["void"]], "landing": [["void"]], "left": [["void"]], "backward": [["void", "int time"]], "getInstance": [["GeneralMotorCon"]], "setBatLvl": [["void", "int batLvl"]], "waitFor": [["void", "int millis"]], "getBatLvl": [["int"]], "onStop": [["void"]], "raiseAltitude": [["void"]]}, "className": "GeneralMotorCon", "renamed": ["void", "function", "(", "ARDrone", "arg0", ")", "{", "this", ".", "drone", "=", "arg0", ";", "this", ".", "cmd", "=", "this", ".", "drone", ".", "getCommandManager", "(", ")", ";", "}"], "nl": "Should be called before once before any other method is called", "nlToks": ["Should", "be", "called", "before", "once", "before", "any", "other", "method", "is", "called"], "path": "02343Gruppe2/02343_Ardrone/tree/master/src/algo/GeneralMotorCon.java", "idx": 1432}
{"memberVariables": {"bitmapSetter": "BitmapSetter<T>"}, "code": ["void", "function", "(", "T", "container", ",", "String", "uri", ",", "BitmapDisplayConfig", "config", ",", "long", "total", ",", "long", "current", ")", "{", "}"], "memberFunctions": {"onPreLoad": [["void", "T container", "String uri", "BitmapDisplayConfig config"]], "onLoadCompleted": [["void", "T container", "String uri", "Bitmap bitmap", "BitmapDisplayConfig config", "BitmapLoadFrom from"]], "getDrawable": [["Drawable", "T container"]], "onLoadFailed": [["void", "T container", "String uri", "Drawable drawable"]], "setBitmap": [["void", "T container", "Bitmap bitmap"]], "onLoadStarted": [["void", "T container", "String uri", "BitmapDisplayConfig config"]], "setBitmapSetter": [["void", "BitmapSetter<T> bitmapSetter"]], "setDrawable": [["void", "T container", "Drawable drawable"]]}, "className": "BitmapLoadCallBack", "renamed": ["void", "function", "(", "T", "arg0", ",", "String", "arg1", ",", "BitmapDisplayConfig", "arg2", ",", "long", "arg3", ",", "long", "arg4", ")", "{", "}"], "nl": "Call back when loading.", "nlToks": ["Call", "back", "when", "loading", "."], "path": "13383848500/dashihui/tree/master/MIT-Afford/xutils_library/src/main/java/com/lidroid/xutils/bitmap/callback/BitmapLoadCallBack.java", "idx": 1434}
{"memberVariables": {"types=\"types\"": "String", "verbose=\"verbose\"": "String", "reportTopics=new HashMap<>()": "Map<String,Integer>", "dataflow=\"dataflow\"": "String", "should_report=new Stack<>()": "Stack<String>", "frontend=\"frontend\"": "String", "imports=\"imports\"": "String", "eq": "ErrorQueue", "loader=\"loader\"": "String", "time=\"time\"": "String", "debug=\"debug\"": "String", "cfg=\"cfg\"": "String", "context=\"context\"": "String", "visit=\"visit\"": "String", "resolver=\"resolver\"": "String", "topics=new LinkedHashSet<>()": "Collection<String>", "serialize=\"serialize\"": "String", "noReporting=true": "boolean", "errors=\"errors\"": "String"}, "code": ["void", "function", "(", "ErrorQueue", "eq", ")", "{", "Report", ".", "eq", "=", "eq", ";", "}"], "memberFunctions": {"should_report": [["boolean", "String topic", "int level"], ["boolean", "String[] topics", "int level"], ["boolean", "Collection<String> topics", "int level"]], "level": [["int", "String name"]], "pushTopic": [["void", "String topic"]], "popTopic": [["void"]], "addTopic": [["void", "String topic", "int level"]], "getQueue": [["ErrorQueue"]], "report": [["void", "int level", "String message"], ["void", "int level", "String message", "Position pos"]], "setTopic": [["void", "String topic", "int level"]]}, "className": "Report", "renamed": ["void", "function", "(", "ErrorQueue", "arg0", ")", "{", "Report", ".", "arg0", "=", "arg0", ";", "}"], "nl": "Set the error queue.", "nlToks": ["Set", "the", "error", "queue", "."], "path": "polyglot-compiler/polyglot/tree/master/src/polyglot/main/Report.java", "idx": 1436}
{"memberVariables": {"AUTHOR=2": "int", "USER=1": "int", "USER_AGENT=0": "int", "stylesheet=null": "Stylesheet", "origin=USER_AGENT": "int", "mediaTypes=new ArrayList()": "List", "title": "String", "type": "String", "uri": "String", "content": "String"}, "code": ["void", "function", "(", "Stylesheet", "stylesheet", ")", "{", "this", ".", "stylesheet", "=", "stylesheet", ";", "}"], "memberFunctions": {"addMedium": [["void", "String medium"]], "setContent": [["void", "String content"]], "getMedia": [["List"]], "getOrigin": [["int"]], "appliesToMedia": [["boolean", "String m"]], "setOrigin": [["void", "int origin"]], "getContent": [["String"]], "setUri": [["void", "String uri"]], "setTitle": [["void", "String title"]], "getStylesheet": [["Stylesheet"]], "setType": [["void", "String type"]], "getTitle": [["String"]], "getType": [["String"]], "setMedia": [["void", "String media"], ["void", "List mediaTypes"]], "isInline": [["boolean"]], "getUri": [["String"]]}, "className": "StylesheetInfo", "renamed": ["void", "function", "(", "Stylesheet", "arg0", ")", "{", "this", ".", "stylesheet", "=", "arg0", ";", "}"], "nl": "Sets the stylesheet attribute of the StylesheetInfo object", "nlToks": ["Sets", "the", "stylesheet", "attribute", "of", "the", "StylesheetInfo", "object"], "path": "plutogeek/flyingsaucer/tree/master/flying-saucer-core/src/main/java/org/xhtmlrenderer/css/sheet/StylesheetInfo.java", "idx": 1437}
{"memberVariables": {"auth": "Auth"}, "code": ["Auth", "function", "(", ")", "{", "return", "auth", ";", "}"], "memberFunctions": {"setAuth": [["void", "Auth value"]]}, "className": "AuthenticateRequest", "renamed": ["Auth", "function", "(", ")", "{", "return", "auth", ";", "}"], "nl": "Gets the value of the auth property.", "nlToks": ["Gets", "the", "value", "of", "the", "auth", "property", "."], "path": "platformlayer/platformlayer/tree/master/auth/client/src/generated/xjc/org/platformlayer/auth/v1/AuthenticateRequest.java", "idx": 1438}
{"memberVariables": {"LOG=LoggerFactory.getLogger(JsonUtils.class)": "Logger"}, "code": ["void", "function", "(", "final", "JSONObject", "json", ",", "final", "String", "name", ",", "final", "Long", "value", ")", "{", "try", "{", "json", ".", "put", "(", "name", ",", "value", ")", ";", "}", "catch", "(", "final", "JSONException", "e", ")", "{", "LOG", ".", "warn", "(", "\"JSON error\"", ",", "e", ")", ";", "}", "}"], "memberFunctions": {"extractInt": [["int", "final JSONObject json", "final String key"]], "getInetAddresses": [["Collection<InetSocketAddress>", "final String data"]]}, "className": "JsonUtils", "renamed": ["void", "function", "(", "final", "JSONObject", "arg0", ",", "final", "String", "arg1", ",", "final", "Long", "arg2", ")", "{", "try", "{", "arg0", ".", "put", "(", "arg1", ",", "arg2", ")", ";", "}", "catch", "(", "final", "JSONException", "loc0", ")", "{", "LOG", ".", "warn", "(", "\"srini_string\"", ",", "loc0", ")", ";", "}", "}"], "nl": "Puts the specified name/value pair in the specified JSON object.", "nlToks": ["Puts", "the", "specified", "name/value", "pair", "in", "the", "specified", "JSON", "object", "."], "path": "adamfisk/littleshoot-client/tree/master/common/json/src/main/java/org/lastbamboo/common/json/JsonUtils.java", "idx": 1440}
{"memberVariables": {"IMPL": "AccessibilityDelegateImpl", "DEFAULT_DELEGATE": "Object", "mBridge": "Object"}, "code": ["boolean", "function", "(", "View", "host", ",", "AccessibilityEvent", "event", ")", "{", "return", "IMPL", ".", "dispatchPopulateAccessibilityEvent", "(", "DEFAULT_DELEGATE", ",", "host", ",", "event", ")", ";", "}"], "memberFunctions": {"newAccessiblityDelegateDefaultImpl": [["Object"], ["Object"]], "onInitializeAccessibilityEvent": [["void", "Object delegate", "View host", "AccessibilityEvent event"], ["void", "Object delegate", "View host", "AccessibilityEvent event"], ["void", "View host", "AccessibilityEvent event"]], "getBridge": [["Object"]], "sendAccessibilityEventUnchecked": [["void", "Object delegate", "View host", "AccessibilityEvent event"], ["void", "Object delegate", "View host", "AccessibilityEvent event"], ["void", "View host", "AccessibilityEvent event"]], "onPopulateAccessibilityEvent": [["void", "Object delegate", "View host", "AccessibilityEvent event"], ["void", "Object delegate", "View host", "AccessibilityEvent event"], ["void", "View host", "AccessibilityEvent event"]], "onRequestSendAccessibilityEvent": [["boolean", "Object delegate", "ViewGroup host", "View child", "AccessibilityEvent event"], ["boolean", "Object delegate", "ViewGroup host", "View child", "AccessibilityEvent event"], ["boolean", "ViewGroup host", "View child", "AccessibilityEvent event"]], "onInitializeAccessibilityNodeInfo": [["void", "Object delegate", "View host", "AccessibilityNodeInfoCompat info"], ["void", "Object delegate", "View host", "AccessibilityNodeInfoCompat info"], ["void", "View host", "AccessibilityNodeInfoCompat info"]], "sendAccessibilityEvent": [["void", "Object delegate", "View host", "int eventType"], ["void", "Object delegate", "View host", "int eventType"], ["void", "View host", "int eventType"]], "newAccessiblityDelegateBridge": [["Object", "AccessibilityDelegateCompat listener"], ["Object", "AccessibilityDelegateCompat listener"]]}, "className": "AccessibilityDelegateCompat", "renamed": ["boolean", "function", "(", "View", "arg0", ",", "AccessibilityEvent", "arg1", ")", "{", "return", "IMPL", ".", "dispatchPopulateAccessibilityEvent", "(", "DEFAULT_DELEGATE", ",", "arg0", ",", "arg1", ")", ";", "}"], "nl": "Dispatches an  {@link AccessibilityEvent} to the host {@link View} first and thento its children for adding their text content to the event.  The default implementation behaves as {@link View#dispatchPopulateAccessibilityEvent(AccessibilityEvent) View#dispatchPopulateAccessibilityEvent(AccessibilityEvent)} forthe case of no accessibility delegate been set. ", "nlToks": ["Dispatches", "an", "-LCB-", "@link", "AccessibilityEvent", "-RCB-", "to", "the", "host", "-LCB-", "@link", "View", "-RCB-", "first", "and", "thento", "its", "children", "for", "adding", "their", "text", "content", "to", "the", "event", ".", "The", "default", "implementation", "behaves", "as", "-LCB-", "@link", "View", "#dispatchPopulateAccessibilityEvent", "-LRB-", "AccessibilityEvent", "-RRB-", "View", "#dispatchPopulateAccessibilityEvent", "-LRB-", "AccessibilityEvent", "-RRB-", "-RCB-", "forthe", "case", "of", "no", "accessibility", "delegate", "been", "set", "."], "path": "prateeka/AndroidDev/tree/master/SherlockActionBar/src/android/support/v4/view/AccessibilityDelegateCompat.java", "idx": 1441}
{"memberVariables": {"r": "int", "b": "int", "namedColors=new HashMap<>()": "Map<RGB,String>", "g": "int"}, "code": ["Optional", "<", "String", ">", "function", "(", "String", "hexString", ")", "{", "int", "hexColor", "=", "Integer", ".", "parseInt", "(", "hexString", ",", "16", ")", ";", "int", "r", "=", "(", "hexColor", "&", "0xFF0000", ")", ">>", "16", ";", "int", "g", "=", "(", "hexColor", "&", "0xFF00", ")", ">>", "8", ";", "int", "b", "=", "(", "hexColor", "&", "0xFF", ")", ";", "return", "getNamedColor", "(", "r", ",", "g", ",", "b", ")", ";", "}"], "memberFunctions": {"hashCode": [["int"]], "equals": [["boolean", "Object object"]], "getColor": [["Color"]], "getClosestNamedColor": [["String", "int r", "int g", "int b"], ["String", "String hexString"]], "calculateColorDistSq": [["double", "Color color0", "Color color1"]]}, "className": "ColorUtils", "renamed": ["Optional", "<", "String", ">", "function", "(", "String", "arg0", ")", "{", "int", "loc0", "=", "Integer", ".", "parseInt", "(", "arg0", ",", "16", ")", ";", "int", "loc1", "=", "(", "loc0", "&", "0xFF0000", ")", ">>", "16", ";", "int", "loc2", "=", "(", "loc0", "&", "0xFF00", ")", ">>", "8", ";", "int", "loc3", "=", "(", "loc0", "&", "0xFF", ")", ";", "return", "getNamedColor", "(", "loc1", ",", "loc2", ",", "loc3", ")", ";", "}"], "nl": "Get the color name of the color that is exactly equal to the given hex color value (as a 6-digit hex String).", "nlToks": ["Get", "the", "color", "name", "of", "the", "color", "that", "is", "exactly", "equal", "to", "the", "given", "hex", "color", "value", "-LRB-", "as", "a", "6-digit", "hex", "String", "-RRB-", "."], "path": "hastebrot/TestFX/tree/master/subprojects/testfx-core/src/main/java/org/testfx/util/ColorUtils.java", "idx": 1442}
{"memberVariables": {"ii": "IndexInfo", "p1": "Plan", "p2": "Plan", "joinfield": "String", "sch=new Schema()": "Schema"}, "code": ["Schema", "function", "(", ")", "{", "return", "sch", ";", "}"], "memberFunctions": {"blocksAccessed": [["int"]], "distinctValues": [["int", "String fldname"]], "recordsOutput": [["int"]], "open": [["Scan"]]}, "className": "IndexJoinPlan", "renamed": ["Schema", "function", "(", ")", "{", "return", "sch", ";", "}"], "nl": "Returns the schema of the index join.", "nlToks": ["Returns", "the", "schema", "of", "the", "index", "join", "."], "path": "prerit2803/DBMSProject2/tree/master/simpledb/index/query/IndexJoinPlan.java", "idx": 1444}
{"memberVariables": {"totalElapsedMinutes": "Long", "testResultLst": "List<TestResultDTO>", "startTime": "String", "endTime": "String", "batchId": "Long", "batchStatus": "String", "totalElapsedSeconds": "Long"}, "code": ["Long", "function", "(", ")", "{", "return", "batchId", ";", "}"], "memberFunctions": {"setBatchStatus": [["void", "String batchStatus"]], "getTotalElapsedSeconds": [["Long"]], "setBatchId": [["void", "Long batchId"]], "setTotalElapsedMinutes": [["void", "Long totalElapsedMinutes"]], "setTestResultLst": [["void", "List<TestResultDTO> testResultLst"]], "getEndTime": [["String"]], "getTotalElapsedMinutes": [["Long"]], "setEndTime": [["void", "String endTime"]], "setTotalElapsedSeconds": [["void", "Long totalElapsedSeconds"]], "toString": [["String"]], "getStartTime": [["String"]], "setStartTime": [["void", "String startTime"]], "getTestResultLst": [["List<TestResultDTO>"]], "getBatchStatus": [["String"]]}, "className": "TestResultsDTO", "renamed": ["Long", "function", "(", ")", "{", "return", "batchId", ";", "}"], "nl": "Gets the batch id.", "nlToks": ["Gets", "the", "batch", "id", "."], "path": "pkesireddy/portico_fletcher/tree/master/FetcherTesterService/src/main/java/org/ithaka/cm/fetchertester/model/TestResultsDTO.java", "idx": 1446}
{"memberVariables": {"locationPositions": "Hashtable<String,Point2D>", "links": "LabeledGraph<String,Double>"}, "code": ["void", "function", "(", "String", "fromLocation", ",", "String", "toLocation", ",", "Double", "distance", ")", "{", "links", ".", "set", "(", "fromLocation", ",", "toLocation", ",", "distance", ")", ";", "}"], "memberFunctions": {"getDistance": [["Double", "String fromLocation", "String toLocation"]], "clear": [["void"]], "randomlyGenerateDestination": [["String"]], "clearLinks": [["void"]], "setPosition": [["void", "String loc", "double x", "double y"]], "addBidirectionalLink": [["void", "String fromLocation", "String toLocation", "Double distance"]], "removeUnidirectionalLink": [["void", "String fromLocation", "String toLocation"]], "getPosition": [["Point2D", "String loc"]], "removeBidirectionalLink": [["void", "String fromLocation", "String toLocation"]], "isLocation": [["boolean", "String str"]], "getLocations": [["List<String>"]], "getLocationsLinkedTo": [["List<String>", "String fromLocation"]], "setDistAndDirToRefLocation": [["void", "String loc", "double dist", "int dir"]]}, "className": "ExtendableMap", "renamed": ["void", "function", "(", "String", "arg0", ",", "String", "arg1", ",", "Double", "arg2", ")", "{", "links", ".", "set", "(", "arg0", ",", "arg1", ",", "arg2", ")", ";", "}"], "nl": "Adds a one-way connection to the map.", "nlToks": ["Adds", "a", "one-way", "connection", "to", "the", "map", "."], "path": "peterplupo/ia201102/tree/master/trabalho1/aima-core/src/main/java/aima/core/environment/map/ExtendableMap.java", "idx": 1448}
{"memberVariables": {"length": "int", "type": "int", "info=new HashMap<String,FieldInfo>()": "Map<String,FieldInfo>"}, "code": ["void", "function", "(", "String", "fldname", ",", "int", "length", ")", "{", "addField", "(", "fldname", ",", "VARCHAR", ",", "length", ")", ";", "}"], "memberFunctions": {"add": [["void", "String fldname", "Schema sch"]], "addAll": [["void", "Schema sch"]], "addField": [["void", "String fldname", "int type", "int length"]], "addIntField": [["void", "String fldname"]], "length": [["int", "String fldname"]], "fields": [["Collection<String>"]], "type": [["int", "String fldname"]], "hasField": [["boolean", "String fldname"]]}, "className": "Schema", "renamed": ["void", "function", "(", "String", "arg0", ",", "int", "arg1", ")", "{", "addField", "(", "arg0", ",", "VARCHAR", ",", "arg1", ")", ";", "}"], "nl": "Adds a string field to the schema. The length is the conceptual length of the field. For example, if the field is defined as varchar(8), then its length is 8.", "nlToks": ["Adds", "a", "string", "field", "to", "the", "schema", ".", "The", "length", "is", "the", "conceptual", "length", "of", "the", "field", ".", "For", "example", ",", "if", "the", "field", "is", "defined", "as", "varchar", "-LRB-", "8", "-RRB-", ",", "then", "its", "length", "is", "8", "."], "path": "prerit2803/DBMSProject2/tree/master/simpledb/record/Schema.java", "idx": 1451}
{"memberVariables": {}, "code": ["void", "function", "(", "Collection", "collection", ",", "String", "message", ")", "{", "if", "(", "CollectionUtils", ".", "isEmpty", "(", "collection", ")", ")", "{", "throw", "new", "IllegalArgumentException", "(", "message", ")", ";", "}", "}"], "memberFunctions": {"isTrue": [["void", "boolean expression", "String message"], ["void", "boolean expression"]], "isAssignable": [["void", "Class<?> superType", "Class<?> subType"], ["void", "Class<?> superType", "Class<?> subType", "String message"]], "notNull": [["void", "Object object", "String message"], ["void", "Object object"]], "isNull": [["void", "Object object", "String message"], ["void", "Object object"]], "noNullElements": [["void", "Object[] array", "String message"], ["void", "Object[] array"]], "isInstanceOf": [["void", "Class<?> clazz", "Object obj"], ["void", "Class<?> type", "Object obj", "String message"]], "state": [["void", "boolean expression", "String message"], ["void", "boolean expression"]]}, "className": "Assert", "renamed": ["void", "function", "(", "Collection", "arg0", ",", "String", "arg1", ")", "{", "if", "(", "CollectionUtils", ".", "isEmpty", "(", "arg0", ")", ")", "{", "throw", "new", "IllegalArgumentException", "(", "arg1", ")", ";", "}", "}"], "nl": "Assert that a collection has elements; that is, it must not be {@code null} and must have at least one element.Assert.notEmpty(collection, \"Collection must have elements\");", "nlToks": ["Assert", "that", "a", "collection", "has", "elements", ";", "that", "is", ",", "it", "must", "not", "be", "-LCB-", "@code", "null", "-RCB-", "and", "must", "have", "at", "least", "one", "element.Assert.notEmpty", "-LRB-", "collection", ",", "``", "Collection", "must", "have", "elements", "''", "-RRB-", ";"], "path": "16ren/Android-Next/tree/master/bus/src/main/java/com/mcxiaoke/next/bus/support/Assert.java", "idx": 1452}
{"memberVariables": {"mManager": "TransferManager", "BUCKET_PREFIX=\"prefix\"": "String", "mClient": "AmazonS3Client", "DST=\"dst\"": "String", "mS3UnderFileSystem": "S3AUnderFileSystem", "SRC=\"src\"": "String", "ACCOUNT_OWNER=\"account owner\"": "String", "PATH=\"path\"": "String", "BUCKET_NAME=\"bucket\"": "String", "BUCKET_MODE=0": "short"}, "code": ["void", "function", "(", ")", "{", "mClient", "=", "Mockito", ".", "mock", "(", "AmazonS3Client", ".", "class", ")", ";", "mManager", "=", "Mockito", ".", "mock", "(", "TransferManager", ".", "class", ")", ";", "mS3UnderFileSystem", "=", "new", "S3AUnderFileSystem", "(", "new", "AlluxioURI", "(", "\"\"", ")", ",", "mClient", ",", "BUCKET_NAME", ",", "BUCKET_PREFIX", ",", "BUCKET_MODE", ",", "ACCOUNT_OWNER", ",", "mManager", ")", ";", "}"], "memberFunctions": {"renameOnAmazonClientException": [["void"]], "deleteNonRecursiveOnAmazonClientException": [["void"]], "deleteRecursiveOnAmazonClientException": [["void"]]}, "className": "S3AUnderFileSystemTest", "renamed": ["void", "function", "(", ")", "{", "mClient", "=", "Mockito", ".", "mock", "(", "AmazonS3Client", ".", "class", ")", ";", "mManager", "=", "Mockito", ".", "mock", "(", "TransferManager", ".", "class", ")", ";", "mS3UnderFileSystem", "=", "new", "S3AUnderFileSystem", "(", "new", "AlluxioURI", "(", "\"srini_string\"", ")", ",", "mClient", ",", "BUCKET_NAME", ",", "BUCKET_PREFIX", ",", "BUCKET_MODE", ",", "ACCOUNT_OWNER", ",", "mManager", ")", ";", "}"], "nl": "Set up.", "nlToks": ["Set", "up", "."], "path": "poemlin/alluxio/tree/master/underfs/s3a/src/test/java/alluxio/underfs/s3a/S3AUnderFileSystemTest.java", "idx": 1453}
{"memberVariables": {"tStart": "long", "qStart": "long", "tStop": "long", "blockSize": "int"}, "code": ["int", "function", "(", ")", "{", "return", "blockSize", ";", "}"], "memberFunctions": {"getQStart": [["long"]], "getTStart": [["long"]], "getTStop": [["long"]]}, "className": "Mapping", "renamed": ["int", "function", "(", ")", "{", "return", "blockSize", ";", "}"], "nl": "Gets the bloack size.", "nlToks": ["Gets", "the", "bloack", "size", "."], "path": "adamabeshouse/cbioportal/tree/master/core/src/main/java/org/mskcc/cbio/portal/mapback/Mapping.java", "idx": 1454}
{"memberVariables": {"cascadedProperties": "Map", "fingerprint": "String", "emptyCascadedStyle=new CascadedStyle()": "CascadedStyle"}, "code": ["boolean", "function", "(", "CSSName", "cssName", ")", "{", "return", "cascadedProperties", ".", "get", "(", "cssName", ")", "!=", "null", ";", "}"], "memberFunctions": {"createLayoutPropertyDeclaration": [["PropertyDeclaration", "CSSName cssName", "IdentValue display"]], "getCascadedPropertyDeclarations": [["java.util.Iterator"]], "propertyByName": [["PropertyDeclaration", "CSSName cssName"]], "createLayoutStyle": [["CascadedStyle", "PropertyDeclaration[] decls"], ["CascadedStyle", "List decls"], ["CascadedStyle", "CascadedStyle startingPoint", "PropertyDeclaration[] decls"]], "countAssigned": [["int"]], "addProperties": [["void", "java.util.Iterator iter"]], "createAnonymousStyle": [["CascadedStyle", "IdentValue display"]], "getFingerprint": [["String"]], "getIdent": [["IdentValue", "CSSName cssName"]]}, "className": "CascadedStyle", "renamed": ["boolean", "function", "(", "CSSName", "arg0", ")", "{", "return", "cascadedProperties", ".", "get", "(", "arg0", ")", "!=", "null", ";", "}"], "nl": "Returns true if property has been defined in this style.", "nlToks": ["Returns", "true", "if", "property", "has", "been", "defined", "in", "this", "style", "."], "path": "plutogeek/flyingsaucer/tree/master/flying-saucer-core/src/main/java/org/xhtmlrenderer/css/newmatch/CascadedStyle.java", "idx": 1455}
{"memberVariables": {"errorCode": "Integer", "errorMsg": "String"}, "code": ["boolean", "function", "(", ")", "{", "if", "(", "errorCode", "!=", "0", ")", "{", "return", "true", ";", "}", "return", "false", ";", "}"], "memberFunctions": {"setErrorMsg": [["void", "String errorMsg"]], "getErrorCode": [["Integer"]], "toString": [["String"]], "setErrorCode": [["void", "Integer errorCode"]], "getErrorMsg": [["String"]]}, "className": "SPResponse", "renamed": ["boolean", "function", "(", ")", "{", "if", "(", "errorCode", "!=", "0", ")", "{", "return", "true", ";", "}", "return", "false", ";", "}"], "nl": "Checks if is SP error out.", "nlToks": ["Checks", "if", "is", "SP", "error", "out", "."], "path": "pkesireddy/portico_fletcher/tree/master/FetcherTesterService/src/main/java/org/ithaka/cm/fetchertester/model/SPResponse.java", "idx": 1457}
{"memberVariables": {"status=-1": "int", "INFINITY=Integer.MAX_VALUE": "int", "request=null": "HttpServletRequest", "base=null": "URI", "response=null": "HttpServletResponse"}, "code": ["OutputStream", "function", "(", ")", "{", "return", "this", ".", "response", ".", "getOutputStream", "(", ")", ";", "}"], "memberFunctions": {"lookup": [["URI", "DAVResource resource"]], "getDepth": [["int"]], "read": [["InputStream"]], "getNormalizedPath": [["String"]], "getDestination": [["URI"]], "getMethod": [["String"]], "getStatus": [["int"]], "hasRequestBody": [["boolean"]], "setStatus": [["void", "int status"]], "setHeader": [["void", "String name", "String value"]], "getOverwrite": [["boolean"]], "getOriginalPath": [["String"]], "setContentType": [["void", "String type"]], "getIfModifiedSince": [["Date"]]}, "className": "DAVTransaction", "renamed": ["OutputStream", "function", "(", ")", "{", "return", "this", ".", "response", ".", "getOutputStream", "(", ")", ";", "}"], "nl": "Write the body of the response.", "nlToks": ["Write", "the", "body", "of", "the", "response", "."], "path": "pfumagalli/webdav/tree/master/src/main/java/it/could/webdav/DAVTransaction.java", "idx": 1458}
{"memberVariables": {"log=new ArrayList<String>()": "List<String>"}, "code": ["String", "function", "(", ")", "{", "StringBuilder", "sb", "=", "new", "StringBuilder", "(", ")", ";", "for", "(", "String", "s", ":", "log", ")", "{", "sb", ".", "append", "(", "s", ")", ".", "append", "(", "(", "\" \"", ")", ")", ";", "}", "return", "sb", ".", "toString", "(", ")", ".", "trim", "(", ")", ";", "}"], "memberFunctions": {"get": [["List<String>"]], "clean": [["void"]], "append": [["void", "String message"]]}, "className": "WeaknessLog", "renamed": ["String", "function", "(", ")", "{", "StringBuilder", "loc0", "=", "new", "StringBuilder", "(", ")", ";", "for", "(", "String", "loc1", ":", "log", ")", "{", "loc0", ".", "append", "(", "loc1", ")", ".", "append", "(", "(", "\"srini_string\"", ")", ")", ";", "}", "return", "loc0", ".", "toString", "(", ")", ".", "trim", "(", ")", ";", "}"], "nl": "Returns the list as a String representation.", "nlToks": ["Returns", "the", "list", "as", "a", "String", "representation", "."], "path": "0xwindows/WS-Attacker/tree/master/libs/Signature_Wrapping_Library/src/main/java/wsattacker/library/signatureWrapping/xpath/weakness/util/WeaknessLog.java", "idx": 1460}
{"memberVariables": {"x": "int", "y": "int"}, "code": ["int", "function", "(", ")", "{", "return", "8", "*", "y", "+", "x", ";", "}"], "memberFunctions": {"getX": [["int"]], "getY": [["int"]], "equals": [["boolean", "Object o"]], "toString": [["String"]]}, "className": "Move", "renamed": ["int", "function", "(", ")", "{", "return", "8", "*", "y", "+", "x", ";", "}"], "nl": "The hashCode of a move is 8y+x.", "nlToks": ["The", "hashCode", "of", "a", "move", "is", "8y", "+", "x."], "path": "preethiper/othello/tree/master/java/Move.java", "idx": 1461}
{"memberVariables": {"val": "Constant", "fldname": "String"}, "code": ["void", "function", "(", "Scan", "s", ")", "{", "Constant", "newval", "=", "s", ".", "getVal", "(", "fldname", ")", ";", "if", "(", "newval", ".", "compareTo", "(", "val", ")", ">", "0", ")", "val", "=", "newval", ";", "}"], "memberFunctions": {"fieldName": [["String"]], "processFirst": [["void", "Scan s"]], "value": [["Constant"]]}, "className": "MaxFn", "renamed": ["void", "function", "(", "Scan", "arg0", ")", "{", "Constant", "loc0", "=", "arg0", ".", "getVal", "(", "fldname", ")", ";", "if", "(", "loc0", ".", "compareTo", "(", "val", ")", ">", "0", ")", "val", "=", "loc0", ";", "}"], "nl": "Replaces the current maximum by the field value in the current record, if it is higher.", "nlToks": ["Replaces", "the", "current", "maximum", "by", "the", "field", "value", "in", "the", "current", "record", ",", "if", "it", "is", "higher", "."], "path": "prerit2803/DBMSProject2/tree/master/simpledb/materialize/MaxFn.java", "idx": 1462}
{"memberVariables": {"duration": "long", "content=\"\"": "String"}, "code": ["boolean", "function", "(", ")", "{", "return", "StringUtils", ".", "contains", "(", "content", ",", "\"Connection reset\"", ")", "||", "StringUtils", ".", "contains", "(", "content", ",", "\"Software caused connection abort: recv failed\"", ")", ";", "}"], "memberFunctions": {"setDuration": [["void", "long duration"]], "setContent": [["void", "String content"]], "getDuration": [["long"]], "isReadTimedOut": [["boolean"]], "isSOAPFault": [["boolean"]], "getContent": [["String"]], "isEmptyResponse": [["boolean"]]}, "className": "Metric", "renamed": ["boolean", "function", "(", ")", "{", "return", "StringUtils", ".", "contains", "(", "content", ",", "\"srini_string\"", ")", "||", "StringUtils", ".", "contains", "(", "content", ",", "\"srini_string\"", ")", ";", "}"], "nl": "Check for Connection reset", "nlToks": ["Check", "for", "Connection", "reset"], "path": "0xwindows/WS-Attacker/tree/master/libs/Intelligent_Denial_of_Service_Library/src/main/java/wsattacker/library/intelligentdos/common/Metric.java", "idx": 1465}
{"memberVariables": {"u2FService": "U2FService", "log=LogFactory.getLog(U2FService.class)": "Log", "u2f=new U2F()": "U2F", "requestStorage=new HashMap<String,String>()": "Map<String,String>"}, "code": ["U2FService", "function", "(", ")", "{", "if", "(", "u2FService", "==", "null", ")", "{", "synchronized", "(", "U2FService", ".", "class", ")", "{", "if", "(", "u2FService", "==", "null", ")", "{", "u2FService", "=", "new", "U2FService", "(", ")", ";", "return", "u2FService", ";", "}", "else", "{", "return", "u2FService", ";", "}", "}", "}", "else", "{", "return", "u2FService", ";", "}", "}"], "memberFunctions": {"getDeviceMetadata": [["ArrayList<String>", "FIDOUser user"]], "isDeviceRegistered": [["boolean", "FIDOUser user"]], "startRegistration": [["RegisterRequestData", "final FIDOUser user"]], "removeAllRegistrations": [["void", "FIDOUser user"]], "removeRegistration": [["void", "FIDOUser user", "String deviceRemarks"]], "addRegistration": [["void", "FIDOUser user"]], "finishAuthentication": [["void", "final FIDOUser user"]], "startAuthentication": [["AuthenticateRequestData", "final FIDOUser user"]], "getRegistrations": [["Iterable<DeviceRegistration>", "final FIDOUser user"]], "finishRegistration": [["void", "final FIDOUser user"]]}, "className": "U2FService", "renamed": ["U2FService", "function", "(", ")", "{", "if", "(", "u2FService", "==", "null", ")", "{", "synchronized", "(", "U2FService", ".", "class", ")", "{", "if", "(", "u2FService", "==", "null", ")", "{", "u2FService", "=", "new", "U2FService", "(", ")", ";", "return", "u2FService", ";", "}", "else", "{", "return", "u2FService", ";", "}", "}", "}", "else", "{", "return", "u2FService", ";", "}", "}"], "nl": "Gets a U2FService instance.", "nlToks": ["Gets", "a", "U2FService", "instance", "."], "path": "harsha1979/carbon-identity/tree/master/components/application-authenticators/org.wso2.carbon.identity.application.authenticator.fido/src/main/java/org/wso2/carbon/identity/application/authenticator/fido/u2f/U2FService.java", "idx": 1467}
{"memberVariables": {"log=LoggerFactory.getLogger(DishCollectionResource.class)": "Logger", "dishCollectionService": "DishCollectionService"}, "code": ["ResponseEntity", "<", "DishCollection", ">", "function", "(", "@", "PathVariable", "String", "id", ")", "{", "log", ".", "debug", "(", "\"REST request to get DishCollection : {}\"", ",", "id", ")", ";", "DishCollection", "dishCollection", "=", "dishCollectionService", ".", "findOne", "(", "id", ")", ";", "return", "Optional", ".", "ofNullable", "(", "dishCollection", ")", ".", "map", "(", "result", "->", "new", "ResponseEntity", "<", ">", "(", "result", ",", "HttpStatus", ".", "OK", ")", ")", ".", "orElse", "(", "new", "ResponseEntity", "<", ">", "(", "HttpStatus", ".", "NOT_FOUND", ")", ")", ";", "}"], "memberFunctions": {"getAllDishCollections": [["ResponseEntity<List<DishCollection>>", "Pageable pageable"]], "updateDishCollection": [["ResponseEntity<DishCollection>", "@RequestBody DishCollection dishCollection"]], "createDishCollection": [["ResponseEntity<DishCollection>", "@RequestBody DishCollection dishCollection"]], "deleteDishCollection": [["ResponseEntity<Void>", "@PathVariable String id"]]}, "className": "DishCollectionResource", "renamed": ["ResponseEntity", "<", "DishCollection", ">", "function", "(", "@", "PathVariable", "String", "arg0", ")", "{", "log", ".", "debug", "(", "\"srini_string\"", ",", "arg0", ")", ";", "DishCollection", "loc0", "=", "dishCollectionService", ".", "findOne", "(", "arg0", ")", ";", "return", "Optional", ".", "ofNullable", "(", "loc0", ")", ".", "map", "(", "result", "->", "new", "ResponseEntity", "<", ">", "(", "result", ",", "HttpStatus", ".", "OK", ")", ")", ".", "orElse", "(", "new", "ResponseEntity", "<", ">", "(", "HttpStatus", ".", "NOT_FOUND", ")", ")", ";", "}"], "nl": "GET  /dish-collections/:id : get the \"id\" dishCollection.", "nlToks": ["GET", "/", "dish-collections", "/", ":", "id", ":", "get", "the", "``", "id", "''", "dishCollection", "."], "path": "pigkey/kitchen/tree/master/app/src/main/java/com/kitchen/app/web/rest/DishCollectionResource.java", "idx": 1468}
{"memberVariables": {"chunks": "List<ScriptChunk>"}, "code": ["Script", "function", "(", "TransactionSignature", "signature", ")", "{", "return", "new", "ScriptBuilder", "(", ")", ".", "data", "(", "signature", ".", "encodeToBitcoin", "(", ")", ")", ".", "build", "(", ")", ";", "}"], "memberFunctions": {"op": [["ScriptBuilder", "int opcode"]], "data": [["ScriptBuilder", "byte[] data"]], "createMultiSigOutputScript": [["Script", "int threshold", "List<ECKey> pubkeys"]], "build": [["Script"]], "createMultiSigInputScriptBytes": [["Script", "List<byte[]> signatures"]], "smallNum": [["ScriptBuilder", "int num"]], "createP2SHOutputScript": [["Script", "byte[] hash"]], "createOutputScript": [["Script", "Address to"], ["Script", "ECKey key"]], "createMultiSigInputScript": [["Script", "List<TransactionSignature> signatures"], ["Script", "TransactionSignature... signatures"]]}, "className": "ScriptBuilder", "renamed": ["Script", "function", "(", "TransactionSignature", "arg0", ")", "{", "return", "new", "ScriptBuilder", "(", ")", ".", "data", "(", "arg0", ".", "encodeToBitcoin", "(", ")", ")", ".", "build", "(", ")", ";", "}"], "nl": "Creates a scriptSig that can redeem a pay-to-pubkey output.", "nlToks": ["Creates", "a", "scriptSig", "that", "can", "redeem", "a", "pay-to-pubkey", "output", "."], "path": "plncoin/plncoin-and/tree/master/plncoinj/core/src/main/java/com/google/bitcoin/script/ScriptBuilder.java", "idx": 1470}
{"memberVariables": {"mockServerConfig": "ServerConfiguration", "issuer=\"https://www.example.com/\"": "String", "service": "StaticClientConfigurationService", "mockClient": "RegisteredClient"}, "code": ["void", "function", "(", ")", "{", "Mockito", ".", "when", "(", "mockServerConfig", ".", "getIssuer", "(", ")", ")", ".", "thenReturn", "(", "\"www.badexample.net\"", ")", ";", "RegisteredClient", "actualClient", "=", "service", ".", "getClientConfiguration", "(", "mockServerConfig", ")", ";", "assertThat", "(", "actualClient", ",", "is", "(", "nullValue", "(", ")", ")", ")", ";", "}"], "memberFunctions": {"getClientConfiguration_success": [["void"]], "prepare": [["void"]]}, "className": "TestStaticClientConfigurationService", "renamed": ["void", "function", "(", ")", "{", "Mockito", ".", "when", "(", "mockServerConfig", ".", "getIssuer", "(", ")", ")", ".", "thenReturn", "(", "\"srini_string\"", ")", ";", "RegisteredClient", "loc0", "=", "service", ".", "getClientConfiguration", "(", "mockServerConfig", ")", ";", "assertThat", "(", "loc0", ",", "is", "(", "nullValue", "(", ")", ")", ")", ";", "}"], "nl": "Checks the behavior when the issuer is not known.", "nlToks": ["Checks", "the", "behavior", "when", "the", "issuer", "is", "not", "known", "."], "path": "adilansari/OpenID-Connect-Java-Spring-Server/tree/master/openid-connect-client/src/test/java/org/mitre/openid/connect/client/service/impl/TestStaticClientConfigurationService.java", "idx": 1471}
{"memberVariables": {"optionValue": "String", "id": "String", "optionName": "String"}, "code": ["Builder", "function", "(", "String", "id", ")", "{", "this", ".", "id", "=", "id", ";", "return", "this", ";", "}"], "memberFunctions": {"toBuilder": [["Builder"]], "string": [["Objects.ToStringHelper"]], "optionValue": [["Builder", "String optionValue"]], "fromExtraDhcpOption": [["Builder", "ExtraDhcpOption in"]], "getId": [["String"]], "getOptionName": [["String"]], "build": [["ExtraDhcpOption"]], "hashCode": [["int"]], "getOptionValue": [["String"]], "equals": [["boolean", "Object obj"]], "builder": [["Builder"]], "toString": [["String"]], "id": [["Builder", "String id"]], "optionName": [["Builder", "String optionName"]]}, "className": "ExtraDhcpOption", "renamed": ["Builder", "function", "(", "String", "arg0", ")", "{", "this", ".", "id", "=", "arg0", ";", "return", "this", ";", "}"], "nl": "Provide the id to the ExtraDhcpOption's Builder.", "nlToks": ["Provide", "the", "id", "to", "the", "ExtraDhcpOption", "'s", "Builder", "."], "path": "pimenas/jclouds-labs-openstack/tree/master/openstack-neutron/src/main/java/org/jclouds/openstack/neutron/v2/domain/ExtraDhcpOption.java", "idx": 1472}
{"memberVariables": {"password": "String", "credentialsExpirationDate": "Date", "loginsFallidos": "Integer", "grantedAuthorities": "Collection<GrantedAuthority>", "credentialsNonExpired": "boolean", "accountNonExpired": "boolean", "id": "Long", "enabled": "boolean", "email": "String", "username": "String", "accountNonLocked": "boolean", "nombres": "String"}, "code": ["void", "function", "(", "Boolean", "accountNonExpired", ")", "{", "this", ".", "accountNonExpired", "=", "accountNonExpired", ";", "}"], "memberFunctions": {"setCredentialsNonExpired": [["void", "Boolean credentialsNonExpired"]], "setPassword": [["void", "String password"]], "getCredentialsExpirationDate": [["Date"]], "setUsername": [["void", "String username"]], "setAccountNonLocked": [["void", "Boolean accountNonLocked"]], "getNombres": [["String"]], "isAccountNonLocked": [["boolean"]], "getId": [["Long"]], "setNombres": [["void", "String nombres"]], "getAuthorities": [["Collection<GrantedAuthority>"]], "getUsername": [["String"]], "setEnabled": [["void", "Boolean enabled"]], "getPassword": [["String"]], "setEmail": [["void", "String email"]], "setAuthorities": [["void", "Collection<GrantedAuthority> grantedAuthorities"]], "isAccountNonExpired": [["boolean"]], "isCredentialsNonExpired": [["boolean"]], "isEnabled": [["boolean"]], "getEmail": [["String"]], "setId": [["void", "Long id"]], "setCredentialsExpirationDate": [["void", "Date credentialsExpirationDate"]]}, "className": "SilexUserDetails", "renamed": ["void", "function", "(", "Boolean", "arg0", ")", "{", "this", ".", "accountNonExpired", "=", "arg0", ";", "}"], "nl": "Setea si la cuenta esta expirada o no.", "nlToks": ["Setea", "si", "la", "cuenta", "esta", "expirada", "o", "no", "."], "path": "pfrodriguezj/Komuno/tree/master/Komuno/src/main/java/co/com/silex/security/SilexUserDetails.java", "idx": 1474}
{"memberVariables": {"nsh": "NamespaceHandler", "ui": "UserInterface", "uac": "UserAgentCallback"}, "code": ["String", "function", "(", "Object", "e", ")", "{", "return", "nsh", ".", "getLang", "(", "(", "Element", ")", "e", ")", ";", "}"], "memberFunctions": {"getClass": [["String", "Object e"]], "isLink": [["boolean", "Object e"]], "getAttributeValue": [["String", "Object e", "String attrName"], ["String", "Object e", "String namespaceURI", "String attrName"]], "isVisited": [["boolean", "Object e"]], "isHover": [["boolean", "Object e"]], "isFocus": [["boolean", "Object e"]], "getID": [["String", "Object e"]], "getNonCssStyling": [["String", "Object e"]], "getElementStyling": [["String", "Object e"]], "isActive": [["boolean", "Object e"]]}, "className": "StandardAttributeResolver", "renamed": ["String", "function", "(", "Object", "arg0", ")", "{", "return", "nsh", ".", "getLang", "(", "(", "Element", ")", "arg0", ")", ";", "}"], "nl": "Gets the lang attribute of the StandardAttributeResolver object", "nlToks": ["Gets", "the", "lang", "attribute", "of", "the", "StandardAttributeResolver", "object"], "path": "plutogeek/flyingsaucer/tree/master/flying-saucer-core/src/main/java/org/xhtmlrenderer/context/StandardAttributeResolver.java", "idx": 1475}
{"memberVariables": {"theInstance": "ProjectActions", "removeFromDiagram=new ActionRemoveFromDiagram(Translator.localize(\"action.remove-from-diagram\"))": "ActionRemoveFromDiagram", "redoAction": "AbstractAction", "undoAction": "ActionUndo"}, "code": ["AbstractAction", "function", "(", ")", "{", "return", "redoAction", ";", "}"], "memberFunctions": {"determineRemoveEnabled": [["void"]], "targetSet": [["void", "TargetEvent e"]], "jumpToDiagramShowing": [["void", "List targets"]], "getUndoAction": [["AbstractAction"]], "targetRemoved": [["void", "TargetEvent e"]], "getRemoveFromDiagramAction": [["AbstractAction"]], "setTarget": [["void", "Object o"]], "propertyChange": [["void", "final PropertyChangeEvent evt"]], "getInstance": [["ProjectActions"]], "targetAdded": [["void", "TargetEvent e"]]}, "className": "ProjectActions", "renamed": ["AbstractAction", "function", "(", ")", "{", "return", "redoAction", ";", "}"], "nl": "Get the action that can redo the last undone action.", "nlToks": ["Get", "the", "action", "that", "can", "redo", "the", "last", "undone", "action", "."], "path": "pichiliani/CoArgoUML/tree/master/v0.24/fonte/src/argouml-app/src/org/argouml/ui/ProjectActions.java", "idx": 1477}
{"memberVariables": {"devices": "HashMap<Integer,Device>", "options": "ArrayList<Option>", "name": "String", "description": "String", "statSources": "HashMap<Integer,StatSource>"}, "code": ["Collection", "<", "Device", ">", "function", "(", ")", "{", "return", "devices", ".", "values", "(", ")", ";", "}"], "memberFunctions": {"read": [["boolean"]], "getName": [["String"]], "getOptionValue": [["String", "String id"]], "getOption": [["Option", "int index"], ["Option", "String id"]], "getOptions": [["ArrayList<Option>"]], "getStatSources": [["Collection<StatSource>"]], "getDescription": [["String"]], "getStatSource": [["StatSource", "int id"]], "getDevice": [["Device", "int id"]]}, "className": "Machine", "renamed": ["Collection", "<", "Device", ">", "function", "(", ")", "{", "return", "devices", ".", "values", "(", ")", ";", "}"], "nl": "Return list of devices as Collection", "nlToks": ["Return", "list", "of", "devices", "as", "Collection"], "path": "phramusca/JaMuz/tree/master/src/jamuz/Machine.java", "idx": 1479}
{"memberVariables": {"password": "String", "credentialsExpirationDate": "Date", "loginsFallidos": "Integer", "grantedAuthorities": "Collection<GrantedAuthority>", "credentialsNonExpired": "boolean", "accountNonExpired": "boolean", "id": "Long", "enabled": "boolean", "email": "String", "username": "String", "accountNonLocked": "boolean", "nombres": "String"}, "code": ["void", "function", "(", "Boolean", "accountNonLocked", ")", "{", "this", ".", "accountNonLocked", "=", "accountNonLocked", ";", "}"], "memberFunctions": {"setCredentialsNonExpired": [["void", "Boolean credentialsNonExpired"]], "setPassword": [["void", "String password"]], "getCredentialsExpirationDate": [["Date"]], "setUsername": [["void", "String username"]], "getNombres": [["String"]], "setAccountNonExpired": [["void", "Boolean accountNonExpired"]], "isAccountNonLocked": [["boolean"]], "getId": [["Long"]], "setNombres": [["void", "String nombres"]], "getAuthorities": [["Collection<GrantedAuthority>"]], "getUsername": [["String"]], "setEnabled": [["void", "Boolean enabled"]], "getPassword": [["String"]], "setEmail": [["void", "String email"]], "setAuthorities": [["void", "Collection<GrantedAuthority> grantedAuthorities"]], "isAccountNonExpired": [["boolean"]], "isCredentialsNonExpired": [["boolean"]], "isEnabled": [["boolean"]], "getEmail": [["String"]], "setId": [["void", "Long id"]], "setCredentialsExpirationDate": [["void", "Date credentialsExpirationDate"]]}, "className": "SilexUserDetails", "renamed": ["void", "function", "(", "Boolean", "arg0", ")", "{", "this", ".", "accountNonLocked", "=", "arg0", ";", "}"], "nl": "Setea si la cuenta esta bloqueada o no.", "nlToks": ["Setea", "si", "la", "cuenta", "esta", "bloqueada", "o", "no", "."], "path": "pfrodriguezj/Komuno/tree/master/Komuno/src/main/java/co/com/silex/security/SilexUserDetails.java", "idx": 1480}
{"memberVariables": {"lineStationDao": "LineStationDao", "stationCache": "Map<String,Station>", "stationDao": "StationDao"}, "code": ["List", "<", "Station", ">", "function", "(", ")", "{", "return", "stationDao", ".", "find", "(", ")", ".", "asList", "(", ")", ";", "}"], "memberFunctions": {"getStationsByVehicle": [["List<Station>", "String city", "String line", "String vehicle"], ["List<Station>", "String city", "String vehicle"]], "getStationByName": [["Station", "String sourceName"]], "save": [["void", "Station station"], ["void", "LineStation lineStation"]], "getStations": [["List<Station>", "String city", "QueryResults<LineStation> results"]], "findNearLocation": [["List<Station>", "double latituted", "double longitude", "int limit"]]}, "className": "StationService", "renamed": ["List", "<", "Station", ">", "function", "(", ")", "{", "return", "stationDao", ".", "find", "(", ")", ".", "asList", "(", ")", ";", "}"], "nl": "Return all stations", "nlToks": ["Return", "all", "stations"], "path": "pilotrex/metro-caracas-service/tree/master/src/main/java/com/metrocaracas/client/service/StationService.java", "idx": 1481}
{"memberVariables": {"bufferMgr=SimpleDB.bufferMgr()": "BufferMgr", "pins=new ArrayList<Block>()": "List<Block>", "buffers=new HashMap<Block,Buffer>()": "Map<Block,Buffer>"}, "code": ["void", "function", "(", ")", "{", "for", "(", "Block", "blk", ":", "pins", ")", "{", "Buffer", "buff", "=", "buffers", ".", "get", "(", "blk", ")", ";", "bufferMgr", ".", "unpin", "(", "buff", ")", ";", "}", "buffers", ".", "clear", "(", ")", ";", "pins", ".", "clear", "(", ")", ";", "}"], "memberFunctions": {"pinNew": [["Block", "String filename", "PageFormatter fmtr"]], "getBuffer": [["Buffer", "Block blk"]], "pin": [["void", "Block blk"]], "unpin": [["void", "Block blk"]]}, "className": "BufferList", "renamed": ["void", "function", "(", ")", "{", "for", "(", "Block", "loc0", ":", "pins", ")", "{", "Buffer", "loc1", "=", "buffers", ".", "get", "(", "loc0", ")", ";", "bufferMgr", ".", "unpin", "(", "loc1", ")", ";", "}", "buffers", ".", "clear", "(", ")", ";", "pins", ".", "clear", "(", ")", ";", "}"], "nl": "Unpins any buffers still pinned by this transaction.", "nlToks": ["Unpins", "any", "buffers", "still", "pinned", "by", "this", "transaction", "."], "path": "prerit2803/DBMSProject2/tree/master/simpledb/tx/BufferList.java", "idx": 1482}
{"memberVariables": {"debug": "boolean", "context": "ServletContext", "servletName": "String"}, "code": ["void", "function", "(", "String", "message", ")", "{", "if", "(", "this", ".", "debug", ")", "this", ".", "doLog", "(", "message", ",", "null", ")", ";", "}"], "memberFunctions": {"log": [["void", "String message"], ["void", "String message", "Throwable throwable"]], "doLog": [["void", "String message", "Throwable throwable"]]}, "className": "DAVLogger", "renamed": ["void", "function", "(", "String", "arg0", ")", "{", "if", "(", "this", ".", "debug", ")", "this", ".", "doLog", "(", "arg0", ",", "null", ")", ";", "}"], "nl": "Log a debug message to the context logger.", "nlToks": ["Log", "a", "debug", "message", "to", "the", "context", "logger", "."], "path": "pfumagalli/webdav/tree/master/src/main/java/it/could/webdav/DAVLogger.java", "idx": 1483}
{"memberVariables": {"settings": "IStoredSettings", "serverStatus": "ServerStatus", "logger=LoggerFactory.getLogger(getClass())": "Logger", "baseFolder": "File", "timezone": "TimeZone", "settingsModel": "ServerSettings"}, "code": ["boolean", "function", "(", ")", "{", "return", "settings", ".", "getBoolean", "(", "Keys", ".", "git", ".", "enableGitServlet", ",", "true", ")", "||", "(", "settings", ".", "getInteger", "(", "Keys", ".", "git", ".", "daemonPort", ",", "0", ")", ">", "0", ")", "||", "(", "settings", ".", "getInteger", "(", "Keys", ".", "git", ".", "sshPort", ",", "0", ")", ">", "0", ")", ";", "}"], "memberFunctions": {"isDebugMode": [["boolean"]], "getSettings": [["IStoredSettings"]], "start": [["RuntimeManager"]], "logTimezone": [["void", "String type", "TimeZone zone"]], "getFileOrFolder": [["File", "String key", "String defaultFileOrFolder"], ["File", "String fileOrFolder"]], "updateSettings": [["boolean", "Map<String,String> updatedSettings"]], "getStatus": [["ServerStatus"]], "getSettingsModel": [["ServerSettings"]], "setBaseFolder": [["void", "File folder"]], "stop": [["RuntimeManager"]], "getTimezone": [["TimeZone"]], "getBootDate": [["Date"]], "getBaseFolder": [["File"]]}, "className": "RuntimeManager", "renamed": ["boolean", "function", "(", ")", "{", "return", "settings", ".", "getBoolean", "(", "Keys", ".", "git", ".", "enableGitServlet", ",", "true", ")", "||", "(", "settings", ".", "getInteger", "(", "Keys", ".", "git", ".", "daemonPort", ",", "0", ")", ">", "0", ")", "||", "(", "settings", ".", "getInteger", "(", "Keys", ".", "git", ".", "sshPort", ",", "0", ")", ">", "0", ")", ";", "}"], "nl": "Determine if this Gitblit instance is actively serving git repositories or if it is merely a repository viewer.", "nlToks": ["Determine", "if", "this", "Gitblit", "instance", "is", "actively", "serving", "git", "repositories", "or", "if", "it", "is", "merely", "a", "repository", "viewer", "."], "path": "pombreda/gitblit/tree/master/src/main/java/com/gitblit/manager/RuntimeManager.java", "idx": 1484}
{"memberVariables": {"intBuf": "byte[]", "MAX_INT_BYTES=21": "int", "format": "PackFormatInputStream", "packed": "ByteArrayOutputStream"}, "code": ["void", "function", "(", "byte", "[", "]", "value", ")", "{", "this", ".", "addByteArray", "(", "value", ",", "0", ",", "value", ".", "length", ")", ";", "}"], "memberFunctions": {"getValue": [["byte[]"]], "packLong": [["void", "long x", "boolean signed"]], "addShort": [["void", "short value"]], "reset": [["void"]], "getFormat": [["String"]], "addByte": [["void", "byte value"]], "addInt": [["void", "int value"]], "addLong": [["void", "long value"]], "addRecord": [["void", "long value"]], "addString": [["void", "String value"]]}, "className": "PackOutputStream", "renamed": ["void", "function", "(", "byte", "[", "]", "arg0", ")", "{", "this", ".", "addByteArray", "(", "arg0", ",", "0", ",", "arg0", ".", "length", ")", ";", "}"], "nl": "Add a byte array field to the stream. \\param value The byte array value to be added.", "nlToks": ["Add", "a", "byte", "array", "field", "to", "the", "stream", ".", "\\", "param", "value", "The", "byte", "array", "value", "to", "be", "added", "."], "path": "pgunn/wiredtiger/tree/master/lang/java/src/com/wiredtiger/db/PackOutputStream.java", "idx": 1485}
{"memberVariables": {"otherCnaProfileList=new ArrayList<GeneticProfile>()": "ArrayList<GeneticProfile>", "RAE=\"RAE\"": "String", "mutationProfileList=new ArrayList<GeneticProfile>()": "ArrayList<GeneticProfile>", "raeProfileList=new ArrayList<GeneticProfile>()": "ArrayList<GeneticProfile>", "GISTIC=\"GISTIC\"": "String", "gisticProfileList=new ArrayList<GeneticProfile>()": "ArrayList<GeneticProfile>"}, "code": ["HashMap", "<", "String", ",", "GeneticProfile", ">", "function", "(", ")", "{", "return", "getDefaultGeneticProfileMap", "(", "false", ",", "true", ")", ";", "}"], "memberFunctions": {"getDefaultCopyNumberMap": [["HashMap<String,GeneticProfile>"]], "addCopyNumberProfile": [["void", "GeneticProfile copyNumberProfile"]], "getDefaultCnaProfile": [["GeneticProfile"]], "getDefaultGeneticProfileMap": [["HashMap<String,GeneticProfile>", "boolean includeCNA", "boolean includeMutation"]], "conditionallyAddProfileToSet": [["void", "GeneticProfile geneticProfile", "HashMap<String,GeneticProfile> defaultProfileSet"]], "getDefaultMutationAndCopyNumberMap": [["HashMap<String,GeneticProfile>"]], "addMutationProfile": [["void", "GeneticProfile mutationProfile"]], "getFirstPriorityProfile": [["GeneticProfile", "ArrayList<ArrayList<GeneticProfile>> orderOfPredenceList"]], "addRaeProfile": [["void", "GeneticProfile raeProfile"]], "getDefaultMutationProfile": [["GeneticProfile"]], "addGisticProfile": [["void", "GeneticProfile gisticProfile"]], "addOtherCnaProfile": [["void", "GeneticProfile otherCnaProfile"]], "addGeneticProfile": [["void", "GeneticProfile geneticProfile"]], "getNumDefaultMutationAndCopyNumberProfiles": [["int"]]}, "className": "CategorizedGeneticProfileSet", "renamed": ["HashMap", "<", "String", ",", "GeneticProfile", ">", "function", "(", ")", "{", "return", "getDefaultGeneticProfileMap", "(", "false", ",", "true", ")", ";", "}"], "nl": "Gets a hashMap of the default mutation profiles.", "nlToks": ["Gets", "a", "hashMap", "of", "the", "default", "mutation", "profiles", "."], "path": "adamabeshouse/cbioportal/tree/master/core/src/main/java/org/mskcc/cbio/portal/model/CategorizedGeneticProfileSet.java", "idx": 1486}
{"memberVariables": {"executionEndDateTime": "String", "build": "String", "browser": "String", "projectName": "String", "executionStartDateTime": "String", "value": "String", "url": "String", "TotalDuration": "String"}, "code": ["String", "function", "(", ")", "{", "return", "executionEndDateTime", ";", "}"], "memberFunctions": {"getProjectName": [["String"]], "getBuild": [["String"]], "getExecutionStartDateTime": [["String"]], "setBuild": [["void", "String value"]], "setExecutionEndDateTime": [["void", "String value"]], "setUrl": [["void", "String value"]], "getValue": [["String"]], "setProjectName": [["void", "String value"]], "getUrl": [["String"]], "getTotalDuration": [["String"]], "setValue": [["void", "String value"]], "setTotalDuration": [["void", "String totalDuration"]], "setBrowser": [["void", "String value"]], "setExecutionStartDateTime": [["void", "String value"]], "getBrowser": [["String"]]}, "className": "Config", "renamed": ["String", "function", "(", ")", "{", "return", "executionEndDateTime", ";", "}"], "nl": "Gets the value of the executionEndDateTime property.", "nlToks": ["Gets", "the", "value", "of", "the", "executionEndDateTime", "property", "."], "path": "prabalbsws/selenium_automation/tree/master/src/newpojo/Config.java", "idx": 1487}
{"memberVariables": {"EXAMPLE=\"$RATTM,11,25.3,13.7,T,7.0,20.0,T,10.1,20.2,N,NAME,Q,,175550.24,A*34\"": "String", "ttm": "TTMParser", "empty": "TTMParser"}, "code": ["void", "function", "(", ")", "{", "assertEquals", "(", "11", ",", "ttm", ".", "getNumber", "(", ")", ")", ";", "}"], "memberFunctions": {"testGetAcquisitionType": [["void"]], "testGetDistance": [["void"]], "testSetStatus": [["void"]], "testSetNumber": [["void"]], "testSetDistanceOfCPA": [["void"]], "testConstructor": [["void"]], "testGetTime": [["void"]], "testSetCourse": [["void"]], "testGetName": [["void"]], "testGetDistanceOfCPA": [["void"]], "setUp": [["void"]], "testGetCourse": [["void"]], "testSetReferenceTrue": [["void"]], "testSetReferenceFalse": [["void"]], "testSetAcquisitionType": [["void"]], "testSetBearing": [["void"]], "testGetBearing": [["void"]], "testSetDistance": [["void"]], "testSetTimeToCPA": [["void"]], "testSetTime": [["void"]], "testGetSpeed": [["void"]], "testGetStatus": [["void"]], "testGetTimeToCPA": [["void"]], "testSetName": [["void"]], "testSetSpeed": [["void"]]}, "className": "TTMTest", "renamed": ["void", "function", "(", ")", "{", "assertEquals", "(", "11", ",", "ttm", ".", "getNumber", "(", ")", ")", ";", "}"], "nl": "Test method for {@link net.sf.marineapi.nmea.parser.TTMParser#getNumber()} .", "nlToks": ["Test", "method", "for", "-LCB-", "@link", "net.sf.marineapi.nmea.parser.TTMParser", "#getNumber", "-LRB-", "-RRB-", "-RCB-", "."], "path": "pkoziol/marine-api/tree/master/src/test/java/net/sf/marineapi/nmea/parser/TTMTest.java", "idx": 1488}
{"memberVariables": {"mOwnerBits": "Bits", "mGroupBits": "Bits", "SVALS=values()": "Bits[]", "mOtherBits": "Bits", "mString": "String"}, "code": ["Mode", "function", "(", ")", "{", "return", "applyUMask", "(", "getUMask", "(", ")", ")", ";", "}"], "memberFunctions": {"extractOtherBits": [["Bits", "short mode"]], "tryParseInt": [["boolean", "String value"]], "imply": [["boolean", "Bits that"]], "or": [["Bits", "Bits that"]], "set": [["void", "Bits u", "Bits g", "Bits o"]], "extractOwnerBits": [["Bits", "short mode"]], "setOtherBits": [["void", "Bits bits"]], "getOtherBits": [["Bits"]], "getDefault": [["Mode"]], "createFullAccess": [["Mode"]], "getGroupBits": [["Bits"]], "extractGroupBits": [["Bits", "short mode"]], "getOwnerBits": [["Bits"]], "setOwnerBits": [["void", "Bits bits"]], "not": [["Bits"]], "fromShort": [["void", "short n"]], "and": [["Bits", "Bits that"]], "hashCode": [["int"]], "setGroupBits": [["void", "Bits bits"]], "equals": [["boolean", "Object obj"]], "getUMask": [["Mode"]], "toString": [["String"], ["String"]], "toShort": [["short"]], "createNoAccess": [["Mode"]]}, "className": "Mode", "renamed": ["Mode", "function", "(", ")", "{", "return", "applyUMask", "(", "getUMask", "(", ")", ")", ";", "}"], "nl": "Creates a new mode by applying the umask specified in configuration to this mode.", "nlToks": ["Creates", "a", "new", "mode", "by", "applying", "the", "umask", "specified", "in", "configuration", "to", "this", "mode", "."], "path": "poemlin/alluxio/tree/master/core/common/src/main/java/alluxio/security/authorization/Mode.java", "idx": 1489}
{"memberVariables": {"sequenceNumber": "long", "lastFeedbacktime": "long", "k=2": "long"}, "code": ["int", "function", "(", "ReceiverLossListEntry", "o", ")", "{", "return", "(", "int", ")", "(", "sequenceNumber", "-", "o", ".", "sequenceNumber", ")", ";", "}"], "memberFunctions": {"feedback": [["void"]], "getSequenceNumber": [["long"]], "getK": [["long"]], "hashCode": [["int"]], "equals": [["boolean", "Object obj"]], "toString": [["String"]], "getLastFeedbackTime": [["long"]]}, "className": "ReceiverLossListEntry", "renamed": ["int", "function", "(", "ReceiverLossListEntry", "arg0", ")", "{", "return", "(", "int", ")", "(", "sequenceNumber", "-", "arg0", ".", "sequenceNumber", ")", ";", "}"], "nl": "order by increasing sequence number", "nlToks": ["order", "by", "increasing", "sequence", "number"], "path": "adamfisk/littleshoot-client/tree/master/common/udt/src/main/java/udt/receiver/ReceiverLossListEntry.java", "idx": 1490}
{"memberVariables": {"poolLock": "Lock", "isShutDown": "boolean", "issuedConnections": "Set<BasicPoolEntryRef>", "idleConnHandler": "IdleConnectionHandler", "log": "Log", "numConnections": "int", "refQueue": "ReferenceQueue<Object>", "leasedConnections": "Set<BasicPoolEntry>"}, "code": ["void", "function", "(", "long", "idletime", ",", "TimeUnit", "tunit", ")", "{", "if", "(", "tunit", "==", "null", ")", "{", "throw", "new", "IllegalArgumentException", "(", "\"Time unit must not be null.\"", ")", ";", "}", "poolLock", ".", "lock", "(", ")", ";", "try", "{", "idleConnHandler", ".", "closeIdleConnections", "(", "tunit", ".", "toMillis", "(", "idletime", ")", ")", ";", "}", "finally", "{", "poolLock", ".", "unlock", "(", ")", ";", "}", "}"], "memberFunctions": {"enableConnectionGC": [["void"]], "handleReference": [["void", "Reference<?> ref"]], "handleLostEntry": [["void", "HttpRoute route"]], "deleteClosedConnections": [["void"]], "getEntry": [["BasicPoolEntry", "HttpRoute route", "Object state", "long timeout", "TimeUnit tunit"]], "requestPoolEntry": [["PoolEntryRequest", "HttpRoute route", "Object state"]], "shutdown": [["void"]], "freeEntry": [["void", "BasicPoolEntry entry", "boolean reusable", "long validDuration", "TimeUnit timeUnit"]], "closeExpiredConnections": [["void"]], "closeConnection": [["void", "final OperatedClientConnection conn"]]}, "className": "AbstractConnPool", "renamed": ["void", "function", "(", "long", "arg0", ",", "TimeUnit", "arg1", ")", "{", "if", "(", "arg1", "==", "null", ")", "{", "throw", "new", "IllegalArgumentException", "(", "\"srini_string\"", ")", ";", "}", "poolLock", ".", "lock", "(", ")", ";", "try", "{", "idleConnHandler", ".", "closeIdleConnections", "(", "arg1", ".", "toMillis", "(", "arg0", ")", ")", ";", "}", "finally", "{", "poolLock", ".", "unlock", "(", ")", ";", "}", "}"], "nl": "Closes idle connections.", "nlToks": ["Closes", "idle", "connections", "."], "path": "pritamkhose/open-gpstracker.code/tree/master/external_sources/httpclient-4.1.1/httpclient/src/main/java/org/apache/ogt/http/impl/conn/tsccm/AbstractConnPool.java", "idx": 1491}
{"memberVariables": {"data": "byte[]"}, "code": ["void", "function", "(", "IRtfListener", "listener", ")", "{", "listener", ".", "processBinaryBytes", "(", "data", ")", ";", "}"], "memberFunctions": {"getType": [["ParserEventType"]], "toString": [["String"]]}, "className": "BinaryBytesEvent", "renamed": ["void", "function", "(", "IRtfListener", "arg0", ")", "{", "arg0", ".", "processBinaryBytes", "(", "data", ")", ";", "}"], "nl": "Pass the event to the listener.", "nlToks": ["Pass", "the", "event", "to", "the", "listener", "."], "path": "harrisaoz/rtfparserkit/tree/master/RTF Parser Kit/src/main/java/com/rtfparserkit/parser/standard/BinaryBytesEvent.java", "idx": 1492}
{"memberVariables": {"EXAMPLE=\"$RATTM,11,25.3,13.7,T,7.0,20.0,T,10.1,20.2,N,NAME,Q,,175550.24,A*34\"": "String", "ttm": "TTMParser", "empty": "TTMParser"}, "code": ["void", "function", "(", ")", "{", "assertEquals", "(", "13.7", ",", "ttm", ".", "getBearing", "(", ")", ",", "0.001", ")", ";", "}"], "memberFunctions": {"testGetAcquisitionType": [["void"]], "testGetDistance": [["void"]], "testSetStatus": [["void"]], "testSetNumber": [["void"]], "testSetDistanceOfCPA": [["void"]], "testConstructor": [["void"]], "testGetTime": [["void"]], "testSetCourse": [["void"]], "testGetName": [["void"]], "testGetNumber": [["void"]], "testGetDistanceOfCPA": [["void"]], "setUp": [["void"]], "testGetCourse": [["void"]], "testSetReferenceTrue": [["void"]], "testSetReferenceFalse": [["void"]], "testSetAcquisitionType": [["void"]], "testSetBearing": [["void"]], "testSetDistance": [["void"]], "testSetTimeToCPA": [["void"]], "testSetTime": [["void"]], "testGetSpeed": [["void"]], "testGetStatus": [["void"]], "testGetTimeToCPA": [["void"]], "testSetName": [["void"]], "testSetSpeed": [["void"]]}, "className": "TTMTest", "renamed": ["void", "function", "(", ")", "{", "assertEquals", "(", "13.7", ",", "ttm", ".", "getBearing", "(", ")", ",", "0.001", ")", ";", "}"], "nl": "Test method for {@link net.sf.marineapi.nmea.parser.TTMParser#getBearing()} .", "nlToks": ["Test", "method", "for", "-LCB-", "@link", "net.sf.marineapi.nmea.parser.TTMParser", "#getBearing", "-LRB-", "-RRB-", "-RCB-", "."], "path": "pkoziol/marine-api/tree/master/src/test/java/net/sf/marineapi/nmea/parser/TTMTest.java", "idx": 1493}
{"memberVariables": {"plugins": "SortedUniqueList<AbstractPlugin>", "serialVersionUID=1L": "long"}, "code": ["boolean", "function", "(", "int", "index", ")", "{", "AbstractPlugin", "toRemove", "=", "getByIndex", "(", "index", ")", ";", "return", "remove", "(", "toRemove", ")", ";", "}"], "memberFunctions": {"add": [["boolean", "AbstractPlugin plugin"]], "contains": [["boolean", "AbstractPlugin plugin"]], "iterator": [["Iterator<AbstractPlugin>"]], "removeByName": [["boolean", "String pluginName"]], "size": [["int"]], "getByIndex": [["AbstractPlugin", "int index"]], "getByName": [["AbstractPlugin", "String pluginName"]], "clear": [["void"]], "indexOf": [["int", "AbstractPlugin plugin"]], "remove": [["boolean", "AbstractPlugin plugin"]]}, "className": "PluginContainer", "renamed": ["boolean", "function", "(", "int", "arg0", ")", "{", "AbstractPlugin", "loc0", "=", "getByIndex", "(", "arg0", ")", ";", "return", "remove", "(", "loc0", ")", ";", "}"], "nl": "Remove a plugin from this container by its index", "nlToks": ["Remove", "a", "plugin", "from", "this", "container", "by", "its", "index"], "path": "0xwindows/WS-Attacker/tree/master/framework/src/main/java/wsattacker/main/plugin/PluginContainer.java", "idx": 1494}
{"memberVariables": {"HELPER": "ClasspathScanner", "ALL_CLASS_FILES=ALL_FILES + \".class\"": "String", "CLASSPATH_URL_SCHEME=\"classpath:\"": "String", "ALL_FILES=\"**/*\"": "String", "WILDCARD=\"*\"": "String", "PACKAGES_TO_SKIP={\"org.apache.cxf\"}": "String[]"}, "code": ["Map", "<", "Class", "<", "?", "extends", "Annotation", ">", ",", "Collection", "<", "Class", "<", "?", ">>>", "function", "(", "Collection", "<", "String", ">", "basePackages", ",", "List", "<", "Class", "<", "?", "extends", "Annotation", ">>", "annotations", ")", "{", "return", "findClasses", "(", "basePackages", ",", "annotations", ",", "null", ")", ";", "}"], "memberFunctions": {"parsePackages": [["Set<String>", "final String packagesAsCsv"]], "getClasspathScanner": [["ClasspathScanner"]], "findClassesInternal": [["Map<Class<? extends Annotation>,Collection<Class<?>>>", "Collection<String> basePackages", "List<Class<? extends Annotation>> annotations", "ClassLoader loader"]], "findResources": [["List<URL>", "String basePackage", "String extension"], ["List<URL>", "String basePackage", "String extension", "ClassLoader loader"], ["List<URL>", "Collection<String> basePackages", "String extension"], ["List<URL>", "Collection<String> basePackages", "String extension", "ClassLoader loader"]], "findResourcesInternal": [["List<URL>", "Collection<String> basePackages", "String extension", "ClassLoader loader"]]}, "className": "ClasspathScanner", "renamed": ["Map", "<", "Class", "<", "?", "extends", "Annotation", ">", ",", "Collection", "<", "Class", "<", "?", ">>>", "function", "(", "Collection", "<", "String", ">", "arg0", ",", "List", "<", "Class", "<", "?", "extends", "Annotation", ">>", "arg1", ")", "{", "return", "findClasses", "(", "arg0", ",", "arg1", ",", "null", ")", ";", "}"], "nl": "Scans list of base packages for all classes marked with specific annotations.", "nlToks": ["Scans", "list", "of", "base", "packages", "for", "all", "classes", "marked", "with", "specific", "annotations", "."], "path": "primesign/cxf/tree/master/core/src/main/java/org/apache/cxf/common/util/ClasspathScanner.java", "idx": 1495}
{"memberVariables": {"longs": "AtomicLongArray", "serialVersionUID=0L": "long"}, "code": ["void", "function", "(", "java", ".", "io", ".", "ObjectOutputStream", "s", ")", "{", "s", ".", "defaultWriteObject", "(", ")", ";", "int", "length", "=", "length", "(", ")", ";", "s", ".", "writeInt", "(", "length", ")", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "length", ";", "i", "++", ")", "{", "s", ".", "writeDouble", "(", "get", "(", "i", ")", ")", ";", "}", "}"], "memberFunctions": {"set": [["void", "int i", "double newValue"]], "compareAndSet": [["boolean", "int i", "double expect", "double update"]], "weakCompareAndSet": [["boolean", "int i", "double expect", "double update"]], "get": [["double", "int i"]], "length": [["int"]], "lazySet": [["void", "int i", "double newValue"]], "getAndAdd": [["double", "int i", "double delta"]], "addAndGet": [["double", "int i", "double delta"]], "toString": [["String"]], "getAndSet": [["double", "int i", "double newValue"]], "readObject": [["void", "java.io.ObjectInputStream s"]]}, "className": "AtomicDoubleArray", "renamed": ["void", "function", "(", "java", ".", "io", ".", "ObjectOutputStream", "arg0", ")", "{", "arg0", ".", "defaultWriteObject", "(", ")", ";", "int", "loc0", "=", "loc0", "(", ")", ";", "arg0", ".", "writeInt", "(", "loc0", ")", ";", "for", "(", "int", "loc1", "=", "0", ";", "loc1", "<", "loc0", ";", "loc1", "++", ")", "{", "arg0", ".", "writeDouble", "(", "get", "(", "loc1", ")", ")", ";", "}", "}"], "nl": "Saves the state to a stream (that is, serializes it).", "nlToks": ["Saves", "the", "state", "to", "a", "stream", "-LRB-", "that", "is", ",", "serializes", "it", "-RRB-", "."], "path": "hazendaz/guava/tree/master/guava/src/com/google/common/util/concurrent/AtomicDoubleArray.java", "idx": 1496}
{"memberVariables": {"lastModifiedTimeStamp": "Date", "feedId": "Long", "createdBy": "String", "fetcherStartTimeStamp": "Date", "createTimeStamp": "Date", "testId": "Long", "runId": "Long", "fetcherEndTimeStamp": "Date", "regTestResultDetailsLst": "List<TestResultDetailsDTO>", "outcome": "OutcomeType", "runStatus": "RunStatusType", "errorMsg": "String"}, "code": ["void", "function", "(", "Date", "fetcherEndTimeStamp", ")", "{", "this", ".", "fetcherEndTimeStamp", "=", "fetcherEndTimeStamp", ";", "}"], "memberFunctions": {"setLastModifiedTimeStamp": [["void", "Date lastModifiedTimeStamp"]], "getFetcherEndTimeStamp": [["Date"]], "setFeedId": [["void", "Long feedId"]], "setFetcherStartTimeStamp": [["void", "Date fetcherStartTimeStamp"]], "getLastModifiedTimeStamp": [["Date"]], "getOutcome": [["OutcomeType"]], "getRunId": [["Long"]], "getRegTestResultDetailsLst": [["List<TestResultDetailsDTO>"]], "getFeedId": [["Long"]], "setTestId": [["void", "Long testId"]], "getTestId": [["Long"]], "getFetcherStartTimeStamp": [["Date"]], "setRunId": [["void", "Long runId"]], "setRegTestResultDetailsLst": [["void", "List<TestResultDetailsDTO> regTestResultDetailsLst"]], "setErrorMsg": [["void", "String errorMsg"]], "setCreateTimeStamp": [["void", "Date createTimeStamp"]], "setCreatedBy": [["void", "String createdBy"]], "getRunStatus": [["RunStatusType"]], "getCreateTimeStamp": [["Date"]], "setOutcome": [["void", "OutcomeType outcome"]], "toString": [["String"]], "getCreatedBy": [["String"]], "getErrorMsg": [["String"]], "setRunStatus": [["void", "RunStatusType runStatus"]]}, "className": "TestResultDTO", "renamed": ["void", "function", "(", "Date", "arg0", ")", "{", "this", ".", "fetcherEndTimeStamp", "=", "arg0", ";", "}"], "nl": "Sets the fetcher end time stamp.", "nlToks": ["Sets", "the", "fetcher", "end", "time", "stamp", "."], "path": "pkesireddy/portico_fletcher/tree/master/FetcherTesterService/src/main/java/org/ithaka/cm/fetchertester/model/TestResultDTO.java", "idx": 1498}
{"memberVariables": {"authToken": "String", "user": "String"}, "code": ["String", "function", "(", ")", "{", "return", "user", ";", "}"], "memberFunctions": {"resume": [["void", "String jobId"]], "suspend": [["void", "String jobId"]], "getDefinition": [["String", "String jobId"]], "submitJob": [["String", "Configuration conf", "boolean startJob"]], "getJobIdForExternalId": [["String", "String externalId"]], "change": [["void", "String jobId", "String changeValue"]], "start": [["void", "String jobId"]], "streamLog": [["void", "String jobId", "Writer writer"]], "kill": [["void", "String jobId"]], "reRun": [["void", "String jobId", "Configuration conf"]], "getJob": [["WorkflowJob", "String jobId"], ["WorkflowJob", "String jobId", "int start", "int length"]], "getAuthToken": [["String"]], "dryrunSubmit": [["String", "Configuration conf", "boolean startJob"]], "getCoordJob": [["CoordinatorJob", "String jobId"], ["CoordinatorJob", "String jobId", "int start", "int length"]]}, "className": "BaseEngine", "renamed": ["String", "function", "(", ")", "{", "return", "user", ";", "}"], "nl": "Return the user name.", "nlToks": ["Return", "the", "user", "name", "."], "path": "pingpangkuangmo/oozie/tree/master/core/src/main/java/org/apache/oozie/BaseEngine.java", "idx": 1499}
{"memberVariables": {}, "code": ["void", "function", "(", "final", "String", "path", ")", "{", "UnderFileSystem", "ufs", "=", "UnderFileSystem", ".", "get", "(", "path", ")", ";", "OutputStream", "os", "=", "ufs", ".", "create", "(", "path", ")", ";", "os", ".", "close", "(", ")", ";", "}"], "memberFunctions": {"mkdirIfNotExists": [["void", "final String path"]], "deleteDir": [["void", "final String path"]]}, "className": "UnderFileSystemUtils", "renamed": ["void", "function", "(", "final", "String", "arg0", ")", "{", "UnderFileSystem", "loc0", "=", "UnderFileSystem", ".", "get", "(", "arg0", ")", ";", "OutputStream", "loc1", "=", "loc0", ".", "create", "(", "arg0", ")", ";", "loc1", ".", "close", "(", ")", ";", "}"], "nl": "Creates an empty file.", "nlToks": ["Creates", "an", "empty", "file", "."], "path": "poemlin/alluxio/tree/master/core/common/src/main/java/alluxio/util/UnderFileSystemUtils.java", "idx": 1500}
{"memberVariables": {"mManager": "RecyclerView.LayoutManager", "auto_disable_loadmore=false": "boolean", "page_now=1": "int", "listview": "UltimateRecyclerView", "noad": "EASY", "withad": "ADMOB", "refresh_default=new Runnable(){\n  @Override public void run(){\n    reset();\n    if (loading_more != null) {\n      final boolean success_onStart=loading_more.request_start(1,0,0,BiAdAdapterSwitcher.this,true);\n      if (success_onStart) {\n        page_now=2;\n        max_pages=3;\n      }\n else {\n        if (auto_disable_loadmore)         listview.disableLoadmore();\n      }\n    }\n    listview.setRefreshing(false);\n  }\n}\n": "Runnable", "loading_more": "onLoadMore", "with_the_ad": "boolean", "max_pages=3": "int", "layoutLoadMoreResId=0": "int", "container_data_items": "int"}, "code": ["void", "function", "(", ")", "{", "if", "(", "with_the_ad", ")", "{", "withad", ".", "notifyDataSetChanged", "(", ")", ";", "}", "else", "{", "noad", ".", "notifyDataSetChanged", "(", ")", ";", "}", "}"], "memberFunctions": {"init": [["void", "final boolean adenabled"]], "request_start": [["boolean", "int current_page_no", "int itemsCount", "final int maxLastVisiblePosition", "final BiAdAdapterSwitcher this_module", "final boolean onRefresh"]], "onEnableRefresh": [["BiAdAdapterSwitcher", "final int delay_trigger"]], "onEnableLoadmore": [["BiAdAdapterSwitcher", "final @LayoutRes int layoutResId", "final int delay_trigger", "final onLoadMore loading_more_trigger_interface"]], "run": [["void"]], "setMaxPages": [["void", "final int n"]], "EnableAutoDisableLoadMoreByMaxPages": [["BiAdAdapterSwitcher"]], "load_more_data_at_zero": [["void", "final List<T> new_data_list"]], "emptyViewControl": [["void"]], "load_more_data": [["void", "final List<T> new_data_list"]], "setCustomOnFresh": [["BiAdAdapterSwitcher", "Runnable h"]], "getV": [["View", "final @LayoutRes int layoutResId"]], "removeALL": [["void"]], "scrollToTop": [["void"]], "maximum_size": [["void", "LinearLayout l", "V suppose_tobe_Adview", "Activity activity"]], "reset": [["void"]], "insert_default": [["void", "EASY sd", "List<T> list"], ["void", "ADMOB sd", "List<T> list"]]}, "className": "BiAdAdapterSwitcher", "renamed": ["void", "function", "(", ")", "{", "if", "(", "with_the_ad", ")", "{", "withad", ".", "notifyDataSetChanged", "(", ")", ";", "}", "else", "{", "noad", ".", "notifyDataSetChanged", "(", ")", ";", "}", "}"], "nl": "once it is called, the list will restart from the zero scroll", "nlToks": ["once", "it", "is", "called", ",", "the", "list", "will", "restart", "from", "the", "zero", "scroll"], "path": "prashant31191/UltimateRecyclerView/tree/master/UltimateRecyclerView/ultimaterecyclerview/src/main/java/com/marshalchen/ultimaterecyclerview/quickAdapter/BiAdAdapterSwitcher.java", "idx": 1504}
{"memberVariables": {"msg": "String", "image": "BufferedImage", "coverArtImage": "CoverArtImage", "name": "String", "coverArtArchiveList": "List<MbImage>", "type": "CoverType", "value": "String", "hash=\"\"": "String"}, "code": ["BufferedImage", "function", "(", ")", "{", "if", "(", "coverArtImage", "!=", "null", ")", "{", "if", "(", "image", "==", "null", ")", "{", "try", "{", "image", "=", "ImageIO", ".", "read", "(", "coverArtImage", ".", "getLargeThumbnail", "(", ")", ")", ";", "}", "catch", "(", "IOException", "ex", ")", "{", "Popup", ".", "error", "(", "ex", ")", ";", "}", "}", "}", "return", "image", ";", "}"], "memberFunctions": {"getCoverArtArchiveList": [["List<MbImage>"]], "getMsg": [["String"]], "getName": [["String"]], "getHash": [["String"]], "getSizeDisplay": [["String"]], "compareTo": [["int", "Object obj"]], "readImage": [["BufferedImage"]], "listCovertArtArchive": [["void"]], "getValue": [["String"]], "getSizeHTML": [["String"]], "getType": [["CoverType"]], "hashCode": [["int"]], "equals": [["boolean", "Object obj"]], "readImages": [["void"]], "toString": [["String"]], "setImage": [["void", "BufferedImage image"]]}, "className": "Cover", "renamed": ["BufferedImage", "function", "(", ")", "{", "if", "(", "coverArtImage", "!=", "null", ")", "{", "if", "(", "image", "==", "null", ")", "{", "try", "{", "image", "=", "ImageIO", ".", "read", "(", "coverArtImage", ".", "getLargeThumbnail", "(", ")", ")", ";", "}", "catch", "(", "IOException", "loc0", ")", "{", "Popup", ".", "error", "(", "loc0", ")", ";", "}", "}", "}", "return", "image", ";", "}"], "nl": "Get image", "nlToks": ["Get", "image"], "path": "phramusca/JaMuz/tree/master/src/jamuz/process/check/Cover.java", "idx": 1505}
{"memberVariables": {"_SignCertificateResponse_QNAME=new QName(\"http://platformlayer.org/auth/v1.0\",\"signCertificateResponse\")": "QName", "_Access_QNAME=new QName(\"http://platformlayer.org/auth/v1.0\",\"access\")": "QName", "_CheckServiceAccessResponse_QNAME=new QName(\"http://platformlayer.org/auth/v1.0\",\"checkServiceAccessResponse\")": "QName", "_SignCertificateRequest_QNAME=new QName(\"http://platformlayer.org/auth/v1.0\",\"signCertificateRequest\")": "QName", "_CertificateChainInfo_QNAME=new QName(\"http://platformlayer.org/auth/v1.0\",\"certificateChainInfo\")": "QName", "_RegistrationRequest_QNAME=new QName(\"http://platformlayer.org/auth/v1.0\",\"registrationRequest\")": "QName", "_User_QNAME=new QName(\"http://platformlayer.org/auth/v1.0\",\"user\")": "QName", "_AuthenticateResponse_QNAME=new QName(\"http://platformlayer.org/auth/v1.0\",\"authenticateResponse\")": "QName", "_CheckServiceAccessRequest_QNAME=new QName(\"http://platformlayer.org/auth/v1.0\",\"checkServiceAccessRequest\")": "QName", "_ValidateTokenResponse_QNAME=new QName(\"http://platformlayer.org/auth/v1.0\",\"validateTokenResponse\")": "QName", "_AuthenticateRequest_QNAME=new QName(\"http://platformlayer.org/auth/v1.0\",\"authenticateRequest\")": "QName", "_Auth_QNAME=new QName(\"http://platformlayer.org/auth/v1.0\",\"auth\")": "QName", "_ValidateAccess_QNAME=new QName(\"http://platformlayer.org/auth/v1.0\",\"validateAccess\")": "QName", "_RegistrationResponse_QNAME=new QName(\"http://platformlayer.org/auth/v1.0\",\"registrationResponse\")": "QName", "_Roles_QNAME=new QName(\"http://platformlayer.org/auth/v1.0\",\"roles\")": "QName"}, "code": ["CertificateInfo", "function", "(", ")", "{", "return", "new", "CertificateInfo", "(", ")", ";", "}"], "memberFunctions": {"createValidateTokenResponse": [["ValidateTokenResponse"], ["JAXBElement<ValidateTokenResponse>", "ValidateTokenResponse value"]], "createCertificateChainInfo": [["CertificateChainInfo"], ["JAXBElement<CertificateChainInfo>", "CertificateChainInfo value"]], "createRoleList": [["RoleList"]], "createCheckServiceAccessRequest": [["CheckServiceAccessRequest"], ["JAXBElement<CheckServiceAccessRequest>", "CheckServiceAccessRequest value"]], "createRole": [["Role"]], "createToken": [["Token"]], "createCheckServiceAccessResponse": [["CheckServiceAccessResponse"], ["JAXBElement<CheckServiceAccessResponse>", "CheckServiceAccessResponse value"]], "createPasswordCredentials": [["PasswordCredentials"]], "createAuthenticateResponse": [["AuthenticateResponse"], ["JAXBElement<AuthenticateResponse>", "AuthenticateResponse value"]], "createValidateAccess": [["ValidateAccess"], ["JAXBElement<ValidateAccess>", "ValidateAccess value"]], "createAuthenticateRequest": [["AuthenticateRequest"], ["JAXBElement<AuthenticateRequest>", "AuthenticateRequest value"]], "createAuth": [["Auth"], ["JAXBElement<Auth>", "Auth value"]], "createUserValidation": [["UserValidation"]], "createCertificateCredentials": [["CertificateCredentials"]], "createRegistrationResponse": [["RegistrationResponse"], ["JAXBElement<RegistrationResponse>", "RegistrationResponse value"]], "createUser": [["User"], ["JAXBElement<User>", "User value"]], "createRoles": [["JAXBElement<RoleList>", "RoleList value"]], "createRegistrationRequest": [["RegistrationRequest"], ["JAXBElement<RegistrationRequest>", "RegistrationRequest value"]], "createAccess": [["Access"], ["JAXBElement<Access>", "Access value"]], "createProjectValidation": [["ProjectValidation"]], "createSignCertificateResponse": [["SignCertificateResponse"], ["JAXBElement<SignCertificateResponse>", "SignCertificateResponse value"]], "createSignCertificateRequest": [["SignCertificateRequest"], ["JAXBElement<SignCertificateRequest>", "SignCertificateRequest value"]]}, "className": "ObjectFactory", "renamed": ["CertificateInfo", "function", "(", ")", "{", "return", "new", "CertificateInfo", "(", ")", ";", "}"], "nl": "Create an instance of  {@link CertificateInfo }", "nlToks": ["Create", "an", "instance", "of", "-LCB-", "@link", "CertificateInfo", "-RCB-"], "path": "platformlayer/platformlayer/tree/master/auth/client/src/generated/xjc/org/platformlayer/auth/v1/ObjectFactory.java", "idx": 1506}
{"memberVariables": {"dim": "Dimension", "panel": "XHTMLPanel"}, "code": ["SharedContext", "function", "(", ")", "{", "return", "panel", ".", "getSharedContext", "(", ")", ";", "}"], "memberFunctions": {"layout": [["void", "Graphics2D g2", "Dimension dim"]], "renderToImageAutoSize": [["BufferedImage", "String url", "int width"], ["BufferedImage", "String url", "int width", "int bufferedImageType"]], "setDocument": [["void", "String url"], ["void", "Document doc", "String base_url"]], "setSharedContext": [["void", "SharedContext ctx"]], "getMinimumSize": [["Rectangle"]], "getPanel": [["XHTMLPanel"]], "render": [["void", "Graphics2D g2"]], "renderToImage": [["BufferedImage", "String url", "int width", "int height"], ["BufferedImage", "String url", "int width", "int height", "int bufferedImageType"]]}, "className": "Graphics2DRenderer", "renamed": ["SharedContext", "function", "(", ")", "{", "return", "panel", ".", "getSharedContext", "(", ")", ";", "}"], "nl": "Gets the SharedContext for layout and rendering.", "nlToks": ["Gets", "the", "SharedContext", "for", "layout", "and", "rendering", "."], "path": "plutogeek/flyingsaucer/tree/master/flying-saucer-core/src/main/java/org/xhtmlrenderer/simple/Graphics2DRenderer.java", "idx": 1508}
{"memberVariables": {}, "code": ["ApplicationManagementService", "function", "(", ")", "{", "return", "ApplicationManagementServiceImpl", ".", "getInstance", "(", ")", ";", "}"], "memberFunctions": {"getAllLocalClaimUris": [["String[]", "String tenantDomain"]], "getAllRequestPathAuthenticators": [["RequestPathAuthenticatorConfig[]", "String tenantDomain"]], "getAllRequestedClaimsByServiceProvider": [["List<String>", "String serviceProviderName", "String tenantDomain"]], "getAllIdentityProviders": [["IdentityProvider[]", "String tenantDomain"]], "getServiceProvider": [["ServiceProvider", "String serviceProviderName", "String tenantDomain"]], "updateApplication": [["void", "ServiceProvider serviceProvider", "String tenantDomain", "String userName"]], "getServiceProviderToLocalIdPClaimMapping": [["Map<String,String>", "String serviceProviderName", "String tenantDomain"]], "getAllLocalAuthenticators": [["LocalAuthenticatorConfig[]", "String tenantDomain"]], "getServiceProviderNameByClientId": [["String", "String clientId", "String type", "String tenantDomain"]], "getApplicationExcludingFileBasedSPs": [["ServiceProvider", "String applicationName", "String tenantDomain"]], "createApplication": [["void", "ServiceProvider serviceProvider", "String tenantDomain", "String userName"]], "getLocalIdPToServiceProviderClaimMapping": [["Map<String,String>", "String serviceProviderName", "String tenantDomain"]], "getServiceProviderByClientId": [["ServiceProvider", "String clientId", "String clientType", "String tenantDomain"]], "getAllApplicationBasicInfo": [["ApplicationBasicInfo[]", "String tenantDomain", "String userName"]], "getIdentityProvider": [["IdentityProvider", "String federatedIdPName", "String tenantDomain"]], "getServiceProviderNameByClientIdExcludingFileBasedSPs": [["String", "String clientId", "String type", "String tenantDomain"]], "deleteApplication": [["void", "String applicationName", "String tenantDomain", "String userName"]]}, "className": "ApplicationManagementService", "renamed": ["ApplicationManagementService", "function", "(", ")", "{", "return", "ApplicationManagementServiceImpl", ".", "getInstance", "(", ")", ";", "}"], "nl": "Get ApplicationManagementService instance.", "nlToks": ["Get", "ApplicationManagementService", "instance", "."], "path": "harsha1979/carbon-identity/tree/master/components/application-mgt/org.wso2.carbon.identity.application.mgt/src/main/java/org/wso2/carbon/identity/application/mgt/ApplicationManagementService.java", "idx": 1509}
{"memberVariables": {"INSTRUMENTATION_GROUP=\"locks\"": "String", "locks": "MemoryLocks"}, "code": ["void", "function", "(", ")", "{", "locks", "=", "null", ";", "}"], "memberFunctions": {"init": [["void", "Services services"]], "getInterface": [["Class<? extends Service>"]], "getWriteLock": [["MemoryLocks.LockToken", "String resource", "long wait"]], "getReadLock": [["MemoryLocks.LockToken", "String resource", "long wait"]], "instrument": [["void", "Instrumentation instr"]]}, "className": "MemoryLocksService", "renamed": ["void", "function", "(", ")", "{", "locks", "=", "null", ";", "}"], "nl": "Destroy the memory locks service.", "nlToks": ["Destroy", "the", "memory", "locks", "service", "."], "path": "pingpangkuangmo/oozie/tree/master/core/src/main/java/org/apache/oozie/service/MemoryLocksService.java", "idx": 1510}
{"memberVariables": {"mWriter": "ByteBuffer", "mBuffer": "byte[]"}, "code": ["BufferedByteWriter", "function", "(", "byte", "[", "]", "value", ")", "{", "ensureCapacity", "(", "2", "+", "value", ".", "length", ")", ";", "mWriter", ".", "putShort", "(", "(", "short", ")", "value", ".", "length", ")", ";", "mWriter", ".", "put", "(", "value", ")", ";", "return", "this", ";", "}"], "memberFunctions": {"put24": [["BufferedByteWriter", "byte value"], ["BufferedByteWriter", "short value"], ["BufferedByteWriter", "int value"]], "putLen8": [["BufferedByteWriter", "byte[] value"]], "put16": [["BufferedByteWriter", "byte value"], ["BufferedByteWriter", "short value"]], "toByteArray": [["byte[]"]], "ensureCapacity": [["void", "int required"]], "put64": [["BufferedByteWriter", "byte value"], ["BufferedByteWriter", "short value"], ["BufferedByteWriter", "int value"], ["BufferedByteWriter", "long value"]], "put": [["BufferedByteWriter", "byte[] value"], ["BufferedByteWriter", "byte value"]], "put32": [["BufferedByteWriter", "byte value"], ["BufferedByteWriter", "short value"], ["BufferedByteWriter", "int value"]]}, "className": "BufferedByteWriter", "renamed": ["BufferedByteWriter", "function", "(", "byte", "[", "]", "arg0", ")", "{", "ensureCapacity", "(", "2", "+", "arg0", ".", "length", ")", ";", "mWriter", ".", "putShort", "(", "(", "short", ")", "arg0", ".", "length", ")", ";", "mWriter", ".", "put", "(", "arg0", ")", ";", "return", "this", ";", "}"], "nl": "Write the 16-bit length of the given data followed by the data itself", "nlToks": ["Write", "the", "16-bit", "length", "of", "the", "given", "data", "followed", "by", "the", "data", "itself"], "path": "prathyks/strongswan/tree/master/src/frontends/android/app/src/main/java/org/strongswan/android/utils/BufferedByteWriter.java", "idx": 1511}
{"memberVariables": {"originallyEncodedSize": "int", "value": "long"}, "code": ["int", "function", "(", "int", "value", ")", "{", "if", "(", "value", "<", "253", ")", "return", "1", ";", "else", "if", "(", "value", "<", "65536", ")", "return", "3", ";", "return", "5", ";", "}"], "memberFunctions": {"encode": [["byte[]"]], "getSizeInBytes": [["int"]], "getOriginalSizeInBytes": [["int"]]}, "className": "VarInt", "renamed": ["int", "function", "(", "int", "arg0", ")", "{", "if", "(", "arg0", "<", "253", ")", "return", "1", ";", "else", "if", "(", "arg0", "<", "65536", ")", "return", "3", ";", "return", "5", ";", "}"], "nl": "Gets the minimum encoded size of the given value.", "nlToks": ["Gets", "the", "minimum", "encoded", "size", "of", "the", "given", "value", "."], "path": "plncoin/plncoin-and/tree/master/plncoinj/core/src/main/java/com/google/bitcoin/core/VarInt.java", "idx": 1514}
{"memberVariables": {}, "code": ["CoordinatorEngine", "function", "(", "String", "user", ",", "String", "authToken", ")", "{", "return", "new", "CoordinatorEngine", "(", "user", ",", "authToken", ")", ";", "}"], "memberFunctions": {"init": [["void", "Services services"]], "getInterface": [["Class<? extends Service>"]], "getSystemCoordinatorEngine": [["CoordinatorEngine"]], "destroy": [["void"]]}, "className": "CoordinatorEngineService", "renamed": ["CoordinatorEngine", "function", "(", "String", "arg0", ",", "String", "arg1", ")", "{", "return", "new", "CoordinatorEngine", "(", "arg0", ",", "arg1", ")", ";", "}"], "nl": "Return a Coordinator engine.", "nlToks": ["Return", "a", "Coordinator", "engine", "."], "path": "pingpangkuangmo/oozie/tree/master/core/src/main/java/org/apache/oozie/service/CoordinatorEngineService.java", "idx": 1517}
{"memberVariables": {"MICROCOIN=MILLICOIN.divide(1000)": "Coin", "SMALLEST_UNIT_EXPONENT=8": "int", "COIN_VALUE=LongMath.pow(10,SMALLEST_UNIT_EXPONENT)": "long", "SATOSHI=Coin.valueOf(1)": "Coin", "FRIENDLY_FORMAT=MonetaryFormat.BTC.minDecimals(2).repeatOptionalDecimals(1,6).postfixCode()": "MonetaryFormat", "COIN=Coin.valueOf(COIN_VALUE)": "Coin", "CENT=COIN.divide(100)": "Coin", "FIFTY_COINS=COIN.multiply(50)": "Coin", "NEGATIVE_SATOSHI=Coin.valueOf(-1)": "Coin", "MILLICOIN=COIN.divide(1000)": "Coin", "MAX_SATOSHIS=COIN_VALUE * NetworkParameters.MAX_COINS": "long", "ZERO=Coin.valueOf(0)": "Coin", "value": "long", "PLAIN_FORMAT=MonetaryFormat.BTC.minDecimals(0).repeatOptionalDecimals(1,8).noCode()": "MonetaryFormat"}, "code": ["Coin", "function", "(", "final", "int", "coins", ",", "final", "int", "cents", ")", "{", "checkArgument", "(", "cents", "<", "100", ")", ";", "checkArgument", "(", "cents", ">=", "0", ")", ";", "checkArgument", "(", "coins", ">=", "0", ")", ";", "final", "Coin", "coin", "=", "COIN", ".", "multiply", "(", "coins", ")", ".", "add", "(", "CENT", ".", "multiply", "(", "cents", ")", ")", ";", "checkArgument", "(", "coin", ".", "compareTo", "(", "NetworkParameters", ".", "MAX_MONEY", ")", "<=", "0", ")", ";", "return", "coin", ";", "}"], "memberFunctions": {"add": [["Coin", "final Coin value"]], "signum": [["int"]], "isNegative": [["boolean"]], "isLessThan": [["boolean", "Coin other"]], "subtract": [["Coin", "final Coin value"]], "isGreaterThan": [["boolean", "Coin other"]], "isPositive": [["boolean"]], "toPlainString": [["String"]], "smallestUnitExponent": [["int"]], "compareTo": [["int", "final Coin other"]], "longValue": [["long"]], "parseCoin": [["Coin", "final String str"]], "toFriendlyString": [["String"]], "getValue": [["long"]], "shiftLeft": [["Coin", "final int n"]], "shiftRight": [["Coin", "final int n"]], "divideAndRemainder": [["Coin[]", "final long divisor"]], "hashCode": [["int"]], "negate": [["Coin"]], "equals": [["boolean", "final Object o"]], "isZero": [["boolean"]], "divide": [["Coin", "final long divisor"], ["long", "final Coin divisor"]], "toString": [["String"]], "multiply": [["Coin", "final long factor"]]}, "className": "Coin", "renamed": ["Coin", "function", "(", "final", "int", "arg0", ",", "final", "int", "arg1", ")", "{", "checkArgument", "(", "arg1", "<", "100", ")", ";", "checkArgument", "(", "arg1", ">=", "0", ")", ";", "checkArgument", "(", "arg0", ">=", "0", ")", ";", "final", "Coin", "loc0", "=", "COIN", ".", "multiply", "(", "arg0", ")", ".", "add", "(", "CENT", ".", "multiply", "(", "arg1", ")", ")", ";", "checkArgument", "(", "loc0", ".", "compareTo", "(", "NetworkParameters", ".", "MAX_MONEY", ")", "<=", "0", ")", ";", "return", "loc0", ";", "}"], "nl": "Convert an amount expressed in the way humans are used to into satoshis.", "nlToks": ["Convert", "an", "amount", "expressed", "in", "the", "way", "humans", "are", "used", "to", "into", "satoshis", "."], "path": "1000000000001/bitcoinj/tree/master/core/src/main/java/org/bitcoinj/core/Coin.java", "idx": 1518}
{"memberVariables": {"LOG=Logger.getLogger(StartBrowser.class)": "Logger"}, "code": ["void", "function", "(", "URL", "url", ")", "{", "openUrl", "(", "url", ".", "toString", "(", ")", ")", ";", "}"], "memberFunctions": {}, "className": "StartBrowser", "renamed": ["void", "function", "(", "URL", "arg0", ")", "{", "openUrl", "(", "arg0", ".", "toString", "(", ")", ")", ";", "}"], "nl": "Open an URL in the system's default browser.", "nlToks": ["Open", "an", "URL", "in", "the", "system", "'s", "default", "browser", "."], "path": "pichiliani/CoArgoUML/tree/master/v0.24/fonte/src/argouml-app/src/org/argouml/util/osdep/StartBrowser.java", "idx": 1521}
{"memberVariables": {"ext": "ExtensionInfo", "EXPR=0": "int", "DECL=4": "int", "pos": "Position", "MEMB=3": "int", "STMT=1": "int", "TYPE=2": "int", "FILE=5": "int"}, "code": ["Position", "function", "(", "polyglot", ".", "types", ".", "TypeObject", "t", ")", "{", "Position", "p", "=", "t", ".", "position", "(", ")", ";", "if", "(", "p", "==", "null", ")", "p", "=", "Position", ".", "compilerGenerated", "(", "0", ")", ";", "return", "p", ";", "}"], "memberFunctions": {"parseType": [["TypeNode", "String fmt", "Object... os"], ["TypeNode", "String fmt", "List<?> subst"]], "parseMember": [["ClassMember", "String fmt", "Object... os"], ["ClassMember", "String fmt", "List<?> subst"]], "parser": [["QQParser", "Lexer lexer", "TypeSystem ts", "NodeFactory nf", "ErrorQueue eq"]], "parseStmt": [["Stmt", "String fmt", "Object... os"], ["Stmt", "String fmt", "List<?> subst"]], "parseDecl": [["ClassDecl", "String fmt", "Object... os"], ["ClassDecl", "String fmt", "List<?> subst"]], "parseFile": [["SourceFile", "String fmt", "Object... os"], ["SourceFile", "String fmt", "List<?> subst"]], "parse": [["Node", "int kind", "String fmt", "Object... subst"]], "lexer": [["Lexer", "String fmt", "Position pos", "Object... subst"]], "parseExpr": [["Expr", "String fmt", "Object... os"], ["Expr", "String fmt", "List<?> subst"]]}, "className": "QQ", "renamed": ["Position", "function", "(", "polyglot", ".", "types", ".", "TypeObject", "arg0", ")", "{", "Position", "loc0", "=", "arg0", ".", "position", "(", ")", ";", "if", "(", "loc0", "==", "null", ")", "loc0", "=", "Position", ".", "compilerGenerated", "(", "0", ")", ";", "return", "loc0", ";", "}"], "nl": "Return a position for a type object. Generate one if the type doesn't have one.", "nlToks": ["Return", "a", "position", "for", "a", "type", "object", ".", "Generate", "one", "if", "the", "type", "does", "n't", "have", "one", "."], "path": "polyglot-compiler/polyglot/tree/master/src/polyglot/qq/QQ.java", "idx": 1522}
{"memberVariables": {"errorCode": "Integer", "errorMsg": "String"}, "code": ["Integer", "function", "(", ")", "{", "return", "errorCode", ";", "}"], "memberFunctions": {"isSPErrorOut": [["boolean"]], "setErrorMsg": [["void", "String errorMsg"]], "toString": [["String"]], "setErrorCode": [["void", "Integer errorCode"]], "getErrorMsg": [["String"]]}, "className": "SPResponse", "renamed": ["Integer", "function", "(", ")", "{", "return", "errorCode", ";", "}"], "nl": "Gets the error code.", "nlToks": ["Gets", "the", "error", "code", "."], "path": "pkesireddy/portico_fletcher/tree/master/FetcherTesterService/src/main/java/org/ithaka/cm/fetchertester/model/SPResponse.java", "idx": 1523}
{"memberVariables": {"expires": "Date", "data": "byte[]", "transformedTokenIdentifier": "String", "created": "Date", "unattachedReference": "Element", "secret": "byte[]", "securityContext": "SecurityContext", "tokenHash": "int", "token": "Element", "crypto": "Crypto", "principal": "Principal", "serialVersionUID=3820740387121650613L": "long", "wsuId": "String", "issuerAddress": "String", "encrKeySha1Value": "String", "id": "String", "x509cert": "X509Certificate", "BOOTSTRAP_TOKEN_ID=\"bootstrap_security_token_id\"": "String", "tokenType": "String", "attachedReference": "Element", "properties": "Map<String,Object>", "key": "Key"}, "code": ["void", "function", "(", "int", "hash", ")", "{", "tokenHash", "=", "hash", ";", "}"], "memberFunctions": {"setAttachedReference": [["void", "Element attachedReference"]], "getTokenType": [["String"]], "setProperties": [["void", "Map<String,Object> properties"]], "setExpires": [["void", "Date expires"]], "getIssuerAddress": [["String"]], "setSHA1": [["void", "String sha"]], "getId": [["String"]], "setX509Certificate": [["void", "X509Certificate cert", "Crypto cpt"]], "getTransformedTokenIdentifier": [["String"]], "setPrincipal": [["void", "Principal principal"]], "getPrincipal": [["Principal"]], "getIdFromSTR": [["String", "Element str"]], "setId": [["void", "String id"]], "setIssuerAddress": [["void", "String issuerAddress"]], "getData": [["byte[]"]], "setKey": [["void", "Key key"]], "setTokenType": [["void", "String s"]], "getKey": [["Key"]], "setData": [["void", "byte[] data"]], "getProperties": [["Map<String,Object>"]], "setTransformedTokenIdentifier": [["void", "String transformedTokenIdentifier"]], "getTokenHash": [["int"]], "getCreated": [["Date"]], "getUnattachedReference": [["Element"]], "processLifeTime": [["void", "Element lifetimeElem"]], "setUnattachedReference": [["void", "Element unattachedReference"]], "setSecurityContext": [["void", "SecurityContext securityContext"]], "getCrypto": [["Crypto"]], "getSecret": [["byte[]"]], "setToken": [["void", "Element token"]], "setSecret": [["void", "byte[] secret"]], "getX509Certificate": [["X509Certificate"]], "getToken": [["Element"]], "isAboutToExpire": [["boolean", "long secondsToExpiry"]], "isExpired": [["boolean"]], "setWsuId": [["void", "String wsuId"]], "getExpires": [["Date"]], "getWsuId": [["String"]], "cloneElement": [["Element", "Element el"]], "getAttachedReference": [["Element"]], "getSHA1": [["String"]], "getSecurityContext": [["SecurityContext"]]}, "className": "SecurityToken", "renamed": ["void", "function", "(", "int", "arg0", ")", "{", "tokenHash", "=", "arg0", ";", "}"], "nl": "Set a hash code associated with this token.", "nlToks": ["Set", "a", "hash", "code", "associated", "with", "this", "token", "."], "path": "primesign/cxf/tree/master/rt/ws/security/src/main/java/org/apache/cxf/ws/security/tokenstore/SecurityToken.java", "idx": 1525}
{"memberVariables": {"differenceEvaluator=DifferenceEvaluators.Default": "DifferenceEvaluator", "comparisonResultsToCheck=CHECK_FOR_IDENTICAL": "ComparisonResult[]", "CHECK_FOR_IDENTICAL=new ComparisonResult[]{ComparisonResult.SIMILAR,ComparisonResult.DIFFERENT}": "ComparisonResult[]", "controlSource": "Source", "CHECK_FOR_SIMILAR=new ComparisonResult[]{ComparisonResult.DIFFERENT}": "ComparisonResult[]", "namespaceContext": "Map<String,String>", "nodeFilter": "Predicate<Node>", "differenceListeners=new ArrayList<ComparisonListener>()": "List<ComparisonListener>", "attributeFilter": "Predicate<Attr>", "ignoreWhitespace": "boolean", "comparisonListeners=new ArrayList<ComparisonListener>()": "List<ComparisonListener>", "ignoreComments": "boolean", "normalizeWhitespace": "boolean", "nodeMatcher": "NodeMatcher", "comparisonController=ComparisonControllers.Default": "ComparisonController", "testSource": "Source", "results": "List<Difference>", "comparisonResultsToCheck": "EnumSet<ComparisonResult>"}, "code": ["DiffBuilder", "function", "(", "Object", "test", ")", "{", "testSource", "=", "getSource", "(", "test", ")", ";", "return", "this", ";", "}"], "memberFunctions": {"checkForIdentical": [["DiffBuilder"]], "withNamespaceContext": [["DiffBuilder", "Map<String,String> uri2Prefix"]], "compare": [["DiffBuilder", "final Object control"]], "withNodeFilter": [["DiffBuilder", "Predicate<Node> nodeFilter"]], "comparisonPerformed": [["void", "final Comparison comparison", "final ComparisonResult outcome"]], "withNodeMatcher": [["DiffBuilder", "final NodeMatcher nodeMatcher"]], "getDifferences": [["List<Difference>"]], "withComparisonController": [["DiffBuilder", "final ComparisonController comparisonController"]], "ignoreWhitespace": [["DiffBuilder"]], "withDifferenceEvaluator": [["DiffBuilder", "final DifferenceEvaluator differenceEvaluator"]], "ignoreComments": [["DiffBuilder"]], "withDifferenceListeners": [["DiffBuilder", "final ComparisonListener... comparisonListeners"]], "checkForSimilar": [["DiffBuilder"]], "normalizeWhitespace": [["DiffBuilder"]], "build": [["Diff"]], "getSource": [["Source", "Object object"]], "withComparisonListeners": [["DiffBuilder", "final ComparisonListener... comparisonListeners"]], "wrap": [["Source", "final Source source"]], "withAttributeFilter": [["DiffBuilder", "Predicate<Attr> attributeFilter"]]}, "className": "DiffBuilder", "renamed": ["DiffBuilder", "function", "(", "Object", "arg0", ")", "{", "testSource", "=", "getSource", "(", "arg0", ")", ";", "return", "this", ";", "}"], "nl": "Set the Test-Source from all kind of types supported by  {@link Input#from(Object)}.", "nlToks": ["Set", "the", "Test-Source", "from", "all", "kind", "of", "types", "supported", "by", "-LCB-", "@link", "Input", "#from", "-LRB-", "Object", "-RRB-", "-RCB-", "."], "path": "phbenisc/xmlunit/tree/master/xmlunit-core/src/main/java/org/xmlunit/builder/DiffBuilder.java", "idx": 1527}
{"memberVariables": {"elevation": "int", "noise": "int", "azimuth": "int", "id": "String"}, "code": ["String", "function", "(", ")", "{", "return", "id", ";", "}"], "memberFunctions": {"getAzimuth": [["int"]], "setElevation": [["void", "int elevation"]], "setNoise": [["void", "int noise"]], "setId": [["void", "String id"]], "getNoise": [["int"]], "getElevation": [["int"]], "setAzimuth": [["void", "int azimuth"]]}, "className": "SatelliteInfo", "renamed": ["String", "function", "(", ")", "{", "return", "id", ";", "}"], "nl": "Get the ID of satellite vehicle, for example \"05\".", "nlToks": ["Get", "the", "ID", "of", "satellite", "vehicle", ",", "for", "example", "``", "05", "''", "."], "path": "pkoziol/marine-api/tree/master/src/main/java/net/sf/marineapi/nmea/util/SatelliteInfo.java", "idx": 1529}
{"memberVariables": {"incomingObserver": "MessageObserver"}, "code": ["EndpointReferenceType", "function", "(", "EndpointInfo", "ei", ",", "Bus", "bus", ")", "{", "return", "getTargetReference", "(", "ei", ",", "null", ",", "bus", ")", ";", "}"], "memberFunctions": {"activate": [["void"]], "getLogger": [["Logger"]], "getMessageObserver": [["MessageObserver"]], "setMessageObserver": [["void", "MessageObserver observer"]], "deactivate": [["void"]]}, "className": "AbstractObservable", "renamed": ["EndpointReferenceType", "function", "(", "EndpointInfo", "arg0", ",", "Bus", "arg1", ")", "{", "return", "getTargetReference", "(", "arg0", ",", "null", ",", "arg1", ")", ";", "}"], "nl": "Get the target reference .", "nlToks": ["Get", "the", "target", "reference", "."], "path": "primesign/cxf/tree/master/core/src/main/java/org/apache/cxf/transport/AbstractObservable.java", "idx": 1530}
{"memberVariables": {"_SignCertificateResponse_QNAME=new QName(\"http://platformlayer.org/auth/v1.0\",\"signCertificateResponse\")": "QName", "_Access_QNAME=new QName(\"http://platformlayer.org/auth/v1.0\",\"access\")": "QName", "_CheckServiceAccessResponse_QNAME=new QName(\"http://platformlayer.org/auth/v1.0\",\"checkServiceAccessResponse\")": "QName", "_SignCertificateRequest_QNAME=new QName(\"http://platformlayer.org/auth/v1.0\",\"signCertificateRequest\")": "QName", "_CertificateChainInfo_QNAME=new QName(\"http://platformlayer.org/auth/v1.0\",\"certificateChainInfo\")": "QName", "_RegistrationRequest_QNAME=new QName(\"http://platformlayer.org/auth/v1.0\",\"registrationRequest\")": "QName", "_User_QNAME=new QName(\"http://platformlayer.org/auth/v1.0\",\"user\")": "QName", "_AuthenticateResponse_QNAME=new QName(\"http://platformlayer.org/auth/v1.0\",\"authenticateResponse\")": "QName", "_CheckServiceAccessRequest_QNAME=new QName(\"http://platformlayer.org/auth/v1.0\",\"checkServiceAccessRequest\")": "QName", "_ValidateTokenResponse_QNAME=new QName(\"http://platformlayer.org/auth/v1.0\",\"validateTokenResponse\")": "QName", "_AuthenticateRequest_QNAME=new QName(\"http://platformlayer.org/auth/v1.0\",\"authenticateRequest\")": "QName", "_Auth_QNAME=new QName(\"http://platformlayer.org/auth/v1.0\",\"auth\")": "QName", "_ValidateAccess_QNAME=new QName(\"http://platformlayer.org/auth/v1.0\",\"validateAccess\")": "QName", "_RegistrationResponse_QNAME=new QName(\"http://platformlayer.org/auth/v1.0\",\"registrationResponse\")": "QName", "_Roles_QNAME=new QName(\"http://platformlayer.org/auth/v1.0\",\"roles\")": "QName"}, "code": ["RoleList", "function", "(", ")", "{", "return", "new", "RoleList", "(", ")", ";", "}"], "memberFunctions": {"createValidateTokenResponse": [["ValidateTokenResponse"], ["JAXBElement<ValidateTokenResponse>", "ValidateTokenResponse value"]], "createCertificateChainInfo": [["CertificateChainInfo"], ["JAXBElement<CertificateChainInfo>", "CertificateChainInfo value"]], "createCheckServiceAccessRequest": [["CheckServiceAccessRequest"], ["JAXBElement<CheckServiceAccessRequest>", "CheckServiceAccessRequest value"]], "createRole": [["Role"]], "createToken": [["Token"]], "createCheckServiceAccessResponse": [["CheckServiceAccessResponse"], ["JAXBElement<CheckServiceAccessResponse>", "CheckServiceAccessResponse value"]], "createPasswordCredentials": [["PasswordCredentials"]], "createAuthenticateResponse": [["AuthenticateResponse"], ["JAXBElement<AuthenticateResponse>", "AuthenticateResponse value"]], "createValidateAccess": [["ValidateAccess"], ["JAXBElement<ValidateAccess>", "ValidateAccess value"]], "createAuthenticateRequest": [["AuthenticateRequest"], ["JAXBElement<AuthenticateRequest>", "AuthenticateRequest value"]], "createAuth": [["Auth"], ["JAXBElement<Auth>", "Auth value"]], "createCertificateInfo": [["CertificateInfo"]], "createUserValidation": [["UserValidation"]], "createCertificateCredentials": [["CertificateCredentials"]], "createRegistrationResponse": [["RegistrationResponse"], ["JAXBElement<RegistrationResponse>", "RegistrationResponse value"]], "createUser": [["User"], ["JAXBElement<User>", "User value"]], "createRoles": [["JAXBElement<RoleList>", "RoleList value"]], "createRegistrationRequest": [["RegistrationRequest"], ["JAXBElement<RegistrationRequest>", "RegistrationRequest value"]], "createAccess": [["Access"], ["JAXBElement<Access>", "Access value"]], "createProjectValidation": [["ProjectValidation"]], "createSignCertificateResponse": [["SignCertificateResponse"], ["JAXBElement<SignCertificateResponse>", "SignCertificateResponse value"]], "createSignCertificateRequest": [["SignCertificateRequest"], ["JAXBElement<SignCertificateRequest>", "SignCertificateRequest value"]]}, "className": "ObjectFactory", "renamed": ["RoleList", "function", "(", ")", "{", "return", "new", "RoleList", "(", ")", ";", "}"], "nl": "Create an instance of  {@link RoleList }", "nlToks": ["Create", "an", "instance", "of", "-LCB-", "@link", "RoleList", "-RCB-"], "path": "platformlayer/platformlayer/tree/master/auth/client/src/generated/xjc/org/platformlayer/auth/v1/ObjectFactory.java", "idx": 1532}
{"memberVariables": {}, "code": ["void", "function", "(", "Object", "instance", ",", "String", "fieldName", ",", "Object", "value", ")", "{", "Field", "field", ";", "if", "(", "instance", "instanceof", "Class", ")", "field", "=", "getFieldImpl", "(", "(", "Class", ")", "instance", ",", "fieldName", ")", ";", "else", "field", "=", "getFieldImpl", "(", "instance", ".", "getClass", "(", ")", ",", "fieldName", ")", ";", "field", ".", "setAccessible", "(", "true", ")", ";", "field", ".", "set", "(", "instance", ",", "value", ")", ";", "}"], "memberFunctions": {"getValue": [["Object", "Object instance", "String fieldName"]], "getClass": [["Class", "Class parent", "String name"]], "getAllStaticMethods": [["List", "Class entryClass", "String methodName", "Class[] classTypes"]], "getConstructorImpl": [["Constructor", "Class clazz", "Class[] classTypes"]], "getMethodImpl": [["Method", "Class thisClass", "String methodName", "Class[] classTypes"]], "getFieldImpl": [["Field", "Class thisClass", "String fieldName"]], "getClassImpl": [["Class", "Class parent", "String name"]], "invokeAllStaticMethods": [["List", "Class clazz", "String methodName", "Object arg"]], "getMethod": [["Method", "Object instance", "String methodName", "Class[] classTypes"]], "invokeMethod": [["Object", "Object instance", "String methodName", "Object arg"], ["Object", "Object instance", "String methodName", "Object[] args"], ["Object", "Object instance", "String methodName", "Object[] args", "Class[] classTypes"]], "invokeConstructor": [["Object", "Class clazz", "Object[] args"], ["Object", "Class clazz", "Object[] args", "Class[] classTypes"]]}, "className": "PrivilegedAccessor", "renamed": ["void", "function", "(", "Object", "arg0", ",", "String", "arg1", ",", "Object", "arg2", ")", "{", "Field", "loc0", ";", "if", "(", "arg0", "instanceof", "Class", ")", "loc0", "=", "getFieldImpl", "(", "(", "Class", ")", "arg0", ",", "arg1", ")", ";", "else", "loc0", "=", "getFieldImpl", "(", "arg0", ".", "getClass", "(", ")", ",", "arg1", ")", ";", "loc0", ".", "setAccessible", "(", "true", ")", ";", "loc0", ".", "set", "(", "arg0", ",", "arg2", ")", ";", "}"], "nl": "Sets the value of the named field.", "nlToks": ["Sets", "the", "value", "of", "the", "named", "field", "."], "path": "adamfisk/littleshoot-client/tree/master/client/util/src/main/java/org/lastbamboo/client/util/PrivilegedAccessor.java", "idx": 1534}
{"memberVariables": {"NONCOINBASE_HEIGHT=-200": "int", "serialVersionUID=-8744924157056340509L": "long", "index": "long", "value": "BigInteger", "scriptBytes": "byte[]", "hash": "Sha256Hash", "height": "int"}, "code": ["byte", "[", "]", "function", "(", ")", "{", "return", "scriptBytes", ";", "}"], "memberFunctions": {"getValue": [["BigInteger"]], "getHeight": [["int"]], "getHash": [["Sha256Hash"]], "getIndex": [["long"]], "hashCode": [["int"]], "serializeToStream": [["void", "OutputStream bos"]], "equals": [["boolean", "Object o"]], "toString": [["String"]]}, "className": "StoredTransactionOutput", "renamed": ["byte", "[", "]", "function", "(", ")", "{", "return", "scriptBytes", ";", "}"], "nl": "The backing script bytes which can be turned into a Script object.", "nlToks": ["The", "backing", "script", "bytes", "which", "can", "be", "turned", "into", "a", "Script", "object", "."], "path": "plncoin/plncoin-and/tree/master/plncoinj/core/src/main/java/com/google/bitcoin/core/StoredTransactionOutput.java", "idx": 1535}
{"memberVariables": {"nsh": "NamespaceHandler", "ui": "UserInterface", "uac": "UserAgentCallback"}, "code": ["boolean", "function", "(", "Object", "e", ")", "{", "return", "ui", ".", "isActive", "(", "(", "Element", ")", "e", ")", ";", "}"], "memberFunctions": {"getClass": [["String", "Object e"]], "isLink": [["boolean", "Object e"]], "getAttributeValue": [["String", "Object e", "String attrName"], ["String", "Object e", "String namespaceURI", "String attrName"]], "isVisited": [["boolean", "Object e"]], "isHover": [["boolean", "Object e"]], "isFocus": [["boolean", "Object e"]], "getLang": [["String", "Object e"]], "getID": [["String", "Object e"]], "getNonCssStyling": [["String", "Object e"]], "getElementStyling": [["String", "Object e"]]}, "className": "StandardAttributeResolver", "renamed": ["boolean", "function", "(", "Object", "arg0", ")", "{", "return", "ui", ".", "isActive", "(", "(", "Element", ")", "arg0", ")", ";", "}"], "nl": "Gets the active attribute of the StandardAttributeResolver object", "nlToks": ["Gets", "the", "active", "attribute", "of", "the", "StandardAttributeResolver", "object"], "path": "plutogeek/flyingsaucer/tree/master/flying-saucer-core/src/main/java/org/xhtmlrenderer/context/StandardAttributeResolver.java", "idx": 1536}
{"memberVariables": {"PATH=\"build/resources/main/engine/stockfish\"": "String", "engineProcess": "Process", "processWriter": "OutputStreamWriter", "processReader": "BufferedReader"}, "code": ["void", "function", "(", "String", "command", ")", "{", "try", "{", "processWriter", ".", "write", "(", "command", "+", "\" \"", ")", ";", "processWriter", ".", "flush", "(", ")", ";", "}", "catch", "(", "IOException", "e", ")", "{", "e", ".", "printStackTrace", "(", ")", ";", "}", "}"], "memberFunctions": {"getEvalScore": [["float", "String fen", "int waitTime"]], "getLegalMoves": [["String", "String fen"]], "startEngine": [["boolean"]], "drawBoard": [["void", "String fen"]], "getBestMove": [["String", "String fen", "int waitTime"]], "stopEngine": [["void"]], "getOutput": [["String", "int waitTime"]]}, "className": "Stockfish", "renamed": ["void", "function", "(", "String", "arg0", ")", "{", "try", "{", "processWriter", ".", "write", "(", "arg0", "+", "\"srini_string\"", ")", ";", "processWriter", ".", "flush", "(", ")", ";", "}", "catch", "(", "IOException", "loc0", ")", "{", "loc0", ".", "printStackTrace", "(", ")", ";", "}", "}"], "nl": "Takes in any valid UCI command and executes it", "nlToks": ["Takes", "in", "any", "valid", "UCI", "command", "and", "executes", "it"], "path": "petestamos/chess-application/tree/master/src/main/java/Stockfish.java", "idx": 1538}
{"memberVariables": {"scope": "Scriptable", "dim": "Dim", "type": "int", "debugGui": "SwingGui", "EXIT_ACTION=1": "int", "SCOPE_PROVIDER=2": "int"}, "code": ["void", "function", "(", "ContextFactory", "factory", ")", "{", "dim", ".", "attachTo", "(", "factory", ")", ";", "}"], "memberFunctions": {"getIn": [["InputStream"]], "setExitAction": [["void", "Runnable r"]], "doBreak": [["void"]], "main": [["void", "String[] args"]], "run": [["void"]], "setBreakOnReturn": [["void", "boolean value"]], "getOut": [["PrintStream"]], "setSize": [["void", "int w", "int h"], ["void", "java.awt.Dimension dimension"]], "setBreakOnExceptions": [["void", "boolean value"]], "contextCreated": [["void", "Context cx"]], "setVisible": [["void", "boolean flag"]], "mainEmbedded": [["void", "String title"], ["void", "ContextFactory factory", "Scriptable scope", "String title"], ["void", "ContextFactory factory", "ScopeProvider scopeProvider", "String title"]], "contextExited": [["void", "Context cx"]], "setBreakOnEnter": [["void", "boolean value"]], "getErr": [["PrintStream"]], "mainEmbeddedImpl": [["void", "ContextFactory factory", "Object scopeProvider", "String title"]], "go": [["void"]], "isVisible": [["boolean"]], "newScopeProvider": [["ScopeProvider", "Scriptable scope"]], "setScopeProvider": [["void", "ScopeProvider p"]], "pack": [["void"]], "clearAllBreakpoints": [["void"]], "contextReleased": [["void", "Context cx"]], "setOptimizationLevel": [["void", "int level"]], "detach": [["void"]], "dispose": [["void"]], "setScope": [["void", "Scriptable scope"]], "contextEntered": [["void", "Context cx"]], "getScope": [["Scriptable"]], "getDebugFrame": [["JFrame"]]}, "className": "Main", "renamed": ["void", "function", "(", "ContextFactory", "arg0", ")", "{", "dim", ".", "attachTo", "(", "arg0", ")", ";", "}"], "nl": "Attaches the debugger to the given  {@link ContextFactory}.", "nlToks": ["Attaches", "the", "debugger", "to", "the", "given", "-LCB-", "@link", "ContextFactory", "-RCB-", "."], "path": "adamfisk/littleshoot-client/tree/master/bin/rhino1_7R2/toolsrc/org/mozilla/javascript/tools/debugger/Main.java", "idx": 1540}
{"memberVariables": {"parent": "JsonTray", "credential": "ClientCredential", "json": "JSONObject"}, "code": ["void", "function", "(", ")", "{", "this", ".", "parent", ".", "remove", "(", "this", ".", "credential", ".", "toString", "(", ")", ")", ";", "parent", "=", "null", ";", "}"], "memberFunctions": {"checkExpireTime": [["boolean"]], "getIdentity": [["ClientIdentity"]], "get": [["Object", "String key"]], "setExpireTime": [["void", "long time"]], "getBoolean": [["boolean", "String key"], ["boolean", "String key", "boolean defVal"]], "setIdentity": [["Authentication", "@Nonnull ClientIdentity id"]], "getString": [["String", "String key"], ["String", "String key", "String defVal"]], "has": [["boolean", "String key"]], "put": [["void", "String key", "Object value"]], "remove": [["void", "String key"]]}, "className": "Authentication", "renamed": ["void", "function", "(", ")", "{", "this", ".", "parent", ".", "remove", "(", "this", ".", "credential", ".", "toString", "(", ")", ")", ";", "parent", "=", "null", ";", "}"], "nl": "Delete the authentication. That is important if the Authentication turned out to invalid. For example during login, if no ClientIdentity was associated with the given Credentials", "nlToks": ["Delete", "the", "authentication", ".", "That", "is", "important", "if", "the", "Authentication", "turned", "out", "to", "invalid", ".", "For", "example", "during", "login", ",", "if", "no", "ClientIdentity", "was", "associated", "with", "the", "given", "Credentials"], "path": "adarsh-ideal/loklak_server/tree/master/src/org/loklak/server/Authentication.java", "idx": 1541}
{"memberVariables": {"userRepoPrefix=Constants.DEFAULT_USER_REPOSITORY_PREFIX": "String"}, "code": ["boolean", "function", "(", "String", "name", ")", "{", "if", "(", "name", ".", "startsWith", "(", "userRepoPrefix", ")", ")", "return", "true", ";", "return", "false", ";", "}"], "memberFunctions": {"getUserRepoPrefix": [["String"]], "isUsersPersonalRepository": [["boolean", "String username", "String name"]], "getUserNameFromRepoPath": [["String", "String path"]], "setUserRepoPrefix": [["void", "String prefix"]], "getPersonalPath": [["String", "String username"]]}, "className": "ModelUtils", "renamed": ["boolean", "function", "(", "String", "arg0", ")", "{", "if", "(", "arg0", ".", "startsWith", "(", "userRepoPrefix", ")", ")", "return", "true", ";", "return", "false", ";", "}"], "nl": "Test if a repository path is for a personal repository.", "nlToks": ["Test", "if", "a", "repository", "path", "is", "for", "a", "personal", "repository", "."], "path": "pombreda/gitblit/tree/master/src/main/java/com/gitblit/utils/ModelUtils.java", "idx": 1542}
{"memberVariables": {"mWhitelistHostnameMatcher": "Matcher", "IPV6_REGEX=\"(((?=(?>.*?::)(?!.*::)))(::)?([0-9A-F]{1,4}::?){0,5}|([0-9A-F]{1,4}:){6})(\\2([0-9A-F]{1,4}(::?|$)){0,2}|((25[0-5]|(2[0-4]|1\\\\d|[1-9])?\\\\d)(\\\\.|$)){4}|[0-9A-F]{1,4}:[0-9A-F]{1,4})(?<![^:]:|\\\\.)\"": "String", "mTcpdumpHostnamePattern": "Pattern", "mHostnamePattern": "Pattern", "hostsParserPattern": "Pattern", "mIPv4Matcher": "Matcher", "mTcpdumpHostnameMatcher": "Matcher", "SIMPLE_IPV6_REGEX=\"[0-9A-F\\\\:\\\\.]+\"": "String", "mIPv6Matcher": "Matcher", "mHostnameMatcher": "Matcher", "TCPDUMP_HOSTNAME_REGEX=\"(A\\\\?|AAAA\\\\?)\\\\s(\\\\S+)\\\\.\\\\s\"": "String", "IPV4_REGEX=\"(?:25[0-5]|2[0-4]\\\\d|[0-1]?\\\\d?\\\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\\\d|[0-1]?\\\\d?\\\\d)){3}\"": "String", "mIPv6Pattern": "Pattern", "HOSTS_PARSER_WHITELIST_IMPORT=\"^\\\\s*((?:\" + IPV4_REGEX + \")|(?:\"+ SIMPLE_IPV6_REGEX+ \")|(?:\"+ Constants.WHITELIST_ENTRY+ \"))\\\\s+(\"+ WHITELIST_HOSTNAME_REGEX+ \")\\\\s*(?:\\\\#.*)*\\\\s*$\"": "String", "hostsParserWhitelistImportPattern": "Pattern", "WHITELIST_HOSTNAME_REGEX=\"[a-zA-Z0-9\\\\*\\\\?]|[a-zA-Z0-9\\\\*\\\\?][a-zA-Z0-9\\\\-\\\\_\\\\.\\\\*\\\\?]{0,61}[a-zA-Z0-9\\\\*\\\\?]\"": "String", "mIPv4Pattern": "Pattern", "HOSTS_PARSER=\"^\\\\s*((?:\" + IPV4_REGEX + \")|(?:\"+ SIMPLE_IPV6_REGEX+ \"))\\\\s+(\"+ HOSTNAME_REGEX+ \")\\\\s*(?:\\\\#.*)*\\\\s*$\"": "String", "HOSTNAME_REGEX=\"[a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\\\-\\\\_\\\\.]{0,61}[a-zA-Z0-9]\"": "String", "mWhitelistHostnamePattern": "Pattern"}, "code": ["boolean", "function", "(", "String", "input", ")", "{", "mIPv6Matcher", "=", "mIPv6Pattern", ".", "matcher", "(", "input", ")", ";", "try", "{", "return", "mIPv6Matcher", ".", "matches", "(", ")", ";", "}", "catch", "(", "Exception", "e", ")", "{", "Log", ".", "e", "(", "Constants", ".", "TAG", ",", "\"Error in isValidIPv6\"", ",", "e", ")", ";", "return", "true", ";", "}", "}"], "memberFunctions": {"isValidHostname": [["boolean", "String input"]], "isValidIP": [["boolean", "String input"]], "isValidWhitelistHostname": [["boolean", "String input"]], "getTcpdumpHostname": [["String", "String input"]], "isValidIPv4": [["boolean", "String input"]], "isValidUrl": [["boolean", "String input"]], "wildcardToRegex": [["String", "String wildcard"]]}, "className": "RegexUtils", "renamed": ["boolean", "function", "(", "String", "arg0", ")", "{", "mIPv6Matcher", "=", "mIPv6Pattern", ".", "matcher", "(", "arg0", ")", ";", "try", "{", "return", "mIPv6Matcher", ".", "matches", "(", ")", ";", "}", "catch", "(", "Exception", "loc0", ")", "{", "Log", ".", "loc0", "(", "Constants", ".", "TAG", ",", "\"srini_string\"", ",", "loc0", ")", ";", "return", "true", ";", "}", "}"], "nl": "Check if input is a valid IPv6 address", "nlToks": ["Check", "if", "input", "is", "a", "valid", "IPv6", "address"], "path": "0-kaladin/ad-away/tree/master/AdAway/src/main/java/org/adaway/util/RegexUtils.java", "idx": 1543}
{"memberVariables": {"concurrencyLevel=UNSET_INT": "int", "useCustomMap": "boolean", "valueStrength": "Strength", "initialCapacity=UNSET_INT": "int", "keyStrength": "Strength", "DEFAULT_INITIAL_CAPACITY=16": "int", "keyEquivalence": "Equivalence<Object>", "UNSET_INT=-1": "int", "DEFAULT_CONCURRENCY_LEVEL=4": "int"}, "code": ["MapMaker", "function", "(", ")", "{", "return", "setKeyStrength", "(", "Strength", ".", "WEAK", ")", ";", "}"], "memberFunctions": {"weakValues": [["MapMaker"]], "setValueStrength": [["MapMaker", "Strength strength"]], "getKeyEquivalence": [["Equivalence<Object>"]], "initialCapacity": [["MapMaker", "int initialCapacity"]], "makeMap": [["ConcurrentMap<K,V>"]], "getInitialCapacity": [["int"]], "concurrencyLevel": [["MapMaker", "int concurrencyLevel"]], "getKeyStrength": [["Strength"]], "makeCustomMap": [["MapMakerInternalMap<K,V,?,?>"]], "keyEquivalence": [["MapMaker", "Equivalence<Object> equivalence"]], "setKeyStrength": [["MapMaker", "Strength strength"]], "toString": [["String"]], "getConcurrencyLevel": [["int"]], "getValueStrength": [["Strength"]]}, "className": "MapMaker", "renamed": ["MapMaker", "function", "(", ")", "{", "return", "setKeyStrength", "(", "Strength", ".", "WEAK", ")", ";", "}"], "nl": "Specifies that each key (not value) stored in the map should be wrapped in a {@link WeakReference} (by default, strong references are used).Warning: when this method is used, the resulting map will use identity ( {@code ==}) comparison to determine equality of keys, which is a technical violation of the  {@link Map}specification, and may not be what you expect.", "nlToks": ["Specifies", "that", "each", "key", "-LRB-", "not", "value", "-RRB-", "stored", "in", "the", "map", "should", "be", "wrapped", "in", "a", "-LCB-", "@link", "WeakReference", "-RCB-", "-LRB-", "by", "default", ",", "strong", "references", "are", "used", "-RRB-", ".", "Warning", ":", "when", "this", "method", "is", "used", ",", "the", "resulting", "map", "will", "use", "identity", "-LRB-", "-LCB-", "@code", "==", "-RCB-", "-RRB-", "comparison", "to", "determine", "equality", "of", "keys", ",", "which", "is", "a", "technical", "violation", "of", "the", "-LCB-", "@link", "Map", "-RCB-", "specification", ",", "and", "may", "not", "be", "what", "you", "expect", "."], "path": "hazendaz/guava/tree/master/guava/src/com/google/common/collect/MapMaker.java", "idx": 1544}
{"memberVariables": {"rand=new Random(5745784)": "Random"}, "code": ["void", "function", "(", ")", "{", "DenseMatrix64F", "A", "=", "RandomMatrices", ".", "createRandom", "(", "5", ",", "5", ",", "rand", ")", ";", "checkItAll", "(", "A", ")", ";", "}"], "memberFunctions": {"testH": [["void"]], "testHouseholderVectors": [["void"]], "checkItAll": [["void", "DenseMatrix64F A"]], "testInputUnmodified": [["void"]]}, "className": "TestHessenbergSimilarDecomposition_D64", "renamed": ["void", "function", "(", ")", "{", "DenseMatrix64F", "loc0", "=", "RandomMatrices", ".", "createRandom", "(", "5", ",", "5", ",", "rand", ")", ";", "checkItAll", "(", "loc0", ")", ";", "}"], "nl": "Decomposes the matrix, extracts H and Q, then sees if it can recompute A using similar matrix stuff.", "nlToks": ["Decomposes", "the", "matrix", ",", "extracts", "H", "and", "Q", ",", "then", "sees", "if", "it", "can", "recompute", "A", "using", "similar", "matrix", "stuff", "."], "path": "adamaulia/efficient-java-matrix-library/tree/master/test/org/ejml/alg/dense/decomposition/hessenberg/TestHessenbergSimilarDecomposition_D64.java", "idx": 1545}
{"memberVariables": {"interactionType": "String", "experimentTypes": "String", "geneB": "long", "pmids": "String", "geneA": "long", "source": "String"}, "code": ["String", "function", "(", ")", "{", "return", "pmids", ";", "}"], "memberFunctions": {"setSource": [["void", "String s"]], "toSif": [["String"]], "setExperimentTypes": [["void", "String expTypes"]], "setGeneA": [["void", "long entrezGeneId"]], "setGeneB": [["void", "long entrezGeneID"]], "getInteractionType": [["String"]], "getGeneA": [["long"]], "getGeneB": [["long"]], "setPmids": [["void", "String p"]], "getSource": [["String"]], "toString": [["String"]], "setInteractionType": [["void", "String type"]], "getExperimentTypes": [["String"]]}, "className": "Interaction", "renamed": ["String", "function", "(", ")", "{", "return", "pmids", ";", "}"], "nl": "Gets the PMIDs.", "nlToks": ["Gets", "the", "PMIDs", "."], "path": "adamabeshouse/cbioportal/tree/master/core/src/main/java/org/mskcc/cbio/portal/model/Interaction.java", "idx": 1546}
{"memberVariables": {"globalLog=new Result()": "Result", "log": "List<ResultEntry>", "observers": "Map<ResultObserver,ResultObserverSettings>"}, "code": ["ResultEntry", "function", "(", "int", "index", ")", "{", "return", "log", ".", "get", "(", "index", ")", ";", "}"], "memberFunctions": {"getGlobalResult": [["Result"]], "filterOut": [["Result", "List<String> sources"], ["Result", "String source"], ["Result", "ResultLevel level"]], "removeObserver": [["boolean", "ResultObserver o"]], "addObserverLogSource": [["void", "ResultObserver o", "String source"]], "setSources": [["void", "ResultObserver o", "List<String> sources"]], "remove": [["boolean", "Object arg0"]], "iterator": [["Iterator<ResultEntry>"]], "removeAll": [["boolean", "Collection<?> arg0"]], "toArray": [["Object[]"], ["T[]", "T[] arg0"]], "registerObserver": [["boolean", "ResultObserver o"]], "add": [["boolean", "ResultEntry arg0"]], "removeObserverLogSource": [["void", "ResultObserver o", "String source"]], "containsAll": [["boolean", "Collection<?> arg0"]], "clear": [["void"]], "isEmpty": [["boolean"]], "filterOnly": [["Result", "String source"], ["Result", "List<String> sources"], ["Result", "ResultLevel level"]], "setObserverLevel": [["void", "ResultObserver o", "ResultLevel level"]], "contains": [["boolean", "Object arg0"]], "size": [["int"]], "addAll": [["boolean", "Collection<? extends ResultEntry> arg0"]], "getSoures": [["List<String>", "ResultObserver o"]], "toString": [["String"]], "notifyObserversClear": [["void"]], "notifyObserversAdd": [["void", "ResultEntry newResult"]], "retainAll": [["boolean", "Collection<?> arg0"]]}, "className": "Result", "renamed": ["ResultEntry", "function", "(", "int", "arg0", ")", "{", "return", "log", ".", "get", "(", "arg0", ")", ";", "}"], "nl": "Get by index", "nlToks": ["Get", "by", "index"], "path": "0xwindows/WS-Attacker/tree/master/framework/src/main/java/wsattacker/main/plugin/result/Result.java", "idx": 1547}
{"memberVariables": {"URL_SAVED=\"configuration.save.url\"": "String", "FILE_SAVED=\"configuration.save.file\"": "String", "URL_LOADED=\"configuration.load.url\"": "String", "config=getFactory().getConfigurationHandler()": "ConfigurationHandler", "FILE_LOADED=\"configuration.load.file\"": "String"}, "code": ["ConfigurationKey", "function", "(", "String", "k1", ",", "String", "k2", ",", "String", "k3", ",", "String", "k4", ")", "{", "return", "new", "ConfigurationKeyImpl", "(", "k1", ",", "k2", ",", "k3", ",", "k4", ")", ";", "}"], "memberFunctions": {"save": [["boolean"], ["boolean", "boolean force"]], "setInteger": [["void", "ConfigurationKey key", "int newValue"]], "getDouble": [["double", "ConfigurationKey key", "double defaultValue"], ["double", "ConfigurationKey key"]], "getInteger": [["int", "ConfigurationKey key"], ["int", "ConfigurationKey key", "int defaultValue"]], "getString": [["String", "ConfigurationKey key"], ["String", "ConfigurationKey key", "String defaultValue"]], "removeListener": [["void", "PropertyChangeListener pcl"], ["void", "ConfigurationKey key", "PropertyChangeListener pcl"]], "getFactory": [["IConfigurationFactory"]], "setDouble": [["void", "ConfigurationKey key", "double newValue"]], "setString": [["void", "ConfigurationKey key", "String newValue"]], "load": [["boolean"], ["boolean", "File file"], ["boolean", "URL url"]], "removeKey": [["void", "ConfigurationKey key"]], "getConfigurationHandler": [["ConfigurationHandler"]], "getBoolean": [["boolean", "ConfigurationKey key"], ["boolean", "ConfigurationKey key", "boolean defaultValue"]], "setBoolean": [["void", "ConfigurationKey key", "boolean newValue"]], "addListener": [["void", "PropertyChangeListener pcl"], ["void", "ConfigurationKey key", "PropertyChangeListener pcl"]]}, "className": "Configuration", "renamed": ["ConfigurationKey", "function", "(", "String", "arg0", ",", "String", "arg1", ",", "String", "arg2", ",", "String", "arg3", ")", "{", "return", "new", "ConfigurationKeyImpl", "(", "arg0", ",", "arg1", ",", "arg2", ",", "arg3", ")", ";", "}"], "nl": "Create a four-component configuration key.", "nlToks": ["Create", "a", "four-component", "configuration", "key", "."], "path": "pichiliani/CoArgoUML/tree/master/v0.24/fonte/src/argouml-app/src/org/argouml/configuration/Configuration.java", "idx": 1548}
{"memberVariables": {"val": "Constant", "fldname": "String"}, "code": ["String", "function", "(", ")", "{", "return", "\"maxof\"", "+", "fldname", ";", "}"], "memberFunctions": {"processFirst": [["void", "Scan s"]], "processNext": [["void", "Scan s"]], "value": [["Constant"]]}, "className": "MaxFn", "renamed": ["String", "function", "(", ")", "{", "return", "\"srini_string\"", "+", "fldname", ";", "}"], "nl": "Returns the field's name, prepended by \"maxof\".", "nlToks": ["Returns", "the", "field", "'s", "name", ",", "prepended", "by", "``", "maxof", "''", "."], "path": "prerit2803/DBMSProject2/tree/master/simpledb/materialize/MaxFn.java", "idx": 1549}
{"memberVariables": {"offerTimeoutTime": "long", "m_gotAnswer": "boolean", "m_offerer": "Offerer", "m_socketLock=new Object()": "Object", "m_log=LoggerFactory.getLogger(getClass())": "Logger", "m_finishedWaitingForSocket": "boolean", "m_answerLock=new Object()": "Object", "m_offerAnswer": "OfferAnswer", "m_relayWaitTime": "int", "m_startTime=System.currentTimeMillis()": "long", "m_socket": "Socket"}, "code": ["long", "function", "(", ")", "{", "final", "long", "now", "=", "System", ".", "currentTimeMillis", "(", ")", ";", "final", "long", "elapsedTime", "=", "now", "-", "this", ".", "m_startTime", ";", "return", "elapsedTime", ";", "}"], "memberFunctions": {"onTcpSocket": [["void", "final Socket sock"]], "newSocket": [["Socket", "final URI uri"]], "onTransactionSucceeded": [["void", "final OfferAnswerMessage response"]], "onUdpSocket": [["void", "final Socket sock"]], "onOfferAnswerFailed": [["void", "final OfferAnswer offerAnswer"]], "notifySocketLock": [["void"]], "onTransactionFailed": [["void", "final OfferAnswerMessage response"]], "waitForSocket": [["Socket", "final URI sipUri"]], "processedSocket": [["boolean", "final Socket sock"]]}, "className": "DefaultTcpUdpSocket", "renamed": ["long", "function", "(", ")", "{", "final", "long", "loc0", "=", "System", ".", "currentTimeMillis", "(", ")", ";", "final", "long", "loc1", "=", "loc0", "-", "this", ".", "m_startTime", ";", "return", "loc1", ";", "}"], "nl": "Returns the elapsed time from the start time.  This method assumes that the start time was previously set.", "nlToks": ["Returns", "the", "elapsed", "time", "from", "the", "start", "time", ".", "This", "method", "assumes", "that", "the", "start", "time", "was", "previously", "set", "."], "path": "adamfisk/littleshoot-client/tree/master/common/p2p/src/main/java/org/lastbamboo/common/p2p/DefaultTcpUdpSocket.java", "idx": 1550}
{"memberVariables": {"time": "Time"}, "code": ["void", "function", "(", ")", "{", "assertEquals", "(", "2", ",", "time", ".", "getMinutes", "(", ")", ")", ";", "}"], "memberFunctions": {"testDateRoundTrip": [["void"]], "testParseTimeWithOneDecimal": [["void"]], "testSetNegativeMinutes": [["void"]], "testFormatTimeWithOneDecimal": [["void"]], "testSetMinutes": [["void"]], "testParseTimeWithoutDecimals": [["void"]], "testParseTimeWithDecimals": [["void"]], "testSetInvalidSeconds": [["void"]], "testSetNegativeHour": [["void"]], "testToDate": [["void"]], "testGetSeconds": [["void"]], "testSetHour": [["void"]], "testGetHour": [["void"]], "testSetSeconds": [["void"]], "testSetTime": [["void"]], "testGetMilliseconds": [["void"]], "testSetInvalidHour": [["void"]], "testSetNegativeSeconds": [["void"]], "setUp": [["void"]], "testSetInvalidMinutes": [["void"]], "testFormatTimeNoDecimals": [["void"]], "testFormatTimeWithDecimals": [["void"]], "testEquals": [["void"]]}, "className": "TimeTest", "renamed": ["void", "function", "(", ")", "{", "assertEquals", "(", "2", ",", "time", ".", "getMinutes", "(", ")", ")", ";", "}"], "nl": "Test method for  {@link net.sf.marineapi.nmea.util.Time#getMinutes()}.", "nlToks": ["Test", "method", "for", "-LCB-", "@link", "net.sf.marineapi.nmea.util.Time", "#getMinutes", "-LRB-", "-RRB-", "-RCB-", "."], "path": "pkoziol/marine-api/tree/master/src/test/java/net/sf/marineapi/nmea/util/TimeTest.java", "idx": 1551}
{"memberVariables": {"jedis": "Jedis"}, "code": ["Set", "<", "String", ">", "function", "(", ")", "{", "return", "jedis", ".", "keys", "(", "\"TermCounter:*\"", ")", ";", "}"], "memberFunctions": {"add": [["void", "String term", "TermCounter tc"]], "isIndexed": [["boolean", "String url"]], "deleteAllKeys": [["void"]], "getCounts": [["Map<String,Integer>", "String term"]], "urlSetKeys": [["Set<String>"]], "main": [["void", "String[] args"]], "printIndex": [["void"]], "termCounterKey": [["String", "String url"]], "termSet": [["Set<String>"]], "pushTermCounterToRedis": [["List<Object>", "TermCounter tc"]], "loadIndex": [["void", "JedisIndex index"]], "deleteTermCounters": [["void"]], "urlSetKey": [["String", "String term"]], "getCount": [["Integer", "String url", "String term"]], "indexPage": [["void", "String url", "Elements paragraphs"]], "deleteURLSets": [["void"]], "getURLs": [["Set<String>", "String term"]], "getCountsFaster": [["Map<String,Integer>", "String term"]]}, "className": "JedisIndex", "renamed": ["Set", "<", "String", ">", "function", "(", ")", "{", "return", "jedis", ".", "keys", "(", "\"srini_string\"", ")", ";", "}"], "nl": "Returns TermCounter keys for the URLS that have been indexed. Should be used for development and testing, not production.", "nlToks": ["Returns", "TermCounter", "keys", "for", "the", "URLS", "that", "have", "been", "indexed", ".", "Should", "be", "used", "for", "development", "and", "testing", ",", "not", "production", "."], "path": "hayleycall/cs-application-backing-with-redis-lab-codeU/tree/master/javacs-lab10/src/com/flatironschool/javacs/JedisIndex.java", "idx": 1552}
{"memberVariables": {"siteRepository": "SiteRepository", "log=LoggerFactory.getLogger(SiteService.class)": "Logger"}, "code": ["Site", "function", "(", "String", "id", ")", "{", "log", ".", "debug", "(", "\"Request to get Site : {}\"", ",", "id", ")", ";", "Site", "site", "=", "siteRepository", ".", "findOne", "(", "id", ")", ";", "return", "site", ";", "}"], "memberFunctions": {"save": [["Site", "Site site"]], "findOneByHost": [["Site", "String host"]], "findAll": [["Page<Site>", "Pageable pageable"]], "delete": [["void", "String id"]], "getWebNauAn": [["Site"]]}, "className": "SiteService", "renamed": ["Site", "function", "(", "String", "arg0", ")", "{", "log", ".", "debug", "(", "\"srini_string\"", ",", "arg0", ")", ";", "Site", "loc0", "=", "siteRepository", ".", "findOne", "(", "arg0", ")", ";", "return", "loc0", ";", "}"], "nl": "Get one site by id.", "nlToks": ["Get", "one", "site", "by", "id", "."], "path": "pigkey/kitchen/tree/master/app/src/main/java/com/kitchen/app/service/SiteService.java", "idx": 1553}
{"memberVariables": {"initialState": "Object", "resultFunction": "ResultFunction", "actionsFunction": "ActionsFunction", "stepCostFunction": "StepCostFunction", "goalTest": "GoalTest"}, "code": ["ResultFunction", "function", "(", ")", "{", "return", "resultFunction", ";", "}"], "memberFunctions": {"getInitialState": [["Object"]], "getStepCostFunction": [["StepCostFunction"]], "getActionsFunction": [["ActionsFunction"]], "isGoalState": [["boolean", "Object state"]], "getGoalTest": [["GoalTest"]]}, "className": "Problem", "renamed": ["ResultFunction", "function", "(", ")", "{", "return", "resultFunction", ";", "}"], "nl": "Returns the description of what each action does.", "nlToks": ["Returns", "the", "description", "of", "what", "each", "action", "does", "."], "path": "peterplupo/ia201102/tree/master/trabalho1/aima-core/src/main/java/aima/core/search/framework/Problem.java", "idx": 1556}
{"memberVariables": {"MIN=1000 * 60L": "long", "ONEYEAR=ONEDAY * 365L": "long", "timezone": "TimeZone", "translation": "ResourceBundle", "ONEHOUR=HALFHOUR * 2": "long", "HALFHOUR=MIN * 30L": "long", "ONEDAY=ONEHOUR * 24L": "long"}, "code": ["String", "function", "(", "Date", "date", ")", "{", "return", "timeAgo", "(", "date", ",", "false", ")", ";", "}"], "memberFunctions": {"duration": [["String", "int days"]], "yesterday": [["String"]], "daysAgo": [["int", "Date date"]], "isYesterday": [["boolean", "Date date", "TimeZone timezone"]], "today": [["String"]], "isToday": [["boolean", "Date date", "TimeZone timezone"]], "hoursAgo": [["int", "Date date", "boolean roundup"]], "inFuture": [["String", "Date date"]], "convertFrequencyToMinutes": [["int", "String frequency"]], "minutesAgo": [["int", "Date date", "long endTime", "boolean roundup"], ["int", "Date date", "boolean roundup"]], "translate": [["String", "String key", "String defaultValue"], ["String", "int val", "String key", "String defaultPattern"]], "timeAgoCss": [["String", "Date date"]]}, "className": "TimeUtils", "renamed": ["String", "function", "(", "Date", "arg0", ")", "{", "return", "timeAgo", "(", "arg0", ",", "false", ")", ";", "}"], "nl": "Returns the string representation of the duration between now and the date.", "nlToks": ["Returns", "the", "string", "representation", "of", "the", "duration", "between", "now", "and", "the", "date", "."], "path": "pombreda/gitblit/tree/master/src/main/java/com/gitblit/utils/TimeUtils.java", "idx": 1558}
{"memberVariables": {}, "code": ["void", "function", "(", "String", "emsg", ")", "{", "try", "{", "throw", "new", "Exception", "(", "emsg", ")", ";", "}", "catch", "(", "Exception", "ex", ")", "{", "ex", ".", "printStackTrace", "(", ")", ";", "System", ".", "exit", "(", "0", ")", ";", "}", "}"], "memberFunctions": {}, "className": "InternalErrorHandler", "renamed": ["void", "function", "(", "String", "arg0", ")", "{", "try", "{", "throw", "new", "Exception", "(", "arg0", ")", ";", "}", "catch", "(", "Exception", "loc0", ")", "{", "loc0", ".", "printStackTrace", "(", ")", ";", "System", ".", "exit", "(", "0", ")", ";", "}", "}"], "nl": "Handle an unexpected condition (and print the error code).", "nlToks": ["Handle", "an", "unexpected", "condition", "-LRB-", "and", "print", "the", "error", "code", "-RRB-", "."], "path": "adamfisk/littleshoot-client/tree/master/common/sdp/src/main/java/org/lastbamboo/common/sdp/InternalErrorHandler.java", "idx": 1559}
{"memberVariables": {"parentScope=0": "int", "functionBracePositions=new ArrayList()": "ArrayList", "funcObjects=new ObjArray()": "ObjArray", "functionNum=0": "int", "functionVarMappings=new ArrayList()": "ArrayList", "lastTokenCount=0": "int", "replacedTokens=new ArrayList()": "ArrayList"}, "code": ["void", "function", "(", ")", "{", "funcObjects", "=", "new", "ObjArray", "(", ")", ";", "functionVarMappings", "=", "new", "ArrayList", "(", ")", ";", "}"], "memberFunctions": {"isInScopeChain": [["boolean", "String token"]], "collectFunctionMappings": [["void", "ScriptOrFnNode parseTree"]], "leaveNestingLevel": [["void", "int braceNesting"]], "getMappedToken": [["String", "String token", "boolean hasNewMapping"]], "getPreviousTokenMapping": [["String", "String token", "boolean hasNewMapping"]], "collectFuncNodes": [["void", "ScriptOrFnNode parseTree", "int level", "ScriptOrFnNode parent"]], "sourceCompress": [["int", "String encodedSource", "int offset", "boolean asQuotedString", "StringBuffer sb", "int prevToken", "boolean inArgsList", "int currentLevel", "ScriptOrFnNode parseTree"]], "enterNestingLevel": [["void", "int braceNesting"]]}, "className": "TokenMapper", "renamed": ["void", "function", "(", ")", "{", "funcObjects", "=", "new", "ObjArray", "(", ")", ";", "functionVarMappings", "=", "new", "ArrayList", "(", ")", ";", "}"], "nl": "Reset the static members for the TokenMapper.", "nlToks": ["Reset", "the", "static", "members", "for", "the", "TokenMapper", "."], "path": "adamfisk/littleshoot-client/tree/master/server/static/build/src/main/webapp/dojo/util/shrinksafe/src/org/dojotoolkit/shrinksafe/TokenMapper.java", "idx": 1560}
{"memberVariables": {"EMAIL=\"email_address\"": "String"}, "code": ["void", "function", "(", "HttpServletRequest", "request", ")", "{", "request", ".", "getSession", "(", ")", ".", "removeAttribute", "(", "EMAIL", ")", ";", "}"], "memberFunctions": {"isUserAuthenticated": [["boolean", "HttpServletRequest request"]], "loginUser": [["void", "String emailAddress", "HttpServletRequest request"]], "getEmailId": [["String", "HttpServletRequest request"]]}, "className": "UserInfo", "renamed": ["void", "function", "(", "HttpServletRequest", "arg0", ")", "{", "arg0", ".", "getSession", "(", ")", ".", "removeAttribute", "(", "EMAIL", ")", ";", "}"], "nl": "Logs out the User.", "nlToks": ["Logs", "out", "the", "User", "."], "path": "adamabeshouse/cbioportal/tree/master/core/src/main/java/org/mskcc/cbio/portal/util/UserInfo.java", "idx": 1561}
{"memberVariables": {"modelImpl": "EUMLModelImplementation"}, "code": ["int", "function", "(", "String", "b", ")", "{", "try", "{", "if", "(", "b", ".", "equals", "(", "\"n\"", ")", "||", "b", ".", "equals", "(", "\"*\"", ")", ")", "{", "return", "-", "1", ";", "}", "else", "{", "return", "Integer", ".", "parseInt", "(", "b", ")", ";", "}", "}", "catch", "(", "Exception", "ex", ")", "{", "throw", "new", "IllegalArgumentException", "(", "\"illegal range bound : \"", "+", "b", ")", ";", "}", "}"], "memberFunctions": {"createMultiplicity": [["Object", "int lower", "int upper"], ["Object", "List range"], ["Object", "String str"]], "boundToString": [["String", "int i"]], "createArgListsExpression": [["Object", "String language", "String body"]], "createProcedureExpression": [["Object", "String language", "String body"]], "createTypeExpression": [["Object", "String language", "String body"]], "createIterationExpression": [["Object", "String language", "String body"]], "createObjectSetExpression": [["Object", "String language", "String body"]], "createTimeExpression": [["Object", "String language", "String body"]], "createMappingExpression": [["Object", "String language", "String body"]], "createBooleanExpression": [["Object", "String language", "String body"]], "createActionExpression": [["Object", "String language", "String body"]], "createExpression": [["OpaqueExpression", "String language", "String body"]], "createMultiplicityRange": [["Object", "String str"], ["Object", "int lower", "int upper"]]}, "className": "DataTypesFactoryEUMLImpl", "renamed": ["int", "function", "(", "String", "arg0", ")", "{", "try", "{", "if", "(", "arg0", ".", "equals", "(", "\"srini_string\"", ")", "||", "arg0", ".", "equals", "(", "\"srini_string\"", ")", ")", "{", "return", "-", "1", ";", "}", "else", "{", "return", "Integer", ".", "parseInt", "(", "arg0", ")", ";", "}", "}", "catch", "(", "Exception", "loc0", ")", "{", "throw", "new", "IllegalArgumentException", "(", "\"srini_string\"", "+", "arg0", ")", ";", "}", "}"], "nl": "Convert a MultiplicityRange bound string to an integer.", "nlToks": ["Convert", "a", "MultiplicityRange", "bound", "string", "to", "an", "integer", "."], "path": "pichiliani/CoArgoUML/tree/master/v0.24/fonte/src/argouml-core-model-euml/src/org/argouml/model/euml/DataTypesFactoryEUMLImpl.java", "idx": 1562}
{"memberVariables": {"targetImplements": "Class<?>[]", "mainMethodClassName": "String", "compilerEnv": "CompilerEnvirons", "targetExtends": "Class<?>"}, "code": ["String", "function", "(", ")", "{", "return", "mainMethodClassName", ";", "}"], "memberFunctions": {"setTargetExtends": [["void", "Class<?> extendsClass"]], "compileToClassFiles": [["Object[]", "String source", "String sourceLocation", "int lineno", "String mainClassName"]], "getTargetExtends": [["Class<?>"]], "setTargetImplements": [["void", "Class<?>[] implementsClasses"]], "setMainMethodClass": [["void", "String className"]], "getCompilerEnv": [["CompilerEnvirons"]], "getTargetImplements": [["Class<?>[]"]], "makeAuxiliaryClassName": [["String", "String mainClassName", "String auxMarker"]]}, "className": "ClassCompiler", "renamed": ["String", "function", "(", ")", "{", "return", "mainMethodClassName", ";", "}"], "nl": "Get the name of the class for main method implementation.", "nlToks": ["Get", "the", "name", "of", "the", "class", "for", "main", "method", "implementation", "."], "path": "adamfisk/littleshoot-client/tree/master/bin/rhino1_7R2/src/org/mozilla/javascript/optimizer/ClassCompiler.java", "idx": 1563}
{"memberVariables": {"NUL=getBitfield(3)": "byte", "RST=getBitfield(4)": "byte", "SYN_HEADER_LENGTH=new UByteImpl(11)": "UByte", "SYN=getBitfield(7)": "byte", "CHECKSUM_INDEX=12": "int", "EACK=(byte)(getBitfield(5) | getBitfield(6))": "byte", "ACK=getBitfield(6)": "byte", "NUL_HEADER_LENGTH=new UByteImpl(8)": "UByte", "ACK_HEADER_LENGTH=new UByteImpl(8)": "UByte", "EACK_HEADER_LENGTH=new UByteImpl(8)": "UByte", "RST_HEADER_LENGTH=new UByteImpl(8)": "UByte"}, "code": ["byte", "function", "(", "final", "int", "bit", ")", "{", "assert", "bit", ">=", "0", ";", "assert", "bit", "<", "8", ";", "return", "(", "byte", ")", "(", "1", "<<", "bit", ")", ";", "}"], "memberFunctions": {}, "className": "RudpConstants", "renamed": ["byte", "function", "(", "final", "int", "arg0", ")", "{", "assert", "arg0", ">=", "0", ";", "assert", "arg0", "<", "8", ";", "return", "(", "byte", ")", "(", "1", "<<", "arg0", ")", ";", "}"], "nl": "Returns a byte bitfield with a given bit set.", "nlToks": ["Returns", "a", "byte", "bitfield", "with", "a", "given", "bit", "set", "."], "path": "adamfisk/littleshoot-client/tree/master/common/rudp/src/main/java/org/lastbamboo/common/rudp/RudpConstants.java", "idx": 1564}
{"memberVariables": {"TYPE_CALLSTATE=12": "int", "allLanguages": "Map<NotationName,Map<Integer,Class>>", "TYPE_ENUMERATION_LITERAL=20": "int", "instance": "NotationProviderFactory2", "TYPE_ATTRIBUTE=5": "int", "TYPE_OBJECT=7": "int", "TYPE_TRANSITION=2": "int", "TYPE_OBJECTFLOWSTATE_STATE=11": "int", "TYPE_MESSAGE=14": "int", "TYPE_ASSOCIATION_ROLE=17": "int", "defaultLanguage": "NotationName", "LOG=Logger.getLogger(NotationProviderFactory2.class)": "Logger", "currentLanguage": "String", "TYPE_OBJECTFLOWSTATE_TYPE=10": "int", "TYPE_COMPONENTINSTANCE=8": "int", "TYPE_OPERATION=6": "int", "TYPE_EXTENSION_POINT=15": "int", "TYPE_NAME=1": "int", "TYPE_ACTIONSTATE=4": "int", "TYPE_NODEINSTANCE=9": "int", "TYPE_ASSOCIATION_END_NAME=16": "int", "TYPE_MULTIPLICITY=19": "int", "TYPE_ASSOCIATION_NAME=18": "int", "TYPE_CLASSIFIERROLE=13": "int", "TYPE_STATEBODY=3": "int"}, "code": ["NotationProvider", "function", "(", "int", "type", ",", "Object", "object", ")", "{", "NotationName", "name", "=", "Notation", ".", "findNotation", "(", "currentLanguage", ")", ";", "return", "getNotationProvider", "(", "type", ",", "object", ",", "name", ")", ";", "}"], "memberFunctions": {"setCurrentLanguage": [["void", "String theCurrentLanguage"]], "setDefaultNotation": [["void", "NotationName notationName"]], "getInstance": [["NotationProviderFactory2"]], "removeNotation": [["boolean", "NotationName notationName"]], "addNotationProvider": [["void", "int type", "NotationName notationName", "Class provider"]], "getNotationProviderClass": [["Class", "int type", "NotationName name"]]}, "className": "NotationProviderFactory2", "renamed": ["NotationProvider", "function", "(", "int", "arg0", ",", "Object", "arg1", ")", "{", "NotationName", "loc0", "=", "Notation", ".", "findNotation", "(", "currentLanguage", ")", ";", "return", "getNotationProvider", "(", "arg0", ",", "arg1", ",", "loc0", ")", ";", "}"], "nl": "Get a NotationProvider for the given language.", "nlToks": ["Get", "a", "NotationProvider", "for", "the", "given", "language", "."], "path": "pichiliani/CoArgoUML/tree/master/v0.24/fonte/src/argouml-app/src/org/argouml/notation/NotationProviderFactory2.java", "idx": 1566}
{"memberVariables": {"audioData": "float[]", "arrFile": "byte[]", "audioInputStream": "AudioInputStream", "audioBytes": "byte[]", "format": "AudioFormat", "fos": "FileOutputStream", "durationSec": "double", "bis": "ByteArrayInputStream"}, "code": ["void", "function", "(", "String", "fileName", ",", "byte", "[", "]", "arrFile", ")", "{", "try", "{", "fos", "=", "new", "FileOutputStream", "(", "fileName", ")", ";", "fos", ".", "write", "(", "arrFile", ")", ";", "fos", ".", "close", "(", ")", ";", "}", "catch", "(", "Exception", "ex", ")", "{", "System", ".", "err", ".", "println", "(", "\"Error during saving wave file \"", "+", "fileName", "+", "\" to disk\"", "+", "ex", ".", "toString", "(", ")", ")", ";", "}", "System", ".", "out", ".", "println", "(", "\"WAV Audio data saved to \"", "+", "fileName", ")", ";", "}"], "memberFunctions": {"getDurationSec": [["double"]], "extractAmplitudeFromFileByteArrayInputStream": [["float[]", "ByteArrayInputStream bis"]], "extractFloatDataFromAudioInputStream": [["float[]", "AudioInputStream audioInputStream"]], "saveToFile": [["void", "String name", "AudioFileFormat.Type fileType", "AudioInputStream audioInputStream"]], "extractAmplitudeFromFileByteArray": [["float[]", "byte[] arrFile"]], "getAudioData": [["float[]"]], "getAudioBytes": [["byte[]"]], "getFormat": [["AudioFormat"]], "extractFloatDataFromAmplitudeByteArray": [["float[]", "AudioFormat format", "byte[] audioBytes"]], "extractAmplitudeFromFile": [["float[]", "File wavFile"]]}, "className": "WaveData", "renamed": ["void", "function", "(", "String", "arg0", ",", "byte", "[", "]", "arg1", ")", "{", "try", "{", "fos", "=", "new", "FileOutputStream", "(", "arg0", ")", ";", "fos", ".", "write", "(", "arg1", ")", ";", "fos", ".", "close", "(", ")", ";", "}", "catch", "(", "Exception", "loc0", ")", "{", "System", ".", "err", ".", "println", "(", "\"srini_string\"", "+", "arg0", "+", "\"srini_string\"", "+", "loc0", ".", "toString", "(", ")", ")", ";", "}", "System", ".", "out", ".", "println", "(", "\"srini_string\"", "+", "arg0", ")", ";", "}"], "nl": "saving the file's bytearray", "nlToks": ["saving", "the", "file", "'s", "bytearray"], "path": "1202kbs/speech-recognition-java-hidden-markov-model-vq-mfcc/tree/master/SpeechRecognitionHMM/src/org/ioe/tprsa/audio/WaveData.java", "idx": 1569}
{"memberVariables": {"mParents": "List<DirectedAcyclicGraphNode<T>>", "mChildren": "List<DirectedAcyclicGraphNode<T>>", "mPayload": "T"}, "code": ["void", "function", "(", "DirectedAcyclicGraphNode", "<", "T", ">", "child", ")", "{", "Preconditions", ".", "checkState", "(", "mChildren", ".", "contains", "(", "child", ")", ")", ";", "mChildren", ".", "remove", "(", "child", ")", ";", "}"], "memberFunctions": {"getParents": [["List<DirectedAcyclicGraphNode<T>>"]], "getPayload": [["T"]], "getChildren": [["List<DirectedAcyclicGraphNode<T>>"]], "addParent": [["void", "DirectedAcyclicGraphNode<T> parent"]], "addChild": [["void", "DirectedAcyclicGraphNode<T> child"]]}, "className": "DirectedAcyclicGraphNode", "renamed": ["void", "function", "(", "DirectedAcyclicGraphNode", "<", "T", ">", "arg0", ")", "{", "Preconditions", ".", "checkState", "(", "mChildren", ".", "contains", "(", "arg0", ")", ")", ";", "mChildren", ".", "remove", "(", "arg0", ")", ";", "}"], "nl": "Removes a child node from the node.", "nlToks": ["Removes", "a", "child", "node", "from", "the", "node", "."], "path": "poemlin/alluxio/tree/master/core/common/src/main/java/alluxio/collections/DirectedAcyclicGraphNode.java", "idx": 1570}
{"memberVariables": {}, "code": ["Object", "function", "(", "Object", "instance", ",", "String", "methodName", ",", "Object", "[", "]", "args", ")", "{", "Class", "[", "]", "classTypes", "=", "null", ";", "if", "(", "args", "!=", "null", ")", "{", "classTypes", "=", "new", "Class", "[", "args", ".", "length", "]", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "args", ".", "length", ";", "i", "++", ")", "{", "if", "(", "args", "[", "i", "]", "!=", "null", ")", "classTypes", "[", "i", "]", "=", "args", "[", "i", "]", ".", "getClass", "(", ")", ";", "}", "}", "return", "invokeMethod", "(", "instance", ",", "methodName", ",", "args", ",", "classTypes", ")", ";", "}"], "memberFunctions": {"getValue": [["Object", "Object instance", "String fieldName"]], "getClass": [["Class", "Class parent", "String name"]], "getAllStaticMethods": [["List", "Class entryClass", "String methodName", "Class[] classTypes"]], "getConstructorImpl": [["Constructor", "Class clazz", "Class[] classTypes"]], "getMethodImpl": [["Method", "Class thisClass", "String methodName", "Class[] classTypes"]], "getFieldImpl": [["Field", "Class thisClass", "String fieldName"]], "getClassImpl": [["Class", "Class parent", "String name"]], "setValue": [["void", "Object instance", "String fieldName", "Object value"]], "invokeAllStaticMethods": [["List", "Class clazz", "String methodName", "Object arg"]], "getMethod": [["Method", "Object instance", "String methodName", "Class[] classTypes"]], "invokeConstructor": [["Object", "Class clazz", "Object[] args"], ["Object", "Class clazz", "Object[] args", "Class[] classTypes"]]}, "className": "PrivilegedAccessor", "renamed": ["Object", "function", "(", "Object", "arg0", ",", "String", "arg1", ",", "Object", "[", "]", "arg2", ")", "{", "Class", "[", "]", "loc0", "=", "null", ";", "if", "(", "arg2", "!=", "null", ")", "{", "loc0", "=", "new", "Class", "[", "arg2", ".", "length", "]", ";", "for", "(", "int", "loc1", "=", "0", ";", "loc1", "<", "arg2", ".", "length", ";", "loc1", "++", ")", "{", "if", "(", "arg2", "[", "loc1", "]", "!=", "null", ")", "loc0", "[", "loc1", "]", "=", "arg2", "[", "loc1", "]", ".", "getClass", "(", ")", ";", "}", "}", "return", "invokeMethod", "(", "arg0", ",", "arg1", ",", "arg2", ",", "loc0", ")", ";", "}"], "nl": "Calls a method on the given object instance with the given arguments.", "nlToks": ["Calls", "a", "method", "on", "the", "given", "object", "instance", "with", "the", "given", "arguments", "."], "path": "adamfisk/littleshoot-client/tree/master/client/util/src/main/java/org/lastbamboo/client/util/PrivilegedAccessor.java", "idx": 1572}
{"memberVariables": {"fields=new HashMap<>()": "Map<FieldSignature,Set<String>>", "nestedClasses=new HashMap<>()": "Map<String,ClassStats>", "memo=new HashMap<>()": "Map<ClassMetricKey,Double>", "operations=new HashMap<>()": "Map<OperationSignature,Map<String,OperationStats>>"}, "code": ["void", "function", "(", "String", "name", ",", "OperationSignature", "sig", ")", "{", "if", "(", "!", "operations", ".", "containsKey", "(", "sig", ")", ")", "{", "operations", ".", "put", "(", "sig", ",", "new", "HashMap", "<", "String", ",", "OperationStats", ">", "(", ")", ")", ";", "}", "operations", ".", "get", "(", "sig", ")", ".", "put", "(", "name", ",", "new", "OperationStats", "(", "name", ")", ")", ";", "}"], "memberFunctions": {"compute": [["double", "OperationMetricKey key", "ASTMethodOrConstructorDeclaration node", "String name", "boolean force"], ["double", "Metrics.ClassMetricKey key", "ASTClassOrInterfaceDeclaration node", "boolean force"]], "addField": [["void", "String name", "FieldSignature sig"]], "getNestedClassStats": [["ClassStats", "String className", "boolean createIfNotFound"]], "hasMatchingSig": [["boolean", "String name", "OperationSigMask mask"], ["boolean", "String name", "FieldSigMask mask"]]}, "className": "ClassStats", "renamed": ["void", "function", "(", "String", "arg0", ",", "OperationSignature", "arg1", ")", "{", "if", "(", "!", "operations", ".", "containsKey", "(", "arg1", ")", ")", "{", "operations", ".", "put", "(", "arg1", ",", "new", "HashMap", "<", "String", ",", "OperationStats", ">", "(", ")", ")", ";", "}", "operations", ".", "get", "(", "arg1", ")", ".", "put", "(", "arg0", ",", "new", "OperationStats", "(", "arg0", ")", ")", ";", "}"], "nl": "Adds an operation to the class.", "nlToks": ["Adds", "an", "operation", "to", "the", "class", "."], "path": "adangel/pmd/tree/master/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/oom/ClassStats.java", "idx": 1574}
{"memberVariables": {"chunks": "List<ScriptChunk>"}, "code": ["Script", "function", "(", "List", "<", "byte", "[", "]", ">", "signatures", ")", "{", "checkArgument", "(", "signatures", ".", "size", "(", ")", "<=", "16", ")", ";", "ScriptBuilder", "builder", "=", "new", "ScriptBuilder", "(", ")", ";", "builder", ".", "smallNum", "(", "0", ")", ";", "for", "(", "byte", "[", "]", "signature", ":", "signatures", ")", "builder", ".", "data", "(", "signature", ")", ";", "return", "builder", ".", "build", "(", ")", ";", "}"], "memberFunctions": {"op": [["ScriptBuilder", "int opcode"]], "data": [["ScriptBuilder", "byte[] data"]], "createMultiSigOutputScript": [["Script", "int threshold", "List<ECKey> pubkeys"]], "build": [["Script"]], "smallNum": [["ScriptBuilder", "int num"]], "createP2SHOutputScript": [["Script", "byte[] hash"]], "createInputScript": [["Script", "TransactionSignature signature", "ECKey pubKey"], ["Script", "TransactionSignature signature"]], "createOutputScript": [["Script", "Address to"], ["Script", "ECKey key"]], "createMultiSigInputScript": [["Script", "List<TransactionSignature> signatures"], ["Script", "TransactionSignature... signatures"]]}, "className": "ScriptBuilder", "renamed": ["Script", "function", "(", "List", "<", "byte", "[", "]", ">", "arg0", ")", "{", "checkArgument", "(", "arg0", ".", "size", "(", ")", "<=", "16", ")", ";", "ScriptBuilder", "loc0", "=", "new", "ScriptBuilder", "(", ")", ";", "loc0", ".", "smallNum", "(", "0", ")", ";", "for", "(", "byte", "[", "]", "loc1", ":", "arg0", ")", "loc0", ".", "data", "(", "loc1", ")", ";", "return", "loc0", ".", "build", "(", ")", ";", "}"], "nl": "Create a program that satisfies an OP_CHECKMULTISIG program, using pre-encoded signatures.", "nlToks": ["Create", "a", "program", "that", "satisfies", "an", "OP_CHECKMULTISIG", "program", ",", "using", "pre-encoded", "signatures", "."], "path": "plncoin/plncoin-and/tree/master/plncoinj/core/src/main/java/com/google/bitcoin/script/ScriptBuilder.java", "idx": 1577}
{"memberVariables": {"time": "Time"}, "code": ["void", "function", "(", ")", "{", "try", "{", "time", ".", "setHour", "(", "-", "1", ")", ";", "fail", "(", "\"Did not throw exception\"", ")", ";", "}", "catch", "(", "IllegalArgumentException", "e", ")", "{", "}", "}"], "memberFunctions": {"testDateRoundTrip": [["void"]], "testParseTimeWithOneDecimal": [["void"]], "testSetNegativeMinutes": [["void"]], "testFormatTimeWithOneDecimal": [["void"]], "testSetMinutes": [["void"]], "testParseTimeWithoutDecimals": [["void"]], "testGetMinutes": [["void"]], "testParseTimeWithDecimals": [["void"]], "testSetInvalidSeconds": [["void"]], "testToDate": [["void"]], "testGetSeconds": [["void"]], "testSetHour": [["void"]], "testGetHour": [["void"]], "testSetSeconds": [["void"]], "testSetTime": [["void"]], "testGetMilliseconds": [["void"]], "testSetInvalidHour": [["void"]], "testSetNegativeSeconds": [["void"]], "setUp": [["void"]], "testSetInvalidMinutes": [["void"]], "testFormatTimeNoDecimals": [["void"]], "testFormatTimeWithDecimals": [["void"]], "testEquals": [["void"]]}, "className": "TimeTest", "renamed": ["void", "function", "(", ")", "{", "try", "{", "time", ".", "setHour", "(", "-", "1", ")", ";", "fail", "(", "\"srini_string\"", ")", ";", "}", "catch", "(", "IllegalArgumentException", "loc0", ")", "{", "}", "}"], "nl": "Test method for  {@link net.sf.marineapi.nmea.util.Time#setHour(int)}.", "nlToks": ["Test", "method", "for", "-LCB-", "@link", "net.sf.marineapi.nmea.util.Time", "#setHour", "-LRB-", "int", "-RRB-", "-RCB-", "."], "path": "pkoziol/marine-api/tree/master/src/test/java/net/sf/marineapi/nmea/util/TimeTest.java", "idx": 1578}
{"memberVariables": {"log=LoggerFactory.getLogger(TypedPlatformLayerClient.class)": "Logger", "mapper": "TypedItemMapper", "platformLayerClient": "PlatformLayerClient"}, "code": ["UntypedItem", "function", "(", "PlatformLayerKey", "key", ",", "Tag", "uniqueTag", ",", "String", "data", ",", "Format", "dataFormat", ")", "{", "return", "platformLayerClient", ".", "putItemByTag", "(", "key", ",", "uniqueTag", ",", "data", ",", "dataFormat", ")", ";", "}"], "memberFunctions": {"listJobExecutions": [["JobExecutionList", "String jobId"], ["JobExecutionList"]], "listRoots": [["UntypedItemCollection"]], "changeTags": [["Tags", "PlatformLayerKey key", "TagChanges tagChanges"], ["Tags", "PlatformLayerKey key", "TagChanges tagChanges", "Long ifVersion"]], "getSshPublicKey": [["String", "String serviceType"]], "promoteToTyped": [["T", "UntypedItem untypedItem"], ["T", "UntypedItem untypedItem", "Class<T> itemClass"]], "getItem": [["T", "PlatformLayerKey path", "Class<T> itemClass"], ["T", "PlatformLayerKey path"]], "getItemTags": [["Tags", "PlatformLayerKey key"]], "addTag": [["Tags", "PlatformLayerKey key", "Tag tag"]], "listItems": [["List<T>", "Class<T> clazz", "boolean includeDeleted"], ["List<T>", "Class<T> clazz"], ["List<T>", "Class<T> clazz", "PlatformLayerKey parent"], ["List<T>", "Class<T> clazz", "Filter filter"]], "listServices": [["Collection<ServiceInfo>", "boolean allowCache"]], "findItem": [["T", "PlatformLayerKey path", "Class<T> itemClass"], ["T", "String id", "Class<T> itemClass"], ["T", "PlatformLayerKey path"]], "addTags": [["Tags", "PlatformLayerKey key", "List<Tag> tags"]], "listItemsUntyped": [["UntypedItemCollection", "PlatformLayerKey path"]], "listMetrics": [["MetricInfoCollection", "PlatformLayerKey key"]], "addUniqueTag": [["Tags", "PlatformLayerKey key", "Tag tag"]], "listChildrenTyped": [["List<ItemBase>", "PlatformLayerKey parent", "boolean includeDeleted"]], "getEndpointInfo": [["PlatformLayerEndpointInfo", "PlatformLayerKey item"]], "putItem": [["T", "T item"], ["UntypedItem", "PlatformLayerKey key", "String data", "Format dataFormat"]], "getItemUntyped": [["UntypedItem", "PlatformLayerKey key", "Format format"], ["UntypedItem", "PlatformLayerKey key"]], "listJobs": [["JobDataList"], ["JobDataList", "PlatformLayerKey target"]], "getActivation": [["String", "String serviceType", "Format format"]], "getSchema": [["String", "String serviceType", "Format format"]], "toKey": [["PlatformLayerKey", "Class<T> itemClass", "String id"]], "activateService": [["String", "String serviceType", "String data", "Format format"]], "deleteItem": [["JobData", "PlatformLayerKey key"]], "ensureLoggedIn": [["void"]], "getMetric": [["MetricDataStream", "MetricQuery query"]], "doAction": [["JobData", "PlatformLayerKey key", "Action action"], ["JobData", "PlatformLayerKey key", "String action", "Format dataFormat"]], "getProject": [["ProjectId"]], "listChildren": [["UntypedItemCollection", "PlatformLayerKey parent", "boolean includeDeleted"]], "getJobExecutionLog": [["JobLog", "String jobId", "String executionId"]]}, "className": "TypedPlatformLayerClient", "renamed": ["UntypedItem", "function", "(", "PlatformLayerKey", "arg0", ",", "Tag", "arg1", ",", "String", "arg2", ",", "Format", "arg3", ")", "{", "return", "platformLayerClient", ".", "putItemByTag", "(", "arg0", ",", "arg1", ",", "arg2", ",", "arg3", ")", ";", "}"], "nl": "If using directly, consider using OwnedItem instead", "nlToks": ["If", "using", "directly", ",", "consider", "using", "OwnedItem", "instead"], "path": "platformlayer/platformlayer/tree/master/bindings/platformlayer-api/src/main/java/org/platformlayer/TypedPlatformLayerClient.java", "idx": 1579}
{"memberVariables": {"OFFSET=22": "long", "LOCK_ID=44": "long", "SESSION_ID=55": "long", "BLOCK_ID=11": "long", "mBuffer=null": "ByteBuf", "LENGTH=33": "long"}, "code": ["void", "function", "(", ")", "{", "RPCBlockReadRequest", "req", "=", "new", "RPCBlockReadRequest", "(", "BLOCK_ID", ",", "OFFSET", ",", "LENGTH", ",", "LOCK_ID", ",", "SESSION_ID", ")", ";", "int", "encodedLength", "=", "req", ".", "getEncodedLength", "(", ")", ";", "req", ".", "encode", "(", "mBuffer", ")", ";", "Assert", ".", "assertEquals", "(", "encodedLength", ",", "mBuffer", ".", "readableBytes", "(", ")", ")", ";", "}"], "memberFunctions": {"invalidLength": [["void"]], "assertInvalid": [["void", "RPCBlockReadRequest req"]], "encodeDecode": [["void"]], "before": [["void"]], "validLength": [["void"]], "assertValid": [["void", "long blockId", "long offset", "long length", "long lockId", "long sessionId", "RPCBlockReadRequest req"], ["void", "RPCBlockReadRequest req"]], "negativeOffset": [["void"]], "validate": [["void"]]}, "className": "RPCBlockReadRequestTest", "renamed": ["void", "function", "(", ")", "{", "RPCBlockReadRequest", "loc0", "=", "new", "RPCBlockReadRequest", "(", "BLOCK_ID", ",", "OFFSET", ",", "LENGTH", ",", "LOCK_ID", ",", "SESSION_ID", ")", ";", "int", "loc1", "=", "loc0", ".", "getEncodedLength", "(", ")", ";", "loc0", ".", "encode", "(", "mBuffer", ")", ";", "Assert", ".", "assertEquals", "(", "loc1", ",", "mBuffer", ".", "readableBytes", "(", ")", ")", ";", "}"], "nl": "Tests the  {@link RPCBlockReadRequest#getEncodedLength()} method.", "nlToks": ["Tests", "the", "-LCB-", "@link", "RPCBlockReadRequest", "#getEncodedLength", "-LRB-", "-RRB-", "-RCB-", "method", "."], "path": "poemlin/alluxio/tree/master/core/server/src/test/java/alluxio/network/protocol/RPCBlockReadRequestTest.java", "idx": 1581}
{"memberVariables": {"data": "byte[]", "offset=0": "int", "length": "int", "serviceID": "ServiceID", "capacity": "int", "address=null": "InetAddress"}, "code": ["int", "function", "(", ")", "{", "return", "offset", ";", "}"], "memberFunctions": {"setServiceID": [["void", "ServiceID aServiceID"]], "getServiceID": [["ServiceID"]], "setLengthOnly": [["void", "int len"]], "setLength": [["void", "int len"]], "setAddress": [["void", "InetAddress addr"]], "setData": [["void", "byte[] buf", "int anOffset", "int aLength"], ["void", "byte[] buf"]], "getSocketAddress": [["SocketAddress"]], "getLength": [["int"]], "getAddress": [["InetAddress"]], "setSocketAddress": [["void", "SocketAddress sockAddr"]], "getData": [["byte[]"]], "getCapacity": [["int"]]}, "className": "ServalDatagramPacket", "renamed": ["int", "function", "(", ")", "{", "return", "offset", ";", "}"], "nl": "Gets the offset of the data stored in this datagram packet.", "nlToks": ["Gets", "the", "offset", "of", "the", "data", "stored", "in", "this", "datagram", "packet", "."], "path": "princeton-sns/serval/tree/master/src/javasock/java/org/servalarch/net/ServalDatagramPacket.java", "idx": 1583}
{"memberVariables": {"fis": "FIS"}, "code": ["ArrayList", "<", "String", ">", "function", "(", ")", "{", "Map", "<", "String", ",", "Double", ">", "out", "=", "this", ".", "evaluate", "(", ")", ";", "return", "sortByValue", "(", "out", ")", ";", "}"], "memberFunctions": {"sortByValue": [["ArrayList<K>", "Map<K,V> map"]], "printInputs": [["void"]], "evaluate": [["Map<String,Double>"]], "setInput": [["void", "String variable", "double value"]]}, "className": "FuzzyInterpreter", "renamed": ["ArrayList", "<", "String", ">", "function", "(", ")", "{", "Map", "<", "String", ",", "Double", ">", "loc0", "=", "this", ".", "evaluate", "(", ")", ";", "return", "sortByValue", "(", "loc0", ")", ";", "}"], "nl": "Calls evaluate method and returns sorted outcome.", "nlToks": ["Calls", "evaluate", "method", "and", "returns", "sorted", "outcome", "."], "path": "pregnantboy/fyp/tree/master/forge/src/main/java/fuzzyMod/fuzzyLogic/FuzzyInterpreter.java", "idx": 1584}
{"memberVariables": {"SOAP_ENCODING_REF_1_2=new QName(SOAP_ENCODING_NS_1_2,\"ref\")": "QName", "SOAP_ENCODING_ID_1_1=new QName(\"id\")": "QName", "SOAP_ENCODING_ID_1_2=new QName(SOAP_ENCODING_NS_1_2,\"id\")": "QName", "SOAP_ENCODING_REF_1_1=new QName(\"href\")": "QName", "SOAP_ENCODING_NS_1_2=Soap12.getInstance().getSoapEncodingStyle()": "String"}, "code": ["String", "function", "(", "MessageReader", "reader", ")", "{", "String", "ref", "=", "readAttributeValue", "(", "reader", ",", "SOAP_ENCODING_REF_1_2", ")", ";", "if", "(", "ref", "==", "null", ")", "{", "ref", "=", "readAttributeValue", "(", "reader", ",", "SOAP_ENCODING_REF_1_1", ")", ";", "}", "return", "ref", ";", "}"], "memberFunctions": {"writeId": [["void", "MessageWriter writer", "String id"]], "readId": [["String", "MessageReader reader"]], "writeRef": [["void", "MessageWriter writer", "String refId"]], "readAttributeValue": [["String", "MessageReader reader", "QName name"]], "writeAttribute": [["void", "MessageWriter writer", "QName name", "String value"]]}, "className": "SoapEncodingUtil", "renamed": ["String", "function", "(", "MessageReader", "arg0", ")", "{", "String", "loc0", "=", "readAttributeValue", "(", "arg0", ",", "SOAP_ENCODING_REF_1_2", ")", ";", "if", "(", "loc0", "==", "null", ")", "{", "loc0", "=", "readAttributeValue", "(", "arg0", ",", "SOAP_ENCODING_REF_1_1", ")", ";", "}", "return", "loc0", ";", "}"], "nl": "Reads the SOAP 1.2 or SOAP 1.1 reference attribute.", "nlToks": ["Reads", "the", "SOAP", "1.2", "or", "SOAP", "1.1", "reference", "attribute", "."], "path": "primesign/cxf/tree/master/rt/databinding/aegis/src/main/java/org/apache/cxf/aegis/type/encoded/SoapEncodingUtil.java", "idx": 1585}
{"memberVariables": {"locationPositions": "Hashtable<String,Point2D>", "links": "LabeledGraph<String,Double>"}, "code": ["String", "function", "(", ")", "{", "return", "Util", ".", "selectRandomlyFromList", "(", "getLocations", "(", ")", ")", ";", "}"], "memberFunctions": {"getDistance": [["Double", "String fromLocation", "String toLocation"]], "clear": [["void"]], "clearLinks": [["void"]], "setPosition": [["void", "String loc", "double x", "double y"]], "addBidirectionalLink": [["void", "String fromLocation", "String toLocation", "Double distance"]], "removeUnidirectionalLink": [["void", "String fromLocation", "String toLocation"]], "getPosition": [["Point2D", "String loc"]], "removeBidirectionalLink": [["void", "String fromLocation", "String toLocation"]], "isLocation": [["boolean", "String str"]], "getLocations": [["List<String>"]], "addUnidirectionalLink": [["void", "String fromLocation", "String toLocation", "Double distance"]], "getLocationsLinkedTo": [["List<String>", "String fromLocation"]], "setDistAndDirToRefLocation": [["void", "String loc", "double dist", "int dir"]]}, "className": "ExtendableMap", "renamed": ["String", "function", "(", ")", "{", "return", "Util", ".", "selectRandomlyFromList", "(", "getLocations", "(", ")", ")", ";", "}"], "nl": "Returns a location which is selected by random.", "nlToks": ["Returns", "a", "location", "which", "is", "selected", "by", "random", "."], "path": "peterplupo/ia201102/tree/master/trabalho1/aima-core/src/main/java/aima/core/environment/map/ExtendableMap.java", "idx": 1587}
{"memberVariables": {"bundle=new Bundle()": "Bundle", "bundle": "Bundle"}, "code": ["ShareOpenGraphObject", "function", "(", "final", "String", "key", ")", "{", "final", "Object", "value", "=", "this", ".", "bundle", ".", "get", "(", "key", ")", ";", "return", "(", "value", "instanceof", "ShareOpenGraphObject", "?", "(", "ShareOpenGraphObject", ")", "value", ":", "null", ")", ";", "}"], "memberFunctions": {"putStringArrayList": [["E", "final String key", "final ArrayList<String> value"]], "getPhoto": [["SharePhoto", "final String key"]], "putPhotoArrayList": [["E", "final String key", "final ArrayList<SharePhoto> value"]], "putDoubleArray": [["E", "final String key", "final double[] value"]], "getDouble": [["double", "final String key", "final double defaultValue"]], "putDouble": [["E", "final String key", "final double value"]], "putLong": [["E", "final String key", "final long value"]], "getBundle": [["Bundle"]], "getDoubleArray": [["double[]", "final String key"]], "get": [["Object", "String key"]], "getObjectArrayList": [["ArrayList<ShareOpenGraphObject>", "final String key"]], "putIntArray": [["E", "final String key", "final int[] value"]], "getBoolean": [["boolean", "final String key", "final boolean defaultValue"]], "putLongArray": [["E", "final String key", "final long[] value"]], "keySet": [["Set<String>"]], "putBoolean": [["E", "final String key", "final boolean value"]], "getBooleanArray": [["boolean[]", "final String key"]], "getPhotoArrayList": [["ArrayList<SharePhoto>", "final String key"]], "putPhoto": [["E", "final String key", "final SharePhoto value"]], "readFrom": [["E", "final P model"]], "putInt": [["E", "final String key", "final int value"]], "putString": [["E", "final String key", "final String value"]], "getStringArrayList": [["ArrayList<String>", "final String key"]], "getString": [["String", "final String key"]], "describeContents": [["int"]], "getLongArray": [["long[]", "final String key"]], "getLong": [["long", "final String key", "final long defaultValue"]], "getInt": [["int", "final String key", "final int defaultValue"]], "putObjectArrayList": [["E", "final String key", "final ArrayList<ShareOpenGraphObject> value"]], "putBooleanArray": [["E", "final String key", "final boolean[] value"]], "putObject": [["E", "final String key", "final ShareOpenGraphObject value"]], "writeToParcel": [["void", "final Parcel out", "final int flags"]], "getIntArray": [["int[]", "final String key"]]}, "className": "ShareOpenGraphValueContainer", "renamed": ["ShareOpenGraphObject", "function", "(", "final", "String", "arg0", ")", "{", "final", "Object", "loc0", "=", "this", ".", "bundle", ".", "get", "(", "arg0", ")", ";", "return", "(", "loc0", "instanceof", "ShareOpenGraphObject", "?", "(", "ShareOpenGraphObject", ")", "loc0", ":", "null", ")", ";", "}"], "nl": "Gets an object value out of the object.", "nlToks": ["Gets", "an", "object", "value", "out", "of", "the", "object", "."], "path": "adament67/testproject/tree/master/Android Projects/studio/EstiloRobe/facebook/src/main/java/com/facebook/share/model/ShareOpenGraphValueContainer.java", "idx": 1588}
{"memberVariables": {"bestValueToMe": "BigInteger", "refundTransactionUnlockTimeSecs": "long", "connectedHandler=null": "PaymentChannelServer", "contract": "Transaction", "clientOutput": "TransactionOutput", "myKey": "ECKey", "bestValueSignature": "byte[]", "state=null": "PaymentChannelServerState"}, "code": ["void", "function", "(", ")", "{", "if", "(", "connectedHandler", "!=", "null", ")", "connectedHandler", ".", "close", "(", ")", ";", "}"], "memberFunctions": {"setConnectedHandler": [["PaymentChannelServer", "PaymentChannelServer connectedHandler", "boolean override"]], "toString": [["String"]], "updateValueToMe": [["void", "BigInteger newValue", "byte[] newSignature"]], "clearConnectedHandler": [["void"]], "getOrCreateState": [["PaymentChannelServerState", "Wallet wallet", "TransactionBroadcaster broadcaster"]]}, "className": "StoredServerChannel", "renamed": ["void", "function", "(", ")", "{", "if", "(", "connectedHandler", "!=", "null", ")", "connectedHandler", ".", "close", "(", ")", ";", "}"], "nl": "If a handler is connected, call its  {@link com.google.bitcoin.protocols.channels.PaymentChannelServer#close()}method thus disconnecting the TCP connection.", "nlToks": ["If", "a", "handler", "is", "connected", ",", "call", "its", "-LCB-", "@link", "com.google.bitcoin.protocols.channels.PaymentChannelServer", "#close", "-LRB-", "-RRB-", "-RCB-", "method", "thus", "disconnecting", "the", "TCP", "connection", "."], "path": "plncoin/plncoin-and/tree/master/plncoinj/core/src/main/java/com/google/bitcoin/protocols/channels/StoredServerChannel.java", "idx": 1589}
{"memberVariables": {"SHORT_FORMAT=\"yyyy-MM-dd\"": "String", "FULL_FORMAT=\"E, MMMM dd, yyyy hh:mm a\"": "String", "NORMAL_DAY_OF_WEEK_FORMAT=\"E, MMMM dd, yyyy\"": "String", "NORMAL_FORMAT=\"yyyy-MM-dd HH:mm:ss\"": "String"}, "code": ["Date", "function", "(", "String", "date", ",", "String", "format", ")", "{", "if", "(", "date", "==", "null", ")", "return", "null", ";", "ParsePosition", "pos", "=", "new", "ParsePosition", "(", "0", ")", ";", "SimpleDateFormat", "simpledateformat", "=", "new", "SimpleDateFormat", "(", "format", ")", ";", "Date", "stringDate", "=", "simpledateformat", ".", "parse", "(", "date", ",", "pos", ")", ";", "return", "stringDate", ";", "}"], "memberFunctions": {"getDateTime": [["String"]], "getDateFromDatePicket": [["Date", "DatePicker datePicker"]], "getStringTimeFromTime": [["String", "int hourofday", "int minute"]], "getStringTimeFromTimePicker": [["String", "TimePicker timePicker"]], "isAfter": [["boolean", "Date date1", "Date date2"]], "dateToString": [["String", "Date date", "String format"]], "isBefore": [["boolean", "Date date1", "Date date2"]]}, "className": "Helper", "renamed": ["Date", "function", "(", "String", "arg0", ",", "String", "arg1", ")", "{", "if", "(", "arg0", "==", "null", ")", "return", "null", ";", "ParsePosition", "loc0", "=", "new", "ParsePosition", "(", "0", ")", ";", "SimpleDateFormat", "loc1", "=", "new", "SimpleDateFormat", "(", "arg1", ")", ";", "Date", "loc2", "=", "loc1", ".", "parse", "(", "arg0", ",", "loc0", ")", ";", "return", "loc2", ";", "}"], "nl": "Convert String date to Date type", "nlToks": ["Convert", "String", "date", "to", "Date", "type"], "path": "adament67/testproject/tree/master/Android Projects/studio/EstiloRobe/estiloRobe/src/main/java/com/constants/Helper.java", "idx": 1590}
{"memberVariables": {"formats": "List<String>", "author": "String", "length": "FileSizeComparable", "rating": "String", "title_sort": "String", "language": "String", "title": "String", "uuid": "String", "tagStr": "String", "tags": "List<String>", "path": "String", "author_sort": "String", "comment": "String", "filenameWithoutExtension": "String", "selected": "boolean", "pubdate": "String"}, "code": ["boolean", "function", "(", ")", "{", "return", "selected", ";", "}"], "memberFunctions": {"getAuthor_sort": [["String"]], "setSelected": [["void", "boolean selected"]], "getAuthor": [["String"]], "getTags": [["List<String>"]], "compareTo": [["int", "Object o"]], "getThumbnail": [["ImageIcon", "boolean readIfNotFound"]], "isLocal": [["boolean"]], "getSort": [["String"]], "getCoverFilePath": [["String"]], "setLength": [["void", "long length"]], "getTitle": [["String"]], "getPubdate": [["String"]], "getUuid": [["String"]], "getFilePath": [["String"]], "getPath": [["String"]], "getLength": [["FileSizeComparable"]], "getFormat": [["String"]], "toString": [["String"]], "getRating": [["String"]]}, "className": "Book", "renamed": ["boolean", "function", "(", ")", "{", "return", "selected", ";", "}"], "nl": "is selected ?", "nlToks": ["is", "selected", "?"], "path": "phramusca/JaMuz/tree/master/src/jamuz/process/book/Book.java", "idx": 1591}
{"memberVariables": {"mArray=new ArrayList<Object>()": "List<Object>"}, "code": ["void", "function", "(", "Object", "ele", ")", "{", "mArray", ".", "add", "(", "ele", ")", ";", "}"], "memberFunctions": {"getLong": [["long", "int index", "long def"]], "getInt": [["int", "int index", "int def"]], "getObject": [["JSONObject", "int index"]], "addAll": [["void", "Object[] eles"], ["void", "Collection<?> c"]], "get": [["Object", "int index"]], "length": [["int"]], "getDouble": [["double", "int index", "double def"]], "getArray": [["JSONArray", "int index"]], "getBoolean": [["boolean", "int index", "boolean def"]], "getFloat": [["float", "int index", "float def"]], "getString": [["String", "int index"]], "writeJSON": [["void", "JSONConverter jc", "JSONWriter jb", "boolean writeClass"]]}, "className": "JSONArray", "renamed": ["void", "function", "(", "Object", "arg0", ")", "{", "mArray", ".", "add", "(", "arg0", ")", ";", "}"], "nl": "add item.", "nlToks": ["add", "item", "."], "path": "acupple/dubbo/tree/master/dubbo-common/src/main/java/com/alibaba/dubbo/common/json/JSONArray.java", "idx": 1592}
{"memberVariables": {"settings": "IStoredSettings", "legacyBackingServices": "Map<String,String>", "runtimeManager": "IRuntimeManager", "logger=LoggerFactory.getLogger(getClass())": "Logger", "userService": "IUserService"}, "code": ["boolean", "function", "(", "String", "oldRole", ",", "String", "newRole", ")", "{", "return", "userService", ".", "renameRepositoryRole", "(", "oldRole", ",", "newRole", ")", ";", "}"], "memberFunctions": {"deleteRepositoryRole": [["boolean", "String role"]], "getAllUsernames": [["List<String>"]], "getAllUsers": [["List<UserModel>"]], "getUserModel": [["UserModel", "char[] cookie"], ["UserModel", "String username"]], "updateUserModel": [["boolean", "UserModel model"], ["boolean", "String username", "UserModel model"]], "getTeamModel": [["TeamModel", "String teamname"]], "updateTeamModel": [["boolean", "TeamModel model"], ["boolean", "String teamname", "TeamModel model"]], "isInternalAccount": [["boolean", "String username"]], "getTeamNamesForRepositoryRole": [["List<String>", "String role"]], "deleteTeam": [["boolean", "String teamname"]], "updateUserModels": [["boolean", "Collection<UserModel> models"]], "getUsernamesForRepositoryRole": [["List<String>", "String role"]], "deleteTeamModel": [["boolean", "TeamModel model"]], "start": [["UserManager"]], "setUserService": [["void", "IUserService userService"]], "createUserService": [["IUserService", "File realmFile"]], "getAllTeams": [["List<TeamModel>"]], "getCookie": [["String", "UserModel model"]], "deleteUserModel": [["boolean", "UserModel model"]], "stop": [["UserManager"]], "deleteUser": [["boolean", "String username"]], "setup": [["void", "IRuntimeManager runtimeManager"]], "getAllTeamNames": [["List<String>"]], "updateTeamModels": [["boolean", "Collection<TeamModel> models"]]}, "className": "UserManager", "renamed": ["boolean", "function", "(", "String", "arg0", ",", "String", "arg1", ")", "{", "return", "userService", ".", "renameRepositoryRole", "(", "arg0", ",", "arg1", ")", ";", "}"], "nl": "Renames a repository role.", "nlToks": ["Renames", "a", "repository", "role", "."], "path": "pombreda/gitblit/tree/master/src/main/java/com/gitblit/manager/UserManager.java", "idx": 1593}
{"memberVariables": {"environments=null": "IEnvironments", "factories=new HashMap<String,MQTTConnectionFactory>()": "HashMap<String,MQTTConnectionFactory>", "config=null": "AutoSIMMQTTConfig"}, "code": ["void", "function", "(", "BundleContext", "context", ")", "{", "for", "(", "AutoSIMConnectionConfig", "connectionConfig", ":", "config", ".", "connections", ")", "{", "environments", ".", "deregisterConnectionFactory", "(", "connectionConfig", ".", "name", ")", ";", "factories", ".", "remove", "(", "connectionConfig", ".", "name", ")", ";", "}", "}"], "memberFunctions": {"start": [["void", "BundleContext context"]]}, "className": "MQTTServiceActivator", "renamed": ["void", "function", "(", "BundleContext", "arg0", ")", "{", "for", "(", "AutoSIMConnectionConfig", "loc0", ":", "config", ".", "connections", ")", "{", "environments", ".", "deregisterConnectionFactory", "(", "loc0", ".", "name", ")", ";", "factories", ".", "remove", "(", "loc0", ".", "name", ")", ";", "}", "}"], "nl": "Implements BundleActivator.stop(). Does nothing since the framework will automatically unregister any registered services.", "nlToks": ["Implements", "BundleActivator.stop", "-LRB-", "-RRB-", ".", "Does", "nothing", "since", "the", "framework", "will", "automatically", "unregister", "any", "registered", "services", "."], "path": "adityayadav76/internet_of_things_simulator/tree/master/AutoSIM-MQTT/src/com/automatski/autosim/mqtt/MQTTServiceActivator.java", "idx": 1594}
{"memberVariables": {}, "code": ["void", "function", "(", "int", "n", ")", "{", "unifiedBreak", "(", "n", ",", "1", ",", "\" \"", ",", "1", ")", ";", "}"], "memberFunctions": {"newline": [["void"], ["void", "int n"], ["void", "int n", "int level"]], "flush": [["boolean"], ["boolean", "boolean format"]], "end": [["void"]], "toString": [["String"]], "allowBreak": [["void", "int n", "int level", "String alt", "int altlen"], ["void", "int n"], ["void", "int n", "String alt"]], "write": [["void", "String s"], ["void", "String s", "int length"]], "begin": [["void", "int n"]], "close": [["void"]]}, "className": "CodeWriter", "renamed": ["void", "function", "(", "int", "arg0", ")", "{", "unifiedBreak", "(", "arg0", ",", "1", ",", "\"srini_string\"", ",", "1", ")", ";", "}"], "nl": "The most common use of \"unifiedBreak\": level 1, with an alternative of a single space.", "nlToks": ["The", "most", "common", "use", "of", "``", "unifiedBreak", "''", ":", "level", "1", ",", "with", "an", "alternative", "of", "a", "single", "space", "."], "path": "polyglot-compiler/polyglot/tree/master/src/polyglot/util/CodeWriter.java", "idx": 1595}
{"memberVariables": {}, "code": ["void", "function", "(", ")", "{", "CollisionDJBX33X", "instance", "=", "new", "CollisionDJBX33X", "(", ")", ";", "int", "result", "=", "instance", ".", "hashForth", "(", "\"QCMWaIO\"", ")", ";", "assertEquals", "(", "998537770", ",", "result", ")", ";", "System", ".", "out", ".", "println", "(", "\" - HashForth QCMWaIO = \"", "+", "(", "instance", ".", "hashForth", "(", "\"QCMWaIO\"", ")", ")", ")", ";", "}"], "memberFunctions": {"testCollisionsFail": [["void"]], "testGenNCollisions": [["void"]], "testCompare2CollisionString": [["void"]], "TestPrecomputedFileExists": [["void"]], "MeetInTheMiddleHashBackTest": [["void"]], "setUp": [["void"]], "testGetHash": [["void"]], "tearDown": [["void"]], "testCollisionsOk": [["void"]], "testReadRandomStringForCollision": [["void"]]}, "className": "CollisionDJBX33XTest", "renamed": ["void", "function", "(", ")", "{", "CollisionDJBX33X", "loc0", "=", "new", "CollisionDJBX33X", "(", ")", ";", "int", "loc1", "=", "loc0", ".", "hashForth", "(", "\"srini_string\"", ")", ";", "assertEquals", "(", "998537770", ",", "loc1", ")", ";", "System", ".", "out", ".", "println", "(", "\"srini_string\"", "+", "(", "loc0", ".", "hashForth", "(", "\"srini_string\"", ")", ")", ")", ";", "}"], "nl": "Hash forward first 7 Characters", "nlToks": ["Hash", "forward", "first", "7", "Characters"], "path": "0xwindows/WS-Attacker/tree/master/plugins/Denial_of_Service/src/test/java/wsattacker/plugin/dos/dosExtension/attackClasses/hashDos/CollisionDJBX33XTest.java", "idx": 1596}
{"memberVariables": {"boundingBox": "BoundingBox", "nodes": "Hashtable<Long,MapNode>", "ways": "Hashtable<Long,MapWay>", "listeners": "ArrayList<MapEventListener>", "nextTrackId": "long", "entityClassifier": "EntityClassifier<EntityViewInfo>", "entityTree": "KDTree", "LOG=Logger.getLogger(\"aimax.osm\")": "Logger", "markers": "ArrayList<MapNode>", "pois": "ArrayList<MapNode>", "tracks": "ArrayList<Track>"}, "code": ["void", "function", "(", ")", "{", "EntityAttributeManager", ".", "instance", "(", ")", ".", "clearHash", "(", ")", ";", "nodes", ".", "clear", "(", ")", ";", "ways", ".", "clear", "(", ")", ";", "pois", ".", "clear", "(", ")", ";", "markers", ".", "clear", "(", ")", ";", "tracks", ".", "clear", "(", ")", ";", "entityTree", "=", "null", ";", "boundingBox", "=", "null", ";", "fireMapDataEvent", "(", "new", "MapEvent", "(", "this", ",", "MapEvent", ".", "Type", ".", "MAP_CLEARED", ")", ")", ";", "}"], "memberFunctions": {"visitEntities": [["void", "EntityVisitor visitor", "BoundingBox vbox", "float scale"]], "getTracks": [["List<Track>"]], "addNode": [["void", "DefaultMapNode node"]], "getWayNodes": [["List<MapNode>", "MapWay way", "float scale"]], "getStatistics": [["Object[][]"]], "getNearestWayNode": [["MapNode", "Position pos", "MapWayFilter filter"]], "setBoundingBox": [["void", "BoundingBox bb"]], "removeMarker": [["void", "MapNode marker"]], "clearTrack": [["void", "String trackName"]], "getVisibleMarkersAndTracks": [["List<MapEntity>", "float scale"]], "getEntityTree": [["KDTree"]], "fireMapDataEvent": [["void", "MapEvent event"]], "getBoundingBox": [["BoundingBox"]], "clearMarkersAndTracks": [["void"]], "getMarkers": [["List<MapNode>"]], "getNodeCount": [["int"]], "compile": [["void"]], "getPlaces": [["List<MapNode>", "String name"]], "createTrack": [["void", "String trackName", "List<Position> positions"]], "getPoiCount": [["int"]], "getWays": [["Collection<MapWay>", "BoundingBox bb"]], "getPois": [["List<MapNode>", "BoundingBox bb"]], "close": [["void"]], "addToTrack": [["void", "String trackName", "Position pos"]], "getTrack": [["Track", "long trackId"], ["Track", "String trackName"]], "isEmpty": [["boolean"]], "setEntityClassifier": [["void", "EntityClassifier<EntityViewInfo> classifier"]], "addMapDataEventListener": [["void", "MapEventListener listener"]], "applyClassifierAndUpdateTree": [["void", "BoundingBox bb"]], "getEntityFinder": [["EntityFinder"]], "removeMapDataEventListener": [["void", "MapEventListener listener"]], "getWay": [["MapWay", "long id"]], "getBuilder": [["MapBuilder"]], "getWayCount": [["int"]], "addWay": [["void", "DefaultMapWay way"]], "getNode": [["MapNode", "long id"]], "updateEntityViewInfo": [["void", "MapEntity entity", "boolean addToTree"]], "addMarker": [["MapNode", "float lat", "float lon"]]}, "className": "DefaultMap", "renamed": ["void", "function", "(", ")", "{", "EntityAttributeManager", ".", "instance", "(", ")", ".", "clearHash", "(", ")", ";", "nodes", ".", "clear", "(", ")", ";", "ways", ".", "clear", "(", ")", ";", "pois", ".", "clear", "(", ")", ";", "markers", ".", "clear", "(", ")", ";", "tracks", ".", "clear", "(", ")", ";", "entityTree", "=", "null", ";", "boundingBox", "=", "null", ";", "fireMapDataEvent", "(", "new", "MapEvent", "(", "this", ",", "MapEvent", ".", "Type", ".", "MAP_CLEARED", ")", ")", ";", "}"], "nl": "No data available after this reset.", "nlToks": ["No", "data", "available", "after", "this", "reset", "."], "path": "peterplupo/ia201102/tree/master/trabalho1/aimax-osm/src/main/java/aimax/osm/data/impl/DefaultMap.java", "idx": 1599}
{"memberVariables": {"path": "List<Stmt>", "logger=LoggerFactory.getLogger(getClass())": "Logger", "results=new ConcurrentHashMap<SinkInfo,Set<SourceInfo>>()": "Map<SinkInfo,Set<SourceInfo>>", "sink": "Value", "context": "Stmt", "source": "Value"}, "code": ["boolean", "function", "(", ")", "{", "return", "this", ".", "results", ".", "isEmpty", "(", ")", ";", "}"], "memberFunctions": {"printResults": [["void"], ["void", "Writer wr"]], "getSink": [["Value"]], "containsSink": [["boolean", "Value sink"]], "findSinkByMethodSignature": [["List<SinkInfo>", "String sinkSignature"]], "size": [["int"]], "getSource": [["Value"]], "hashCode": [["int"], ["int"]], "isPathBetweenMethods": [["boolean", "String sinkSignature", "String sourceSignature"]], "equals": [["boolean", "Object o"], ["boolean", "Object o"]], "getPath": [["List<Stmt>"]], "containsSinkMethod": [["boolean", "String sinkSignature"]], "getResults": [["Map<SinkInfo,Set<SourceInfo>>"]], "toString": [["String"], ["String"], ["String"]], "addResult": [["void", "Value sink", "Stmt sinkStmt", "Value source", "Stmt sourceStmt"], ["void", "Value sink", "Stmt sinkStmt", "Value source", "Stmt sourceStmt", "List<Stmt> propagationPath"], ["void", "Value sink", "Stmt sinkContext", "Value source", "Stmt sourceStmt", "List<Stmt> propagationPath", "Stmt stmt"], ["void", "SinkInfo sink", "SourceInfo source"]], "isPathBetween": [["boolean", "Value sink", "Value source"], ["boolean", "String sink", "String source"]], "getContext": [["Stmt"], ["Stmt"]]}, "className": "InfoflowResults", "renamed": ["boolean", "function", "(", ")", "{", "return", "this", ".", "results", ".", "isEmpty", "(", ")", ";", "}"], "nl": "Gets whether this result object is empty, i.e. contains no information flows", "nlToks": ["Gets", "whether", "this", "result", "object", "is", "empty", ",", "i.e.", "contains", "no", "information", "flows"], "path": "0-14N/soot-inflow/tree/master/src/soot/jimple/infoflow/InfoflowResults.java", "idx": 1601}
{"memberVariables": {"MAX_FRAME_HEIGHT=680": "int", "TAG=CameraManager.class.getSimpleName()": "String", "requestedFramingRectHeight": "int", "autoFocusManager": "AutoFocusManager", "configManager": "CameraConfigurationManager", "windowManager": "WindowManager", "previewCallback": "PreviewCallback", "framingRectInPreview": "Rect", "MAX_FRAME_WIDTH=880": "int", "context": "Context", "framingRect": "Rect", "initialized": "boolean", "requestedFramingRectWidth": "int", "camera": "Camera", "MIN_FRAME_WIDTH=220": "int", "previewing": "boolean", "MIN_FRAME_HEIGHT=220": "int"}, "code": ["void", "function", "(", "int", "width", ",", "int", "height", ")", "{", "if", "(", "initialized", ")", "{", "framingRect", "=", "getFramingRect", "(", ")", ";", "Log", ".", "d", "(", "TAG", ",", "\"Calculated manual framing rect: \"", "+", "framingRect", ")", ";", "framingRectInPreview", "=", "null", ";", "}", "else", "{", "requestedFramingRectWidth", "=", "width", ";", "requestedFramingRectHeight", "=", "height", ";", "}", "}"], "memberFunctions": {"requestPreviewFrame": [["void", "Handler handler", "int message"]], "stopPreview": [["void"]], "isOpen": [["boolean"]], "startPreview": [["void"]], "getFramingRect": [["Rect"]], "buildLuminanceSource": [["PlanarYUVLuminanceSource", "byte[] data", "int width", "int height"]], "closeDriver": [["void"]], "setTorch": [["void", "boolean newSetting"]], "openDriver": [["void", "SurfaceHolder holder"]], "getFramingRectInPreview": [["Rect"]]}, "className": "CameraManager", "renamed": ["void", "function", "(", "int", "arg0", ",", "int", "arg1", ")", "{", "if", "(", "initialized", ")", "{", "framingRect", "=", "getFramingRect", "(", ")", ";", "Log", ".", "d", "(", "TAG", ",", "\"srini_string\"", "+", "framingRect", ")", ";", "framingRectInPreview", "=", "null", ";", "}", "else", "{", "requestedFramingRectWidth", "=", "arg0", ";", "requestedFramingRectHeight", "=", "arg1", ";", "}", "}"], "nl": "Allows third party apps to specify the scanning rectangle dimensions, rather than determine them automatically based on screen resolution.", "nlToks": ["Allows", "third", "party", "apps", "to", "specify", "the", "scanning", "rectangle", "dimensions", ",", "rather", "than", "determine", "them", "automatically", "based", "on", "screen", "resolution", "."], "path": "peterdoescode/yumyam/tree/master/app/plugins/phonegap-plugin-barcodescanner/src/android/LibraryProject/src/com/google/zxing/client/android/camera/CameraManager.java", "idx": 1602}
{"memberVariables": {"ALREADY_EXPIRED_EXPIRATION_TIME=MIN_DATE": "Date", "expires": "Date", "EXPIRES_IN_KEY=\"expires_in\"": "String", "lastRefresh": "Date", "DEFAULT_ACCESS_TOKEN_SOURCE=AccessTokenSource.FACEBOOK_APPLICATION_WEB": "AccessTokenSource", "DEFAULT_LAST_REFRESH_TIME=new Date()": "Date", "ACCESS_TOKEN_KEY=\"access_token\"": "String", "serialVersionUID=1L": "long", "source": "AccessTokenSource", "token": "String", "DEFAULT_EXPIRATION_TIME=MAX_DATE": "Date", "serialVersionUID=-2488473066578201069L": "long", "permissions": "List<String>", "MIN_DATE=new Date(Long.MIN_VALUE)": "Date", "MAX_DATE=new Date(Long.MAX_VALUE)": "Date"}, "code": ["String", "function", "(", ")", "{", "return", "this", ".", "token", ";", "}"], "memberFunctions": {"createFromNativeLogin": [["AccessToken", "Bundle bundle", "AccessTokenSource source"]], "readResolve": [["Object"]], "getPermissions": [["List<String>"]], "tokenToString": [["String"]], "writeReplace": [["Object"]], "createFromNativeLinkingIntent": [["AccessToken", "Intent intent"]], "isInvalid": [["boolean"]], "createNew": [["AccessToken", "List<String> requestedPermissions", "String accessToken", "Date expires", "AccessTokenSource source"]], "readObject": [["void", "ObjectInputStream stream"]], "getBundleLongAsDate": [["Date", "Bundle bundle", "String key", "Date dateBase"]], "createFromExistingAccessToken": [["AccessToken", "String accessToken", "Date expirationTime", "Date lastRefreshTime", "AccessTokenSource accessTokenSource", "List<String> permissions"]], "createFromBundle": [["AccessToken", "List<String> requestedPermissions", "Bundle bundle", "AccessTokenSource source", "Date expirationBase"]], "appendPermissions": [["void", "StringBuilder builder"]], "getSource": [["AccessTokenSource"]], "createFromTokenWithRefreshedPermissions": [["AccessToken", "AccessToken token", "List<String> permissions"]], "toCacheBundle": [["Bundle"]], "createEmptyToken": [["AccessToken", "List<String> permissions"]], "createFromString": [["AccessToken", "String token", "List<String> permissions", "AccessTokenSource source"]], "getLastRefresh": [["Date"]], "toString": [["String"]], "createFromCache": [["AccessToken", "Bundle bundle"]], "createFromRefresh": [["AccessToken", "AccessToken current", "Bundle bundle"]], "getExpires": [["Date"]], "createFromWebBundle": [["AccessToken", "List<String> requestedPermissions", "Bundle bundle", "AccessTokenSource source"]]}, "className": "AccessToken", "renamed": ["String", "function", "(", ")", "{", "return", "this", ".", "token", ";", "}"], "nl": "Gets the string representing the access token.", "nlToks": ["Gets", "the", "string", "representing", "the", "access", "token", "."], "path": "planktons/CrazyHero/tree/master/Assets/Plugins/Android/facebook/src/com/facebook/AccessToken.java", "idx": 1604}
{"memberVariables": {"logger=LogFactory.getLog(SCIMGroupHandler.class)": "Log", "tenantId": "int"}, "code": ["Map", "<", "String", ",", "String", ">", "function", "(", "String", "groupName", ")", "{", "return", "null", ";", "}"], "memberFunctions": {"getGroupName": [["String", "String id"]], "isGroupExisting": [["boolean", "String groupName"]], "deleteGroupAttributes": [["void", "String groupName"]], "listSCIMRoles": [["Set<String>"]], "getGroupAttributesById": [["Map<String,String>", "String id"]], "addMandatoryAttributes": [["void", "String groupName"]], "createSCIMAttributes": [["void", "Group group"]], "updateRoleName": [["void", "String oldRoleName", "String newRoleName"]], "getGroupId": [["String", "String name"]], "getGroupWithAttributes": [["Group", "Group group", "String groupName"]]}, "className": "SCIMGroupHandler", "renamed": ["Map", "<", "String", ",", "String", ">", "function", "(", "String", "arg0", ")", "{", "return", "null", ";", "}"], "nl": "Retrieve the group attributes by group name", "nlToks": ["Retrieve", "the", "group", "attributes", "by", "group", "name"], "path": "harsha1979/carbon-identity/tree/master/components/scim/org.wso2.carbon.identity.scim.common/src/main/java/org/wso2/carbon/identity/scim/common/group/SCIMGroupHandler.java", "idx": 1605}
{"memberVariables": {"rotation=0": "float", "lastFPS": "long", "x=400": "float", "lastFrame": "long", "fps": "int", "y=300": "float"}, "code": ["int", "function", "(", ")", "{", "long", "time", "=", "getTime", "(", ")", ";", "int", "delta", "=", "(", "int", ")", "(", "time", "-", "lastFrame", ")", ";", "lastFrame", "=", "time", ";", "return", "delta", ";", "}"], "memberFunctions": {"updateFPS": [["void"]], "getTime": [["long"]], "start": [["void"]], "update": [["void", "int delta"]], "initGL": [["void"]], "renderGL": [["void"]], "main": [["void", "String[] argv"]]}, "className": "TimingExample", "renamed": ["int", "function", "(", ")", "{", "long", "loc0", "=", "getTime", "(", ")", ";", "int", "loc1", "=", "(", "int", ")", "(", "loc0", "-", "lastFrame", ")", ";", "lastFrame", "=", "loc0", ";", "return", "loc1", ";", "}"], "nl": "Calculate how many milliseconds have passed since last frame.", "nlToks": ["Calculate", "how", "many", "milliseconds", "have", "passed", "since", "last", "frame", "."], "path": "pipadrake/OpenGLTutrials/tree/master/src/examples/TimingExample.java", "idx": 1606}
{"memberVariables": {"alg=new BlockCholeskyOuterSolver()": "LinearSolver<BlockMatrix64F>", "blockA=new BlockMatrix64F(1,1)": "BlockMatrix64F", "blockB=new BlockMatrix64F(1,1)": "BlockMatrix64F", "blockX=new BlockMatrix64F(1,1)": "BlockMatrix64F"}, "code": ["boolean", "function", "(", "DenseMatrix64F", "A", ")", "{", "blockA", ".", "reshape", "(", "A", ".", "numRows", ",", "A", ".", "numCols", ",", "false", ")", ";", "BlockMatrixOps", ".", "convert", "(", "A", ",", "blockA", ")", ";", "return", "alg", ".", "setA", "(", "blockA", ")", ";", "}"], "memberFunctions": {"invert": [["void", "DenseMatrix64F A_inv"]], "solve": [["void", "DenseMatrix64F B", "DenseMatrix64F X"]], "modifiesA": [["boolean"]], "modifiesB": [["boolean"]], "quality": [["double"]]}, "className": "LinearSolver_B64_to_D64", "renamed": ["boolean", "function", "(", "DenseMatrix64F", "arg0", ")", "{", "blockA", ".", "reshape", "(", "arg0", ".", "numRows", ",", "arg0", ".", "numCols", ",", "false", ")", ";", "BlockMatrixOps", ".", "convert", "(", "arg0", ",", "blockA", ")", ";", "return", "alg", ".", "setA", "(", "blockA", ")", ";", "}"], "nl": "Converts 'A' into a block matrix and call setA() on the block matrix solver.", "nlToks": ["Converts", "`", "A", "'", "into", "a", "block", "matrix", "and", "call", "setA", "-LRB-", "-RRB-", "on", "the", "block", "matrix", "solver", "."], "path": "adamaulia/efficient-java-matrix-library/tree/master/src/org/ejml/alg/dense/linsol/LinearSolver_B64_to_D64.java", "idx": 1607}
{"memberVariables": {"mLock=new ReentrantLock()": "ReentrantLock", "mExecutor": "ScheduledExecutorService", "mClock=new SystemClock()": "Clock", "mInitialDelayMs=100": "long", "mLastAccessTimeMs": "long", "mNotEmpty=mLock.newCondition()": "Condition", "mGcExecutor": "ScheduledExecutorService", "mGcIntervalMs=120 * Constants.SECOND_MS": "long", "mIdentity=System.identityHashCode(this)": "int", "mResource": "T", "mMaxCapacity": "int", "mResources=new HashMap<>(32)": "HashMap<T,ResourceInternal<T>>", "mMaxCapacity=1024": "int", "mGcFuture": "ScheduledFuture<?>", "mResourceAvailable=new TreeSet<>(new Comparator<ResourceInternal<T>>(){\n  @Override public int compare(  ResourceInternal<T> c1,  ResourceInternal<T> c2){\n    if (c1 == c2) {\n      return 0;\n    }\n    if (c1.mLastAccessTimeMs == c2.mLastAccessTimeMs) {\n      return c1.mIdentity - c2.mIdentity;\n    }\n    return (int)(c2.mLastAccessTimeMs - c1.mLastAccessTimeMs);\n  }\n}\n)": "TreeSet<ResourceInternal<T>>", "mMinCapacity": "int", "LOG=LoggerFactory.getLogger(Constants.LOGGER_TYPE)": "Logger", "mMinCapacity=1": "int"}, "code": ["T", "function", "(", "T", "resource", ",", "long", "endTimeMs", ")", "{", "if", "(", "isHealthy", "(", "resource", ")", ")", "{", "return", "resource", ";", "}", "else", "{", "LOG", ".", "info", "(", "\"Clearing unhealthy resource {}.\"", ",", "resource", ")", ";", "remove", "(", "resource", ")", ";", "closeResource", "(", "resource", ")", ";", "return", "acquire", "(", "endTimeMs", "-", "mClock", ".", "millis", "(", ")", ",", "TimeUnit", ".", "MILLISECONDS", ")", ";", "}", "}"], "memberFunctions": {"createNewResource": [["T"]], "compare": [["int", "ResourceInternal<T> c1", "ResourceInternal<T> c2"]], "release": [["void", "T resource"]], "poll": [["ResourceInternal<T>"]], "acquire": [["T"], ["T", "long time", "TimeUnit unit"]], "remove": [["void", "T resource"]], "isHealthy": [["boolean", "T resource"]], "shouldGc": [["boolean", "ResourceInternal<T> resourceInternal"]], "setLastAccessTimeMs": [["void", "long lastAccessTimeMs"]], "setMinCapacity": [["Options", "int minCapacity"]], "setGcIntervalMs": [["Options", "long gcIntervalMs"]], "setGcExecutor": [["Options", "ScheduledExecutorService gcExecutor"]], "setInitialDelayMs": [["Options", "long initialDelayMs"]], "getInitialDelayMs": [["long"]], "getLastAccessTimeMs": [["long"]], "close": [["void"]], "add": [["boolean", "ResourceInternal<T> resource"]], "getGcExecutor": [["ScheduledExecutorService"]], "getMaxCapacity": [["int"]], "defaultOptions": [["Options"]], "closeResource": [["void", "T resource"]], "setMaxCapacity": [["Options", "int maxCapacity"]], "closeResourceSync": [["void", "T resource"]], "size": [["int"]], "getGcIntervalMs": [["long"]], "getMinCapacity": [["int"]], "isFull": [["boolean"]]}, "className": "DynamicResourcePool", "renamed": ["T", "function", "(", "T", "arg0", ",", "long", "arg1", ")", "{", "if", "(", "isHealthy", "(", "arg0", ")", ")", "{", "return", "arg0", ";", "}", "else", "{", "LOG", ".", "info", "(", "\"srini_string\"", ",", "arg0", ")", ";", "remove", "(", "arg0", ")", ";", "closeResource", "(", "arg0", ")", ";", "return", "acquire", "(", "arg1", "-", "mClock", ".", "millis", "(", ")", ",", "TimeUnit", ".", "MILLISECONDS", ")", ";", "}", "}"], "nl": "Check whether the resource is healthy. If not retry. When this called, the resource is not in mResourceAvailable.", "nlToks": ["Check", "whether", "the", "resource", "is", "healthy", ".", "If", "not", "retry", ".", "When", "this", "called", ",", "the", "resource", "is", "not", "in", "mResourceAvailable", "."], "path": "poemlin/alluxio/tree/master/core/common/src/main/java/alluxio/resource/DynamicResourcePool.java", "idx": 1608}
{"memberVariables": {"EXAMPLE=\"$IIMWV,125.1,T,5.5,M,A\"": "String", "mwv": "MWVSentence"}, "code": ["void", "function", "(", ")", "{", "assertEquals", "(", "Units", ".", "METER", ",", "mwv", ".", "getSpeedUnit", "(", ")", ")", ";", "}"], "memberFunctions": {"testSetNegativeSpeed": [["void"]], "testSetInvalidSpeedUnit": [["void"]], "testIsTrue": [["void"]], "testMWVParserTalkerId": [["void"]], "testSetStatus": [["void"]], "testSetAngle": [["void"]], "testSetSpeedUnit": [["void"]], "testSetNegativeAngle": [["void"]], "testGetAngle": [["void"]], "testSetTrue": [["void"]], "testSetAngleOutOfRange": [["void"]], "setUp": [["void"]], "testGetSpeed": [["void"]], "testGetStatus": [["void"]], "testSetSpeed": [["void"]]}, "className": "MWVTest", "renamed": ["void", "function", "(", ")", "{", "assertEquals", "(", "Units", ".", "METER", ",", "mwv", ".", "getSpeedUnit", "(", ")", ")", ";", "}"], "nl": "Test method for {@link net.sf.marineapi.nmea.parser.MWVParser#getSpeedUnit()}.", "nlToks": ["Test", "method", "for", "-LCB-", "@link", "net.sf.marineapi.nmea.parser.MWVParser", "#getSpeedUnit", "-LRB-", "-RRB-", "-RCB-", "."], "path": "pkoziol/marine-api/tree/master/src/test/java/net/sf/marineapi/nmea/parser/MWVTest.java", "idx": 1609}
{"memberVariables": {"repository": "ResourceSetRepository", "resourceSetService": "DefaultResourceSetService"}, "code": ["void", "function", "(", ")", "{", "ResourceSet", "rs", "=", "new", "ResourceSet", "(", ")", ";", "rs", ".", "setId", "(", "1L", ")", ";", "resourceSetService", ".", "saveNew", "(", "rs", ")", ";", "}"], "memberFunctions": {"testUpdate_nullId2": [["void"]], "setUp": [["void"]], "testUpdate_mismatchedIds": [["void"]], "testUpdate_nullId": [["void"]]}, "className": "TestDefaultResourceSetService", "renamed": ["void", "function", "(", ")", "{", "ResourceSet", "loc0", "=", "new", "ResourceSet", "(", ")", ";", "loc0", ".", "setId", "(", "1L", ")", ";", "resourceSetService", ".", "saveNew", "(", "loc0", ")", ";", "}"], "nl": "Test method for  {@link org.mitre.uma.service.impl.DefaultResourceSetService#saveNew(org.mitre.uma.model.ResourceSet)}.", "nlToks": ["Test", "method", "for", "-LCB-", "@link", "org.mitre.uma.service.impl.DefaultResourceSetService", "#saveNew", "-LRB-", "org.mitre.uma.model.ResourceSet", "-RRB-", "-RCB-", "."], "path": "adilansari/OpenID-Connect-Java-Spring-Server/tree/master/uma-server/src/test/java/org/mitre/uma/service/impl/TestDefaultResourceSetService.java", "idx": 1610}
{"memberVariables": {"fis": "FIS"}, "code": ["void", "function", "(", ")", "{", "System", ".", "out", ".", "println", "(", "fis", ".", "getFunctionBlock", "(", "null", ")", ".", "getVariables", "(", ")", ".", "toString", "(", ")", ")", ";", "}"], "memberFunctions": {"sortByValue": [["ArrayList<K>", "Map<K,V> map"]], "getActions": [["ArrayList<String>"]], "evaluate": [["Map<String,Double>"]], "setInput": [["void", "String variable", "double value"]]}, "className": "FuzzyInterpreter", "renamed": ["void", "function", "(", ")", "{", "System", ".", "out", ".", "println", "(", "fis", ".", "getFunctionBlock", "(", "null", ")", ".", "getVariables", "(", ")", ".", "toString", "(", ")", ")", ";", "}"], "nl": "Prints input in console for debugging.", "nlToks": ["Prints", "input", "in", "console", "for", "debugging", "."], "path": "pregnantboy/fyp/tree/master/forge/src/main/java/fuzzyMod/fuzzyLogic/FuzzyInterpreter.java", "idx": 1611}
{"memberVariables": {"length": "int", "type": "int", "info=new HashMap<String,FieldInfo>()": "Map<String,FieldInfo>"}, "code": ["void", "function", "(", "String", "fldname", ")", "{", "addField", "(", "fldname", ",", "INTEGER", ",", "0", ")", ";", "}"], "memberFunctions": {"add": [["void", "String fldname", "Schema sch"]], "addStringField": [["void", "String fldname", "int length"]], "addAll": [["void", "Schema sch"]], "addField": [["void", "String fldname", "int type", "int length"]], "length": [["int", "String fldname"]], "fields": [["Collection<String>"]], "type": [["int", "String fldname"]], "hasField": [["boolean", "String fldname"]]}, "className": "Schema", "renamed": ["void", "function", "(", "String", "arg0", ")", "{", "addField", "(", "arg0", ",", "INTEGER", ",", "0", ")", ";", "}"], "nl": "Adds an integer field to the schema.", "nlToks": ["Adds", "an", "integer", "field", "to", "the", "schema", "."], "path": "prerit2803/DBMSProject2/tree/master/simpledb/record/Schema.java", "idx": 1612}
{"memberVariables": {"type": "String", "url": "String"}, "code": ["int", "function", "(", ")", "{", "return", "url", ".", "hashCode", "(", ")", ";", "}"], "memberFunctions": {"getURL": [["String"]], "getType": [["String"]], "equals": [["boolean", "Object obj"]], "toString": [["String"]], "setURL": [["void", "String url"]]}, "className": "HessianRemote", "renamed": ["int", "function", "(", ")", "{", "return", "url", ".", "hashCode", "(", ")", ";", "}"], "nl": "Defines the hashcode.", "nlToks": ["Defines", "the", "hashcode", "."], "path": "acupple/dubbo/tree/master/hessian-lite/src/main/java/com/alibaba/com/caucho/hessian/io/HessianRemote.java", "idx": 1613}
{"memberVariables": {"unresolvedRefs=new TreeMap<String,List<SoapRef>>()": "SortedMap<String,List<SoapRef>>", "instances=new TreeMap<String,Object>()": "SortedMap<String,Object>"}, "code": ["Set", "<", "String", ">", "function", "(", ")", "{", "return", "Collections", ".", "unmodifiableSet", "(", "instances", ".", "keySet", "(", ")", ")", ";", "}"], "memberFunctions": {"addInstance": [["void", "String id", "Object instance"]], "getUnresolvedRefs": [["SortedMap<String,List<SoapRef>>"]], "get": [["SoapRefRegistry", "Context context"]], "addRef": [["void", "String id", "SoapRef soapRef"]]}, "className": "SoapRefRegistry", "renamed": ["Set", "<", "String", ">", "function", "(", ")", "{", "return", "Collections", ".", "unmodifiableSet", "(", "instances", ".", "keySet", "(", ")", ")", ";", "}"], "nl": "Gets the ids of the registered object instances.", "nlToks": ["Gets", "the", "ids", "of", "the", "registered", "object", "instances", "."], "path": "primesign/cxf/tree/master/rt/databinding/aegis/src/main/java/org/apache/cxf/aegis/type/encoded/SoapRefRegistry.java", "idx": 1614}
{"memberVariables": {"BUCKET_NAME=\"testBucket\"": "String", "mLocalOutputStream": "BufferedOutputStream", "KEY=\"testKey\"": "String", "mFile": "File", "mStream": "S3AOutputStream"}, "code": ["void", "function", "(", ")", "{", "mStream", ".", "flush", "(", ")", ";", "mStream", ".", "close", "(", ")", ";", "Mockito", ".", "verify", "(", "mLocalOutputStream", ")", ".", "flush", "(", ")", ";", "}"], "memberFunctions": {"writeByte": [["void"]], "writeByteArray": [["void"]], "writeByteArrayWithRange": [["void"]], "before": [["void"]], "close": [["void"]]}, "className": "S3AOutputStreamTest", "renamed": ["void", "function", "(", ")", "{", "mStream", ".", "flush", "(", ")", ";", "mStream", ".", "close", "(", ")", ";", "Mockito", ".", "verify", "(", "mLocalOutputStream", ")", ".", "flush", "(", ")", ";", "}"], "nl": "Tests to ensure  {@link S3AOutputStream#flush()} calls the underlying output stream.", "nlToks": ["Tests", "to", "ensure", "-LCB-", "@link", "S3AOutputStream", "#flush", "-LRB-", "-RRB-", "-RCB-", "calls", "the", "underlying", "output", "stream", "."], "path": "poemlin/alluxio/tree/master/underfs/s3a/src/test/java/alluxio/underfs/s3a/S3AOutputStreamTest.java", "idx": 1617}
{"memberVariables": {}, "code": ["void", "function", "(", ")", "{", "throw", "new", "UnsupportedOperationException", "(", ")", ";", "}"], "memberFunctions": {}, "className": "UnmodifiableIterator", "renamed": ["void", "function", "(", ")", "{", "throw", "new", "UnsupportedOperationException", "(", ")", ";", "}"], "nl": "Guaranteed to throw an exception and leave the underlying data unmodified.", "nlToks": ["Guaranteed", "to", "throw", "an", "exception", "and", "leave", "the", "underlying", "data", "unmodified", "."], "path": "hazendaz/guava/tree/master/guava/src/com/google/common/collect/UnmodifiableIterator.java", "idx": 1618}
{"memberVariables": {}, "code": ["Class", "function", "(", "Class", "parent", ",", "String", "name", ")", "{", "Class", "clazz", "=", "getClassImpl", "(", "parent", ",", "name", ")", ";", "return", "clazz", ";", "}"], "memberFunctions": {"getValue": [["Object", "Object instance", "String fieldName"]], "getAllStaticMethods": [["List", "Class entryClass", "String methodName", "Class[] classTypes"]], "getConstructorImpl": [["Constructor", "Class clazz", "Class[] classTypes"]], "getMethodImpl": [["Method", "Class thisClass", "String methodName", "Class[] classTypes"]], "getFieldImpl": [["Field", "Class thisClass", "String fieldName"]], "getClassImpl": [["Class", "Class parent", "String name"]], "setValue": [["void", "Object instance", "String fieldName", "Object value"]], "invokeAllStaticMethods": [["List", "Class clazz", "String methodName", "Object arg"]], "getMethod": [["Method", "Object instance", "String methodName", "Class[] classTypes"]], "invokeMethod": [["Object", "Object instance", "String methodName", "Object arg"], ["Object", "Object instance", "String methodName", "Object[] args"], ["Object", "Object instance", "String methodName", "Object[] args", "Class[] classTypes"]], "invokeConstructor": [["Object", "Class clazz", "Object[] args"], ["Object", "Class clazz", "Object[] args", "Class[] classTypes"]]}, "className": "PrivilegedAccessor", "renamed": ["Class", "function", "(", "Class", "arg0", ",", "String", "arg1", ")", "{", "Class", "loc0", "=", "getClassImpl", "(", "arg0", ",", "arg1", ")", ";", "return", "loc0", ";", "}"], "nl": "Returns the class 'name' that was declared by class 'parent'.", "nlToks": ["Returns", "the", "class", "`", "name", "'", "that", "was", "declared", "by", "class", "`", "parent", "'", "."], "path": "adamfisk/littleshoot-client/tree/master/client/util/src/main/java/org/lastbamboo/client/util/PrivilegedAccessor.java", "idx": 1620}
{"memberVariables": {"mClientSupplier=new Supplier<String>(){\n  @Override public String get(){\n    return getUri();\n  }\n}\n": "Supplier<String>", "mJournalFolder": "String", "mClientPool=new ClientPool(mClientSupplier)": "ClientPool", "mAlluxioMaster": "AlluxioMaster", "mMasterThread": "Thread", "LOG=LoggerFactory.getLogger(Constants.LOGGER_TYPE)": "Logger", "mHostname": "String"}, "code": ["LocalAlluxioMaster", "function", "(", "final", "String", "workDirectory", ")", "{", "UnderFileSystemUtils", ".", "mkdirIfNotExists", "(", "workDirectory", ")", ";", "return", "new", "LocalAlluxioMaster", "(", ")", ";", "}"], "memberFunctions": {"getInternalMaster": [["AlluxioMaster"]], "getRPCLocalPort": [["int"]], "getWebBindHost": [["String"]], "uniquePath": [["String"]], "start": [["void"]], "getRPCBindHost": [["String"]], "getClient": [["FileSystem"]], "kill": [["void"]], "getJournalFolder": [["String"]], "stop": [["void"]], "getWebLocalPort": [["int"]], "get": [["String"]], "isServing": [["boolean"]], "getAddress": [["InetSocketAddress"]], "clearClients": [["void"]], "getUri": [["String"]]}, "className": "LocalAlluxioMaster", "renamed": ["LocalAlluxioMaster", "function", "(", "final", "String", "arg0", ")", "{", "UnderFileSystemUtils", ".", "mkdirIfNotExists", "(", "arg0", ")", ";", "return", "new", "LocalAlluxioMaster", "(", ")", ";", "}"], "nl": "Creates a new local Alluxio master with a isolated port.", "nlToks": ["Creates", "a", "new", "local", "Alluxio", "master", "with", "a", "isolated", "port", "."], "path": "poemlin/alluxio/tree/master/minicluster/src/main/java/alluxio/master/LocalAlluxioMaster.java", "idx": 1621}
{"memberVariables": {"m_log=LoggerFactory.getLogger(getClass())": "Logger"}, "code": ["void", "function", "(", ")", "{", "ByteBuffer", ".", "setUseDirectBuffers", "(", "false", ")", ";", "ByteBuffer", ".", "setAllocator", "(", "new", "SimpleByteBufferAllocator", "(", ")", ")", ";", "}"], "memberFunctions": {"createRegisterOk": [["SipMessage"]], "ultimateSipDecodingTest": [["void"]], "createInvite": [["Invite"], ["Invite", "final String viaValue"], ["Invite", "final String viaValue", "final String body"]], "testPartialMessageSipDecoding": [["void"]], "createRegister": [["Register"]], "createNoBodyInvite": [["Invite"], ["Invite", "final String viaValue"]], "testBasicSipDecoding": [["void"]], "createInviteOkNoBody": [["SipResponse"]], "createInviteOk": [["SipResponse"]], "combine": [["ByteBuffer", "final SipMessage... messages"]]}, "className": "SipDecodingTest", "renamed": ["void", "function", "(", ")", "{", "ByteBuffer", ".", "setUseDirectBuffers", "(", "false", ")", ";", "ByteBuffer", ".", "setAllocator", "(", "new", "SimpleByteBufferAllocator", "(", ")", ")", ";", "}"], "nl": "MINA does some funky things if we don't do this first.", "nlToks": ["MINA", "does", "some", "funky", "things", "if", "we", "do", "n't", "do", "this", "first", "."], "path": "adamfisk/littleshoot-client/tree/master/common/sip/stack/src/test/java/org/lastbamboo/common/sip/stack/codec/decoder/SipDecodingTest.java", "idx": 1622}
{"memberVariables": {"signToken=true": "boolean", "conditionsProvider=new DefaultConditionsProvider()": "ConditionsProvider", "LOG=LogUtils.getL7dLogger(SCTSAMLTokenProvider.class)": "Logger", "attributeStatementProviders": "List<AttributeStatementProvider>", "subjectProvider=new DefaultSubjectProvider()": "SubjectProvider"}, "code": ["ConditionsProvider", "function", "(", ")", "{", "return", "conditionsProvider", ";", "}"], "memberFunctions": {"canHandleToken": [["boolean", "String tokenType"], ["boolean", "String tokenType", "String realm"]], "getAttributeStatementProviders": [["List<AttributeStatementProvider>"]], "createSamlToken": [["SamlAssertionWrapper", "TokenProviderParameters tokenParameters", "byte[] secret", "Document doc"]], "isSignToken": [["boolean"]], "setSubjectProvider": [["void", "SubjectProvider subjectProvider"]], "testKeyType": [["void", "TokenProviderParameters tokenParameters"]], "createToken": [["TokenProviderResponse", "TokenProviderParameters tokenParameters"]], "setAttributeStatementProviders": [["void", "List<AttributeStatementProvider> attributeStatementProviders"]], "createCallbackHandler": [["SamlCallbackHandler", "TokenProviderParameters tokenParameters", "byte[] secret", "Document doc"]], "getSubjectProvider": [["SubjectProvider"]], "setConditionsProvider": [["void", "ConditionsProvider conditionsProvider"]], "setSignToken": [["void", "boolean signToken"]]}, "className": "SCTSAMLTokenProvider", "renamed": ["ConditionsProvider", "function", "(", ")", "{", "return", "conditionsProvider", ";", "}"], "nl": "Get the ConditionsProvider", "nlToks": ["Get", "the", "ConditionsProvider"], "path": "primesign/cxf/tree/master/services/sts/systests/advanced/src/test/java/org/apache/cxf/systest/sts/secure_conv/SCTSAMLTokenProvider.java", "idx": 1623}
{"memberVariables": {"blk": "Block", "EMPTY=0": "int", "INUSE=1": "int", "tx": "Transaction", "ti": "TableInfo", "slotsize": "int", "currentslot=-1": "int"}, "code": ["void", "function", "(", ")", "{", "if", "(", "blk", "!=", "null", ")", "{", "tx", ".", "unpin", "(", "blk", ")", ";", "blk", "=", "null", ";", "}", "}"], "memberFunctions": {"next": [["boolean"]], "isValidSlot": [["boolean"]], "moveToId": [["void", "int id"]], "currentId": [["int"]], "insert": [["boolean"]], "getString": [["String", "String fldname"]], "currentpos": [["int"]], "delete": [["void"]], "setInt": [["void", "String fldname", "int val"]], "getInt": [["int", "String fldname"]], "setString": [["void", "String fldname", "String val"]], "fieldpos": [["int", "String fldname"]], "searchFor": [["boolean", "int flag"]]}, "className": "RecordPage", "renamed": ["void", "function", "(", ")", "{", "if", "(", "blk", "!=", "null", ")", "{", "tx", ".", "unpin", "(", "blk", ")", ";", "blk", "=", "null", ";", "}", "}"], "nl": "Closes the manager, by unpinning the block.", "nlToks": ["Closes", "the", "manager", ",", "by", "unpinning", "the", "block", "."], "path": "prerit2803/DBMSProject2/tree/master/simpledb/record/RecordPage.java", "idx": 1625}
{"memberVariables": {"unAttachedReference": "TokenReference", "expires": "Date", "tokenId": "String", "created": "Date", "lifetime": "long", "attachedReference": "TokenReference", "token": "Element"}, "code": ["void", "function", "(", "String", "tokenId", ")", "{", "this", ".", "tokenId", "=", "tokenId", ";", "}"], "memberFunctions": {"setAttachedReference": [["void", "TokenReference attachedReference"]], "getTokenId": [["String"]], "getUnAttachedReference": [["TokenReference"]], "getLifetime": [["long"]], "setExpires": [["void", "Date expires"]], "getCreated": [["Date"]], "setCreated": [["void", "Date created"]], "setUnattachedReference": [["void", "TokenReference unattachedReference"]], "setToken": [["void", "Element token"]], "getToken": [["Element"]], "setLifetime": [["void", "long lifetime"]], "getExpires": [["Date"]], "getAttachedReference": [["TokenReference"]]}, "className": "TokenRenewerResponse", "renamed": ["void", "function", "(", "String", "arg0", ")", "{", "this", ".", "tokenId", "=", "arg0", ";", "}"], "nl": "Set the token Id", "nlToks": ["Set", "the", "token", "Id"], "path": "primesign/cxf/tree/master/services/sts/sts-core/src/main/java/org/apache/cxf/sts/token/renewer/TokenRenewerResponse.java", "idx": 1626}
{"memberVariables": {"address": "AddressType"}, "code": ["String", "function", "(", ")", "{", "String", "result", "=", "\"\"", ";", "try", "{", "result", "=", "address", ".", "getCountrySubentityCode", "(", ")", ".", "getValue", "(", ")", ";", "}", "catch", "(", "NullPointerException", "npe", ")", "{", "}", "return", "result", ";", "}"], "memberFunctions": {"getZip": [["String"]], "getStreet": [["String"]], "getCity": [["String"]]}, "className": "AddressFacade", "renamed": ["String", "function", "(", ")", "{", "String", "loc0", "=", "\"srini_string\"", ";", "try", "{", "loc0", "=", "address", ".", "getCountrySubentityCode", "(", ")", ".", "getValue", "(", ")", ";", "}", "catch", "(", "NullPointerException", "loc1", ")", "{", "}", "return", "loc0", ";", "}"], "nl": "getState returns a String representing the state in a UBL address.", "nlToks": ["getState", "returns", "a", "String", "representing", "the", "state", "in", "a", "UBL", "address", "."], "path": "pmeijer/meta-core/tree/master/meta/DesignDataPackage/tools/jaxb-ri-2.2.6/samples/ubl/src/samples/ubl/report/facade/AddressFacade.java", "idx": 1628}
{"memberVariables": {"mLockIdToRecordMap=new HashMap<>()": "Map<Long,LockRecord>", "mSessionIdToLockIdsMap=new HashMap<>()": "Map<Long,Set<Long>>", "mSharedMapsLock=new Object()": "Object", "LOCK_ID_GEN=new AtomicLong(0)": "AtomicLong", "mSessionId": "long", "mBlockId": "long", "mLockPool=new ResourcePool<ClientRWLock>(Configuration.getInt(PropertyKey.WORKER_TIERED_STORE_BLOCK_LOCKS)){\n  @Override public void close(){\n  }\n  @Override protected ClientRWLock createNewResource(){\n    return new ClientRWLock();\n  }\n}\n": "ResourcePool<ClientRWLock>", "mLock": "Lock", "LOG=LoggerFactory.getLogger(Constants.LOGGER_TYPE)": "Logger", "mLocks=new HashMap<>()": "Map<Long,ClientRWLock>"}, "code": ["void", "function", "(", "Lock", "lock", ",", "long", "blockId", ")", "{", "lock", ".", "unlock", "(", ")", ";", "releaseBlockLockIfUnused", "(", "blockId", ")", ";", "}"], "memberFunctions": {"unlockBlock": [["void", "long lockId"], ["void", "long sessionId", "long blockId"]], "createNewResource": [["ClientRWLock"]], "getLock": [["Lock"]], "getBlockLock": [["ClientRWLock", "long blockId"]], "validateLock": [["void", "long sessionId", "long blockId", "long lockId"]], "getBlockId": [["long"]], "lockBlock": [["long", "long sessionId", "long blockId", "BlockLockType blockLockType"]], "cleanupSession": [["void", "long sessionId"]], "getLockedBlocks": [["Set<Long>"]], "getSessionId": [["long"]], "close": [["void"]], "releaseBlockLockIfUnused": [["void", "long blockId"]], "validate": [["void"]]}, "className": "BlockLockManager", "renamed": ["void", "function", "(", "Lock", "arg0", ",", "long", "arg1", ")", "{", "arg0", ".", "unlock", "(", ")", ";", "releaseBlockLockIfUnused", "(", "arg1", ")", ";", "}"], "nl": "Unlocks the given lock and releases the block lock for the given block id if the lock no longer in use.", "nlToks": ["Unlocks", "the", "given", "lock", "and", "releases", "the", "block", "lock", "for", "the", "given", "block", "id", "if", "the", "lock", "no", "longer", "in", "use", "."], "path": "poemlin/alluxio/tree/master/core/server/src/main/java/alluxio/worker/block/BlockLockManager.java", "idx": 1631}
{"memberVariables": {"s_newVersionSet=false": "boolean", "s_newVersion=false": "boolean", "s_installed": "boolean", "LOG=LoggerFactory.getLogger(Prefs.class)": "Logger"}, "code": ["double", "function", "(", ")", "{", "final", "String", "versionString", "=", "System", ".", "getProperty", "(", "\"org.lastbamboo.client.version\"", ",", "\"0.00\"", ")", ";", "return", "Double", ".", "parseDouble", "(", "versionString", ")", ";", "}"], "memberFunctions": {"running": [["boolean"]], "hasId": [["boolean"]], "setInstalled": [["void", "final boolean installed"]], "getLastVersion": [["double"]], "isInstalled": [["boolean"]], "setId": [["long"]], "getId": [["long"]], "getBaseUri": [["String"]], "setLastVersion": [["void"]], "getTorrentDir": [["File"]], "newVersion": [["boolean"]]}, "className": "Prefs", "renamed": ["double", "function", "(", ")", "{", "final", "String", "loc0", "=", "System", ".", "getProperty", "(", "\"srini_string\"", ",", "\"srini_string\"", ")", ";", "return", "Double", ".", "parseDouble", "(", "loc0", ")", ";", "}"], "nl": "Accessor for the version of the client we're running. If we're running on the main line, this just returns 0.00.", "nlToks": ["Accessor", "for", "the", "version", "of", "the", "client", "we", "'re", "running", ".", "If", "we", "'re", "running", "on", "the", "main", "line", ",", "this", "just", "returns", "0.00", "."], "path": "adamfisk/littleshoot-client/tree/master/client/prefs/src/main/java/org/lastbamboo/client/prefs/Prefs.java", "idx": 1632}
{"memberVariables": {"mLockManager": "BlockLockManager", "TEST_BLOCK_ID=9": "long", "mThrown=ExpectedException.none()": "ExpectedException", "TEST_SESSION_ID=2": "long", "mFolder=new TemporaryFolder()": "TemporaryFolder"}, "code": ["void", "function", "(", ")", "{", "long", "badLockId", "=", "1", ";", "mThrown", ".", "expect", "(", "BlockDoesNotExistException", ".", "class", ")", ";", "mThrown", ".", "expectMessage", "(", "ExceptionMessage", ".", "LOCK_RECORD_NOT_FOUND_FOR_LOCK_ID", ".", "getMessage", "(", "badLockId", ")", ")", ";", "mLockManager", ".", "unlockBlock", "(", "badLockId", ")", ";", "}"], "memberFunctions": {"lockAcrossSessions": [["void"]], "stress": [["void"]], "validateLockIdWithNoRecord": [["void"]], "dontReuseLock": [["void"]], "before": [["void"]], "reuseLock": [["void"]], "readBlocksWrite": [["void"]], "validateLockIdWithWrongBlockId": [["void"]], "setMaxLocks": [["void", "int maxLocks"]], "lockExpectingHang": [["void", "final BlockLockManager manager", "final long blockId"]], "lockBlock": [["void"]], "grabManyLocks": [["void"]], "validateLockIdWithWrongSessionId": [["void"]], "cleanupSession": [["void"]], "after": [["void"]]}, "className": "BlockLockManagerTest", "renamed": ["void", "function", "(", ")", "{", "long", "loc0", "=", "1", ";", "mThrown", ".", "expect", "(", "BlockDoesNotExistException", ".", "class", ")", ";", "mThrown", ".", "expectMessage", "(", "ExceptionMessage", ".", "LOCK_RECORD_NOT_FOUND_FOR_LOCK_ID", ".", "getMessage", "(", "loc0", ")", ")", ";", "mLockManager", ".", "unlockBlock", "(", "loc0", ")", ";", "}"], "nl": "Tests that an exception is thrown when trying to unlock a block via {@link BlockLockManager#unlockBlock(long)} which is not locked.", "nlToks": ["Tests", "that", "an", "exception", "is", "thrown", "when", "trying", "to", "unlock", "a", "block", "via", "-LCB-", "@link", "BlockLockManager", "#unlockBlock", "-LRB-", "long", "-RRB-", "-RCB-", "which", "is", "not", "locked", "."], "path": "poemlin/alluxio/tree/master/core/server/src/test/java/alluxio/worker/block/BlockLockManagerTest.java", "idx": 1634}
{"memberVariables": {"serialVersionUID=1L": "long", "isSystemDerived": "String", "isActive": "String", "predecessorId": "BigDecimal", "srcFileName": "String", "successorId": "BigDecimal", "feedId": "BigDecimal", "checksum": "String", "transmissionDatasetId": "String", "comments": "String", "inactivationReasonType": "String", "isFormatValid": "String", "dataUnitId": "long", "receiptDate": "Timestamp", "srcUniqueFileName": "String", "createdDate": "Timestamp", "dataSetId": "Long", "fileSize": "BigDecimal", "destFileName": "String", "loadedInCats": "String", "checksumType": "String", "modifiedDate": "Timestamp", "runId": "BigDecimal", "isPrepopulated": "String", "isBulk": "String", "isUpdate": "String", "receiptDateType": "String", "status": "String"}, "code": ["String", "function", "(", ")", "{", "return", "this", ".", "checksumType", ";", "}"], "memberFunctions": {"setIsSystemDerived": [["void", "String isSystemDerived"]], "setIsPrepopulated": [["void", "String isPrepopulated"]], "getStatus": [["String"]], "getIsUpdate": [["String"]], "getDataUnitId": [["long"]], "getFileSize": [["BigDecimal"]], "setInactivationReasonType": [["void", "String inactivationReasonType"]], "setDataUnitId": [["void", "long dataUnitId"]], "getComments": [["String"]], "getCreatedDate": [["Timestamp"]], "setFileSize": [["void", "BigDecimal fileSize"]], "getPredecessorId": [["BigDecimal"]], "setIsUpdate": [["void", "String isUpdate"]], "getReceiptDateType": [["String"]], "getFeedId": [["BigDecimal"]], "setReceiptDate": [["void", "Timestamp receiptDate"]], "getModifiedDate": [["Timestamp"]], "setSuccessorId": [["void", "BigDecimal successorId"]], "setDestFileName": [["void", "String destFileName"]], "setIsBulk": [["void", "String isBulk"]], "getIsFormatValid": [["String"]], "setDataSetId": [["void", "Long dataSetId"]], "setIsActive": [["void", "String isActive"]], "setChecksumType": [["void", "String checksumType"]], "setFeedId": [["void", "BigDecimal feedId"]], "getInactivationReasonType": [["String"]], "getSrcUniqueFileName": [["String"]], "getDataSetId": [["Long"]], "setReceiptDateType": [["void", "String receiptDateType"]], "getRunId": [["BigDecimal"]], "setSrcFileName": [["void", "String srcFileName"]], "getSrcFileName": [["String"]], "getChecksum": [["String"]], "getDestFileName": [["String"]], "getReceiptDate": [["Timestamp"]], "setTransmissionDatasetId": [["void", "String transmissionDatasetId"]], "getTransmissionDatasetId": [["String"]], "setComments": [["void", "String comments"]], "getLoadedInCats": [["String"]], "getSuccessorId": [["BigDecimal"]], "setLoadedInCats": [["void", "String loadedInCats"]], "getIsPrepopulated": [["String"]], "setSrcUniqueFileName": [["void", "String srcUniqueFileName"]], "setChecksum": [["void", "String checksum"]], "setIsFormatValid": [["void", "String isFormatValid"]], "getIsBulk": [["String"]], "setRunId": [["void", "BigDecimal runId"]], "setStatus": [["void", "String status"]], "getIsActive": [["String"]], "setModifiedDate": [["void", "Timestamp modifiedDate"]], "setCreatedDate": [["void", "Timestamp createdDate"]], "setPredecessorId": [["void", "BigDecimal predecessorId"]], "getIsSystemDerived": [["String"]]}, "className": "PCLDataUnitEntity", "renamed": ["String", "function", "(", ")", "{", "return", "this", ".", "checksumType", ";", "}"], "nl": "Gets the checksum type.", "nlToks": ["Gets", "the", "checksum", "type", "."], "path": "pkesireddy/portico_fletcher/tree/master/FetcherTesterService/src/main/java/org/ithaka/cm/fetchertester/entity/PCLDataUnitEntity.java", "idx": 1635}
{"memberVariables": {"framerate": "int", "cameraIPAddress": "String", "channel": "String", "cameraPort": "int", "compression": "int", "resolution": "String", "url": "URL"}, "code": ["void", "function", "(", "int", "z", ")", "{", "String", "command", ";", "String", "zDirection", "=", "String", ".", "valueOf", "(", "z", ")", ";", "command", "=", "\"axis-cgi/com/ptz.cgi?camera=\"", "+", "channel", ";", "command", "=", "command", "+", "\"&zoom=\"", ";", "command", "=", "command", "+", "zDirection", ";", "try", "{", "runUrl", "(", "command", ")", ";", "}", "catch", "(", "IOException", "e", ")", "{", "e", ".", "printStackTrace", "(", ")", ";", "}", "}"], "memberFunctions": {"getURL": [["URL"]], "halt": [["void"]], "movePanTilt": [["void", "String direction"]], "composeURL": [["String", "String streamType"]], "runUrl": [["void", "String command"]], "start": [["void"]], "setIPAddress": [["void", "String ipaddress", "int port"]]}, "className": "Camera", "renamed": ["void", "function", "(", "int", "arg0", ")", "{", "String", "loc0", ";", "String", "loc2", "=", "String", ".", "valueOf", "(", "arg0", ")", ";", "loc0", "=", "\"srini_string\"", "+", "channel", ";", "loc0", "=", "loc0", "+", "\"srini_string\"", ";", "loc0", "=", "loc0", "+", "loc2", ";", "try", "{", "runUrl", "(", "loc0", ")", ";", "}", "catch", "(", "IOException", "loc1", ")", "{", "loc1", ".", "printStackTrace", "(", ")", ";", "}", "}"], "nl": "Sends a zoom command to the camera according to the user control", "nlToks": ["Sends", "a", "zoom", "command", "to", "the", "camera", "according", "to", "the", "user", "control"], "path": "priaonehaha/android-axis/tree/master/axis/src/axis/android/Camera.java", "idx": 1638}
{"memberVariables": {"dev": "Device"}, "code": ["void", "function", "(", ")", "{", "System", ".", "out", ".", "println", "(", "\"getAddress\"", ")", ";", "Device", "instance", "=", "null", ";", "int", "expResult", "=", "0", ";", "int", "result", "=", "instance", ".", "getAddress", "(", ")", ";", "assertEquals", "(", "expResult", ",", "result", ")", ";", "fail", "(", "\"The test case is a prototype.\"", ")", ";", "}"], "memberFunctions": {"testGetType": [["void"]], "setUpClass": [["void"]], "testGetDeviceName_0args": [["void"]], "testAddToPane": [["void"]], "tearDownClass": [["void"]], "tearDown": [["void"]], "testGetDeviceNames": [["void"]], "testGetDeviceBlock": [["void"]], "testAddCapabilities": [["void"]], "testToString": [["void"]], "testGetImgName": [["void"]], "testAddCapability": [["void"]], "testGetDeviceName_Locale": [["void"]], "setUp": [["void"]], "testGetImage": [["void"]], "testGetDeviceID": [["void"]], "testGetCapabilityBlock": [["void"]], "testGetCapabilities": [["void"]], "testRemoveCapability": [["void"]]}, "className": "DeviceTest", "renamed": ["void", "function", "(", ")", "{", "System", ".", "out", ".", "println", "(", "\"srini_string\"", ")", ";", "Device", "loc0", "=", "null", ";", "int", "loc1", "=", "0", ";", "int", "loc2", "=", "loc0", ".", "getAddress", "(", ")", ";", "assertEquals", "(", "loc1", ",", "loc2", ")", ";", "fail", "(", "\"srini_string\"", ")", ";", "}"], "nl": "Test of getAddress method, of class Device.", "nlToks": ["Test", "of", "getAddress", "method", ",", "of", "class", "Device", "."], "path": "hashinisenaratne/SIFEB/tree/master/Visual Programming Editor/SiFEB_VE/test/com/sifeb/ve/DeviceTest.java", "idx": 1642}
{"memberVariables": {"LOG=LogUtils.getL7dLogger(DefaultConditionsProvider.class)": "Logger", "DEFAULT_MAX_LIFETIME=60L * 60L * 12L": "long", "acceptClientLifetime": "boolean", "lifetime=60L * 30L": "long", "maxLifetime=DEFAULT_MAX_LIFETIME": "long", "failLifetimeExceedance=true": "boolean", "futureTimeToLive=60L": "long"}, "code": ["long", "function", "(", ")", "{", "return", "maxLifetime", ";", "}"], "memberFunctions": {"getFutureTimeToLive": [["long"]], "setFutureTimeToLive": [["void", "long futureTimeToLive"]], "getLifetime": [["long"]], "setFailLifetimeExceedance": [["void", "boolean failLifetimeExceedance"]], "setMaxLifetime": [["void", "long maxLifetime"]], "setLifetime": [["void", "long lifetime"]], "setAcceptClientLifetime": [["void", "boolean acceptClientLifetime"]], "getConditions": [["ConditionsBean", "TokenProviderParameters providerParameters"]], "isAcceptClientLifetime": [["boolean"]], "extractAddressFromParticipantsEPR": [["String", "Object participants"]], "createAudienceRestrictions": [["List<AudienceRestrictionBean>", "TokenProviderParameters providerParameters"]], "isFailLifetimeExceedance": [["boolean"]]}, "className": "DefaultConditionsProvider", "renamed": ["long", "function", "(", ")", "{", "return", "maxLifetime", ";", "}"], "nl": "Get the maximum lifetime in seconds for issued SAML token if requestor specifies lifetime element", "nlToks": ["Get", "the", "maximum", "lifetime", "in", "seconds", "for", "issued", "SAML", "token", "if", "requestor", "specifies", "lifetime", "element"], "path": "primesign/cxf/tree/master/services/sts/sts-core/src/main/java/org/apache/cxf/sts/token/provider/DefaultConditionsProvider.java", "idx": 1643}
{"memberVariables": {"waySelection": "JComboBox", "calcButton": "JButton", "routeCalculator": "RouteCalculator", "ROUTE_TRACK_NAME=\"Route\"": "String", "frame": "MapViewFrame"}, "code": ["RouteCalculator", "function", "(", ")", "{", "return", "new", "RouteCalculator", "(", ")", ";", "}"], "memberFunctions": {"actionPerformed": [["void", "ActionEvent e"]], "eventHappened": [["void", "MapEvent event"]], "getFrame": [["MapViewFrame"]], "constructApplicationFrame": [["MapViewFrame"]], "main": [["void", "String[] args"]], "showFrame": [["void"]]}, "className": "RoutePlannerApp", "renamed": ["RouteCalculator", "function", "(", ")", "{", "return", "new", "RouteCalculator", "(", ")", ";", "}"], "nl": "Factory method for the routing component. Subclasses can override it and provide more advanced routing algorithms.", "nlToks": ["Factory", "method", "for", "the", "routing", "component", ".", "Subclasses", "can", "override", "it", "and", "provide", "more", "advanced", "routing", "algorithms", "."], "path": "peterplupo/ia201102/tree/master/trabalho1/aimax-osm/src/main/java/aimax/osm/applications/RoutePlannerApp.java", "idx": 1644}
{"memberVariables": {"LOG=LoggerFactory.getLogger(Constants.LOGGER_TYPE)": "Logger"}, "code": ["void", "function", "(", "String", "filePath", ",", "String", "perms", ")", "{", "Files", ".", "setPosixFilePermissions", "(", "Paths", ".", "get", "(", "filePath", ")", ",", "PosixFilePermissions", ".", "fromString", "(", "perms", ")", ")", ";", "}"], "memberFunctions": {"setLocalDirStickyBit": [["void", "String dir"]], "move": [["void", "String srcPath", "String dstPath"]], "getLocalFileMode": [["short", "String filePath"]], "changeLocalFileUser": [["void", "String path", "String user"]], "delete": [["void", "String path"]], "getLocalFileOwner": [["String", "String filePath"]], "createFile": [["void", "String filePath"]], "createStorageDirPath": [["void", "String path"]], "changeLocalFileToFullPermission": [["void", "String filePath"]], "changeLocalFileGroup": [["void", "String path", "String group"]], "getLocalFileGroup": [["String", "String filePath"]], "createDir": [["void", "String path"]], "exists": [["boolean", "String path"]], "createBlockPath": [["void", "String path"]], "deletePathRecursively": [["void", "String path"]]}, "className": "FileUtils", "renamed": ["void", "function", "(", "String", "arg0", ",", "String", "arg1", ")", "{", "Files", ".", "setPosixFilePermissions", "(", "Paths", ".", "get", "(", "arg0", ")", ",", "PosixFilePermissions", ".", "fromString", "(", "arg1", ")", ")", ";", "}"], "nl": "Changes local file's permission.", "nlToks": ["Changes", "local", "file", "'s", "permission", "."], "path": "poemlin/alluxio/tree/master/core/common/src/main/java/alluxio/util/io/FileUtils.java", "idx": 1645}
{"memberVariables": {"LOG_MSG=\"Exception caught from SentenceListener\"": "String", "DISPATCH_ALL=\"DISPATCH_ALL\"": "String", "reader": "DataReader", "dataListener": "DataListener", "listeners=new ConcurrentHashMap<String,List<SentenceListener>>()": "ConcurrentMap<String,List<SentenceListener>>", "pauseTimeout=DEFAULT_TIMEOUT": "int", "exceptionListener=null": "ExceptionListener", "thread": "Thread", "LOGGER=Logger.getLogger(SentenceReader.class.getName())": "Logger", "DEFAULT_TIMEOUT=5000": "int"}, "code": ["void", "function", "(", "InputStream", "stream", ")", "{", "if", "(", "reader", ".", "isRunning", "(", ")", ")", "{", "stop", "(", ")", ";", "}", "reader", "=", "new", "DefaultDataReader", "(", "stream", ",", "this", ")", ";", "}"], "memberFunctions": {"fireReadingPaused": [["void"]], "fireDataEvent": [["void", "String data"]], "getExceptionListener": [["ExceptionListener"]], "setPauseTimeout": [["void", "int millis"]], "start": [["void"]], "removeSentenceListener": [["void", "SentenceListener listener"]], "fireReadingStopped": [["void"]], "registerListener": [["void", "SentenceListener listener", "String type"]], "getSentenceListeners": [["List<SentenceListener>"]], "handleException": [["void", "String msg", "Exception ex"]], "setDataListener": [["void", "DataListener listener"]], "stop": [["void"]], "fireReadingStarted": [["void"]], "fireSentenceEvent": [["void", "Sentence sentence"]], "addSentenceListener": [["void", "SentenceListener listener"], ["void", "SentenceListener sl", "SentenceId type"], ["void", "SentenceListener sl", "String type"]], "getPauseTimeout": [["int"]], "setExceptionListener": [["void", "ExceptionListener exceptionListener"]], "setDatagramSocket": [["void", "DatagramSocket socket"]]}, "className": "SentenceReader", "renamed": ["void", "function", "(", "InputStream", "arg0", ")", "{", "if", "(", "reader", ".", "isRunning", "(", ")", ")", "{", "stop", "(", ")", ";", "}", "reader", "=", "new", "DefaultDataReader", "(", "arg0", ",", "this", ")", ";", "}"], "nl": "Sets the InputStream to be used as data source. If reader is running, it is first stopped and you must call  {@link #start()} to resume reading.", "nlToks": ["Sets", "the", "InputStream", "to", "be", "used", "as", "data", "source", ".", "If", "reader", "is", "running", ",", "it", "is", "first", "stopped", "and", "you", "must", "call", "-LCB-", "@link", "#start", "-LRB-", "-RRB-", "-RCB-", "to", "resume", "reading", "."], "path": "pkoziol/marine-api/tree/master/src/main/java/net/sf/marineapi/nmea/io/SentenceReader.java", "idx": 1646}
{"memberVariables": {"connection": "Connection", "info": "DbInfo"}, "code": ["void", "function", "(", ")", "{", "try", "{", "connection", ".", "close", "(", ")", ";", "}", "catch", "(", "SQLException", "ex", ")", "{", "Jamuz", ".", "getLogger", "(", ")", ".", "log", "(", "Level", ".", "SEVERE", ",", "\"DbConn.disconnect()\"", ",", "ex", ")", ";", "}", "}"], "memberFunctions": {"getStringValue": [["String", "ResultSet rs", "String source", "String defaultValue"], ["String", "ResultSet rs", "String source"], ["String", "ResultSet rs", "String source", "boolean replaceEmpty"]], "getInfo": [["DbInfo"]], "getConnnection": [["Connection"]], "connect": [["boolean"]]}, "className": "DbConn", "renamed": ["void", "function", "(", ")", "{", "try", "{", "connection", ".", "close", "(", ")", ";", "}", "catch", "(", "SQLException", "loc0", ")", "{", "Jamuz", ".", "getLogger", "(", ")", ".", "log", "(", "Level", ".", "SEVERE", ",", "\"srini_string\"", ",", "loc0", ")", ";", "}", "}"], "nl": "Disconnect database", "nlToks": ["Disconnect", "database"], "path": "phramusca/JaMuz/tree/master/src/jamuz/DbConn.java", "idx": 1647}
{"memberVariables": {"doubles": "List<Double>", "decimals": "List<BigDecimal>", "numbers": "List<Integer>", "ids": "List<String>", "dates": "List<Date>", "complexNodes": "List<ComplexNode>", "serialVersionUID=1L": "long"}, "code": ["List", "<", "Date", ">", "function", "(", ")", "{", "if", "(", "dates", "==", "null", ")", "{", "dates", "=", "new", "ArrayList", "<", "Date", ">", "(", ")", ";", "}", "return", "this", ".", "dates", ";", "}"], "memberFunctions": {"getDecimals": [["List<BigDecimal>"]], "getDoubles": [["List<Double>"]], "getIds": [["List<String>"]], "getComplexNodes": [["List<ComplexNode>"]], "getNumbers": [["List<Integer>"]]}, "className": "RootNode", "renamed": ["List", "<", "Date", ">", "function", "(", ")", "{", "if", "(", "dates", "==", "null", ")", "{", "dates", "=", "new", "ArrayList", "<", "Date", ">", "(", ")", ";", "}", "return", "this", ".", "dates", ";", "}"], "nl": "Gets the value of the dates property.  This accessor method returns a reference to the live list, not a snapshot. Therefore any modification you make to the returned list will be present inside the JAXB object. This is why there is not a set method for the dates property.  For example, to add a new item, do as follows:  getDates().add(newItem);   Objects of the following type(s) are allowed in the list {@link String }", "nlToks": ["Gets", "the", "value", "of", "the", "dates", "property", ".", "This", "accessor", "method", "returns", "a", "reference", "to", "the", "live", "list", ",", "not", "a", "snapshot", ".", "Therefore", "any", "modification", "you", "make", "to", "the", "returned", "list", "will", "be", "present", "inside", "the", "JAXB", "object", ".", "This", "is", "why", "there", "is", "not", "a", "set", "method", "for", "the", "dates", "property", ".", "For", "example", ",", "to", "add", "a", "new", "item", ",", "do", "as", "follows", ":", "getDates", "-LRB-", "-RRB-", ".", "add", "-LRB-", "newItem", "-RRB-", ";", "Objects", "of", "the", "following", "type", "-LRB-", "s", "-RRB-", "are", "allowed", "in", "the", "list", "-LCB-", "@link", "String", "-RCB-"], "path": "phbenisc/xmlunit/tree/master/xmlunit-core/src/test/java/org/xmlunit/builder/jaxb/RootNode.java", "idx": 1648}
{"memberVariables": {"xStartPos": "float", "lModelAmbient": "FloatBuffer", "zPos": "float", "yPos": "float", "MOVE_FORWARD_SPEED=0.25f": "float", "yStartPos": "float", "walkbiasangle": "float", "walkbias": "float", "BULLET_INTERVAL=0": "int", "bulletTime": "long", "MAX_BULLETS": "int", "ROTATE_SPEED=1.0f": "float", "monsters": "Monster[]", "xPos": "float", "MOVE_BACKWARD_SPEED=0.3f": "float", "MAX_MONSTERS=30": "int", "lightPosition": "FloatBuffer", "whiteLight": "FloatBuffer", "monstersLiving": "boolean[]", "heading=0.0f": "float", "STRAFE_SPEED=0.3f": "float", "zStartPos": "float", "bullets": "ArrayList<Bullet>"}, "code": ["void", "function", "(", "float", "x", ",", "float", "y", ",", "float", "z", ",", "float", "height", ",", "float", "width", ",", "float", "length", ")", "{", "glPushMatrix", "(", ")", ";", "glBegin", "(", "GL_QUADS", ")", ";", "glColor3f", "(", "0.39f", ",", "0.39f", ",", "0.39f", ")", ";", "glVertex3f", "(", "x", ",", "y", ",", "-", "z", ")", ";", "glVertex3f", "(", "x", "+", "width", ",", "y", ",", "-", "(", "z", "+", "length", ")", ")", ";", "glVertex3f", "(", "x", "+", "width", ",", "y", "+", "height", ",", "-", "(", "z", "+", "length", ")", ")", ";", "glVertex3f", "(", "x", ",", "y", "+", "height", ",", "-", "z", ")", ";", "glEnd", "(", ")", ";", "glPopMatrix", "(", ")", ";", "}"], "memberFunctions": {"turnRight": [["void"]], "restart": [["void"]], "start": [["void"]], "update": [["void"]], "fireBullet": [["void"]], "isFinished": [["boolean"]], "walkForwards": [["void"]], "renderFloor": [["void", "float x", "float y", "float z", "float width", "float length"]], "walkBackwards": [["void"]], "strafeLeft": [["void"]], "LoadFromFile": [["Level", "String filename"]], "strafeRight": [["void"]], "turnLeft": [["void"]], "ReadFromXML": [["Level", "Element element"]], "render": [["void"]]}, "className": "Level", "renamed": ["void", "function", "(", "float", "arg0", ",", "float", "arg1", ",", "float", "arg2", ",", "float", "arg3", ",", "float", "arg4", ",", "float", "arg5", ")", "{", "glPushMatrix", "(", ")", ";", "glBegin", "(", "GL_QUADS", ")", ";", "glColor3f", "(", "0.39f", ",", "0.39f", ",", "0.39f", ")", ";", "glVertex3f", "(", "arg0", ",", "arg1", ",", "-", "arg2", ")", ";", "glVertex3f", "(", "arg0", "+", "arg4", ",", "arg1", ",", "-", "(", "arg2", "+", "arg5", ")", ")", ";", "glVertex3f", "(", "arg0", "+", "arg4", ",", "arg1", "+", "arg3", ",", "-", "(", "arg2", "+", "arg5", ")", ")", ";", "glVertex3f", "(", "arg0", ",", "arg1", "+", "arg3", ",", "-", "arg2", ")", ";", "glEnd", "(", ")", ";", "glPopMatrix", "(", ")", ";", "}"], "nl": "Render the walls", "nlToks": ["Render", "the", "walls"], "path": "philipwhiuk/3D-FPS-Game-Engine/tree/master/src/fps3d/Level.java", "idx": 1649}
{"memberVariables": {"LOG=Logger.getLogger(Translator.class)": "Logger", "systemDefaultLocale": "Locale", "BUNDLES_PATH=\"org.argouml.i18n\"": "String", "bundles": "Map<String,ResourceBundle>", "classLoaders=new ArrayList<ClassLoader>()": "List<ClassLoader>", "initialized": "boolean"}, "code": ["void", "function", "(", ")", "{", "initInternal", "(", "\"\"", ")", ";", "Localizer", ".", "addResource", "(", "\"UMLMenu\"", ",", "\"org.argouml.i18n.UMLResourceBundle\"", ")", ";", "}"], "memberFunctions": {"initInternal": [["void", "String s"]], "localize": [["String", "String key", "Object[] args"], ["String", "String key"]], "getName": [["String", "String key"]], "initForEclipse": [["void"], ["void", "String locale"]], "addClassLoader": [["void", "ClassLoader cl"]], "loadBundle": [["void", "String name"]], "messageFormat": [["String", "String key", "Object[] args"]], "getSystemDefaultLocale": [["Locale"]], "getLocales": [["Locale[]"]], "setLocale": [["void", "String name"], ["void", "Locale locale"]]}, "className": "Translator", "renamed": ["void", "function", "(", ")", "{", "initInternal", "(", "\"srini_string\"", ")", ";", "Localizer", ".", "addResource", "(", "\"srini_string\"", ",", "\"srini_string\"", ")", ";", "}"], "nl": "Default Locale is set and resources Bundles are loaded.", "nlToks": ["Default", "Locale", "is", "set", "and", "resources", "Bundles", "are", "loaded", "."], "path": "pichiliani/CoArgoUML/tree/master/v0.24/fonte/src/argouml-app/src/org/argouml/i18n/Translator.java", "idx": 1650}
{"memberVariables": {"TEMPORARY_SUFFIX_LENGTH=String.format(TEMPORARY_SUFFIX_FORMAT,0).length()": "int", "TEMPORARY_SUFFIX_FORMAT=\".alluxio.0x%016X.tmp\"": "String"}, "code": ["String", "function", "(", "String", "path", ")", "{", "String", "cleanedPath", "=", "cleanPath", "(", "path", ")", ";", "String", "name", "=", "FilenameUtils", ".", "getName", "(", "cleanedPath", ")", ";", "String", "parent", "=", "cleanedPath", ".", "substring", "(", "0", ",", "cleanedPath", ".", "length", "(", ")", "-", "name", ".", "length", "(", ")", "-", "1", ")", ";", "if", "(", "parent", ".", "isEmpty", "(", ")", ")", "{", "return", "AlluxioURI", ".", "SEPARATOR", ";", "}", "return", "parent", ";", "}"], "memberFunctions": {"subtractPaths": [["String", "String path", "String prefix"]], "temporaryFileName": [["String", "long nonce", "String path"]], "getPathComponents": [["String[]", "String path"]], "concatPath": [["String", "Object base", "Object... paths"]], "getPermanentFileName": [["String", "String path"]], "isRoot": [["boolean", "String path"]], "uniqPath": [["String"]], "isTemporaryFileName": [["boolean", "String path"]], "hasPrefix": [["boolean", "String path", "String prefix"]], "cleanPath": [["String", "String path"]], "validatePath": [["void", "String path"]], "normalizePath": [["String", "String path", "String separator"]]}, "className": "PathUtils", "renamed": ["String", "function", "(", "String", "arg0", ")", "{", "String", "loc0", "=", "cleanPath", "(", "arg0", ")", ";", "String", "loc1", "=", "FilenameUtils", ".", "getName", "(", "loc0", ")", ";", "String", "loc2", "=", "loc0", ".", "substring", "(", "0", ",", "loc0", ".", "length", "(", ")", "-", "loc1", ".", "length", "(", ")", "-", "1", ")", ";", "if", "(", "loc2", ".", "isEmpty", "(", ")", ")", "{", "return", "AlluxioURI", ".", "SEPARATOR", ";", "}", "return", "loc2", ";", "}"], "nl": "Gets the parent of the file at a path.", "nlToks": ["Gets", "the", "parent", "of", "the", "file", "at", "a", "path", "."], "path": "poemlin/alluxio/tree/master/core/common/src/main/java/alluxio/util/io/PathUtils.java", "idx": 1651}
{"memberVariables": {"certAlias": "String", "secureRandom": "SecureRandom", "protocol": "String", "provider": "String", "certConstraints": "CertificateConstraintsType", "ciphersuites=new ArrayList<String>()": "List<String>", "keyManagers": "KeyManager[]", "cipherSuiteFilters": "FiltersType", "trustManagers": "TrustManager[]"}, "code": ["void", "function", "(", "TrustManager", "[", "]", "trustMgrs", ")", "{", "trustManagers", "=", "trustMgrs", ";", "}"], "memberFunctions": {"setCertConstraints": [["void", "CertificateConstraintsType constraints"]], "setCipherSuites": [["void", "List<String> cs"]], "setSecureSocketProtocol": [["void", "String proto"]], "setCertAlias": [["void", "String ctAlias"]], "getCipherSuitesFilter": [["FiltersType"]], "getCertConstraints": [["CertificateConstraintsType"]], "getSecureRandom": [["SecureRandom"]], "setJsseProvider": [["void", "String prov"]], "getCertAlias": [["String"]], "setKeyManagers": [["void", "KeyManager[] keyMgrs"]], "getSecureSocketProtocol": [["String"]], "setSecureRandom": [["void", "SecureRandom random"]], "getJsseProvider": [["String"]], "getTrustManagers": [["TrustManager[]"]], "getKeyManagers": [["KeyManager[]"]], "setCipherSuitesFilter": [["void", "FiltersType filters"]], "getCipherSuites": [["List<String>"]]}, "className": "TLSParameterBase", "renamed": ["void", "function", "(", "TrustManager", "[", "]", "arg0", ")", "{", "trustManagers", "=", "arg0", ";", "}"], "nl": "Sets the TrustManagers associated with this endpoint. This parameter may be set to null for system default behavior.", "nlToks": ["Sets", "the", "TrustManagers", "associated", "with", "this", "endpoint", ".", "This", "parameter", "may", "be", "set", "to", "null", "for", "system", "default", "behavior", "."], "path": "primesign/cxf/tree/master/core/src/main/java/org/apache/cxf/configuration/jsse/TLSParameterBase.java", "idx": 1655}
{"memberVariables": {"mustUnderstand": "List<QName>", "replyTo": "EndpointReferenceType", "faultTo": "EndpointReferenceType", "messageID": "AttributedURIType", "action": "AttributedURIType", "from": "EndpointReferenceType", "namespaceURI": "String", "to": "EndpointReferenceType", "toURIType": "AttributedURIType", "duplicate": "QName", "relatesTo": "RelatesToType"}, "code": ["void", "function", "(", "EndpointReferenceType", "ref", ")", "{", "replyTo", "=", "ref", ";", "}"], "memberFunctions": {"getMustUnderstand": [["List<QName>"]], "setAction": [["void", "AttributedURIType iri"]], "getReplyTo": [["EndpointReferenceType"]], "exposeAs": [["void", "String uri"]], "setFrom": [["void", "EndpointReferenceType epr"]], "setDuplicate": [["void", "QName dup"]], "getRelatesTo": [["RelatesToType"]], "getTo": [["AttributedURIType"]], "getAction": [["AttributedURIType"]], "setMessageID": [["void", "AttributedURIType iri"]], "getMessageID": [["AttributedURIType"]], "getFaultTo": [["EndpointReferenceType"]], "setFaultTo": [["void", "EndpointReferenceType ref"]], "getDuplicate": [["QName"]], "setTo": [["void", "AttributedURIType t"], ["void", "EndpointReferenceType epr"]], "setRelatesTo": [["void", "RelatesToType rel"]], "getToEndpointReference": [["EndpointReferenceType"]], "getNamespaceURI": [["String"]], "toString": [["String"]], "createCompatibleResponseProperties": [["AddressingProperties"]], "getFrom": [["EndpointReferenceType"]]}, "className": "AddressingProperties", "renamed": ["void", "function", "(", "EndpointReferenceType", "arg0", ")", "{", "replyTo", "=", "arg0", ";", "}"], "nl": "Mutator for the ReplyTo property.", "nlToks": ["Mutator", "for", "the", "ReplyTo", "property", "."], "path": "primesign/cxf/tree/master/core/src/main/java/org/apache/cxf/ws/addressing/AddressingProperties.java", "idx": 1656}
{"memberVariables": {"W3CDATETIME_MASKS={\"yyyy-MM-dd'T'HH:mmz\"}": "String[]", "UTC=getTimeZone(\"UTC\")": "TimeZone"}, "code": ["String", "function", "(", "Date", "date", ")", "{", "SimpleDateFormat", "sdf", "=", "new", "SimpleDateFormat", "(", "\"yyyy-MM-dd'T'HH:mm'Z'\"", ")", ";", "sdf", ".", "setTimeZone", "(", "TimeZone", ".", "getTimeZone", "(", "\"UTC\"", ")", ")", ";", "return", "sdf", ".", "format", "(", "date", ")", ";", "}"], "memberFunctions": {"isDSTChangeDay": [["boolean", "Calendar cal"]], "formatDateUTC": [["String", "Date d"], ["String", "Calendar c"]], "getISO8601DateFormat": [["DateFormat"]], "getTimeZone": [["TimeZone", "String tzId"]], "toDate": [["java.util.Date", "java.sql.Timestamp timestamp"]], "convertDateToTimestamp": [["Timestamp", "Date d"]], "parseDateUTC": [["Date", "String s"]], "getCalendar": [["Calendar", "String dateString", "TimeZone tz"], ["Calendar", "String dateString"]], "moveToEnd": [["void", "Calendar cal", "TimeUnit endOfFlag"]], "parseUsingMask": [["Date", "String[] masks", "String sDate"]], "hoursInDay": [["int", "Calendar cal"]]}, "className": "DateUtils", "renamed": ["String", "function", "(", "Date", "arg0", ")", "{", "SimpleDateFormat", "loc0", "=", "new", "SimpleDateFormat", "(", "\"srini_string\"", ")", ";", "loc0", ".", "setTimeZone", "(", "TimeZone", ".", "getTimeZone", "(", "\"srini_string\"", ")", ")", ";", "return", "loc0", ".", "format", "(", "arg0", ")", ";", "}"], "nl": "Return the UTC date and time in W3C format down to second (yyyy-MM-ddTHH:mm:ssZ). i.e.: 1997-07-16T19:20:30Z", "nlToks": ["Return", "the", "UTC", "date", "and", "time", "in", "W3C", "format", "down", "to", "second", "-LRB-", "yyyy-MM-ddTHH", ":", "mm", ":", "ssZ", "-RRB-", ".", "i.e.", ":", "1997-07-16T19:20:30Z"], "path": "pingpangkuangmo/oozie/tree/master/core/src/main/java/org/apache/oozie/util/DateUtils.java", "idx": 1657}
{"memberVariables": {"rowHeaders": "List<RowHeaderType>", "columnHeaders": "List<ColumnHeaderType>", "cells": "Hashtable<ColumnHeaderType,ValueType>", "rows": "Hashtable<RowHeaderType,Hashtable<ColumnHeaderType,ValueType>>", "value": "ValueHeaderType"}, "code": ["void", "function", "(", "RowHeaderType", "r", ",", "ColumnHeaderType", "c", ",", "ValueType", "v", ")", "{", "rows", ".", "get", "(", "r", ")", ".", "put", "(", "c", ",", "v", ")", ";", "}"], "memberFunctions": {"cells": [["Hashtable<ColumnHeaderType,ValueType>"]], "get": [["ValueType", "RowHeaderType r", "ColumnHeaderType c"]], "toString": [["String"]], "value": [["ValueHeaderType"]]}, "className": "Table", "renamed": ["void", "function", "(", "RowHeaderType", "arg0", ",", "ColumnHeaderType", "arg1", ",", "ValueType", "arg2", ")", "{", "rows", ".", "get", "(", "arg0", ")", ".", "put", "(", "arg1", ",", "arg2", ")", ";", "}"], "nl": "Maps the specified row and column to the specified value in the table. Neither the row nor the column nor the value can be null  The value can be retrieved by calling the get method with a row and column that is equal to the original row and column.", "nlToks": ["Maps", "the", "specified", "row", "and", "column", "to", "the", "specified", "value", "in", "the", "table", ".", "Neither", "the", "row", "nor", "the", "column", "nor", "the", "value", "can", "be", "null", "The", "value", "can", "be", "retrieved", "by", "calling", "the", "get", "method", "with", "a", "row", "and", "column", "that", "is", "equal", "to", "the", "original", "row", "and", "column", "."], "path": "peterplupo/ia201102/tree/master/trabalho1/aima-core/src/main/java/aima/core/util/datastructure/Table.java", "idx": 1658}
{"memberVariables": {"acceptedC14nAlgorithms=new ArrayList<>()": "List<String>", "signatureAlgorithm=\"http://www.w3.org/2001/04/xmldsig-more#rsa-sha256\"": "String", "maximumKeySize=512": "long", "keySize=256": "long", "acceptedSignatureAlgorithms=new ArrayList<>()": "List<String>", "c14nAlgorithm=WSConstants.C14N_EXCL_OMIT_COMMENTS": "String", "digestAlgorithm=WSConstants.SHA256": "String", "minimumKeySize=128": "long", "useKeyValue": "boolean"}, "code": ["void", "function", "(", "List", "<", "String", ">", "acceptedSignatureAlgorithms", ")", "{", "this", ".", "acceptedSignatureAlgorithms", "=", "acceptedSignatureAlgorithms", ";", "}"], "memberFunctions": {"getC14nAlgorithm": [["String"]], "isUseKeyValue": [["boolean"]], "getAcceptedC14nAlgorithms": [["List<String>"]], "setUseKeyValue": [["void", "boolean useKeyValue"]], "getMinimumKeySize": [["long"]], "setAcceptedC14nAlgorithms": [["void", "List<String> acceptedC14nAlgorithms"]], "setC14nAlgorithm": [["void", "String c14nAlgorithm"]], "setDigestAlgorithm": [["void", "String digestAlgorithm"]], "setMinimumKeySize": [["void", "long minimumKeySize"]], "getDigestAlgorithm": [["String"]], "getAcceptedSignatureAlgorithms": [["List<String>"]], "getSignatureAlgorithm": [["String"]], "setSignatureAlgorithm": [["void", "String signatureAlgorithm"]], "getKeySize": [["long"]], "setMaximumKeySize": [["void", "long maximumKeySize"]], "setKeySize": [["void", "long keySize"]], "getMaximumKeySize": [["long"]]}, "className": "SignatureProperties", "renamed": ["void", "function", "(", "List", "<", "String", ">", "arg0", ")", "{", "this", ".", "acceptedSignatureAlgorithms", "=", "arg0", ";", "}"], "nl": "Set the list of accepted signature algorithms. A request can contain a wst:SignatureAlgorithm uri to use to sign an issued token. The algorithm specified must be contained in this list. The default algorithms are RSA-SHA1.", "nlToks": ["Set", "the", "list", "of", "accepted", "signature", "algorithms", ".", "A", "request", "can", "contain", "a", "wst", ":", "SignatureAlgorithm", "uri", "to", "use", "to", "sign", "an", "issued", "token", ".", "The", "algorithm", "specified", "must", "be", "contained", "in", "this", "list", ".", "The", "default", "algorithms", "are", "RSA-SHA1", "."], "path": "primesign/cxf/tree/master/services/sts/sts-core/src/main/java/org/apache/cxf/sts/SignatureProperties.java", "idx": 1659}
{"memberVariables": {"instance": "LogEntryRequest"}, "code": ["void", "function", "(", ")", "{", "System", ".", "out", ".", "println", "(", "\"setResponseString\"", ")", ";", "String", "responseString", "=", "\"test\"", ";", "instance", ".", "setResponseString", "(", "responseString", ")", ";", "}"], "memberFunctions": {"testGetResponseStringCsv": [["void"]], "testGetTsSend": [["void"]], "testGetTsReceived": [["void"]], "testGetResponseString": [["void"]], "testGetFaultFlag": [["void"]], "testSetFaultFlag": [["void"]], "testSetDuration": [["void"]], "testGetErrorFlag": [["void"]], "testSetThreadNumber": [["void"]], "testSetTsSend": [["void"]], "testSetTsReceived": [["void"]], "testGetDuration": [["void"]], "testGetThreadNumber": [["void"]]}, "className": "LogEntryRequestTest", "renamed": ["void", "function", "(", ")", "{", "System", ".", "out", ".", "println", "(", "\"srini_string\"", ")", ";", "String", "loc0", "=", "\"srini_string\"", ";", "instance", ".", "setResponseString", "(", "loc0", ")", ";", "}"], "nl": "Test of setResponseString method, of class LogEntryRequest.", "nlToks": ["Test", "of", "setResponseString", "method", ",", "of", "class", "LogEntryRequest", "."], "path": "0xwindows/WS-Attacker/tree/master/plugins/Denial_of_Service/src/test/java/wsattacker/plugin/dos/dosExtension/logEntry/LogEntryRequestTest.java", "idx": 1660}
{"memberVariables": {"bus": "Bus", "BUILTIN_SCHEMA_LOCS=new HashMap<String,String>()": "Map<String,String>", "mtomEnabled": "boolean", "schemas": "Collection<DOMSource>", "hackAroundEmptyNamespaceIssue": "boolean", "namespaceMap": "Map<String,String>", "mtomThreshold": "int", "contextualNamespaceMap": "Map<String,String>"}, "code": ["Map", "<", "String", ",", "String", ">", "function", "(", ")", "{", "return", "this", ".", "namespaceMap", ";", "}"], "memberFunctions": {"getBus": [["Bus"]], "isMtomEnabled": [["boolean"]], "getContextualNamespaceMap": [["Map<String,String>"]], "updateSchemaLocation": [["void", "Element e"]], "setNamespaceMap": [["void", "Map<String,String> namespaceMap"]], "setMtomThreshold": [["void", "int threshold"]], "getNamespaceMap": [["Map<String,String>"]], "checkNamespaceMap": [["void", "Map<String,String> namespaceMap"]], "addSchemaDocument": [["XmlSchema", "ServiceInfo serviceInfo", "SchemaCollection col", "Document d", "String systemId"], ["XmlSchema", "ServiceInfo serviceInfo", "SchemaCollection col", "Document d", "String systemId", "Collection<String> ids"]], "setMtomEnabled": [["void", "boolean enabled"]], "getSchemas": [["Collection<DOMSource>"]], "setSchemas": [["void", "Collection<DOMSource> schemas"]], "doEmptyNamespaceHack": [["Document", "Document d", "boolean alreadyWritable"]], "copy": [["Document", "Document doc"]], "setContextualNamespaceMap": [["void", "Map<String,String> contextualNamespaceMap"]], "getMtomThreshold": [["int"]], "setBus": [["void", "Bus bus"]]}, "className": "AbstractDataBinding", "renamed": ["Map", "<", "String", ",", "String", ">", "function", "(", ")", "{", "return", "this", ".", "namespaceMap", ";", "}"], "nl": "Provide explicit mappings to ReflectionServiceFactory.  {@inheritDoc}", "nlToks": ["Provide", "explicit", "mappings", "to", "ReflectionServiceFactory", ".", "-LCB-", "@inheritDoc", "-RCB-"], "path": "primesign/cxf/tree/master/core/src/main/java/org/apache/cxf/databinding/AbstractDataBinding.java", "idx": 1661}
{"memberVariables": {"EXAMPLE=\"$GPRMC,120044.567,A,6011.552,N,02501.941,E,000.0,360.0,160705,006.1,E,A*0B\"": "String", "rmc": "RMCParser", "empty": "RMCParser"}, "code": ["void", "function", "(", ")", "{", "assertEquals", "(", "FaaMode", ".", "AUTOMATIC", ",", "rmc", ".", "getMode", "(", ")", ")", ";", "}"], "memberFunctions": {"testSetFaaModeWhenOmitted": [["void"]], "testSetDirectionOfVariationWithInvalidDirection": [["void"]], "testGetCorrectedCourse": [["void"]], "testGetDataStatus": [["void"]], "testConstructor": [["void"]], "testGetTime": [["void"]], "testSetCourse": [["void"]], "testSetFaaMode": [["void"]], "testSetVariation": [["void"]], "setUp": [["void"]], "testGetMonth": [["void"]], "testGetCourse": [["void"]], "testSetDate": [["void"]], "testGetYear": [["void"]], "testSetDataStatus": [["void"]], "testGetDirectionOfVariation": [["void"]], "testGetDate": [["void"]], "testGetMagneticVariation": [["void"]], "testSetPosition": [["void"]], "testGetPosition": [["void"]], "testSetDirectionOfVariation": [["void"]], "testSetTime": [["void"]], "testGetDay": [["void"]], "testGetSpeed": [["void"]], "testSetSpeed": [["void"]]}, "className": "RMCTest", "renamed": ["void", "function", "(", ")", "{", "assertEquals", "(", "FaaMode", ".", "AUTOMATIC", ",", "rmc", ".", "getMode", "(", ")", ")", ";", "}"], "nl": "Test method for  {@link net.sf.marineapi.nmea.parser.RMCParser#getMode()}.", "nlToks": ["Test", "method", "for", "-LCB-", "@link", "net.sf.marineapi.nmea.parser.RMCParser", "#getMode", "-LRB-", "-RRB-", "-RCB-", "."], "path": "pkoziol/marine-api/tree/master/src/test/java/net/sf/marineapi/nmea/parser/RMCTest.java", "idx": 1663}
{"memberVariables": {"EXAMPLE=\"$GPRMB,A,0.00,R,,RUSKI,5536.200,N,01436.500,E,432.3,234.9,,V*58\"": "String", "rmb": "RMBSentence", "empty": "RMBSentence"}, "code": ["void", "function", "(", ")", "{", "assertEquals", "(", "Direction", ".", "RIGHT", ",", "rmb", ".", "getSteerTo", "(", ")", ")", ";", "}"], "memberFunctions": {"testGetVelocity": [["void"]], "testGetCrossTrackError": [["void"]], "testArrivalStatus": [["void"]], "testSetDestination": [["void"]], "testSetBearing": [["void"]], "testSetSteerToWithNull": [["void"]], "testSetOriginId": [["void"]], "testSetStatus": [["void"]], "testConstructor": [["void"]], "testGetBearing": [["void"]], "testSetBearingWithNegativeValue": [["void"]], "testSetSteerTo": [["void"]], "testSetVelocity": [["void"]], "testGetOriginId": [["void"]], "testSetVelocityWithNegativeValue": [["void"]], "setUp": [["void"]], "testGetStatus": [["void"]], "testSetBearingWithValueGreaterThanAllowed": [["void"]], "testGetRange": [["void"]], "testSetRange": [["void"]], "testGetDestination": [["void"]], "testSetCrossTrackError": [["void"]]}, "className": "RMBTest", "renamed": ["void", "function", "(", ")", "{", "assertEquals", "(", "Direction", ".", "RIGHT", ",", "rmb", ".", "getSteerTo", "(", ")", ")", ";", "}"], "nl": "Test method for {@link net.sf.marineapi.nmea.parser.RMBParser#getSteerTo()}.", "nlToks": ["Test", "method", "for", "-LCB-", "@link", "net.sf.marineapi.nmea.parser.RMBParser", "#getSteerTo", "-LRB-", "-RRB-", "-RCB-", "."], "path": "pkoziol/marine-api/tree/master/src/test/java/net/sf/marineapi/nmea/parser/RMBTest.java", "idx": 1664}
{"memberVariables": {"p": "Plan", "ii": "IndexInfo", "val": "Constant"}, "code": ["int", "function", "(", ")", "{", "return", "ii", ".", "recordsOutput", "(", ")", ";", "}"], "memberFunctions": {"schema": [["Schema"]], "blocksAccessed": [["int"]], "distinctValues": [["int", "String fldname"]], "open": [["Scan"]]}, "className": "IndexSelectPlan", "renamed": ["int", "function", "(", ")", "{", "return", "ii", ".", "recordsOutput", "(", ")", ";", "}"], "nl": "Estimates the number of output records in the index selection, which is the same as the number of search key values for the index.", "nlToks": ["Estimates", "the", "number", "of", "output", "records", "in", "the", "index", "selection", ",", "which", "is", "the", "same", "as", "the", "number", "of", "search", "key", "values", "for", "the", "index", "."], "path": "prerit2803/DBMSProject2/tree/master/simpledb/index/query/IndexSelectPlan.java", "idx": 1665}
{"memberVariables": {"msg": "String"}, "code": ["String", "function", "(", ")", "{", "return", "msg", ";", "}"], "memberFunctions": {"setMsg": [["void", "final String newMsg"]]}, "className": "SayHi", "renamed": ["String", "function", "(", ")", "{", "return", "msg", ";", "}"], "nl": "Get the Msg value.", "nlToks": ["Get", "the", "Msg", "value", "."], "path": "primesign/cxf/tree/master/tools/javato/ws/src/test/java/org/apache/cxf/tools/fortest/cxf4877/SayHi.java", "idx": 1666}
{"memberVariables": {"DEFAULT_LOCK_TIMEOUT=\"oozie.command.default.lock.timeout\"": "String", "LOG=XLog.getLog(XCommand.class)": "XLog", "dryrun=false": "boolean", "logInfo": "XLog.Info", "priority": "int", "type": "String", "commandQueue": "Map<Long,List<XCommand<?>>>", "used=false": "boolean", "name": "String", "createdTime": "long", "lock": "MemoryLocks.LockToken", "INSTRUMENTATION_GROUP=\"commands\"": "String", "instrumentation": "Instrumentation"}, "code": ["int", "function", "(", ")", "{", "return", "priority", ";", "}"], "memberFunctions": {"loadState": [["void"]], "getName": [["String"]], "getLockTimeOut": [["long"]], "releaseLock": [["void"]], "eagerVerifyPrecondition": [["void"]], "execute": [["T"]], "resetUsed": [["void"]], "getEntityKey": [["String"]], "getInstrumentation": [["Instrumentation"]], "call": [["T"]], "verifyPrecondition": [["void"]], "isLockRequired": [["boolean"]], "getType": [["String"]], "acquireLock": [["void"]], "eagerLoadState": [["void"]], "getCreatedTime": [["long"]], "queue": [["void", "XCommand<?> command"], ["void", "XCommand<?> command", "long msDelay"]]}, "className": "XCommand", "renamed": ["int", "function", "(", ")", "{", "return", "priority", ";", "}"], "nl": "Return the priority of the command.", "nlToks": ["Return", "the", "priority", "of", "the", "command", "."], "path": "pingpangkuangmo/oozie/tree/master/core/src/main/java/org/apache/oozie/command/XCommand.java", "idx": 1667}
{"memberVariables": {"NS_PREFIX_PREFIX=\"ns\"": "String", "stack=new ArrayList<List<NSDecl>>()": "List<List<NSDecl>>", "top": "List<NSDecl>", "size": "int", "nsPrefixCount=1": "int"}, "code": ["String", "function", "(", "String", "uri", ")", "{", "String", "uniquePrefix", "=", "getPrefix", "(", "uri", ")", ";", "if", "(", "uniquePrefix", "==", "null", ")", "{", "do", "{", "uniquePrefix", "=", "NS_PREFIX_PREFIX", "+", "nsPrefixCount", "++", ";", "}", "while", "(", "getURI", "(", "uniquePrefix", ")", "!=", "null", ")", ";", "add", "(", "uniquePrefix", ",", "uri", ")", ";", "}", "return", "uniquePrefix", ";", "}"], "memberFunctions": {"pop": [["void"]], "getPrefix": [["String", "String uri"]], "push": [["void"]], "getURI": [["String", "String prefix"]]}, "className": "NSStack", "renamed": ["String", "function", "(", "String", "arg0", ")", "{", "String", "loc0", "=", "getPrefix", "(", "arg0", ")", ";", "if", "(", "loc0", "==", "null", ")", "{", "do", "{", "loc0", "=", "NS_PREFIX_PREFIX", "+", "nsPrefixCount", "++", ";", "}", "while", "(", "getURI", "(", "loc0", ")", "!=", "null", ")", ";", "add", "(", "loc0", ",", "arg0", ")", ";", "}", "return", "loc0", ";", "}"], "nl": "Add a new declaration to the current scope using a unique prefix and return the prefix. This is useful when one just wants to add a decl and doesn't want to have to deal with creating unique prefixes. If the namespace name is already declared and in scope, then the previously declared prefix is returned.", "nlToks": ["Add", "a", "new", "declaration", "to", "the", "current", "scope", "using", "a", "unique", "prefix", "and", "return", "the", "prefix", ".", "This", "is", "useful", "when", "one", "just", "wants", "to", "add", "a", "decl", "and", "does", "n't", "want", "to", "have", "to", "deal", "with", "creating", "unique", "prefixes", ".", "If", "the", "namespace", "name", "is", "already", "declared", "and", "in", "scope", ",", "then", "the", "previously", "declared", "prefix", "is", "returned", "."], "path": "primesign/cxf/tree/master/core/src/main/java/org/apache/cxf/helpers/NSStack.java", "idx": 1670}
{"memberVariables": {"substClassTypeCache": "Map<ClassType,ClassType>", "cache": "Map<CacheTypeWrapper,Type>", "t": "Type", "subst": "Map<Formal,Actual>", "readObjectVersionUID=1L": "long", "serialVersionUID=SerialVersionUID.generate()": "long", "writeObjectVersionUID=1L": "long", "ts": "ParamTypeSystem<Formal,Actual>"}, "code": ["Actual", "function", "(", "Actual", "value", ")", "{", "return", "value", ";", "}"], "memberFunctions": {"cachePut": [["void", "Type t", "Type cached"]], "substClassTypeImpl": [["ClassType", "ClassType t"]], "substMethod": [["T", "T mi"]], "typeWrapper": [["CacheTypeWrapper", "Type t"]], "substConstructorList": [["List<T>", "List<T> list"]], "transform": [["T", "Type o"], ["T", "T o"], ["T", "T o"], ["T", "T o"]], "substitutions": [["Map<Formal,Actual>"]], "substConstructor": [["T", "T ci"]], "hashCode": [["int"], ["int"]], "substClassType": [["ClassType", "ClassType t"]], "cacheTypeEquality": [["boolean", "Type t1", "Type t2"]], "substContainer": [["ReferenceType", "MemberInstance mi"]], "substMethodList": [["List<T>", "List<T> list"]], "cacheGet": [["Type", "Type t"]], "substTypeList": [["List<T>", "List<? extends Type> list"]], "writeObject": [["void", "java.io.ObjectOutputStream out"]], "substType": [["Type", "Type t"]], "readObject": [["void", "java.io.ObjectInputStream in"]], "entries": [["Iterator<Entry<Formal,Actual>>"]], "typeSystem": [["ParamTypeSystem<Formal,Actual>"]], "substPClass": [["PClass<Formal,Actual>", "PClass<Formal,Actual> pclazz"]], "equals": [["boolean", "Object o"], ["boolean", "Object o"]], "substFieldList": [["List<T>", "List<T> list"]], "uncachedSubstType": [["Type", "Type t"]], "is_entry": [["Iterable<Entry<Formal,Actual>>"]], "toString": [["String"], ["String"]], "substField": [["T", "T fi"]]}, "className": "Subst_c", "renamed": ["Actual", "function", "(", "Actual", "arg0", ")", "{", "return", "arg0", ";", "}"], "nl": "When adding a new substitution A-&gt;B to the map, we need to check if  there are already any existing substitutions, say C-&gt;A, and if so, replace them appropriately, in this case with C-&gt;B. This method allows subclasses to perform substitution on a value in the substitution map (B in the  example above). Subclasses may need to override this if the keys and values are not the same object.", "nlToks": ["When", "adding", "a", "new", "substitution", "A", "-", ">", "B", "to", "the", "map", ",", "we", "need", "to", "check", "if", "there", "are", "already", "any", "existing", "substitutions", ",", "say", "C", "-", ">", "A", ",", "and", "if", "so", ",", "replace", "them", "appropriately", ",", "in", "this", "case", "with", "C", "-", ">", "B", ".", "This", "method", "allows", "subclasses", "to", "perform", "substitution", "on", "a", "value", "in", "the", "substitution", "map", "-LRB-", "B", "in", "the", "example", "above", "-RRB-", ".", "Subclasses", "may", "need", "to", "override", "this", "if", "the", "keys", "and", "values", "are", "not", "the", "same", "object", "."], "path": "polyglot-compiler/polyglot/tree/master/src/polyglot/ext/param/types/Subst_c.java", "idx": 1672}
{"memberVariables": {}, "code": ["BrowseOffersResponse", ".", "Return", ".", "OfferData", ".", "OfferMedia", ".", "OfferImage", ".", "Entry", ".", "Value", "function", "(", ")", "{", "return", "new", "BrowseOffersResponse", ".", "Return", ".", "OfferData", ".", "OfferMedia", ".", "OfferImage", ".", "Entry", ".", "Value", "(", ")", ";", "}"], "memberFunctions": {"createBrowseOffersResponseReturnOfferDataSeo": [["BrowseOffersResponse.Return.OfferData.Seo"]], "createBrowseOffersResponseReturnOfferDataGeoRegionCountryState": [["BrowseOffersResponse.Return.OfferData.Geo.Region.Country.State"]], "createBrowseOffersResponseReturnOfferDataOfferMedia": [["BrowseOffersResponse.Return.OfferData.OfferMedia"]], "createBrowseOffersResponse": [["BrowseOffersResponse"]], "createBrowseOffersResponseReturnOfferDataGeoRegionCountry": [["BrowseOffersResponse.Return.OfferData.Geo.Region.Country"]], "createBrowseOffersResponseReturn": [["BrowseOffersResponse.Return"]], "createBrowseOffersResponseReturnOfferData": [["BrowseOffersResponse.Return.OfferData"]], "createBrowseOffersResponseReturnOfferDataMerchant": [["BrowseOffersResponse.Return.OfferData.Merchant"]], "createBrowseOffersResponseReturnOfferDataOfferMediaOfferImageEntry": [["BrowseOffersResponse.Return.OfferData.OfferMedia.OfferImage.Entry"]], "createBrowseOffersResponseReturnOfferDataOfferMediaOfferImage": [["BrowseOffersResponse.Return.OfferData.OfferMedia.OfferImage"]], "createBrowseOffersResponseReturnOfferDataOfferMediaOfferImageEntryValueItem": [["BrowseOffersResponse.Return.OfferData.OfferMedia.OfferImage.Entry.Value.Item"]], "createBrowseOffersResponseReturnOfferDataGeo": [["BrowseOffersResponse.Return.OfferData.Geo"]], "createBrowseOffersResponseReturnOfferDataGeoRegion": [["BrowseOffersResponse.Return.OfferData.Geo.Region"]]}, "className": "ObjectFactory", "renamed": ["BrowseOffersResponse", ".", "Return", ".", "OfferData", ".", "OfferMedia", ".", "OfferImage", ".", "Entry", ".", "Value", "function", "(", ")", "{", "return", "new", "BrowseOffersResponse", ".", "Return", ".", "OfferData", ".", "OfferMedia", ".", "OfferImage", ".", "Entry", ".", "Value", "(", ")", ";", "}"], "nl": "Create an instance of  {@link BrowseOffersResponse.Return.OfferData.OfferMedia.OfferImage.Entry.Value }", "nlToks": ["Create", "an", "instance", "of", "-LCB-", "@link", "BrowseOffersResponse.Return.OfferData.OfferMedia.OfferImage.Entry.Value", "-RCB-"], "path": "priyankgandhi/mastercard/tree/master/eop-openapi-client/src/main/java/com/eop/api/search/gen/ObjectFactory.java", "idx": 1673}
{"memberVariables": {"rte": "RTESentence", "EXAMPLE=\"$GPRTE,1,1,c,0,MELIN,RUSKI,KNUDAN*25\"": "String", "empty": "RTESentence"}, "code": ["void", "function", "(", ")", "{", "try", "{", "rte", ".", "setSentenceIndex", "(", "-", "1", ")", ";", "fail", "(", "\"Did not throw exception\"", ")", ";", "}", "catch", "(", "IllegalArgumentException", "e", ")", "{", "assertTrue", "(", "e", ".", "getMessage", "(", ")", ".", "contains", "(", "\"cannot be negative\"", ")", ")", ";", "}", "catch", "(", "Exception", "e", ")", "{", "fail", "(", "e", ".", "getMessage", "(", ")", ")", ";", "}", "}"], "memberFunctions": {"testGetWaypointIds": [["void"]], "testIsActiveRoute": [["void"]], "testIsFirst": [["void"]], "testGetSentenceIndex": [["void"]], "testConstructor": [["void"]], "testSetSentenceCountWithNegativeValue": [["void"]], "testAddWaypointId": [["void"]], "testGetSentenceCount": [["void"]], "testSetWaypointIds": [["void"]], "testSetRouteId": [["void"]], "testIsWorkingRoute": [["void"]], "testSetSentenceCount": [["void"]], "testGetRouteId": [["void"]], "testSetRouteTypeActive": [["void"]], "setUp": [["void"]], "testIsLast": [["void"]], "testGetWaypointCount": [["void"]], "testSetSentenceIndex": [["void"]], "testSetRouteTypeWorking": [["void"]]}, "className": "RTETest", "renamed": ["void", "function", "(", ")", "{", "try", "{", "rte", ".", "setSentenceIndex", "(", "-", "1", ")", ";", "fail", "(", "\"srini_string\"", ")", ";", "}", "catch", "(", "IllegalArgumentException", "loc0", ")", "{", "assertTrue", "(", "loc0", ".", "getMessage", "(", ")", ".", "contains", "(", "\"srini_string\"", ")", ")", ";", "}", "catch", "(", "Exception", "loc0", ")", "{", "fail", "(", "loc0", ".", "getMessage", "(", ")", ")", ";", "}", "}"], "nl": "Test method for {@link net.sf.marineapi.nmea.parser.RTEParser#setSentenceIndex(int)}.", "nlToks": ["Test", "method", "for", "-LCB-", "@link", "net.sf.marineapi.nmea.parser.RTEParser", "#setSentenceIndex", "-LRB-", "int", "-RRB-", "-RCB-", "."], "path": "pkoziol/marine-api/tree/master/src/test/java/net/sf/marineapi/nmea/parser/RTETest.java", "idx": 1675}
{"memberVariables": {"step=0": "int", "panels=new ArrayList<JPanel>()": "List<JPanel>", "started=false": "boolean", "finished=false": "boolean", "item=null": "WizardItem"}, "code": ["void", "function", "(", ")", "{", "step", "--", ";", "if", "(", "step", "<", "0", ")", "step", "=", "0", ";", "undoAction", "(", "step", ")", ";", "if", "(", "item", "!=", "null", ")", "item", ".", "changed", "(", ")", ";", "}"], "memberFunctions": {"next": [["void"]], "removePanel": [["void", "int s"]], "getCurrentPanel": [["JPanel"]], "canGoBack": [["boolean"]], "canFinish": [["boolean"]], "getStep": [["int"]], "makePanel": [["JPanel", "int newStep"]], "getNumSteps": [["int"]], "isStarted": [["boolean"]], "setToDoItem": [["void", "WizardItem i"]], "isFinished": [["boolean"]], "undoAction": [["void", "int oldStep"], ["void"]], "getProgress": [["int"]], "getToDoItem": [["WizardItem"]], "canGoNext": [["boolean"]], "finish": [["void"]], "getPanel": [["JPanel", "int s"]], "doAction": [["void", "int oldStep"], ["void"]]}, "className": "Wizard", "renamed": ["void", "function", "(", ")", "{", "step", "--", ";", "if", "(", "step", "<", "0", ")", "step", "=", "0", ";", "undoAction", "(", "step", ")", ";", "if", "(", "item", "!=", "null", ")", "item", ".", "changed", "(", ")", ";", "}"], "nl": "Step back.", "nlToks": ["Step", "back", "."], "path": "pichiliani/CoArgoUML/tree/master/v0.24/fonte/src/argouml-app/src/org/argouml/cognitive/critics/Wizard.java", "idx": 1676}
{"memberVariables": {"ACTION_MASK=0xff": "int", "IMPL": "MotionEventVersionImpl", "ACTION_POINTER_INDEX_SHIFT=8": "int", "ACTION_POINTER_INDEX_MASK=0xff00": "int", "ACTION_HOVER_MOVE=7": "int", "ACTION_POINTER_DOWN=5": "int", "ACTION_POINTER_UP=6": "int", "ACTION_SCROLL=8": "int"}, "code": ["float", "function", "(", "MotionEvent", "event", ",", "int", "pointerIndex", ")", "{", "return", "IMPL", ".", "getX", "(", "event", ",", "pointerIndex", ")", ";", "}"], "memberFunctions": {"getY": [["float", "MotionEvent event", "int pointerIndex"], ["float", "MotionEvent event", "int pointerIndex"], ["float", "MotionEvent event", "int pointerIndex"], ["float", "MotionEvent event", "int pointerIndex"]], "findPointerIndex": [["int", "MotionEvent event", "int pointerId"], ["int", "MotionEvent event", "int pointerId"], ["int", "MotionEvent event", "int pointerId"], ["int", "MotionEvent event", "int pointerId"]], "getPointerId": [["int", "MotionEvent event", "int pointerIndex"], ["int", "MotionEvent event", "int pointerIndex"], ["int", "MotionEvent event", "int pointerIndex"], ["int", "MotionEvent event", "int pointerIndex"]], "getActionIndex": [["int", "MotionEvent event"]], "getActionMasked": [["int", "MotionEvent event"]]}, "className": "MotionEventCompat", "renamed": ["float", "function", "(", "MotionEvent", "arg0", ",", "int", "arg1", ")", "{", "return", "IMPL", ".", "getX", "(", "arg0", ",", "arg1", ")", ";", "}"], "nl": "Call  {@link MotionEvent#getX(int)}. If running on a pre- {@android.os.Build.VERSION_CODES #HONEYCOMB} device,{@link IndexOutOfBoundsException} is thrown.", "nlToks": ["Call", "-LCB-", "@link", "MotionEvent", "#getX", "-LRB-", "int", "-RRB-", "-RCB-", ".", "If", "running", "on", "a", "pre", "-", "-LCB-", "@android", ".", "os.Build.VERSION", "_", "CODES", "#HONEYCOMB", "-RCB-", "device", ",", "-LCB-", "@link", "IndexOutOfBoundsException", "-RCB-", "is", "thrown", "."], "path": "prateeka/AndroidDev/tree/master/SherlockActionBar/src/android/support/v4/view/MotionEventCompat.java", "idx": 1677}
{"memberVariables": {"mManagerView": "BlockMetadataManagerView", "mDir": "StorageDir", "mBlocksToMoveOutSize=0L": "long", "mBlocksToMoveInSize=0L": "long", "mTierView": "StorageTierView", "mBlocksToMoveIn=new HashSet<>()": "Set<Long>", "mBlocksToMoveOut=new HashSet<>()": "Set<Long>"}, "code": ["long", "function", "(", ")", "{", "return", "mDir", ".", "getCommittedBytes", "(", ")", ";", "}"], "memberFunctions": {"getEvitableBytes": [["long"]], "getParentTierView": [["StorageTierView"]], "isMarkedToMoveOut": [["boolean", "long blockId"]], "markBlockMoveIn": [["void", "long blockId", "long blockSize"]], "createTempBlockMeta": [["TempBlockMeta", "long sessionId", "long blockId", "long initialBlockSize"]], "clearBlockMarks": [["void"]], "getDirViewIndex": [["int"]], "getEvictableBlocks": [["List<BlockMeta>"]], "getCapacityBytes": [["long"]], "getAvailableBytes": [["long"]], "toBlockStoreLocation": [["BlockStoreLocation"]], "markBlockMoveOut": [["void", "long blockId", "long blockSize"]]}, "className": "StorageDirView", "renamed": ["long", "function", "(", ")", "{", "return", "mDir", ".", "getCommittedBytes", "(", ")", ";", "}"], "nl": "Gets committed bytes for this dir. This includes all blocks, locked, pinned, committed etc.", "nlToks": ["Gets", "committed", "bytes", "for", "this", "dir", ".", "This", "includes", "all", "blocks", ",", "locked", ",", "pinned", ",", "committed", "etc.", "."], "path": "poemlin/alluxio/tree/master/core/server/src/main/java/alluxio/worker/block/meta/StorageDirView.java", "idx": 1678}
{"memberVariables": {}, "code": ["void", "function", "(", ")", "{", "long", "len", "=", "new", "Random", "(", ")", ".", "nextLong", "(", ")", ";", "CompleteFileOptions", "options", "=", "CompleteFileOptions", ".", "defaults", "(", ")", ";", "options", ".", "setUfsLength", "(", "len", ")", ";", "CompleteFileTOptions", "thriftOptions", "=", "options", ".", "toThrift", "(", ")", ";", "Assert", ".", "assertEquals", "(", "len", ",", "thriftOptions", ".", "getUfsLength", "(", ")", ")", ";", "}"], "memberFunctions": {"defaults": [["void"]], "fields": [["void"]], "equalsTest": [["void"]]}, "className": "CompleteFileOptionsTest", "renamed": ["void", "function", "(", ")", "{", "long", "loc0", "=", "new", "Random", "(", ")", ".", "nextLong", "(", ")", ";", "CompleteFileOptions", "loc1", "=", "CompleteFileOptions", ".", "defaults", "(", ")", ";", "loc1", ".", "setUfsLength", "(", "loc0", ")", ";", "CompleteFileTOptions", "loc2", "=", "loc1", ".", "toThrift", "(", ")", ";", "Assert", ".", "assertEquals", "(", "loc0", ",", "loc2", ".", "getUfsLength", "(", ")", ")", ";", "}"], "nl": "Tests conversion to thrift representation.", "nlToks": ["Tests", "conversion", "to", "thrift", "representation", "."], "path": "poemlin/alluxio/tree/master/core/client/src/test/java/alluxio/client/file/options/CompleteFileOptionsTest.java", "idx": 1679}
{"memberVariables": {"primitiveWrapperTypeMap=new HashMap<Class<?>,Class<?>>(8)": "Map<Class<?>,Class<?>>", "ARRAY_SUFFIX=\"[]\"": "String", "INTERNAL_ARRAY_PREFIX=\"[L\"": "String", "primitiveTypeNameMap=new HashMap<String,Class<?>>(16)": "Map<String,Class<?>>"}, "code": ["ClassLoader", "function", "(", ")", "{", "return", "getClassLoader", "(", "ClassHelper", ".", "class", ")", ";", "}"], "memberFunctions": {"getCallerClassLoader": [["ClassLoader", "Class<?> caller"]], "resolvePrimitiveClassName": [["Class<?>", "String name"]], "toShortString": [["String", "Object obj"]], "forNameWithThreadContextClassLoader": [["Class<?>", "String name"]], "forNameWithCallerClassLoader": [["Class<?>", "String name", "Class<?> caller"]], "forName": [["Class<?>", "String name"], ["Class<?>", "String name", "ClassLoader classLoader"]]}, "className": "ClassHelper", "renamed": ["ClassLoader", "function", "(", ")", "{", "return", "getClassLoader", "(", "ClassHelper", ".", "class", ")", ";", "}"], "nl": "Return the default ClassLoader to use: typically the thread context ClassLoader, if available; the ClassLoader that loaded the ClassUtils class will be used as fallback.  Call this method if you intend to use the thread context ClassLoader in a scenario where you absolutely need a non-null ClassLoader reference: for example, for class path resource loading (but not necessarily for Class.forName, which accepts a null ClassLoader reference as well).", "nlToks": ["Return", "the", "default", "ClassLoader", "to", "use", ":", "typically", "the", "thread", "context", "ClassLoader", ",", "if", "available", ";", "the", "ClassLoader", "that", "loaded", "the", "ClassUtils", "class", "will", "be", "used", "as", "fallback", ".", "Call", "this", "method", "if", "you", "intend", "to", "use", "the", "thread", "context", "ClassLoader", "in", "a", "scenario", "where", "you", "absolutely", "need", "a", "non-null", "ClassLoader", "reference", ":", "for", "example", ",", "for", "class", "path", "resource", "loading", "-LRB-", "but", "not", "necessarily", "for", "Class.forName", ",", "which", "accepts", "a", "null", "ClassLoader", "reference", "as", "well", "-RRB-", "."], "path": "acupple/dubbo/tree/master/dubbo-common/src/main/java/com/alibaba/dubbo/common/utils/ClassHelper.java", "idx": 1680}
{"memberVariables": {"WRAPPER_MAP=new ConcurrentHashMap<Class<?>,Wrapper>()": "Map<Class<?>,Wrapper>", "OBJECT_WRAPPER=new Wrapper(){\n  public String[] getMethodNames(){\n    return OBJECT_METHODS;\n  }\n  public String[] getDeclaredMethodNames(){\n    return OBJECT_METHODS;\n  }\n  public String[] getPropertyNames(){\n    return EMPTY_STRING_ARRAY;\n  }\n  public Class<?> getPropertyType(  String pn){\n    return null;\n  }\n  public Object getPropertyValue(  Object instance,  String pn) throws NoSuchPropertyException {\n    throw new NoSuchPropertyException(\"Property [\" + pn + \"] not found.\");\n  }\n  public void setPropertyValue(  Object instance,  String pn,  Object pv) throws NoSuchPropertyException {\n    throw new NoSuchPropertyException(\"Property [\" + pn + \"] not found.\");\n  }\n  public boolean hasProperty(  String name){\n    return false;\n  }\n  public Object invokeMethod(  Object instance,  String mn,  Class<?>[] types,  Object[] args) throws NoSuchMethodException {\n    if (\"getClass\".equals(mn))     return instance.getClass();\n    if (\"hashCode\".equals(mn))     return instance.hashCode();\n    if (\"toString\".equals(mn))     return instance.toString();\n    if (\"equals\".equals(mn)) {\n      if (args.length == 1)       return instance.equals(args[0]);\n      throw new IllegalArgumentException(\"Invoke method [\" + mn + \"] argument number error.\");\n    }\n    throw new NoSuchMethodException(\"Method [\" + mn + \"] not found.\");\n  }\n}\n": "Wrapper", "EMPTY_STRING_ARRAY=new String[0]": "String[]", "WRAPPER_CLASS_COUNTER=new AtomicLong(0)": "AtomicLong", "OBJECT_METHODS=new String[]{\"getClass\",\"hashCode\",\"toString\",\"equals\"}": "String[]"}, "code": ["Wrapper", "function", "(", "Class", "<", "?", ">", "c", ")", "{", "while", "(", "ClassGenerator", ".", "isDynamicClass", "(", "c", ")", ")", "c", "=", "c", ".", "getSuperclass", "(", ")", ";", "if", "(", "c", "==", "Object", ".", "class", ")", "return", "OBJECT_WRAPPER", ";", "Wrapper", "ret", "=", "WRAPPER_MAP", ".", "get", "(", "c", ")", ";", "if", "(", "ret", "==", "null", ")", "{", "ret", "=", "makeWrapper", "(", "c", ")", ";", "WRAPPER_MAP", ".", "put", "(", "c", ",", "ret", ")", ";", "}", "return", "ret", ";", "}"], "memberFunctions": {"hasMethods": [["boolean", "Method[] methods"]], "getDeclaredMethodNames": [["String[]"], ["String[]"]], "setPropertyValues": [["void", "Object instance", "String[] pns", "Object[] pvs"]], "getPropertyValues": [["Object[]", "Object instance", "String[] pns"]], "getMethodNames": [["String[]"], ["String[]"]], "hasProperty": [["boolean", "String name"], ["boolean", "String name"]], "hasMethod": [["boolean", "String name"]], "getPropertyType": [["Class<?>", "String pn"], ["Class<?>", "String pn"]], "args": [["String", "Class<?>[] cs", "String name"]], "makeWrapper": [["Wrapper", "Class<?> c"]], "getPropertyValue": [["Object", "Object instance", "String pn"], ["Object", "Object instance", "String pn"]], "propertyName": [["String", "String pn"]], "setPropertyValue": [["void", "Object instance", "String pn", "Object pv"], ["void", "Object instance", "String pn", "Object pv"]], "arg": [["String", "Class<?> cl", "String name"]], "getPropertyNames": [["String[]"], ["String[]"]], "invokeMethod": [["Object", "Object instance", "String mn", "Class<?>[] types", "Object[] args"], ["Object", "Object instance", "String mn", "Class<?>[] types", "Object[] args"]]}, "className": "Wrapper", "renamed": ["Wrapper", "function", "(", "Class", "<", "?", ">", "arg0", ")", "{", "while", "(", "ClassGenerator", ".", "isDynamicClass", "(", "arg0", ")", ")", "arg0", "=", "arg0", ".", "getSuperclass", "(", ")", ";", "if", "(", "arg0", "==", "Object", ".", "class", ")", "return", "OBJECT_WRAPPER", ";", "Wrapper", "loc0", "=", "WRAPPER_MAP", ".", "get", "(", "arg0", ")", ";", "if", "(", "loc0", "==", "null", ")", "{", "loc0", "=", "makeWrapper", "(", "arg0", ")", ";", "WRAPPER_MAP", ".", "put", "(", "arg0", ",", "loc0", ")", ";", "}", "return", "loc0", ";", "}"], "nl": "get wrapper.", "nlToks": ["get", "wrapper", "."], "path": "acupple/dubbo/tree/master/dubbo-common/src/main/java/com/alibaba/dubbo/common/bytecode/Wrapper.java", "idx": 1682}
{"memberVariables": {"p": "Plan", "schema=new Schema()": "Schema"}, "code": ["Scan", "function", "(", ")", "{", "Scan", "s", "=", "p", ".", "open", "(", ")", ";", "return", "new", "ProjectScan", "(", "s", ",", "schema", ".", "fields", "(", ")", ")", ";", "}"], "memberFunctions": {"schema": [["Schema"]], "blocksAccessed": [["int"]], "distinctValues": [["int", "String fldname"]], "recordsOutput": [["int"]]}, "className": "ProjectPlan", "renamed": ["Scan", "function", "(", ")", "{", "Scan", "loc0", "=", "p", ".", "open", "(", ")", ";", "return", "new", "ProjectScan", "(", "loc0", ",", "schema", ".", "fields", "(", ")", ")", ";", "}"], "nl": "Creates a project scan for this query.", "nlToks": ["Creates", "a", "project", "scan", "for", "this", "query", "."], "path": "prerit2803/DBMSProject2/tree/master/simpledb/query/ProjectPlan.java", "idx": 1683}
{"memberVariables": {"grado": "int", "coef": "int[]"}, "code": ["void", "function", "(", "int", "grado", ")", "{", "this", ".", "grado", "=", "grado", ";", "}"], "memberFunctions": {"igualA": [["boolean", "Polinomio pol2"]], "setCoeficientes": [["void", "int[] coef"]], "getGrado": [["int"]], "getCoeficiente": [["int", "int i"]], "toString": [["String"]], "setCoeficiente": [["void", "int cons", "int i"]], "getCoeficientes": [["int[]"]]}, "className": "Polinomio", "renamed": ["void", "function", "(", "int", "arg0", ")", "{", "this", ".", "grado", "=", "arg0", ";", "}"], "nl": "Asigna un nuevo grado al polonomio", "nlToks": ["Asigna", "un", "nuevo", "grado", "al", "polonomio"], "path": "pmy0v/Calculadora-GF/tree/master/src/Polinomio.java", "idx": 1684}
{"memberVariables": {"LOG=LoggerFactory.getLogger(Constants.LOGGER_TYPE)": "Logger"}, "code": ["Response", "function", "(", "RestUtils", ".", "RestCallable", "<", "T", ">", "callable", ")", "{", "try", "{", "return", "createResponse", "(", "callable", ".", "call", "(", ")", ")", ";", "}", "catch", "(", "Exception", "e", ")", "{", "LOG", ".", "error", "(", "\"Unexpected error invoking rest endpoint\"", ",", "e", ")", ";", "return", "createErrorResponse", "(", "e", ".", "getMessage", "(", ")", ")", ";", "}", "}"], "memberFunctions": {"createResponse": [["Response", "Object object"]], "createErrorResponse": [["Response", "String message"]]}, "className": "RestUtils", "renamed": ["Response", "function", "(", "RestUtils", ".", "RestCallable", "<", "T", ">", "arg0", ")", "{", "try", "{", "return", "createResponse", "(", "arg0", ".", "call", "(", ")", ")", ";", "}", "catch", "(", "Exception", "loc0", ")", "{", "LOG", ".", "error", "(", "\"srini_string\"", ",", "loc0", ")", ";", "return", "createErrorResponse", "(", "loc0", ".", "getMessage", "(", ")", ")", ";", "}", "}"], "nl": "Calls the given  {@link RestUtils.RestCallable} and handles any exceptions thrown.", "nlToks": ["Calls", "the", "given", "-LCB-", "@link", "RestUtils.RestCallable", "-RCB-", "and", "handles", "any", "exceptions", "thrown", "."], "path": "poemlin/alluxio/tree/master/core/server/src/main/java/alluxio/RestUtils.java", "idx": 1685}
{"memberVariables": {"instance": "Date", "cal": "GregorianCalendar"}, "code": ["void", "function", "(", ")", "{", "try", "{", "instance", ".", "setYear", "(", "10000", ")", ";", "fail", "(", "\"Did not throw IllegalArgumentException\"", ")", ";", "}", "catch", "(", "IllegalArgumentException", "e", ")", "{", "}", "}"], "memberFunctions": {"testConstructorWithString": [["void"]], "testSetMonth": [["void"]], "testSetYearThreeDigits": [["void"]], "testConstructor": [["void"]], "testToStringFourDigitYear": [["void"]], "testEqualsAfterInit": [["void"]], "testEqualsWrongType": [["void"]], "testSetYearTwoDigit": [["void"]], "testEqualsWhenChanged": [["void"]], "testToISO8601WithTime": [["void"]], "setUp": [["void"]], "testGetMonth": [["void"]], "testEqualsItself": [["void"]], "testSetYearNegative": [["void"]], "testConstructorWithValues": [["void"]], "testSetDayOutOfBounds": [["void"]], "testGetYear": [["void"]], "testToISO8601WithTimeAndZeroZone": [["void"]], "testToISO8601FourDigitYear": [["void"]], "testSetDay": [["void"]], "testSetYearFourDigit": [["void"]], "testToStringTwoDigitYear": [["void"]], "testToISO8601WithTimeAndPositiveOffset": [["void"]], "testToISO8601TwoDigitYear": [["void"]], "testToISO8601WithTimeAndNegativeOffset": [["void"]], "testGetDay": [["void"]], "testSetMonthOutOfBounds": [["void"]]}, "className": "DateTest", "renamed": ["void", "function", "(", ")", "{", "try", "{", "instance", ".", "setYear", "(", "10000", ")", ";", "fail", "(", "\"srini_string\"", ")", ";", "}", "catch", "(", "IllegalArgumentException", "loc1", ")", "{", "}", "}"], "nl": "Test method for  {@link net.sf.marineapi.nmea.util.Date#setYear(int)}.", "nlToks": ["Test", "method", "for", "-LCB-", "@link", "net.sf.marineapi.nmea.util.Date", "#setYear", "-LRB-", "int", "-RRB-", "-RCB-", "."], "path": "pkoziol/marine-api/tree/master/src/test/java/net/sf/marineapi/nmea/util/DateTest.java", "idx": 1687}
{"memberVariables": {"FORMAT=Pattern.compile(\"((\\\\w+\\\\.)+|\\\\.)((\\\\w+)(\\\\$\\\\w+)*)(#(\\\\w+)\\\\(((\\\\w+)(, \\\\w+)*)?\\\\))?\")": "Pattern", "packages=null": "String[]", "operation=null": "String", "classes=new String[1]": "String[]"}, "code": ["QualifiedName", "function", "(", "ASTConstructorDeclaration", "node", ")", "{", "ASTClassOrInterfaceDeclaration", "parent", "=", "node", ".", "getFirstParentOfType", "(", "ASTClassOrInterfaceDeclaration", ".", "class", ")", ";", "return", "makeOperationOf", "(", "parent", ".", "getQualifiedName", "(", ")", ",", "parent", ".", "getImage", "(", ")", ",", "node", ".", "getFirstDescendantOfType", "(", "ASTFormalParameters", ".", "class", ")", ")", ";", "}"], "memberFunctions": {"makeOuterClassOf": [["QualifiedName", "ASTClassOrInterfaceDeclaration node"]], "isClass": [["boolean"]], "parseName": [["QualifiedName", "String name"]], "getOperationName": [["String", "String methodName", "ASTFormalParameters params"]], "isOperation": [["boolean"]], "makeNestedClassOf": [["QualifiedName", "QualifiedName parent", "String className"]], "hashCode": [["int"]], "equals": [["boolean", "Object o"]], "getPackages": [["String[]"]], "getOperation": [["String"]], "toString": [["String"]], "getClasses": [["String[]"]], "makeClassOf": [["QualifiedName", "Class<?> clazz"]]}, "className": "QualifiedName", "renamed": ["QualifiedName", "function", "(", "ASTConstructorDeclaration", "arg0", ")", "{", "ASTClassOrInterfaceDeclaration", "loc0", "=", "arg0", ".", "getFirstParentOfType", "(", "ASTClassOrInterfaceDeclaration", ".", "class", ")", ";", "return", "makeOperationOf", "(", "loc0", ".", "getQualifiedName", "(", ")", ",", "loc0", ".", "getImage", "(", ")", ",", "arg0", ".", "getFirstDescendantOfType", "(", "ASTFormalParameters", ".", "class", ")", ")", ";", "}"], "nl": "Builds the qualified name of a constructor declaration.", "nlToks": ["Builds", "the", "qualified", "name", "of", "a", "constructor", "declaration", "."], "path": "adangel/pmd/tree/master/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/ast/QualifiedName.java", "idx": 1688}
{"memberVariables": {"log=LogFactory.getLog(OAuth2ServiceComponent.class)": "Log", "bundleContext": "BundleContext"}, "code": ["void", "function", "(", "ApplicationManagementService", "applicationMgtService", ")", "{", "if", "(", "log", ".", "isDebugEnabled", "(", ")", ")", "{", "log", ".", "debug", "(", "\"ApplicationManagementService unset in Identity OAuth2ServiceComponent bundle\"", ")", ";", "}", "OAuth2ServiceComponentHolder", ".", "setApplicationMgtService", "(", "null", ")", ";", "}"], "memberFunctions": {"setApplicationMgtService": [["void", "ApplicationManagementService applicationMgtService"]], "activate": [["void", "ComponentContext context"]]}, "className": "OAuth2ServiceComponent", "renamed": ["void", "function", "(", "ApplicationManagementService", "arg0", ")", "{", "if", "(", "log", ".", "isDebugEnabled", "(", ")", ")", "{", "log", ".", "debug", "(", "\"srini_string\"", ")", ";", "}", "OAuth2ServiceComponentHolder", ".", "setApplicationMgtService", "(", "null", ")", ";", "}"], "nl": "Unset Application management service implementation", "nlToks": ["Unset", "Application", "management", "service", "implementation"], "path": "harsha1979/carbon-identity/tree/master/components/oauth/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/internal/OAuth2ServiceComponent.java", "idx": 1690}
{"memberVariables": {}, "code": ["List", "<", "String", ">", "function", "(", "CertificateConstraintsType", "certConstraints", ")", "{", "if", "(", "certConstraints", "!=", "null", "&&", "certConstraints", ".", "isSetSubjectDNConstraints", "(", ")", ")", "{", "DNConstraintsType", "constraints", "=", "certConstraints", ".", "getSubjectDNConstraints", "(", ")", ";", "return", "constraints", ".", "getRegularExpression", "(", ")", ";", "}", "return", "java", ".", "util", ".", "Collections", ".", "emptyList", "(", ")", ";", "}"], "memberFunctions": {"getIssuerConstraints": [["List<String>", "CertificateConstraintsType certConstraints"]], "createCertConstraints": [["CertConstraints", "CertificateConstraintsType certConstraints"]], "getSubjectConstraintsCombinator": [["CertConstraints.Combinator", "CertificateConstraintsType certConstraints"]], "getIssuerConstraintsCombinator": [["CertConstraints.Combinator", "CertificateConstraintsType certConstraints"]]}, "className": "CertConstraintsJaxBUtils", "renamed": ["List", "<", "String", ">", "function", "(", "CertificateConstraintsType", "arg0", ")", "{", "if", "(", "arg0", "!=", "null", "&&", "arg0", ".", "isSetSubjectDNConstraints", "(", ")", ")", "{", "DNConstraintsType", "loc0", "=", "arg0", ".", "getSubjectDNConstraints", "(", ")", ";", "return", "loc0", ".", "getRegularExpression", "(", ")", ";", "}", "return", "java", ".", "util", ".", "Collections", ".", "emptyList", "(", ")", ";", "}"], "nl": "Get a List of Strings that corresponds to the subject regular expression constraints from a JAXB CertificateConstraintsType", "nlToks": ["Get", "a", "List", "of", "Strings", "that", "corresponds", "to", "the", "subject", "regular", "expression", "constraints", "from", "a", "JAXB", "CertificateConstraintsType"], "path": "primesign/cxf/tree/master/rt/transports/http/src/main/java/org/apache/cxf/transport/https/CertConstraintsJaxBUtils.java", "idx": 1691}
{"memberVariables": {"mockServerMessage=mock(ServerMessage.class)": "ServerMessage", "mockServerSession=mock(ServerSession.class)": "ServerSession", "testEventProperties": "HashMap<String,Object>", "MOCK_SESSION_ID=\"1234-5678-9012-3456\"": "String", "notificationController": "NotificationController"}, "code": ["void", "function", "(", ")", "{", "notificationController", ".", "deregisterUserSession", "(", "null", ",", "mockServerMessage", ")", ";", "}"], "memberFunctions": {"testHandleEventThrowsIllegalArgumentExceptionOnEmptyUser": [["void"]], "testHandleEventThrowsIllegalArgumentExceptionOnEmptyApplication": [["void"]], "testDeregisterUserSessionWithNullServerSessionIdThrowsException": [["void"]], "testHandleEventThrowsIllegalArgumentExceptionOnNullTitle": [["void"]], "testGetServerSessionByUserId": [["void"]], "tearDown": [["void"]], "testHandleEventThrowsIllegalArgumentExceptionOnEmptyTitle": [["void"]], "testDeletePersistentNotificationThrowsIllegalArgumentOnNullServerSession": [["void"]], "testDeregisterUserSessionRemovesUserFromKnownClients": [["void"]], "testHandleEventThrowsIllegalArgumentExceptionOnEmptyMessage": [["void"]], "testHandleEventThrowsIllegalArgumentExceptionOnNullApplication": [["void"]], "testDeletePersistentNotificationThrowsIllegalArgumentOnNullUserId": [["void"]], "testRegisterUserSessionWithNullServerSessionThrowsException": [["void"]], "testHandleEventThrowsIllegalArgumentExceptionOnNullUser": [["void"]], "testRegisterUserSession": [["void"]], "setUp": [["void"]], "testHandleEventThrowsIllegalArgumentExceptionOnNullTimestamp": [["void"]], "testRegisterUserSessionWithNullServerSessionIdThrowsException": [["void"]], "testHandleEventThrowsIllegalArgumentExceptionOnNullMessage": [["void"]]}, "className": "NotificationControllerTest", "renamed": ["void", "function", "(", ")", "{", "notificationController", ".", "deregisterUserSession", "(", "null", ",", "mockServerMessage", ")", ";", "}"], "nl": "Test method for {@link NotificationController#deregisterUserSession(ServerSession,ServerMessage)}Verifies that  {@code NullPointerException} is thrown when {@code ServerSession} is null.", "nlToks": ["Test", "method", "for", "-LCB-", "@link", "NotificationController", "#deregisterUserSession", "-LRB-", "ServerSession", ",", "ServerMessage", "-RRB-", "-RCB-", "Verifies", "that", "-LCB-", "@code", "NullPointerException", "-RCB-", "is", "thrown", "when", "-LCB-", "@code", "ServerSession", "-RCB-", "is", "null", "."], "path": "pklinef/ddf-ui/tree/master/search-ui/search-endpoint/src/test/java/org/codice/ddf/ui/searchui/query/controller/NotificationControllerTest.java", "idx": 1692}
{"memberVariables": {"game": "ShadowStruggles", "textures": "Array<Asset>", "sounds": "Array<Asset>", "rpgMaps": "Array<Asset>", "assetName": "String", "textureRegions": "Array<Asset>", "LOG=DataManager.class.getName()": "String", "assetType": "String"}, "code": ["TiledMap", "function", "(", "String", "mapName", ",", "String", "resourceType", ")", "{", "TiledMap", "map", "=", "null", ";", "if", "(", "this", ".", "rpgMaps", "!=", "null", "&&", "FileMap", ".", "resourcesToDirectory", ".", "containsKey", "(", "resourceType", ")", ")", "{", "map", "=", "game", ".", "getAssets", "(", ")", ".", "get", "(", "FileMap", ".", "resourcesToDirectory", ".", "get", "(", "resourceType", ")", "+", "mapName", "+", "\".tmx\"", ",", "TiledMap", ".", "class", ")", ";", "}", "return", "map", ";", "}"], "memberFunctions": {"loadMaps": [["void"]], "disposeSounds": [["void"]], "getTextureRegion": [["TextureRegion", "String regionName", "String resourceType"]], "disposeTextures": [["void"]], "disposeMaps": [["void"]], "getTexture": [["Texture", "String textureName", "String resourceType"]], "unloadSounds": [["void", "Array<Asset> soundsToLoad"]], "loadSounds": [["void"]], "equals": [["boolean", "Object obj"]], "setAssetsToLoad": [["void", "Array<Asset> textureRegions", "Array<Asset> textures", "Array<Asset> sounds", "Array<Asset> rpgMaps"]], "loadAssets": [["void"]], "dispose": [["void"]], "loadTextureAtlas": [["void"]], "createTextureAtlas": [["void"]], "disposeAtlas": [["void"]], "loadTextures": [["void"]]}, "className": "Loader", "renamed": ["TiledMap", "function", "(", "String", "arg0", ",", "String", "arg1", ")", "{", "TiledMap", "loc0", "=", "null", ";", "if", "(", "this", ".", "rpgMaps", "!=", "null", "&&", "FileMap", ".", "resourcesToDirectory", ".", "containsKey", "(", "arg1", ")", ")", "{", "loc0", "=", "game", ".", "getAssets", "(", ")", ".", "get", "(", "FileMap", ".", "resourcesToDirectory", ".", "get", "(", "arg1", ")", "+", "arg0", "+", "\"srini_string\"", ",", "TiledMap", ".", "class", ")", ";", "}", "return", "loc0", ";", "}"], "nl": "Retrieves a Tiled map (.tmx) from the system.", "nlToks": ["Retrieves", "a", "Tiled", "map", "-LRB-", ".", "tmx", "-RRB-", "from", "the", "system", "."], "path": "prativa/shadowstruggles/tree/master/Shadow Struggles/src/br/edu/ifsp/pds/shadowstruggles/data/Loader.java", "idx": 1693}
{"memberVariables": {"enumeration": "Enumeration<E>"}, "code": ["boolean", "function", "(", "Collection", "source", ",", "Collection", "candidates", ")", "{", "if", "(", "isEmpty", "(", "source", ")", "||", "isEmpty", "(", "candidates", ")", ")", "{", "return", "false", ";", "}", "for", "(", "Object", "candidate", ":", "candidates", ")", "{", "if", "(", "source", ".", "contains", "(", "candidate", ")", ")", "{", "return", "true", ";", "}", "}", "return", "false", ";", "}"], "memberFunctions": {"toIterator": [["Iterator<E>", "Enumeration<E> enumeration"]], "next": [["E"]], "arrayToList": [["List", "Object source"]], "mergePropertiesIntoMap": [["void", "Properties props", "Map map"]], "containsInstance": [["boolean", "Collection collection", "Object element"]], "findValueOfType": [["T", "Collection<?> collection", "Class<T> type"], ["Object", "Collection<?> collection", "Class<?>[] types"]], "isEmpty": [["boolean", "Collection collection"], ["boolean", "Map map"]], "hasUniqueObject": [["boolean", "Collection collection"]], "hasNext": [["boolean"]], "remove": [["void"]], "contains": [["boolean", "Iterator iterator", "Object element"], ["boolean", "Enumeration enumeration", "Object element"]], "findFirstMatch": [["Object", "Collection source", "Collection candidates"]], "toArray": [["A[]", "Enumeration<E> enumeration", "A[] array"]], "findCommonElementType": [["Class<?>", "Collection collection"]], "mergeArrayIntoCollection": [["void", "Object array", "Collection collection"]]}, "className": "CollectionUtils", "renamed": ["boolean", "function", "(", "Collection", "arg0", ",", "Collection", "arg1", ")", "{", "if", "(", "isEmpty", "(", "arg0", ")", "||", "isEmpty", "(", "arg1", ")", ")", "{", "return", "false", ";", "}", "for", "(", "Object", "loc0", ":", "arg1", ")", "{", "if", "(", "arg0", ".", "contains", "(", "loc0", ")", ")", "{", "return", "true", ";", "}", "}", "return", "false", ";", "}"], "nl": "Return  {@code true} if any element in '{@code candidates}' is contained in ' {@code source}'; otherwise returns  {@code false}.", "nlToks": ["Return", "-LCB-", "@code", "true", "-RCB-", "if", "any", "element", "in", "'", "-LCB-", "@code", "candidates", "-RCB-", "'", "is", "contained", "in", "'", "-LCB-", "@code", "source", "-RCB-", "'", ";", "otherwise", "returns", "-LCB-", "@code", "false", "-RCB-", "."], "path": "16ren/Android-Next/tree/master/bus/src/main/java/com/mcxiaoke/next/bus/support/CollectionUtils.java", "idx": 1695}
{"memberVariables": {"instance": "Position"}, "code": ["void", "function", "(", ")", "{", "assertEquals", "(", "CompassPoint", ".", "NORTH", ",", "instance", ".", "getLatitudeHemisphere", "(", ")", ")", ";", "}"], "memberFunctions": {"testGetLatitude": [["void"]], "testSetIllegalLatitudeSouth": [["void"]], "testDistanceToSelf": [["void"]], "testSetIllegalLongitudeWest": [["void"]], "testGetDatum": [["void"]], "testSetLatitudeSouth": [["void"]], "testDistanceTo": [["void"]], "testSetIllegalLongitudeEast": [["void"]], "testToWaypoint": [["void"]], "testSetLongitudeEast": [["void"]], "setUp": [["void"]], "testGetLongitude": [["void"]], "testSetLongitudeWest": [["void"]], "testSetLatitudeNorth": [["void"]], "testGetLongitudeHemisphere": [["void"]], "testSetIllegalLatitudeNorth": [["void"]]}, "className": "PositionTest", "renamed": ["void", "function", "(", ")", "{", "assertEquals", "(", "CompassPoint", ".", "NORTH", ",", "instance", ".", "getLatitudeHemisphere", "(", ")", ")", ";", "}"], "nl": "Test for getLatHemisphere()", "nlToks": ["Test", "for", "getLatHemisphere", "-LRB-", "-RRB-"], "path": "pkoziol/marine-api/tree/master/src/test/java/net/sf/marineapi/nmea/util/PositionTest.java", "idx": 1697}
{"memberVariables": {"_SignCertificateResponse_QNAME=new QName(\"http://platformlayer.org/auth/v1.0\",\"signCertificateResponse\")": "QName", "_Access_QNAME=new QName(\"http://platformlayer.org/auth/v1.0\",\"access\")": "QName", "_CheckServiceAccessResponse_QNAME=new QName(\"http://platformlayer.org/auth/v1.0\",\"checkServiceAccessResponse\")": "QName", "_SignCertificateRequest_QNAME=new QName(\"http://platformlayer.org/auth/v1.0\",\"signCertificateRequest\")": "QName", "_CertificateChainInfo_QNAME=new QName(\"http://platformlayer.org/auth/v1.0\",\"certificateChainInfo\")": "QName", "_RegistrationRequest_QNAME=new QName(\"http://platformlayer.org/auth/v1.0\",\"registrationRequest\")": "QName", "_User_QNAME=new QName(\"http://platformlayer.org/auth/v1.0\",\"user\")": "QName", "_AuthenticateResponse_QNAME=new QName(\"http://platformlayer.org/auth/v1.0\",\"authenticateResponse\")": "QName", "_CheckServiceAccessRequest_QNAME=new QName(\"http://platformlayer.org/auth/v1.0\",\"checkServiceAccessRequest\")": "QName", "_ValidateTokenResponse_QNAME=new QName(\"http://platformlayer.org/auth/v1.0\",\"validateTokenResponse\")": "QName", "_AuthenticateRequest_QNAME=new QName(\"http://platformlayer.org/auth/v1.0\",\"authenticateRequest\")": "QName", "_Auth_QNAME=new QName(\"http://platformlayer.org/auth/v1.0\",\"auth\")": "QName", "_ValidateAccess_QNAME=new QName(\"http://platformlayer.org/auth/v1.0\",\"validateAccess\")": "QName", "_RegistrationResponse_QNAME=new QName(\"http://platformlayer.org/auth/v1.0\",\"registrationResponse\")": "QName", "_Roles_QNAME=new QName(\"http://platformlayer.org/auth/v1.0\",\"roles\")": "QName"}, "code": ["PasswordCredentials", "function", "(", ")", "{", "return", "new", "PasswordCredentials", "(", ")", ";", "}"], "memberFunctions": {"createValidateTokenResponse": [["ValidateTokenResponse"], ["JAXBElement<ValidateTokenResponse>", "ValidateTokenResponse value"]], "createCertificateChainInfo": [["CertificateChainInfo"], ["JAXBElement<CertificateChainInfo>", "CertificateChainInfo value"]], "createRoleList": [["RoleList"]], "createCheckServiceAccessRequest": [["CheckServiceAccessRequest"], ["JAXBElement<CheckServiceAccessRequest>", "CheckServiceAccessRequest value"]], "createRole": [["Role"]], "createToken": [["Token"]], "createCheckServiceAccessResponse": [["CheckServiceAccessResponse"], ["JAXBElement<CheckServiceAccessResponse>", "CheckServiceAccessResponse value"]], "createAuthenticateResponse": [["AuthenticateResponse"], ["JAXBElement<AuthenticateResponse>", "AuthenticateResponse value"]], "createValidateAccess": [["ValidateAccess"], ["JAXBElement<ValidateAccess>", "ValidateAccess value"]], "createAuthenticateRequest": [["AuthenticateRequest"], ["JAXBElement<AuthenticateRequest>", "AuthenticateRequest value"]], "createAuth": [["Auth"], ["JAXBElement<Auth>", "Auth value"]], "createCertificateInfo": [["CertificateInfo"]], "createUserValidation": [["UserValidation"]], "createCertificateCredentials": [["CertificateCredentials"]], "createRegistrationResponse": [["RegistrationResponse"], ["JAXBElement<RegistrationResponse>", "RegistrationResponse value"]], "createUser": [["User"], ["JAXBElement<User>", "User value"]], "createRoles": [["JAXBElement<RoleList>", "RoleList value"]], "createRegistrationRequest": [["RegistrationRequest"], ["JAXBElement<RegistrationRequest>", "RegistrationRequest value"]], "createAccess": [["Access"], ["JAXBElement<Access>", "Access value"]], "createProjectValidation": [["ProjectValidation"]], "createSignCertificateResponse": [["SignCertificateResponse"], ["JAXBElement<SignCertificateResponse>", "SignCertificateResponse value"]], "createSignCertificateRequest": [["SignCertificateRequest"], ["JAXBElement<SignCertificateRequest>", "SignCertificateRequest value"]]}, "className": "ObjectFactory", "renamed": ["PasswordCredentials", "function", "(", ")", "{", "return", "new", "PasswordCredentials", "(", ")", ";", "}"], "nl": "Create an instance of  {@link PasswordCredentials }", "nlToks": ["Create", "an", "instance", "of", "-LCB-", "@link", "PasswordCredentials", "-RCB-"], "path": "platformlayer/platformlayer/tree/master/auth/client/src/generated/xjc/org/platformlayer/auth/v1/ObjectFactory.java", "idx": 1698}
{"memberVariables": {}, "code": ["void", "function", "(", ")", "{", "final", "ViolationNode", "node1", "=", "createViolationNode", "(", "\"Foo.java\"", ",", "1", ",", "1", ",", "5", ",", "15", ",", "\"\"", ")", ";", "final", "ViolationNode", "node2", "=", "createViolationNode", "(", "\"Foo.java\"", ",", "1", ",", "1", ",", "7", ",", "15", ",", "\"\"", ")", ";", "assertFalse", "(", "\"Two violations with different beginColumn should result in not equal nodes\"", ",", "node1", ".", "equalsNode", "(", "node2", ")", ")", ";", "}"], "memberFunctions": {"testEqualsNodeWithTwoDifferentViolationsDifferentEndColumn": [["void"]], "createViolationNode": [["ViolationNode", "final String filename", "final int beginLine", "final int endLine", "final int beginColumn", "final int endColumn", "final String variableName"]], "testEqualsNodeWithTwoDifferentViolationsDifferentVariableName": [["void"]], "testEqualsNodeWithTwoDifferentViolationsDifferentEndLine": [["void"]], "testEqualsNodeWithTwoDifferentViolationsDifferentFilename": [["void"]], "testEqualsNodeWithTwoDifferentViolationsDifferentBeginLine": [["void"]], "testEqualsNodeWithTwoEqualViolations": [["void"]]}, "className": "ViolationNodeTest", "renamed": ["void", "function", "(", ")", "{", "final", "ViolationNode", "loc0", "=", "createViolationNode", "(", "\"srini_string\"", ",", "1", ",", "1", ",", "5", ",", "15", ",", "\"srini_string\"", ")", ";", "final", "ViolationNode", "loc1", "=", "createViolationNode", "(", "\"srini_string\"", ",", "1", ",", "1", ",", "7", ",", "15", ",", "\"srini_string\"", ")", ";", "assertFalse", "(", "\"srini_string\"", ",", "loc0", ".", "equalsNode", "(", "loc1", ")", ")", ";", "}"], "nl": "Verifies that two violations nodes with different  {@code beginColumn} arenot equal.", "nlToks": ["Verifies", "that", "two", "violations", "nodes", "with", "different", "-LCB-", "@code", "beginColumn", "-RCB-", "arenot", "equal", "."], "path": "adangel/pmd/tree/master/pmd-core/src/test/java/net/sourceforge/pmd/lang/dfa/report/ViolationNodeTest.java", "idx": 1699}
{"memberVariables": {"expDataUnitId": "BigDecimal", "dataUnitId": "BigDecimal", "createTimeStamp": "Timestamp", "actValue": "String", "errorCode": "String", "srcFileName": "String", "errorMsg": "String", "failedAttrib": "String", "expDataSetId": "BigDecimal", "regPclTestResult": "RegPCLTestResultEntity", "dataSetId": "BigDecimal", "id": "RegPCLTestResultDetailsEntityPK", "serialVersionUID=3309870439513279844L": "long", "expValue": "String"}, "code": ["BigDecimal", "function", "(", ")", "{", "return", "this", ".", "expDataUnitId", ";", "}"], "memberFunctions": {"updateCreateTimeStamp": [["void"]], "setActValue": [["void", "String actValue"]], "getDataSetId": [["BigDecimal"]], "getId": [["RegPCLTestResultDetailsEntityPK"]], "setSrcFileName": [["void", "String srcFileName"]], "getRegPclTestResult": [["RegPCLTestResultEntity"]], "setExpValue": [["void", "String expValue"]], "getSrcFileName": [["String"]], "setErrorCode": [["void", "String errorCode"]], "getDataUnitId": [["BigDecimal"]], "setErrorMsg": [["void", "String errorMsg"]], "getErrorCode": [["String"]], "setDataUnitId": [["void", "BigDecimal dataUnitId"]], "setId": [["void", "RegPCLTestResultDetailsEntityPK id"]], "setFailedAttrib": [["void", "String failedAttrib"]], "getExpDataSetId": [["BigDecimal"]], "getErrorMsg": [["String"]], "getActValue": [["String"]], "setRegPclTestResult": [["void", "RegPCLTestResultEntity regPclTestResult"]], "getExpValue": [["String"]], "setCreateTimeStamp": [["void", "Timestamp createTimeStamp"]], "getCreateTimeStamp": [["Timestamp"]], "getFailedAttrib": [["String"]], "setExpDataSetId": [["void", "BigDecimal expDataSetId"]], "setDataSetId": [["void", "BigDecimal dataSetId"]], "setExpDataUnitId": [["void", "BigDecimal expDataUnitId"]]}, "className": "RegPCLTestResultDetailsEntity", "renamed": ["BigDecimal", "function", "(", ")", "{", "return", "this", ".", "expDataUnitId", ";", "}"], "nl": "Gets the exp data unit id.", "nlToks": ["Gets", "the", "exp", "data", "unit", "id", "."], "path": "pkesireddy/portico_fletcher/tree/master/FetcherTesterService/src/main/java/org/ithaka/cm/fetchertester/entity/RegPCLTestResultDetailsEntity.java", "idx": 1702}
{"memberVariables": {"instance": "Date", "cal": "GregorianCalendar"}, "code": ["void", "function", "(", ")", "{", "assertTrue", "(", "instance", ".", "equals", "(", "instance", ")", ")", ";", "}"], "memberFunctions": {"testConstructorWithString": [["void"]], "testSetMonth": [["void"]], "testSetYearThreeDigits": [["void"]], "testConstructor": [["void"]], "testToStringFourDigitYear": [["void"]], "testEqualsAfterInit": [["void"]], "testEqualsWrongType": [["void"]], "testSetYearTwoDigit": [["void"]], "testEqualsWhenChanged": [["void"]], "testToISO8601WithTime": [["void"]], "setUp": [["void"]], "testGetMonth": [["void"]], "testSetYearNegative": [["void"]], "testConstructorWithValues": [["void"]], "testSetDayOutOfBounds": [["void"]], "testGetYear": [["void"]], "testToISO8601WithTimeAndZeroZone": [["void"]], "testToISO8601FourDigitYear": [["void"]], "testSetDay": [["void"]], "testSetYearFourDigit": [["void"]], "testToStringTwoDigitYear": [["void"]], "testToISO8601WithTimeAndPositiveOffset": [["void"]], "testToISO8601TwoDigitYear": [["void"]], "testSetYearFiveDigits": [["void"]], "testToISO8601WithTimeAndNegativeOffset": [["void"]], "testGetDay": [["void"]], "testSetMonthOutOfBounds": [["void"]]}, "className": "DateTest", "renamed": ["void", "function", "(", ")", "{", "assertTrue", "(", "instance", ".", "equals", "(", "instance", ")", ")", ";", "}"], "nl": "Test method for {@link net.sf.marineapi.nmea.util.Date#equals(java.lang.Object)}.", "nlToks": ["Test", "method", "for", "-LCB-", "@link", "net.sf.marineapi.nmea.util.Date", "#equals", "-LRB-", "java.lang.Object", "-RRB-", "-RCB-", "."], "path": "pkoziol/marine-api/tree/master/src/test/java/net/sf/marineapi/nmea/util/DateTest.java", "idx": 1703}
{"memberVariables": {"lastModifiedTimeStamp": "Timestamp", "fetcherStartTimestamp": "Timestamp", "createTimeStamp": "Timestamp", "serialVersionUID=1L": "long", "batchId": "BigDecimal", "errorMsg": "String", "outcomeType": "OutcomeType", "createdBy": "String", "feedId": "BigDecimal", "testId": "long", "runId": "BigDecimal", "fetcherEndTimeStamp": "Timestamp", "regPclTestResultDetails": "List<RegPCLTestResultDetailsEntity>", "runStatus": "RunStatusType"}, "code": ["void", "function", "(", "List", "<", "RegPCLTestResultDetailsEntity", ">", "regPclTestResultDetails", ")", "{", "this", ".", "regPclTestResultDetails", "=", "regPclTestResultDetails", ";", "}"], "memberFunctions": {"setLastModifiedTimeStamp": [["void", "Timestamp lastModifiedTimeStamp"]], "setFeedId": [["void", "BigDecimal feedId"]], "setFetcherStartTimestamp": [["void", "Timestamp fetcherStartTimestamp"]], "getOutcomeType": [["OutcomeType"]], "updateLastModifiedTimeStamp": [["void"]], "updateCreateTimeStamp": [["void"]], "getRunId": [["BigDecimal"]], "setBatchId": [["void", "BigDecimal batchId"]], "getRegPclTestResultDetails": [["List<RegPCLTestResultDetailsEntity>"]], "setTestId": [["void", "long testId"]], "getTestId": [["long"]], "removeRegPclTestResultDetail": [["RegPCLTestResultDetailsEntity", "RegPCLTestResultDetailsEntity regPclTestResultDetail"]], "setErrorMsg": [["void", "String errorMsg"]], "getRunStatus": [["RunStatusType"]], "addRegPclTestResultDetail": [["RegPCLTestResultDetailsEntity", "RegPCLTestResultDetailsEntity regPclTestResultDetail"]], "getErrorMsg": [["String"]], "setRunStatus": [["void", "RunStatusType runStatus"]], "getFetcherEndTimeStamp": [["Timestamp"]], "getLastModifiedTimeStamp": [["Timestamp"]], "getFeedId": [["BigDecimal"]], "setRunId": [["void", "BigDecimal runId"]], "getFetcherStartTimestamp": [["Timestamp"]], "setFetcherEndTimeStamp": [["void", "Timestamp fetcherEndTimeStamp"]], "setCreateTimeStamp": [["void", "Timestamp createTimeStamp"]], "setCreatedBy": [["void", "String createdBy"]], "getCreateTimeStamp": [["Timestamp"]], "getBatchId": [["BigDecimal"]], "setOutcomeType": [["void", "OutcomeType outcomeType"]], "getCreatedBy": [["String"]]}, "className": "RegPCLTestResultEntity", "renamed": ["void", "function", "(", "List", "<", "RegPCLTestResultDetailsEntity", ">", "arg0", ")", "{", "this", ".", "regPclTestResultDetails", "=", "arg0", ";", "}"], "nl": "Sets the reg pcl test result details.", "nlToks": ["Sets", "the", "reg", "pcl", "test", "result", "details", "."], "path": "pkesireddy/portico_fletcher/tree/master/FetcherTesterService/src/main/java/org/ithaka/cm/fetchertester/entity/RegPCLTestResultEntity.java", "idx": 1704}
{"memberVariables": {"time": "Time"}, "code": ["void", "function", "(", ")", "{", "try", "{", "time", ".", "setMinutes", "(", "60", ")", ";", "fail", "(", "\"Did not throw exception\"", ")", ";", "}", "catch", "(", "IllegalArgumentException", "e", ")", "{", "}", "}"], "memberFunctions": {"testDateRoundTrip": [["void"]], "testParseTimeWithOneDecimal": [["void"]], "testSetNegativeMinutes": [["void"]], "testFormatTimeWithOneDecimal": [["void"]], "testSetMinutes": [["void"]], "testParseTimeWithoutDecimals": [["void"]], "testGetMinutes": [["void"]], "testParseTimeWithDecimals": [["void"]], "testSetInvalidSeconds": [["void"]], "testSetNegativeHour": [["void"]], "testToDate": [["void"]], "testGetSeconds": [["void"]], "testSetHour": [["void"]], "testGetHour": [["void"]], "testSetSeconds": [["void"]], "testSetTime": [["void"]], "testGetMilliseconds": [["void"]], "testSetInvalidHour": [["void"]], "testSetNegativeSeconds": [["void"]], "setUp": [["void"]], "testFormatTimeNoDecimals": [["void"]], "testFormatTimeWithDecimals": [["void"]], "testEquals": [["void"]]}, "className": "TimeTest", "renamed": ["void", "function", "(", ")", "{", "try", "{", "time", ".", "setMinutes", "(", "60", ")", ";", "fail", "(", "\"srini_string\"", ")", ";", "}", "catch", "(", "IllegalArgumentException", "loc0", ")", "{", "}", "}"], "nl": "Test method for  {@link net.sf.marineapi.nmea.util.Time#setMinutes(int)}.", "nlToks": ["Test", "method", "for", "-LCB-", "@link", "net.sf.marineapi.nmea.util.Time", "#setMinutes", "-LRB-", "int", "-RRB-", "-RCB-", "."], "path": "pkoziol/marine-api/tree/master/src/test/java/net/sf/marineapi/nmea/util/TimeTest.java", "idx": 1705}
{"memberVariables": {"nodePosition=new HashMap<>()": "Map<T,Integer>", "allNodes=new ArrayList<>()": "List<Node>", "weight": "int", "key": "T"}, "code": ["T", "function", "(", ")", "{", "return", "allNodes", ".", "get", "(", "0", ")", ".", "key", ";", "}"], "memberFunctions": {"add": [["void", "int weight", "T key"]], "printPositionMap": [["void"]], "swap": [["void", "Node node1", "Node node2"]], "updatePositionMap": [["void", "T data1", "T data2", "int pos1", "int pos2"]], "getWeight": [["Integer", "T key"]], "extractMinNode": [["Node"]], "printHeap": [["void"]], "main": [["void", "String args[]"]], "extractMin": [["T"]], "decrease": [["void", "T data", "int newWeight"]], "containsData": [["boolean", "T key"]], "empty": [["boolean"]]}, "className": "BinaryMinHeap", "renamed": ["T", "function", "(", ")", "{", "return", "allNodes", ".", "get", "(", "0", ")", ".", "key", ";", "}"], "nl": "Get the heap min without extracting the key", "nlToks": ["Get", "the", "heap", "min", "without", "extracting", "the", "key"], "path": "piyushbajaj/Java_Tutorial_DS/tree/master/Heap/BinaryMinHeap.java", "idx": 1706}
{"memberVariables": {"LOG=Logger.getLogger(NotationNameImpl.class)": "Logger", "name": "String", "icon": "Icon", "notations=new ArrayList<NotationName>()": "ArrayList<NotationName>", "version": "String"}, "code": ["String", "function", "(", ")", "{", "String", "myName", "=", "name", ";", "if", "(", "myName", ".", "equalsIgnoreCase", "(", "\"uml\"", ")", ")", "{", "myName", "=", "myName", ".", "toUpperCase", "(", ")", ";", "}", "if", "(", "version", "==", "null", "||", "version", ".", "equals", "(", "\"\"", ")", ")", "{", "return", "myName", ";", "}", "return", "myName", "+", "\" \"", "+", "version", ";", "}"], "memberFunctions": {"getVersion": [["String"]], "getNotationNameString": [["String", "String k1", "String k2"]], "getName": [["String"]], "fireEvent": [["void", "int eventType", "NotationName nn"]], "removeNotation": [["boolean", "NotationName theNotation"]], "getIcon": [["Icon"]], "getConfigurationValue": [["String"]], "findNotation": [["NotationName", "String s"]], "getNotation": [["NotationName", "String k1"], ["NotationName", "String k1", "String k2"]], "getAvailableNotations": [["List<NotationName>"]], "toString": [["String"]], "makeNotation": [["NotationName", "String k1", "String k2", "Icon icon"]], "sameNotationAs": [["boolean", "NotationName nn"]]}, "className": "NotationNameImpl", "renamed": ["String", "function", "(", ")", "{", "String", "loc0", "=", "name", ";", "if", "(", "loc0", ".", "equalsIgnoreCase", "(", "\"srini_string\"", ")", ")", "{", "loc0", "=", "loc0", ".", "toUpperCase", "(", ")", ";", "}", "if", "(", "version", "==", "null", "||", "version", ".", "equals", "(", "\"srini_string\"", ")", ")", "{", "return", "loc0", ";", "}", "return", "loc0", "+", "\"srini_string\"", "+", "version", ";", "}"], "nl": "Gets a textual title for the notation suitable for use in a combo box or other such visual location.", "nlToks": ["Gets", "a", "textual", "title", "for", "the", "notation", "suitable", "for", "use", "in", "a", "combo", "box", "or", "other", "such", "visual", "location", "."], "path": "pichiliani/CoArgoUML/tree/master/v0.24/fonte/src/argouml-app/src/org/argouml/notation/NotationNameImpl.java", "idx": 1707}
{"memberVariables": {"comparator": "Comparator<? super T>", "threshold": "T", "k": "int", "buffer": "T[]", "bufferSize": "int"}, "code": ["TopKSelector", "<", "T", ">", "function", "(", "int", "k", ")", "{", "return", "greatest", "(", "k", ",", "Ordering", ".", "natural", "(", ")", ")", ";", "}"], "memberFunctions": {"offer": [["void", "@Nullable T elem"]], "topK": [["List<T>"]], "partition": [["int", "int left", "int right", "int pivotIndex"]], "trim": [["void"]], "swap": [["void", "int i", "int j"]], "offerAll": [["void", "Iterable<? extends T> elements"], ["void", "Iterator<? extends T> elements"]], "least": [["TopKSelector<T>", "int k"], ["TopKSelector<T>", "int k", "Comparator<? super T> comparator"]], "combine": [["TopKSelector<T>", "TopKSelector<T> other"]]}, "className": "TopKSelector", "renamed": ["TopKSelector", "<", "T", ">", "function", "(", "int", "arg0", ")", "{", "return", "greatest", "(", "arg0", ",", "Ordering", ".", "natural", "(", ")", ")", ";", "}"], "nl": "Returns a  {@code TopKSelector} that collects the greatest {@code k} elements added to it,relative to the natural ordering of the elements, and returns them via  {@link #topK} indescending order.", "nlToks": ["Returns", "a", "-LCB-", "@code", "TopKSelector", "-RCB-", "that", "collects", "the", "greatest", "-LCB-", "@code", "k", "-RCB-", "elements", "added", "to", "it", ",", "relative", "to", "the", "natural", "ordering", "of", "the", "elements", ",", "and", "returns", "them", "via", "-LCB-", "@link", "#topK", "-RCB-", "indescending", "order", "."], "path": "hazendaz/guava/tree/master/guava/src/com/google/common/collect/TopKSelector.java", "idx": 1708}
{"memberVariables": {"bus": "Bus", "cache": "Ehcache", "CACHE_KEY=\"cxf.xkms.client.cache\"": "String", "DEFAULT_CONFIG_URL=\"cxf-xkms-client-ehcache.xml\"": "String", "cacheManager": "CacheManager"}, "code": ["void", "function", "(", "String", "key", ",", "XKMSCacheToken", "cacheToken", ")", "{", "cache", ".", "put", "(", "new", "Element", "(", "key", ",", "cacheToken", ",", "false", ")", ")", ";", "}"], "memberFunctions": {"postShutdown": [["void"]], "createCache": [["void", "String configFile", "Bus cxfBus"]], "get": [["XKMSCacheToken", "String key"]], "initComplete": [["void"]], "close": [["void"]], "preShutdown": [["void"]]}, "className": "EHCacheXKMSClientCache", "renamed": ["void", "function", "(", "String", "arg0", ",", "XKMSCacheToken", "arg1", ")", "{", "cache", ".", "put", "(", "new", "Element", "(", "arg0", ",", "arg1", ",", "false", ")", ")", ";", "}"], "nl": "Store an XKMSCacheToken in the Cache using the given key", "nlToks": ["Store", "an", "XKMSCacheToken", "in", "the", "Cache", "using", "the", "given", "key"], "path": "primesign/cxf/tree/master/services/xkms/xkms-client/src/main/java/org/apache/cxf/xkms/cache/EHCacheXKMSClientCache.java", "idx": 1712}
{"memberVariables": {"bundle=new Bundle()": "Bundle", "bundle": "Bundle"}, "code": ["Bundle", "function", "(", ")", "{", "return", "(", "Bundle", ")", "this", ".", "bundle", ".", "clone", "(", ")", ";", "}"], "memberFunctions": {"putStringArrayList": [["E", "final String key", "final ArrayList<String> value"]], "getPhoto": [["SharePhoto", "final String key"]], "putPhotoArrayList": [["E", "final String key", "final ArrayList<SharePhoto> value"]], "putDoubleArray": [["E", "final String key", "final double[] value"]], "getDouble": [["double", "final String key", "final double defaultValue"]], "putDouble": [["E", "final String key", "final double value"]], "putLong": [["E", "final String key", "final long value"]], "getDoubleArray": [["double[]", "final String key"]], "get": [["Object", "String key"]], "getObjectArrayList": [["ArrayList<ShareOpenGraphObject>", "final String key"]], "putIntArray": [["E", "final String key", "final int[] value"]], "getBoolean": [["boolean", "final String key", "final boolean defaultValue"]], "putLongArray": [["E", "final String key", "final long[] value"]], "keySet": [["Set<String>"]], "putBoolean": [["E", "final String key", "final boolean value"]], "getBooleanArray": [["boolean[]", "final String key"]], "getPhotoArrayList": [["ArrayList<SharePhoto>", "final String key"]], "getObject": [["ShareOpenGraphObject", "final String key"]], "putPhoto": [["E", "final String key", "final SharePhoto value"]], "readFrom": [["E", "final P model"]], "putInt": [["E", "final String key", "final int value"]], "putString": [["E", "final String key", "final String value"]], "getStringArrayList": [["ArrayList<String>", "final String key"]], "getString": [["String", "final String key"]], "describeContents": [["int"]], "getLongArray": [["long[]", "final String key"]], "getLong": [["long", "final String key", "final long defaultValue"]], "getInt": [["int", "final String key", "final int defaultValue"]], "putObjectArrayList": [["E", "final String key", "final ArrayList<ShareOpenGraphObject> value"]], "putBooleanArray": [["E", "final String key", "final boolean[] value"]], "putObject": [["E", "final String key", "final ShareOpenGraphObject value"]], "writeToParcel": [["void", "final Parcel out", "final int flags"]], "getIntArray": [["int[]", "final String key"]]}, "className": "ShareOpenGraphValueContainer", "renamed": ["Bundle", "function", "(", ")", "{", "return", "(", "Bundle", ")", "this", ".", "bundle", ".", "clone", "(", ")", ";", "}"], "nl": "Returns the values in the container packaged in a bundle.", "nlToks": ["Returns", "the", "values", "in", "the", "container", "packaged", "in", "a", "bundle", "."], "path": "adament67/testproject/tree/master/Android Projects/studio/EstiloRobe/facebook/src/main/java/com/facebook/share/model/ShareOpenGraphValueContainer.java", "idx": 1713}
{"memberVariables": {"volume": "int", "occupancy": "double", "measurement_date": "Timestamp", "lane_id": "int", "id": "long", "speed": "double", "quality": "int"}, "code": ["int", "function", "(", ")", "{", "return", "quality", ";", "}"], "memberFunctions": {"getOccupancy": [["double"]], "setOccupancy": [["void", "double occupancy"]], "getMeasurement_date": [["Timestamp"]], "getLane_id": [["int"]], "getId": [["long"]], "setVolume": [["void", "int volume"]], "setLane_id": [["void", "int lane_id"]], "setSpeed": [["void", "double speed"]], "getVolume": [["int"]], "setQuality": [["void", "int quality"]], "getSpeed": [["double"]], "setMeasurement_date": [["void", "Timestamp measurement_date"]], "setId": [["void", "long id"]], "toString": [["String"]]}, "className": "LaneData", "renamed": ["int", "function", "(", ")", "{", "return", "quality", ";", "}"], "nl": "Gets the quality.", "nlToks": ["Gets", "the", "quality", "."], "path": "pfontana3w2/DataScienceProject/tree/master/TrafficVolumePrediction_0.5/src/gov/nist/dataeval/db/bean/LaneData.java", "idx": 1714}
{"memberVariables": {"checkedFlag": "FolderInfo.CheckedFlag", "artist": "String", "album": "String", "rating": "double", "errorLevel": "int"}, "code": ["String", "function", "(", ")", "{", "return", "album", ";", "}"], "memberFunctions": {"getCheckedFlag": [["FolderInfo.CheckedFlag"]], "setArtist": [["void", "String artist"]], "getErrorLevel": [["int"]], "setErrorLevel": [["void", "int errorLevel"]], "getArtist": [["String"]], "setAlbum": [["void", "String album"]], "toString": [["String"]], "setCheckedFlag": [["void", "FolderInfo.CheckedFlag checkedFlag"]], "setRating": [["void", "double rating"]], "getRating": [["double"]]}, "className": "DuplicateInfo", "renamed": ["String", "function", "(", ")", "{", "return", "album", ";", "}"], "nl": "Get the value of album", "nlToks": ["Get", "the", "value", "of", "album"], "path": "phramusca/JaMuz/tree/master/src/jamuz/process/check/DuplicateInfo.java", "idx": 1715}
{"memberVariables": {"offsetHours=0": "int", "offsetMinutes=0": "int", "seconds=0.0": "double", "minutes=0": "int", "hour=0": "int", "TIME_PATTERN=\"%02d:%02d:%02d%+03d:%02d\"": "String"}, "code": ["void", "function", "(", "int", "hours", ")", "{", "if", "(", "hours", "<", "-", "13", "||", "hours", ">", "13", ")", "{", "throw", "new", "IllegalArgumentException", "(", "\"Offset out of bounds [-13..13]\"", ")", ";", "}", "this", ".", "offsetHours", "=", "hours", ";", "}"], "memberFunctions": {"getOffsetHours": [["int"]], "toDate": [["Date", "Date d"]], "toISO8601": [["String"]], "setMinutes": [["void", "int minutes"]], "setHour": [["void", "int hour"]], "getMilliseconds": [["long"]], "setOffsetMinutes": [["void", "int minutes"]], "getMinutes": [["int"]], "getSeconds": [["double"]], "hashCode": [["int"]], "setSeconds": [["void", "double seconds"]], "equals": [["boolean", "final Object obj"]], "getOffsetMinutes": [["int"]], "getHour": [["int"]], "toString": [["String"]], "setTime": [["void", "Date d"]]}, "className": "Time", "renamed": ["void", "function", "(", "int", "arg0", ")", "{", "if", "(", "arg0", "<", "-", "13", "||", "arg0", ">", "13", ")", "{", "throw", "new", "IllegalArgumentException", "(", "\"srini_string\"", ")", ";", "}", "this", ".", "offsetHours", "=", "arg0", ";", "}"], "nl": "Set time zone offset hours.", "nlToks": ["Set", "time", "zone", "offset", "hours", "."], "path": "pkoziol/marine-api/tree/master/src/main/java/net/sf/marineapi/nmea/util/Time.java", "idx": 1718}
{"memberVariables": {"pnseedIndex": "int", "seedAddrs={0x1ddb1032,0x6242ce40,0x52d6a445,0x2dd7a445,0x8a53cd47,0x73263750,0xda23c257,0xecd4ed57,0x0a40ec59,0x75dce160,0x7df76791,0x89370bad,0xa4f214ad,0x767700ae,0x638b0418,0x868a1018,0xcd9f332e,0x0129653e,0xcc92dc3e,0x96671640,0x56487e40,0x5b66f440,0xb1d01f41,0xf1dc6041,0xc1d12b42,0x86ba1243,0x6be4df43,0x6d4cef43,0xd18e0644,0x1ab0b344,0x6584a345,0xe7c1a445,0x58cea445,0xc5daa445,0x21dda445,0x3d3b5346,0x13e55347,0x1080d24a,0x8e611e4b,0x81518e4b,0x6c839e4b,0xe2ad0a4c,0xfbbc0a4c,0x7f5b6e4c,0x7244224e,0x1300554e,0x20690652,0x5a48b652,0x75c5c752,0x4335cc54,0x340fd154,0x87c07455,0x087b2b56,0x8a133a57,0xac23c257,0x70374959,0xfb63d45b,0xb9a1685c,0x180d765c,0x674f645d,0x04d3495e,0x1de44b5e,0x4ee8a362,0x0ded1b63,0xc1b04b6d,0x8d921581,0x97b7ea82,0x1cf83a8e,0x91490bad,0x09dc75ae,0x9a6d79ae,0xa26d79ae,0x0fd08fae,0x0f3e3fb2,0x4f944fb2,0xcca448b8,0x3ecd6ab8,0xa9d5a5bc,0x8d0119c1,0x045997d5,0xca019dd9,0x0d526c4d,0xabf1ba44,0x66b1ab55,0x1165f462,0x3ed7cbad,0xa38fae6e,0x3bd2cbad,0xd36f0547,0x20df7840,0x7a337742,0x549f8e4b,0x9062365c,0xd399f562,0x2b5274a1,0x8edfa153,0x3bffb347,0x7074bf58,0xb74fcbad,0x5b5a795b,0x02fa29ce,0x5a6738d4,0xe8a1d23e,0xef98c445,0x4b0f494c,0xa2bc1e56,0x7694ad63,0xa4a800c3,0x05fda6cd,0x9f22175e,0x364a795b,0x536285d5,0xac44c9d4,0x0b06254d,0x150c2fd4,0x32a50dcc,0xfd79ce48,0xf15cfa53,0x66c01e60,0x6bc26661,0xc03b47ae,0x4dda1b81,0x3285a4c1,0x883ca96d,0x35d60a4c,0xdae09744,0x2e314d61,0x84e247cf,0x6c814552,0x3a1cc658,0x98d8f382,0xe584cb5b,0x15e86057,0x7b01504e,0xd852dd48,0x56382f56,0x0a5df454,0xa0d18d18,0x2e89b148,0xa79c114c,0xcbdcd054,0x5523bc43,0xa9832640,0x8a066144,0x3894c3bc,0xab76bf58,0x6a018ac1,0xfebf4f43,0x2f26c658,0x31102f4e,0x85e929d5,0x2a1c175e,0xfc6c2cd1,0x27b04b6d,0xdf024650,0x161748b8,0x28be6580,0x57be6580,0x1cee677a,0xaa6bb742,0x9a53964b,0x0a5a2d4d,0x2434c658,0x9a494f57,0x1ebb0e48,0xf610b85d,0x077ecf44,0x085128bc,0x5ba17a18,0x27ca1b42,0xf8a00b56,0xfcd4c257,0xcf2fc15e,0xd897e052,0x4cada04f,0x2f35f6d5,0x382ce8c9,0xe523984b,0x3f946846,0x60c8be43,0x41da6257,0xde0be142,0xae8a544b,0xeff0c254,0x1e0f795b,0xaeb28890,0xca16acd9,0x1e47ddd8,0x8c8c4829,0xd27dc747,0xd53b1663,0x4096b163,0x9c8dd958,0xcb12f860,0x9e79305c,0x40c1a445,0x4a90c2bc,0x2c3a464d,0x2727f23c,0x30b04b6d,0x59024cb8,0xa091e6ad,0x31b04b6d,0xc29d46a6,0x63934fb2,0xd9224dbe,0x9f5910d8,0x7f530a6b,0x752e9c95,0x65453548,0xa484be46,0xce5a1b59,0x710e0718,0x46a13d18,0xdaaf5318,0xc4a8ff53,0x87abaa52,0xb764cf51,0xb2025d4a,0x6d351e41,0xc035c33e,0xa432c162,0x61ef34ae,0xd16fddbc,0x0870e8c1,0x3070e8c1,0x9c71e8c1,0xa4992363,0x85a1f663,0x4184e559,0x18d96ed8,0x17b8dbd5,0x60e7cd18,0xe5ee104c,0xab17ac62,0x1e786e1b,0x5d23b762,0xf2388fae,0x88270360,0x9e5b3d80,0x7da518b2,0xb5613b45,0x1ad41f3e,0xd550854a,0x8617e9a9,0x925b229c,0xf2e92542,0x47af0544,0x73b5a843,0xb9b7a0ad,0x03a748d0,0x0a6ff862,0x6694df62,0x3bfac948,0x8e098f4f,0x746916c3,0x02f38e4f,0x40bb1243,0x6a54d162,0x6008414b,0xa513794c,0x514aa343,0x63781747,0xdbb6795b,0xed065058,0x42d24b46,0x1518794c,0x9b271681,0x73e4ffad,0x0654784f,0x438dc945,0x641846a6,0x2d1b0944,0x94b59148,0x8d369558,0xa5a97662,0x8b705b42,0xce9204ae,0x8d584450,0x2df61555,0xeebff943,0x2e75fb4d,0x3ef8fc57,0x9921135e,0x8e31042e,0xb5afad43,0x89ecedd1,0x9cfcc047,0x8fcd0f4c,0xbe49f5ad,0x146a8d45,0x98669ab8,0x98d9175e,0xd1a8e46d,0x839a3ab8,0x40a0016c,0x6d27c257,0x977fffad,0x7baa5d5d,0x1213be43,0xb167e5a9,0x640fe8ca,0xbc9ea655,0x0f820a4c,0x0f097059,0x69ac957c,0x366d8453,0xb1ba2844,0x8857f081,0x70b5be63,0xc545454b,0xaf36ded1,0xb5a4b052,0x21f062d1,0x72ab89b2,0x74a45318,0x8312e6bc,0xb916965f,0x8aa7c858,0xfe7effad}": "int[]", "params": "NetworkParameters"}, "code": ["InetSocketAddress", "[", "]", "function", "(", "long", "timeoutValue", ",", "TimeUnit", "timeoutUnit", ")", "{", "try", "{", "return", "allPeers", "(", ")", ";", "}", "catch", "(", "UnknownHostException", "e", ")", "{", "throw", "new", "PeerDiscoveryException", "(", "e", ")", ";", "}", "}"], "memberFunctions": {"nextPeer": [["InetSocketAddress"]], "allPeers": [["InetSocketAddress[]"]], "getPeer": [["InetSocketAddress"]], "convertAddress": [["InetAddress", "int seed"]], "shutdown": [["void"]]}, "className": "SeedPeers", "renamed": ["InetSocketAddress", "[", "]", "function", "(", "long", "arg0", ",", "TimeUnit", "arg1", ")", "{", "try", "{", "return", "allPeers", "(", ")", ";", "}", "catch", "(", "UnknownHostException", "loc0", ")", "{", "throw", "new", "PeerDiscoveryException", "(", "loc0", ")", ";", "}", "}"], "nl": "Returns an array containing all the Bitcoin nodes within the list.", "nlToks": ["Returns", "an", "array", "containing", "all", "the", "Bitcoin", "nodes", "within", "the", "list", "."], "path": "plncoin/plncoin-and/tree/master/plncoinj/core/src/main/java/com/google/bitcoin/net/discovery/SeedPeers.java", "idx": 1719}
{"memberVariables": {"sources=new ArrayList<Source>()": "ArrayList<Source>", "validator": "JAXPValidator"}, "code": ["void", "function", "(", "Source", "s", ")", "{", "sources", ".", "add", "(", "s", ")", ";", "validator", ".", "setSchemaSources", "(", "sources", ".", "toArray", "(", "new", "Source", "[", "0", "]", ")", ")", ";", "}"], "memberFunctions": {"isSchemaValid": [["boolean"]], "getInstanceErrors": [["List<SAXParseException>", "Source instance"]], "isInstanceValid": [["boolean", "Source instance"]], "problemToExceptionList": [["List<SAXParseException>", "Iterable<ValidationProblem> problems"]], "getSchemaErrors": [["List<SAXParseException>"]]}, "className": "Validator", "renamed": ["void", "function", "(", "Source", "arg0", ")", "{", "sources", ".", "add", "(", "arg0", ")", ";", "validator", ".", "setSchemaSources", "(", "sources", ".", "toArray", "(", "new", "Source", "[", "0", "]", ")", ")", ";", "}"], "nl": "Adds a source for the schema defintion.", "nlToks": ["Adds", "a", "source", "for", "the", "schema", "defintion", "."], "path": "phbenisc/xmlunit/tree/master/xmlunit-legacy/src/main/java/org/custommonkey/xmlunit/jaxp13/Validator.java", "idx": 1720}
{"memberVariables": {"mGlobalTileID": "int", "mTileWidth": "int", "mTileColumn": "int", "mTileRow": "int", "mTileHeight": "int", "mTextureRegion": "TextureRegion"}, "code": ["void", "function", "(", "final", "TMXTiledMap", "pTMXTiledMap", ",", "final", "int", "pGlobalTileID", ")", "{", "this", ".", "mGlobalTileID", "=", "pGlobalTileID", ";", "this", ".", "mTextureRegion", "=", "pTMXTiledMap", ".", "getTextureRegionFromGlobalTileID", "(", "pGlobalTileID", ")", ";", "}"], "memberFunctions": {"getTileHeight": [["int"]], "getTileWidth": [["int"]], "getTMXTileProperties": [["TMXProperties<TMXTileProperty>", "final TMXTiledMap pTMXTiledMap"]], "getGlobalTileID": [["int"]], "getTileY": [["int"]], "getTileX": [["int"]], "getTextureRegion": [["TextureRegion"]], "getTileRow": [["int"]], "setTextureRegion": [["void", "final TextureRegion pTextureRegion"]], "getTileColumn": [["int"]]}, "className": "TMXTile", "renamed": ["void", "function", "(", "final", "TMXTiledMap", "arg0", ",", "final", "int", "arg1", ")", "{", "this", ".", "mGlobalTileID", "=", "arg1", ";", "this", ".", "mTextureRegion", "=", "arg0", ".", "getTextureRegionFromGlobalTileID", "(", "arg1", ")", ";", "}"], "nl": "Note this will also set the  {@link TextureRegion} with the associated pGlobalTileID of the {@link TMXTiledMap}.", "nlToks": ["Note", "this", "will", "also", "set", "the", "-LCB-", "@link", "TextureRegion", "-RCB-", "with", "the", "associated", "pGlobalTileID", "of", "the", "-LCB-", "@link", "TMXTiledMap", "-RCB-", "."], "path": "pradhanta/AndEngine/tree/master/src/org/anddev/andengine/entity/layer/tiled/tmx/TMXTile.java", "idx": 1724}
{"memberVariables": {"rondas=new AtomicLong(0)": "AtomicLong", "pilotos": "List<? extends Piloto>", "timeout=new AtomicLong(0)": "AtomicLong", "observadores": "List<Observador>", "partida": "Partida", "semaforo": "Semaphore"}, "code": ["void", "function", "(", "Piloto", "piloto", ")", "{", "Comando", "comando", "=", "null", ";", "try", "{", "comando", "=", "piloto", ".", "proximoComando", "(", ")", ";", "comando", ".", "ejecutar", "(", "this", ".", "getPartida", "(", ")", ")", ";", "}", "catch", "(", "Exception", "error", ")", "{", "this", ".", "notificarObservadoresException", "(", "piloto", ",", "comando", ",", "error", ")", ";", "}", "}"], "memberFunctions": {"rondaTerminada": [["void", "Motor motor", "long ronda"]], "exception": [["void", "Motor motor", "long ronda", "Piloto piloto", "Comando comando", "Exception exception"]], "agregarObservador": [["void", "Observador observador"]], "notificarObservadoresException": [["void", "Piloto piloto", "Comando comando", "Exception exception"]], "runRonda": [["void"]], "run": [["void"]], "setPartida": [["void", "Partida partida"]], "finalizacion": [["void", "Motor motor"]], "setPilotos": [["void", "List<? extends Piloto> pilotos"]], "setTimeout": [["void", "long timeout"]], "getRondas": [["long"]], "notificarObservadoresRondaTerminada": [["void", "long ronda"]], "getPartida": [["Partida"]], "getObservadores": [["List<Observador>"]], "notificarObservadoresFinalizacion": [["void"]], "getTimeout": [["long"]], "getPilotos": [["List<? extends Piloto>"]], "getSemaforo": [["Semaphore"]]}, "className": "Motor", "renamed": ["void", "function", "(", "Piloto", "arg0", ")", "{", "Comando", "loc0", "=", "null", ";", "try", "{", "loc0", "=", "arg0", ".", "proximoComando", "(", ")", ";", "loc0", ".", "ejecutar", "(", "this", ".", "getPartida", "(", ")", ")", ";", "}", "catch", "(", "Exception", "loc1", ")", "{", "this", ".", "notificarObservadoresException", "(", "arg0", ",", "loc0", ",", "loc1", ")", ";", "}", "}"], "nl": "Ejecuta un turno para el Piloto dado.", "nlToks": ["Ejecuta", "un", "turno", "para", "el", "Piloto", "dado", "."], "path": "plataforma-educativa/batalla-espacial/tree/master/src/main/java/ar/com/comunidadesfera/batallaespacial/juego/Motor.java", "idx": 1727}
{"memberVariables": {"timeoutTimer=new Timer(\"AbstractTimeoutHandler timeouts\",true)": "Timer", "timeoutTask": "TimerTask", "timeoutEnabled=true": "boolean", "timeoutMillis=0": "long"}, "code": ["void", "function", "(", "boolean", "timeoutEnabled", ")", "{", "this", ".", "timeoutEnabled", "=", "timeoutEnabled", ";", "resetTimeout", "(", ")", ";", "}"], "memberFunctions": {"setSocketTimeout": [["void", "int timeoutMillis"]], "resetTimeout": [["void"]], "timeoutOccurred": [["void"]]}, "className": "AbstractTimeoutHandler", "renamed": ["void", "function", "(", "boolean", "arg0", ")", "{", "this", ".", "timeoutEnabled", "=", "arg0", ";", "resetTimeout", "(", ")", ";", "}"], "nl": "Enables or disables the timeout entirely. This may be useful if you want to store the timeout value but wish to temporarily disable/enable timeouts. The default is for timeoutEnabled to be true but timeoutMillis to be set to 0 (ie disabled). This call will reset the current progress towards the timeout.", "nlToks": ["Enables", "or", "disables", "the", "timeout", "entirely", ".", "This", "may", "be", "useful", "if", "you", "want", "to", "store", "the", "timeout", "value", "but", "wish", "to", "temporarily", "disable/enable", "timeouts", ".", "The", "default", "is", "for", "timeoutEnabled", "to", "be", "true", "but", "timeoutMillis", "to", "be", "set", "to", "0", "-LRB-", "ie", "disabled", "-RRB-", ".", "This", "call", "will", "reset", "the", "current", "progress", "towards", "the", "timeout", "."], "path": "1000000000001/bitcoinj/tree/master/core/src/main/java/org/bitcoinj/net/AbstractTimeoutHandler.java", "idx": 1728}
{"memberVariables": {"coinbase": "boolean", "serialVersionUID=-8744924157056340509L": "long", "index": "long", "value": "Coin", "scriptBytes": "byte[]", "hash": "Sha256Hash", "height": "int"}, "code": ["Coin", "function", "(", ")", "{", "return", "value", ";", "}"], "memberFunctions": {"getHeight": [["int"]], "getHash": [["Sha256Hash"]], "getIndex": [["long"]], "isCoinbase": [["boolean"]], "hashCode": [["int"]], "serializeToStream": [["void", "OutputStream bos"]], "equals": [["boolean", "Object o"]], "toString": [["String"]], "getScriptBytes": [["byte[]"]]}, "className": "StoredTransactionOutput", "renamed": ["Coin", "function", "(", ")", "{", "return", "value", ";", "}"], "nl": "The value which this Transaction output holds.", "nlToks": ["The", "value", "which", "this", "Transaction", "output", "holds", "."], "path": "1000000000001/bitcoinj/tree/master/core/src/main/java/org/bitcoinj/core/StoredTransactionOutput.java", "idx": 1729}
{"memberVariables": {"billTo": "USAddress", "comment": "String", "items": "Items", "orderDate": "XMLGregorianCalendar", "shipTo": "USAddress"}, "code": ["Items", "function", "(", ")", "{", "return", "items", ";", "}"], "memberFunctions": {"getShipTo": [["USAddress"]], "getBillTo": [["USAddress"]], "setBillTo": [["void", "USAddress value"]], "setItems": [["void", "Items value"]], "setOrderDate": [["void", "XMLGregorianCalendar value"]], "setComment": [["void", "String value"]], "getOrderDate": [["XMLGregorianCalendar"]], "getComment": [["String"]], "setShipTo": [["void", "USAddress value"]]}, "className": "PurchaseOrderType", "renamed": ["Items", "function", "(", ")", "{", "return", "items", ";", "}"], "nl": "Gets the value of the items property.", "nlToks": ["Gets", "the", "value", "of", "the", "items", "property", "."], "path": "pmeijer/meta-core/tree/master/meta/DesignDataPackage/tools/jaxb-ri-2.2.6/samples/streaming-unmarshalling/src/primer/PurchaseOrderType.java", "idx": 1730}
{"memberVariables": {"awsSecretKey=null": "String", "awsAccessKeyId=null": "String", "associatetag=null": "String", "secretKeySpec=null": "SecretKeySpec", "HMAC_SHA256_ALGORITHM=\"HmacSHA256\"": "String", "REQUEST_METHOD=\"GET\"": "String", "UTF8_CHARSET=\"UTF-8\"": "String", "endpoint=null": "String", "REQUEST_URI=\"/onca/xml\"": "String", "mac=null": "Mac"}, "code": ["String", "function", "(", "String", "queryString", ")", "{", "Map", "<", "String", ",", "String", ">", "params", "=", "this", ".", "createParameterMap", "(", "queryString", ")", ";", "return", "this", ".", "sign", "(", "params", ")", ";", "}"], "memberFunctions": {"percentEncodeRfc3986": [["String", "String s"]], "createParameterMap": [["Map<String,String>", "String queryString"]], "hmac": [["String", "String stringToSign"]], "getInstance": [["SignedRequestsHelper", "String endpoint", "String awsAccessKeyId", "String awsSecretKey", "String associatetag"]], "canonicalize": [["String", "SortedMap<String,String> sortedParamMap"]], "timestamp": [["String"]]}, "className": "SignedRequestsHelper", "renamed": ["String", "function", "(", "String", "arg0", ")", "{", "Map", "<", "String", ",", "String", ">", "loc0", "=", "this", ".", "createParameterMap", "(", "arg0", ")", ";", "return", "this", ".", "sign", "(", "loc0", ")", ";", "}"], "nl": "This method signs requests in query-string form. It returns a URL that should be used to fetch the response. The URL returned should not be modified in any way, doing so will invalidate the signature and Amazon will reject the request.", "nlToks": ["This", "method", "signs", "requests", "in", "query-string", "form", ".", "It", "returns", "a", "URL", "that", "should", "be", "used", "to", "fetch", "the", "response", ".", "The", "URL", "returned", "should", "not", "be", "modified", "in", "any", "way", ",", "doing", "so", "will", "invalidate", "the", "signature", "and", "Amazon", "will", "reject", "the", "request", "."], "path": "adarsh-ideal/loklak_server/tree/master/src/org/loklak/api/amazon/SignedRequestsHelper.java", "idx": 1732}
{"memberVariables": {"node": "Node", "parent": "SimpleNodeTreeNodeAdapter", "children": "List<TreeNode>"}, "code": ["Node", "function", "(", ")", "{", "return", "node", ";", "}"], "memberFunctions": {"getChildCount": [["int"]], "checkChildren": [["void"]], "getChildAt": [["TreeNode", "int childIndex"]], "getParent": [["TreeNode"]], "getIndex": [["int", "TreeNode node"]], "children": [["Enumeration<TreeNode>"]], "getAllowsChildren": [["boolean"]], "toString": [["String"]], "isLeaf": [["boolean"]]}, "className": "SimpleNodeTreeNodeAdapter", "renamed": ["Node", "function", "(", ")", "{", "return", "node", ";", "}"], "nl": "retrieves the underlying node", "nlToks": ["retrieves", "the", "underlying", "node"], "path": "adangel/pmd/tree/master/pmd-core/src/main/java/net/sourceforge/pmd/util/viewer/model/SimpleNodeTreeNodeAdapter.java", "idx": 1733}
{"memberVariables": {"mLockManager": "BlockLockManager", "TEST_BLOCK_ID=9": "long", "mThrown=ExpectedException.none()": "ExpectedException", "TEST_SESSION_ID=2": "long", "mFolder=new TemporaryFolder()": "TemporaryFolder"}, "code": ["void", "function", "(", ")", "{", "long", "badLockId", "=", "1", ";", "mThrown", ".", "expect", "(", "BlockDoesNotExistException", ".", "class", ")", ";", "mThrown", ".", "expectMessage", "(", "ExceptionMessage", ".", "LOCK_RECORD_NOT_FOUND_FOR_LOCK_ID", ".", "getMessage", "(", "badLockId", ")", ")", ";", "mLockManager", ".", "validateLock", "(", "TEST_SESSION_ID", ",", "TEST_BLOCK_ID", ",", "badLockId", ")", ";", "}"], "memberFunctions": {"lockAcrossSessions": [["void"]], "stress": [["void"]], "unlockNonExistingLock": [["void"]], "dontReuseLock": [["void"]], "before": [["void"]], "reuseLock": [["void"]], "readBlocksWrite": [["void"]], "validateLockIdWithWrongBlockId": [["void"]], "setMaxLocks": [["void", "int maxLocks"]], "lockExpectingHang": [["void", "final BlockLockManager manager", "final long blockId"]], "lockBlock": [["void"]], "grabManyLocks": [["void"]], "validateLockIdWithWrongSessionId": [["void"]], "cleanupSession": [["void"]], "after": [["void"]]}, "className": "BlockLockManagerTest", "renamed": ["void", "function", "(", ")", "{", "long", "loc0", "=", "1", ";", "mThrown", ".", "expect", "(", "BlockDoesNotExistException", ".", "class", ")", ";", "mThrown", ".", "expectMessage", "(", "ExceptionMessage", ".", "LOCK_RECORD_NOT_FOUND_FOR_LOCK_ID", ".", "getMessage", "(", "loc0", ")", ")", ";", "mLockManager", ".", "validateLock", "(", "TEST_SESSION_ID", ",", "TEST_BLOCK_ID", ",", "loc0", ")", ";", "}"], "nl": "Tests that an exception is thrown when trying to validate a lock of a block via {@link BlockLockManager#validateLock(long,long,long)} which is not locked.", "nlToks": ["Tests", "that", "an", "exception", "is", "thrown", "when", "trying", "to", "validate", "a", "lock", "of", "a", "block", "via", "-LCB-", "@link", "BlockLockManager", "#validateLock", "-LRB-", "long", ",", "long", ",", "long", "-RRB-", "-RCB-", "which", "is", "not", "locked", "."], "path": "poemlin/alluxio/tree/master/core/server/src/test/java/alluxio/worker/block/BlockLockManagerTest.java", "idx": 1734}
{"memberVariables": {"apiKey": "String", "debugStream": "OutputStream", "scope": "String", "signatureType": "SignatureType", "callback": "String", "apiSecret": "String", "api": "Api"}, "code": ["ServiceBuilder", "function", "(", "String", "callback", ")", "{", "Preconditions", ".", "checkNotNull", "(", "callback", ",", "\"Callback can't be null\"", ")", ";", "this", ".", "callback", "=", "callback", ";", "return", "this", ";", "}"], "memberFunctions": {"debug": [["ServiceBuilder"]], "apiKey": [["ServiceBuilder", "String apiKey"]], "debugStream": [["ServiceBuilder", "OutputStream stream"]], "provider": [["ServiceBuilder", "Class<? extends Api> apiClass"], ["ServiceBuilder", "Api api"]], "build": [["OAuthService"]], "createApi": [["Api", "Class<? extends Api> apiClass"]], "scope": [["ServiceBuilder", "String scope"]], "signatureType": [["ServiceBuilder", "SignatureType type"]], "callback": [["ServiceBuilder", "String callback"]], "apiSecret": [["ServiceBuilder", "String apiSecret"]]}, "className": "ServiceBuilder", "renamed": ["ServiceBuilder", "function", "(", "String", "arg0", ")", "{", "Preconditions", ".", "checkNotNull", "(", "arg0", ",", "\"srini_string\"", ")", ";", "this", ".", "callback", "=", "arg0", ";", "return", "this", ";", "}"], "nl": "Adds an OAuth callback url", "nlToks": ["Adds", "an", "OAuth", "callback", "url"], "path": "pnsantos/scribe-java/tree/master/src/main/java/org/scribe/builder/ServiceBuilder.java", "idx": 1735}
{"memberVariables": {"factoryMappings": "Map<ClassType,EfgClassInfo>", "config": "Config", "validation": "ValidationState", "extInfo": "ExtensionInfo", "ts": "EfgTypeSystem"}, "code": ["void", "function", "(", "ExtensionInfo", "extInfo", ",", "ClassDecl", "cd", ")", "{", "ClassType", "ct", "=", "cd", ".", "type", "(", ")", ";", "EfgClassInfo", "efmi", "=", "get", "(", "ct", ")", ";", "if", "(", "efmi", "==", "null", ")", "{", "efmi", "=", "new", "EfgClassInfo", "(", "extInfo", ",", "EfgClassInfo", ".", "State", ".", "AUTO", ",", "cd", ".", "position", "(", ")", ",", "ct", ")", ";", "factoryMappings", ".", "put", "(", "ct", ",", "efmi", ")", ";", "}", "efmi", ".", "addAuto", "(", "cd", ")", ";", "}"], "memberFunctions": {"readConfig": [["Config", "ExtensionInfo extInfo"]], "superClass": [["String"]], "get": [["EfgClassInfo", "ClassType ct"]], "factoryMappings": [["Map<ClassType,EfgClassInfo>"]], "packageName": [["String"]], "lang": [["String"]], "superInterface": [["String"]], "ensureConfig": [["void", "ExtensionInfo extInfo"]], "validate": [["void", "ErrorQueue eq"]]}, "className": "EfgInfo", "renamed": ["void", "function", "(", "ExtensionInfo", "arg0", ",", "ClassDecl", "arg1", ")", "{", "ClassType", "loc0", "=", "arg1", ".", "type", "(", ")", ";", "EfgClassInfo", "loc1", "=", "get", "(", "loc0", ")", ";", "if", "(", "loc1", "==", "null", ")", "{", "loc1", "=", "new", "EfgClassInfo", "(", "arg0", ",", "EfgClassInfo", ".", "State", ".", "AUTO", ",", "arg1", ".", "position", "(", ")", ",", "loc0", ")", ";", "factoryMappings", ".", "put", "(", "loc0", ",", "loc1", ")", ";", "}", "loc1", ".", "addAuto", "(", "arg1", ")", ";", "}"], "nl": "Autogenerates a factory mapping skeleton for the given class.", "nlToks": ["Autogenerates", "a", "factory", "mapping", "skeleton", "for", "the", "given", "class", "."], "path": "polyglot-compiler/polyglot/tree/master/tools/efg/src/efg/util/EfgInfo.java", "idx": 1736}
{"memberVariables": {"attributes": "Map<String,String>", "id": "String", "state": "LaunchState"}, "code": ["String", "function", "(", ")", "{", "return", "id", ";", "}"], "memberFunctions": {"getState": [["LaunchState"]], "getAttributes": [["Map<String,String>"]], "toString": [["String"]]}, "className": "TaskStatus", "renamed": ["String", "function", "(", ")", "{", "return", "id", ";", "}"], "nl": "Return the task launch id for the task.", "nlToks": ["Return", "the", "task", "launch", "id", "for", "the", "task", "."], "path": "pperalta/spring-cloud-deployer/tree/master/spring-cloud-deployer-spi/src/main/java/org/springframework/cloud/deployer/spi/task/TaskStatus.java", "idx": 1737}
{"memberVariables": {}, "code": ["void", "function", "(", "Iterable", "<", "Range", "<", "C", ">>", "ranges", ")", "{", "for", "(", "Range", "<", "C", ">", "range", ":", "ranges", ")", "{", "remove", "(", "range", ")", ";", "}", "}"], "memberFunctions": {"add": [["void", "Range<C> range"]], "asDescendingSetOfRanges": [["Set<Range<C>>"]], "intersects": [["boolean", "Range<C> otherRange"]], "isEmpty": [["boolean"]], "clear": [["void"]], "enclosesAll": [["boolean", "RangeSet<C> other"], ["boolean", "Iterable<Range<C>> other"]], "subRangeSet": [["RangeSet<C>", "Range<C> view"]], "remove": [["void", "Range<C> range"]], "contains": [["boolean", "C value"]], "rangeContaining": [["Range<C>", "C value"]], "addAll": [["void", "RangeSet<C> other"], ["void", "Iterable<Range<C>> ranges"]], "hashCode": [["int"]], "equals": [["boolean", "@Nullable Object obj"]], "toString": [["String"]], "complement": [["RangeSet<C>"]], "encloses": [["boolean", "Range<C> otherRange"]], "asRanges": [["Set<Range<C>>"]], "span": [["Range<C>"]]}, "className": "RangeSet", "renamed": ["void", "function", "(", "Iterable", "<", "Range", "<", "C", ">>", "arg0", ")", "{", "for", "(", "Range", "<", "C", ">", "loc0", ":", "arg0", ")", "{", "remove", "(", "loc0", ")", ";", "}", "}"], "nl": "Removes all of the specified ranges from this range set (optional operation). This is equivalent to calling  {@link #remove} on each of the ranges in {@code other} inturn.", "nlToks": ["Removes", "all", "of", "the", "specified", "ranges", "from", "this", "range", "set", "-LRB-", "optional", "operation", "-RRB-", ".", "This", "is", "equivalent", "to", "calling", "-LCB-", "@link", "#remove", "-RCB-", "on", "each", "of", "the", "ranges", "in", "-LCB-", "@code", "other", "-RCB-", "inturn", "."], "path": "hazendaz/guava/tree/master/guava/src/com/google/common/collect/RangeSet.java", "idx": 1738}
{"memberVariables": {"feedId": "String", "destFileName": "String", "testId": "String"}, "code": ["String", "function", "(", ")", "{", "return", "testId", ";", "}"], "memberFunctions": {"setDestFileName": [["void", "String destFileName"]], "setFeedId": [["void", "String feedId"]], "toString": [["String"]], "getFeedId": [["String"]], "setTestId": [["void", "String testId"]], "getDestFileName": [["String"]]}, "className": "DestinationFileExistsDTO", "renamed": ["String", "function", "(", ")", "{", "return", "testId", ";", "}"], "nl": "Gets the test id.", "nlToks": ["Gets", "the", "test", "id", "."], "path": "pkesireddy/portico_fletcher/tree/master/FetcherTesterService/src/main/java/org/ithaka/cm/fetchertester/model/DestinationFileExistsDTO.java", "idx": 1740}
{"memberVariables": {"LOG=LoggerFactory.getLogger(DownloadUtils.class)": "Logger"}, "code": ["boolean", "function", "(", "final", "MoverDState", "<", "DsT", ">", "state", ")", "{", "final", "MoverDState", ".", "VisitorAdapter", "<", "Boolean", ",", "DsT", ">", "visitor", "=", "new", "MoverDState", ".", "VisitorAdapter", "<", "Boolean", ",", "DsT", ">", "(", "Boolean", ".", "FALSE", ")", "{", "@", "Override", "public", "Boolean", "visitDownloading", "(", "final", "Downloading", "<", "DsT", ">", "downloadingState", ")", "{", "return", "Boolean", ".", "TRUE", ";", "}", "}", ";", "return", "state", ".", "accept", "(", "visitor", ")", ".", "booleanValue", "(", ")", ";", "}"], "memberFunctions": {"determineFile": [["File", "final String name", "final DownloadTracker<MoverDState<Sha1DState<MsDState>>,Downloader<MoverDState<Sha1DState<MsDState>>>> tracker"], ["File", "final DownloadCommand downloadRequest", "final DownloadTracker<MoverDState<Sha1DState<MsDState>>,Downloader<MoverDState<Sha1DState<MsDState>>>> tracker"]], "defaultFile": [["File", "final String name"]], "issueHeadRequest": [["HeadMethod", "final URI uri", "final HttpServletResponse response"]], "isMoved": [["boolean", "final MoverDState<DsT> state"]], "downloadTorrentFile": [["File", "final String uri"]]}, "className": "DownloadUtils", "renamed": ["boolean", "function", "(", "final", "MoverDState", "<", "DsT", ">", "arg0", ")", "{", "final", "MoverDState", ".", "VisitorAdapter", "<", "Boolean", ",", "DsT", ">", "loc0", "=", "new", "MoverDState", ".", "VisitorAdapter", "<", "Boolean", ",", "DsT", ">", "(", "Boolean", ".", "FALSE", ")", "{", "@", "Override", "public", "Boolean", "visitDownloading", "(", "final", "Downloading", "<", "DsT", ">", "downloadingState", ")", "{", "return", "Boolean", ".", "TRUE", ";", "}", "}", ";", "return", "arg0", ".", "accept", "(", "loc0", ")", ".", "booleanValue", "(", ")", ";", "}"], "nl": "Returns whether a given state is the downloading state.", "nlToks": ["Returns", "whether", "a", "given", "state", "is", "the", "downloading", "state", "."], "path": "adamfisk/littleshoot-client/tree/master/client/services/src/main/java/org/lastbamboo/client/services/download/DownloadUtils.java", "idx": 1741}
{"memberVariables": {"m_createTables": "boolean", "m_config": "Configuration", "LOG=LoggerFactory.getLogger(SessionFactoryFactory.class)": "Logger"}, "code": ["SessionFactory", "function", "(", ")", "{", "LOG", ".", "debug", "(", "\"Building session factory...\"", ")", ";", "final", "SchemaExport", "export", "=", "new", "SchemaExport", "(", "this", ".", "m_config", ")", ";", "if", "(", "this", ".", "m_createTables", ")", "{", "export", ".", "create", "(", "false", ",", "true", ")", ";", "}", "return", "this", ".", "m_config", ".", "buildSessionFactory", "(", ")", ";", "}"], "memberFunctions": {}, "className": "SessionFactoryFactory", "renamed": ["SessionFactory", "function", "(", ")", "{", "LOG", ".", "debug", "(", "\"srini_string\"", ")", ";", "final", "SchemaExport", "loc0", "=", "new", "SchemaExport", "(", "this", ".", "m_config", ")", ";", "if", "(", "this", ".", "m_createTables", ")", "{", "loc0", ".", "create", "(", "false", ",", "true", ")", ";", "}", "return", "this", ".", "m_config", ".", "buildSessionFactory", "(", ")", ";", "}"], "nl": "Creates a new Hibernate session factory.", "nlToks": ["Creates", "a", "new", "Hibernate", "session", "factory", "."], "path": "adamfisk/littleshoot-client/tree/master/common/db-config/src/main/java/org/lastbamboo/common/db/config/SessionFactoryFactory.java", "idx": 1743}
{"memberVariables": {"AUTHOR=2": "int", "USER=1": "int", "USER_AGENT=0": "int", "stylesheet=null": "Stylesheet", "origin=USER_AGENT": "int", "mediaTypes=new ArrayList()": "List", "title": "String", "type": "String", "uri": "String", "content": "String"}, "code": ["void", "function", "(", "String", "uri", ")", "{", "this", ".", "uri", "=", "uri", ";", "}"], "memberFunctions": {"addMedium": [["void", "String medium"]], "setContent": [["void", "String content"]], "setStylesheet": [["void", "Stylesheet stylesheet"]], "getMedia": [["List"]], "getOrigin": [["int"]], "appliesToMedia": [["boolean", "String m"]], "setOrigin": [["void", "int origin"]], "getContent": [["String"]], "setTitle": [["void", "String title"]], "getStylesheet": [["Stylesheet"]], "setType": [["void", "String type"]], "getTitle": [["String"]], "getType": [["String"]], "setMedia": [["void", "String media"], ["void", "List mediaTypes"]], "isInline": [["boolean"]], "getUri": [["String"]]}, "className": "StylesheetInfo", "renamed": ["void", "function", "(", "String", "arg0", ")", "{", "this", ".", "uri", "=", "arg0", ";", "}"], "nl": "Sets the uri attribute of the StylesheetInfo object", "nlToks": ["Sets", "the", "uri", "attribute", "of", "the", "StylesheetInfo", "object"], "path": "plutogeek/flyingsaucer/tree/master/flying-saucer-core/src/main/java/org/xhtmlrenderer/css/sheet/StylesheetInfo.java", "idx": 1744}
{"memberVariables": {"game": "ShadowStruggles", "textures": "Array<Asset>", "sounds": "Array<Asset>", "rpgMaps": "Array<Asset>", "assetName": "String", "textureRegions": "Array<Asset>", "LOG=DataManager.class.getName()": "String", "assetType": "String"}, "code": ["Texture", "function", "(", "String", "textureName", ",", "String", "resourceType", ")", "{", "Texture", "texture", "=", "null", ";", "if", "(", "this", ".", "textures", "!=", "null", "&&", "FileMap", ".", "resourcesToDirectory", ".", "containsKey", "(", "resourceType", ")", ")", "{", "texture", "=", "game", ".", "getAssets", "(", ")", ".", "get", "(", "FileMap", ".", "resourcesToDirectory", ".", "get", "(", "resourceType", ")", "+", "textureName", "+", "\".png\"", ",", "Texture", ".", "class", ")", ";", "}", "return", "texture", ";", "}"], "memberFunctions": {"loadMaps": [["void"]], "disposeSounds": [["void"]], "getTextureRegion": [["TextureRegion", "String regionName", "String resourceType"]], "getTiledMap": [["TiledMap", "String mapName", "String resourceType"]], "disposeTextures": [["void"]], "disposeMaps": [["void"]], "unloadSounds": [["void", "Array<Asset> soundsToLoad"]], "loadSounds": [["void"]], "equals": [["boolean", "Object obj"]], "setAssetsToLoad": [["void", "Array<Asset> textureRegions", "Array<Asset> textures", "Array<Asset> sounds", "Array<Asset> rpgMaps"]], "loadAssets": [["void"]], "dispose": [["void"]], "loadTextureAtlas": [["void"]], "createTextureAtlas": [["void"]], "disposeAtlas": [["void"]], "loadTextures": [["void"]]}, "className": "Loader", "renamed": ["Texture", "function", "(", "String", "arg0", ",", "String", "arg1", ")", "{", "Texture", "loc0", "=", "null", ";", "if", "(", "this", ".", "textures", "!=", "null", "&&", "FileMap", ".", "resourcesToDirectory", ".", "containsKey", "(", "arg1", ")", ")", "{", "loc0", "=", "game", ".", "getAssets", "(", ")", ".", "get", "(", "FileMap", ".", "resourcesToDirectory", ".", "get", "(", "arg1", ")", "+", "arg0", "+", "\"srini_string\"", ",", "Texture", ".", "class", ")", ";", "}", "return", "loc0", ";", "}"], "nl": "Retrieves a Texture from the file system.", "nlToks": ["Retrieves", "a", "Texture", "from", "the", "file", "system", "."], "path": "prativa/shadowstruggles/tree/master/Shadow Struggles/src/br/edu/ifsp/pds/shadowstruggles/data/Loader.java", "idx": 1746}
{"memberVariables": {"QUERY_BY_TOKEN_VALUE=\"OAuth2RefreshTokenEntity.getByTokenValue\"": "String", "QUERY_EXPIRED_BY_DATE=\"OAuth2RefreshTokenEntity.getAllExpiredByDate\"": "String", "QUERY_BY_CLIENT=\"OAuth2RefreshTokenEntity.getByClient\"": "String", "PARAM_CLIENT=\"client\"": "String", "QUERY_ALL=\"OAuth2RefreshTokenEntity.getAll\"": "String", "PARAM_TOKEN_VALUE=\"tokenValue\"": "String", "jwt": "JWT", "PARAM_DATE=\"date\"": "String", "authenticationHolder": "AuthenticationHolderEntity", "client": "ClientDetailsEntity", "expiration": "Date", "id": "Long"}, "code": ["boolean", "function", "(", ")", "{", "return", "getExpiration", "(", ")", "==", "null", "?", "false", ":", "System", ".", "currentTimeMillis", "(", ")", ">", "getExpiration", "(", ")", ".", "getTime", "(", ")", ";", "}"], "memberFunctions": {"getValue": [["String"]], "setClient": [["void", "ClientDetailsEntity client"]], "getAuthenticationHolder": [["AuthenticationHolderEntity"]], "getExpiration": [["Date"]], "setJwt": [["void", "JWT jwt"]], "setId": [["void", "Long id"]], "getJwt": [["JWT"]], "getId": [["Long"]], "setAuthenticationHolder": [["void", "AuthenticationHolderEntity authenticationHolder"]], "setExpiration": [["void", "Date expiration"]], "getClient": [["ClientDetailsEntity"]]}, "className": "OAuth2RefreshTokenEntity", "renamed": ["boolean", "function", "(", ")", "{", "return", "getExpiration", "(", ")", "==", "null", "?", "false", ":", "System", ".", "currentTimeMillis", "(", ")", ">", "getExpiration", "(", ")", ".", "getTime", "(", ")", ";", "}"], "nl": "Has this token expired?", "nlToks": ["Has", "this", "token", "expired", "?"], "path": "adilansari/OpenID-Connect-Java-Spring-Server/tree/master/openid-connect-common/src/main/java/org/mitre/oauth2/model/OAuth2RefreshTokenEntity.java", "idx": 1747}
{"memberVariables": {"s1": "Scan", "s2": "Scan"}, "code": ["String", "function", "(", "String", "fldname", ")", "{", "if", "(", "s1", ".", "hasField", "(", "fldname", ")", ")", "return", "s1", ".", "getString", "(", "fldname", ")", ";", "else", "return", "s2", ".", "getString", "(", "fldname", ")", ";", "}"], "memberFunctions": {"next": [["boolean"]], "getInt": [["int", "String fldname"]], "getVal": [["Constant", "String fldname"]], "beforeFirst": [["void"]], "close": [["void"]], "hasField": [["boolean", "String fldname"]]}, "className": "ProductScan", "renamed": ["String", "function", "(", "String", "arg0", ")", "{", "if", "(", "s1", ".", "hasField", "(", "arg0", ")", ")", "return", "s1", ".", "getString", "(", "arg0", ")", ";", "else", "return", "s2", ".", "getString", "(", "arg0", ")", ";", "}"], "nl": "Returns the string value of the specified field. The value is obtained from whichever scan contains the field.", "nlToks": ["Returns", "the", "string", "value", "of", "the", "specified", "field", ".", "The", "value", "is", "obtained", "from", "whichever", "scan", "contains", "the", "field", "."], "path": "prerit2803/DBMSProject2/tree/master/simpledb/query/ProductScan.java", "idx": 1748}
{"memberVariables": {"mustUnderstand": "List<QName>", "replyTo": "EndpointReferenceType", "faultTo": "EndpointReferenceType", "messageID": "AttributedURIType", "action": "AttributedURIType", "from": "EndpointReferenceType", "namespaceURI": "String", "to": "EndpointReferenceType", "toURIType": "AttributedURIType", "duplicate": "QName", "relatesTo": "RelatesToType"}, "code": ["void", "function", "(", "String", "uri", ")", "{", "namespaceURI", "=", "uri", ";", "}"], "memberFunctions": {"getMustUnderstand": [["List<QName>"]], "setAction": [["void", "AttributedURIType iri"]], "getReplyTo": [["EndpointReferenceType"]], "setFrom": [["void", "EndpointReferenceType epr"]], "setDuplicate": [["void", "QName dup"]], "getRelatesTo": [["RelatesToType"]], "getTo": [["AttributedURIType"]], "getAction": [["AttributedURIType"]], "setMessageID": [["void", "AttributedURIType iri"]], "getMessageID": [["AttributedURIType"]], "getFaultTo": [["EndpointReferenceType"]], "setReplyTo": [["void", "EndpointReferenceType ref"]], "setFaultTo": [["void", "EndpointReferenceType ref"]], "getDuplicate": [["QName"]], "setTo": [["void", "AttributedURIType t"], ["void", "EndpointReferenceType epr"]], "setRelatesTo": [["void", "RelatesToType rel"]], "getToEndpointReference": [["EndpointReferenceType"]], "getNamespaceURI": [["String"]], "toString": [["String"]], "createCompatibleResponseProperties": [["AddressingProperties"]], "getFrom": [["EndpointReferenceType"]]}, "className": "AddressingProperties", "renamed": ["void", "function", "(", "String", "arg0", ")", "{", "namespaceURI", "=", "arg0", ";", "}"], "nl": "Used to specify a different WS-Addressing namespace URI,  so as to cause MAPs to be exposed (i.e. encoded in externalized message with a different WS-Addressing version).", "nlToks": ["Used", "to", "specify", "a", "different", "WS-Addressing", "namespace", "URI", ",", "so", "as", "to", "cause", "MAPs", "to", "be", "exposed", "-LRB-", "i.e.", "encoded", "in", "externalized", "message", "with", "a", "different", "WS-Addressing", "version", "-RRB-", "."], "path": "primesign/cxf/tree/master/core/src/main/java/org/apache/cxf/ws/addressing/AddressingProperties.java", "idx": 1750}
{"memberVariables": {"_stack_type": "String", "_name": "String", "_index": "int", "_use_count=0": "int"}, "code": ["String", "function", "(", ")", "{", "return", "_stack_type", ";", "}"], "memberFunctions": {"use_count": [["int"]], "name": [["String"]], "is_non_term": [["boolean"]], "note_use": [["void"]], "index": [["int"]], "toString": [["String"]]}, "className": "symbol", "renamed": ["String", "function", "(", ")", "{", "return", "_stack_type", ";", "}"], "nl": "String for the type of object used for the symbol on the parse stack.", "nlToks": ["String", "for", "the", "type", "of", "object", "used", "for", "the", "symbol", "on", "the", "parse", "stack", "."], "path": "polyglot-compiler/polyglot/tree/master/tools/java_cup/src/java_cup/symbol.java", "idx": 1755}
{"memberVariables": {"SEPARATOR=\"/\"": "String", "serialVersionUID=-1207227692436086387L": "long", "CUR_DIR=\".\"": "String", "WILDCARD=\"*\"": "String", "mUri": "URI", "EMPTY_URI=new AlluxioURI(\"\")": "AlluxioURI"}, "code": ["String", "function", "(", ")", "{", "return", "mUri", ".", "getPath", "(", ")", ";", "}"], "memberFunctions": {"getParent": [["AlluxioURI"]], "getDepth": [["int"]], "getName": [["String"]], "getScheme": [["String"]], "isRoot": [["boolean"]], "isPathAbsolute": [["boolean"]], "containsWildcard": [["boolean"]], "compareTo": [["int", "AlluxioURI other"]], "getAuthority": [["String"]], "hasScheme": [["boolean"]], "getPort": [["int"]], "getLeadingPath": [["String", "int n"]], "hashCode": [["int"]], "hasWindowsDrive": [["boolean", "String path", "boolean slashed"]], "equals": [["boolean", "Object o"]], "isAbsolute": [["boolean"]], "getQueryMap": [["Map<String,String>"]], "toString": [["String"]], "join": [["AlluxioURI", "String suffix"], ["AlluxioURI", "AlluxioURI suffix"]], "normalizePath": [["String", "String path"]], "getHost": [["String"]], "hasAuthority": [["boolean"]]}, "className": "AlluxioURI", "renamed": ["String", "function", "(", ")", "{", "return", "mUri", ".", "getPath", "(", ")", ";", "}"], "nl": "Gets the path component of the  {@link AlluxioURI}.", "nlToks": ["Gets", "the", "path", "component", "of", "the", "-LCB-", "@link", "AlluxioURI", "-RCB-", "."], "path": "poemlin/alluxio/tree/master/core/common/src/main/java/alluxio/AlluxioURI.java", "idx": 1756}
{"memberVariables": {"addressHeader": "int", "INTERVAL=TARGET_TIMESPAN / TARGET_SPACING": "int", "alertSigningKey": "byte[]", "acceptableAddressCodes": "int[]", "packetMagic": "long", "p2shHeader": "int", "paramSet=Collections.synchronizedList(new ArrayList<NetworkParameters>())": "List<NetworkParameters>", "PROTOCOL_VERSION=70001": "int", "genesisBlock": "Block", "proofOfWorkLimit": "BigInteger", "subsidyDecreaseBlockCount": "int", "port": "int", "MAX_MONEY=new BigInteger(\"21000000\",10).multiply(COIN)": "BigInteger", "TARGET_SPACING=10 * 60": "int", "dnsSeeds": "String[]", "checkpoints=new HashMap<Integer,Sha256Hash>()": "Map<Integer,Sha256Hash>", "SATOSHI_KEY=Hex.decode(\"04fc9702847840aaf195de8442ebecedf5b095cdbb9bc716bda9110971b28a49e0ead8564ff0db22209e0374782c093bb899692d524e9d6a6956e7c5ecbcd68284\")": "byte[]", "interval": "int", "id": "String", "spendableCoinbaseDepth": "int", "dumpedPrivateKeyHeader": "int", "targetTimespan": "int", "TARGET_TIMESPAN=14 * 24 * 60* 60": "int", "BIP16_ENFORCE_TIME=1333238400": "int"}, "code": ["boolean", "function", "(", "int", "height", ",", "Sha256Hash", "hash", ")", "{", "Sha256Hash", "checkpointHash", "=", "checkpoints", ".", "get", "(", "height", ")", ";", "return", "checkpointHash", "==", "null", "||", "checkpointHash", ".", "equals", "(", "hash", ")", ";", "}"], "memberFunctions": {"regTests": [["NetworkParameters"]], "allowEmptyPeerChain": [["boolean"]], "getDumpedPrivateKeyHeader": [["int"]], "testNet2": [["NetworkParameters"]], "testNet3": [["NetworkParameters"]], "unitTests": [["NetworkParameters"]], "getId": [["String"]], "getAddressHeader": [["int"]], "getAcceptableAddressCodes": [["int[]"]], "prodNet": [["NetworkParameters"]], "fromID": [["NetworkParameters", "String id"]], "getTargetTimespan": [["int"]], "getDnsSeeds": [["String[]"]], "hashCode": [["int"]], "getSpendableCoinbaseDepth": [["int"]], "testNet": [["NetworkParameters"]], "calculateBlockPoWHash": [["Sha256Hash", "Block b"]], "getMaxMoney": [["BigInteger"]], "getParamsFromAddressByte": [["NetworkParameters", "int version"]], "registerParams": [["void", "NetworkParameters params"]], "isCheckpoint": [["boolean", "int height"]], "getP2SHHeader": [["int"]], "getInterval": [["int"]], "getRetargetBlockCount": [["int"], ["int", "StoredBlock cursor"]], "getGenesisBlock": [["Block"]], "getSubsidyDecreaseBlockCount": [["int"]], "createGenesis": [["Block", "NetworkParameters n"]], "getPacketMagic": [["long"]], "getPort": [["int"]], "getAlertSigningKey": [["byte[]"]], "equals": [["boolean", "Object other"]], "isAcceptableAddressVersion": [["boolean", "int version"]], "getURIScheme": [["String"]], "getProofOfWorkLimit": [["BigInteger"]]}, "className": "NetworkParameters", "renamed": ["boolean", "function", "(", "int", "arg0", ",", "Sha256Hash", "arg1", ")", "{", "Sha256Hash", "loc0", "=", "checkpoints", ".", "get", "(", "arg0", ")", ";", "return", "loc0", "==", "null", "||", "loc0", ".", "equals", "(", "arg1", ")", ";", "}"], "nl": "Returns true if the block height is either not a checkpoint, or is a checkpoint and the hash matches.", "nlToks": ["Returns", "true", "if", "the", "block", "height", "is", "either", "not", "a", "checkpoint", ",", "or", "is", "a", "checkpoint", "and", "the", "hash", "matches", "."], "path": "plncoin/plncoin-and/tree/master/plncoinj/core/src/main/java/com/google/bitcoin/core/NetworkParameters.java", "idx": 1757}
{"memberVariables": {"handler": "IParserEventHandler", "GROUP_END=new GroupEndEvent()": "IParserEvent", "GROUP_START=new GroupStartEvent()": "IParserEvent", "DOCUMENT_START=new DocumentStartEvent()": "IParserEvent", "handlerStack=new ArrayDeque<IParserEventHandler>()": "Deque<IParserEventHandler>", "m_fontEncodings=new HashMap<Integer,String>()": "Map<Integer,String>", "stack=new ArrayDeque<ParserState>()": "Deque<ParserState>", "DOCUMENT_END=new DocumentEndEvent()": "IParserEvent", "state=new ParserState()": "ParserState", "skipBytes": "int"}, "code": ["void", "function", "(", "byte", "[", "]", "data", ")", "{", "handleEvent", "(", "new", "BinaryBytesEvent", "(", "data", ")", ")", ";", "}"], "memberFunctions": {"processCharacter": [["void", "char c"]], "processUpr": [["void", "IParserEvent command"]], "handleEvent": [["void", "IParserEvent event"]], "processDocumentEnd": [["void"]], "processGroupEnd": [["void"]], "processCommand": [["void", "Command command", "int parameter", "boolean hasParameter", "boolean optional"]], "parse": [["void", "IRtfSource source", "IRtfListener listener"]], "processCharacterBytes": [["void", "byte[] data"]], "processString": [["void", "String string"]], "processDocumentStart": [["void"]], "processUnicodeAlternateSkipCount": [["void", "int parameter"]], "handleCommand": [["void", "Command command", "int parameter", "boolean hasParameter", "boolean optional"]], "processGroupStart": [["void"]], "processFont": [["void", "int parameter"]], "processEncoding": [["void", "Command command", "boolean hasParameter", "int parameter"]], "processUnicode": [["void", "int parameter"]], "currentEncoding": [["String"]], "processFontCharset": [["void", "int parameter"]]}, "className": "StandardRtfParser", "renamed": ["void", "function", "(", "byte", "[", "]", "arg0", ")", "{", "handleEvent", "(", "new", "BinaryBytesEvent", "(", "arg0", ")", ")", ";", "}"], "nl": "Handle event from the RawRtfParser.", "nlToks": ["Handle", "event", "from", "the", "RawRtfParser", "."], "path": "harrisaoz/rtfparserkit/tree/master/RTF Parser Kit/src/main/java/com/rtfparserkit/parser/standard/StandardRtfParser.java", "idx": 1758}
{"memberVariables": {"spaceDelimited": "boolean", "SINCE=\"SINCE\"": "String", "defaultValue": "String", "caseSensitive": "boolean", "SPACE_DELIMITED=\"SPACE-DELIMITED\"": "String", "description": "String", "serialVersionUID=1L": "long", "RESTART_REQUIRED=\"RESTART REQUIRED\"": "String", "restartRequired": "boolean", "name": "String", "CASE_SENSITIVE=\"CASE-SENSITIVE\"": "String", "currentValue": "String", "since": "String"}, "code": ["int", "function", "(", "int", "defaultValue", ")", "{", "try", "{", "if", "(", "!", "StringUtils", ".", "isEmpty", "(", "currentValue", ")", ")", "{", "return", "Integer", ".", "parseInt", "(", "currentValue", ".", "trim", "(", ")", ")", ";", "}", "}", "catch", "(", "NumberFormatException", "e", ")", "{", "}", "return", "defaultValue", ";", "}"], "memberFunctions": {"getChar": [["char", "char defaultValue"]], "getBoolean": [["boolean", "boolean defaultValue"]], "getString": [["String", "String defaultValue"]], "getMap": [["Map<String,String>"]], "isDefaultValue": [["boolean"]], "getStrings": [["List<String>"], ["List<String>", "String separator"]]}, "className": "SettingModel", "renamed": ["int", "function", "(", "int", "arg0", ")", "{", "try", "{", "if", "(", "!", "StringUtils", ".", "isEmpty", "(", "currentValue", ")", ")", "{", "return", "Integer", ".", "parseInt", "(", "currentValue", ".", "trim", "(", ")", ")", ";", "}", "}", "catch", "(", "NumberFormatException", "loc0", ")", "{", "}", "return", "arg0", ";", "}"], "nl": "Returns the integer value for the currentValue. If the currentValue can not be interpreted as an integer, the defaultValue is returned.", "nlToks": ["Returns", "the", "integer", "value", "for", "the", "currentValue", ".", "If", "the", "currentValue", "can", "not", "be", "interpreted", "as", "an", "integer", ",", "the", "defaultValue", "is", "returned", "."], "path": "pombreda/gitblit/tree/master/src/main/java/com/gitblit/models/SettingModel.java", "idx": 1760}
{"memberVariables": {"mParents": "List<DirectedAcyclicGraphNode<T>>", "mChildren": "List<DirectedAcyclicGraphNode<T>>", "mPayload": "T"}, "code": ["void", "function", "(", "DirectedAcyclicGraphNode", "<", "T", ">", "parent", ")", "{", "mParents", ".", "add", "(", "parent", ")", ";", "}"], "memberFunctions": {"getParents": [["List<DirectedAcyclicGraphNode<T>>"]], "getPayload": [["T"]], "getChildren": [["List<DirectedAcyclicGraphNode<T>>"]], "removeChild": [["void", "DirectedAcyclicGraphNode<T> child"]], "addChild": [["void", "DirectedAcyclicGraphNode<T> child"]]}, "className": "DirectedAcyclicGraphNode", "renamed": ["void", "function", "(", "DirectedAcyclicGraphNode", "<", "T", ">", "arg0", ")", "{", "mParents", ".", "add", "(", "arg0", ")", ";", "}"], "nl": "Adds a parent node to the node.", "nlToks": ["Adds", "a", "parent", "node", "to", "the", "node", "."], "path": "poemlin/alluxio/tree/master/core/common/src/main/java/alluxio/collections/DirectedAcyclicGraphNode.java", "idx": 1761}
{"memberVariables": {"status=-1": "int", "INFINITY=Integer.MAX_VALUE": "int", "request=null": "HttpServletRequest", "base=null": "URI", "response=null": "HttpServletResponse"}, "code": ["void", "function", "(", "String", "type", ")", "{", "this", ".", "response", ".", "setContentType", "(", "type", ")", ";", "}"], "memberFunctions": {"lookup": [["URI", "DAVResource resource"]], "getDepth": [["int"]], "read": [["InputStream"]], "getNormalizedPath": [["String"]], "getDestination": [["URI"]], "getMethod": [["String"]], "getStatus": [["int"]], "hasRequestBody": [["boolean"]], "setStatus": [["void", "int status"]], "setHeader": [["void", "String name", "String value"]], "getOverwrite": [["boolean"]], "getOriginalPath": [["String"]], "write": [["OutputStream"], ["PrintWriter", "String encoding"]], "getIfModifiedSince": [["Date"]]}, "className": "DAVTransaction", "renamed": ["void", "function", "(", "String", "arg0", ")", "{", "this", ".", "response", ".", "setContentType", "(", "arg0", ")", ";", "}"], "nl": "Set the HTTP Content-Type header.", "nlToks": ["Set", "the", "HTTP", "Content-Type", "header", "."], "path": "pfumagalli/webdav/tree/master/src/main/java/it/could/webdav/DAVTransaction.java", "idx": 1763}
{"memberVariables": {"reason": "String", "feedId": "String", "testId": "String", "batchId": "String", "runStatus": "String"}, "code": ["String", "function", "(", ")", "{", "return", "testId", ";", "}"], "memberFunctions": {"setFeedId": [["void", "String feedId"]], "isFeedRunnable": [["boolean"]], "getReason": [["String"]], "getRunStatus": [["String"]], "setReason": [["void", "String reason"]], "getBatchId": [["String"]], "toString": [["String"]], "getFeedId": [["String"]], "setBatchId": [["void", "String batchId"]], "setTestId": [["void", "String testId"]], "setRunStatus": [["void", "String runStatus"]]}, "className": "FeedConfigResponse", "renamed": ["String", "function", "(", ")", "{", "return", "testId", ";", "}"], "nl": "Gets the test id.", "nlToks": ["Gets", "the", "test", "id", "."], "path": "pkesireddy/portico_fletcher/tree/master/FetcherTesterService/src/main/java/org/ithaka/cm/fetchertester/model/FeedConfigResponse.java", "idx": 1764}
{"memberVariables": {"factory": "TransformerFactory", "errorListener": "ErrorListener", "output=new Properties()": "Properties", "styleSheet": "Source", "source": "Source", "uriResolver": "URIResolver", "params=new HashMap<String,Object>()": "Map<String,Object>"}, "code": ["void", "function", "(", "Source", "s", ")", "{", "styleSheet", "=", "s", ";", "}"], "memberFunctions": {"setSource": [["void", "Source s"]], "setFactory": [["void", "TransformerFactory f"]], "transformTo": [["void", "Result r"]], "setErrorListener": [["void", "ErrorListener l"]], "clearParameters": [["void"]], "transformToString": [["String"]], "setURIResolver": [["void", "URIResolver r"]], "clearOutputProperties": [["void"]], "addParameter": [["void", "String name", "Object value"]], "transformToDocument": [["Document"]], "addOutputProperty": [["void", "String name", "String value"]]}, "className": "Transformation", "renamed": ["void", "function", "(", "Source", "arg0", ")", "{", "styleSheet", "=", "arg0", ";", "}"], "nl": "Set the stylesheet to use.", "nlToks": ["Set", "the", "stylesheet", "to", "use", "."], "path": "phbenisc/xmlunit/tree/master/xmlunit-core/src/main/java/org/xmlunit/transform/Transformation.java", "idx": 1765}
{"memberVariables": {"DIR_NAME=\"USBCameraTest\"": "String", "mOutputPath": "String", "mMediaMuxer": "MediaMuxer", "mStatredCount": "int", "DEBUG=true": "boolean", "TAG=\"MediaMuxerWrapper\"": "String", "mDateTimeFormat=new SimpleDateFormat(\"yyyy-MM-dd-HH-mm-ss\",Locale.US)": "SimpleDateFormat", "mIsStarted": "boolean", "mEncoderCount": "int", "mAudioEncoder": "MediaEncoder", "mVideoEncoder": "MediaEncoder"}, "code": ["File", "function", "(", "final", "String", "type", ",", "final", "String", "ext", ")", "{", "final", "File", "dir", "=", "new", "File", "(", "Environment", ".", "getExternalStoragePublicDirectory", "(", "type", ")", ",", "DIR_NAME", ")", ";", "Log", ".", "d", "(", "TAG", ",", "\"path=\"", "+", "dir", ".", "toString", "(", ")", ")", ";", "dir", ".", "mkdirs", "(", ")", ";", "if", "(", "dir", ".", "canWrite", "(", ")", ")", "{", "return", "new", "File", "(", "dir", ",", "getDateTimeString", "(", ")", "+", "ext", ")", ";", "}", "return", "null", ";", "}"], "memberFunctions": {"addTrack": [["int", "final MediaFormat format"]], "prepare": [["void"]], "getDateTimeString": [["String"]], "stop": [["void"]], "addEncoder": [["void", "final MediaEncoder encoder"]], "startRecording": [["void"]], "start": [["boolean"]], "isStarted": [["boolean"]], "getOutputPath": [["String"]], "stopRecording": [["void"]], "writeSampleData": [["void", "final int trackIndex", "final ByteBuffer byteBuf", "final MediaCodec.BufferInfo bufferInfo"]]}, "className": "MediaMuxerWrapper", "renamed": ["File", "function", "(", "final", "String", "arg0", ",", "final", "String", "arg1", ")", "{", "final", "File", "loc0", "=", "new", "File", "(", "Environment", ".", "getExternalStoragePublicDirectory", "(", "arg0", ")", ",", "DIR_NAME", ")", ";", "Log", ".", "d", "(", "TAG", ",", "\"srini_string\"", "+", "loc0", ".", "toString", "(", ")", ")", ";", "loc0", ".", "mkdirs", "(", ")", ";", "if", "(", "loc0", ".", "canWrite", "(", ")", ")", "{", "return", "new", "File", "(", "loc0", ",", "getDateTimeString", "(", ")", "+", "arg1", ")", ";", "}", "return", "null", ";", "}"], "nl": "generate output file", "nlToks": ["generate", "output", "file"], "path": "princeofdream/USBCamera/tree/master/usbCameraCommon/src/main/java/com/serenegiant/encoder/MediaMuxerWrapper.java", "idx": 1766}
{"memberVariables": {}, "code": ["String", "function", "(", "InputStream", "inStream", ")", "{", "BufferedReader", "in", "=", "new", "BufferedReader", "(", "new", "InputStreamReader", "(", "inStream", ")", ")", ";", "StringBuffer", "buf", "=", "new", "StringBuffer", "(", ")", ";", "String", "line", "=", "in", ".", "readLine", "(", ")", ";", "while", "(", "line", "!=", "null", ")", "{", "buf", ".", "append", "(", "line", ")", ";", "buf", ".", "append", "(", "\" \"", ")", ";", "line", "=", "in", ".", "readLine", "(", ")", ";", "}", "return", "buf", ".", "toString", "(", ")", ";", "}"], "memberFunctions": {}, "className": "ResponseUtil", "renamed": ["String", "function", "(", "InputStream", "arg0", ")", "{", "BufferedReader", "loc0", "=", "new", "BufferedReader", "(", "new", "InputStreamReader", "(", "arg0", ")", ")", ";", "StringBuffer", "loc1", "=", "new", "StringBuffer", "(", ")", ";", "String", "loc2", "=", "loc0", ".", "readLine", "(", ")", ";", "while", "(", "loc2", "!=", "null", ")", "{", "loc1", ".", "append", "(", "loc2", ")", ";", "loc1", ".", "append", "(", "\"srini_string\"", ")", ";", "loc2", "=", "loc0", ".", "readLine", "(", ")", ";", "}", "return", "loc1", ".", "toString", "(", ")", ";", "}"], "nl": "Reads in the Response String from Server.", "nlToks": ["Reads", "in", "the", "Response", "String", "from", "Server", "."], "path": "adamabeshouse/cbioportal/tree/master/core/src/main/java/org/mskcc/cbio/portal/util/ResponseUtil.java", "idx": 1767}
{"memberVariables": {"ppfactories=new ArrayList<PropPanelFactory>()": "Collection<PropPanelFactory>"}, "code": ["void", "function", "(", "PropPanelFactory", "factory", ")", "{", "ppfactories", ".", "remove", "(", "factory", ")", ";", "}"], "memberFunctions": {"addPropPanelFactory": [["void", "PropPanelFactory factory"]], "getFactories": [["Collection<PropPanelFactory>"]]}, "className": "PropPanelFactoryManager", "renamed": ["void", "function", "(", "PropPanelFactory", "arg0", ")", "{", "ppfactories", ".", "remove", "(", "arg0", ")", ";", "}"], "nl": "For modules, it would be usefule to be able to remove their factories. TODO: The effect of this method is not yet tested!", "nlToks": ["For", "modules", ",", "it", "would", "be", "usefule", "to", "be", "able", "to", "remove", "their", "factories", ".", "TODO", ":", "The", "effect", "of", "this", "method", "is", "not", "yet", "tested", "!"], "path": "pichiliani/CoArgoUML/tree/master/v0.24/fonte/src/argouml-app/src/org/argouml/uml/ui/PropPanelFactoryManager.java", "idx": 1768}
{"memberVariables": {"m_listener": "WriteListener", "m_socketChannel": "SocketChannel", "m_selectorManager": "SelectorManager", "m_numQueued": "int", "m_buffers": "Collection", "m_totalBytes": "long", "m_closed": "boolean", "NO_OP_LISTENER=new NoOpWriteListener()": "WriteListener", "m_startTime": "long", "LOG=LoggerFactory.getLogger(WriteHandlerImpl.class)": "Logger", "m_writeBuffers=Collections.synchronizedList(new LinkedList())": "List"}, "code": ["void", "function", "(", ")", "{", "this", ".", "m_selectorManager", ".", "addChannelInterestLater", "(", "this", ".", "m_socketChannel", ",", "SelectionKey", ".", "OP_WRITE", ")", ";", "}"], "memberFunctions": {"getTotalBytes": [["long"]], "disableWriteLater": [["void"]], "onWrite": [["void", "final WriteData data"]], "writeLater": [["void", "final Collection buffers"], ["void", "final ByteBuffer buffer"], ["void", "final ByteBuffer buffer", "final WriteListener listener"]], "writeBuffer": [["boolean", "final ByteBuffer buffer"]], "enableWrite": [["void"]], "getBuffers": [["Collection"]], "checkForNull": [["void", "final Collection buffers"]], "getStartTime": [["long"]], "write": [["void", "final ByteBuffer buffer", "final WriteListener listener"], ["void", "final ByteBuffer buffer"], ["void", "final Collection buffers"], ["boolean"]], "close": [["void"]], "getListener": [["WriteListener"]], "getNumQueued": [["int"]]}, "className": "WriteHandlerImpl", "renamed": ["void", "function", "(", ")", "{", "this", ".", "m_selectorManager", ".", "addChannelInterestLater", "(", "this", ".", "m_socketChannel", ",", "SelectionKey", ".", "OP_WRITE", ")", ";", "}"], "nl": "Activates interest in writing from a thread other than the selector thread.", "nlToks": ["Activates", "interest", "in", "writing", "from", "a", "thread", "other", "than", "the", "selector", "thread", "."], "path": "adamfisk/littleshoot-client/tree/master/common/nio/src/main/java/org/lastbamboo/common/nio/WriteHandlerImpl.java", "idx": 1769}
{"memberVariables": {}, "code": ["void", "function", "(", ")", "{", "String", "out", "=", "WebUtils", ".", "convertMsToClockTime", "(", "TimeUnit", ".", "MINUTES", ".", "toMillis", "(", "1", ")", ")", ";", "Assert", ".", "assertEquals", "(", "\"0 day(s), 0 hour(s), 1 minute(s), and 0 second(s)\"", ",", "out", ")", ";", "}"], "memberFunctions": {"convertToClockTimeWithOneMinute30Seconds": [["void"]], "convertToClockTimeWithOneDay4Hours10Minutes45SecondsWithStopwatch": [["void"]], "convertToClockTimeWithNegativeValue": [["void"]], "convertToClockTimeWithShortValue": [["void"]], "convertToClockTimeWithOneDay4Hours10Minutes45Seconds": [["void"]], "convertToClockTimeWithOneHour10Minutes45Seconds": [["void"]], "convertToClockTimeWithOneHour": [["void"]], "convertToClockTimeWithOneSecond": [["void"]], "convertToClockTimeWithOneDay": [["void"]]}, "className": "WebUtilsTest", "renamed": ["void", "function", "(", ")", "{", "String", "loc0", "=", "WebUtils", ".", "convertMsToClockTime", "(", "TimeUnit", ".", "MINUTES", ".", "toMillis", "(", "1", ")", ")", ";", "Assert", ".", "assertEquals", "(", "\"srini_string\"", ",", "loc0", ")", ";", "}"], "nl": "Tests the  {@link WebUtils#convertMsToClockTime(long)} method with one minute.", "nlToks": ["Tests", "the", "-LCB-", "@link", "WebUtils", "#convertMsToClockTime", "-LRB-", "long", "-RRB-", "-RCB-", "method", "with", "one", "minute", "."], "path": "poemlin/alluxio/tree/master/core/server/src/test/java/alluxio/web/WebUtilsTest.java", "idx": 1770}
{"memberVariables": {"repository": "TerminalDeviceRepository"}, "code": ["void", "function", "(", "TerminalDevice", "device", ")", "{", "repository", ".", "save", "(", "device", ")", ";", "}"], "memberFunctions": {"getStatus": [["TerminalDevice", "@PathVariable long device_id"]], "removeDevice": [["void", "@PathVariable long device_id"]], "getSchedule": [["Set<Schedule>", "@PathVariable long device_id"]], "setStatus": [["void", "@ModelAttribute TerminalDevice device"]]}, "className": "TerminalDeviceController", "renamed": ["void", "function", "(", "TerminalDevice", "arg0", ")", "{", "repository", ".", "save", "(", "arg0", ")", ";", "}"], "nl": "Add a terminal", "nlToks": ["Add", "a", "terminal"], "path": "adalee-group/watering-system/tree/master/server/device-service/src/main/java/edu/hucare/controller/TerminalDeviceController.java", "idx": 1772}
{"memberVariables": {"errorLevelFolder=0": "int", "tooltip": "String", "errorLevel=0": "int", "value=\"\"": "String"}, "code": ["boolean", "function", "(", ")", "{", "return", "(", "this", ".", "errorLevel", ">", "0", ")", ";", "}"], "memberFunctions": {"restoreFolderErrorLevel": [["void"]], "setKO": [["void"], ["void", "boolean match"]], "isWarning": [["boolean"]], "setErrorLevel": [["void", "int errorlevel"]], "getErrorLevel": [["int"]], "analyseTrack": [["String", "String tagValue", "String matchValue", "String field"]], "analyseTrackYear": [["String", "String tagValue", "String matchValue"]], "formatNumber": [["String", "int value"]], "colorField": [["String", "String text", "int errorLevel"], ["String", "String text", "int errorLevel", "boolean html"]], "getValue": [["String"]], "analyseTrackComment": [["String", "String tagValue", "String matchValue"]], "analyseTrackBpm": [["String", "Float tagValue", "Float matchValue"]], "hashCode": [["int"]], "setValue": [["void", "String value"]], "equals": [["boolean", "Object obj"]], "getDisplayToolTip": [["String"]], "setOK": [["void"]], "toString": [["String"]], "getDisplayColor": [["Color"]], "analyseTrackNumber": [["String", "String tagValue", "String matchValue"]], "getDisplayText": [["String"]], "setWarning": [["void"], ["void", "boolean match"]], "analyseTrackString": [["String", "String tagValue", "String matchValue"]], "isKO": [["boolean"]]}, "className": "FolderInfoResult", "renamed": ["boolean", "function", "(", ")", "{", "return", "(", "this", ".", "errorLevel", ">", "0", ")", ";", "}"], "nl": "Returns if result is not valid", "nlToks": ["Returns", "if", "result", "is", "not", "valid"], "path": "phramusca/JaMuz/tree/master/src/jamuz/process/check/FolderInfoResult.java", "idx": 1774}
{"memberVariables": {"BUCKET_PREFIX=\"prefix\"": "String", "mClient": "OSSClient", "DST=\"dst\"": "String", "SRC=\"src\"": "String", "mOSSUnderFileSystem": "OSSUnderFileSystem", "PATH=\"path\"": "String", "BUCKET_NAME=\"bucket\"": "String"}, "code": ["void", "function", "(", ")", "{", "mClient", "=", "Mockito", ".", "mock", "(", "OSSClient", ".", "class", ")", ";", "mOSSUnderFileSystem", "=", "new", "OSSUnderFileSystem", "(", "new", "AlluxioURI", "(", "\"\"", ")", ",", "mClient", ",", "BUCKET_NAME", ",", "BUCKET_PREFIX", ")", ";", "}"], "memberFunctions": {"deleteNonRecursiveOnServiceException": [["void"]], "renameOnServiceException": [["void"]], "deleteRecursiveOnServiceException": [["void"]]}, "className": "OSSUnderFileSystemTest", "renamed": ["void", "function", "(", ")", "{", "mClient", "=", "Mockito", ".", "mock", "(", "OSSClient", ".", "class", ")", ";", "mOSSUnderFileSystem", "=", "new", "OSSUnderFileSystem", "(", "new", "AlluxioURI", "(", "\"srini_string\"", ")", ",", "mClient", ",", "BUCKET_NAME", ",", "BUCKET_PREFIX", ")", ";", "}"], "nl": "Set up.", "nlToks": ["Set", "up", "."], "path": "poemlin/alluxio/tree/master/underfs/oss/src/test/java/alluxio/underfs/oss/OSSUnderFileSystemTest.java", "idx": 1775}
{"memberVariables": {"tx": "Transaction", "ti": "TableInfo", "slotsize": "int", "currentblk": "Block"}, "code": ["void", "function", "(", ")", "{", "if", "(", "currentblk", "!=", "null", ")", "tx", ".", "unpin", "(", "currentblk", ")", ";", "currentblk", "=", "null", ";", "}"], "memberFunctions": {"insertDir": [["void", "int slot", "Constant val", "int blknum"]], "getChildNum": [["int", "int slot"]], "insert": [["void", "int slot"]], "delete": [["void", "int slot"]], "split": [["Block", "int splitpos", "int flag"]], "transferRecs": [["void", "int slot", "BTreePage dest"]], "fldpos": [["int", "int slot", "String fldname"]], "getNumRecs": [["int"]], "slotpos": [["int", "int slot"]], "getFlag": [["int"]], "setVal": [["void", "int slot", "String fldname", "Constant val"]], "getDataRid": [["RID", "int slot"]], "getVal": [["Constant", "int slot", "String fldname"]], "setFlag": [["void", "int val"]], "insertLeaf": [["void", "int slot", "Constant val", "RID rid"]], "appendNew": [["Block", "int flag"]], "getString": [["String", "int slot", "String fldname"]], "setInt": [["void", "int slot", "String fldname", "int val"]], "getInt": [["int", "int slot", "String fldname"]], "setString": [["void", "int slot", "String fldname", "String val"]], "getDataVal": [["Constant", "int slot"]], "copyRecord": [["void", "int from", "int to"]], "isFull": [["boolean"]], "setNumRecs": [["void", "int n"]], "findSlotBefore": [["int", "Constant searchkey"]]}, "className": "BTreePage", "renamed": ["void", "function", "(", ")", "{", "if", "(", "currentblk", "!=", "null", ")", "tx", ".", "unpin", "(", "currentblk", ")", ";", "currentblk", "=", "null", ";", "}"], "nl": "Closes the page by unpinning its buffer.", "nlToks": ["Closes", "the", "page", "by", "unpinning", "its", "buffer", "."], "path": "prerit2803/DBMSProject2/tree/master/simpledb/index/btree/BTreePage.java", "idx": 1777}
{"memberVariables": {"mustUnderstand": "List<QName>", "replyTo": "EndpointReferenceType", "faultTo": "EndpointReferenceType", "messageID": "AttributedURIType", "action": "AttributedURIType", "from": "EndpointReferenceType", "namespaceURI": "String", "to": "EndpointReferenceType", "toURIType": "AttributedURIType", "duplicate": "QName", "relatesTo": "RelatesToType"}, "code": ["EndpointReferenceType", "function", "(", ")", "{", "return", "from", ";", "}"], "memberFunctions": {"getMustUnderstand": [["List<QName>"]], "setAction": [["void", "AttributedURIType iri"]], "getReplyTo": [["EndpointReferenceType"]], "exposeAs": [["void", "String uri"]], "setFrom": [["void", "EndpointReferenceType epr"]], "setDuplicate": [["void", "QName dup"]], "getRelatesTo": [["RelatesToType"]], "getTo": [["AttributedURIType"]], "getAction": [["AttributedURIType"]], "setMessageID": [["void", "AttributedURIType iri"]], "getMessageID": [["AttributedURIType"]], "getFaultTo": [["EndpointReferenceType"]], "setReplyTo": [["void", "EndpointReferenceType ref"]], "setFaultTo": [["void", "EndpointReferenceType ref"]], "getDuplicate": [["QName"]], "setTo": [["void", "AttributedURIType t"], ["void", "EndpointReferenceType epr"]], "setRelatesTo": [["void", "RelatesToType rel"]], "getToEndpointReference": [["EndpointReferenceType"]], "getNamespaceURI": [["String"]], "toString": [["String"]], "createCompatibleResponseProperties": [["AddressingProperties"]]}, "className": "AddressingProperties", "renamed": ["EndpointReferenceType", "function", "(", ")", "{", "return", "from", ";", "}"], "nl": "Accessor for the From property.", "nlToks": ["Accessor", "for", "the", "From", "property", "."], "path": "primesign/cxf/tree/master/core/src/main/java/org/apache/cxf/ws/addressing/AddressingProperties.java", "idx": 1778}
{"memberVariables": {"_to_state": "lalr_state", "_next": "lalr_transition", "_on_symbol": "symbol"}, "code": ["String", "function", "(", ")", "{", "String", "result", ";", "result", "=", "\"transition on \"", "+", "on_symbol", "(", ")", ".", "name", "(", ")", "+", "\" to state [\"", ";", "result", "+=", "_to_state", ".", "index", "(", ")", ";", "result", "+=", "\"]\"", ";", "return", "result", ";", "}"], "memberFunctions": {"next": [["lalr_transition"]], "on_symbol": [["symbol"]], "to_state": [["lalr_state"]]}, "className": "lalr_transition", "renamed": ["String", "function", "(", ")", "{", "String", "loc0", ";", "loc0", "=", "\"srini_string\"", "+", "on_symbol", "(", ")", ".", "name", "(", ")", "+", "\"srini_string\"", ";", "loc0", "+=", "_to_state", ".", "index", "(", ")", ";", "loc0", "+=", "\"srini_string\"", ";", "return", "loc0", ";", "}"], "nl": "Convert to a string.", "nlToks": ["Convert", "to", "a", "string", "."], "path": "polyglot-compiler/polyglot/tree/master/tools/java_cup/src/java_cup/lalr_transition.java", "idx": 1779}
{"memberVariables": {"LOG=LoggerFactory.getLogger(NodeUtils.class)": "Logger"}, "code": ["String", "function", "(", "final", "Element", "element", ",", "final", "String", "tagName", ",", "final", "String", "attribute", ")", "{", "final", "NodeList", "nodes", "=", "element", ".", "getElementsByTagName", "(", "tagName", ")", ";", "final", "Element", "node", "=", "(", "Element", ")", "nodes", ".", "item", "(", "0", ")", ";", "if", "(", "node", "==", "null", ")", "{", "return", "StringUtils", ".", "EMPTY", ";", "}", "return", "node", ".", "getAttribute", "(", "attribute", ")", ";", "}"], "memberFunctions": {"createUriValue": [["URI", "final Element element", "final String tagName"]], "parseDateString": [["Date", "final String dateString"]], "createStringValue": [["String", "final Element element", "final String tagName"]], "createDateValue": [["Date", "final Element element", "final String tagName"]], "getFloatAttribute": [["float", "final Element element", "final String tagName", "final String attribute"]], "createBooleanValue": [["boolean", "final Element element", "final String tagName"]], "createFloatValue": [["float", "final Element element", "final String tagName"]], "createLongValue": [["long", "final Element element", "final String tagName"]], "createIntValue": [["int", "final Element element", "final String tagName"]]}, "className": "NodeUtils", "renamed": ["String", "function", "(", "final", "Element", "arg0", ",", "final", "String", "arg1", ",", "final", "String", "arg2", ")", "{", "final", "NodeList", "loc0", "=", "arg0", ".", "getElementsByTagName", "(", "arg1", ")", ";", "final", "Element", "loc1", "=", "(", "Element", ")", "loc0", ".", "item", "(", "0", ")", ";", "if", "(", "loc1", "==", "null", ")", "{", "return", "StringUtils", ".", "EMPTY", ";", "}", "return", "loc1", ".", "getAttribute", "(", "arg2", ")", ";", "}"], "nl": "Accesses a float attribute from a tag name and an attribute name within the element identified by that tag.", "nlToks": ["Accesses", "a", "float", "attribute", "from", "a", "tag", "name", "and", "an", "attribute", "name", "within", "the", "element", "identified", "by", "that", "tag", "."], "path": "adamfisk/littleshoot-client/tree/master/common/rest/src/main/java/org/lastbamboo/common/rest/NodeUtils.java", "idx": 1780}
{"memberVariables": {"mClassifier": "Object", "namespace": "Object", "newFeatures": "List", "newInnerClasses": "List"}, "code": ["Object", "function", "(", ")", "{", "return", "mClassifier", ";", "}"], "memberFunctions": {"newFeature": [["void", "Object mFeature"]], "getAssociationEnds": [["Vector"]], "getNamespace": [["Object"]], "getAssociationEndsList": [["List"]], "getNewInnerClassesList": [["List"]], "getNewInnerClasses": [["Vector"]], "newClassifier": [["Object", "String name"]], "getNewFeatures": [["Vector"]], "getNewFeaturesList": [["List"]]}, "className": "ParseState", "renamed": ["Object", "function", "(", ")", "{", "return", "mClassifier", ";", "}"], "nl": "Get the current classifier.", "nlToks": ["Get", "the", "current", "classifier", "."], "path": "pichiliani/CoArgoUML/tree/master/v0.24/fonte/src/argouml-app/src/org/argouml/language/java/generator/ParseState.java", "idx": 1783}
{"memberVariables": {"type": "String", "url": "String"}, "code": ["void", "function", "(", "String", "url", ")", "{", "this", ".", "url", "=", "url", ";", "}"], "memberFunctions": {"getURL": [["String"]], "getType": [["String"]], "hashCode": [["int"]], "equals": [["boolean", "Object obj"]], "toString": [["String"]]}, "className": "HessianRemote", "renamed": ["void", "function", "(", "String", "arg0", ")", "{", "this", ".", "url", "=", "arg0", ";", "}"], "nl": "Sets the remote URL.", "nlToks": ["Sets", "the", "remote", "URL", "."], "path": "acupple/dubbo/tree/master/hessian-lite/src/main/java/com/alibaba/com/caucho/hessian/io/HessianRemote.java", "idx": 1785}
{"memberVariables": {"name=null": "String", "attributes=null": "Attributes", "text=new StringBuffer(100)": "StringBuffer"}, "code": ["int", "function", "(", ")", "{", "return", "text", ".", "length", "(", ")", ";", "}"], "memberFunctions": {"setName": [["void", "String n"]], "getName": [["String"]], "getAttribute": [["String", "String attribute"]], "getAttributeValue": [["String", "int i"]], "getText": [["String"]], "addText": [["void", "String t"], ["void", "char[] c", "int offset", "int len"]], "setAttributes": [["void", "Attributes a"]], "getNumAttributes": [["int"]], "resetText": [["void"]], "getAttributeName": [["String", "int i"]], "setText": [["void", "String t"]]}, "className": "XMLElement", "renamed": ["int", "function", "(", ")", "{", "return", "text", ".", "length", "(", ")", ";", "}"], "nl": "Get the length of the text in the element.", "nlToks": ["Get", "the", "length", "of", "the", "text", "in", "the", "element", "."], "path": "pichiliani/CoArgoUML/tree/master/v0.24/fonte/src/argouml-app/build/classes/org/argouml/persistence/XMLElement.java", "idx": 1787}
{"memberVariables": {"m_registrar": "SipRegistrar", "LOG=LoggerFactory.getLogger(Launcher.class)": "Logger", "m_onlineStatusListener": "OnlineStatusRegistrationListener", "m_turnServer": "TurnServer", "m_sipProxy": "SipProxy"}, "code": ["void", "function", "(", ")", "{", "m_sipProxy", ".", "start", "(", ")", ";", "m_turnServer", ".", "start", "(", ")", ";", "try", "{", "synchronized", "(", "this", ")", "{", "wait", "(", ")", ";", "}", "}", "catch", "(", "InterruptedException", "e", ")", "{", "e", ".", "printStackTrace", "(", ")", ";", "}", "}"], "memberFunctions": {"clearOldUsers": [["void", "final OnlineStatusRegistrationListener listener"]], "main": [["void", "final String[] args"]], "loadContexts": [["void"]]}, "className": "Launcher", "renamed": ["void", "function", "(", ")", "{", "m_sipProxy", ".", "start", "(", ")", ";", "m_turnServer", ".", "start", "(", ")", ";", "try", "{", "synchronized", "(", "this", ")", "{", "wait", "(", ")", ";", "}", "}", "catch", "(", "InterruptedException", "loc0", ")", "{", "loc0", ".", "printStackTrace", "(", ")", ";", "}", "}"], "nl": "Launches any services that should be launched only if this peer is on the open Internet, such as running a TURN server or a SIP proxy.", "nlToks": ["Launches", "any", "services", "that", "should", "be", "launched", "only", "if", "this", "peer", "is", "on", "the", "open", "Internet", ",", "such", "as", "running", "a", "TURN", "server", "or", "a", "SIP", "proxy", "."], "path": "adamfisk/littleshoot-client/tree/master/common/sip-turn/src/main/java/org/lastbamboo/common/sipturn/Launcher.java", "idx": 1788}
{"memberVariables": {"connected=false": "boolean"}, "code": ["void", "function", "(", "SshDataReceivedEvent", "ev", ")", "{", "System", ".", "out", ".", "println", "(", "\"here baby\"", ")", ";", "System", ".", "out", ".", "print", "(", "ev", ".", "getData", "(", ")", ")", ";", "}"], "memberFunctions": {"connected": [["void", "SshConnectedEvent ev"]], "disconnected": [["void", "SshDisconnectedEvent ev"]], "main": [["void", "String[] args"]]}, "className": "SshExample", "renamed": ["void", "function", "(", "SshDataReceivedEvent", "arg0", ")", "{", "System", ".", "out", ".", "println", "(", "\"srini_string\"", ")", ";", "System", ".", "out", ".", "print", "(", "arg0", ".", "getData", "(", ")", ")", ";", "}"], "nl": "Captures SshDataReceivedEvent", "nlToks": ["Captures", "SshDataReceivedEvent"], "path": "adilraja/ULMAN/tree/master/Prac/src/SshExample.java", "idx": 1789}
{"memberVariables": {"counter": "Map<T,Integer>"}, "code": ["Integer", "function", "(", "T", "key", ")", "{", "Integer", "value", "=", "counter", ".", "get", "(", "key", ")", ";", "if", "(", "value", "==", "null", ")", "{", "return", "0", ";", "}", "return", "value", ";", "}"], "memberFunctions": {"probabilityOf": [["Double", "T key"]], "incrementFor": [["void", "T key"]], "toString": [["String"]], "getStates": [["Set<T>"]]}, "className": "FrequencyCounter", "renamed": ["Integer", "function", "(", "T", "arg0", ")", "{", "Integer", "loc0", "=", "counter", ".", "get", "(", "arg0", ")", ";", "if", "(", "loc0", "==", "null", ")", "{", "return", "0", ";", "}", "return", "loc0", ";", "}"], "nl": "Returns the count to which the specified key is mapped in this frequency counter, or 0 if the map contains no mapping for this key.", "nlToks": ["Returns", "the", "count", "to", "which", "the", "specified", "key", "is", "mapped", "in", "this", "frequency", "counter", ",", "or", "0", "if", "the", "map", "contains", "no", "mapping", "for", "this", "key", "."], "path": "peterplupo/ia201102/tree/master/trabalho1/aima-core/src/main/java/aima/core/util/FrequencyCounter.java", "idx": 1790}
{"memberVariables": {"lat=0.0": "double", "id_str=null": "String", "screen_name=\"unknown\"": "String", "place_name=\"unknown\"": "String", "image=null": "String", "user_name=\"unknown@unknown\"": "String", "lng=0.0": "double", "created_at=null": "Date", "loc_radius=0": "int", "user_id=\"unknown\"": "String", "text=\"\"": "String", "extras=new ArrayList<String>()": "ArrayList<String>"}, "code": ["GenericJSONBuilder", "function", "(", "double", "longtitude", ",", "double", "latitude", ")", "{", "lng", "=", "longtitude", ";", "lat", "=", "latitude", ";", "return", "this", ";", "}"], "memberFunctions": {"setIDstr": [["GenericJSONBuilder", "String id_str_"]], "setPlaceName": [["GenericJSONBuilder", "String name"]], "addText": [["GenericJSONBuilder", "String text_"]], "addField": [["GenericJSONBuilder", "String key", "String value"]], "insert": [["void", "Insertable msg"]], "setCoordinateRadius": [["GenericJSONBuilder", "int radius"]], "setAuthor": [["GenericJSONBuilder", "String author", "String domain"]], "builder": [["GenericJSONBuilder"]], "setCreatedTime": [["GenericJSONBuilder", "Date createdTime"]], "persist": [["void"]], "buildFieldJSON": [["String"]], "setUserid": [["GenericJSONBuilder", "String user_id_"]], "setImage": [["GenericJSONBuilder", "String link_"]]}, "className": "DAOWrapper", "renamed": ["GenericJSONBuilder", "function", "(", "double", "arg0", ",", "double", "arg1", ")", "{", "lng", "=", "arg0", ";", "lat", "=", "arg1", ";", "return", "this", ";", "}"], "nl": "Not required", "nlToks": ["Not", "required"], "path": "adarsh-ideal/loklak_server/tree/master/src/org/loklak/data/DAOWrapper.java", "idx": 1791}
{"memberVariables": {"yCoOrdinate": "int", "xCoOrdinate": "int"}, "code": ["XYLocation", "function", "(", ")", "{", "return", "north", "(", ")", ";", "}"], "memberFunctions": {"south": [["XYLocation"]], "north": [["XYLocation"]], "getXCoOrdinate": [["int"]], "right": [["XYLocation"]], "getYCoOrdinate": [["int"]], "down": [["XYLocation"]], "locationAt": [["XYLocation", "Direction direction"]], "east": [["XYLocation"]], "left": [["XYLocation"]], "hashCode": [["int"]], "equals": [["boolean", "Object o"]], "west": [["XYLocation"]], "toString": [["String"]]}, "className": "XYLocation", "renamed": ["XYLocation", "function", "(", ")", "{", "return", "north", "(", ")", ";", "}"], "nl": "Returns the location one unit above this location.", "nlToks": ["Returns", "the", "location", "one", "unit", "above", "this", "location", "."], "path": "peterplupo/ia201102/tree/master/trabalho1/aima-core/src/main/java/aima/core/util/datastructure/XYLocation.java", "idx": 1792}
{"memberVariables": {"password": "String", "credentialsExpirationDate": "Date", "loginsFallidos": "Integer", "grantedAuthorities": "Collection<GrantedAuthority>", "credentialsNonExpired": "boolean", "accountNonExpired": "boolean", "id": "Long", "enabled": "boolean", "email": "String", "username": "String", "accountNonLocked": "boolean", "nombres": "String"}, "code": ["Collection", "<", "GrantedAuthority", ">", "function", "(", ")", "{", "return", "this", ".", "grantedAuthorities", ";", "}"], "memberFunctions": {"setCredentialsNonExpired": [["void", "Boolean credentialsNonExpired"]], "setPassword": [["void", "String password"]], "getCredentialsExpirationDate": [["Date"]], "setUsername": [["void", "String username"]], "setAccountNonLocked": [["void", "Boolean accountNonLocked"]], "getNombres": [["String"]], "setAccountNonExpired": [["void", "Boolean accountNonExpired"]], "isAccountNonLocked": [["boolean"]], "getId": [["Long"]], "setNombres": [["void", "String nombres"]], "getUsername": [["String"]], "setEnabled": [["void", "Boolean enabled"]], "getPassword": [["String"]], "setEmail": [["void", "String email"]], "setAuthorities": [["void", "Collection<GrantedAuthority> grantedAuthorities"]], "isAccountNonExpired": [["boolean"]], "isCredentialsNonExpired": [["boolean"]], "isEnabled": [["boolean"]], "getEmail": [["String"]], "setId": [["void", "Long id"]], "setCredentialsExpirationDate": [["void", "Date credentialsExpirationDate"]]}, "className": "SilexUserDetails", "renamed": ["Collection", "<", "GrantedAuthority", ">", "function", "(", ")", "{", "return", "this", ".", "grantedAuthorities", ";", "}"], "nl": "Devuelve los roles aosciados a este usuario.", "nlToks": ["Devuelve", "los", "roles", "aosciados", "a", "este", "usuario", "."], "path": "pfrodriguezj/Komuno/tree/master/Komuno/src/main/java/co/com/silex/security/SilexUserDetails.java", "idx": 1793}
{"memberVariables": {"q1": "DenseMatrix64F", "maxIterations=20": "int", "q2": "DenseMatrix64F", "tol=1e-10": "double", "B": "DenseMatrix64F", "seed": "DenseMatrix64F", "q0": "DenseMatrix64F"}, "code": ["void", "function", "(", "DenseMatrix64F", "seed", ")", "{", "this", ".", "seed", "=", "seed", ";", "}"], "memberFunctions": {"getEigenVector": [["DenseMatrix64F"]], "computeShiftDirect": [["boolean", "DenseMatrix64F A", "double alpha"]], "setOptions": [["void", "int maxIterations", "double tolerance"]], "initPower": [["void", "DenseMatrix64F A"]], "computeShiftInvert": [["boolean", "DenseMatrix64F A", "double alpha"]], "computeDirect": [["boolean", "DenseMatrix64F A"]], "checkConverged": [["boolean", "DenseMatrix64F A"]]}, "className": "EigenPowerMethod", "renamed": ["void", "function", "(", "DenseMatrix64F", "arg0", ")", "{", "this", ".", "seed", "=", "arg0", ";", "}"], "nl": "Sets the value of the vector to use in the start of the iterations.", "nlToks": ["Sets", "the", "value", "of", "the", "vector", "to", "use", "in", "the", "start", "of", "the", "iterations", "."], "path": "adamaulia/efficient-java-matrix-library/tree/master/src/org/ejml/alg/dense/decomposition/eig/EigenPowerMethod.java", "idx": 1796}
{"memberVariables": {}, "code": ["GetOfferDetailsResponse", ".", "Return", ".", "DetailOfferData", ".", "OfferMedia", ".", "OfferImage", ".", "Entry", ".", "Value", ".", "Item", "function", "(", ")", "{", "return", "new", "GetOfferDetailsResponse", ".", "Return", ".", "DetailOfferData", ".", "OfferMedia", ".", "OfferImage", ".", "Entry", ".", "Value", ".", "Item", "(", ")", ";", "}"], "memberFunctions": {"createGetOfferDetailsResponseReturnDetailOfferDataSourceGeos": [["GetOfferDetailsResponse.Return.DetailOfferData.SourceGeos"]], "createGetOfferDetailsResponseReturnDetailOfferDataSeo": [["GetOfferDetailsResponse.Return.DetailOfferData.Seo"]], "createGetOfferDetailsResponseReturnDetailOfferDataMerchantAddresses": [["GetOfferDetailsResponse.Return.DetailOfferData.Merchant.Addresses"]], "createGetOfferDetailsResponseReturnDetailOfferDataTargetGeosGeoCountry": [["GetOfferDetailsResponse.Return.DetailOfferData.TargetGeos.Geo.Country"]], "createGetOfferDetailsResponseReturnDetailOfferDataOfferMediaOfferImageEntry": [["GetOfferDetailsResponse.Return.DetailOfferData.OfferMedia.OfferImage.Entry"]], "createGetOfferDetailsResponseReturnDetailOfferDataTargetGeosGeo": [["GetOfferDetailsResponse.Return.DetailOfferData.TargetGeos.Geo"]], "createGetOfferDetailsResponseReturnDetailOfferDataOfferMedia": [["GetOfferDetailsResponse.Return.DetailOfferData.OfferMedia"]], "createGetOfferDetailsResponseReturnDetailOfferDataFulfillmentPartner": [["GetOfferDetailsResponse.Return.DetailOfferData.FulfillmentPartner"]], "createGetOfferDetailsResponseReturnDetailOfferDataOfferMediaOfferImageEntryValue": [["GetOfferDetailsResponse.Return.DetailOfferData.OfferMedia.OfferImage.Entry.Value"]], "createGetOfferDetailsResponseReturnDetailOfferDataProductsProduct": [["GetOfferDetailsResponse.Return.DetailOfferData.Products.Product"]], "createGetOfferDetailsResponseReturnDetailOfferDataRedemptionAddressesRedemptionAddress": [["GetOfferDetailsResponse.Return.DetailOfferData.RedemptionAddresses.RedemptionAddress"]], "createGetOfferDetailsResponseReturnDetailOfferDataSourceGeosGeoRegion": [["GetOfferDetailsResponse.Return.DetailOfferData.SourceGeos.Geo.Region"]], "createGetOfferDetailsResponseReturnDetailOfferDataTargetGeosGeoCity": [["GetOfferDetailsResponse.Return.DetailOfferData.TargetGeos.Geo.City"]], "createGetOfferDetailsResponseReturnDetailOfferData": [["GetOfferDetailsResponse.Return.DetailOfferData"]], "createGetOfferDetailsResponse": [["GetOfferDetailsResponse"]], "createGetOfferDetailsResponseReturnDetailOfferDataSourceGeosGeoCity": [["GetOfferDetailsResponse.Return.DetailOfferData.SourceGeos.Geo.City"]], "createGetOfferDetailsResponseReturnDetailOfferDataProducts": [["GetOfferDetailsResponse.Return.DetailOfferData.Products"]], "createGetOfferDetailsResponseReturnDetailOfferDataOfferMediaOfferImage": [["GetOfferDetailsResponse.Return.DetailOfferData.OfferMedia.OfferImage"]], "createGetOfferDetailsResponseReturnDetailOfferDataRedemptionAddresses": [["GetOfferDetailsResponse.Return.DetailOfferData.RedemptionAddresses"]], "createGetOfferDetailsResponseReturn": [["GetOfferDetailsResponse.Return"]], "createGetOfferDetailsResponseReturnDetailOfferDataSourceGeosGeoCountry": [["GetOfferDetailsResponse.Return.DetailOfferData.SourceGeos.Geo.Country"]], "createGetOfferDetailsResponseReturnDetailOfferDataTargetGeos": [["GetOfferDetailsResponse.Return.DetailOfferData.TargetGeos"]], "createGetOfferDetailsResponseReturnDetailOfferDataTargetGeosGeoRegion": [["GetOfferDetailsResponse.Return.DetailOfferData.TargetGeos.Geo.Region"]], "createGetOfferDetailsResponseReturnDetailOfferDataMerchant": [["GetOfferDetailsResponse.Return.DetailOfferData.Merchant"]], "createGetOfferDetailsResponseReturnDetailOfferDataSourceGeosGeo": [["GetOfferDetailsResponse.Return.DetailOfferData.SourceGeos.Geo"]], "createGetOfferDetailsResponseReturnDetailOfferDataOfferDisplay": [["GetOfferDetailsResponse.Return.DetailOfferData.OfferDisplay"]]}, "className": "ObjectFactory", "renamed": ["GetOfferDetailsResponse", ".", "Return", ".", "DetailOfferData", ".", "OfferMedia", ".", "OfferImage", ".", "Entry", ".", "Value", ".", "Item", "function", "(", ")", "{", "return", "new", "GetOfferDetailsResponse", ".", "Return", ".", "DetailOfferData", ".", "OfferMedia", ".", "OfferImage", ".", "Entry", ".", "Value", ".", "Item", "(", ")", ";", "}"], "nl": "Create an instance of  {@link GetOfferDetailsResponse.Return.DetailOfferData.OfferMedia.OfferImage.Entry.Value.Item }", "nlToks": ["Create", "an", "instance", "of", "-LCB-", "@link", "GetOfferDetailsResponse.Return.DetailOfferData.OfferMedia.OfferImage.Entry.Value.Item", "-RCB-"], "path": "priyankgandhi/mastercard/tree/master/eop-openapi-client/src/main/java/com/eop/api/offerdetail/gen/ObjectFactory.java", "idx": 1801}
{"memberVariables": {"head": "TopLevelResolver", "tail": "TopLevelResolver"}, "code": ["Named", "function", "(", "String", "name", ")", "{", "try", "{", "return", "head", ".", "find", "(", "name", ")", ";", "}", "catch", "(", "NoClassException", "e", ")", "{", "return", "tail", ".", "find", "(", "name", ")", ";", "}", "}"], "memberFunctions": {"toString": [["String"]], "packageExists": [["boolean", "String name"]]}, "className": "CompoundResolver", "renamed": ["Named", "function", "(", "String", "arg0", ")", "{", "try", "{", "return", "head", ".", "find", "(", "arg0", ")", ";", "}", "catch", "(", "NoClassException", "loc0", ")", "{", "return", "tail", ".", "find", "(", "arg0", ")", ";", "}", "}"], "nl": "Find a type object by name.", "nlToks": ["Find", "a", "type", "object", "by", "name", "."], "path": "polyglot-compiler/polyglot/tree/master/src/polyglot/types/CompoundResolver.java", "idx": 1803}
{"memberVariables": {"extensionsDenied=new HashMap<ResourceTypeHandler,Set<String>>()": "Map<ResourceTypeHandler,Set<String>>", "extensionsAllowed=new HashMap<ResourceTypeHandler,Set<String>>()": "Map<ResourceTypeHandler,Set<String>>"}, "code": ["void", "function", "(", "final", "ResourceTypeHandler", "type", ",", "final", "String", "extensionsList", ")", "{", "if", "(", "extensionsList", "!=", "null", ")", "{", "extensionsDenied", ".", "put", "(", "type", ",", "Utils", ".", "getSet", "(", "extensionsList", ")", ")", ";", "extensionsAllowed", ".", "get", "(", "type", ")", ".", "clear", "(", ")", ";", "}", "}"], "memberFunctions": {"isAllowed": [["boolean", "final ResourceTypeHandler type", "final String extension"]], "setExtensionsAllowed": [["void", "final ResourceTypeHandler type", "final String extensionsList"]], "getExtensionsDenied": [["Set<String>", "final ResourceTypeHandler type"]], "getExtensionsAllowed": [["Set<String>", "final ResourceTypeHandler type"]]}, "className": "ExtensionsHandler", "renamed": ["void", "function", "(", "final", "ResourceTypeHandler", "arg0", ",", "final", "String", "arg1", ")", "{", "if", "(", "arg1", "!=", "null", ")", "{", "extensionsDenied", ".", "put", "(", "arg0", ",", "Utils", ".", "getSet", "(", "arg1", ")", ")", ";", "extensionsAllowed", ".", "get", "(", "arg0", ")", ".", "clear", "(", ")", ";", "}", "}"], "nl": "Setter for the denied extensions of a file type. The allowed extensions will be cleared. If extensionsList is null, denied extensions are kept untouched.", "nlToks": ["Setter", "for", "the", "denied", "extensions", "of", "a", "file", "type", ".", "The", "allowed", "extensions", "will", "be", "cleared", ".", "If", "extensionsList", "is", "null", ",", "denied", "extensions", "are", "kept", "untouched", "."], "path": "pobing/company/tree/master/maxcomy/src/net/fckeditor/handlers/ExtensionsHandler.java", "idx": 1805}
{"memberVariables": {"DEFAULT_CONFIG_URL=\"/cxf-samlp-ehcache.xml\"": "String", "cache": "Ehcache", "DEFAULT_TTL=3600L": "long", "MAX_TTL=DEFAULT_TTL * 12L": "long", "CACHE_KEY=\"cxf.samlp.replay.cache\"": "String", "cacheManager": "CacheManager", "ttl=DEFAULT_TTL": "long"}, "code": ["void", "function", "(", "String", "id", ")", "{", "putId", "(", "id", ",", "ttl", ")", ";", "}"], "memberFunctions": {"createCache": [["void", "String configFile", "Bus bus"]], "setTTL": [["void", "long newTtl"]], "getId": [["String", "String id"]], "close": [["void"]], "getTTL": [["long"]]}, "className": "EHCacheTokenReplayCache", "renamed": ["void", "function", "(", "String", "arg0", ")", "{", "putId", "(", "arg0", ",", "ttl", ")", ";", "}"], "nl": "Add the given identifier to the cache. It will be cached for a default amount of time.", "nlToks": ["Add", "the", "given", "identifier", "to", "the", "cache", ".", "It", "will", "be", "cached", "for", "a", "default", "amount", "of", "time", "."], "path": "primesign/cxf/tree/master/rt/rs/security/sso/saml/src/main/java/org/apache/cxf/rs/security/saml/sso/EHCacheTokenReplayCache.java", "idx": 1807}
{"memberVariables": {}, "code": ["DomainRestoreInfo", "function", "(", "CSP", "csp", ")", "{", "DomainRestoreInfo", "result", "=", "new", "DomainRestoreInfo", "(", ")", ";", "FIFOQueue", "<", "Variable", ">", "queue", "=", "new", "FIFOQueue", "<", "Variable", ">", "(", ")", ";", "for", "(", "Variable", "var", ":", "csp", ".", "getVariables", "(", ")", ")", "queue", ".", "add", "(", "var", ")", ";", "reduceDomains", "(", "queue", ",", "csp", ",", "result", ")", ";", "return", "result", ".", "compactify", "(", ")", ";", "}"], "memberFunctions": {"revise": [["boolean", "Variable xi", "Variable xj", "Constraint constraint", "CSP csp", "DomainRestoreInfo info"]]}, "className": "AC3Strategy", "renamed": ["DomainRestoreInfo", "function", "(", "CSP", "arg0", ")", "{", "DomainRestoreInfo", "loc0", "=", "new", "DomainRestoreInfo", "(", ")", ";", "FIFOQueue", "<", "Variable", ">", "loc1", "=", "new", "FIFOQueue", "<", "Variable", ">", "(", ")", ";", "for", "(", "Variable", "loc2", ":", "arg0", ".", "getVariables", "(", ")", ")", "loc1", ".", "add", "(", "loc2", ")", ";", "reduceDomains", "(", "loc1", ",", "arg0", ",", "loc0", ")", ";", "return", "loc0", ".", "compactify", "(", ")", ";", "}"], "nl": "Makes a CSP consisting of binary constraints arc-consistent.", "nlToks": ["Makes", "a", "CSP", "consisting", "of", "binary", "constraints", "arc-consistent", "."], "path": "peterplupo/ia201102/tree/master/trabalho1/aima-core/src/main/java/aima/core/search/csp/AC3Strategy.java", "idx": 1808}
{"memberVariables": {"altitude=0.0": "double", "latitude": "double", "datum=Datum.WGS84": "Datum", "longitude": "double"}, "code": ["double", "function", "(", ")", "{", "return", "altitude", ";", "}"], "memberFunctions": {"getLatitudeHemisphere": [["CompassPoint"]], "haversine": [["double", "double lat1", "double lon1", "double lat2", "double lon2"]], "getLongitude": [["double"]], "isLatitudeNorth": [["boolean"]], "getLatitude": [["double"]], "isLongitudeEast": [["boolean"]], "distanceTo": [["double", "Position pos"]], "setLatitude": [["void", "double latitude"]], "setAltitude": [["void", "double altitude"]], "getLongitudeHemisphere": [["CompassPoint"]], "toWaypoint": [["Waypoint", "String id"]], "getDatum": [["Datum"]], "toString": [["String"]], "setLongitude": [["void", "double longitude"]]}, "className": "Position", "renamed": ["double", "function", "(", ")", "{", "return", "altitude", ";", "}"], "nl": "Gets the position altitude from mean sea level. Notice that most sentences with position don't provide this value. When missing, the default value in Position is 0.0.", "nlToks": ["Gets", "the", "position", "altitude", "from", "mean", "sea", "level", ".", "Notice", "that", "most", "sentences", "with", "position", "do", "n't", "provide", "this", "value", ".", "When", "missing", ",", "the", "default", "value", "in", "Position", "is", "0.0", "."], "path": "pkoziol/marine-api/tree/master/src/main/java/net/sf/marineapi/nmea/util/Position.java", "idx": 1810}
{"memberVariables": {"NAME=\"name\"": "String", "FAULT=\"fault\"": "String", "MEMBER=\"member\"": "String", "tz": "TimeZone", "values=new ArrayList<>()": "ArrayList<Object>", "VALUE=\"value\"": "String"}, "code": ["List", "<", "Object", ">", "function", "(", "int", "index", ")", "{", "Object", "val", "=", "values", ".", "get", "(", "index", ")", ";", "if", "(", "val", "instanceof", "List", ")", "{", "return", "(", "List", ")", "val", ";", "}", "else", "{", "throw", "new", "IllegalStateException", "(", ")", ";", "}", "}"], "memberFunctions": {"getStringValue": [["String", "int index"]], "parseArray": [["ArrayList<Object>", "Node valueNode"]], "getValues": [["List"]], "getStructValue": [["Map<String,Object>", "int index"]], "getDoubleValue": [["Double", "int index"]], "getValueCount": [["int"]], "parse": [["void", "Document doc"]], "getIntegerValue": [["Integer", "int index"]], "getBooleanValue": [["Boolean", "int index"]], "parseStruct": [["HashMap<String,Object>", "Node valueNode"]], "parseValue": [["Object", "Node valueNode"]], "getBinaryValue": [["byte[]", "int index"]], "getDateValue": [["Date", "int index"]]}, "className": "XMLRPCResult", "renamed": ["List", "<", "Object", ">", "function", "(", "int", "arg0", ")", "{", "Object", "loc0", "=", "values", ".", "get", "(", "arg0", ")", ";", "if", "(", "loc0", "instanceof", "List", ")", "{", "return", "(", "List", ")", "loc0", ";", "}", "else", "{", "throw", "new", "IllegalStateException", "(", ")", ";", "}", "}"], "nl": "Returns result value as array.", "nlToks": ["Returns", "result", "value", "as", "array", "."], "path": "petr-panteleyev/java-xmlrpc/tree/master/src/main/java/org/panteleyev/xmlrpc/XMLRPCResult.java", "idx": 1811}
{"memberVariables": {"mPenEvent": "PenEvent", "TAG=\"PenHardware\"": "String", "buttonListener=null": "HardwareButtonListener", "KEY_OVERRIDE_PEN_TYPE=\"override_pen_type\"": "String", "PEN_TYPE_ICS=\"PEN_TYPE_ICS\"": "String", "mHasPenDigitizer": "boolean", "PEN_TYPE_THINKPAD_TABLET=\"PEN_TYPE_THINKPAD_TABLET\"": "String", "mHasPressureSensor": "boolean", "tabletMODELwithoutPressure=new ArrayList<String>(){\n  private static final long serialVersionUID=1868225200818950866L;\n{\n    add(\"K1\");\n    add(\"A500\");\n    add(\"A501\");\n    add(\"AT100\");\n    add(\"AT1S0\");\n    add(\"GT-P1000\");\n    add(\"GT-P1000L\");\n    add(\"GT-P1000N\");\n    add(\"SGH-T849\");\n    add(\"GT-P7510\");\n    add(\"GT-P7501\");\n    add(\"GT-P6810\");\n    add(\"GT-P6210\");\n    add(\"Galaxy Nexus\");\n    add(\"VTAB1008\");\n  }\n}\n": "ArrayList<String>", "PEN_TYPE_SAMSUNG_NOTE=\"PEN_TYPE_SAMSUNG_NOTE\"": "String", "PEN_TYPE_HTC=\"PEN_TYPE_HTC\"": "String", "PEN_TYPE_CAPACITIVE=\"PEN_TYPE_CAPACITIVE\"": "String", "instance=null": "Hardware", "PEN_TYPE_LEFT_ALT=\"PEN_TYPE_LEFT_ALT\"": "String", "model": "String", "serialVersionUID=1868225200818950866L": "long", "PEN_TYPE_AUTO=\"PEN_TYPE_AUTO\"": "String"}, "code": ["boolean", "function", "(", ")", "{", "Assert", ".", "assertNotNull", "(", "instance", ")", ";", "return", "instance", ".", "mHasPenDigitizer", ";", "}"], "memberFunctions": {"onKeyDown": [["boolean", "int keyCode", "KeyEvent event"]], "isPenEvent": [["boolean", "MotionEvent event"]], "onKeyUp": [["boolean", "int keyCode", "KeyEvent event"]], "isPenButtonPressed": [["boolean", "MotionEvent event"]], "forceCapacitivePen": [["void"]], "addViewHack": [["void", "ViewGroup viewGroup"]], "forceFromPreferences": [["void", "Context context"]], "forceSamsungNote": [["void"]], "setOnHardwareButtonListener": [["void", "HardwareButtonListener buttonListener"]], "forceLeftAlt": [["void"]], "hasPressureSensor": [["boolean"]], "autodetect": [["void", "Context context"]], "forceThinkpadTablet": [["void"]], "forceICS": [["void"]], "callOnHardwareButtonListener": [["void", "HardwareButtonListener.Type button"]], "forceHTC": [["void"]], "getInstance": [["Hardware", "Context context"]]}, "className": "Hardware", "renamed": ["boolean", "function", "(", ")", "{", "Assert", ".", "assertNotNull", "(", "instance", ")", ";", "return", "instance", ".", "mHasPenDigitizer", ";", "}"], "nl": "Test whether the device has an active pen", "nlToks": ["Test", "whether", "the", "device", "has", "an", "active", "pen"], "path": "praveensubramaniam/android-quill/tree/master/src/name/vbraun/lib/pen/Hardware.java", "idx": 1812}
{"memberVariables": {}, "code": ["void", "function", "(", "boolean", "b", ",", "Parcel", "out", ")", "{", "out", ".", "writeInt", "(", "b", "?", "1", ":", "0", ")", ";", "}"], "memberFunctions": {"writeHashMap": [["void", "Map<K,V> map", "Parcel out", "int flags"]], "readHashMapStringAndString": [["Map<String,String>", "Parcel in"]], "writeHashMapStringAndString": [["void", "Map<String,String> map", "Parcel out", "int flags"]], "readHashMapStringKey": [["Map<String,V>", "Parcel in", "ClassLoader loader"]], "readHashMap": [["Map<K,V>", "Parcel in", "ClassLoader loader"]], "readBoolean": [["boolean", "Parcel in"]], "writeHashMapStringKey": [["void", "Map<String,V> map", "Parcel out", "int flags"]]}, "className": "UtilParcel", "renamed": ["void", "function", "(", "boolean", "arg0", ",", "Parcel", "arg1", ")", "{", "arg1", ".", "writeInt", "(", "arg0", "?", "1", ":", "0", ")", ";", "}"], "nl": "write boolean", "nlToks": ["write", "boolean"], "path": "13383848500/dashihui/tree/master/MIT-Afford/app/src/main/java/com/dashihui/afford/util/parcel/UtilParcel.java", "idx": 1814}
{"memberVariables": {"bus": "Bus", "resolvers=new CopyOnWriteArrayList<EndpointResolver>()": "List<EndpointResolver>"}, "code": ["void", "function", "(", "EndpointResolver", "resolver", ")", "{", "resolvers", ".", "remove", "(", "resolver", ")", ";", "}"], "memberFunctions": {"mint": [["EndpointReferenceType", "QName serviceName"], ["EndpointReferenceType", "EndpointReferenceType physical"]], "resolve": [["EndpointReferenceType", "EndpointReferenceType logical"]], "getResolvers": [["List<EndpointResolver>"]], "renew": [["EndpointReferenceType", "EndpointReferenceType logical", "EndpointReferenceType physical"]], "setBus": [["void", "Bus b"]], "register": [["void", "EndpointResolver resolver"]]}, "className": "EndpointResolverRegistryImpl", "renamed": ["void", "function", "(", "EndpointResolver", "arg0", ")", "{", "resolvers", ".", "remove", "(", "arg0", ")", ";", "}"], "nl": "Unregister an endpoint resolver.", "nlToks": ["Unregister", "an", "endpoint", "resolver", "."], "path": "primesign/cxf/tree/master/core/src/main/java/org/apache/cxf/bus/managers/EndpointResolverRegistryImpl.java", "idx": 1817}
{"memberVariables": {"scope": "Scriptable", "dim": "Dim", "type": "int", "debugGui": "SwingGui", "EXIT_ACTION=1": "int", "SCOPE_PROVIDER=2": "int"}, "code": ["PrintStream", "function", "(", ")", "{", "return", "debugGui", ".", "getConsole", "(", ")", ".", "getErr", "(", ")", ";", "}"], "memberFunctions": {"getIn": [["InputStream"]], "setExitAction": [["void", "Runnable r"]], "doBreak": [["void"]], "main": [["void", "String[] args"]], "run": [["void"]], "setBreakOnReturn": [["void", "boolean value"]], "getOut": [["PrintStream"]], "setSize": [["void", "int w", "int h"], ["void", "java.awt.Dimension dimension"]], "setBreakOnExceptions": [["void", "boolean value"]], "contextCreated": [["void", "Context cx"]], "setVisible": [["void", "boolean flag"]], "mainEmbedded": [["void", "String title"], ["void", "ContextFactory factory", "Scriptable scope", "String title"], ["void", "ContextFactory factory", "ScopeProvider scopeProvider", "String title"]], "contextExited": [["void", "Context cx"]], "setBreakOnEnter": [["void", "boolean value"]], "mainEmbeddedImpl": [["void", "ContextFactory factory", "Object scopeProvider", "String title"]], "go": [["void"]], "isVisible": [["boolean"]], "newScopeProvider": [["ScopeProvider", "Scriptable scope"]], "setScopeProvider": [["void", "ScopeProvider p"]], "pack": [["void"]], "clearAllBreakpoints": [["void"]], "contextReleased": [["void", "Context cx"]], "setOptimizationLevel": [["void", "int level"]], "detach": [["void"]], "dispose": [["void"]], "setScope": [["void", "Scriptable scope"]], "attachTo": [["void", "ContextFactory factory"]], "contextEntered": [["void", "Context cx"]], "getScope": [["Scriptable"]], "getDebugFrame": [["JFrame"]]}, "className": "Main", "renamed": ["PrintStream", "function", "(", ")", "{", "return", "debugGui", ".", "getConsole", "(", ")", ".", "getErr", "(", ")", ";", "}"], "nl": "Returns a  {@link PrintStream} for stderr in the Debugger's internalConsole window.", "nlToks": ["Returns", "a", "-LCB-", "@link", "PrintStream", "-RCB-", "for", "stderr", "in", "the", "Debugger", "'s", "internalConsole", "window", "."], "path": "adamfisk/littleshoot-client/tree/master/bin/rhino1_7R2/toolsrc/org/mozilla/javascript/tools/debugger/Main.java", "idx": 1819}
{"memberVariables": {"addressHeader": "int", "INTERVAL=TARGET_TIMESPAN / TARGET_SPACING": "int", "alertSigningKey": "byte[]", "acceptableAddressCodes": "int[]", "packetMagic": "long", "p2shHeader": "int", "paramSet=Collections.synchronizedList(new ArrayList<NetworkParameters>())": "List<NetworkParameters>", "PROTOCOL_VERSION=70001": "int", "genesisBlock": "Block", "proofOfWorkLimit": "BigInteger", "subsidyDecreaseBlockCount": "int", "port": "int", "MAX_MONEY=new BigInteger(\"21000000\",10).multiply(COIN)": "BigInteger", "TARGET_SPACING=10 * 60": "int", "dnsSeeds": "String[]", "checkpoints=new HashMap<Integer,Sha256Hash>()": "Map<Integer,Sha256Hash>", "SATOSHI_KEY=Hex.decode(\"04fc9702847840aaf195de8442ebecedf5b095cdbb9bc716bda9110971b28a49e0ead8564ff0db22209e0374782c093bb899692d524e9d6a6956e7c5ecbcd68284\")": "byte[]", "interval": "int", "id": "String", "spendableCoinbaseDepth": "int", "dumpedPrivateKeyHeader": "int", "targetTimespan": "int", "TARGET_TIMESPAN=14 * 24 * 60* 60": "int", "BIP16_ENFORCE_TIME=1333238400": "int"}, "code": ["int", "function", "(", ")", "{", "return", "getInterval", "(", ")", "-", "1", ";", "}"], "memberFunctions": {"regTests": [["NetworkParameters"]], "allowEmptyPeerChain": [["boolean"]], "getDumpedPrivateKeyHeader": [["int"]], "testNet2": [["NetworkParameters"]], "testNet3": [["NetworkParameters"]], "unitTests": [["NetworkParameters"]], "getId": [["String"]], "getAddressHeader": [["int"]], "getAcceptableAddressCodes": [["int[]"]], "prodNet": [["NetworkParameters"]], "fromID": [["NetworkParameters", "String id"]], "getTargetTimespan": [["int"]], "getDnsSeeds": [["String[]"]], "hashCode": [["int"]], "getSpendableCoinbaseDepth": [["int"]], "testNet": [["NetworkParameters"]], "calculateBlockPoWHash": [["Sha256Hash", "Block b"]], "getMaxMoney": [["BigInteger"]], "getParamsFromAddressByte": [["NetworkParameters", "int version"]], "registerParams": [["void", "NetworkParameters params"]], "isCheckpoint": [["boolean", "int height"]], "getP2SHHeader": [["int"]], "getInterval": [["int"]], "getGenesisBlock": [["Block"]], "getSubsidyDecreaseBlockCount": [["int"]], "createGenesis": [["Block", "NetworkParameters n"]], "getPacketMagic": [["long"]], "getPort": [["int"]], "getAlertSigningKey": [["byte[]"]], "equals": [["boolean", "Object other"]], "passesCheckpoint": [["boolean", "int height", "Sha256Hash hash"]], "isAcceptableAddressVersion": [["boolean", "int version"]], "getURIScheme": [["String"]], "getProofOfWorkLimit": [["BigInteger"]]}, "className": "NetworkParameters", "renamed": ["int", "function", "(", ")", "{", "return", "getInterval", "(", ")", "-", "1", ";", "}"], "nl": "The number of previous blocks to look at when calculating the next Block's difficulty", "nlToks": ["The", "number", "of", "previous", "blocks", "to", "look", "at", "when", "calculating", "the", "next", "Block", "'s", "difficulty"], "path": "plncoin/plncoin-and/tree/master/plncoinj/core/src/main/java/com/google/bitcoin/core/NetworkParameters.java", "idx": 1820}
{"memberVariables": {"_ComplexNode_QNAME=new QName(\"http://www.xmlunit.org/test/complexXml\",\"ComplexNode\")": "QName"}, "code": ["ComplexNode", "function", "(", ")", "{", "return", "new", "ComplexNode", "(", ")", ";", "}"], "memberFunctions": {"createRootNode": [["RootNode"]]}, "className": "ObjectFactory", "renamed": ["ComplexNode", "function", "(", ")", "{", "return", "new", "ComplexNode", "(", ")", ";", "}"], "nl": "Create an instance of  {@link ComplexNode }", "nlToks": ["Create", "an", "instance", "of", "-LCB-", "@link", "ComplexNode", "-RCB-"], "path": "phbenisc/xmlunit/tree/master/xmlunit-core/src/test/java/org/xmlunit/builder/jaxb/ObjectFactory.java", "idx": 1821}
{"memberVariables": {"AMPLIFIED=true": "boolean", "DELETED=false": "boolean", "gisticID": "int", "peakStart": "int", "genes_in_ROI": "ArrayList<CanonicalGene>", "cytoband": "String", "amp": "boolean", "NO_SUCH_GISTIC=-1": "int", "cancerStudyId": "int", "chromosome": "int", "peakEnd": "int", "qValue": "double"}, "code": ["void", "function", "(", "ArrayList", "<", "CanonicalGene", ">", "genes_in_ROI", ")", "{", "this", ".", "genes_in_ROI", "=", "genes_in_ROI", ";", "}"], "memberFunctions": {"setPeakEnd": [["void", "int peakEnd"]], "setAmp": [["void", "boolean amp"]], "getCytoband": [["String"]], "setPeakStart": [["void", "int peakStart"]], "getPeakStart": [["int"]], "setqValue": [["void", "double qValue"]], "getAmp": [["boolean"]], "getInternalId": [["int"]], "peakSize": [["int"]], "getCancerStudyId": [["int"]], "getChromosome": [["int"]], "getPeakEnd": [["int"]], "addGene": [["void", "CanonicalGene gene"]], "setInternalId": [["void", "int internalId"]], "setCancerStudyId": [["void", "int cancerStudyId"]], "getqValue": [["double"]], "toString": [["String"]], "getGenes_in_ROI": [["ArrayList<CanonicalGene>"]], "setCytoband": [["void", "String cytoband"]], "setChromosome": [["void", "int chromosome"]]}, "className": "Gistic", "renamed": ["void", "function", "(", "ArrayList", "<", "CanonicalGene", ">", "arg0", ")", "{", "this", ".", "genes_in_ROI", "=", "arg0", ";", "}"], "nl": "Sets the genes in the ROI", "nlToks": ["Sets", "the", "genes", "in", "the", "ROI"], "path": "adamabeshouse/cbioportal/tree/master/core/src/main/java/org/mskcc/cbio/portal/model/Gistic.java", "idx": 1822}
{"memberVariables": {}, "code": ["void", "function", "(", "final", "Callable", "<", "?", ">", "task", ",", "int", "timeoutInSeconds", ")", "{", "Future", "<", "?", ">", "future", "=", "WaitForAsyncUtils", ".", "asyncFx", "(", "task", ")", ";", "WaitForAsyncUtils", ".", "waitFor", "(", "timeoutInSeconds", ",", "TimeUnit", ".", "SECONDS", ",", "future", ")", ";", "WaitForAsyncUtils", ".", "waitForFxEvents", "(", ")", ";", "}"], "memberFunctions": {"awaitCondition": [["void", "Callable<Boolean> condition"], ["void", "Callable<Boolean> condition", "int timeoutInSeconds"]], "awaitEvents": [["void"]]}, "className": "FXTestUtils", "renamed": ["void", "function", "(", "final", "Callable", "<", "?", ">", "arg0", ",", "int", "arg1", ")", "{", "Future", "<", "?", ">", "loc0", "=", "WaitForAsyncUtils", ".", "asyncFx", "(", "arg0", ")", ";", "WaitForAsyncUtils", ".", "waitFor", "(", "arg1", ",", "TimeUnit", ".", "SECONDS", ",", "loc0", ")", ";", "WaitForAsyncUtils", ".", "waitForFxEvents", "(", ")", ";", "}"], "nl": "Runs the given Callable in the JavaFX thread, waiting for it to complete before returning. Also attempts to wait for any other JavaFX events that may have been queued in the Callable to complete. If any Exception is thrown during execution of the Callable, that exception will be re-thrown from invokeAndWait.", "nlToks": ["Runs", "the", "given", "Callable", "in", "the", "JavaFX", "thread", ",", "waiting", "for", "it", "to", "complete", "before", "returning", ".", "Also", "attempts", "to", "wait", "for", "any", "other", "JavaFX", "events", "that", "may", "have", "been", "queued", "in", "the", "Callable", "to", "complete", ".", "If", "any", "Exception", "is", "thrown", "during", "execution", "of", "the", "Callable", ",", "that", "exception", "will", "be", "re-thrown", "from", "invokeAndWait", "."], "path": "hastebrot/TestFX/tree/master/subprojects/testfx-legacy/src/main/java/org/loadui/testfx/utils/FXTestUtils.java", "idx": 1823}
{"memberVariables": {"log=new ArrayList<String>()": "List<String>"}, "code": ["void", "function", "(", "String", "message", ")", "{", "log", ".", "add", "(", "message", ")", ";", "}"], "memberFunctions": {"get": [["List<String>"]], "clean": [["void"]], "representation": [["String"]]}, "className": "WeaknessLog", "renamed": ["void", "function", "(", "String", "arg0", ")", "{", "log", ".", "add", "(", "arg0", ")", ";", "}"], "nl": "Append a simple string.", "nlToks": ["Append", "a", "simple", "string", "."], "path": "0xwindows/WS-Attacker/tree/master/libs/Signature_Wrapping_Library/src/main/java/wsattacker/library/signatureWrapping/xpath/weakness/util/WeaknessLog.java", "idx": 1824}
{"memberVariables": {"SHIFT=1": "int", "NONASSOC=3": "int", "REDUCE=2": "int", "ERROR=0": "int"}, "code": ["int", "function", "(", ")", "{", "return", "0xCafe123", ";", "}"], "memberFunctions": {"kind": [["int"]], "equals": [["boolean", "parse_action other"], ["boolean", "Object other"]], "toString": [["String"]]}, "className": "parse_action", "renamed": ["int", "function", "(", ")", "{", "return", "0xCafe123", ";", "}"], "nl": "Compute a hash code.", "nlToks": ["Compute", "a", "hash", "code", "."], "path": "polyglot-compiler/polyglot/tree/master/tools/java_cup/src/java_cup/parse_action.java", "idx": 1825}
{"memberVariables": {"s_random=new Random()": "Random", "m_byteArray=new byte[8]": "byte[]"}, "code": ["byte", "[", "]", "function", "(", ")", "{", "return", "m_byteArray", ";", "}"], "memberFunctions": {}, "className": "IceTieBreaker", "renamed": ["byte", "[", "]", "function", "(", ")", "{", "return", "m_byteArray", ";", "}"], "nl": "Accessor for the tie breaker bytes.", "nlToks": ["Accessor", "for", "the", "tie", "breaker", "bytes", "."], "path": "adamfisk/littleshoot-client/tree/master/common/ice/src/main/java/org/lastbamboo/common/ice/IceTieBreaker.java", "idx": 1827}
{"memberVariables": {"endDate": "Timestamp", "feedConfigId": "BigDecimal", "resultCode": "String", "serialVersionUID=1L": "long", "resultMessage": "String", "fileCount": "BigDecimal", "maxReceiptDate": "Timestamp", "downloadSize": "BigDecimal", "feedId": "BigDecimal", "configInfo": "String", "runId": "long", "errors": "byte[]", "runStatus": "String", "startDate": "Timestamp"}, "code": ["void", "function", "(", "BigDecimal", "fileCount", ")", "{", "this", ".", "fileCount", "=", "fileCount", ";", "}"], "memberFunctions": {"getFeedConfigId": [["BigDecimal"]], "getStartDate": [["Timestamp"]], "setFeedId": [["void", "BigDecimal feedId"]], "getResultCode": [["String"]], "setFeedConfigId": [["void", "BigDecimal feedConfigId"]], "setMaxReceiptDate": [["void", "Timestamp maxReceiptDate"]], "getRunId": [["long"]], "getEndDate": [["Timestamp"]], "setErrors": [["void", "byte[] errors"]], "getConfigInfo": [["String"]], "setEndDate": [["void", "Timestamp endDate"]], "getErrors": [["byte[]"]], "getDownloadSize": [["BigDecimal"]], "getResultMessage": [["String"]], "setResultMessage": [["void", "String resultMessage"]], "getFileCount": [["BigDecimal"]], "getRunStatus": [["String"]], "setRunStatus": [["void", "String runStatus"]], "setStartDate": [["void", "Timestamp startDate"]], "getFeedId": [["BigDecimal"]], "setResultCode": [["void", "String resultCode"]], "setRunId": [["void", "long runId"]], "getMaxReceiptDate": [["Timestamp"]], "setConfigInfo": [["void", "String configInfo"]], "setDownloadSize": [["void", "BigDecimal downloadSize"]]}, "className": "PCLFetcherRunRecorderEntity", "renamed": ["void", "function", "(", "BigDecimal", "arg0", ")", "{", "this", ".", "fileCount", "=", "arg0", ";", "}"], "nl": "Sets the file count.", "nlToks": ["Sets", "the", "file", "count", "."], "path": "pkesireddy/portico_fletcher/tree/master/FetcherTesterService/src/main/java/org/ithaka/cm/fetchertester/entity/PCLFetcherRunRecorderEntity.java", "idx": 1828}
{"memberVariables": {"step=0": "int", "panels=new ArrayList<JPanel>()": "List<JPanel>", "started=false": "boolean", "finished=false": "boolean", "item=null": "WizardItem"}, "code": ["int", "function", "(", ")", "{", "return", "step", "*", "100", "/", "getNumSteps", "(", ")", ";", "}"], "memberFunctions": {"next": [["void"]], "removePanel": [["void", "int s"]], "getCurrentPanel": [["JPanel"]], "canGoBack": [["boolean"]], "canFinish": [["boolean"]], "getStep": [["int"]], "makePanel": [["JPanel", "int newStep"]], "back": [["void"]], "getNumSteps": [["int"]], "isStarted": [["boolean"]], "setToDoItem": [["void", "WizardItem i"]], "isFinished": [["boolean"]], "undoAction": [["void", "int oldStep"], ["void"]], "getToDoItem": [["WizardItem"]], "canGoNext": [["boolean"]], "finish": [["void"]], "getPanel": [["JPanel", "int s"]], "doAction": [["void", "int oldStep"], ["void"]]}, "className": "Wizard", "renamed": ["int", "function", "(", ")", "{", "return", "step", "*", "100", "/", "getNumSteps", "(", ")", ";", "}"], "nl": "An integer between 0 and 100, shows percent done. The current ArgoUML user interface shows different PostIt note icons for 0, 1-25, 26-50. 51-75, and 76-100.", "nlToks": ["An", "integer", "between", "0", "and", "100", ",", "shows", "percent", "done", ".", "The", "current", "ArgoUML", "user", "interface", "shows", "different", "PostIt", "note", "icons", "for", "0", ",", "1-25", ",", "26-50", ".", "51-75", ",", "and", "76-100", "."], "path": "pichiliani/CoArgoUML/tree/master/v0.24/fonte/src/argouml-app/src/org/argouml/cognitive/critics/Wizard.java", "idx": 1829}
{"memberVariables": {}, "code": ["BrowseOffersResponse", ".", "Return", ".", "OfferData", ".", "Geo", ".", "Region", "function", "(", ")", "{", "return", "new", "BrowseOffersResponse", ".", "Return", ".", "OfferData", ".", "Geo", ".", "Region", "(", ")", ";", "}"], "memberFunctions": {"createBrowseOffersResponseReturnOfferDataSeo": [["BrowseOffersResponse.Return.OfferData.Seo"]], "createBrowseOffersResponseReturnOfferDataGeoRegionCountryState": [["BrowseOffersResponse.Return.OfferData.Geo.Region.Country.State"]], "createBrowseOffersResponseReturnOfferDataOfferMedia": [["BrowseOffersResponse.Return.OfferData.OfferMedia"]], "createBrowseOffersResponse": [["BrowseOffersResponse"]], "createBrowseOffersResponseReturnOfferDataGeoRegionCountry": [["BrowseOffersResponse.Return.OfferData.Geo.Region.Country"]], "createBrowseOffersResponseReturn": [["BrowseOffersResponse.Return"]], "createBrowseOffersResponseReturnOfferDataOfferMediaOfferImageEntryValue": [["BrowseOffersResponse.Return.OfferData.OfferMedia.OfferImage.Entry.Value"]], "createBrowseOffersResponseReturnOfferData": [["BrowseOffersResponse.Return.OfferData"]], "createBrowseOffersResponseReturnOfferDataMerchant": [["BrowseOffersResponse.Return.OfferData.Merchant"]], "createBrowseOffersResponseReturnOfferDataOfferMediaOfferImageEntry": [["BrowseOffersResponse.Return.OfferData.OfferMedia.OfferImage.Entry"]], "createBrowseOffersResponseReturnOfferDataOfferMediaOfferImage": [["BrowseOffersResponse.Return.OfferData.OfferMedia.OfferImage"]], "createBrowseOffersResponseReturnOfferDataOfferMediaOfferImageEntryValueItem": [["BrowseOffersResponse.Return.OfferData.OfferMedia.OfferImage.Entry.Value.Item"]], "createBrowseOffersResponseReturnOfferDataGeo": [["BrowseOffersResponse.Return.OfferData.Geo"]]}, "className": "ObjectFactory", "renamed": ["BrowseOffersResponse", ".", "Return", ".", "OfferData", ".", "Geo", ".", "Region", "function", "(", ")", "{", "return", "new", "BrowseOffersResponse", ".", "Return", ".", "OfferData", ".", "Geo", ".", "Region", "(", ")", ";", "}"], "nl": "Create an instance of  {@link BrowseOffersResponse.Return.OfferData.Geo.Region }", "nlToks": ["Create", "an", "instance", "of", "-LCB-", "@link", "BrowseOffersResponse.Return.OfferData.Geo.Region", "-RCB-"], "path": "priyankgandhi/mastercard/tree/master/eop-openapi-client/src/main/java/com/eop/api/search/gen/ObjectFactory.java", "idx": 1830}
{"memberVariables": {"defaultPort": "int", "socketFactory": "SchemeSocketFactory", "name": "String", "stringRep": "String", "layered": "boolean"}, "code": ["int", "function", "(", ")", "{", "return", "defaultPort", ";", "}"], "memberFunctions": {"getSocketFactory": [["SocketFactory"]], "getName": [["String"]], "hashCode": [["int"]], "isLayered": [["boolean"]], "equals": [["boolean", "Object obj"]], "toString": [["String"]], "getSchemeSocketFactory": [["SchemeSocketFactory"]], "resolvePort": [["int", "int port"]]}, "className": "Scheme", "renamed": ["int", "function", "(", ")", "{", "return", "defaultPort", ";", "}"], "nl": "Obtains the default port.", "nlToks": ["Obtains", "the", "default", "port", "."], "path": "pritamkhose/open-gpstracker.code/tree/master/external_sources/httpclient-4.1.1/httpclient/src/main/java/org/apache/ogt/http/conn/scheme/Scheme.java", "idx": 1832}
{"memberVariables": {"limit": "int", "count": "int", "invMap": "Map<Item,Integer>"}, "code": ["void", "function", "(", ")", "{", "for", "(", "Item", "i", ":", "invMap", ".", "keySet", "(", ")", ")", "{", "System", ".", "out", ".", "println", "(", "i", ".", "getUnlocalizedName", "(", ")", "+", "\" x\"", "+", "invMap", ".", "get", "(", "i", ")", ")", ";", "}", "}"], "memberFunctions": {"addItem": [["void", "Item item", "int quantity"]], "getItemStacks": [["ItemStack[]"]], "dumpAll": [["void"]], "isFull": [["boolean"]]}, "className": "MobInventory", "renamed": ["void", "function", "(", ")", "{", "for", "(", "Item", "loc0", ":", "invMap", ".", "keySet", "(", ")", ")", "{", "System", ".", "out", ".", "println", "(", "loc0", ".", "getUnlocalizedName", "(", ")", "+", "\"srini_string\"", "+", "invMap", ".", "get", "(", "loc0", ")", ")", ";", "}", "}"], "nl": "Prints the inventory list for debugging purposes.", "nlToks": ["Prints", "the", "inventory", "list", "for", "debugging", "purposes", "."], "path": "pregnantboy/fyp/tree/master/forge/src/main/java/fuzzyMod/inventory/MobInventory.java", "idx": 1834}
{"memberVariables": {"formats": "List<String>", "author": "String", "length": "FileSizeComparable", "rating": "String", "title_sort": "String", "language": "String", "title": "String", "uuid": "String", "tagStr": "String", "tags": "List<String>", "path": "String", "author_sort": "String", "comment": "String", "filenameWithoutExtension": "String", "selected": "boolean", "pubdate": "String"}, "code": ["void", "function", "(", "long", "length", ")", "{", "this", ".", "length", "=", "new", "FileSizeComparable", "(", "length", ")", ";", "}"], "memberFunctions": {"getAuthor_sort": [["String"]], "setSelected": [["void", "boolean selected"]], "getAuthor": [["String"]], "getTags": [["List<String>"]], "compareTo": [["int", "Object o"]], "getThumbnail": [["ImageIcon", "boolean readIfNotFound"]], "isLocal": [["boolean"]], "getSort": [["String"]], "getCoverFilePath": [["String"]], "getTitle": [["String"]], "getPubdate": [["String"]], "getUuid": [["String"]], "getFilePath": [["String"]], "isSelected": [["boolean"]], "getPath": [["String"]], "getLength": [["FileSizeComparable"]], "getFormat": [["String"]], "toString": [["String"]], "getRating": [["String"]]}, "className": "Book", "renamed": ["void", "function", "(", "long", "arg0", ")", "{", "this", ".", "length", "=", "new", "FileSizeComparable", "(", "arg0", ")", ";", "}"], "nl": "set length", "nlToks": ["set", "length"], "path": "phramusca/JaMuz/tree/master/src/jamuz/process/book/Book.java", "idx": 1835}
{"memberVariables": {"languageToLanguageVersion=new HashMap<>()": "Map<Language,LanguageVersion>"}, "code": ["LanguageVersion", "function", "(", "File", "sourceFile", ")", "{", "return", "getDefaultLanguageVersionForFile", "(", "sourceFile", ".", "getName", "(", ")", ")", ";", "}"], "memberFunctions": {"getDefaultLanguageVersion": [["LanguageVersion", "Language language"]], "getExtension": [["String", "String fileName"]], "setDefaultLanguageVersion": [["LanguageVersion", "LanguageVersion languageVersion"]], "getLanguagesForFile": [["List<Language>", "File sourceFile"], ["List<Language>", "String fileName"]]}, "className": "LanguageVersionDiscoverer", "renamed": ["LanguageVersion", "function", "(", "File", "arg0", ")", "{", "return", "getDefaultLanguageVersionForFile", "(", "arg0", ".", "getName", "(", ")", ")", ";", "}"], "nl": "Get the default LanguageVersion for the first Language of a given source file.", "nlToks": ["Get", "the", "default", "LanguageVersion", "for", "the", "first", "Language", "of", "a", "given", "source", "file", "."], "path": "adangel/pmd/tree/master/pmd-core/src/main/java/net/sourceforge/pmd/lang/LanguageVersionDiscoverer.java", "idx": 1837}
{"memberVariables": {"dev": "Device"}, "code": ["void", "function", "(", ")", "{", "System", ".", "out", ".", "println", "(", "\"getImage\"", ")", ";", "Device", "instance", "=", "null", ";", "Image", "expResult", "=", "null", ";", "Image", "result", "=", "instance", ".", "getImage", "(", ")", ";", "assertEquals", "(", "expResult", ",", "result", ")", ";", "fail", "(", "\"The test case is a prototype.\"", ")", ";", "}"], "memberFunctions": {"testGetType": [["void"]], "setUpClass": [["void"]], "testGetDeviceName_0args": [["void"]], "testAddToPane": [["void"]], "testGetAddress": [["void"]], "tearDownClass": [["void"]], "tearDown": [["void"]], "testGetDeviceNames": [["void"]], "testGetDeviceBlock": [["void"]], "testAddCapabilities": [["void"]], "testToString": [["void"]], "testGetImgName": [["void"]], "testAddCapability": [["void"]], "testGetDeviceName_Locale": [["void"]], "setUp": [["void"]], "testGetDeviceID": [["void"]], "testGetCapabilityBlock": [["void"]], "testGetCapabilities": [["void"]], "testRemoveCapability": [["void"]]}, "className": "DeviceTest", "renamed": ["void", "function", "(", ")", "{", "System", ".", "out", ".", "println", "(", "\"srini_string\"", ")", ";", "Device", "loc0", "=", "null", ";", "Image", "loc1", "=", "null", ";", "Image", "loc2", "=", "loc0", ".", "getImage", "(", ")", ";", "assertEquals", "(", "loc1", ",", "loc2", ")", ";", "fail", "(", "\"srini_string\"", ")", ";", "}"], "nl": "Test of getImage method, of class Device.", "nlToks": ["Test", "of", "getImage", "method", ",", "of", "class", "Device", "."], "path": "hashinisenaratne/SIFEB/tree/master/Visual Programming Editor/SiFEB_VE/test/com/sifeb/ve/DeviceTest.java", "idx": 1839}
{"memberVariables": {}, "code": ["int", "function", "(", ")", "{", "return", "-", "1", ";", "}"], "memberFunctions": {"op": [["int"]], "writeToLog": [["int"]], "undo": [["void", "int txnum"]], "toString": [["String"]], "redo": [["void", "int txnum"]]}, "className": "CheckpointRecord", "renamed": ["int", "function", "(", ")", "{", "return", "-", "1", ";", "}"], "nl": "Checkpoint records have no associated transaction, and so the method returns a \"dummy\", negative txid.", "nlToks": ["Checkpoint", "records", "have", "no", "associated", "transaction", ",", "and", "so", "the", "method", "returns", "a", "``", "dummy", "''", ",", "negative", "txid", "."], "path": "prerit2803/DBMSProject2/tree/master/simpledb/tx/recovery/CheckpointRecord.java", "idx": 1840}
{"memberVariables": {"physicalNetwork": "String", "networkType": "NetworkType", "segmentationId": "Integer"}, "code": ["Builder", "function", "(", ")", "{", "return", "new", "Builder", "(", ")", ".", "fromNetworkSegment", "(", "this", ")", ";", "}"], "memberFunctions": {"fromNetworkSegment": [["Builder", "NetworkSegment in"]], "string": [["Objects.ToStringHelper"]], "getSegmentationId": [["Integer"]], "getPhysicalNetwork": [["String"]], "build": [["NetworkSegment"]], "hashCode": [["int"]], "equals": [["boolean", "Object obj"]], "getNetworkType": [["NetworkType"]], "builder": [["Builder"]], "physicalNetwork": [["Builder", "String physicalNetwork"]], "toString": [["String"]], "networkType": [["Builder", "NetworkType networkType"]], "segmentationId": [["Builder", "int segmentationId"]]}, "className": "NetworkSegment", "renamed": ["Builder", "function", "(", ")", "{", "return", "new", "Builder", "(", ")", ".", "fromNetworkSegment", "(", "this", ")", ";", "}"], "nl": "Gets a Builder configured as this object.", "nlToks": ["Gets", "a", "Builder", "configured", "as", "this", "object", "."], "path": "pimenas/jclouds-labs-openstack/tree/master/openstack-neutron/src/main/java/org/jclouds/openstack/neutron/v2/domain/NetworkSegment.java", "idx": 1841}
{"memberVariables": {}, "code": ["void", "function", "(", ")", "{", "System", ".", "out", ".", "println", "(", "\"setNumberRequests\"", ")", ";", "int", "numberRequests", "=", "0", ";", "LogEntryInterval", "instance", "=", "new", "LogEntryInterval", "(", ")", ";", "instance", ".", "setNumberRequests", "(", "numberRequests", ")", ";", "}"], "memberFunctions": {"testSetIntervalNumber": [["void"]], "testGetIntervalNumber": [["void"]], "testGetNumberRequests": [["void"]], "testSetMeanResponseTime": [["void"]], "testGetMeanResponseTime": [["void"]], "testIncNumberRequests": [["void"]]}, "className": "LogEntryIntervalTest", "renamed": ["void", "function", "(", ")", "{", "System", ".", "out", ".", "println", "(", "\"srini_string\"", ")", ";", "int", "loc0", "=", "0", ";", "LogEntryInterval", "loc1", "=", "new", "LogEntryInterval", "(", ")", ";", "loc1", ".", "setNumberRequests", "(", "loc0", ")", ";", "}"], "nl": "Test of setNumberRequests method, of class LogEntryInterval.", "nlToks": ["Test", "of", "setNumberRequests", "method", ",", "of", "class", "LogEntryInterval", "."], "path": "0xwindows/WS-Attacker/tree/master/plugins/Denial_of_Service/src/test/java/wsattacker/plugin/dos/dosExtension/logEntry/LogEntryIntervalTest.java", "idx": 1842}
{"memberVariables": {}, "code": ["Reader", "function", "(", "String", "path", ",", "int", "maxLen", ")", "{", "return", "new", "InputStreamReader", "(", "getResourceAsStream", "(", "path", ",", "maxLen", ")", ")", ";", "}"], "memberFunctions": {"getReaderAsString": [["String", "Reader reader", "int maxLen"]], "createJar": [["File", "File baseDir", "String jarName", "Class... classes"]], "getResourceAsString": [["String", "String path", "int maxLen"]], "copyCharStream": [["void", "Reader reader", "Writer writer"]], "zipDir": [["void", "File dir", "String relativePath", "ZipOutputStream zos"], ["void", "File dir", "String relativePath", "ZipOutputStream zos", "boolean start"]], "getResourceAsStream": [["InputStream", "String path", "int maxLen"]], "copyStream": [["void", "InputStream is", "OutputStream os"]], "delete": [["void", "File file"]]}, "className": "IOUtils", "renamed": ["Reader", "function", "(", "String", "arg0", ",", "int", "arg1", ")", "{", "return", "new", "InputStreamReader", "(", "getResourceAsStream", "(", "arg0", ",", "arg1", ")", ")", ";", "}"], "nl": "Return a classpath resource as a reader.  It is assumed that the resource is a text resource.", "nlToks": ["Return", "a", "classpath", "resource", "as", "a", "reader", ".", "It", "is", "assumed", "that", "the", "resource", "is", "a", "text", "resource", "."], "path": "pingpangkuangmo/oozie/tree/master/core/src/main/java/org/apache/oozie/util/IOUtils.java", "idx": 1843}
{"memberVariables": {"mBuffer=null": "ByteBuf", "mThrown=ExpectedException.none()": "ExpectedException", "LENGTH=4": "int"}, "code": ["void", "function", "(", ")", "{", "DataNettyBuffer", "data", "=", "new", "DataNettyBuffer", "(", "mBuffer", ",", "LENGTH", ")", ";", "ByteBuffer", "readOnlyBuffer", "=", "data", ".", "getReadOnlyByteBuffer", "(", ")", ";", "Assert", ".", "assertTrue", "(", "readOnlyBuffer", ".", "isReadOnly", "(", ")", ")", ";", "Assert", ".", "assertEquals", "(", "mBuffer", ".", "nioBuffer", "(", ")", ",", "readOnlyBuffer", ")", ";", "}"], "memberFunctions": {"bufferAlreadyReleased": [["void"]], "before": [["void"]], "getNettyOutputNotSupported": [["void"]], "singleNioBufferCheckFailed": [["void"]], "releaseBuffer": [["void"]], "length": [["void"]], "releaseBufferTest": [["void"]], "refCountCheckFailed": [["void"]], "after": [["void"]], "releaseBufferFail": [["void"]]}, "className": "DataNettyBufferTest", "renamed": ["void", "function", "(", ")", "{", "DataNettyBuffer", "loc0", "=", "new", "DataNettyBuffer", "(", "mBuffer", ",", "LENGTH", ")", ";", "ByteBuffer", "loc1", "=", "loc0", ".", "getReadOnlyByteBuffer", "(", ")", ";", "Assert", ".", "assertTrue", "(", "loc1", ".", "isReadOnly", "(", ")", ")", ";", "Assert", ".", "assertEquals", "(", "mBuffer", ".", "nioBuffer", "(", ")", ",", "loc1", ")", ";", "}"], "nl": "Tests the  {@link DataNettyBuffer#getReadOnlyByteBuffer()} method.", "nlToks": ["Tests", "the", "-LCB-", "@link", "DataNettyBuffer", "#getReadOnlyByteBuffer", "-LRB-", "-RRB-", "-RCB-", "method", "."], "path": "poemlin/alluxio/tree/master/core/server/src/test/java/alluxio/network/protocol/databuffer/DataNettyBufferTest.java", "idx": 1844}
{"memberVariables": {"_imageCacheCapacity=16": "int", "_baseURL": "String", "_imageCache=new LinkedHashMap(_imageCacheCapacity,0.75f,true)": "LinkedHashMap", "_device": "Device"}, "code": ["boolean", "function", "(", "String", "uri", ")", "{", "return", "false", ";", "}"], "memberFunctions": {"getBaseURL": [["String"]], "loadEmbeddedBase64ImageResource": [["ImageResource", "final String uri"]], "disposeCache": [["void"]], "getCSSResource": [["CSSResource", "String uri"]], "createImageResource": [["ImageResource", "String uri", "InputStream is"]], "getXMLResource": [["XMLResource", "String uri"]], "setBaseURL": [["void", "String url"]], "getImageResource": [["ImageResource", "String uri"]], "resolveURI": [["String", "String uri"]], "getBinaryResource": [["byte[]", "String uri"]], "getInputStream": [["InputStream", "String uri"]]}, "className": "NaiveUserAgent", "renamed": ["boolean", "function", "(", "String", "arg0", ")", "{", "return", "false", ";", "}"], "nl": "Gets the visited attribute of the NaiveUserAgent object", "nlToks": ["Gets", "the", "visited", "attribute", "of", "the", "NaiveUserAgent", "object"], "path": "plutogeek/flyingsaucer/tree/master/flying-saucer-swt/src/main/java/org/xhtmlrenderer/swt/NaiveUserAgent.java", "idx": 1845}
{"memberVariables": {}, "code": ["void", "function", "(", "Object", "object", ",", "Json", "json", ",", "ArrayList", "<", "String", ">", "skipFields", ")", "{", "Field", "[", "]", "fields", "=", "object", ".", "getClass", "(", ")", ".", "getFields", "(", ")", ";", "for", "(", "Field", "field", ":", "fields", ")", "{", "if", "(", "!", "skipFields", ".", "contains", "(", "field", ".", "getName", "(", ")", ")", ")", "{", "System", ".", "out", ".", "println", "(", "\"Writing: \"", "+", "field", ".", "getName", "(", ")", ")", ";", "json", ".", "writeValue", "(", "field", ".", "getName", "(", ")", ",", "field", ".", "get", "(", "object", ")", ")", ";", "}", "}", "}"], "memberFunctions": {"read": [["void", "Object object", "Json json", "JsonValue jsonValue", "ArrayList<String> skipFields"]]}, "className": "SerializationHelper", "renamed": ["void", "function", "(", "Object", "arg0", ",", "Json", "arg1", ",", "ArrayList", "<", "String", ">", "arg2", ")", "{", "Field", "[", "]", "loc0", "=", "arg0", ".", "getClass", "(", ")", ".", "getFields", "(", ")", ";", "for", "(", "Field", "loc1", ":", "loc0", ")", "{", "if", "(", "!", "arg2", ".", "contains", "(", "loc1", ".", "getName", "(", ")", ")", ")", "{", "System", ".", "out", ".", "println", "(", "\"srini_string\"", "+", "loc1", ".", "getName", "(", ")", ")", ";", "arg1", ".", "writeValue", "(", "loc1", ".", "getName", "(", ")", ",", "loc1", ".", "get", "(", "arg0", ")", ")", ";", "}", "}", "}"], "nl": "Serializes an object into a Json object.", "nlToks": ["Serializes", "an", "object", "into", "a", "Json", "object", "."], "path": "prativa/shadowstruggles/tree/master/Tools/src/br/edu/ifsp/pds/shadowstruggles/tools/data/SerializationHelper.java", "idx": 1846}
{"memberVariables": {"congestionWindowSize": "long", "numberOfDuplicateDataPackets=new AtomicInteger(0)": "AtomicInteger", "metrics=new ArrayList<MeanValue>()": "List<MeanValue>", "numberOfNAKSent=new AtomicInteger(0)": "AtomicInteger", "statsHistory=new ArrayList<StatisticsHistoryEntry>()": "List<StatisticsHistoryEntry>", "numberOfACKReceived=new AtomicInteger(0)": "AtomicInteger", "componentDescription": "String", "numberOfRetransmittedDataPackets=new AtomicInteger(0)": "AtomicInteger", "numberOfACKSent=new AtomicInteger(0)": "AtomicInteger", "first=true": "boolean", "numberOfCCSlowDownEvents=new AtomicInteger(0)": "AtomicInteger", "numberOfMissingDataEvents=new AtomicInteger(0)": "AtomicInteger", "numberOfCCWindowExceededEvents=new AtomicInteger(0)": "AtomicInteger", "initialTime": "long", "numberOfReceivedDataPackets=new AtomicInteger(0)": "AtomicInteger", "numberOfSentDataPackets=new AtomicInteger(0)": "AtomicInteger", "roundTripTime": "long", "numberOfNAKReceived=new AtomicInteger(0)": "AtomicInteger", "roundTripTimeVariance": "long", "estimatedLinkCapacity": "long", "packetArrivalRate": "long", "sendPeriod": "double"}, "code": ["List", "<", "MeanValue", ">", "function", "(", ")", "{", "return", "Collections", ".", "unmodifiableList", "(", "metrics", ")", ";", "}"], "memberFunctions": {"setCongestionWindowSize": [["void", "long congestionWindowSize"]], "getNumberOfACKSent": [["int"]], "incNumberOfMissingDataEvents": [["void"]], "incNumberOfCCWindowExceededEvents": [["void"]], "incNumberOfNAKReceived": [["void"]], "getCongestionWindowSize": [["long"]], "incNumberOfCCSlowDownEvents": [["void"]], "getNumberOfReceivedDataPackets": [["int"]], "getNumberOfNAKReceived": [["int"]], "addMetric": [["void", "MeanValue m"]], "incNumberOfReceivedDataPackets": [["void"]], "getNumberOfRetransmittedDataPackets": [["int"]], "getNumberOfNAKSent": [["int"]], "writeParameterHistory": [["void", "File toFile"]], "incNumberOfRetransmittedDataPackets": [["void"]], "incNumberOfACKReceived": [["void"]], "getNumberOfDuplicateDataPackets": [["int"]], "getNumberOfSentDataPackets": [["int"]], "getSendPeriod": [["double"]], "incNumberOfNAKSent": [["void"]], "setSendPeriod": [["void", "double sendPeriod"]], "getNumberOfACKReceived": [["int"]], "setRTT": [["void", "long rtt", "long rttVar"]], "storeParameters": [["void"]], "incNumberOfACKSent": [["void"]], "incNumberOfSentDataPackets": [["void"]], "setPacketArrivalRate": [["void", "long rate", "long linkCapacity"]], "getPacketArrivalRate": [["long"]], "toString": [["String"]], "incNumberOfDuplicateDataPackets": [["void"]]}, "className": "UDTStatistics", "renamed": ["List", "<", "MeanValue", ">", "function", "(", ")", "{", "return", "Collections", ".", "unmodifiableList", "(", "metrics", ")", ";", "}"], "nl": "get a read-only list containing all metrics", "nlToks": ["get", "a", "read-only", "list", "containing", "all", "metrics"], "path": "adamfisk/littleshoot-client/tree/master/common/udt/src/main/java/udt/util/UDTStatistics.java", "idx": 1847}
{"memberVariables": {}, "code": ["void", "function", "(", ")", "{", "AttackModel", "model", "=", "new", "AttackModel", "(", ")", ";", "ChartObject", "chartObject", "=", "new", "ChartObject", "(", "model", ")", ";", "JFreeChart", "chart", "=", "chartObject", ".", "createOverlaidChart", "(", ")", ";", "assertNotNull", "(", "\"Should contain chart object\"", ",", "chart", ")", ";", "}"], "memberFunctions": {}, "className": "ChartObjectTest", "renamed": ["void", "function", "(", ")", "{", "AttackModel", "loc0", "=", "new", "AttackModel", "(", ")", ";", "ChartObject", "loc1", "=", "new", "ChartObject", "(", "loc0", ")", ";", "JFreeChart", "loc2", "=", "loc1", ".", "createOverlaidChart", "(", ")", ";", "assertNotNull", "(", "\"srini_string\"", ",", "loc2", ")", ";", "}"], "nl": "Test of createOverlaidChart method, of class ChartObject.", "nlToks": ["Test", "of", "createOverlaidChart", "method", ",", "of", "class", "ChartObject", "."], "path": "0xwindows/WS-Attacker/tree/master/plugins/Denial_of_Service/src/test/java/wsattacker/plugin/dos/dosExtension/chart/ChartObjectTest.java", "idx": 1848}
{"memberVariables": {"ASCII_ENCODATION=0": "int", "TEXT_ENCODATION=2": "int", "X12_ENCODATION=3": "int", "MACRO_06_HEADER=\"[)>\\u001E06\\u001D\"": "String", "LATCH_TO_C40=230": "char", "UPPER_SHIFT=235": "char", "LATCH_TO_EDIFACT=240": "char", "LATCH_TO_TEXT=239": "char", "C40_UNLATCH=254": "char", "LATCH_TO_ANSIX12=238": "char", "BASE256_ENCODATION=5": "int", "MACRO_05_HEADER=\"[)>\\u001E05\\u001D\"": "String", "MACRO_TRAILER=\"\\u001E\\u0004\"": "String", "MACRO_05=236": "char", "EDIFACT_ENCODATION=4": "int", "PAD=129": "char", "C40_ENCODATION=1": "int", "LATCH_TO_BASE256=231": "char", "MACRO_06=237": "char", "X12_UNLATCH=254": "char"}, "code": ["int", "function", "(", "CharSequence", "msg", ",", "int", "startpos", ")", "{", "int", "count", "=", "0", ";", "int", "len", "=", "msg", ".", "length", "(", ")", ";", "int", "idx", "=", "startpos", ";", "if", "(", "idx", "<", "len", ")", "{", "char", "ch", "=", "msg", ".", "charAt", "(", "idx", ")", ";", "while", "(", "isDigit", "(", "ch", ")", "&&", "idx", "<", "len", ")", "{", "count", "++", ";", "idx", "++", ";", "if", "(", "idx", "<", "len", ")", "{", "ch", "=", "msg", ".", "charAt", "(", "idx", ")", ";", "}", "}", "}", "return", "count", ";", "}"], "memberFunctions": {"illegalCharacter": [["void", "char c"]], "findMinimums": [["int", "float[] charCounts", "int[] intCharCounts", "int min", "byte[] mins"]], "isX12TermSep": [["boolean", "char ch"]], "isSpecialB256": [["boolean", "char ch"]], "isExtendedASCII": [["boolean", "char ch"]], "isNativeEDIFACT": [["boolean", "char ch"]], "getMinimumCount": [["int", "byte[] mins"]], "isDigit": [["boolean", "char ch"]], "randomize253State": [["char", "char ch", "int codewordPosition"]], "isNativeC40": [["boolean", "char ch"]], "lookAheadTest": [["int", "CharSequence msg", "int startpos", "int currentMode"]], "isNativeX12": [["boolean", "char ch"]], "encodeHighLevel": [["String", "String msg"], ["String", "String msg", "SymbolShapeHint shape", "Dimension minSize", "Dimension maxSize"]], "isNativeText": [["boolean", "char ch"]]}, "className": "HighLevelEncoder", "renamed": ["int", "function", "(", "CharSequence", "arg0", ",", "int", "arg1", ")", "{", "int", "loc0", "=", "0", ";", "int", "loc1", "=", "arg0", ".", "length", "(", ")", ";", "int", "loc2", "=", "arg1", ";", "if", "(", "loc2", "<", "loc1", ")", "{", "char", "loc3", "=", "arg0", ".", "charAt", "(", "loc2", ")", ";", "while", "(", "isDigit", "(", "loc3", ")", "&&", "loc2", "<", "loc1", ")", "{", "loc0", "++", ";", "loc2", "++", ";", "if", "(", "loc2", "<", "loc1", ")", "{", "loc3", "=", "arg0", ".", "charAt", "(", "loc2", ")", ";", "}", "}", "}", "return", "loc0", ";", "}"], "nl": "Determines the number of consecutive characters that are encodable using numeric compaction.", "nlToks": ["Determines", "the", "number", "of", "consecutive", "characters", "that", "are", "encodable", "using", "numeric", "compaction", "."], "path": "ponsonio/zxing/tree/master/core/src/main/java/com/google/zxing/datamatrix/encoder/HighLevelEncoder.java", "idx": 1849}
{"memberVariables": {"x": "int", "y": "int"}, "code": ["int", "function", "(", ")", "{", "return", "x", ";", "}"], "memberFunctions": {"getY": [["int"]], "hashCode": [["int"]], "equals": [["boolean", "Object o"]], "toString": [["String"]]}, "className": "Move", "renamed": ["int", "function", "(", ")", "{", "return", "x", ";", "}"], "nl": "Returns the x-coordinate of the move.", "nlToks": ["Returns", "the", "x-coordinate", "of", "the", "move", "."], "path": "preethiper/othello/tree/master/java/Move.java", "idx": 1850}
{"memberVariables": {"lastModifiedTimeStamp": "Date", "feedId": "Long", "createdBy": "String", "fetcherStartTimeStamp": "Date", "createTimeStamp": "Date", "testId": "Long", "runId": "Long", "fetcherEndTimeStamp": "Date", "regTestResultDetailsLst": "List<TestResultDetailsDTO>", "outcome": "OutcomeType", "runStatus": "RunStatusType", "errorMsg": "String"}, "code": ["void", "function", "(", "Long", "testId", ")", "{", "this", ".", "testId", "=", "testId", ";", "}"], "memberFunctions": {"setLastModifiedTimeStamp": [["void", "Date lastModifiedTimeStamp"]], "getFetcherEndTimeStamp": [["Date"]], "setFeedId": [["void", "Long feedId"]], "setFetcherStartTimeStamp": [["void", "Date fetcherStartTimeStamp"]], "getLastModifiedTimeStamp": [["Date"]], "getOutcome": [["OutcomeType"]], "getRunId": [["Long"]], "getRegTestResultDetailsLst": [["List<TestResultDetailsDTO>"]], "getFeedId": [["Long"]], "getTestId": [["Long"]], "getFetcherStartTimeStamp": [["Date"]], "setRunId": [["void", "Long runId"]], "setRegTestResultDetailsLst": [["void", "List<TestResultDetailsDTO> regTestResultDetailsLst"]], "setErrorMsg": [["void", "String errorMsg"]], "setFetcherEndTimeStamp": [["void", "Date fetcherEndTimeStamp"]], "setCreateTimeStamp": [["void", "Date createTimeStamp"]], "setCreatedBy": [["void", "String createdBy"]], "getRunStatus": [["RunStatusType"]], "getCreateTimeStamp": [["Date"]], "setOutcome": [["void", "OutcomeType outcome"]], "toString": [["String"]], "getCreatedBy": [["String"]], "getErrorMsg": [["String"]], "setRunStatus": [["void", "RunStatusType runStatus"]]}, "className": "TestResultDTO", "renamed": ["void", "function", "(", "Long", "arg0", ")", "{", "this", ".", "testId", "=", "arg0", ";", "}"], "nl": "Sets the test id.", "nlToks": ["Sets", "the", "test", "id", "."], "path": "pkesireddy/portico_fletcher/tree/master/FetcherTesterService/src/main/java/org/ithaka/cm/fetchertester/model/TestResultDTO.java", "idx": 1851}
{"memberVariables": {"IMPL": "AccessibilityDelegateImpl", "DEFAULT_DELEGATE": "Object", "mBridge": "Object"}, "code": ["void", "function", "(", "View", "host", ",", "AccessibilityEvent", "event", ")", "{", "IMPL", ".", "onInitializeAccessibilityEvent", "(", "DEFAULT_DELEGATE", ",", "host", ",", "event", ")", ";", "}"], "memberFunctions": {"newAccessiblityDelegateDefaultImpl": [["Object"], ["Object"]], "dispatchPopulateAccessibilityEvent": [["boolean", "Object delegate", "View host", "AccessibilityEvent event"], ["boolean", "Object delegate", "View host", "AccessibilityEvent event"], ["boolean", "View host", "AccessibilityEvent event"]], "getBridge": [["Object"]], "sendAccessibilityEventUnchecked": [["void", "Object delegate", "View host", "AccessibilityEvent event"], ["void", "Object delegate", "View host", "AccessibilityEvent event"], ["void", "View host", "AccessibilityEvent event"]], "onPopulateAccessibilityEvent": [["void", "Object delegate", "View host", "AccessibilityEvent event"], ["void", "Object delegate", "View host", "AccessibilityEvent event"], ["void", "View host", "AccessibilityEvent event"]], "onRequestSendAccessibilityEvent": [["boolean", "Object delegate", "ViewGroup host", "View child", "AccessibilityEvent event"], ["boolean", "Object delegate", "ViewGroup host", "View child", "AccessibilityEvent event"], ["boolean", "ViewGroup host", "View child", "AccessibilityEvent event"]], "onInitializeAccessibilityNodeInfo": [["void", "Object delegate", "View host", "AccessibilityNodeInfoCompat info"], ["void", "Object delegate", "View host", "AccessibilityNodeInfoCompat info"], ["void", "View host", "AccessibilityNodeInfoCompat info"]], "sendAccessibilityEvent": [["void", "Object delegate", "View host", "int eventType"], ["void", "Object delegate", "View host", "int eventType"], ["void", "View host", "int eventType"]], "newAccessiblityDelegateBridge": [["Object", "AccessibilityDelegateCompat listener"], ["Object", "AccessibilityDelegateCompat listener"]]}, "className": "AccessibilityDelegateCompat", "renamed": ["void", "function", "(", "View", "arg0", ",", "AccessibilityEvent", "arg1", ")", "{", "IMPL", ".", "onInitializeAccessibilityEvent", "(", "DEFAULT_DELEGATE", ",", "arg0", ",", "arg1", ")", ";", "}"], "nl": "Initializes an  {@link AccessibilityEvent} with information about thethe host View which is the event source.  The default implementation behaves as {@link ViewCompat#onInitializeAccessibilityEvent(View v,AccessibilityEvent event) ViewCompat#onInitalizeAccessibilityEvent(View v, AccessibilityEvent event)} forthe case of no accessibility delegate been set. ", "nlToks": ["Initializes", "an", "-LCB-", "@link", "AccessibilityEvent", "-RCB-", "with", "information", "about", "thethe", "host", "View", "which", "is", "the", "event", "source", ".", "The", "default", "implementation", "behaves", "as", "-LCB-", "@link", "ViewCompat", "#onInitializeAccessibilityEvent", "-LRB-", "View", "v", ",", "AccessibilityEvent", "event", "-RRB-", "ViewCompat", "#onInitalizeAccessibilityEvent", "-LRB-", "View", "v", ",", "AccessibilityEvent", "event", "-RRB-", "-RCB-", "forthe", "case", "of", "no", "accessibility", "delegate", "been", "set", "."], "path": "prateeka/AndroidDev/tree/master/SherlockActionBar/src/android/support/v4/view/AccessibilityDelegateCompat.java", "idx": 1852}
{"memberVariables": {"formatOff": "int", "isRaw": "boolean", "formatRepeatCount": "int", "format": "String"}, "code": ["int", "function", "(", "boolean", "advance", ")", "{", "int", "valueLen", "=", "0", ";", "int", "countOff", ";", "for", "(", "countOff", "=", "0", ";", "Character", ".", "isDigit", "(", "format", ".", "charAt", "(", "formatOff", "+", "countOff", ")", ")", ";", "countOff", "++", ")", "{", "valueLen", "*=", "10", ";", "valueLen", "+=", "Character", ".", "digit", "(", "format", ".", "charAt", "(", "formatOff", "+", "countOff", ")", ",", "10", ")", ";", "}", "if", "(", "advance", ")", "{", "formatOff", "+=", "countOff", ";", "}", "return", "valueLen", ";", "}"], "memberFunctions": {"checkType": [["void", "char asking", "boolean consume"]], "getType": [["char"]], "getLengthFromFormat": [["int", "boolean advance"]], "available": [["int"]], "reset": [["void"]], "toString": [["String"]], "consume": [["void"]], "hasLength": [["boolean"]]}, "className": "PackFormatInputStream", "renamed": ["int", "function", "(", "boolean", "arg0", ")", "{", "int", "loc0", "=", "0", ";", "int", "loc1", ";", "for", "(", "loc1", "=", "0", ";", "Character", ".", "isDigit", "(", "format", ".", "charAt", "(", "formatOff", "+", "loc1", ")", ")", ";", "loc1", "++", ")", "{", "loc0", "*=", "10", ";", "loc0", "+=", "Character", ".", "digit", "(", "format", ".", "charAt", "(", "formatOff", "+", "loc1", ")", ",", "10", ")", ";", "}", "if", "(", "arg0", ")", "{", "formatOff", "+=", "loc1", ";", "}", "return", "loc0", ";", "}"], "nl": "Decode an integer from the format string, return zero if not starting on a digit. \\param advance whether to move the stream position.", "nlToks": ["Decode", "an", "integer", "from", "the", "format", "string", ",", "return", "zero", "if", "not", "starting", "on", "a", "digit", ".", "\\", "param", "advance", "whether", "to", "move", "the", "stream", "position", "."], "path": "adamlsd/mongo/tree/master/src/third_party/wiredtiger/lang/java/src/com/wiredtiger/db/PackFormatInputStream.java", "idx": 1853}
{"memberVariables": {"expDataUnitId": "BigDecimal", "dataUnitId": "BigDecimal", "createTimeStamp": "Timestamp", "actValue": "String", "errorCode": "String", "srcFileName": "String", "errorMsg": "String", "failedAttrib": "String", "expDataSetId": "BigDecimal", "regPclTestResult": "RegPCLTestResultEntity", "dataSetId": "BigDecimal", "id": "RegPCLTestResultDetailsEntityPK", "serialVersionUID=3309870439513279844L": "long", "expValue": "String"}, "code": ["String", "function", "(", ")", "{", "return", "this", ".", "actValue", ";", "}"], "memberFunctions": {"updateCreateTimeStamp": [["void"]], "setActValue": [["void", "String actValue"]], "getDataSetId": [["BigDecimal"]], "getId": [["RegPCLTestResultDetailsEntityPK"]], "setSrcFileName": [["void", "String srcFileName"]], "getRegPclTestResult": [["RegPCLTestResultEntity"]], "setExpValue": [["void", "String expValue"]], "getSrcFileName": [["String"]], "setErrorCode": [["void", "String errorCode"]], "getDataUnitId": [["BigDecimal"]], "setErrorMsg": [["void", "String errorMsg"]], "getErrorCode": [["String"]], "setDataUnitId": [["void", "BigDecimal dataUnitId"]], "setId": [["void", "RegPCLTestResultDetailsEntityPK id"]], "setFailedAttrib": [["void", "String failedAttrib"]], "getExpDataSetId": [["BigDecimal"]], "getErrorMsg": [["String"]], "setRegPclTestResult": [["void", "RegPCLTestResultEntity regPclTestResult"]], "getExpValue": [["String"]], "setCreateTimeStamp": [["void", "Timestamp createTimeStamp"]], "getExpDataUnitId": [["BigDecimal"]], "getCreateTimeStamp": [["Timestamp"]], "getFailedAttrib": [["String"]], "setExpDataSetId": [["void", "BigDecimal expDataSetId"]], "setDataSetId": [["void", "BigDecimal dataSetId"]], "setExpDataUnitId": [["void", "BigDecimal expDataUnitId"]]}, "className": "RegPCLTestResultDetailsEntity", "renamed": ["String", "function", "(", ")", "{", "return", "this", ".", "actValue", ";", "}"], "nl": "Gets the act value.", "nlToks": ["Gets", "the", "act", "value", "."], "path": "pkesireddy/portico_fletcher/tree/master/FetcherTesterService/src/main/java/org/ithaka/cm/fetchertester/entity/RegPCLTestResultDetailsEntity.java", "idx": 1854}
{"memberVariables": {"sdkInited=false": "boolean", "userProvider": "EaseUserProfileProvider", "settingsProvider": "EaseSettingsProvider", "activityList=new ArrayList<Activity>()": "List<Activity>", "emojiconInfoProvider": "EaseEmojiconInfoProvider", "instance=null": "EaseUI", "TAG=EaseUI.class.getSimpleName()": "String", "appContext=null": "Context", "notifier=null": "EaseNotifier"}, "code": ["EaseUserProfileProvider", "function", "(", ")", "{", "return", "userProvider", ";", "}"], "memberFunctions": {"setSettingsProvider": [["void", "EaseSettingsProvider settingsProvider"]], "getNotifier": [["EaseNotifier"]], "getUser": [["EaseUser", "String username"]], "setEmojiconInfoProvider": [["void", "EaseEmojiconInfoProvider emojiconInfoProvider"]], "initNotifier": [["void"]], "isMsgSoundAllowed": [["boolean", "EMMessage message"], ["boolean", "EMMessage message"]], "getSettingsProvider": [["EaseSettingsProvider"]], "getEmojiconInfo": [["EaseEmojicon", "String emojiconIdentityCode"]], "getEmojiconInfoProvider": [["EaseEmojiconInfoProvider"]], "initChatOptions": [["EMOptions"]], "init": [["boolean", "Context context", "EMOptions options"]], "getAppName": [["String", "int pID"]], "setUserProfileProvider": [["void", "EaseUserProfileProvider userProvider"]], "pushActivity": [["void", "Activity activity"]], "isMsgVibrateAllowed": [["boolean", "EMMessage message"], ["boolean", "EMMessage message"]], "getAppUser": [["User", "String username"]], "registerMessageListener": [["void"]], "getTextEmojiconMapping": [["Map<String,Object>"]], "isMsgNotifyAllowed": [["boolean", "EMMessage message"], ["boolean", "EMMessage message"]], "hasForegroundActivies": [["boolean"]], "getInstance": [["EaseUI"]], "isSpeakerOpened": [["boolean"], ["boolean"]], "popActivity": [["void", "Activity activity"]], "getContext": [["Context"]], "createNotifier": [["EaseNotifier"]]}, "className": "EaseUI", "renamed": ["EaseUserProfileProvider", "function", "(", ")", "{", "return", "userProvider", ";", "}"], "nl": "get user profile provider", "nlToks": ["get", "user", "profile", "provider"], "path": "15109237255/SuperWeChat/tree/master/easeui/src/com/hyphenate/easeui/controller/EaseUI.java", "idx": 1855}
{"memberVariables": {"value": "int"}, "code": ["void", "function", "(", "int", "value", ")", "{", "this", ".", "value", "=", "value", ";", "}"], "memberFunctions": {"add": [["void", "int x"]], "getValue": [["int"]], "dec": [["void"]], "toString": [["String"]], "compareTo": [["int", "IntegerHolder o"]], "inc": [["void"]]}, "className": "IntegerHolder", "renamed": ["void", "function", "(", "int", "arg0", ")", "{", "this", ".", "value", "=", "arg0", ";", "}"], "nl": "Sets the value of the internal integer.", "nlToks": ["Sets", "the", "value", "of", "the", "internal", "integer", "."], "path": "pombreda/furia-chan/tree/master/src/main/java/org/kit/furia/misc/IntegerHolder.java", "idx": 1856}
{"memberVariables": {"mockServerMessage=mock(ServerMessage.class)": "ServerMessage", "mockServerSession=mock(ServerSession.class)": "ServerSession", "testEventProperties": "HashMap<String,Object>", "MOCK_SESSION_ID=\"1234-5678-9012-3456\"": "String", "notificationController": "NotificationController"}, "code": ["void", "function", "(", ")", "{", "testEventProperties", ".", "put", "(", "Notification", ".", "NOTIFICATION_KEY_TITLE", ",", "null", ")", ";", "notificationController", ".", "handleEvent", "(", "new", "Event", "(", "Notification", ".", "NOTIFICATION_TOPIC_BROADCAST", ",", "testEventProperties", ")", ")", ";", "}"], "memberFunctions": {"testHandleEventThrowsIllegalArgumentExceptionOnEmptyUser": [["void"]], "testHandleEventThrowsIllegalArgumentExceptionOnEmptyApplication": [["void"]], "testDeregisterUserSessionWithNullServerSessonThrowsException": [["void"]], "testDeregisterUserSessionWithNullServerSessionIdThrowsException": [["void"]], "testGetServerSessionByUserId": [["void"]], "tearDown": [["void"]], "testHandleEventThrowsIllegalArgumentExceptionOnEmptyTitle": [["void"]], "testDeletePersistentNotificationThrowsIllegalArgumentOnNullServerSession": [["void"]], "testDeregisterUserSessionRemovesUserFromKnownClients": [["void"]], "testHandleEventThrowsIllegalArgumentExceptionOnEmptyMessage": [["void"]], "testHandleEventThrowsIllegalArgumentExceptionOnNullApplication": [["void"]], "testDeletePersistentNotificationThrowsIllegalArgumentOnNullUserId": [["void"]], "testRegisterUserSessionWithNullServerSessionThrowsException": [["void"]], "testHandleEventThrowsIllegalArgumentExceptionOnNullUser": [["void"]], "testRegisterUserSession": [["void"]], "setUp": [["void"]], "testHandleEventThrowsIllegalArgumentExceptionOnNullTimestamp": [["void"]], "testRegisterUserSessionWithNullServerSessionIdThrowsException": [["void"]], "testHandleEventThrowsIllegalArgumentExceptionOnNullMessage": [["void"]]}, "className": "NotificationControllerTest", "renamed": ["void", "function", "(", ")", "{", "testEventProperties", ".", "put", "(", "Notification", ".", "NOTIFICATION_KEY_TITLE", ",", "null", ")", ";", "notificationController", ".", "handleEvent", "(", "new", "Event", "(", "Notification", ".", "NOTIFICATION_TOPIC_BROADCAST", ",", "testEventProperties", ")", ")", ";", "}"], "nl": "Test method for  {@link NotificationController#handleEvent(org.osgi.service.event.Event)}Verifies that  {@code IllegalArgumentException} is thrown when {@code Event}'s {@link Notification#NOTIFICATION_KEY_TITLE} property is null.", "nlToks": ["Test", "method", "for", "-LCB-", "@link", "NotificationController", "#handleEvent", "-LRB-", "org.osgi.service.event.Event", "-RRB-", "-RCB-", "Verifies", "that", "-LCB-", "@code", "IllegalArgumentException", "-RCB-", "is", "thrown", "when", "-LCB-", "@code", "Event", "-RCB-", "'s", "-LCB-", "@link", "Notification", "#NOTIFICATION_KEY_TITLE", "-RCB-", "property", "is", "null", "."], "path": "pklinef/ddf-ui/tree/master/search-ui/search-endpoint/src/test/java/org/codice/ddf/ui/searchui/query/controller/NotificationControllerTest.java", "idx": 1857}
{"memberVariables": {"fail": "String", "pass": "String", "moduleName": "String", "noRun": "String", "ID": "int", "value": "String", "totalTC": "String"}, "code": ["String", "function", "(", ")", "{", "return", "moduleName", ";", "}"], "memberFunctions": {"getPass": [["String"]], "setNoRun": [["void", "String value"]], "getTotalTC": [["String"]], "getID": [["int"]], "setFail": [["void", "String value"]], "getFail": [["String"]], "getNoRun": [["String"]], "compareTo": [["int", "Module o"]], "getValue": [["String"]], "setValue": [["void", "String value"]], "setID": [["void", "int iD"]], "setTotalTC": [["void", "String value"]], "setModuleName": [["void", "String value"]], "setPass": [["void", "String value"]]}, "className": "Module", "renamed": ["String", "function", "(", ")", "{", "return", "moduleName", ";", "}"], "nl": "Gets the value of the moduleName property.", "nlToks": ["Gets", "the", "value", "of", "the", "moduleName", "property", "."], "path": "prabalbsws/selenium_automation/tree/master/src/newpojo/Module.java", "idx": 1858}
{"memberVariables": {"PRIMITIVE_TO_WRAPPER_TYPE": "Map<Class<?>,Class<?>>", "WRAPPER_TO_PRIMITIVE_TYPE": "Map<Class<?>,Class<?>>"}, "code": ["boolean", "function", "(", "Class", "<", "?", ">", "type", ")", "{", "return", "WRAPPER_TO_PRIMITIVE_TYPE", ".", "containsKey", "(", "checkNotNull", "(", "type", ")", ")", ";", "}"], "memberFunctions": {"add": [["void", "Map<Class<?>,Class<?>> forward", "Map<Class<?>,Class<?>> backward", "Class<?> key", "Class<?> value"]], "allWrapperTypes": [["Set<Class<?>>"]], "allPrimitiveTypes": [["Set<Class<?>>"]], "wrap": [["Class<T>", "Class<T> type"]], "unwrap": [["Class<T>", "Class<T> type"]]}, "className": "Primitives", "renamed": ["boolean", "function", "(", "Class", "<", "?", ">", "arg0", ")", "{", "return", "WRAPPER_TO_PRIMITIVE_TYPE", ".", "containsKey", "(", "checkNotNull", "(", "arg0", ")", ")", ";", "}"], "nl": "Returns  {@code true} if {@code type} is one of the nine primitive-wrapper types, such as{@link Integer}.", "nlToks": ["Returns", "-LCB-", "@code", "true", "-RCB-", "if", "-LCB-", "@code", "type", "-RCB-", "is", "one", "of", "the", "nine", "primitive-wrapper", "types", ",", "such", "as", "-LCB-", "@link", "Integer", "-RCB-", "."], "path": "hazendaz/guava/tree/master/guava/src/com/google/common/primitives/Primitives.java", "idx": 1859}
{"memberVariables": {}, "code": ["void", "function", "(", "DenseMatrix64F", "A", ")", "{", "double", "val", "=", "normF", "(", "A", ")", ";", "if", "(", "val", "==", "0", ")", "return", ";", "int", "size", "=", "A", ".", "getNumElements", "(", ")", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "size", ";", "i", "++", ")", "{", "A", ".", "div", "(", "i", ",", "val", ")", ";", "}", "}"], "memberFunctions": {"inducedP2": [["double", "DenseMatrix64F A"]], "inducedP1": [["double", "DenseMatrix64F A"]], "normF": [["double", "D1Matrix64F a"]], "fastNormP": [["double", "DenseMatrix64F A", "double p"]], "fastNormP2": [["double", "DenseMatrix64F A"]], "normPInf": [["double", "DenseMatrix64F A"]], "conditionP": [["double", "DenseMatrix64F A", "double p"]], "elementP": [["double", "RowD1Matrix64F A", "double p"]], "inducedPInf": [["double", "DenseMatrix64F A"]], "normP": [["double", "DenseMatrix64F A", "double p"]], "normP2": [["double", "DenseMatrix64F A"]], "fastNormF": [["double", "D1Matrix64F a"]], "fastElementP": [["double", "D1Matrix64F A", "double p"]], "normP1": [["double", "DenseMatrix64F A"]], "conditionP2": [["double", "DenseMatrix64F A"]]}, "className": "NormOps", "renamed": ["void", "function", "(", "DenseMatrix64F", "arg0", ")", "{", "double", "loc0", "=", "normF", "(", "arg0", ")", ";", "if", "(", "loc0", "==", "0", ")", "return", ";", "int", "loc1", "=", "arg0", ".", "getNumElements", "(", ")", ";", "for", "(", "int", "loc2", "=", "0", ";", "loc2", "<", "loc1", ";", "loc2", "++", ")", "{", "arg0", ".", "div", "(", "loc2", ",", "loc0", ")", ";", "}", "}"], "nl": "Normalizes the matrix such that the Frobenius norm is equal to one.", "nlToks": ["Normalizes", "the", "matrix", "such", "that", "the", "Frobenius", "norm", "is", "equal", "to", "one", "."], "path": "adamaulia/efficient-java-matrix-library/tree/master/src/org/ejml/ops/NormOps.java", "idx": 1860}
{"memberVariables": {"middle": "TSTNode", "data": "char", "left": "TSTNode", "root": "TSTNode", "right": "TSTNode", "al": "ArrayList<String>", "is_End_Of_String": "boolean"}, "code": ["String", "function", "(", ")", "{", "al", "=", "new", "ArrayList", "<", "String", ">", "(", ")", ";", "traverse", "(", "root", ",", "\"\"", ")", ";", "return", "\" Ternary Search Tree : \"", "+", "al", ";", "}"], "memberFunctions": {"traverse": [["void", "TSTNode key", "String str"]], "search": [["boolean", "String word"], ["boolean", "TSTNode key", "char[] word", "int pos"]], "makeEmpty": [["void"]], "isEmpty": [["boolean"]], "insert": [["void", "String word"], ["TSTNode", "TSTNode key", "char[] word", "int pos"]], "main": [["void", "String[] args"]], "delete": [["void", "String word"], ["void", "TSTNode key", "char[] word", "int pos"]]}, "className": "TernarySearchTree", "renamed": ["String", "function", "(", ")", "{", "al", "=", "new", "ArrayList", "<", "String", ">", "(", ")", ";", "traverse", "(", "root", ",", "\"srini_string\"", ")", ";", "return", "\"srini_string\"", "+", "al", ";", "}"], "nl": "function to print tree", "nlToks": ["function", "to", "print", "tree"], "path": "piyushbajaj/Java_Tutorial_DS/tree/master/Trie/TernarySearchTree.java", "idx": 1861}
{"memberVariables": {"LOG_MSG=\"Exception caught from SentenceListener\"": "String", "DISPATCH_ALL=\"DISPATCH_ALL\"": "String", "reader": "DataReader", "dataListener": "DataListener", "listeners=new ConcurrentHashMap<String,List<SentenceListener>>()": "ConcurrentMap<String,List<SentenceListener>>", "pauseTimeout=DEFAULT_TIMEOUT": "int", "exceptionListener=null": "ExceptionListener", "thread": "Thread", "LOGGER=Logger.getLogger(SentenceReader.class.getName())": "Logger", "DEFAULT_TIMEOUT=5000": "int"}, "code": ["ExceptionListener", "function", "(", ")", "{", "return", "exceptionListener", ";", "}"], "memberFunctions": {"fireReadingPaused": [["void"]], "fireDataEvent": [["void", "String data"]], "setPauseTimeout": [["void", "int millis"]], "start": [["void"]], "removeSentenceListener": [["void", "SentenceListener listener"]], "fireReadingStopped": [["void"]], "registerListener": [["void", "SentenceListener listener", "String type"]], "getSentenceListeners": [["List<SentenceListener>"]], "handleException": [["void", "String msg", "Exception ex"]], "setDataListener": [["void", "DataListener listener"]], "stop": [["void"]], "setInputStream": [["void", "InputStream stream"]], "fireReadingStarted": [["void"]], "fireSentenceEvent": [["void", "Sentence sentence"]], "addSentenceListener": [["void", "SentenceListener listener"], ["void", "SentenceListener sl", "SentenceId type"], ["void", "SentenceListener sl", "String type"]], "getPauseTimeout": [["int"]], "setExceptionListener": [["void", "ExceptionListener exceptionListener"]], "setDatagramSocket": [["void", "DatagramSocket socket"]]}, "className": "SentenceReader", "renamed": ["ExceptionListener", "function", "(", ")", "{", "return", "exceptionListener", ";", "}"], "nl": "Returns the exception call-back listener.", "nlToks": ["Returns", "the", "exception", "call-back", "listener", "."], "path": "pkoziol/marine-api/tree/master/src/main/java/net/sf/marineapi/nmea/io/SentenceReader.java", "idx": 1863}
{"memberVariables": {"mUfsCluster": "UnderFileSystemCluster", "mNumWorkers": "int", "mWorkDirectory": "String", "mWorkers": "List<AlluxioWorkerService>", "DEFAULT_WORKER_MEMORY_BYTES=100 * Constants.MB": "long", "LOG=LoggerFactory.getLogger(Constants.LOGGER_TYPE)": "Logger", "DEFAULT_BLOCK_SIZE_BYTES=Constants.KB": "int", "RANDOM_GENERATOR=new Random()": "Random", "mHostname": "String"}, "code": ["void", "function", "(", ")", "{", "mHostname", "=", "NetworkAddressUtils", ".", "getLocalHostName", "(", "100", ")", ";", "}"], "memberFunctions": {"setAlluxioWorkDirectory": [["void"]], "start": [["void"]], "getClient": [["FileSystem"]], "setupTest": [["void"]], "stopUFS": [["void"]], "initConfiguration": [["void"]], "stop": [["void"]], "startWorkers": [["void"]], "runWorkers": [["void"]], "startMaster": [["void"]], "reset": [["void"]], "stopFS": [["void"]], "getMaster": [["LocalAlluxioMaster"]]}, "className": "AbstractLocalAlluxioCluster", "renamed": ["void", "function", "(", ")", "{", "mHostname", "=", "NetworkAddressUtils", ".", "getLocalHostName", "(", "100", ")", ";", "}"], "nl": "Sets hostname.", "nlToks": ["Sets", "hostname", "."], "path": "poemlin/alluxio/tree/master/minicluster/src/main/java/alluxio/master/AbstractLocalAlluxioCluster.java", "idx": 1865}
{"memberVariables": {}, "code": ["void", "function", "(", "BattlePlatform", "platform", ",", "Image", "img", ",", "float", "delta", ")", "{", "}"], "memberFunctions": {"read": [["void", "Json json", "JsonValue jsonData"]], "update": [["void", "Image f1"], ["void", "Card card"]], "copy": [["CardAction"]], "write": [["void", "Json json"]]}, "className": "CardAction", "renamed": ["void", "function", "(", "BattlePlatform", "arg0", ",", "Image", "arg1", ",", "float", "arg2", ")", "{", "}"], "nl": "Execution of the card action.", "nlToks": ["Execution", "of", "the", "card", "action", "."], "path": "prativa/shadowstruggles/tree/master/Shadow Struggles/src/br/edu/ifsp/pds/shadowstruggles/scripts/CardAction.java", "idx": 1866}
{"memberVariables": {"attributes": "Map<String,String>", "id": "String", "state": "LaunchState"}, "code": ["Map", "<", "String", ",", "String", ">", "function", "(", ")", "{", "return", "this", ".", "attributes", ";", "}"], "memberFunctions": {"getTaskLaunchId": [["String"]], "getState": [["LaunchState"]], "toString": [["String"]]}, "className": "TaskStatus", "renamed": ["Map", "<", "String", ",", "String", ">", "function", "(", ")", "{", "return", "this", ".", "attributes", ";", "}"], "nl": "Return a map of attributes for the launched task. The specific keys and values returned are dependent on the runtime where the task has been launched. This may include extra information such as execution location or specific error messages in the case of failure.", "nlToks": ["Return", "a", "map", "of", "attributes", "for", "the", "launched", "task", ".", "The", "specific", "keys", "and", "values", "returned", "are", "dependent", "on", "the", "runtime", "where", "the", "task", "has", "been", "launched", ".", "This", "may", "include", "extra", "information", "such", "as", "execution", "location", "or", "specific", "error", "messages", "in", "the", "case", "of", "failure", "."], "path": "pperalta/spring-cloud-deployer/tree/master/spring-cloud-deployer-spi/src/main/java/org/springframework/cloud/deployer/spi/task/TaskStatus.java", "idx": 1868}
{"memberVariables": {"endDate": "Timestamp", "feedConfigId": "BigDecimal", "resultCode": "String", "serialVersionUID=1L": "long", "resultMessage": "String", "fileCount": "BigDecimal", "maxReceiptDate": "Timestamp", "downloadSize": "BigDecimal", "feedId": "BigDecimal", "configInfo": "String", "runId": "long", "errors": "byte[]", "runStatus": "String", "startDate": "Timestamp"}, "code": ["BigDecimal", "function", "(", ")", "{", "return", "this", ".", "feedId", ";", "}"], "memberFunctions": {"getFeedConfigId": [["BigDecimal"]], "getStartDate": [["Timestamp"]], "setFeedId": [["void", "BigDecimal feedId"]], "getResultCode": [["String"]], "setFeedConfigId": [["void", "BigDecimal feedConfigId"]], "setMaxReceiptDate": [["void", "Timestamp maxReceiptDate"]], "getRunId": [["long"]], "getEndDate": [["Timestamp"]], "setErrors": [["void", "byte[] errors"]], "getConfigInfo": [["String"]], "setEndDate": [["void", "Timestamp endDate"]], "getErrors": [["byte[]"]], "setFileCount": [["void", "BigDecimal fileCount"]], "getDownloadSize": [["BigDecimal"]], "getResultMessage": [["String"]], "setResultMessage": [["void", "String resultMessage"]], "getFileCount": [["BigDecimal"]], "getRunStatus": [["String"]], "setRunStatus": [["void", "String runStatus"]], "setStartDate": [["void", "Timestamp startDate"]], "setResultCode": [["void", "String resultCode"]], "setRunId": [["void", "long runId"]], "getMaxReceiptDate": [["Timestamp"]], "setConfigInfo": [["void", "String configInfo"]], "setDownloadSize": [["void", "BigDecimal downloadSize"]]}, "className": "PCLFetcherRunRecorderEntity", "renamed": ["BigDecimal", "function", "(", ")", "{", "return", "this", ".", "feedId", ";", "}"], "nl": "Gets the feed id.", "nlToks": ["Gets", "the", "feed", "id", "."], "path": "pkesireddy/portico_fletcher/tree/master/FetcherTesterService/src/main/java/org/ithaka/cm/fetchertester/entity/PCLFetcherRunRecorderEntity.java", "idx": 1869}
{"memberVariables": {"mat": "DenseMatrix64F", "eig": "EigenDecomposition<DenseMatrix64F>"}, "code": ["Complex64F", "function", "(", "int", "index", ")", "{", "return", "eig", ".", "getEigenvalue", "(", "index", ")", ";", "}"], "memberFunctions": {"getEigenVector": [["T", "int index"]], "getEVD": [["EigenDecomposition"]], "getNumberOfEigenvalues": [["int"]], "getIndexMax": [["int"]], "getIndexMin": [["int"]], "quality": [["double"]]}, "className": "SimpleEVD", "renamed": ["Complex64F", "function", "(", "int", "arg0", ")", "{", "return", "eig", ".", "getEigenvalue", "(", "arg0", ")", ";", "}"], "nl": " Returns an eigenvalue as a complex number.  For symmetric matrices the returned eigenvalue will always be a real number, which means the imaginary component will be equal to zero.   NOTE: The order of the eigenvalues is dependent upon the decomposition algorithm used.  This means that they may or may not be ordered by magnitude.  For example the QR algorithm will returns results that are partially ordered by magnitude, but this behavior should not be relied upon. ", "nlToks": ["Returns", "an", "eigenvalue", "as", "a", "complex", "number", ".", "For", "symmetric", "matrices", "the", "returned", "eigenvalue", "will", "always", "be", "a", "real", "number", ",", "which", "means", "the", "imaginary", "component", "will", "be", "equal", "to", "zero", ".", "NOTE", ":", "The", "order", "of", "the", "eigenvalues", "is", "dependent", "upon", "the", "decomposition", "algorithm", "used", ".", "This", "means", "that", "they", "may", "or", "may", "not", "be", "ordered", "by", "magnitude", ".", "For", "example", "the", "QR", "algorithm", "will", "returns", "results", "that", "are", "partially", "ordered", "by", "magnitude", ",", "but", "this", "behavior", "should", "not", "be", "relied", "upon", "."], "path": "adamaulia/efficient-java-matrix-library/tree/master/src/org/ejml/simple/SimpleEVD.java", "idx": 1870}
{"memberVariables": {"ACTIONS_TO_KILL=TRANSIENT_VAR_PREFIX + \"actions.to.kill\"": "String", "ACTIONS_TO_START=TRANSIENT_VAR_PREFIX + \"actions.to.start\"": "String", "ACTION_ID=\"action.id\"": "String", "ACTIONS_TO_FAIL=TRANSIENT_VAR_PREFIX + \"actions.to.fail\"": "String", "TRANSIENT_VAR_PREFIX=\"oozie.coordinator.\"": "String", "WORKFLOW_BEAN=TRANSIENT_VAR_PREFIX + \"coordinator.bean\"": "String"}, "code": ["CoordinatorStore", "function", "(", ")", "{", "try", "{", "return", "new", "CoordinatorStore", "(", "false", ")", ";", "}", "catch", "(", "Exception", "ex", ")", "{", "throw", "new", "StoreException", "(", "ErrorCode", ".", "E0600", ",", "ex", ".", "getMessage", "(", ")", ",", "ex", ")", ";", "}", "}"], "memberFunctions": {"getInterface": [["Class<? extends Service>"]], "init": [["void", "Services services"]], "destroy": [["void"]]}, "className": "CoordinatorStoreService", "renamed": ["CoordinatorStore", "function", "(", ")", "{", "try", "{", "return", "new", "CoordinatorStore", "(", "false", ")", ";", "}", "catch", "(", "Exception", "loc0", ")", "{", "throw", "new", "StoreException", "(", "ErrorCode", ".", "E0600", ",", "loc0", ".", "getMessage", "(", ")", ",", "loc0", ")", ";", "}", "}"], "nl": "Return a workflow store instance with a fresh transaction.  The coordinator store has to be committed and then closed to commit changes, if only close it rolls back.", "nlToks": ["Return", "a", "workflow", "store", "instance", "with", "a", "fresh", "transaction", ".", "The", "coordinator", "store", "has", "to", "be", "committed", "and", "then", "closed", "to", "commit", "changes", ",", "if", "only", "close", "it", "rolls", "back", "."], "path": "pingpangkuangmo/oozie/tree/master/core/src/main/java/org/apache/oozie/service/CoordinatorStoreService.java", "idx": 1871}
{"memberVariables": {"inTransaction": "ThreadLocal<Boolean>", "transactionOutputMap": "TransactionalHashMap<StoredTransactionOutPoint,StoredTransactionOutput>", "mapValues": "TransactionalHashMap<UniqueKeyType,ValueType>", "wasUndoable": "boolean", "verifiedChainHead": "StoredBlock", "tempMap": "ThreadLocal<HashMap<KeyType,ValueType>>", "index": "long", "mapKeys": "HashMap<MultiKeyType,Set<UniqueKeyType>>", "chainHead": "StoredBlock", "blockMap": "TransactionalHashMap<Sha256Hash,StoredBlockAndWasUndoableFlag>", "tempSetRemoved": "ThreadLocal<HashSet<KeyType>>", "block": "StoredBlock", "fullBlockMap": "TransactionalMultiKeyHashMap<Sha256Hash,Integer,StoredUndoableBlock>", "serialVersionUID=-4064230006297064377L": "long", "map": "HashMap<KeyType,ValueType>", "hash": "Sha256Hash", "fullStoreDepth": "int"}, "code": ["long", "function", "(", ")", "{", "return", "index", ";", "}"], "memberFunctions": {"getHash": [["Sha256Hash"]], "getTransactionOutput": [["StoredTransactionOutput", "Sha256Hash hash", "long index"]], "removeUnspentTransactionOutput": [["void", "StoredTransactionOutput out"]], "put": [["void", "KeyType key", "ValueType value"], ["void", "UniqueKeyType uniqueKey", "MultiKeyType multiKey", "ValueType value"], ["void", "StoredBlock block"], ["void", "StoredBlock storedBlock", "StoredUndoableBlock undoableBlock"]], "remove": [["ValueType", "KeyType key"]], "hasUnspentOutputs": [["boolean", "Sha256Hash hash", "int numOutputs"]], "BeginTransaction": [["void"]], "getVerifiedChainHead": [["StoredBlock"]], "CommitTransaction": [["void"]], "hashCode": [["int"]], "get": [["ValueType", "KeyType key"], ["ValueType", "UniqueKeyType key"], ["StoredBlock", "Sha256Hash hash"]], "abortDatabaseBatchWrite": [["void"], ["void"]], "removeByUniqueKey": [["ValueType", "UniqueKeyType key"]], "addUnspentTransactionOutput": [["void", "StoredTransactionOutput out"]], "beginDatabaseBatchWrite": [["void"], ["void"]], "close": [["void"]], "setVerifiedChainHead": [["void", "StoredBlock chainHead"]], "commitDatabaseBatchWrite": [["void"], ["void"]], "getUndoBlock": [["StoredUndoableBlock", "Sha256Hash hash"]], "getChainHead": [["StoredBlock"]], "setChainHead": [["void", "StoredBlock chainHead"]], "equals": [["boolean", "Object o"]], "toString": [["String"]], "AbortTransaction": [["void"]], "removeByMultiKey": [["void", "MultiKeyType key"]], "getOnceUndoableStoredBlock": [["StoredBlock", "Sha256Hash hash"]]}, "className": "StoredTransactionOutPoint", "renamed": ["long", "function", "(", ")", "{", "return", "index", ";", "}"], "nl": "The index of the output in transaction to which we refer", "nlToks": ["The", "index", "of", "the", "output", "in", "transaction", "to", "which", "we", "refer"], "path": "1000000000001/bitcoinj/tree/master/core/src/main/java/org/bitcoinj/store/MemoryFullPrunedBlockStore.java", "idx": 1874}
{"memberVariables": {"chunks": "List<ScriptChunk>"}, "code": ["Script", "function", "(", "byte", "[", "]", "data", ")", "{", "checkArgument", "(", "data", ".", "length", "<=", "40", ")", ";", "return", "new", "ScriptBuilder", "(", ")", ".", "op", "(", "OP_RETURN", ")", ".", "data", "(", "data", ")", ".", "build", "(", ")", ";", "}"], "memberFunctions": {"op": [["ScriptBuilder", "int opcode"], ["ScriptBuilder", "int index", "int opcode"]], "updateScriptWithSignature": [["Script", "Script scriptSig", "byte[] signature", "int targetIndex", "int sigsPrefixCount", "int sigsSuffixCount"]], "data": [["ScriptBuilder", "byte[] data"], ["ScriptBuilder", "int index", "byte[] data"]], "createMultiSigInputScriptBytes": [["Script", "List<byte[]> signatures"], ["Script", "List<byte[]> signatures", "@Nullable byte[] multisigProgramBytes"]], "smallNum": [["ScriptBuilder", "int num"], ["ScriptBuilder", "int index", "int num"]], "createRedeemScript": [["Script", "int threshold", "List<ECKey> pubkeys"]], "addChunk": [["ScriptBuilder", "ScriptChunk chunk"], ["ScriptBuilder", "int index", "ScriptChunk chunk"]], "createInputScript": [["Script", "@Nullable TransactionSignature signature", "ECKey pubKey"], ["Script", "@Nullable TransactionSignature signature"]], "createOutputScript": [["Script", "Address to"], ["Script", "ECKey key"]], "createMultiSigInputScript": [["Script", "List<TransactionSignature> signatures"], ["Script", "TransactionSignature... signatures"]], "createMultiSigOutputScript": [["Script", "int threshold", "List<ECKey> pubkeys"]], "build": [["Script"]], "createP2SHMultiSigInputScript": [["Script", "@Nullable List<TransactionSignature> signatures", "Script multisigProgram"]], "createP2SHOutputScript": [["Script", "byte[] hash"], ["Script", "Script redeemScript"], ["Script", "int threshold", "List<ECKey> pubkeys"]]}, "className": "ScriptBuilder", "renamed": ["Script", "function", "(", "byte", "[", "]", "arg0", ")", "{", "checkArgument", "(", "arg0", ".", "length", "<=", "40", ")", ";", "return", "new", "ScriptBuilder", "(", ")", ".", "op", "(", "OP_RETURN", ")", ".", "arg0", "(", "arg0", ")", ".", "build", "(", ")", ";", "}"], "nl": "Creates a script of the form OP_RETURN [data]. This feature allows you to attach a small piece of data (like a hash of something stored elsewhere) to a zero valued output which can never be spent and thus does not pollute the ledger.", "nlToks": ["Creates", "a", "script", "of", "the", "form", "OP_RETURN", "-LSB-", "data", "-RSB-", ".", "This", "feature", "allows", "you", "to", "attach", "a", "small", "piece", "of", "data", "-LRB-", "like", "a", "hash", "of", "something", "stored", "elsewhere", "-RRB-", "to", "a", "zero", "valued", "output", "which", "can", "never", "be", "spent", "and", "thus", "does", "not", "pollute", "the", "ledger", "."], "path": "1000000000001/bitcoinj/tree/master/core/src/main/java/org/bitcoinj/script/ScriptBuilder.java", "idx": 1875}
{"memberVariables": {"scheduler": "ScheduledExecutorService", "SCHEDULER_THREADS=CONF_PREFIX + \"threads\"": "String", "log=XLog.getLog(getClass())": "XLog", "millis": "long", "CONF_PREFIX=Service.CONF_PREFIX + \"SchedulerService.\"": "String"}, "code": ["Class", "<", "?", "extends", "Service", ">", "function", "(", ")", "{", "return", "SchedulerService", ".", "class", ";", "}"], "memberFunctions": {"init": [["void", "Services services"]], "schedule": [["void", "final Callable<Void> callable", "long delay", "long interval", "Unit unit"], ["void", "final Runnable runnable", "long delay", "long interval", "Unit unit"]], "destroy": [["void"]], "getScheduler": [["ScheduledExecutorService"]], "getMillis": [["long"]]}, "className": "SchedulerService", "renamed": ["Class", "<", "?", "extends", "Service", ">", "function", "(", ")", "{", "return", "SchedulerService", ".", "class", ";", "}"], "nl": "Return the public interface for scheduler service.", "nlToks": ["Return", "the", "public", "interface", "for", "scheduler", "service", "."], "path": "pingpangkuangmo/oozie/tree/master/core/src/main/java/org/apache/oozie/service/SchedulerService.java", "idx": 1876}
{"memberVariables": {"idPMgtStub": "IdentityProviderMgtServiceStub", "log=LogFactory.getLog(IdentityProviderMgtServiceClient.class)": "Log", "userAdminStub": "UserAdminStub"}, "code": ["void", "function", "(", "String", "idPName", ")", "{", "try", "{", "idPMgtStub", ".", "deleteIdP", "(", "idPName", ")", ";", "}", "catch", "(", "Exception", "e", ")", "{", "log", ".", "error", "(", "\"Error in deleting the Identity Provider for a given tenant\"", ",", "e", ")", ";", "throw", "new", "Exception", "(", "\"Error in deleting the Identity Provider\"", ")", ";", "}", "}"], "memberFunctions": {"getAllLocalClaimUris": [["String[]"]], "addIdP": [["void", "IdentityProvider identityProvider"]], "getUserStoreDomains": [["String[]"]], "getResidentIdP": [["IdentityProvider"]], "getAllFederatedAuthenticators": [["Map<String,FederatedAuthenticatorConfig>"]], "updateResidentIdP": [["void", "IdentityProvider identityProvider"]], "getIdPs": [["List<IdentityProvider>"]], "getIdPByName": [["IdentityProvider", "String idPName"]], "getEnabledIdPs": [["List<IdentityProvider>"]], "getCustomProvisioningConnectors": [["Map<String,ProvisioningConnectorConfig>"]], "updateIdP": [["void", "String oldIdPName", "IdentityProvider identityProvider"]]}, "className": "IdentityProviderMgtServiceClient", "renamed": ["void", "function", "(", "String", "arg0", ")", "{", "try", "{", "idPMgtStub", ".", "deleteIdP", "(", "arg0", ")", ";", "}", "catch", "(", "Exception", "loc0", ")", "{", "log", ".", "error", "(", "\"srini_string\"", ",", "loc0", ")", ";", "throw", "new", "Exception", "(", "\"srini_string\"", ")", ";", "}", "}"], "nl": "Deletes an Identity Provider from a given tenant", "nlToks": ["Deletes", "an", "Identity", "Provider", "from", "a", "given", "tenant"], "path": "harsha1979/carbon-identity/tree/master/components/idp-mgt/org.wso2.carbon.idp.mgt.ui/src/main/java/org/wso2/carbon/idp/mgt/ui/client/IdentityProviderMgtServiceClient.java", "idx": 1877}
{"memberVariables": {"scope": "Scriptable", "dim": "Dim", "type": "int", "debugGui": "SwingGui", "EXIT_ACTION=1": "int", "SCOPE_PROVIDER=2": "int"}, "code": ["boolean", "function", "(", ")", "{", "return", "debugGui", ".", "isVisible", "(", ")", ";", "}"], "memberFunctions": {"getIn": [["InputStream"]], "setExitAction": [["void", "Runnable r"]], "doBreak": [["void"]], "main": [["void", "String[] args"]], "run": [["void"]], "setBreakOnReturn": [["void", "boolean value"]], "getOut": [["PrintStream"]], "setSize": [["void", "int w", "int h"], ["void", "java.awt.Dimension dimension"]], "setBreakOnExceptions": [["void", "boolean value"]], "contextCreated": [["void", "Context cx"]], "setVisible": [["void", "boolean flag"]], "mainEmbedded": [["void", "String title"], ["void", "ContextFactory factory", "Scriptable scope", "String title"], ["void", "ContextFactory factory", "ScopeProvider scopeProvider", "String title"]], "contextExited": [["void", "Context cx"]], "setBreakOnEnter": [["void", "boolean value"]], "getErr": [["PrintStream"]], "mainEmbeddedImpl": [["void", "ContextFactory factory", "Object scopeProvider", "String title"]], "go": [["void"]], "newScopeProvider": [["ScopeProvider", "Scriptable scope"]], "setScopeProvider": [["void", "ScopeProvider p"]], "pack": [["void"]], "clearAllBreakpoints": [["void"]], "contextReleased": [["void", "Context cx"]], "setOptimizationLevel": [["void", "int level"]], "detach": [["void"]], "dispose": [["void"]], "setScope": [["void", "Scriptable scope"]], "attachTo": [["void", "ContextFactory factory"]], "contextEntered": [["void", "Context cx"]], "getScope": [["Scriptable"]], "getDebugFrame": [["JFrame"]]}, "className": "Main", "renamed": ["boolean", "function", "(", ")", "{", "return", "debugGui", ".", "isVisible", "(", ")", ";", "}"], "nl": "Returns whether the debugger GUI frame is visible.", "nlToks": ["Returns", "whether", "the", "debugger", "GUI", "frame", "is", "visible", "."], "path": "adamfisk/littleshoot-client/tree/master/bin/rhino1_7R2/toolsrc/org/mozilla/javascript/tools/debugger/Main.java", "idx": 1881}
{"memberVariables": {"SOAP_11_NAMESPACE_URL=\"http://schemas.xmlsoap.org/soap/envelope/\"": "String", "SOAP_12_NAMESPACE_URL=\"http://www.w3.org/2003/05/soap-envelope\"": "String", "log=Logger.getLogger(SoapUtilities.class)": "Logger"}, "code": ["Document", "function", "(", "String", "xmlString", ")", "{", "return", "stringToDom", "(", "xmlString", ",", "false", ")", ";", "}"], "memberFunctions": {"getParents": [["List<SOAPElement>", "SOAPElement e"]], "allNamespaces": [["Map<String,String>", "SOAPElement ele"], ["void", "SOAPElement ele", "Map<String,String> nsList"]], "stringToSoap": [["SOAPMessage", "String soapString"]], "soapToString": [["String", "SOAPElement element"]], "getRoot": [["SOAPElement", "SOAPElement e"]], "getSoapChilds": [["List<SOAPElement>", "SOAPElement ele", "QName name"], ["List<SOAPElement>", "SOAPElement ele"]], "inputNeeded": [["List<SOAPElement>", "SOAPElement ele"], ["void", "SOAPElement ele", "List<SOAPElement> l"]], "domToString": [["String", "Document domDoc"]]}, "className": "SoapUtilities", "renamed": ["Document", "function", "(", "String", "arg0", ")", "{", "return", "stringToDom", "(", "arg0", ",", "false", ")", ";", "}"], "nl": "Converts a String to a DOM. Sometimes, you might prefer DOM to SOAPElement. No namespace prefixes are used by default.", "nlToks": ["Converts", "a", "String", "to", "a", "DOM", ".", "Sometimes", ",", "you", "might", "prefer", "DOM", "to", "SOAPElement", ".", "No", "namespace", "prefixes", "are", "used", "by", "default", "."], "path": "0xwindows/WS-Attacker/tree/master/framework/src/main/java/wsattacker/util/SoapUtilities.java", "idx": 1882}
{"memberVariables": {"INT_MASK=0xffffffffL": "long"}, "code": ["int", "function", "(", "long", "value", ")", "{", "if", "(", "value", "<=", "0", ")", "{", "return", "0", ";", "}", "else", "if", "(", "value", ">=", "(", "1L", "<<", "32", ")", ")", "{", "return", "-", "1", ";", "}", "else", "{", "return", "(", "int", ")", "value", ";", "}", "}"], "memberFunctions": {"compare": [["int", "int a", "int b"], ["int", "int[] left", "int[] right"]], "toLong": [["long", "int value"]], "max": [["int", "int... array"]], "decode": [["int", "String stringValue"]], "parseUnsignedInt": [["int", "String s"], ["int", "String string", "int radix"]], "min": [["int", "int... array"]], "lexicographicalComparator": [["Comparator<int[]>"]], "checkedCast": [["int", "long value"]], "toString": [["String"], ["String", "int x"], ["String", "int x", "int radix"]], "divide": [["int", "int dividend", "int divisor"]], "join": [["String", "String separator", "int... array"]], "flip": [["int", "int value"]], "remainder": [["int", "int dividend", "int divisor"]]}, "className": "UnsignedInts", "renamed": ["int", "function", "(", "long", "arg0", ")", "{", "if", "(", "arg0", "<=", "0", ")", "{", "return", "0", ";", "}", "else", "if", "(", "arg0", ">=", "(", "1L", "<<", "32", ")", ")", "{", "return", "-", "1", ";", "}", "else", "{", "return", "(", "int", ")", "arg0", ";", "}", "}"], "nl": "Returns the  {@code int} value that, when treated as unsigned, is nearest in value to{@code value}.", "nlToks": ["Returns", "the", "-LCB-", "@code", "int", "-RCB-", "value", "that", ",", "when", "treated", "as", "unsigned", ",", "is", "nearest", "in", "value", "to", "-LCB-", "@code", "value", "-RCB-", "."], "path": "hazendaz/guava/tree/master/guava/src/com/google/common/primitives/UnsignedInts.java", "idx": 1883}
{"memberVariables": {"PDK_INOUT=new ParameterDirectionKindEnum(\"pdk_inout\")": "ParameterDirectionKindEnum", "typeName": "java.util.List", "PDK_RETURN=new ParameterDirectionKindEnum(\"pdk_return\")": "ParameterDirectionKindEnum", "PDK_OUT=new ParameterDirectionKindEnum(\"pdk_out\")": "ParameterDirectionKindEnum", "PDK_IN=new ParameterDirectionKindEnum(\"pdk_in\")": "ParameterDirectionKindEnum", "literalName": "java.lang.String"}, "code": ["java", ".", "lang", ".", "String", "function", "(", ")", "{", "return", "literalName", ";", "}"], "memberFunctions": {"readResolve": [["java.lang.Object"]], "forName": [["ParameterDirectionKind", "java.lang.String name"]], "refTypeName": [["java.util.List"]], "hashCode": [["int"]], "equals": [["boolean", "java.lang.Object o"]]}, "className": "ParameterDirectionKindEnum", "renamed": ["java", ".", "lang", ".", "String", "function", "(", ")", "{", "return", "literalName", ";", "}"], "nl": "Returns a string representation of the enumeration value.", "nlToks": ["Returns", "a", "string", "representation", "of", "the", "enumeration", "value", "."], "path": "pichiliani/CoArgoUML/tree/master/v0.24/fonte/src/argouml-core-model-mdr/build/java/org/omg/uml/foundation/datatypes/ParameterDirectionKindEnum.java", "idx": 1884}
{"memberVariables": {"mockServerConfig": "ServerConfiguration", "issuer=\"https://www.example.com/\"": "String", "service": "StaticServerConfigurationService"}, "code": ["void", "function", "(", ")", "{", "ServerConfiguration", "result", "=", "service", ".", "getServerConfiguration", "(", "\"www.badexample.net\"", ")", ";", "assertThat", "(", "result", ",", "is", "(", "nullValue", "(", ")", ")", ")", ";", "}"], "memberFunctions": {"prepare": [["void"]], "getServerConfiguration_success": [["void"]]}, "className": "TestStaticServerConfigurationService", "renamed": ["void", "function", "(", ")", "{", "ServerConfiguration", "loc0", "=", "service", ".", "getServerConfiguration", "(", "\"srini_string\"", ")", ";", "assertThat", "(", "loc0", ",", "is", "(", "nullValue", "(", ")", ")", ")", ";", "}"], "nl": "Checks the behavior when the issuer is not known.", "nlToks": ["Checks", "the", "behavior", "when", "the", "issuer", "is", "not", "known", "."], "path": "adilansari/OpenID-Connect-Java-Spring-Server/tree/master/openid-connect-client/src/test/java/org/mitre/openid/connect/client/service/impl/TestStaticServerConfigurationService.java", "idx": 1885}
{"memberVariables": {"idPMgtStub": "IdentityProviderMgtServiceStub", "log=LogFactory.getLog(IdentityProviderMgtServiceClient.class)": "Log", "userAdminStub": "UserAdminStub"}, "code": ["void", "function", "(", "String", "oldIdPName", ",", "IdentityProvider", "identityProvider", ")", "{", "try", "{", "idPMgtStub", ".", "updateIdP", "(", "oldIdPName", ",", "identityProvider", ")", ";", "}", "catch", "(", "Exception", "e", ")", "{", "log", ".", "error", "(", "\"Error in updating the Identity Provider for a given tenant\"", ",", "e", ")", ";", "throw", "new", "Exception", "(", "e", ".", "getMessage", "(", ")", ")", ";", "}", "}"], "memberFunctions": {"getAllLocalClaimUris": [["String[]"]], "addIdP": [["void", "IdentityProvider identityProvider"]], "getUserStoreDomains": [["String[]"]], "getResidentIdP": [["IdentityProvider"]], "getAllFederatedAuthenticators": [["Map<String,FederatedAuthenticatorConfig>"]], "updateResidentIdP": [["void", "IdentityProvider identityProvider"]], "getIdPs": [["List<IdentityProvider>"]], "deleteIdP": [["void", "String idPName"]], "getIdPByName": [["IdentityProvider", "String idPName"]], "getEnabledIdPs": [["List<IdentityProvider>"]], "getCustomProvisioningConnectors": [["Map<String,ProvisioningConnectorConfig>"]]}, "className": "IdentityProviderMgtServiceClient", "renamed": ["void", "function", "(", "String", "arg0", ",", "IdentityProvider", "arg1", ")", "{", "try", "{", "idPMgtStub", ".", "updateIdP", "(", "arg0", ",", "arg1", ")", ";", "}", "catch", "(", "Exception", "loc0", ")", "{", "log", ".", "error", "(", "\"srini_string\"", ",", "loc0", ")", ";", "throw", "new", "Exception", "(", "loc0", ".", "getMessage", "(", ")", ")", ";", "}", "}"], "nl": "Updates a given Identity Provider information", "nlToks": ["Updates", "a", "given", "Identity", "Provider", "information"], "path": "harsha1979/carbon-identity/tree/master/components/idp-mgt/org.wso2.carbon.idp.mgt.ui/src/main/java/org/wso2/carbon/idp/mgt/ui/client/IdentityProviderMgtServiceClient.java", "idx": 1886}
{"memberVariables": {}, "code": ["boolean", "function", "(", "final", "HttpParams", "params", ")", "{", "if", "(", "params", "==", "null", ")", "{", "throw", "new", "IllegalArgumentException", "(", "\"HTTP parameters may not be null\"", ")", ";", "}", "return", "params", ".", "getBooleanParameter", "(", "INTEREST_OPS_QUEUEING", ",", "false", ")", ";", "}"], "memberFunctions": {"setContentBufferSize": [["void", "final HttpParams params", "int size"]], "setSelectInterval": [["void", "final HttpParams params", "long ms"]], "setGracePeriod": [["void", "final HttpParams params", "long ms"]], "getContentBufferSize": [["int", "final HttpParams params"]], "setInterestOpsQueueing": [["void", "final HttpParams params", "boolean interestOpsQueueing"]], "getSelectInterval": [["long", "final HttpParams params"]], "getGracePeriod": [["long", "final HttpParams params"]]}, "className": "NIOReactorParams", "renamed": ["boolean", "function", "(", "final", "HttpParams", "arg0", ")", "{", "if", "(", "arg0", "==", "null", ")", "{", "throw", "new", "IllegalArgumentException", "(", "\"srini_string\"", ")", ";", "}", "return", "arg0", ".", "getBooleanParameter", "(", "INTEREST_OPS_QUEUEING", ",", "false", ")", ";", "}"], "nl": "Obtains the value of  {@link NIOReactorPNames#INTEREST_OPS_QUEUEING} parameter.If not set, defaults to false.", "nlToks": ["Obtains", "the", "value", "of", "-LCB-", "@link", "NIOReactorPNames", "#INTEREST_OPS_QUEUEING", "-RCB-", "parameter.If", "not", "set", ",", "defaults", "to", "false", "."], "path": "pritamkhose/open-gpstracker.code/tree/master/external_sources/httpcore-4.1.1/httpcore-nio/src/main/java/org/apache/http/nio/params/NIOReactorParams.java", "idx": 1887}
{"memberVariables": {"log=LogFactory.getLog(EntitlementAdminServiceClient.class)": "Log", "stub": "EntitlementAdminServiceStub"}, "code": ["void", "function", "(", "String", "policyAlgorithm", ")", "{", "try", "{", "stub", ".", "setGlobalPolicyAlgorithm", "(", "policyAlgorithm", ")", ";", "}", "catch", "(", "Exception", "e", ")", "{", "handleException", "(", "e", ".", "getMessage", "(", ")", ",", "e", ")", ";", "}", "}"], "memberFunctions": {"getDecision": [["String", "String request"], ["String", "String request", "String[] policies"]], "getPIPResourceFinderData": [["PIPFinderDataHolder", "String finderName"]], "clearDecisionCache": [["void"]], "getGlobalPolicyAlgorithm": [["String"]], "handleException": [["void", "String msg", "Exception e"]], "getPolicyFinderData": [["PolicyFinderDataHolder", "String finderName"]], "getPDPData": [["PDPDataHolder"]], "clearAttributeCache": [["void"]], "refreshAttributeFinder": [["void", "String finderName"]], "refreshResourceFinder": [["void", "String finderName"]], "refreshPolicyFinder": [["void", "String finderName"]], "getPIPAttributeFinderData": [["PIPFinderDataHolder", "String finderName"]]}, "className": "EntitlementAdminServiceClient", "renamed": ["void", "function", "(", "String", "arg0", ")", "{", "try", "{", "stub", ".", "setGlobalPolicyAlgorithm", "(", "arg0", ")", ";", "}", "catch", "(", "Exception", "loc0", ")", "{", "handleException", "(", "loc0", ".", "getMessage", "(", ")", ",", "loc0", ")", ";", "}", "}"], "nl": "Set policy combining algorithm globally", "nlToks": ["Set", "policy", "combining", "algorithm", "globally"], "path": "harsha1979/carbon-identity/tree/master/components/entitlement/org.wso2.carbon.identity.entitlement.ui/src/main/java/org/wso2/carbon/identity/entitlement/ui/client/EntitlementAdminServiceClient.java", "idx": 1889}
{"memberVariables": {"INTERVAL=TARGET_TIMESPAN / TARGET_SPACING": "int", "ID_UNITTESTNET=\"org.bitcoinj.unittest\"": "String", "MAX_COINS=21000000": "long", "p2shHeader": "int", "PROTOCOL_VERSION=70001": "int", "maxTarget": "BigInteger", "TARGET_SPACING=10 * 60": "int", "dnsSeeds": "String[]", "id": "String", "spendableCoinbaseDepth": "int", "dumpedPrivateKeyHeader": "int", "targetTimespan": "int", "TARGET_TIMESPAN=14 * 24 * 60* 60": "int", "PAYMENT_PROTOCOL_ID_MAINNET=\"main\"": "String", "addressHeader": "int", "MAX_MONEY=COIN.multiply(MAX_COINS)": "Coin", "bip32HeaderPriv": "int", "alertSigningKey": "byte[]", "acceptableAddressCodes": "int[]", "bip32HeaderPub": "int", "ID_MAINNET=\"org.bitcoin.production\"": "String", "packetMagic": "long", "SATOSHI_KEY=Utils.HEX.decode(\"04fc9702847840aaf195de8442ebecedf5b095cdbb9bc716bda9110971b28a49e0ead8564ff0db22209e0374782c093bb899692d524e9d6a6956e7c5ecbcd68284\")": "byte[]", "genesisBlock": "Block", "PAYMENT_PROTOCOL_ID_TESTNET=\"test\"": "String", "subsidyDecreaseBlockCount": "int", "port": "int", "ID_TESTNET=\"org.bitcoin.test\"": "String", "checkpoints=new HashMap<Integer,Sha256Hash>()": "Map<Integer,Sha256Hash>", "interval": "int", "ID_REGTEST=\"org.bitcoin.regtest\"": "String", "BIP16_ENFORCE_TIME=1333238400": "int"}, "code": ["long", "function", "(", ")", "{", "return", "packetMagic", ";", "}"], "memberFunctions": {"regTests": [["NetworkParameters"]], "allowEmptyPeerChain": [["boolean"]], "getDumpedPrivateKeyHeader": [["int"]], "testNet2": [["NetworkParameters"]], "getBip32HeaderPub": [["int"]], "getBip32HeaderPriv": [["int"]], "testNet3": [["NetworkParameters"]], "unitTests": [["NetworkParameters"]], "getId": [["String"]], "getPaymentProtocolId": [["String"]], "getAddressHeader": [["int"]], "getAcceptableAddressCodes": [["int[]"]], "prodNet": [["NetworkParameters"]], "fromID": [["NetworkParameters", "String id"]], "getTargetTimespan": [["int"]], "getDnsSeeds": [["String[]"]], "hashCode": [["int"]], "getSpendableCoinbaseDepth": [["int"]], "testNet": [["NetworkParameters"]], "isCheckpoint": [["boolean", "int height"]], "getP2SHHeader": [["int"]], "getInterval": [["int"]], "getGenesisBlock": [["Block"]], "getSubsidyDecreaseBlockCount": [["int"]], "createGenesis": [["Block", "NetworkParameters n"]], "getMaxTarget": [["BigInteger"]], "getPort": [["int"]], "getAlertSigningKey": [["byte[]"]], "equals": [["boolean", "Object o"]], "passesCheckpoint": [["boolean", "int height", "Sha256Hash hash"]], "fromPmtProtocolID": [["NetworkParameters", "String pmtProtocolId"]]}, "className": "NetworkParameters", "renamed": ["long", "function", "(", ")", "{", "return", "packetMagic", ";", "}"], "nl": "The header bytes that identify the start of a packet on this network.", "nlToks": ["The", "header", "bytes", "that", "identify", "the", "start", "of", "a", "packet", "on", "this", "network", "."], "path": "1000000000001/bitcoinj/tree/master/core/src/main/java/org/bitcoinj/core/NetworkParameters.java", "idx": 1891}
{"memberVariables": {"spaceDelimited": "boolean", "SINCE=\"SINCE\"": "String", "defaultValue": "String", "caseSensitive": "boolean", "SPACE_DELIMITED=\"SPACE-DELIMITED\"": "String", "description": "String", "serialVersionUID=1L": "long", "RESTART_REQUIRED=\"RESTART REQUIRED\"": "String", "restartRequired": "boolean", "name": "String", "CASE_SENSITIVE=\"CASE-SENSITIVE\"": "String", "currentValue": "String", "since": "String"}, "code": ["Map", "<", "String", ",", "String", ">", "function", "(", ")", "{", "Map", "<", "String", ",", "String", ">", "map", "=", "new", "LinkedHashMap", "<", "String", ",", "String", ">", "(", ")", ";", "for", "(", "String", "string", ":", "getStrings", "(", ")", ")", "{", "String", "[", "]", "kvp", "=", "string", ".", "split", "(", "\"=\"", ",", "2", ")", ";", "String", "key", "=", "kvp", "[", "0", "]", ";", "String", "value", "=", "kvp", "[", "1", "]", ";", "map", ".", "put", "(", "key", ",", "value", ")", ";", "}", "return", "map", ";", "}"], "memberFunctions": {"getChar": [["char", "char defaultValue"]], "getBoolean": [["boolean", "boolean defaultValue"]], "getInteger": [["int", "int defaultValue"]], "getString": [["String", "String defaultValue"]], "isDefaultValue": [["boolean"]], "getStrings": [["List<String>"], ["List<String>", "String separator"]]}, "className": "SettingModel", "renamed": ["Map", "<", "String", ",", "String", ">", "function", "(", ")", "{", "Map", "<", "String", ",", "String", ">", "loc0", "=", "new", "LinkedHashMap", "<", "String", ",", "String", ">", "(", ")", ";", "for", "(", "String", "loc1", ":", "getStrings", "(", ")", ")", "{", "String", "[", "]", "loc2", "=", "loc1", ".", "split", "(", "\"srini_string\"", ",", "2", ")", ";", "String", "loc3", "=", "loc2", "[", "0", "]", ";", "String", "loc4", "=", "loc2", "[", "1", "]", ";", "loc0", ".", "put", "(", "loc3", ",", "loc4", ")", ";", "}", "return", "loc0", ";", "}"], "nl": "Returns a map of strings from the current value.", "nlToks": ["Returns", "a", "map", "of", "strings", "from", "the", "current", "value", "."], "path": "pombreda/gitblit/tree/master/src/main/java/com/gitblit/models/SettingModel.java", "idx": 1892}
{"memberVariables": {"issuer": "String"}, "code": ["IssuerServiceResponse", "function", "(", "HttpServletRequest", "request", ")", "{", "return", "new", "IssuerServiceResponse", "(", "getIssuer", "(", ")", ",", "null", ",", "null", ")", ";", "}"], "memberFunctions": {"afterPropertiesSet": [["void"]], "setIssuer": [["void", "String issuer"]]}, "className": "StaticSingleIssuerService", "renamed": ["IssuerServiceResponse", "function", "(", "HttpServletRequest", "arg0", ")", "{", "return", "new", "IssuerServiceResponse", "(", "getIssuer", "(", ")", ",", "null", ",", "null", ")", ";", "}"], "nl": "Always returns the configured issuer URL", "nlToks": ["Always", "returns", "the", "configured", "issuer", "URL"], "path": "adilansari/OpenID-Connect-Java-Spring-Server/tree/master/openid-connect-client/src/main/java/org/mitre/openid/connect/client/service/impl/StaticSingleIssuerService.java", "idx": 1894}
{"memberVariables": {"obj=null": "Scriptable"}, "code": ["Delegator", "function", "(", ")", "{", "try", "{", "return", "this", ".", "getClass", "(", ")", ".", "newInstance", "(", ")", ";", "}", "catch", "(", "Exception", "ex", ")", "{", "throw", "Context", ".", "throwAsScriptRuntimeEx", "(", "ex", ")", ";", "}", "}"], "memberFunctions": {"getDelegee": [["Scriptable"]], "setDelegee": [["void", "Scriptable obj"]], "hasInstance": [["boolean", "Scriptable instance"]], "setParentScope": [["void", "Scriptable parent"]], "getIds": [["Object[]"]], "construct": [["Scriptable", "Context cx", "Scriptable scope", "Object[] args"]], "delete": [["void", "String name"], ["void", "int index"]], "put": [["void", "String name", "Scriptable start", "Object value"], ["void", "int index", "Scriptable start", "Object value"]], "getDefaultValue": [["Object", "Class<?> hint"]], "getPrototype": [["Scriptable"]], "setPrototype": [["void", "Scriptable prototype"]], "call": [["Object", "Context cx", "Scriptable scope", "Scriptable thisObj", "Object[] args"]], "get": [["Object", "String name", "Scriptable start"], ["Object", "int index", "Scriptable start"]], "getClassName": [["String"]], "has": [["boolean", "String name", "Scriptable start"], ["boolean", "int index", "Scriptable start"]], "getParentScope": [["Scriptable"]]}, "className": "Delegator", "renamed": ["Delegator", "function", "(", ")", "{", "try", "{", "return", "this", ".", "getClass", "(", ")", ".", "newInstance", "(", ")", ";", "}", "catch", "(", "Exception", "loc0", ")", "{", "throw", "Context", ".", "throwAsScriptRuntimeEx", "(", "loc0", ")", ";", "}", "}"], "nl": "Crete new Delegator instance. The default implementation calls this.getClass().newInstance().", "nlToks": ["Crete", "new", "Delegator", "instance", ".", "The", "default", "implementation", "calls", "this.getClass", "-LRB-", "-RRB-", ".", "newInstance", "-LRB-", "-RRB-", "."], "path": "adamfisk/littleshoot-client/tree/master/bin/rhino1_7R2/src/org/mozilla/javascript/Delegator.java", "idx": 1895}
{"memberVariables": {"P1024=new BigInteger(\"00FFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD129024E08\" + \"8A67CC74020BBEA63B139B22514A08798E3404DDEF9519B3CD3A431B\" + \"302B0A6DF25F14374FE1356D6D51C245E485B576625E7EC6F44C42E9\"+ \"A637ED6B0BFF5CB6F406B7EDEE386BFB5A899FA5AE9F24117C4B1FE6\"+ \"49286651ECE65381FFFFFFFFFFFFFFFF\",16)": "BigInteger", "PRIVATE_KEY_SIZE=320": "int", "DH_PARAMETER_SPEC=new DHParameterSpec(P1024,G,PRIVATE_KEY_SIZE)": "DHParameterSpec", "DH_LEN=128": "int", "dh": "KeyAgreement", "G=new BigInteger(\"2\")": "BigInteger", "keyPair": "KeyPair", "onionKey": "TorPublicKey", "DH_SEC_LEN=40": "int"}, "code": ["BigInteger", "function", "(", ")", "{", "DHPublicKey", "pubKey", "=", "(", "DHPublicKey", ")", "keyPair", ".", "getPublic", "(", ")", ";", "return", "pubKey", ".", "getY", "(", ")", ";", "}"], "memberFunctions": {"getSharedSecret": [["byte[]", "BigInteger otherPublic"]], "createDH": [["KeyAgreement"]], "deriveKeysFromHandshakeResponse": [["boolean", "byte[] handshakeResponse", "byte[] keyMaterialOut", "byte[] verifyHashOut"]], "deriveKeysFromDHPublicAndHash": [["boolean", "BigInteger peerPublic", "byte[] keyHash", "byte[] keyMaterialOut", "byte[] verifyHashOut"]], "isValidPublicValue": [["boolean", "BigInteger publicValue"]], "getPublicKeyBytes": [["byte[]"]], "createOnionSkin": [["byte[]"]], "generateKeyPair": [["KeyPair"]]}, "className": "TorTapKeyAgreement", "renamed": ["BigInteger", "function", "(", ")", "{", "DHPublicKey", "loc0", "=", "(", "DHPublicKey", ")", "keyPair", ".", "getPublic", "(", ")", ";", "return", "loc0", ".", "getY", "(", ")", ";", "}"], "nl": "Return the generated public value for this key agreement operation as a BigInteger.", "nlToks": ["Return", "the", "generated", "public", "value", "for", "this", "key", "agreement", "operation", "as", "a", "BigInteger", "."], "path": "1000000000001/bitcoinj/tree/master/orchid/src/com/subgraph/orchid/crypto/TorTapKeyAgreement.java", "idx": 1897}
{"memberVariables": {"interactionType": "String", "experimentTypes": "String", "geneB": "long", "pmids": "String", "geneA": "long", "source": "String"}, "code": ["long", "function", "(", ")", "{", "return", "geneA", ";", "}"], "memberFunctions": {"setSource": [["void", "String s"]], "toSif": [["String"]], "setExperimentTypes": [["void", "String expTypes"]], "setGeneA": [["void", "long entrezGeneId"]], "setGeneB": [["void", "long entrezGeneID"]], "getInteractionType": [["String"]], "getGeneB": [["long"]], "setPmids": [["void", "String p"]], "getSource": [["String"]], "toString": [["String"]], "setInteractionType": [["void", "String type"]], "getExperimentTypes": [["String"]], "getPmids": [["String"]]}, "className": "Interaction", "renamed": ["long", "function", "(", ")", "{", "return", "geneA", ";", "}"], "nl": "Gets Entrez Gene ID for Gene A.", "nlToks": ["Gets", "Entrez", "Gene", "ID", "for", "Gene", "A."], "path": "adamabeshouse/cbioportal/tree/master/core/src/main/java/org/mskcc/cbio/portal/model/Interaction.java", "idx": 1900}
{"memberVariables": {"settings": "IStoredSettings", "logger=LoggerFactory.getLogger(getClass())": "Logger", "sb": "StringBuilder"}, "code": ["String", "function", "(", "Repository", "repository", ",", "String", "repositoryName", ",", "String", "text", ")", "{", "String", "html", "=", "StringUtils", ".", "escapeForHtml", "(", "text", ",", "false", ")", ";", "html", "=", "processTextRegex", "(", "repository", ",", "repositoryName", ",", "html", ")", ";", "return", "StringUtils", ".", "breakLinesForHtml", "(", "html", ")", ";", "}"], "memberFunctions": {"processCommitMessage": [["String", "Repository repository", "RepositoryModel model", "String text"]], "processTextRegex": [["String", "Repository repository", "String repositoryName", "String text"]], "appendLink": [["void", "String name", "String target"]], "appendText": [["void", "String text"]], "processText": [["String", "Repository repository", "String repositoryName", "String text"]]}, "className": "BugtraqProcessor", "renamed": ["String", "function", "(", "Repository", "arg0", ",", "String", "arg1", ",", "String", "arg2", ")", "{", "String", "loc0", "=", "StringUtils", ".", "escapeForHtml", "(", "arg2", ",", "false", ")", ";", "loc0", "=", "processTextRegex", "(", "arg0", ",", "arg1", ",", "loc0", ")", ";", "return", "StringUtils", ".", "breakLinesForHtml", "(", "loc0", ")", ";", "}"], "nl": "Returns an html version of the commit message with any global or repository-specific regular expression substitution applied. This method assumes the commit message is plain text.", "nlToks": ["Returns", "an", "html", "version", "of", "the", "commit", "message", "with", "any", "global", "or", "repository-specific", "regular", "expression", "substitution", "applied", ".", "This", "method", "assumes", "the", "commit", "message", "is", "plain", "text", "."], "path": "pombreda/gitblit/tree/master/src/main/java/com/gitblit/utils/BugtraqProcessor.java", "idx": 1902}
{"memberVariables": {"locationPositions": "Hashtable<String,Point2D>", "links": "LabeledGraph<String,Double>"}, "code": ["Double", "function", "(", "String", "fromLocation", ",", "String", "toLocation", ")", "{", "return", "links", ".", "get", "(", "fromLocation", ",", "toLocation", ")", ";", "}"], "memberFunctions": {"clear": [["void"]], "randomlyGenerateDestination": [["String"]], "clearLinks": [["void"]], "setPosition": [["void", "String loc", "double x", "double y"]], "addBidirectionalLink": [["void", "String fromLocation", "String toLocation", "Double distance"]], "removeUnidirectionalLink": [["void", "String fromLocation", "String toLocation"]], "getPosition": [["Point2D", "String loc"]], "removeBidirectionalLink": [["void", "String fromLocation", "String toLocation"]], "isLocation": [["boolean", "String str"]], "getLocations": [["List<String>"]], "addUnidirectionalLink": [["void", "String fromLocation", "String toLocation", "Double distance"]], "getLocationsLinkedTo": [["List<String>", "String fromLocation"]], "setDistAndDirToRefLocation": [["void", "String loc", "double dist", "int dir"]]}, "className": "ExtendableMap", "renamed": ["Double", "function", "(", "String", "arg0", ",", "String", "arg1", ")", "{", "return", "links", ".", "get", "(", "arg0", ",", "arg1", ")", ";", "}"], "nl": "Returns the travel distance between the two specified locations if they are linked by a connection and null otherwise.", "nlToks": ["Returns", "the", "travel", "distance", "between", "the", "two", "specified", "locations", "if", "they", "are", "linked", "by", "a", "connection", "and", "null", "otherwise", "."], "path": "peterplupo/ia201102/tree/master/trabalho1/aima-core/src/main/java/aima/core/environment/map/ExtendableMap.java", "idx": 1903}
{"memberVariables": {"gson=new Gson()": "Gson", "logger=LoggerFactory.getLogger(JsonUtils.class)": "Logger"}, "code": ["JsonElement", "function", "(", "Set", "<", "String", ">", "value", ",", "boolean", "preserveEmpty", ")", "{", "if", "(", "!", "preserveEmpty", "&&", "value", "!=", "null", "&&", "value", ".", "isEmpty", "(", ")", ")", "{", "return", "JsonNull", ".", "INSTANCE", ";", "}", "else", "{", "return", "gson", ".", "toJsonTree", "(", "value", ",", "new", "TypeToken", "<", "Set", "<", "String", ">>", "(", ")", "{", "}", ".", "getType", "(", ")", ")", ";", "}", "}"], "memberFunctions": {"readMap": [["Map", "JsonReader reader"]], "getAsDate": [["Date", "JsonObject o", "String member"]], "getAsEncryptionMethodList": [["List<EncryptionMethod>", "JsonObject o", "String member"]], "readSet": [["Set", "JsonReader reader"]], "getAsString": [["String", "JsonObject o", "String member"]], "getAsJweEncryptionMethod": [["EncryptionMethod", "JsonObject o", "String member"]], "getAsStringSet": [["Set<String>", "JsonObject o", "String member"]], "getAsJweAlgorithmList": [["List<JWEAlgorithm>", "JsonObject o", "String member"]], "writeNullSafeArray": [["void", "JsonWriter writer", "Set<String> items"]], "getAsLong": [["Long", "JsonObject o", "String member"]], "getAsBoolean": [["Boolean", "JsonObject o", "String member"]], "getAsJwsAlgorithm": [["JWSAlgorithm", "JsonObject o", "String member"]], "getAsJweAlgorithm": [["JWEAlgorithm", "JsonObject o", "String member"]], "getAsJwsAlgorithmList": [["List<JWSAlgorithm>", "JsonObject o", "String member"]], "getAsStringList": [["List<String>", "JsonObject o", "String member"]]}, "className": "JsonUtils", "renamed": ["JsonElement", "function", "(", "Set", "<", "String", ">", "arg0", ",", "boolean", "arg1", ")", "{", "if", "(", "!", "arg1", "&&", "arg0", "!=", "null", "&&", "arg0", ".", "isEmpty", "(", ")", ")", "{", "return", "JsonNull", ".", "INSTANCE", ";", "}", "else", "{", "return", "gson", ".", "toJsonTree", "(", "arg0", ",", "new", "TypeToken", "<", "Set", "<", "String", ">>", "(", ")", "{", "}", ".", "getType", "(", ")", ")", ";", "}", "}"], "nl": "Translate a set of strings to a JSON array, optionally preserving the empty array. Otherwise (default) empty array is returned as null.", "nlToks": ["Translate", "a", "set", "of", "strings", "to", "a", "JSON", "array", ",", "optionally", "preserving", "the", "empty", "array", ".", "Otherwise", "-LRB-", "default", "-RRB-", "empty", "array", "is", "returned", "as", "null", "."], "path": "adilansari/OpenID-Connect-Java-Spring-Server/tree/master/openid-connect-common/src/main/java/org/mitre/util/JsonUtils.java", "idx": 1904}
{"memberVariables": {}, "code": ["void", "function", "(", "Context", "context", ",", "View", "view", ")", "{", "if", "(", "view", "==", "null", ")", "return", ";", "InputMethodManager", "inputMethodManager", "=", "(", "InputMethodManager", ")", "context", ".", "getSystemService", "(", "Context", ".", "INPUT_METHOD_SERVICE", ")", ";", "inputMethodManager", ".", "showSoftInput", "(", "view", ",", "0", ")", ";", "}"], "memberFunctions": {"hideSoftInput": [["void", "Context context", "View view"]]}, "className": "SoftInputUtil", "renamed": ["void", "function", "(", "Context", "arg0", ",", "View", "arg1", ")", "{", "if", "(", "arg1", "==", "null", ")", "return", ";", "InputMethodManager", "loc0", "=", "(", "InputMethodManager", ")", "arg0", ".", "getSystemService", "(", "Context", ".", "INPUT_METHOD_SERVICE", ")", ";", "loc0", ".", "showSoftInput", "(", "arg1", ",", "0", ")", ";", "}"], "nl": "Show keyboard", "nlToks": ["Show", "keyboard"], "path": "pop1030123/android-atleap/tree/master/atleap-core/src/main/java/com/blandware/android/atleap/util/SoftInputUtil.java", "idx": 1905}
{"memberVariables": {"serialVersionUID=1L": "long", "isSystemDerived": "String", "isActive": "String", "predecessorId": "BigDecimal", "srcFileName": "String", "successorId": "BigDecimal", "feedId": "BigDecimal", "checksum": "String", "transmissionDatasetId": "String", "comments": "String", "inactivationReasonType": "String", "isFormatValid": "String", "dataUnitId": "long", "receiptDate": "Timestamp", "srcUniqueFileName": "String", "createdDate": "Timestamp", "dataSetId": "Long", "fileSize": "BigDecimal", "destFileName": "String", "loadedInCats": "String", "checksumType": "String", "modifiedDate": "Timestamp", "runId": "BigDecimal", "isPrepopulated": "String", "isBulk": "String", "isUpdate": "String", "receiptDateType": "String", "status": "String"}, "code": ["Timestamp", "function", "(", ")", "{", "return", "this", ".", "receiptDate", ";", "}"], "memberFunctions": {"setIsSystemDerived": [["void", "String isSystemDerived"]], "setIsPrepopulated": [["void", "String isPrepopulated"]], "getStatus": [["String"]], "getIsUpdate": [["String"]], "getDataUnitId": [["long"]], "getFileSize": [["BigDecimal"]], "setInactivationReasonType": [["void", "String inactivationReasonType"]], "setDataUnitId": [["void", "long dataUnitId"]], "getComments": [["String"]], "getCreatedDate": [["Timestamp"]], "setFileSize": [["void", "BigDecimal fileSize"]], "getPredecessorId": [["BigDecimal"]], "setIsUpdate": [["void", "String isUpdate"]], "getReceiptDateType": [["String"]], "getFeedId": [["BigDecimal"]], "setReceiptDate": [["void", "Timestamp receiptDate"]], "getModifiedDate": [["Timestamp"]], "setSuccessorId": [["void", "BigDecimal successorId"]], "setDestFileName": [["void", "String destFileName"]], "setIsBulk": [["void", "String isBulk"]], "getIsFormatValid": [["String"]], "setDataSetId": [["void", "Long dataSetId"]], "setIsActive": [["void", "String isActive"]], "setChecksumType": [["void", "String checksumType"]], "setFeedId": [["void", "BigDecimal feedId"]], "getInactivationReasonType": [["String"]], "getSrcUniqueFileName": [["String"]], "getDataSetId": [["Long"]], "setReceiptDateType": [["void", "String receiptDateType"]], "getRunId": [["BigDecimal"]], "setSrcFileName": [["void", "String srcFileName"]], "getChecksumType": [["String"]], "getSrcFileName": [["String"]], "getChecksum": [["String"]], "getDestFileName": [["String"]], "setTransmissionDatasetId": [["void", "String transmissionDatasetId"]], "getTransmissionDatasetId": [["String"]], "setComments": [["void", "String comments"]], "getLoadedInCats": [["String"]], "getSuccessorId": [["BigDecimal"]], "setLoadedInCats": [["void", "String loadedInCats"]], "getIsPrepopulated": [["String"]], "setSrcUniqueFileName": [["void", "String srcUniqueFileName"]], "setChecksum": [["void", "String checksum"]], "setIsFormatValid": [["void", "String isFormatValid"]], "getIsBulk": [["String"]], "setRunId": [["void", "BigDecimal runId"]], "setStatus": [["void", "String status"]], "getIsActive": [["String"]], "setModifiedDate": [["void", "Timestamp modifiedDate"]], "setCreatedDate": [["void", "Timestamp createdDate"]], "setPredecessorId": [["void", "BigDecimal predecessorId"]], "getIsSystemDerived": [["String"]]}, "className": "PCLDataUnitEntity", "renamed": ["Timestamp", "function", "(", ")", "{", "return", "this", ".", "receiptDate", ";", "}"], "nl": "Gets the receipt date.", "nlToks": ["Gets", "the", "receipt", "date", "."], "path": "pkesireddy/portico_fletcher/tree/master/FetcherTesterService/src/main/java/org/ithaka/cm/fetchertester/entity/PCLDataUnitEntity.java", "idx": 1906}
{"memberVariables": {"conduitSelector": "ConduitSelector", "requestContext=new HashMap<String,Object>()": "Map<String,Object>", "bus": "Bus", "inInterceptors=new ModCountCopyOnWriteArrayList<Interceptor<? extends Message>>()": "List<Interceptor<? extends Message>>", "synchronousTimeout=60000": "long", "outInterceptors=new ModCountCopyOnWriteArrayList<Interceptor<? extends Message>>()": "List<Interceptor<? extends Message>>", "LOG=LogUtils.getL7dLogger(ClientConfiguration.class)": "Logger", "inFault=new ModCountCopyOnWriteArrayList<Interceptor<? extends Message>>()": "List<Interceptor<? extends Message>>", "responseContext=new HashMap<String,Object>()": "Map<String,Object>", "outFault=new ModCountCopyOnWriteArrayList<Interceptor<? extends Message>>()": "List<Interceptor<? extends Message>>"}, "code": ["ConduitSelector", "function", "(", ")", "{", "return", "conduitSelector", ";", "}"], "memberFunctions": {"getBus": [["Bus"]], "getOutFaultInterceptors": [["List<Interceptor<? extends Message>>"]], "getEndpoint": [["Endpoint"]], "getSynchronousTimeout": [["long"]], "setConduitSelector": [["void", "ConduitSelector cs"]], "setOutInterceptors": [["void", "List<Interceptor<? extends Message>> interceptors"]], "getInInterceptors": [["List<Interceptor<? extends Message>>"]], "getResponseContext": [["Map<String,Object>"]], "isResponseExpectedForOneway": [["boolean"]], "setOutFaultInterceptors": [["void", "List<Interceptor<? extends Message>> interceptors"]], "getHttpConduit": [["HTTPConduit"]], "getConduit": [["Conduit"]], "setSynchronousTimeout": [["void", "long synchronousTimeout"]], "getInFaultInterceptors": [["List<Interceptor<? extends Message>>"]], "getOutInterceptors": [["List<Interceptor<? extends Message>>"]], "setInInterceptors": [["void", "List<Interceptor<? extends Message>> interceptors"]], "getRequestContext": [["Map<String,Object>"]], "setInFaultInterceptors": [["void", "List<Interceptor<? extends Message>> interceptors"]], "setBus": [["void", "Bus bus"]], "prepareConduitSelector": [["void", "Message message"]]}, "className": "ClientConfiguration", "renamed": ["ConduitSelector", "function", "(", ")", "{", "return", "conduitSelector", ";", "}"], "nl": "Gets the conduit selector", "nlToks": ["Gets", "the", "conduit", "selector"], "path": "primesign/cxf/tree/master/rt/rs/client/src/main/java/org/apache/cxf/jaxrs/client/ClientConfiguration.java", "idx": 1907}
{"memberVariables": {"DEFAULT_ATTACHMENT_TENSION=70": "int", "mListeners=new CopyOnWriteArrayList<SpringListener>()": "CopyOnWriteArrayList<SpringListener>", "mAttachmentSpringConfig": "SpringConfig", "DEFAULT_ATTACHMENT_FRICTION=10": "int", "DEFAULT_MAIN_TENSION=40": "int", "mControlSpringIndex=-1": "int", "registry=SpringConfigRegistry.getInstance()": "SpringConfigRegistry", "mMainSpringConfig": "SpringConfig", "mSpringSystem=SpringSystem.create()": "SpringSystem", "DEFAULT_MAIN_FRICTION=6": "int", "mSprings=new CopyOnWriteArrayList<Spring>()": "CopyOnWriteArrayList<Spring>", "id=0": "int"}, "code": ["SpringChain", "function", "(", "int", "mainTension", ",", "int", "mainFriction", ",", "int", "attachmentTension", ",", "int", "attachmentFriction", ")", "{", "return", "new", "SpringChain", "(", "mainTension", ",", "mainFriction", ",", "attachmentTension", ",", "attachmentFriction", ")", ";", "}"], "memberFunctions": {"getMainSpringConfig": [["SpringConfig"]], "getAllSprings": [["List<Spring>"]], "setControlSpringIndex": [["SpringChain", "int i"]], "onSpringActivate": [["void", "Spring spring"]], "getControlSpring": [["Spring"]], "onSpringAtRest": [["void", "Spring spring"]], "onSpringUpdate": [["void", "Spring spring"]], "addSpring": [["SpringChain", "final SpringListener listener"]], "onSpringEndStateChange": [["void", "Spring spring"]], "getAttachmentSpringConfig": [["SpringConfig"]]}, "className": "SpringChain", "renamed": ["SpringChain", "function", "(", "int", "arg0", ",", "int", "arg1", ",", "int", "arg2", ",", "int", "arg3", ")", "{", "return", "new", "SpringChain", "(", "arg0", ",", "arg1", ",", "arg2", ",", "arg3", ")", ";", "}"], "nl": "Factory method for creating a new SpringChain with the provided SpringConfig.", "nlToks": ["Factory", "method", "for", "creating", "a", "new", "SpringChain", "with", "the", "provided", "SpringConfig", "."], "path": "adilek/rebound/tree/master/rebound-android/src/main/java/com/facebook/rebound/SpringChain.java", "idx": 1908}
{"memberVariables": {"lat=0.0": "double", "id_str=null": "String", "screen_name=\"unknown\"": "String", "place_name=\"unknown\"": "String", "image=null": "String", "user_name=\"unknown@unknown\"": "String", "lng=0.0": "double", "created_at=null": "Date", "loc_radius=0": "int", "user_id=\"unknown\"": "String", "text=\"\"": "String", "extras=new ArrayList<String>()": "ArrayList<String>"}, "code": ["GenericJSONBuilder", "function", "(", "int", "radius", ")", "{", "loc_radius", "=", "radius", ";", "return", "this", ";", "}"], "memberFunctions": {"setIDstr": [["GenericJSONBuilder", "String id_str_"]], "setPlaceName": [["GenericJSONBuilder", "String name"]], "addText": [["GenericJSONBuilder", "String text_"]], "addField": [["GenericJSONBuilder", "String key", "String value"]], "insert": [["void", "Insertable msg"]], "setAuthor": [["GenericJSONBuilder", "String author", "String domain"]], "builder": [["GenericJSONBuilder"]], "setCoordinate": [["GenericJSONBuilder", "double longtitude", "double latitude"]], "setCreatedTime": [["GenericJSONBuilder", "Date createdTime"]], "persist": [["void"]], "buildFieldJSON": [["String"]], "setUserid": [["GenericJSONBuilder", "String user_id_"]], "setImage": [["GenericJSONBuilder", "String link_"]]}, "className": "DAOWrapper", "renamed": ["GenericJSONBuilder", "function", "(", "int", "arg0", ")", "{", "loc_radius", "=", "arg0", ";", "return", "this", ";", "}"], "nl": "Not required", "nlToks": ["Not", "required"], "path": "adarsh-ideal/loklak_server/tree/master/src/org/loklak/data/DAOWrapper.java", "idx": 1909}
{"memberVariables": {"_substVisitor=new SubstVisitor()": "SubstVisitor"}, "code": ["Map", "<", "Variable", ",", "Term", ">", "function", "(", "FOLNode", "x", ",", "FOLNode", "y", ")", "{", "return", "unify", "(", "x", ",", "y", ",", "new", "LinkedHashMap", "<", "Variable", ",", "Term", ">", "(", ")", ")", ";", "}"], "memberFunctions": {"args": [["List<? extends FOLNode>", "FOLNode x"]], "op": [["String", "FOLNode x"]], "cascadeSubstitution": [["Map<Variable,Term>", "Map<Variable,Term> theta", "Variable var", "Term x"]], "unifyOps": [["Map<Variable,Term>", "String x", "String y", "Map<Variable,Term> theta"]], "occurCheck": [["boolean", "Map<Variable,Term> theta", "Variable var", "FOLNode x"]], "isCompound": [["boolean", "FOLNode x"]], "unifyVar": [["Map<Variable,Term>", "Variable var", "FOLNode x", "Map<Variable,Term> theta"]]}, "className": "Unifier", "renamed": ["Map", "<", "Variable", ",", "Term", ">", "function", "(", "FOLNode", "arg0", ",", "FOLNode", "arg1", ")", "{", "return", "unify", "(", "arg0", ",", "arg1", ",", "new", "LinkedHashMap", "<", "Variable", ",", "Term", ">", "(", ")", ")", ";", "}"], "nl": "Returns a Map representing the substitution (i.e. a set of variable/term pairs) or null which is used to indicate a failure to unify.", "nlToks": ["Returns", "a", "Map", "representing", "the", "substitution", "-LRB-", "i.e.", "a", "set", "of", "variable/term", "pairs", "-RRB-", "or", "null", "which", "is", "used", "to", "indicate", "a", "failure", "to", "unify", "."], "path": "peterplupo/ia201102/tree/master/trabalho1/aima-core/src/main/java/aima/core/logic/fol/Unifier.java", "idx": 1910}
{"memberVariables": {"map": "Map<Path,String>", "initialized=false": "boolean"}, "code": ["String", "function", "(", "@", "Nonnull", "PublicKey", "pubkey", ")", "{", "return", "getKeyHash", "(", "pubkey", ",", "\"SHA-256\"", ")", ";", "}"], "memberFunctions": {"init": [["void"]], "readFile": [["String", "@Nonnull Path path"]], "readFileCached": [["String", "@Nonnull Path path"]], "getKeyAsString": [["String", "@Nonnull Key key"]], "decodePublicKey": [["PublicKey", "@Nonnull String encodedKey", "@Nonnull String algorithm"]]}, "className": "IO", "renamed": ["String", "function", "(", "@", "Nonnull", "PublicKey", "arg0", ")", "{", "return", "getKeyHash", "(", "arg0", ",", "\"srini_string\"", ")", ";", "}"], "nl": "Create hash for a key, use default algorithm SHA-256", "nlToks": ["Create", "hash", "for", "a", "key", ",", "use", "default", "algorithm", "SHA-256"], "path": "adarsh-ideal/loklak_server/tree/master/src/org/loklak/tools/IO.java", "idx": 1911}
{"memberVariables": {"tileLayer=null": "TiledMapTileLayer", "objectLayer": "String", "mapName": "String", "visited[][]=null": "boolean", "map": "TiledMap", "tileLayerString": "String"}, "code": ["void", "function", "(", ")", "{", "this", ".", "map", "=", "ShadowStruggles", ".", "getInstance", "(", ")", ".", "getTiledMap", "(", "mapName", ")", ";", "this", ".", "tileLayer", "=", "(", "TiledMapTileLayer", ")", "map", ".", "getLayers", "(", ")", ".", "get", "(", "tileLayerString", ")", ";", "}"], "memberFunctions": {"read": [["void", "Json json", "JsonValue jsonData"]], "pathFinderVisited": [["void", "int x", "int y"]], "getMap": [["TiledMap"]], "getTouchingEvent": [["EventInGame", "Rectangle charRect"]], "getHeightInTiles": [["int"]], "getTileLayer": [["TiledMapTileLayer"]], "blocked": [["boolean", "Mover mover", "int x", "int y"], ["boolean", "Mover mover", "int x", "int y", "boolean triggerTouch"]], "checkTileCollision": [["boolean", "Rectangle charRect"]], "getMapName": [["String"]], "triggerEvent": [["boolean", "Rectangle charRect", "WalkDirection directionTurn"]], "touchEvent": [["boolean", "Rectangle charRect", "WalkDirection directionTurn"]], "getCost": [["float", "Mover mover", "int sx", "int sy", "int tx", "int ty"]], "getWidthInTiles": [["int"]], "getObjectLayer": [["String"]], "write": [["void", "Json json"]], "runAutomaticEvents": [["void"]]}, "className": "RpgMap", "renamed": ["void", "function", "(", ")", "{", "this", ".", "map", "=", "ShadowStruggles", ".", "getInstance", "(", ")", ".", "getTiledMap", "(", "mapName", ")", ";", "this", ".", "tileLayer", "=", "(", "TiledMapTileLayer", ")", "map", ".", "getLayers", "(", ")", ".", "get", "(", "tileLayerString", ")", ";", "}"], "nl": "Retrieves the TiledMap and the current layer using the mapName and tileLayer attributes.", "nlToks": ["Retrieves", "the", "TiledMap", "and", "the", "current", "layer", "using", "the", "mapName", "and", "tileLayer", "attributes", "."], "path": "prativa/shadowstruggles/tree/master/Shadow Struggles/model/br/edu/ifsp/pds/shadowstruggles/model/rpg/RpgMap.java", "idx": 1912}
{"memberVariables": {}, "code": ["Document", "function", "(", "Source", "s", ")", "{", "Document", "d", "=", "tryExtractDocFromDOMSource", "(", "s", ")", ";", "return", "d", "!=", "null", "?", "d", ":", "toDocument", "(", "s", ",", "DocumentBuilderFactory", ".", "newInstance", "(", ")", ")", ";", "}"], "memberFunctions": {"tryExtractNodeFromDOMSource": [["Node", "Source s"]], "toInputSource": [["InputSource", "Source s"], ["InputSource", "Source s", "TransformerFactory fac"]], "tryExtractDocFromDOMSource": [["Document", "Source s"]], "toNamespaceContext": [["NamespaceContext", "Map<String,String> prefix2URI"]], "toNode": [["Node", "Source s"], ["Node", "Source s", "DocumentBuilderFactory factory"]]}, "className": "Convert", "renamed": ["Document", "function", "(", "Source", "arg0", ")", "{", "Document", "loc0", "=", "tryExtractDocFromDOMSource", "(", "arg0", ")", ";", "return", "loc0", "!=", "null", "?", "loc0", ":", "toDocument", "(", "arg0", ",", "DocumentBuilderFactory", ".", "newInstance", "(", ")", ")", ";", "}"], "nl": "Creates a DOM Document from a TraX Source. If the source is a  {@link DOMSource} holding a DocumentNode, this one will be returned.  Otherwise  {@link #toInputSource} and a namespace aware DocumentBuilder (createdby the default DocumentBuilderFactory) will be used to read the source.  This may involve an XSLT identity transform in toInputSource.", "nlToks": ["Creates", "a", "DOM", "Document", "from", "a", "TraX", "Source", ".", "If", "the", "source", "is", "a", "-LCB-", "@link", "DOMSource", "-RCB-", "holding", "a", "DocumentNode", ",", "this", "one", "will", "be", "returned", ".", "Otherwise", "-LCB-", "@link", "#toInputSource", "-RCB-", "and", "a", "namespace", "aware", "DocumentBuilder", "-LRB-", "createdby", "the", "default", "DocumentBuilderFactory", "-RRB-", "will", "be", "used", "to", "read", "the", "source", ".", "This", "may", "involve", "an", "XSLT", "identity", "transform", "in", "toInputSource", "."], "path": "phbenisc/xmlunit/tree/master/xmlunit-core/src/main/java/org/xmlunit/util/Convert.java", "idx": 1913}
{"memberVariables": {"TEMP_DIR=\"/Users/wendellpbarreto/Downloads\"": "String", "graph=new StringBuilder()": "StringBuilder", "DOT=\"/usr/local/bin/dot\"": "String"}, "code": ["String", "function", "(", "String", "name", ")", "{", "return", "\"subgraph \"", "+", "name", "+", "\" {\"", ";", "}"], "memberFunctions": {"add": [["void", "String line"]], "addln": [["void", "String line"], ["void"]], "getGraph": [["byte[]", "String dot_source", "String type"]], "writeGraphToFile": [["int", "byte[] img", "String file"], ["int", "byte[] img", "File to"]], "start_graph": [["String"]], "end_graph": [["String"]], "readSource": [["void", "String input"]], "getDotSource": [["String"]], "writeDotSourceToFile": [["File", "String str"]], "get_img_stream": [["byte[]", "File dot", "String type"]], "end_subgraph": [["String"]]}, "className": "GraphViz", "renamed": ["String", "function", "(", "String", "arg0", ")", "{", "return", "\"srini_string\"", "+", "arg0", "+", "\"srini_string\"", ";", "}"], "nl": "Returns a string that is used to start a subgraph.", "nlToks": ["Returns", "a", "string", "that", "is", "used", "to", "start", "a", "subgraph", "."], "path": "adelinosegundo/gene_analytics/tree/master/src/util/graphviz/GraphViz.java", "idx": 1914}
{"memberVariables": {"environments=null": "IEnvironments", "factories=new HashMap<String,CoAPConnectionFactory>()": "HashMap<String,CoAPConnectionFactory>", "config=null": "AutoSIMCoAPConfig"}, "code": ["void", "function", "(", "BundleContext", "context", ")", "{", "for", "(", "AutoSIMConnectionConfig", "connectionConfig", ":", "config", ".", "connections", ")", "{", "environments", ".", "deregisterConnectionFactory", "(", "connectionConfig", ".", "name", ")", ";", "factories", ".", "remove", "(", "connectionConfig", ".", "name", ")", ";", "}", "}"], "memberFunctions": {"start": [["void", "BundleContext context"]]}, "className": "CoAPServiceActivator", "renamed": ["void", "function", "(", "BundleContext", "arg0", ")", "{", "for", "(", "AutoSIMConnectionConfig", "loc0", ":", "config", ".", "connections", ")", "{", "environments", ".", "deregisterConnectionFactory", "(", "loc0", ".", "name", ")", ";", "factories", ".", "remove", "(", "loc0", ".", "name", ")", ";", "}", "}"], "nl": "Implements BundleActivator.stop(). Does nothing since the framework will automatically unregister any registered services.", "nlToks": ["Implements", "BundleActivator.stop", "-LRB-", "-RRB-", ".", "Does", "nothing", "since", "the", "framework", "will", "automatically", "unregister", "any", "registered", "services", "."], "path": "adityayadav76/internet_of_things_simulator/tree/master/AutoSIM-CoAP/src/com/automatski/autosim/coap/CoAPServiceActivator.java", "idx": 1916}
{"memberVariables": {"plugins": "SortedUniqueList<AbstractPlugin>", "serialVersionUID=1L": "long"}, "code": ["boolean", "function", "(", "String", "pluginName", ")", "{", "AbstractPlugin", "toRemove", "=", "getByName", "(", "pluginName", ")", ";", "return", "remove", "(", "toRemove", ")", ";", "}"], "memberFunctions": {"add": [["boolean", "AbstractPlugin plugin"]], "removeByIndex": [["boolean", "int index"]], "contains": [["boolean", "AbstractPlugin plugin"]], "iterator": [["Iterator<AbstractPlugin>"]], "size": [["int"]], "getByIndex": [["AbstractPlugin", "int index"]], "getByName": [["AbstractPlugin", "String pluginName"]], "clear": [["void"]], "indexOf": [["int", "AbstractPlugin plugin"]], "remove": [["boolean", "AbstractPlugin plugin"]]}, "className": "PluginContainer", "renamed": ["boolean", "function", "(", "String", "arg0", ")", "{", "AbstractPlugin", "loc0", "=", "getByName", "(", "arg0", ")", ";", "return", "remove", "(", "loc0", ")", ";", "}"], "nl": "Remove a plugin from this container by its unique name", "nlToks": ["Remove", "a", "plugin", "from", "this", "container", "by", "its", "unique", "name"], "path": "0xwindows/WS-Attacker/tree/master/framework/src/main/java/wsattacker/main/plugin/PluginContainer.java", "idx": 1917}
{"memberVariables": {"_the_production": "production", "_core_hash_cache": "int", "_symbol_after_dot=null": "symbol", "_dot_pos": "int"}, "code": ["production", "function", "(", ")", "{", "return", "_the_production", ";", "}"], "memberFunctions": {"shift_core": [["lr_item_core"]], "symbol_after_dot": [["symbol"]], "obj_hash": [["int"]], "to_simple_string": [["String"]], "dot_pos": [["int"]], "hashCode": [["int"]], "equals": [["boolean", "lr_item_core other"], ["boolean", "Object other"]], "toString": [["String"]], "dot_before_nt": [["non_terminal"]], "core_hashCode": [["int"]], "core_equals": [["boolean", "lr_item_core other"]], "dot_at_end": [["boolean"]]}, "className": "lr_item_core", "renamed": ["production", "function", "(", ")", "{", "return", "_the_production", ";", "}"], "nl": "The production for the item.", "nlToks": ["The", "production", "for", "the", "item", "."], "path": "polyglot-compiler/polyglot/tree/master/tools/java_cup/src/java_cup/lr_item_core.java", "idx": 1918}
{"memberVariables": {"dev": "Device"}, "code": ["void", "function", "(", ")", "{", "System", ".", "out", ".", "println", "(", "\"toString\"", ")", ";", "Device", "instance", "=", "null", ";", "String", "expResult", "=", "\"\"", ";", "String", "result", "=", "instance", ".", "toString", "(", ")", ";", "assertEquals", "(", "expResult", ",", "result", ")", ";", "fail", "(", "\"The test case is a prototype.\"", ")", ";", "}"], "memberFunctions": {"testGetType": [["void"]], "setUpClass": [["void"]], "testGetDeviceName_0args": [["void"]], "testAddToPane": [["void"]], "testGetAddress": [["void"]], "tearDownClass": [["void"]], "tearDown": [["void"]], "testGetDeviceNames": [["void"]], "testGetDeviceBlock": [["void"]], "testAddCapabilities": [["void"]], "testGetImgName": [["void"]], "testAddCapability": [["void"]], "testGetDeviceName_Locale": [["void"]], "setUp": [["void"]], "testGetImage": [["void"]], "testGetDeviceID": [["void"]], "testGetCapabilityBlock": [["void"]], "testGetCapabilities": [["void"]], "testRemoveCapability": [["void"]]}, "className": "DeviceTest", "renamed": ["void", "function", "(", ")", "{", "System", ".", "out", ".", "println", "(", "\"srini_string\"", ")", ";", "Device", "loc0", "=", "null", ";", "String", "loc1", "=", "\"srini_string\"", ";", "String", "loc2", "=", "loc0", ".", "toString", "(", ")", ";", "assertEquals", "(", "loc1", ",", "loc2", ")", ";", "fail", "(", "\"srini_string\"", ")", ";", "}"], "nl": "Test of toString method, of class Device.", "nlToks": ["Test", "of", "toString", "method", ",", "of", "class", "Device", "."], "path": "hashinisenaratne/SIFEB/tree/master/Visual Programming Editor/SiFEB_VE/test/com/sifeb/ve/DeviceTest.java", "idx": 1920}
{"memberVariables": {"date": "Date", "authorCount": "int", "refIdChanges": "Map<String,String>", "commits": "Set<RepositoryCommit>", "serialVersionUID=1L": "long", "repository": "String", "refUpdates": "Map<String,ReceiveCommand.Type>", "user": "UserModel"}, "code": ["List", "<", "String", ">", "function", "(", ")", "{", "return", "getChangedRefs", "(", "Constants", ".", "R_TAGS", ")", ";", "}"], "memberFunctions": {"getOldId": [["String", "String ref"]], "getAuthorCount": [["int"]], "getCommitCount": [["int"]], "isDelete": [["boolean", "String ref"]], "compareTo": [["int", "RefLogEntry o"]], "getChangeType": [["ReceiveCommand.Type", "String ref"]], "addCommit": [["RepositoryCommit", "String branch", "RevCommit commit"], ["RepositoryCommit", "RepositoryCommit commit"]], "getChangedRefs": [["List<String>"], ["List<String>", "String baseRef"]], "getChangedBranches": [["List<String>"]], "getAuthorIdent": [["PersonIdent"]], "getCommits": [["List<RepositoryCommit>"], ["List<RepositoryCommit>", "String ref"]], "getCommitterIdent": [["PersonIdent"]], "addCommits": [["void", "List<RepositoryCommit> list"]], "isNonFastForward": [["boolean"], ["boolean", "String ref"]], "toString": [["String"]], "updateRef": [["void", "String ref", "ReceiveCommand.Type type"], ["void", "String ref", "ReceiveCommand.Type type", "String oldId", "String newId"]], "getNewId": [["String", "String ref"]]}, "className": "RefLogEntry", "renamed": ["List", "<", "String", ">", "function", "(", ")", "{", "return", "getChangedRefs", "(", "Constants", ".", "R_TAGS", ")", ";", "}"], "nl": "Returns the list of tags changed by the push.", "nlToks": ["Returns", "the", "list", "of", "tags", "changed", "by", "the", "push", "."], "path": "pombreda/gitblit/tree/master/src/main/java/com/gitblit/models/RefLogEntry.java", "idx": 1921}
{"memberVariables": {"parent": "JsonTray", "credential": "ClientCredential", "json": "JSONObject"}, "code": ["Object", "function", "(", "String", "key", ")", "{", "return", "this", ".", "json", ".", "get", "(", "key", ")", ";", "}"], "memberFunctions": {"checkExpireTime": [["boolean"]], "getIdentity": [["ClientIdentity"]], "setExpireTime": [["void", "long time"]], "getBoolean": [["boolean", "String key"], ["boolean", "String key", "boolean defVal"]], "setIdentity": [["Authentication", "@Nonnull ClientIdentity id"]], "getString": [["String", "String key"], ["String", "String key", "String defVal"]], "has": [["boolean", "String key"]], "delete": [["void"]], "put": [["void", "String key", "Object value"]], "remove": [["void", "String key"]]}, "className": "Authentication", "renamed": ["Object", "function", "(", "String", "arg0", ")", "{", "return", "this", ".", "json", ".", "get", "(", "arg0", ")", ";", "}"], "nl": "Get a value from the internal JSONObject", "nlToks": ["Get", "a", "value", "from", "the", "internal", "JSONObject"], "path": "adarsh-ideal/loklak_server/tree/master/src/org/loklak/server/Authentication.java", "idx": 1923}
{"memberVariables": {"spinTime=150": "int", "recordedMovement=new int[]{0,0,0,0,0}": "int[]", "speed=10": "int", "cycleTime=150": "int", "MOVED_SPINRIGHT=7": "int", "ourInstance=new GeneralMotorConSchedule()": "GeneralMotorConSchedule", "MOVED_RIGHT=3": "int", "MOVED_CYCLELEFT=10": "int", "MOVED_LOWERALT=6": "int", "cycleSpeed=10": "int", "cycleSpinSpeed=15": "int", "sideTime=100": "int", "runningThreads=0": "int", "altitudeSpeed=15": "int", "altitudeTime=100": "int", "batLvl=0": "int", "spinSpeed=15": "int", "hoverTime=2000": "int", "MOVED_RAISEALT=5": "int", "drone": "ARDrone", "MOVED_CYCLERIGHT=9": "int", "runningID=0": "int", "MOVED_SPINLEFT=8": "int", "MOVED_BACKWARD=2": "int", "MOVED_FORWARD=1": "int", "TAG=\"GMCS\"": "String", "MOVED_LEFT=4": "int", "spin90Time=4500": "int", "cmd": "CommandManager", "printToConsole=true": "boolean", "spin90Speed=50": "int"}, "code": ["void", "function", "(", "int", "movement", ")", "{", "recordedMovement", "[", "4", "]", "=", "recordedMovement", "[", "3", "]", ";", "recordedMovement", "[", "3", "]", "=", "recordedMovement", "[", "2", "]", ";", "recordedMovement", "[", "2", "]", "=", "recordedMovement", "[", "1", "]", ";", "recordedMovement", "[", "1", "]", "=", "recordedMovement", "[", "0", "]", ";", "recordedMovement", "[", "0", "]", "=", "movement", ";", "}"], "memberFunctions": {"spin90Left": [["GeneralMotorConSchedule"]], "isRunningThread": [["boolean", "int id"]], "lowerAltitude": [["GeneralMotorConSchedule"]], "hover": [["GeneralMotorConSchedule"]], "spin90Right": [["GeneralMotorConSchedule"]], "cycleRight": [["GeneralMotorConSchedule"]], "backward": [["GeneralMotorConSchedule", "int time"]], "pauseFor": [["void", "int millis"]], "setBatLvl": [["void", "int batLvl"]], "waitFor": [["void", "int millis"]], "getBatLvl": [["int"]], "onStop": [["void"]], "raiseAltitude": [["GeneralMotorConSchedule"]], "cycleLeft": [["GeneralMotorConSchedule"]], "spinRight": [["GeneralMotorConSchedule"]], "getLastMovement": [["int", "int index"]], "newRunningThread": [["int"]], "takeoff": [["GeneralMotorConSchedule"]], "forward": [["GeneralMotorConSchedule", "int time"]], "spinLeft": [["GeneralMotorConSchedule"]], "right": [["GeneralMotorConSchedule"], ["GeneralMotorConSchedule", "int millis"]], "landing": [["void"]], "setDrone": [["void", "ARDrone drone"]], "left": [["GeneralMotorConSchedule"], ["GeneralMotorConSchedule", "int millis"]], "getInstance": [["GeneralMotorConSchedule"]]}, "className": "GeneralMotorConSchedule", "renamed": ["void", "function", "(", "int", "arg0", ")", "{", "recordedMovement", "[", "4", "]", "=", "recordedMovement", "[", "3", "]", ";", "recordedMovement", "[", "3", "]", "=", "recordedMovement", "[", "2", "]", ";", "recordedMovement", "[", "2", "]", "=", "recordedMovement", "[", "1", "]", ";", "recordedMovement", "[", "1", "]", "=", "recordedMovement", "[", "0", "]", ";", "recordedMovement", "[", "0", "]", "=", "arg0", ";", "}"], "nl": "Add Last Movement", "nlToks": ["Add", "Last", "Movement"], "path": "02343Gruppe2/02343_Ardrone/tree/master/src/algo/GeneralMotorConSchedule.java", "idx": 1924}
{"memberVariables": {"mLength": "long", "mBuffer": "ByteBuffer", "mNettyBuf": "ByteBuf"}, "code": ["void", "function", "(", ")", "{", "Preconditions", ".", "checkState", "(", "mNettyBuf", "!=", "null", ")", ";", "Preconditions", ".", "checkState", "(", "mNettyBuf", ".", "refCnt", "(", ")", "==", "1", ",", "\"Reference count of the netty buffer is %s (1 expected).\"", ",", "mNettyBuf", ".", "refCnt", "(", ")", ")", ";", "Preconditions", ".", "checkState", "(", "mNettyBuf", ".", "release", "(", ")", ",", "\"Release Netty ByteBuf failed.\"", ")", ";", "}"], "memberFunctions": {"getReadOnlyByteBuffer": [["ByteBuffer"]], "getLength": [["long"]], "getNettyOutput": [["Object"]]}, "className": "DataNettyBuffer", "renamed": ["void", "function", "(", ")", "{", "Preconditions", ".", "checkState", "(", "mNettyBuf", "!=", "null", ")", ";", "Preconditions", ".", "checkState", "(", "mNettyBuf", ".", "refCnt", "(", ")", "==", "1", ",", "\"srini_string\"", ",", "mNettyBuf", ".", "refCnt", "(", ")", ")", ";", "Preconditions", ".", "checkState", "(", "mNettyBuf", ".", "release", "(", ")", ",", "\"srini_string\"", ")", ";", "}"], "nl": "Release the Netty ByteBuf.", "nlToks": ["Release", "the", "Netty", "ByteBuf", "."], "path": "poemlin/alluxio/tree/master/core/common/src/main/java/alluxio/network/protocol/databuffer/DataNettyBuffer.java", "idx": 1925}
{"memberVariables": {"BLOCK_LENGTH=100L": "long", "TEST_FILENAME=\"test_filename.txt\"": "String", "mEOFBlockStream": "UnderStoreBlockInStream", "mFile": "File", "mBlockStream": "UnderStoreBlockInStream", "FILE_LENGTH=2 * BLOCK_LENGTH": "long", "mFolder=new TemporaryFolder()": "TemporaryFolder"}, "code": ["void", "function", "(", ")", "{", "skipInternal", "(", "mBlockStream", ",", "0", ")", ";", "}"], "memberFunctions": {"singleByteReadInternal": [["void", "UnderStoreBlockInStream inStream", "int startIndex"]], "skipEOF": [["void"]], "seekEOF": [["void"]], "seekInternal": [["void", "UnderStoreBlockInStream inStream", "int startIndex"]], "before": [["void"]], "arrayReadInternal": [["void", "UnderStoreBlockInStream inStream", "int startIndex"]], "arrayFullRead": [["void"]], "seek": [["void"]], "singleByteReadEOF": [["void"]], "arrayFullReadEOF": [["void"]], "skipInternal": [["void", "UnderStoreBlockInStream inStream", "int startIndex"]], "arrayReadEOF": [["void"]], "arrayFullReadInternal": [["void", "UnderStoreBlockInStream inStream", "int startIndex"]], "create": [["InputStream"]], "after": [["void"]], "singleByteRead": [["void"]], "close": [["void"]], "arrayRead": [["void"]]}, "className": "UnderStoreBlockInStreamTest", "renamed": ["void", "function", "(", ")", "{", "skipInternal", "(", "mBlockStream", ",", "0", ")", ";", "}"], "nl": "Tests the  {@link UnderStoreBlockInStream#skip(long)} method for the first block of the file.", "nlToks": ["Tests", "the", "-LCB-", "@link", "UnderStoreBlockInStream", "#skip", "-LRB-", "long", "-RRB-", "-RCB-", "method", "for", "the", "first", "block", "of", "the", "file", "."], "path": "poemlin/alluxio/tree/master/core/client/src/test/java/alluxio/client/block/UnderStoreBlockInStreamTest.java", "idx": 1927}
{"memberVariables": {"preview": "Book", "QUILL_EXTENSION=\".quill\"": "String", "data=new LinkedList<BookPreview>()": "LinkedList<BookPreview>", "instance": "Bookshelf", "TAG=\"BookPreview\"": "String", "TAG=\"Bookshelf\"": "String", "storage": "Storage", "currentBook": "Book", "uuid": "UUID"}, "code": ["BookPreview", "function", "(", "Book", "book", ")", "{", "return", "getPreview", "(", "book", ".", "getUUID", "(", ")", ")", ";", "}"], "memberFunctions": {"compare": [["int", "BookPreview lhs", "BookPreview rhs"]], "backup": [["void"], ["void", "File dir"]], "reloadPreview": [["void", "Book book"]], "backupDescription": [["void", "File dir"]], "setCurrentBook": [["void", "BookPreview nb"], ["void", "BookPreview nb", "boolean saveCurrent"]], "assertNoCurrentBook": [["void"]], "importBook": [["void", "File file"]], "getThumbnail": [["Bitmap", "int width", "int height"]], "deleteBook": [["void", "UUID uuid"]], "exportBook": [["void", "UUID uuid", "File file"]], "getTitle": [["String"]], "reload": [["void"]], "getUUID": [["UUID"]], "getBookshelf": [["Bookshelf"]], "newBook": [["void", "String title"]], "sortBookPreviewList": [["void"]], "getCount": [["int"]], "importBookDirectory": [["void", "File dir", "UUID uuid"]], "getSummary": [["String"]], "getCurrentBookPreview": [["BookPreview"]], "deleteFromStorage": [["void"]], "getCurrentBook": [["Book"]], "getLastModifiedTime": [["Time"]], "getBookPreviewList": [["LinkedList<BookPreview>"]], "exportCurrentBook": [["void", "File file"]], "createFirstNotebook": [["void"]], "finalize": [["void", "Storage storage"]], "initialize": [["void", "Storage storage"]]}, "className": "Bookshelf", "renamed": ["BookPreview", "function", "(", "Book", "arg0", ")", "{", "return", "getPreview", "(", "arg0", ".", "getUUID", "(", ")", ")", ";", "}"], "nl": "Find the stored preview for the given book", "nlToks": ["Find", "the", "stored", "preview", "for", "the", "given", "book"], "path": "praveensubramaniam/android-quill/tree/master/src/com/write/Quill/data/Bookshelf.java", "idx": 1928}
{"memberVariables": {"offsetHours=0": "int", "offsetMinutes=0": "int", "seconds=0.0": "double", "minutes=0": "int", "hour=0": "int", "TIME_PATTERN=\"%02d:%02d:%02d%+03d:%02d\"": "String"}, "code": ["String", "function", "(", ")", "{", "int", "hr", "=", "getHour", "(", ")", ";", "int", "min", "=", "getMinutes", "(", ")", ";", "int", "sec", "=", "(", "int", ")", "Math", ".", "floor", "(", "getSeconds", "(", ")", ")", ";", "int", "tzHr", "=", "getOffsetHours", "(", ")", ";", "int", "tzMin", "=", "getOffsetMinutes", "(", ")", ";", "return", "String", ".", "format", "(", "TIME_PATTERN", ",", "hr", ",", "min", ",", "sec", ",", "tzHr", ",", "tzMin", ")", ";", "}"], "memberFunctions": {"getOffsetHours": [["int"]], "toDate": [["Date", "Date d"]], "setMinutes": [["void", "int minutes"]], "setHour": [["void", "int hour"]], "getMilliseconds": [["long"]], "setOffsetMinutes": [["void", "int minutes"]], "getMinutes": [["int"]], "getSeconds": [["double"]], "hashCode": [["int"]], "setSeconds": [["void", "double seconds"]], "equals": [["boolean", "final Object obj"]], "getOffsetMinutes": [["int"]], "getHour": [["int"]], "toString": [["String"]], "setOffsetHours": [["void", "int hours"]], "setTime": [["void", "Date d"]]}, "className": "Time", "renamed": ["String", "function", "(", ")", "{", "int", "loc0", "=", "getHour", "(", ")", ";", "int", "loc1", "=", "getMinutes", "(", ")", ";", "int", "loc2", "=", "(", "int", ")", "Math", ".", "floor", "(", "getSeconds", "(", ")", ")", ";", "int", "loc3", "=", "getOffsetHours", "(", ")", ";", "int", "loc4", "=", "getOffsetMinutes", "(", ")", ";", "return", "String", ".", "format", "(", "TIME_PATTERN", ",", "loc0", ",", "loc1", ",", "loc2", ",", "loc3", ",", "loc4", ")", ";", "}"], "nl": "Returns the ISO 8601 representation of time (hh:mm:ss+hh:mm).", "nlToks": ["Returns", "the", "ISO", "8601", "representation", "of", "time", "-LRB-", "hh", ":", "mm", ":", "ss", "+", "hh", ":", "mm", "-RRB-", "."], "path": "pkoziol/marine-api/tree/master/src/main/java/net/sf/marineapi/nmea/util/Time.java", "idx": 1929}
{"memberVariables": {"feedId": "String", "testId": "Long", "runId": "Long", "batchId": "Long"}, "code": ["void", "function", "(", "String", "feedId", ")", "{", "this", ".", "feedId", "=", "feedId", ";", "}"], "memberFunctions": {"getBatchId": [["Long"]], "toString": [["String"]], "getRunId": [["Long"]], "getFeedId": [["String"]], "setBatchId": [["void", "Long batchId"]], "setTestId": [["void", "Long testId"]], "getTestId": [["Long"]], "setRunId": [["void", "Long runId"]]}, "className": "FeedTestConfig", "renamed": ["void", "function", "(", "String", "arg0", ")", "{", "this", ".", "feedId", "=", "arg0", ";", "}"], "nl": "Sets the feed id.", "nlToks": ["Sets", "the", "feed", "id", "."], "path": "pkesireddy/portico_fletcher/tree/master/FetcherTesterService/src/main/java/org/ithaka/cm/fetchertester/model/FeedTestConfig.java", "idx": 1930}
{"memberVariables": {"instance": "Date", "cal": "GregorianCalendar"}, "code": ["void", "function", "(", ")", "{", "Object", "str", "=", "new", "String", "(", "\"foobar\"", ")", ";", "Object", "dbl", "=", "new", "Double", "(", "123", ")", ";", "assertFalse", "(", "instance", ".", "equals", "(", "str", ")", ")", ";", "assertFalse", "(", "instance", ".", "equals", "(", "dbl", ")", ")", ";", "}"], "memberFunctions": {"testConstructorWithString": [["void"]], "testSetMonth": [["void"]], "testSetYearThreeDigits": [["void"]], "testConstructor": [["void"]], "testToStringFourDigitYear": [["void"]], "testEqualsAfterInit": [["void"]], "testSetYearTwoDigit": [["void"]], "testEqualsWhenChanged": [["void"]], "testToISO8601WithTime": [["void"]], "setUp": [["void"]], "testGetMonth": [["void"]], "testEqualsItself": [["void"]], "testSetYearNegative": [["void"]], "testConstructorWithValues": [["void"]], "testSetDayOutOfBounds": [["void"]], "testGetYear": [["void"]], "testToISO8601WithTimeAndZeroZone": [["void"]], "testToISO8601FourDigitYear": [["void"]], "testSetDay": [["void"]], "testSetYearFourDigit": [["void"]], "testToStringTwoDigitYear": [["void"]], "testToISO8601WithTimeAndPositiveOffset": [["void"]], "testToISO8601TwoDigitYear": [["void"]], "testSetYearFiveDigits": [["void"]], "testToISO8601WithTimeAndNegativeOffset": [["void"]], "testGetDay": [["void"]], "testSetMonthOutOfBounds": [["void"]]}, "className": "DateTest", "renamed": ["void", "function", "(", ")", "{", "Object", "loc0", "=", "new", "String", "(", "\"srini_string\"", ")", ";", "Object", "loc1", "=", "new", "Double", "(", "123", ")", ";", "assertFalse", "(", "instance", ".", "equals", "(", "loc0", ")", ")", ";", "assertFalse", "(", "instance", ".", "equals", "(", "loc1", ")", ")", ";", "}"], "nl": "Test method for {@link net.sf.marineapi.nmea.util.Date#equals(java.lang.Object)}.", "nlToks": ["Test", "method", "for", "-LCB-", "@link", "net.sf.marineapi.nmea.util.Date", "#equals", "-LRB-", "java.lang.Object", "-RRB-", "-RCB-", "."], "path": "pkoziol/marine-api/tree/master/src/test/java/net/sf/marineapi/nmea/util/DateTest.java", "idx": 1931}
{"memberVariables": {"instances=new HashMap<String,AppInstanceStatus>()": "Map<String,AppInstanceStatus>", "deploymentId": "String", "status": "AppStatus"}, "code": ["AppStatus", "function", "(", ")", "{", "return", "status", ";", "}"], "memberFunctions": {"getInstances": [["Map<String,AppInstanceStatus>"]], "with": [["Builder", "AppInstanceStatus instance"]], "addInstance": [["void", "String id", "AppInstanceStatus status"]], "getState": [["DeploymentState"]], "of": [["Builder", "String id"]], "toString": [["String"]], "getDeploymentId": [["String"]]}, "className": "AppStatus", "renamed": ["AppStatus", "function", "(", ")", "{", "return", "status", ";", "}"], "nl": "Return a new instance of  {@code AppStatus} based onthe provided individual app instances via {@link #with(AppInstanceStatus)}.", "nlToks": ["Return", "a", "new", "instance", "of", "-LCB-", "@code", "AppStatus", "-RCB-", "based", "onthe", "provided", "individual", "app", "instances", "via", "-LCB-", "@link", "#with", "-LRB-", "AppInstanceStatus", "-RRB-", "-RCB-", "."], "path": "pperalta/spring-cloud-deployer/tree/master/spring-cloud-deployer-spi/src/main/java/org/springframework/cloud/deployer/spi/app/AppStatus.java", "idx": 1932}
{"memberVariables": {}, "code": ["void", "function", "(", ")", "{", "final", "ViolationNode", "node1", "=", "createViolationNode", "(", "\"Foo.java\"", ",", "1", ",", "1", ",", "5", ",", "15", ",", "\"\"", ")", ";", "final", "ViolationNode", "node2", "=", "createViolationNode", "(", "\"Bar.java\"", ",", "1", ",", "1", ",", "5", ",", "15", ",", "\"\"", ")", ";", "assertFalse", "(", "\"Two violations with different filename should result in not equal nodes\"", ",", "node1", ".", "equalsNode", "(", "node2", ")", ")", ";", "}"], "memberFunctions": {"testEqualsNodeWithTwoDifferentViolationsDifferentBeginColumn": [["void"]], "testEqualsNodeWithTwoDifferentViolationsDifferentEndColumn": [["void"]], "createViolationNode": [["ViolationNode", "final String filename", "final int beginLine", "final int endLine", "final int beginColumn", "final int endColumn", "final String variableName"]], "testEqualsNodeWithTwoDifferentViolationsDifferentVariableName": [["void"]], "testEqualsNodeWithTwoDifferentViolationsDifferentEndLine": [["void"]], "testEqualsNodeWithTwoDifferentViolationsDifferentBeginLine": [["void"]], "testEqualsNodeWithTwoEqualViolations": [["void"]]}, "className": "ViolationNodeTest", "renamed": ["void", "function", "(", ")", "{", "final", "ViolationNode", "loc0", "=", "createViolationNode", "(", "\"srini_string\"", ",", "1", ",", "1", ",", "5", ",", "15", ",", "\"srini_string\"", ")", ";", "final", "ViolationNode", "loc1", "=", "createViolationNode", "(", "\"srini_string\"", ",", "1", ",", "1", ",", "5", ",", "15", ",", "\"srini_string\"", ")", ";", "assertFalse", "(", "\"srini_string\"", ",", "loc0", ".", "equalsNode", "(", "loc1", ")", ")", ";", "}"], "nl": "Verifies that two violations nodes with different  {@code filename} arenot equal.", "nlToks": ["Verifies", "that", "two", "violations", "nodes", "with", "different", "-LCB-", "@code", "filename", "-RCB-", "arenot", "equal", "."], "path": "adangel/pmd/tree/master/pmd-core/src/test/java/net/sourceforge/pmd/lang/dfa/report/ViolationNodeTest.java", "idx": 1933}
{"memberVariables": {"impl": "DataTypesHelper"}, "code": ["DataTypesHelper", "function", "(", ")", "{", "return", "impl", ";", "}"], "memberFunctions": {"getLanguage": [["String", "Object handle"]], "equalsCHOICEKind": [["boolean", "Object kind"]], "getBody": [["String", "Object handle"]], "equalsDeepHistoryKind": [["boolean", "Object kind"]], "equalsShallowHistoryKind": [["boolean", "Object kind"]], "setBody": [["Object", "Object handle", "String body"]], "equalsFORKKind": [["boolean", "Object kind"]], "equalsJOINKind": [["boolean", "Object kind"]], "equalsINITIALKind": [["boolean", "Object kind"]], "multiplicityToString": [["String", "Object multiplicity"]], "copyTaggedValues": [["void", "Object from", "Object to"]], "equalsJUNCTIONKind": [["boolean", "Object kind"]], "setLanguage": [["Object", "Object handle", "String language"]]}, "className": "AbstractDataTypesHelperDecorator", "renamed": ["DataTypesHelper", "function", "(", ")", "{", "return", "impl", ";", "}"], "nl": "The component we are decorating.", "nlToks": ["The", "component", "we", "are", "decorating", "."], "path": "pichiliani/CoArgoUML/tree/master/v0.24/fonte/src/argouml-core-model/src/org/argouml/model/AbstractDataTypesHelperDecorator.java", "idx": 1935}
{"memberVariables": {"serialVersionUID=423423451942L": "long", "numRows": "int", "numCols": "int"}, "code": ["void", "function", "(", "int", "numRows", ")", "{", "this", ".", "numRows", "=", "numRows", ";", "}"], "memberFunctions": {"getNumRows": [["int"]], "iterator": [["MatrixIterator", "boolean rowMajor", "int minRow", "int minCol", "int maxRow", "int maxCol"]], "getNumCols": [["int"]], "set": [["void", "ReshapeMatrix64F A"]], "setNumCols": [["void", "int numCols"]], "reshape": [["void", "int numRows", "int numCols", "boolean saveValues"], ["void", "int numRows", "int numCols"]]}, "className": "ReshapeMatrix64F", "renamed": ["void", "function", "(", "int", "arg0", ")", "{", "this", ".", "numRows", "=", "arg0", ";", "}"], "nl": "Sets the number of rows.", "nlToks": ["Sets", "the", "number", "of", "rows", "."], "path": "adamaulia/efficient-java-matrix-library/tree/master/src/org/ejml/data/ReshapeMatrix64F.java", "idx": 1936}
{"memberVariables": {"lastModifiedTimeStamp": "Timestamp", "fetcherStartTimestamp": "Timestamp", "createTimeStamp": "Timestamp", "serialVersionUID=1L": "long", "batchId": "BigDecimal", "errorMsg": "String", "outcomeType": "OutcomeType", "createdBy": "String", "feedId": "BigDecimal", "testId": "long", "runId": "BigDecimal", "fetcherEndTimeStamp": "Timestamp", "regPclTestResultDetails": "List<RegPCLTestResultDetailsEntity>", "runStatus": "RunStatusType"}, "code": ["void", "function", "(", "String", "errorMsg", ")", "{", "this", ".", "errorMsg", "=", "errorMsg", ";", "}"], "memberFunctions": {"setLastModifiedTimeStamp": [["void", "Timestamp lastModifiedTimeStamp"]], "setFeedId": [["void", "BigDecimal feedId"]], "setFetcherStartTimestamp": [["void", "Timestamp fetcherStartTimestamp"]], "getOutcomeType": [["OutcomeType"]], "updateLastModifiedTimeStamp": [["void"]], "updateCreateTimeStamp": [["void"]], "getRunId": [["BigDecimal"]], "setBatchId": [["void", "BigDecimal batchId"]], "getRegPclTestResultDetails": [["List<RegPCLTestResultDetailsEntity>"]], "setTestId": [["void", "long testId"]], "getTestId": [["long"]], "removeRegPclTestResultDetail": [["RegPCLTestResultDetailsEntity", "RegPCLTestResultDetailsEntity regPclTestResultDetail"]], "setRegPclTestResultDetails": [["void", "List<RegPCLTestResultDetailsEntity> regPclTestResultDetails"]], "getRunStatus": [["RunStatusType"]], "addRegPclTestResultDetail": [["RegPCLTestResultDetailsEntity", "RegPCLTestResultDetailsEntity regPclTestResultDetail"]], "getErrorMsg": [["String"]], "setRunStatus": [["void", "RunStatusType runStatus"]], "getFetcherEndTimeStamp": [["Timestamp"]], "getLastModifiedTimeStamp": [["Timestamp"]], "getFeedId": [["BigDecimal"]], "setRunId": [["void", "BigDecimal runId"]], "getFetcherStartTimestamp": [["Timestamp"]], "setFetcherEndTimeStamp": [["void", "Timestamp fetcherEndTimeStamp"]], "setCreateTimeStamp": [["void", "Timestamp createTimeStamp"]], "setCreatedBy": [["void", "String createdBy"]], "getCreateTimeStamp": [["Timestamp"]], "getBatchId": [["BigDecimal"]], "setOutcomeType": [["void", "OutcomeType outcomeType"]], "getCreatedBy": [["String"]]}, "className": "RegPCLTestResultEntity", "renamed": ["void", "function", "(", "String", "arg0", ")", "{", "this", ".", "errorMsg", "=", "arg0", ";", "}"], "nl": "Sets the exp msg.", "nlToks": ["Sets", "the", "exp", "msg", "."], "path": "pkesireddy/portico_fletcher/tree/master/FetcherTesterService/src/main/java/org/ithaka/cm/fetchertester/entity/RegPCLTestResultEntity.java", "idx": 1937}
{"memberVariables": {"ALPHANUM=\"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\"": "String", "RANDOM=new Random()": "Random", "LOG=LoggerFactory.getLogger(Constants.LOGGER_TYPE)": "Logger"}, "code": ["void", "function", "(", ")", "{", "for", "(", "int", "k", "=", "0", ";", "k", "<", "10000000", ";", "k", "++", ")", "{", "}", "}"], "memberFunctions": {"createNewClassInstance": [["T", "Class<T> cls", "Class<?>[] ctorClassArgs", "Object[] ctorArgs"]], "isUfsObjectStorage": [["boolean", "String ufsAddress"]], "listToString": [["String", "List<T> list"]], "randomString": [["String", "int length"]], "argsToString": [["String", "String separator", "T... args"]], "sleepMs": [["void", "long timeMs"], ["void", "Logger logger", "long timeMs"]], "stripPrefixIfPresent": [["String", "final String key", "final String prefix"]], "toStringArray": [["String[]", "ArrayList<String> src"]], "getUnixGroups": [["List<String>", "String user"]], "getCurrentMs": [["long"]], "getPrimaryGroupName": [["String", "String userName"]], "stripSuffixIfPresent": [["String", "final String key", "final String suffix"]], "getValueFromStaticMapping": [["String", "String mapping", "String key"]], "waitFor": [["void", "String description", "Function<Void,Boolean> condition", "int timeoutMs"]], "getGroups": [["List<String>", "String userName"]], "randomBytes": [["byte[]", "int length"]]}, "className": "CommonUtils", "renamed": ["void", "function", "(", ")", "{", "for", "(", "int", "loc0", "=", "0", ";", "loc0", "<", "10000000", ";", "loc0", "++", ")", "{", "}", "}"], "nl": "Common empty loop utility that serves the purpose of warming up the JVM before performance microbenchmarks.", "nlToks": ["Common", "empty", "loop", "utility", "that", "serves", "the", "purpose", "of", "warming", "up", "the", "JVM", "before", "performance", "microbenchmarks", "."], "path": "poemlin/alluxio/tree/master/core/common/src/main/java/alluxio/util/CommonUtils.java", "idx": 1941}
{"memberVariables": {"LOG=Logger.getLogger(Translator.class)": "Logger", "systemDefaultLocale": "Locale", "BUNDLES_PATH=\"org.argouml.i18n\"": "String", "bundles": "Map<String,ResourceBundle>", "classLoaders=new ArrayList<ClassLoader>()": "List<ClassLoader>", "initialized": "boolean"}, "code": ["Locale", "[", "]", "function", "(", ")", "{", "return", "new", "Locale", "[", "]", "{", "Locale", ".", "ENGLISH", ",", "Locale", ".", "FRENCH", ",", "new", "Locale", "(", "\"es\"", ",", "\"\"", ")", ",", "Locale", ".", "GERMAN", ",", "Locale", ".", "ITALIAN", ",", "new", "Locale", "(", "\"nb\"", ",", "\"\"", ")", ",", "new", "Locale", "(", "\"pt\"", ",", "\"\"", ")", ",", "new", "Locale", "(", "\"ru\"", ",", "\"\"", ")", ",", "Locale", ".", "CHINESE", ",", "Locale", ".", "UK", "}", ";", "}"], "memberFunctions": {"initInternal": [["void", "String s"]], "init": [["void"], ["void", "String locale"]], "localize": [["String", "String key", "Object[] args"], ["String", "String key"]], "getName": [["String", "String key"]], "initForEclipse": [["void"], ["void", "String locale"]], "addClassLoader": [["void", "ClassLoader cl"]], "loadBundle": [["void", "String name"]], "messageFormat": [["String", "String key", "Object[] args"]], "getSystemDefaultLocale": [["Locale"]], "setLocale": [["void", "String name"], ["void", "Locale locale"]]}, "className": "Translator", "renamed": ["Locale", "[", "]", "function", "(", ")", "{", "return", "new", "Locale", "[", "]", "{", "Locale", ".", "ENGLISH", ",", "Locale", ".", "FRENCH", ",", "new", "Locale", "(", "\"srini_string\"", ",", "\"srini_string\"", ")", ",", "Locale", ".", "GERMAN", ",", "Locale", ".", "ITALIAN", ",", "new", "Locale", "(", "\"srini_string\"", ",", "\"srini_string\"", ")", ",", "new", "Locale", "(", "\"srini_string\"", ",", "\"srini_string\"", ")", ",", "new", "Locale", "(", "\"srini_string\"", ",", "\"srini_string\"", ")", ",", "Locale", ".", "CHINESE", ",", "Locale", ".", "UK", "}", ";", "}"], "nl": "For Locale selection. TODO: Detect the available locales from the available files.", "nlToks": ["For", "Locale", "selection", ".", "TODO", ":", "Detect", "the", "available", "locales", "from", "the", "available", "files", "."], "path": "pichiliani/CoArgoUML/tree/master/v0.24/fonte/src/argouml-app/src/org/argouml/i18n/Translator.java", "idx": 1942}
{"memberVariables": {"DEFAULT_LOCK_TIMEOUT=\"oozie.command.default.lock.timeout\"": "String", "LOG=XLog.getLog(XCommand.class)": "XLog", "dryrun=false": "boolean", "logInfo": "XLog.Info", "priority": "int", "type": "String", "commandQueue": "Map<Long,List<XCommand<?>>>", "used=false": "boolean", "name": "String", "createdTime": "long", "lock": "MemoryLocks.LockToken", "INSTRUMENTATION_GROUP=\"commands\"": "String", "instrumentation": "Instrumentation"}, "code": ["Instrumentation", "function", "(", ")", "{", "return", "instrumentation", ";", "}"], "memberFunctions": {"loadState": [["void"]], "getName": [["String"]], "getLockTimeOut": [["long"]], "releaseLock": [["void"]], "eagerVerifyPrecondition": [["void"]], "execute": [["T"]], "resetUsed": [["void"]], "getEntityKey": [["String"]], "call": [["T"]], "verifyPrecondition": [["void"]], "isLockRequired": [["boolean"]], "getType": [["String"]], "acquireLock": [["void"]], "getPriority": [["int"]], "eagerLoadState": [["void"]], "getCreatedTime": [["long"]], "queue": [["void", "XCommand<?> command"], ["void", "XCommand<?> command", "long msDelay"]]}, "className": "XCommand", "renamed": ["Instrumentation", "function", "(", ")", "{", "return", "instrumentation", ";", "}"], "nl": "Return the  {@link Instrumentation} instance in use.", "nlToks": ["Return", "the", "-LCB-", "@link", "Instrumentation", "-RCB-", "instance", "in", "use", "."], "path": "pingpangkuangmo/oozie/tree/master/core/src/main/java/org/apache/oozie/command/XCommand.java", "idx": 1944}
{"memberVariables": {"lastMark=System.currentTimeMillis()": "long"}, "code": ["int", "function", "(", ")", "{", "return", "(", "int", ")", "(", "System", ".", "currentTimeMillis", "(", ")", "-", "lastMark", ")", ";", "}"], "memberFunctions": {"mark": [["void"]]}, "className": "SimpleTimer", "renamed": ["int", "function", "(", ")", "{", "return", "(", "int", ")", "(", "System", ".", "currentTimeMillis", "(", ")", "-", "lastMark", ")", ";", "}"], "nl": "Returns the amount of milliseconds that have elapsed since mark() was last called.  This timer runs irrespective of Greenfoot's act() cycle, so if you call it many times during the same Greenfoot frame, you may well get different answers.", "nlToks": ["Returns", "the", "amount", "of", "milliseconds", "that", "have", "elapsed", "since", "mark", "-LRB-", "-RRB-", "was", "last", "called", ".", "This", "timer", "runs", "irrespective", "of", "Greenfoot", "'s", "act", "-LRB-", "-RRB-", "cycle", ",", "so", "if", "you", "call", "it", "many", "times", "during", "the", "same", "Greenfoot", "frame", ",", "you", "may", "well", "get", "different", "answers", "."], "path": "ppoo14152/Browsing/tree/master/Proyecto/Browsing/Proyecto/SimpleTimer.java", "idx": 1945}
{"memberVariables": {"pclFeedId": "String", "errorCode": "String", "regFeedId": "String", "errorMsg": "String"}, "code": ["String", "function", "(", ")", "{", "return", "pclFeedId", ";", "}"], "memberFunctions": {"setErrorMsg": [["void", "String errorMsg"]], "getErrorCode": [["String"]], "getRegFeedId": [["String"]], "setPclFeedId": [["void", "String pclFeedId"]], "toString": [["String"]], "setErrorCode": [["void", "String errorCode"]], "setRegFeedId": [["void", "String regFeedId"]], "getErrorMsg": [["String"]]}, "className": "ConfigSetUpDTO", "renamed": ["String", "function", "(", ")", "{", "return", "pclFeedId", ";", "}"], "nl": "Gets the pcl feed id.", "nlToks": ["Gets", "the", "pcl", "feed", "id", "."], "path": "pkesireddy/portico_fletcher/tree/master/FetcherTesterService/src/main/java/org/ithaka/cm/fetchertester/model/ConfigSetUpDTO.java", "idx": 1946}
{"memberVariables": {"elem2": "String", "elem1": "String", "elem3": "int"}, "code": ["int", "function", "(", ")", "{", "return", "elem3", ";", "}"], "memberFunctions": {"getElem2": [["String"]], "getElem1": [["String"]], "setElem2": [["void", "String value"]], "setElem1": [["void", "String value"]], "setElem3": [["void", "int value"]]}, "className": "MyComplexStruct", "renamed": ["int", "function", "(", ")", "{", "return", "elem3", ";", "}"], "nl": "Gets the value of the elem3 property.", "nlToks": ["Gets", "the", "value", "of", "the", "elem3", "property", "."], "path": "primesign/cxf/tree/master/rt/bindings/soap/src/test/java/org/apache/cxf/binding/soap/MyComplexStruct.java", "idx": 1948}
{"memberVariables": {"CHILD_AXIS=1": "int", "HOVER_PSEUDOCLASS=4": "int", "selectorID": "int", "siblingSelector=null": "Selector", "_name": "String", "_axis": "int", "FOCUS_PSEUDOCLASS=16": "int", "_pc=0": "int", "ACTIVE_PSEUDOCLASS=8": "int", "selectorCount=0": "int", "DESCENDANT_AXIS=0": "int", "VISITED_PSEUDOCLASS=2": "int", "_parent": "Ruleset", "IMMEDIATE_SIBLING_AXIS=2": "int", "_specificityD": "int", "_pe": "String", "_specificityC": "int", "_specificityB": "int", "chainedSelector=null": "Selector", "_pos": "int", "_namespaceURI": "String", "conditions": "java.util.List"}, "code": ["String", "function", "(", ")", "{", "return", "\"1\"", "+", "\"000\"", "+", "\"000\"", "+", "\"000\"", "+", "\"00000\"", ";", "}"], "memberFunctions": {"setName": [["void", "String name"]], "addClassCondition": [["void", "String className"]], "addAttributeSubstringCondition": [["void", "String namespaceURI", "String name", "String value"]], "addNthChildCondition": [["void", "String number"]], "setPseudoElement": [["void", "String pseudoElement"]], "addAttributeMatchesListCondition": [["void", "String namespaceURI", "String name", "String value"]], "addAttributeEqualsCondition": [["void", "String namespaceURI", "String name", "String value"]], "addCondition": [["void", "Condition c"]], "addEvenChildCondition": [["void"]], "addIDCondition": [["void", "String id"]], "addAttributePrefixCondition": [["void", "String namespaceURI", "String name", "String value"]], "setPos": [["void", "int pos"]], "addLinkCondition": [["void"]], "addLastChildCondition": [["void"]], "matchesDynamic": [["boolean", "Object e", "AttributeResolver attRes", "TreeResolver treeRes"]], "addLangCondition": [["void", "String lang"]], "setChainedSelector": [["void", "Selector selector"]], "setNamespaceURI": [["void", "String namespaceURI"]], "getSpecificityD": [["int"]], "addUnsupportedCondition": [["void"]], "getSpecificityC": [["int"]], "getChainedSelector": [["Selector"]], "getSpecificityB": [["int"]], "setParent": [["void", "Ruleset ruleset"]], "addAttributeExistsCondition": [["void", "String namespaceURI", "String name"]], "addFirstChildCondition": [["void"]], "setSiblingSelector": [["void", "Selector selector"]], "addAttributeSuffixCondition": [["void", "String namespaceURI", "String name", "String value"]], "getSelectorID": [["int"]], "getAxis": [["int"]], "setAxis": [["void", "int axis"]], "addAttributeMatchesFirstPartCondition": [["void", "String namespaceURI", "String name", "String value"]], "getPseudoElement": [["String"]], "getRuleset": [["Ruleset"]], "matches": [["boolean", "Object e", "AttributeResolver attRes", "TreeResolver treeRes"]], "addOddChildCondition": [["void"]], "setPseudoClass": [["void", "int pc"]], "isPseudoClass": [["boolean", "int pc"]], "getOrder": [["String"]], "getAppropriateSibling": [["Object", "Object e", "TreeResolver treeRes"]], "setSpecificityB": [["void", "int b"]], "setSpecificityC": [["void", "int c"]], "setSpecificityD": [["void", "int d"]]}, "className": "Selector", "renamed": ["String", "function", "(", ")", "{", "return", "\"srini_string\"", "+", "\"srini_string\"", "+", "\"srini_string\"", "+", "\"srini_string\"", "+", "\"srini_string\"", ";", "}"], "nl": "Gets the elementStylingOrder attribute of the Selector class", "nlToks": ["Gets", "the", "elementStylingOrder", "attribute", "of", "the", "Selector", "class"], "path": "plutogeek/flyingsaucer/tree/master/flying-saucer-core/src/main/java/org/xhtmlrenderer/css/newmatch/Selector.java", "idx": 1949}
{"memberVariables": {"head": "Node"}, "code": ["void", "function", "(", ")", "{", "head", "=", "reverse", "(", "head", ")", ";", "}"], "memberFunctions": {"add": [["void", "int num"]], "removeAllNodes": [["void", "int key"]], "print": [["void"]], "getHead": [["Node"]], "printKthFromLast": [["void"], ["int", "Node head"]], "initialize": [["void", "int[] nodes"]], "removeDuplicate": [["void"]], "reverse": [["void"], ["Node", "Node head"]], "arrangeEvenOddPosition": [["void"]], "remove": [["void", "int position"]], "removeNode": [["void", "int key"]], "swapeParis": [["void"]]}, "className": "MyLinkedList", "renamed": ["void", "function", "(", ")", "{", "head", "=", "reverse", "(", "head", ")", ";", "}"], "nl": "reverse linked list recursive", "nlToks": ["reverse", "linked", "list", "recursive"], "path": "prakashthelight/my-eclipse-workspace/tree/master/console-app/src/com/samples/utils/MyLinkedList.java", "idx": 1950}
{"memberVariables": {}, "code": ["OpenFileOptions", "function", "(", "CreateFileOptions", "op", ")", "{", "if", "(", "op", ".", "getAlluxioStorageType", "(", ")", ".", "isStore", "(", ")", ")", "{", "return", "OpenFileOptions", ".", "defaults", "(", ")", ".", "setReadType", "(", "ReadType", ".", "CACHE", ")", ";", "}", "return", "OpenFileOptions", ".", "defaults", "(", ")", ".", "setReadType", "(", "ReadType", ".", "NO_CACHE", ")", ";", "}"], "memberFunctions": {"createByteFile": [["void", "FileSystem fs", "String fileName", "int len", "CreateFileOptions options"], ["void", "FileSystem fs", "String fileName", "WriteType writeType", "int len"], ["void", "FileSystem fs", "AlluxioURI fileURI", "WriteType writeType", "int len"], ["void", "FileSystem fs", "AlluxioURI fileURI", "CreateFileOptions options", "int len"], ["void", "FileSystem fs", "String fileName", "WriteType writeType", "int len", "long blockCapacityByte"]], "listFiles": [["List<String>", "FileSystem fs", "String path"]]}, "className": "FileSystemTestUtils", "renamed": ["OpenFileOptions", "function", "(", "CreateFileOptions", "arg0", ")", "{", "if", "(", "arg0", ".", "getAlluxioStorageType", "(", ")", ".", "isStore", "(", ")", ")", "{", "return", "OpenFileOptions", ".", "defaults", "(", ")", ".", "setReadType", "(", "ReadType", ".", "CACHE", ")", ";", "}", "return", "OpenFileOptions", ".", "defaults", "(", ")", ".", "setReadType", "(", "ReadType", ".", "NO_CACHE", ")", ";", "}"], "nl": "Converts a  {@link CreateFileOptions} object to an {@link OpenFileOptions} object with amatching Alluxio storage type.", "nlToks": ["Converts", "a", "-LCB-", "@link", "CreateFileOptions", "-RCB-", "object", "to", "an", "-LCB-", "@link", "OpenFileOptions", "-RCB-", "object", "with", "amatching", "Alluxio", "storage", "type", "."], "path": "poemlin/alluxio/tree/master/core/client/src/main/java/alluxio/client/FileSystemTestUtils.java", "idx": 1951}
{"memberVariables": {"m_EncryptedKeyElement=null": "EncryptedKeyElement", "m_KeyInfoEl=null": "Element", "LOG=Logger.getLogger(KeyInfoElement.class)": "Logger"}, "code": ["Element", "function", "(", ")", "{", "return", "m_KeyInfoEl", ";", "}"], "memberFunctions": {"getEncryptedKeyElement": [["EncryptedKeyElement"]]}, "className": "KeyInfoElement", "renamed": ["Element", "function", "(", ")", "{", "return", "m_KeyInfoEl", ";", "}"], "nl": "Get KeyInfo element of an encrypted element.", "nlToks": ["Get", "KeyInfo", "element", "of", "an", "encrypted", "element", "."], "path": "0xwindows/WS-Attacker/tree/master/libs/XML_Encryption_Attack_Library/src/main/java/wsattacker/library/xmlencryptionattack/encryptedelements/key/KeyInfoElement.java", "idx": 1954}
{"memberVariables": {}, "code": ["void", "function", "(", "AddressingProperties", "maps", ",", "Message", "message", ",", "boolean", "isOutbound", ",", "boolean", "isRequestor", ")", "{", "org", ".", "apache", ".", "cxf", ".", "ws", ".", "addressing", ".", "ContextUtils", ".", "storeMAPs", "(", "maps", ",", "message", ",", "isOutbound", ",", "isRequestor", ")", ";", "}"], "memberFunctions": {"retrieveRMProperties": [["RMProperties", "Message message", "boolean outbound"]], "storeRMProperties": [["void", "Message message", "RMProperties rmps", "boolean outbound"]], "isServerSide": [["boolean", "Message message"]], "getProtocolVariation": [["ProtocolVariation", "Message message"]], "setProtocolVariation": [["void", "Message message", "ProtocolVariation protocol"]], "getRMPropertiesKey": [["String", "boolean outbound"]], "retrieveMAPs": [["AddressingProperties", "Message message", "boolean isProviderContext", "boolean isOutbound"]], "isRMProtocolMessage": [["boolean", "String action"]], "generateUUID": [["String"]]}, "className": "RMContextUtils", "renamed": ["void", "function", "(", "AddressingProperties", "arg0", ",", "Message", "arg1", ",", "boolean", "arg2", ",", "boolean", "arg3", ")", "{", "org", ".", "apache", ".", "cxf", ".", "ws", ".", "addressing", ".", "ContextUtils", ".", "storeMAPs", "(", "arg0", ",", "arg1", ",", "arg2", ",", "arg3", ")", ";", "}"], "nl": "Store MAPs in the message.", "nlToks": ["Store", "MAPs", "in", "the", "message", "."], "path": "primesign/cxf/tree/master/rt/ws/rm/src/main/java/org/apache/cxf/ws/rm/RMContextUtils.java", "idx": 1955}
{"memberVariables": {"WEBSOCKET_PROXY_URL_FORMAT=\"ws://%s/debugger-proxy\"": "String", "RELOAD_APP_ACTION_SUFFIX=\".RELOAD_APP_ACTION\"": "String", "BUNDLE_URL_FORMAT=\"http://%s/%s.bundle?platform=android&dev=%s\"": "String", "RELOAD_APP_EXTRA_JS_PROXY=\"jsproxy\"": "String", "mClient": "OkHttpClient", "GENYMOTION_LOCALHOST=\"10.0.3.2:8081\"": "String", "EMULATOR_LOCALHOST=\"10.0.2.2:8081\"": "String", "DEVICE_LOCALHOST=\"localhost:8081\"": "String", "mOnChangePollingClient": "OkHttpClient", "PACKAGER_OK_STATUS=\"packager-status:running\"": "String", "LONG_POLL_KEEP_ALIVE_DURATION_MS=2 * 60 * 1000": "int", "mRestartOnChangePollingHandler": "Handler", "mSettings": "DevInternalSettings", "HTTP_CONNECT_TIMEOUT_MS=5000": "int", "mOnChangePollingEnabled": "boolean", "LONG_POLL_FAILURE_DELAY_MS=5000": "int", "mOnServerContentChangeListener": "OnServerContentChangeListener", "LAUNCH_CHROME_DEVTOOLS_COMMAND_URL_FORMAT=\"http://%s/launch-chrome-devtools\"": "String", "PACKAGER_STATUS_URL_FORMAT=\"http://%s/status\"": "String", "ONCHANGE_ENDPOINT_URL_FORMAT=\"http://%s/onchange\"": "String", "SOURCE_MAP_URL_FORMAT=BUNDLE_URL_FORMAT.replaceFirst(\"\\\\.bundle\",\".map\")": "String"}, "code": ["String", "function", "(", "Context", "context", ")", "{", "return", "context", ".", "getPackageName", "(", ")", "+", "RELOAD_APP_ACTION_SUFFIX", ";", "}"], "memberFunctions": {"launchChromeDevtools": [["void"]], "getDebugServerHost": [["String"]], "isRunningOnStockEmulator": [["boolean"]], "createLaunchChromeDevtoolsCommandUrl": [["String"]], "onFailure": [["void", "Exception cause"]], "getSourceMapUrl": [["String", "String mainModuleName"]], "createBundleURL": [["String", "String host", "String jsModulePath", "boolean devMode"]], "isRunningOnGenymotion": [["boolean"]], "stopPollingOnChangeEndpoint": [["void"]], "getSourceUrl": [["String", "String mainModuleName"]], "downloadBundleFromURL": [["void", "final BundleDownloadCallback callback", "final String jsModulePath", "final File outputFile"]], "isPackagerRunning": [["void", "final PackagerStatusCallback callback"]], "handleOnChangePollingResponse": [["void", "boolean didServerContentChanged"]], "onPackagerStatusFetched": [["void", "boolean packagerIsRunning"]], "onServerContentChanged": [["void"]], "getHostForJSProxy": [["String"]], "getDevMode": [["boolean"]], "createOnChangeEndpointUrl": [["String"]], "getWebsocketProxyURL": [["String"]], "startPollingOnChangeEndpoint": [["void", "OnServerContentChangeListener onServerContentChangeListener"]], "createPackagerStatusURL": [["String", "String host"]], "getJSBundleURLForRemoteDebugging": [["String", "String mainModuleName"]], "onSuccess": [["void"]], "enqueueOnChangeEndpointLongPolling": [["void"]]}, "className": "DevServerHelper", "renamed": ["String", "function", "(", "Context", "arg0", ")", "{", "return", "arg0", ".", "getPackageName", "(", ")", "+", "RELOAD_APP_ACTION_SUFFIX", ";", "}"], "nl": "Intent action for reloading the JS", "nlToks": ["Intent", "action", "for", "reloading", "the", "JS"], "path": "plrthink/react-native/tree/master/ReactAndroid/src/main/java/com/facebook/react/devsupport/DevServerHelper.java", "idx": 1958}
{"memberVariables": {}, "code": ["void", "function", "(", ")", "{", "String", "stringReturn", "=", "RequestInput", ".", "getString", "(", "\"enter abc, 123 or exit to exit or else will continue in a loop\"", ",", "\"abc\"", ",", "\"123\"", ",", "\"exit\"", ")", ";", "System", ".", "out", ".", "println", "(", "\"Your return string is \"", "+", "stringReturn", ")", ";", "}"], "memberFunctions": {"testGetCharString": [["void"]], "testAddStringElement": [["void"]], "testGetCharStringCharArray": [["void"]], "testGetDouble": [["void"]], "testGetBoolean": [["void"]], "testGetIntStringIntInt": [["void"]], "testGetIntString": [["void"]]}, "className": "RequestInputTest", "renamed": ["void", "function", "(", ")", "{", "String", "loc0", "=", "RequestInput", ".", "getString", "(", "\"srini_string\"", ",", "\"srini_string\"", ",", "\"srini_string\"", ",", "\"srini_string\"", ")", ";", "System", ".", "out", ".", "println", "(", "\"srini_string\"", "+", "loc0", ")", ";", "}"], "nl": "Test method for {@link com.sqa.em.util.helper.RequestInput#getString(java.lang.String,java.lang.String[])}.", "nlToks": ["Test", "method", "for", "-LCB-", "@link", "com.sqa.em.util.helper.RequestInput", "#getString", "-LRB-", "java.lang.String", ",", "java.lang.String", "-LSB-", "-RSB-", "-RRB-", "-RCB-", "."], "path": "100101Ed/mavne-play/tree/master/src/test/java/com/sqa/em/RequestInputTest.java", "idx": 1959}
{"memberVariables": {"WORKFLOW=\"oozie.el.workflow.bean\"": "String", "ACTION_TRACKER_URI=\"action.tracker.uri\"": "String", "LAST_ACTION_IN_ERROR=\"oozie.el.last.action.in.error\"": "String", "ACTION_PROTO_CONF=\"oozie.el.action.proto.conf\"": "String", "ACTION_DATA=\"action.data\"": "String", "ACTION_EXTERNAL_STATUS=\"action.external.status\"": "String", "ACTION_ERROR_CODE=\"action.error.code\"": "String", "ACTION_EXTERNAL_ID=\"action.external.id\"": "String", "ACTION=\"oozie.el.action.bean\"": "String", "ACTION_ERROR_MESSAGE=\"action.error.message\"": "String"}, "code": ["String", "function", "(", ")", "{", "return", "getWorkflow", "(", ")", ".", "getGroup", "(", ")", ";", "}"], "memberFunctions": {"wf_run": [["int"]], "getWorkflow": [["WorkflowJobBean"]], "getActionVar": [["String", "String actionName", "String varName"]], "wf_callback": [["String", "String externalStatusVar"]], "setActionInfo": [["void", "WorkflowInstance workflowInstance", "WorkflowAction action"]], "wf_conf": [["String", "String property"]], "wf_actionExternalStatus": [["String", "String actionName"]], "getAction": [["WorkflowActionBean"]], "wf_actionExternalId": [["String", "String actionName"]], "getProtoActionConf": [["Configuration"]], "wf_transition": [["String", "String actionName"]], "wf_lastErrorNode": [["String"]], "wf_appPath": [["String"]], "wf_errorCode": [["String", "String actionName"]], "configureEvaluator": [["void", "ELEvaluator evaluator", "WorkflowJobBean workflow", "WorkflowActionBean action"]], "wf_id": [["String"]], "wf_actionTrackerUri": [["String", "String actionName"]], "wf_actionData": [["Map<String,String>", "String actionName"]], "wf_name": [["String"]], "wf_errorMessage": [["String", "String actionName"]], "wf_user": [["String"]]}, "className": "DagELFunctions", "renamed": ["String", "function", "(", ")", "{", "return", "getWorkflow", "(", ")", ".", "getGroup", "(", ")", ";", "}"], "nl": "Return the job owner group name.", "nlToks": ["Return", "the", "job", "owner", "group", "name", "."], "path": "pingpangkuangmo/oozie/tree/master/core/src/main/java/org/apache/oozie/DagELFunctions.java", "idx": 1960}
{"memberVariables": {"fail": "String", "pass": "String", "moduleName": "String", "noRun": "String", "ID": "int", "value": "String", "totalTC": "String"}, "code": ["void", "function", "(", "String", "value", ")", "{", "this", ".", "moduleName", "=", "value", ";", "}"], "memberFunctions": {"getPass": [["String"]], "setNoRun": [["void", "String value"]], "getTotalTC": [["String"]], "getID": [["int"]], "setFail": [["void", "String value"]], "getFail": [["String"]], "getNoRun": [["String"]], "compareTo": [["int", "Module o"]], "getModuleName": [["String"]], "getValue": [["String"]], "setValue": [["void", "String value"]], "setID": [["void", "int iD"]], "setTotalTC": [["void", "String value"]], "setPass": [["void", "String value"]]}, "className": "Module", "renamed": ["void", "function", "(", "String", "arg0", ")", "{", "this", ".", "moduleName", "=", "arg0", ";", "}"], "nl": "Sets the value of the moduleName property.", "nlToks": ["Sets", "the", "value", "of", "the", "moduleName", "property", "."], "path": "prabalbsws/selenium_automation/tree/master/src/newpojo/Module.java", "idx": 1961}
{"memberVariables": {"_freeStack": "AtomicReferenceArray<T>", "_top=new AtomicInteger()": "AtomicInteger"}, "code": ["void", "function", "(", "T", "obj", ")", "{", "if", "(", "checkDuplicate", "(", "obj", ")", ")", "{", "throw", "new", "IllegalStateException", "(", "\"tried to free object twice: \"", "+", "obj", ")", ";", "}", "free", "(", "obj", ")", ";", "}"], "memberFunctions": {"allowFree": [["boolean", "T obj"]], "allocate": [["T"]], "checkDuplicate": [["boolean", "T obj"]], "free": [["boolean", "T obj"]]}, "className": "HessianFreeList", "renamed": ["void", "function", "(", "T", "arg0", ")", "{", "if", "(", "checkDuplicate", "(", "arg0", ")", ")", "{", "throw", "new", "IllegalStateException", "(", "\"srini_string\"", "+", "arg0", ")", ";", "}", "free", "(", "arg0", ")", ";", "}"], "nl": "Frees the object.  If the free list is full, the object will be garbage collected.", "nlToks": ["Frees", "the", "object", ".", "If", "the", "free", "list", "is", "full", ",", "the", "object", "will", "be", "garbage", "collected", "."], "path": "007slm/citrus/tree/master/common/hessian/src/main/java/com/alibaba/citrus/hessian/util/HessianFreeList.java", "idx": 1962}
{"memberVariables": {"headers": "Map<String,Object>", "body[]": "byte", "deliveryTag": "long", "replyTo": "String", "contentEncoding": "String", "messageId": "String", "correlationId": "String", "soapAction": "String", "contentType": "String"}, "code": ["void", "function", "(", "String", "correlationId", ")", "{", "this", ".", "correlationId", "=", "correlationId", ";", "}"], "memberFunctions": {"getCorrelationId": [["String"]], "getContentEncoding": [["String"]], "setHeaders": [["void", "Map<String,Object> headers"]], "getHeaders": [["Map<String,Object>"]], "getBody": [["byte[]"]], "getReplyTo": [["String"]], "setContentEncoding": [["void", "String contentEncoding"]], "getDeliveryTag": [["long"]], "setMessageId": [["void", "String messageId"]], "setSoapAction": [["void", "String soapAction"]], "setBody": [["void", "byte[] body"]], "getMessageId": [["String"]], "setReplyTo": [["void", "String replyTo"]], "setDeliveryTag": [["void", "long deliveryTag"]], "getContentType": [["String"]], "setContentType": [["void", "String contentType"]], "getSoapAction": [["String"]]}, "className": "RabbitMQMessage", "renamed": ["void", "function", "(", "String", "arg0", ")", "{", "this", ".", "correlationId", "=", "arg0", ";", "}"], "nl": "Set correlation id of the message", "nlToks": ["Set", "correlation", "id", "of", "the", "message"], "path": "harsha89/wso2-axis2-transports/tree/master/modules/rabbitmq/src/main/java/org/apache/axis2/transport/rabbitmq/RabbitMQMessage.java", "idx": 1964}
{"memberVariables": {"sSEPARATOR=0x00": "byte", "mThrown=ExpectedException.none()": "ExpectedException", "mPlainSaslServer=null": "PlainSaslServer"}, "code": ["void", "function", "(", ")", "{", "String", "testUser", "=", "\"alluxio\"", ";", "String", "password", "=", "\"anonymous\"", ";", "mPlainSaslServer", ".", "evaluateResponse", "(", "getUserInfo", "(", "testUser", ",", "password", ")", ")", ";", "Assert", ".", "assertEquals", "(", "testUser", ",", "mPlainSaslServer", ".", "getAuthorizationID", "(", ")", ")", ";", "}"], "memberFunctions": {"authenticationNotComplete": [["void"]], "unauthorizedCallback": [["void"]], "before": [["void"]], "passwordIsNotSet": [["void"]], "userIsNotSet": [["void"]], "handle": [["void", "Callback[] callbacks"], ["void", "Callback[] callbacks"]], "getUserInfo": [["byte[]", "String user", "String password"]]}, "className": "PlainSaslServerTest", "renamed": ["void", "function", "(", ")", "{", "String", "loc0", "=", "\"srini_string\"", ";", "String", "loc1", "=", "\"srini_string\"", ";", "mPlainSaslServer", ".", "evaluateResponse", "(", "getUserInfo", "(", "loc0", ",", "loc1", ")", ")", ";", "Assert", ".", "assertEquals", "(", "loc0", ",", "mPlainSaslServer", ".", "getAuthorizationID", "(", ")", ")", ";", "}"], "nl": "Tests the  {@link PlainSaslServer#getAuthorizationID()} to retrieve the correct user.", "nlToks": ["Tests", "the", "-LCB-", "@link", "PlainSaslServer", "#getAuthorizationID", "-LRB-", "-RRB-", "-RCB-", "to", "retrieve", "the", "correct", "user", "."], "path": "poemlin/alluxio/tree/master/core/common/src/test/java/alluxio/security/authentication/PlainSaslServerTest.java", "idx": 1965}
{"memberVariables": {"handler": "IParserEventHandler", "GROUP_END=new GroupEndEvent()": "IParserEvent", "GROUP_START=new GroupStartEvent()": "IParserEvent", "DOCUMENT_START=new DocumentStartEvent()": "IParserEvent", "handlerStack=new ArrayDeque<IParserEventHandler>()": "Deque<IParserEventHandler>", "m_fontEncodings=new HashMap<Integer,String>()": "Map<Integer,String>", "stack=new ArrayDeque<ParserState>()": "Deque<ParserState>", "DOCUMENT_END=new DocumentEndEvent()": "IParserEvent", "state=new ParserState()": "ParserState", "skipBytes": "int"}, "code": ["void", "function", "(", ")", "{", "handleEvent", "(", "GROUP_END", ")", ";", "state", "=", "stack", ".", "pop", "(", ")", ";", "}"], "memberFunctions": {"processCharacter": [["void", "char c"]], "processUpr": [["void", "IParserEvent command"]], "handleEvent": [["void", "IParserEvent event"]], "processDocumentEnd": [["void"]], "processCommand": [["void", "Command command", "int parameter", "boolean hasParameter", "boolean optional"]], "parse": [["void", "IRtfSource source", "IRtfListener listener"]], "processCharacterBytes": [["void", "byte[] data"]], "processString": [["void", "String string"]], "processDocumentStart": [["void"]], "processUnicodeAlternateSkipCount": [["void", "int parameter"]], "handleCommand": [["void", "Command command", "int parameter", "boolean hasParameter", "boolean optional"]], "processGroupStart": [["void"]], "processFont": [["void", "int parameter"]], "processEncoding": [["void", "Command command", "boolean hasParameter", "int parameter"]], "processUnicode": [["void", "int parameter"]], "currentEncoding": [["String"]], "processBinaryBytes": [["void", "byte[] data"]], "processFontCharset": [["void", "int parameter"]]}, "className": "StandardRtfParser", "renamed": ["void", "function", "(", ")", "{", "handleEvent", "(", "GROUP_END", ")", ";", "state", "=", "stack", ".", "pop", "(", ")", ";", "}"], "nl": "Handle event from the RawRtfParser.", "nlToks": ["Handle", "event", "from", "the", "RawRtfParser", "."], "path": "harrisaoz/rtfparserkit/tree/master/RTF Parser Kit/src/main/java/com/rtfparserkit/parser/standard/StandardRtfParser.java", "idx": 1966}
{"memberVariables": {"p": "Plan", "comp": "RecordComparator", "tx": "Transaction", "sch": "Schema"}, "code": ["Scan", "function", "(", ")", "{", "Scan", "src", "=", "p", ".", "open", "(", ")", ";", "List", "<", "TempTable", ">", "runs", "=", "splitIntoRuns", "(", "src", ")", ";", "src", ".", "close", "(", ")", ";", "while", "(", "runs", ".", "size", "(", ")", ">", "2", ")", "runs", "=", "doAMergeIteration", "(", "runs", ")", ";", "return", "new", "SortScan", "(", "runs", ",", "comp", ")", ";", "}"], "memberFunctions": {"schema": [["Schema"]], "splitIntoRuns": [["List<TempTable>", "Scan src"]], "blocksAccessed": [["int"]], "distinctValues": [["int", "String fldname"]], "recordsOutput": [["int"]], "copy": [["boolean", "Scan src", "UpdateScan dest"]], "doAMergeIteration": [["List<TempTable>", "List<TempTable> runs"]], "mergeTwoRuns": [["TempTable", "TempTable p1", "TempTable p2"]]}, "className": "SortPlan", "renamed": ["Scan", "function", "(", ")", "{", "Scan", "loc0", "=", "p", ".", "open", "(", ")", ";", "List", "<", "TempTable", ">", "loc1", "=", "splitIntoRuns", "(", "loc0", ")", ";", "loc0", ".", "close", "(", ")", ";", "while", "(", "loc1", ".", "size", "(", ")", ">", "2", ")", "loc1", "=", "doAMergeIteration", "(", "loc1", ")", ";", "return", "new", "SortScan", "(", "loc1", ",", "comp", ")", ";", "}"], "nl": "This method is where most of the action is. Up to 2 sorted temporary tables are created, and are passed into SortScan for final merging.", "nlToks": ["This", "method", "is", "where", "most", "of", "the", "action", "is", ".", "Up", "to", "2", "sorted", "temporary", "tables", "are", "created", ",", "and", "are", "passed", "into", "SortScan", "for", "final", "merging", "."], "path": "prerit2803/DBMSProject2/tree/master/simpledb/materialize/SortPlan.java", "idx": 1967}
{"memberVariables": {"mUser": "User", "mCallbackHandler": "CallbackHandler", "mUserName": "String", "mSubject": "Subject"}, "code": ["boolean", "function", "(", ")", "{", "if", "(", "mSubject", ".", "isReadOnly", "(", ")", ")", "{", "throw", "new", "LoginException", "(", "\"logout Failed: Subject is Readonly.\"", ")", ";", "}", "if", "(", "mUser", "!=", "null", ")", "{", "mSubject", ".", "getPrincipals", "(", ")", ".", "remove", "(", "mUser", ")", ";", "}", "return", "true", ";", "}"], "memberFunctions": {"abort": [["boolean"]], "commit": [["boolean"]], "handle": [["void", "Callback[] callbacks"]], "initialize": [["void", "Subject subject", "CallbackHandler callbackHandler", "Map<String,?> sharedState", "Map<String,?> options"]], "login": [["boolean"]]}, "className": "AppLoginModule", "renamed": ["boolean", "function", "(", ")", "{", "if", "(", "mSubject", ".", "isReadOnly", "(", ")", ")", "{", "throw", "new", "LoginException", "(", "\"srini_string\"", ")", ";", "}", "if", "(", "mUser", "!=", "null", ")", "{", "mSubject", ".", "getPrincipals", "(", ")", ".", "remove", "(", "mUser", ")", ";", "}", "return", "true", ";", "}"], "nl": "Logs out the user  The implementation removes the User associated with the Subject.", "nlToks": ["Logs", "out", "the", "user", "The", "implementation", "removes", "the", "User", "associated", "with", "the", "Subject", "."], "path": "poemlin/alluxio/tree/master/core/common/src/main/java/alluxio/security/login/AppLoginModule.java", "idx": 1968}
{"memberVariables": {"postId": "String"}, "code": ["String", "function", "(", ")", "{", "return", "postId", ";", "}"], "memberFunctions": {"setShouldFailOnDataError": [["void", "boolean shouldFailOnDataError"]], "getShouldFailOnDataError": [["boolean"]]}, "className": "Sharer", "renamed": ["String", "function", "(", ")", "{", "return", "postId", ";", "}"], "nl": "Returns the post id, if available.", "nlToks": ["Returns", "the", "post", "id", ",", "if", "available", "."], "path": "adament67/testproject/tree/master/Android Projects/studio/EstiloRobe/facebook/src/main/java/com/facebook/share/Sharer.java", "idx": 1969}
{"memberVariables": {"addressHeader": "int", "INTERVAL=TARGET_TIMESPAN / TARGET_SPACING": "int", "alertSigningKey": "byte[]", "acceptableAddressCodes": "int[]", "packetMagic": "long", "p2shHeader": "int", "paramSet=Collections.synchronizedList(new ArrayList<NetworkParameters>())": "List<NetworkParameters>", "PROTOCOL_VERSION=70001": "int", "genesisBlock": "Block", "proofOfWorkLimit": "BigInteger", "subsidyDecreaseBlockCount": "int", "port": "int", "MAX_MONEY=new BigInteger(\"21000000\",10).multiply(COIN)": "BigInteger", "TARGET_SPACING=10 * 60": "int", "dnsSeeds": "String[]", "checkpoints=new HashMap<Integer,Sha256Hash>()": "Map<Integer,Sha256Hash>", "SATOSHI_KEY=Hex.decode(\"04fc9702847840aaf195de8442ebecedf5b095cdbb9bc716bda9110971b28a49e0ead8564ff0db22209e0374782c093bb899692d524e9d6a6956e7c5ecbcd68284\")": "byte[]", "interval": "int", "id": "String", "spendableCoinbaseDepth": "int", "dumpedPrivateKeyHeader": "int", "targetTimespan": "int", "TARGET_TIMESPAN=14 * 24 * 60* 60": "int", "BIP16_ENFORCE_TIME=1333238400": "int"}, "code": ["boolean", "function", "(", "int", "version", ")", "{", "for", "(", "int", "v", ":", "getAcceptableAddressCodes", "(", ")", ")", "{", "if", "(", "version", "==", "v", ")", "return", "true", ";", "}", "return", "false", ";", "}"], "memberFunctions": {"regTests": [["NetworkParameters"]], "allowEmptyPeerChain": [["boolean"]], "getDumpedPrivateKeyHeader": [["int"]], "testNet2": [["NetworkParameters"]], "testNet3": [["NetworkParameters"]], "unitTests": [["NetworkParameters"]], "getId": [["String"]], "getAddressHeader": [["int"]], "getAcceptableAddressCodes": [["int[]"]], "prodNet": [["NetworkParameters"]], "fromID": [["NetworkParameters", "String id"]], "getTargetTimespan": [["int"]], "getDnsSeeds": [["String[]"]], "hashCode": [["int"]], "getSpendableCoinbaseDepth": [["int"]], "testNet": [["NetworkParameters"]], "calculateBlockPoWHash": [["Sha256Hash", "Block b"]], "getMaxMoney": [["BigInteger"]], "getParamsFromAddressByte": [["NetworkParameters", "int version"]], "registerParams": [["void", "NetworkParameters params"]], "isCheckpoint": [["boolean", "int height"]], "getP2SHHeader": [["int"]], "getInterval": [["int"]], "getRetargetBlockCount": [["int"], ["int", "StoredBlock cursor"]], "getGenesisBlock": [["Block"]], "getSubsidyDecreaseBlockCount": [["int"]], "createGenesis": [["Block", "NetworkParameters n"]], "getPacketMagic": [["long"]], "getPort": [["int"]], "getAlertSigningKey": [["byte[]"]], "equals": [["boolean", "Object other"]], "passesCheckpoint": [["boolean", "int height", "Sha256Hash hash"]], "getURIScheme": [["String"]], "getProofOfWorkLimit": [["BigInteger"]]}, "className": "NetworkParameters", "renamed": ["boolean", "function", "(", "int", "arg0", ")", "{", "for", "(", "int", "loc0", ":", "getAcceptableAddressCodes", "(", ")", ")", "{", "if", "(", "arg0", "==", "loc0", ")", "return", "true", ";", "}", "return", "false", ";", "}"], "nl": "Check if a given address version is valid given the NetworkParameters.", "nlToks": ["Check", "if", "a", "given", "address", "version", "is", "valid", "given", "the", "NetworkParameters", "."], "path": "plncoin/plncoin-and/tree/master/plncoinj/core/src/main/java/com/google/bitcoin/core/NetworkParameters.java", "idx": 1970}
{"memberVariables": {"printType=true": "boolean", "appendSemicolon=true": "boolean", "lang": "Lang"}, "code": ["boolean", "function", "(", "boolean", "a", ")", "{", "boolean", "old", "=", "this", ".", "appendSemicolon", ";", "this", ".", "appendSemicolon", "=", "a", ";", "return", "old", ";", "}"], "memberFunctions": {"print": [["void", "Node parent", "Node child", "CodeWriter w"]], "printType": [["boolean"], ["boolean", "boolean a"]], "lang": [["Lang"]], "printAst": [["void", "Node ast", "CodeWriter w"]]}, "className": "PrettyPrinter", "renamed": ["boolean", "function", "(", "boolean", "arg0", ")", "{", "boolean", "loc0", "=", "this", ".", "appendSemicolon", ";", "this", ".", "appendSemicolon", "=", "arg0", ";", "return", "loc0", ";", "}"], "nl": "Set a flag indicating whether to print a ';' after certain statements. This is used when pretty-printing for loops.", "nlToks": ["Set", "a", "flag", "indicating", "whether", "to", "print", "a", "'", ";", "'", "after", "certain", "statements", ".", "This", "is", "used", "when", "pretty-printing", "for", "loops", "."], "path": "polyglot-compiler/polyglot/tree/master/src/polyglot/visit/PrettyPrinter.java", "idx": 1971}
{"memberVariables": {"EXAMPLE=\"$GPRMC,120044.567,A,6011.552,N,02501.941,E,000.0,360.0,160705,006.1,E,A*0B\"": "String", "rmc": "RMCParser", "empty": "RMCParser"}, "code": ["void", "function", "(", ")", "{", "rmc", ".", "setMode", "(", "FaaMode", ".", "SIMULATED", ")", ";", "assertEquals", "(", "FaaMode", ".", "SIMULATED", ",", "rmc", ".", "getMode", "(", ")", ")", ";", "rmc", ".", "setMode", "(", "FaaMode", ".", "ESTIMATED", ")", ";", "assertEquals", "(", "FaaMode", ".", "ESTIMATED", ",", "rmc", ".", "getMode", "(", ")", ")", ";", "}"], "memberFunctions": {"testSetFaaModeWhenOmitted": [["void"]], "testSetDirectionOfVariationWithInvalidDirection": [["void"]], "testGetCorrectedCourse": [["void"]], "testGetDataStatus": [["void"]], "testConstructor": [["void"]], "testGetTime": [["void"]], "testSetCourse": [["void"]], "testSetVariation": [["void"]], "setUp": [["void"]], "testGetMonth": [["void"]], "testGetCourse": [["void"]], "testSetDate": [["void"]], "testGetYear": [["void"]], "testSetDataStatus": [["void"]], "testGetDirectionOfVariation": [["void"]], "testGetDate": [["void"]], "testGetMagneticVariation": [["void"]], "testSetPosition": [["void"]], "testGetPosition": [["void"]], "testSetDirectionOfVariation": [["void"]], "testSetTime": [["void"]], "testGetDay": [["void"]], "testGetSpeed": [["void"]], "testGetFaaMode": [["void"]], "testSetSpeed": [["void"]]}, "className": "RMCTest", "renamed": ["void", "function", "(", ")", "{", "rmc", ".", "setMode", "(", "FaaMode", ".", "SIMULATED", ")", ";", "assertEquals", "(", "FaaMode", ".", "SIMULATED", ",", "rmc", ".", "getMode", "(", ")", ")", ";", "rmc", ".", "setMode", "(", "FaaMode", ".", "ESTIMATED", ")", ";", "assertEquals", "(", "FaaMode", ".", "ESTIMATED", ",", "rmc", ".", "getMode", "(", ")", ")", ";", "}"], "nl": "Test method for {@link net.sf.marineapi.nmea.parser.RMCParser#setFaaMode()}.", "nlToks": ["Test", "method", "for", "-LCB-", "@link", "net.sf.marineapi.nmea.parser.RMCParser", "#setFaaMode", "-LRB-", "-RRB-", "-RCB-", "."], "path": "pkoziol/marine-api/tree/master/src/test/java/net/sf/marineapi/nmea/parser/RMCTest.java", "idx": 1972}
{"memberVariables": {"blk": "Block", "EMPTY=0": "int", "INUSE=1": "int", "tx": "Transaction", "ti": "TableInfo", "slotsize": "int", "currentslot=-1": "int"}, "code": ["void", "function", "(", "int", "id", ")", "{", "currentslot", "=", "id", ";", "}"], "memberFunctions": {"next": [["boolean"]], "isValidSlot": [["boolean"]], "currentId": [["int"]], "insert": [["boolean"]], "getString": [["String", "String fldname"]], "currentpos": [["int"]], "delete": [["void"]], "setInt": [["void", "String fldname", "int val"]], "getInt": [["int", "String fldname"]], "setString": [["void", "String fldname", "String val"]], "fieldpos": [["int", "String fldname"]], "close": [["void"]], "searchFor": [["boolean", "int flag"]]}, "className": "RecordPage", "renamed": ["void", "function", "(", "int", "arg0", ")", "{", "currentslot", "=", "arg0", ";", "}"], "nl": "Sets the current record to be the record having the specified ID.", "nlToks": ["Sets", "the", "current", "record", "to", "be", "the", "record", "having", "the", "specified", "ID", "."], "path": "prerit2803/DBMSProject2/tree/master/simpledb/record/RecordPage.java", "idx": 1973}
{"memberVariables": {"lhs": "Expression", "rhs": "Expression"}, "code": ["String", "function", "(", "String", "fldname", ")", "{", "if", "(", "lhs", ".", "isFieldName", "(", ")", "&&", "lhs", ".", "asFieldName", "(", ")", ".", "equals", "(", "fldname", ")", "&&", "rhs", ".", "isFieldName", "(", ")", ")", "return", "rhs", ".", "asFieldName", "(", ")", ";", "else", "if", "(", "rhs", ".", "isFieldName", "(", ")", "&&", "rhs", ".", "asFieldName", "(", ")", ".", "equals", "(", "fldname", ")", "&&", "lhs", ".", "isFieldName", "(", ")", ")", "return", "lhs", ".", "asFieldName", "(", ")", ";", "else", "return", "null", ";", "}"], "memberFunctions": {"equatesWithConstant": [["Constant", "String fldname"]], "reductionFactor": [["int", "Plan p"]], "appliesTo": [["boolean", "Schema sch"]], "isSatisfied": [["boolean", "Scan s"]], "toString": [["String"]]}, "className": "Term", "renamed": ["String", "function", "(", "String", "arg0", ")", "{", "if", "(", "lhs", ".", "isFieldName", "(", ")", "&&", "lhs", ".", "asFieldName", "(", ")", ".", "equals", "(", "arg0", ")", "&&", "rhs", ".", "isFieldName", "(", ")", ")", "return", "rhs", ".", "asFieldName", "(", ")", ";", "else", "if", "(", "rhs", ".", "isFieldName", "(", ")", "&&", "rhs", ".", "asFieldName", "(", ")", ".", "equals", "(", "arg0", ")", "&&", "lhs", ".", "isFieldName", "(", ")", ")", "return", "lhs", ".", "asFieldName", "(", ")", ";", "else", "return", "null", ";", "}"], "nl": "Determines if this term is of the form \"F1=F2\" where F1 is the specified field and F2 is another field. If so, the method returns the name of that field. If not, the method returns null.", "nlToks": ["Determines", "if", "this", "term", "is", "of", "the", "form", "``", "F1", "=", "F2", "''", "where", "F1", "is", "the", "specified", "field", "and", "F2", "is", "another", "field", ".", "If", "so", ",", "the", "method", "returns", "the", "name", "of", "that", "field", ".", "If", "not", ",", "the", "method", "returns", "null", "."], "path": "prerit2803/DBMSProject2/tree/master/simpledb/query/Term.java", "idx": 1974}
{"memberVariables": {"expDataUnitId": "BigDecimal", "dataUnitId": "BigDecimal", "createTimeStamp": "Timestamp", "actValue": "String", "errorCode": "String", "srcFileName": "String", "errorMsg": "String", "failedAttrib": "String", "expDataSetId": "BigDecimal", "regPclTestResult": "RegPCLTestResultEntity", "dataSetId": "BigDecimal", "id": "RegPCLTestResultDetailsEntityPK", "serialVersionUID=3309870439513279844L": "long", "expValue": "String"}, "code": ["void", "function", "(", "String", "actValue", ")", "{", "this", ".", "actValue", "=", "actValue", ";", "}"], "memberFunctions": {"updateCreateTimeStamp": [["void"]], "getDataSetId": [["BigDecimal"]], "getId": [["RegPCLTestResultDetailsEntityPK"]], "setSrcFileName": [["void", "String srcFileName"]], "getRegPclTestResult": [["RegPCLTestResultEntity"]], "setExpValue": [["void", "String expValue"]], "getSrcFileName": [["String"]], "setErrorCode": [["void", "String errorCode"]], "getDataUnitId": [["BigDecimal"]], "setErrorMsg": [["void", "String errorMsg"]], "getErrorCode": [["String"]], "setDataUnitId": [["void", "BigDecimal dataUnitId"]], "setId": [["void", "RegPCLTestResultDetailsEntityPK id"]], "setFailedAttrib": [["void", "String failedAttrib"]], "getExpDataSetId": [["BigDecimal"]], "getErrorMsg": [["String"]], "getActValue": [["String"]], "setRegPclTestResult": [["void", "RegPCLTestResultEntity regPclTestResult"]], "getExpValue": [["String"]], "setCreateTimeStamp": [["void", "Timestamp createTimeStamp"]], "getExpDataUnitId": [["BigDecimal"]], "getCreateTimeStamp": [["Timestamp"]], "getFailedAttrib": [["String"]], "setExpDataSetId": [["void", "BigDecimal expDataSetId"]], "setDataSetId": [["void", "BigDecimal dataSetId"]], "setExpDataUnitId": [["void", "BigDecimal expDataUnitId"]]}, "className": "RegPCLTestResultDetailsEntity", "renamed": ["void", "function", "(", "String", "arg0", ")", "{", "this", ".", "actValue", "=", "arg0", ";", "}"], "nl": "Sets the act value.", "nlToks": ["Sets", "the", "act", "value", "."], "path": "pkesireddy/portico_fletcher/tree/master/FetcherTesterService/src/main/java/org/ithaka/cm/fetchertester/entity/RegPCLTestResultDetailsEntity.java", "idx": 1975}
{"memberVariables": {"differenceEvaluator=DifferenceEvaluators.Default": "DifferenceEvaluator", "comparisonResultsToCheck=CHECK_FOR_IDENTICAL": "ComparisonResult[]", "CHECK_FOR_IDENTICAL=new ComparisonResult[]{ComparisonResult.SIMILAR,ComparisonResult.DIFFERENT}": "ComparisonResult[]", "controlSource": "Source", "CHECK_FOR_SIMILAR=new ComparisonResult[]{ComparisonResult.DIFFERENT}": "ComparisonResult[]", "namespaceContext": "Map<String,String>", "nodeFilter": "Predicate<Node>", "differenceListeners=new ArrayList<ComparisonListener>()": "List<ComparisonListener>", "attributeFilter": "Predicate<Attr>", "ignoreWhitespace": "boolean", "comparisonListeners=new ArrayList<ComparisonListener>()": "List<ComparisonListener>", "ignoreComments": "boolean", "normalizeWhitespace": "boolean", "nodeMatcher": "NodeMatcher", "comparisonController=ComparisonControllers.Default": "ComparisonController", "testSource": "Source", "results": "List<Difference>", "comparisonResultsToCheck": "EnumSet<ComparisonResult>"}, "code": ["DiffBuilder", "function", "(", ")", "{", "normalizeWhitespace", "=", "true", ";", "return", "this", ";", "}"], "memberFunctions": {"checkForIdentical": [["DiffBuilder"]], "withNamespaceContext": [["DiffBuilder", "Map<String,String> uri2Prefix"]], "compare": [["DiffBuilder", "final Object control"]], "withNodeFilter": [["DiffBuilder", "Predicate<Node> nodeFilter"]], "comparisonPerformed": [["void", "final Comparison comparison", "final ComparisonResult outcome"]], "withNodeMatcher": [["DiffBuilder", "final NodeMatcher nodeMatcher"]], "getDifferences": [["List<Difference>"]], "withComparisonController": [["DiffBuilder", "final ComparisonController comparisonController"]], "ignoreWhitespace": [["DiffBuilder"]], "withDifferenceEvaluator": [["DiffBuilder", "final DifferenceEvaluator differenceEvaluator"]], "ignoreComments": [["DiffBuilder"]], "withDifferenceListeners": [["DiffBuilder", "final ComparisonListener... comparisonListeners"]], "checkForSimilar": [["DiffBuilder"]], "withTest": [["DiffBuilder", "Object test"]], "build": [["Diff"]], "getSource": [["Source", "Object object"]], "withComparisonListeners": [["DiffBuilder", "final ComparisonListener... comparisonListeners"]], "wrap": [["Source", "final Source source"]], "withAttributeFilter": [["DiffBuilder", "Predicate<Attr> attributeFilter"]]}, "className": "DiffBuilder", "renamed": ["DiffBuilder", "function", "(", ")", "{", "normalizeWhitespace", "=", "true", ";", "return", "this", ";", "}"], "nl": "Normalize Text-Elements by removing all empty text nodes and normalizing the non-empty ones.  \"normalized\" in this context means all whitespace characters are replaced by space characters and consecutive whitespace characters are collapsed. ", "nlToks": ["Normalize", "Text-Elements", "by", "removing", "all", "empty", "text", "nodes", "and", "normalizing", "the", "non-empty", "ones", ".", "``", "normalized", "''", "in", "this", "context", "means", "all", "whitespace", "characters", "are", "replaced", "by", "space", "characters", "and", "consecutive", "whitespace", "characters", "are", "collapsed", "."], "path": "phbenisc/xmlunit/tree/master/xmlunit-core/src/main/java/org/xmlunit/builder/DiffBuilder.java", "idx": 1976}
{"memberVariables": {"log=LogFactory.getLog(PassiveSTSService.class)": "Log"}, "code": ["ClaimDTO", "function", "(", "String", "realmName", ")", "{", "RegistryBasedTrustedServiceStore", "registryBasedTrustedServiceStore", "=", "new", "RegistryBasedTrustedServiceStore", "(", ")", ";", "return", "registryBasedTrustedServiceStore", ".", "getTrustedServiceClaims", "(", "realmName", ")", ";", "}"], "memberFunctions": {"removeTrustedService": [["void", "String realmName"]], "genFaultResponse": [["SOAPFault", "MessageContext messageCtx", "String code", "String subCode", "String reason", "String detail"]], "getResponse": [["ResponseToken", "RequestToken request"]], "getAllTrustedServices": [["ClaimDTO[]"]], "setReplyToURL": [["void", "RequestToken request"]], "addTrustedService": [["void", "String realmName", "String claimDialect", "String claims"]]}, "className": "PassiveSTSService", "renamed": ["ClaimDTO", "function", "(", "String", "arg0", ")", "{", "RegistryBasedTrustedServiceStore", "loc0", "=", "new", "RegistryBasedTrustedServiceStore", "(", ")", ";", "return", "loc0", ".", "getTrustedServiceClaims", "(", "arg0", ")", ";", "}"], "nl": "Get default claims for given trusted service", "nlToks": ["Get", "default", "claims", "for", "given", "trusted", "service"], "path": "harsha1979/carbon-identity/tree/master/components/sts/org.wso2.carbon.identity.sts.passive/src/main/java/org/wso2/carbon/identity/sts/passive/PassiveSTSService.java", "idx": 1978}
{"memberVariables": {"bundle=new Bundle()": "Bundle", "bundle": "Bundle"}, "code": ["boolean", "function", "(", "final", "String", "key", ",", "final", "boolean", "defaultValue", ")", "{", "return", "this", ".", "bundle", ".", "getBoolean", "(", "key", ",", "defaultValue", ")", ";", "}"], "memberFunctions": {"putStringArrayList": [["E", "final String key", "final ArrayList<String> value"]], "getPhoto": [["SharePhoto", "final String key"]], "putPhotoArrayList": [["E", "final String key", "final ArrayList<SharePhoto> value"]], "putDoubleArray": [["E", "final String key", "final double[] value"]], "getDouble": [["double", "final String key", "final double defaultValue"]], "putDouble": [["E", "final String key", "final double value"]], "putLong": [["E", "final String key", "final long value"]], "getBundle": [["Bundle"]], "getDoubleArray": [["double[]", "final String key"]], "get": [["Object", "String key"]], "getObjectArrayList": [["ArrayList<ShareOpenGraphObject>", "final String key"]], "putIntArray": [["E", "final String key", "final int[] value"]], "putLongArray": [["E", "final String key", "final long[] value"]], "keySet": [["Set<String>"]], "putBoolean": [["E", "final String key", "final boolean value"]], "getBooleanArray": [["boolean[]", "final String key"]], "getPhotoArrayList": [["ArrayList<SharePhoto>", "final String key"]], "getObject": [["ShareOpenGraphObject", "final String key"]], "putPhoto": [["E", "final String key", "final SharePhoto value"]], "readFrom": [["E", "final P model"]], "putInt": [["E", "final String key", "final int value"]], "putString": [["E", "final String key", "final String value"]], "getStringArrayList": [["ArrayList<String>", "final String key"]], "getString": [["String", "final String key"]], "describeContents": [["int"]], "getLongArray": [["long[]", "final String key"]], "getLong": [["long", "final String key", "final long defaultValue"]], "getInt": [["int", "final String key", "final int defaultValue"]], "putObjectArrayList": [["E", "final String key", "final ArrayList<ShareOpenGraphObject> value"]], "putBooleanArray": [["E", "final String key", "final boolean[] value"]], "putObject": [["E", "final String key", "final ShareOpenGraphObject value"]], "writeToParcel": [["void", "final Parcel out", "final int flags"]], "getIntArray": [["int[]", "final String key"]]}, "className": "ShareOpenGraphValueContainer", "renamed": ["boolean", "function", "(", "final", "String", "arg0", ",", "final", "boolean", "arg1", ")", "{", "return", "this", ".", "bundle", ".", "getBoolean", "(", "arg0", ",", "arg1", ")", ";", "}"], "nl": "Gets a boolean value out of the object.", "nlToks": ["Gets", "a", "boolean", "value", "out", "of", "the", "object", "."], "path": "adament67/testproject/tree/master/Android Projects/studio/EstiloRobe/facebook/src/main/java/com/facebook/share/model/ShareOpenGraphValueContainer.java", "idx": 1980}
{"memberVariables": {"fileName": "String", "DEFAULT_REGEX=\"[^\\\\]]*\"": "String", "logWriter": "Writer", "WHITE_SPACE_REGEX=\"\\\\s+\"": "String", "logLevels": "Map<String,Integer>", "LOG_LEVEL_REGEX=\"(\\\\w+)\"": "String", "logFilter": "Filter", "logRotation": "long", "ALLOW_ALL_REGEX=\"(.*)\"": "String", "PREFIX_REGEX=TIMESTAMP_REGEX + WHITE_SPACE_REGEX + LOG_LEVEL_REGEX+ WHITE_SPACE_REGEX": "String", "filterPattern": "Pattern", "logPath": "String", "modTime": "long", "logFile": "String", "TIMESTAMP_REGEX=\"(\\\\d\\\\d\\\\d\\\\d-\\\\d\\\\d-\\\\d\\\\d \\\\d\\\\d:\\\\d\\\\d:\\\\d\\\\d,\\\\d\\\\d\\\\d)\"": "String", "parameters=new ArrayList<String>()": "List<String>", "noFilter": "boolean", "filterParams": "Map<String,String>", "SPLITTER_PATTERN=Pattern.compile(PREFIX_REGEX + ALLOW_ALL_REGEX)": "Pattern"}, "code": ["boolean", "function", "(", "ArrayList", "<", "String", ">", "logParts", ")", "{", "String", "logLevel", "=", "logParts", ".", "get", "(", "0", ")", ";", "String", "logMessage", "=", "logParts", ".", "get", "(", "1", ")", ";", "if", "(", "this", ".", "logLevels", "==", "null", "||", "this", ".", "logLevels", ".", "containsKey", "(", "logLevel", ".", "toUpperCase", "(", ")", ")", ")", "{", "Matcher", "logMatcher", "=", "filterPattern", ".", "matcher", "(", "logMessage", ")", ";", "return", "logMatcher", ".", "matches", "(", ")", ";", "}", "else", "{", "return", "false", ";", "}", "}"], "memberFunctions": {"isFilterPresent": [["boolean"]], "setLogLevel": [["void", "String logLevel"]], "constructPattern": [["void"]], "setParameter": [["void", "String filterParam", "String value"]], "defineParameter": [["void", "String filterParam"]], "reset": [["void"]], "streamLog": [["void", "Date startTime", "Date endTime"]], "compareTo": [["int", "FileInfo fileInfo"]], "getFileName": [["String"]], "splitLogMessage": [["ArrayList<String>", "String logLine"]], "getModTime": [["long"]], "getFileList": [["ArrayList<FileInfo>", "File dir", "long startTime", "long endTime", "long logRotationTime", "String logFile"]]}, "className": "XLogStreamer", "renamed": ["boolean", "function", "(", "ArrayList", "<", "String", ">", "arg0", ")", "{", "String", "loc0", "=", "arg0", ".", "get", "(", "0", ")", ";", "String", "loc1", "=", "arg0", ".", "get", "(", "1", ")", ";", "if", "(", "this", ".", "logLevels", "==", "null", "||", "this", ".", "logLevels", ".", "containsKey", "(", "loc0", ".", "toUpperCase", "(", ")", ")", ")", "{", "Matcher", "loc2", "=", "filterPattern", ".", "matcher", "(", "loc1", ")", ";", "return", "loc2", ".", "matches", "(", ")", ";", "}", "else", "{", "return", "false", ";", "}", "}"], "nl": "Checks if the logLevel and logMessage goes through the logFilter.", "nlToks": ["Checks", "if", "the", "logLevel", "and", "logMessage", "goes", "through", "the", "logFilter", "."], "path": "pingpangkuangmo/oozie/tree/master/core/src/main/java/org/apache/oozie/util/XLogStreamer.java", "idx": 1981}
{"memberVariables": {"mWriter": "ByteBuffer", "mBuffer": "byte[]"}, "code": ["BufferedByteWriter", "function", "(", "byte", "value", ")", "{", "return", "put32", "(", "value", "&", "0xFF", ")", ";", "}"], "memberFunctions": {"put24": [["BufferedByteWriter", "byte value"], ["BufferedByteWriter", "short value"], ["BufferedByteWriter", "int value"]], "putLen8": [["BufferedByteWriter", "byte[] value"]], "put16": [["BufferedByteWriter", "byte value"], ["BufferedByteWriter", "short value"]], "putLen16": [["BufferedByteWriter", "byte[] value"]], "toByteArray": [["byte[]"]], "ensureCapacity": [["void", "int required"]], "put64": [["BufferedByteWriter", "byte value"], ["BufferedByteWriter", "short value"], ["BufferedByteWriter", "int value"], ["BufferedByteWriter", "long value"]], "put": [["BufferedByteWriter", "byte[] value"], ["BufferedByteWriter", "byte value"]]}, "className": "BufferedByteWriter", "renamed": ["BufferedByteWriter", "function", "(", "byte", "arg0", ")", "{", "return", "put32", "(", "arg0", "&", "0xFF", ")", ";", "}"], "nl": "Write the given int value (32-bit) in big-endian order to the buffer", "nlToks": ["Write", "the", "given", "int", "value", "-LRB-", "32-bit", "-RRB-", "in", "big-endian", "order", "to", "the", "buffer"], "path": "prathyks/strongswan/tree/master/src/frontends/android/app/src/main/java/org/strongswan/android/utils/BufferedByteWriter.java", "idx": 1983}
{"memberVariables": {"PARAM_REFERSH_TOKEN=\"refreshToken\"": "String", "QUERY_BY_RESOURCE_SET=\"OAuth2AccessTokenEntity.getByResourceSet\"": "String", "PARAM_DATE=\"date\"": "String", "authenticationHolder": "AuthenticationHolderEntity", "tokenType=OAuth2AccessToken.BEARER_TYPE": "String", "ID_TOKEN_FIELD_NAME=\"id_token\"": "String", "QUERY_EXPIRED_BY_DATE=\"OAuth2AccessTokenEntity.getAllExpiredByDate\"": "String", "PARAM_CLIENT=\"client\"": "String", "QUERY_BY_REFRESH_TOKEN=\"OAuth2AccessTokenEntity.getByRefreshToken\"": "String", "PARAM_TOKEN_VALUE=\"tokenValue\"": "String", "permissions": "Set<Permission>", "jwtValue": "JWT", "scope": "Set<String>", "idToken": "OAuth2AccessTokenEntity", "client": "ClientDetailsEntity", "QUERY_BY_CLIENT=\"OAuth2AccessTokenEntity.getByClient\"": "String", "expiration": "Date", "QUERY_BY_TOKEN_VALUE=\"OAuth2AccessTokenEntity.getByTokenValue\"": "String", "PARAM_ID_TOKEN=\"idToken\"": "String", "id": "Long", "QUERY_BY_ID_TOKEN=\"OAuth2AccessTokenEntity.getByIdToken\"": "String", "QUERY_ALL=\"OAuth2AccessTokenEntity.getAll\"": "String", "PARAM_RESOURCE_SET_ID=\"rsid\"": "String", "refreshToken": "OAuth2RefreshTokenEntity"}, "code": ["AuthenticationHolderEntity", "function", "(", ")", "{", "return", "authenticationHolder", ";", "}"], "memberFunctions": {"getRefreshToken": [["OAuth2RefreshTokenEntity"]], "getTokenType": [["String"]], "setTokenType": [["void", "String tokenType"]], "getIdTokenString": [["String"]], "setJwt": [["void", "JWT jwt"]], "getPermissions": [["Set<Permission>"]], "getId": [["Long"]], "setAuthenticationHolder": [["void", "AuthenticationHolderEntity authenticationHolder"]], "setExpiration": [["void", "Date expiration"]], "getClient": [["ClientDetailsEntity"]], "setPermissions": [["void", "Set<Permission> permissions"]], "getValue": [["String"]], "setClient": [["void", "ClientDetailsEntity client"]], "getExpiration": [["Date"]], "getExpiresIn": [["int"]], "setId": [["void", "Long id"]], "getJwt": [["JWT"]], "setIdToken": [["void", "OAuth2AccessTokenEntity idToken"]], "getIdToken": [["OAuth2AccessTokenEntity"]], "setScope": [["void", "Set<String> scope"]], "isExpired": [["boolean"]], "setRefreshToken": [["void", "OAuth2RefreshTokenEntity refreshToken"], ["void", "OAuth2RefreshToken refreshToken"]], "getScope": [["Set<String>"]], "getAdditionalInformation": [["Map<String,Object>"]]}, "className": "OAuth2AccessTokenEntity", "renamed": ["AuthenticationHolderEntity", "function", "(", ")", "{", "return", "authenticationHolder", ";", "}"], "nl": "The authentication in place when this token was created.", "nlToks": ["The", "authentication", "in", "place", "when", "this", "token", "was", "created", "."], "path": "adilansari/OpenID-Connect-Java-Spring-Server/tree/master/openid-connect-common/src/main/java/org/mitre/oauth2/model/OAuth2AccessTokenEntity.java", "idx": 1985}
{"memberVariables": {"activePlugins": "PluginContainer", "listeners": "List<PluginManagerListener>", "LOG=Logger.getLogger(PluginManager.class)": "Logger", "singleton=new PluginManager()": "PluginManager", "allPlugins": "PluginContainer"}, "code": ["void", "function", "(", ")", "{", "Iterator", "<", "AbstractPlugin", ">", "iter", "=", "allPlugins", ".", "iterator", "(", ")", ";", "while", "(", "iter", ".", "hasNext", "(", ")", ")", "{", "AbstractPlugin", "plugin", "=", "(", "AbstractPlugin", ")", "iter", ".", "next", "(", ")", ";", "plugin", ".", "removePluginObserver", "(", "this", ")", ";", "activePlugins", ".", "remove", "(", "plugin", ")", ";", "iter", ".", "remove", "(", ")", ";", "}", "}"], "memberFunctions": {"removePlugin": [["void", "AbstractPlugin plugin"]], "notifyContainerChanged": [["void"]], "addPlugin": [["void", "AbstractPlugin plugin"]], "loadPlugins": [["void", "File file"]], "isActive": [["boolean", "AbstractPlugin plugin"]], "iterator": [["Iterator<AbstractPlugin>"]], "countActivePlugins": [["int"]], "getByName": [["AbstractPlugin", "String pluginName"]], "loadAvailablePlugins": [["void", "File pluginDir"]], "indexOf": [["int", "AbstractPlugin plugin"]], "addListener": [["void", "PluginManagerListener o"]], "getActivePluginIterator": [["Iterator<AbstractPlugin>"]], "setAllActive": [["void", "boolean active"]], "getByIndex": [["AbstractPlugin", "int index"]], "notifyActiveChanged": [["void", "AbstractPlugin plugin", "boolean active"]], "addToClasspath": [["void", "File file"]], "removeListener": [["void", "PluginManagerListener o"]], "pluginStateChanged": [["void", "AbstractPlugin plugin", "PluginState newState", "PluginState oldState"]], "indexOfActive": [["int", "AbstractPlugin plugin"]], "countPlugins": [["int"]], "savePlugins": [["void", "File file"]], "setActive": [["void", "AbstractPlugin plugin", "boolean active"]], "loadAvailableJars": [["void", "File jarDir"]], "getActive": [["AbstractPlugin", "int index"]], "getInstance": [["PluginManager"]], "currentPointsChanged": [["void", "AbstractPlugin plugin", "int newPoints"]]}, "className": "PluginManager", "renamed": ["void", "function", "(", ")", "{", "Iterator", "<", "AbstractPlugin", ">", "loc0", "=", "allPlugins", ".", "iterator", "(", ")", ";", "while", "(", "loc0", ".", "hasNext", "(", ")", ")", "{", "AbstractPlugin", "loc1", "=", "(", "AbstractPlugin", ")", "loc0", ".", "next", "(", ")", ";", "loc1", ".", "removePluginObserver", "(", "this", ")", ";", "activePlugins", ".", "remove", "(", "loc1", ")", ";", "loc0", ".", "remove", "(", ")", ";", "}", "}"], "nl": "Remove all available plugins", "nlToks": ["Remove", "all", "available", "plugins"], "path": "0xwindows/WS-Attacker/tree/master/framework/src/main/java/wsattacker/main/plugin/PluginManager.java", "idx": 1987}
{"memberVariables": {"edgeOffset=0": "int", "figure=null": "FigNode", "UPLINK_FACTOR=5": "float", "uplinks=new ArrayList<ClassdiagramNode>()": "List<ClassdiagramNode>", "rank=NORANK": "int", "downlinks=new ArrayList<ClassdiagramNode>()": "List<ClassdiagramNode>", "NORANK=-1": "int", "column=NOCOLUMN": "int", "placementHint=-1": "int", "weight=NOWEIGHT": "float", "NOCOLUMN=-1": "int", "NOWEIGHT=-1": "int"}, "code": ["void", "function", "(", "float", "w", ")", "{", "weight", "=", "w", ";", "}"], "memberFunctions": {"getUplinks": [["Vector<ClassdiagramNode>"]], "getLocation": [["Point"]], "isComment": [["boolean"]], "getUpNodes": [["List<ClassdiagramNode>"]], "getWeight": [["float"]], "getFigure": [["FigNode"]], "getDownlinks": [["Vector<ClassdiagramNode>"]], "compareTo": [["int", "Object arg0"]], "setColumn": [["void", "int newColumn"]], "addDownlink": [["void", "ClassdiagramNode newDownlink"]], "setLocation": [["void", "Point newLocation"]], "setEdgeOffset": [["void", "int newOffset"]], "isStandalone": [["boolean"]], "getColumn": [["int"]], "getSubtreeWeight": [["float"]], "calculateWeight": [["float"]], "setRank": [["void", "int newRank"]], "addRank": [["void", "int n"]], "getTypeOrderNumer": [["int"]], "getEdgeOffset": [["int"]], "getRank": [["int"]], "isPackage": [["boolean"]], "addUplink": [["void", "ClassdiagramNode newUplink"]], "getLevel": [["int"]], "getSize": [["Dimension"]], "setPlacementHint": [["void", "int hint"]], "getPlacementHint": [["int"]], "setFigure": [["void", "FigNode newFigure"]], "getDownNodes": [["List<ClassdiagramNode>"]]}, "className": "ClassdiagramNode", "renamed": ["void", "function", "(", "float", "arg0", ")", "{", "weight", "=", "arg0", ";", "}"], "nl": "Set the weight for this node.", "nlToks": ["Set", "the", "weight", "for", "this", "node", "."], "path": "pichiliani/CoArgoUML/tree/master/v0.24/fonte/src/argouml-app/src/org/argouml/uml/diagram/static_structure/layout/ClassdiagramNode.java", "idx": 1990}
{"memberVariables": {"BLOCK_WORKER_THRIFT_CLIENT_HEARTBEAT_POOL=new ConcurrentHashMapV8<>()": "ConcurrentHashMapV8<InetSocketAddress,BlockWorkerThriftClientPool>", "mBlockMasterClientPool": "BlockMasterClientPool", "mHasLocalWorker": "Boolean", "BLOCK_WORKER_THRIFT_CLIENT_POOL=new ConcurrentHashMapV8<>()": "ConcurrentHashMapV8<InetSocketAddress,BlockWorkerThriftClientPool>", "NETTY_CHANNEL_POOL_MAP=new ConcurrentHashMapV8<>()": "ConcurrentHashMapV8<InetSocketAddress,NettyChannelPool>", "CACHED_CONTEXTS=new ConcurrentHashMap<>()": "Map<InetSocketAddress,BlockStoreContext>"}, "code": ["void", "function", "(", "InetSocketAddress", "address", ",", "Channel", "channel", ")", "{", "Preconditions", ".", "checkArgument", "(", "NETTY_CHANNEL_POOL_MAP", ".", "containsKey", "(", "address", ")", ")", ";", "NETTY_CHANNEL_POOL_MAP", ".", "get", "(", "address", ")", ".", "release", "(", "channel", ")", ";", "}"], "memberFunctions": {"acquireWorkerClient": [["BlockWorkerClient", "WorkerNetAddress address"]], "releaseBlockWorkerThriftClient": [["void", "InetSocketAddress address", "BlockWorkerClientService.Client client"]], "initializeGauges": [["void"]], "hasLocalWorker": [["boolean"]], "releaseBlockWorkerThriftClientHeartbeat": [["void", "InetSocketAddress address", "BlockWorkerClientService.Client client"]], "releaseWorkerClient": [["void", "BlockWorkerClient blockWorkerClient"]], "get": [["BlockStoreContext", "InetSocketAddress masterAddress"], ["BlockStoreContext"]], "acquireMasterClientResource": [["CloseableResource<BlockMasterClient>"]], "acquireBlockWorkerThriftClient": [["BlockWorkerClientService.Client", "final InetSocketAddress address"]], "getWorkerAddresses": [["List<WorkerNetAddress>", "String hostname"]], "acquireNettyChannel": [["Channel", "final InetSocketAddress address", "final Callable<Bootstrap> bootstrapBuilder"]], "acquireBlockWorkerThriftClientHeartbeat": [["BlockWorkerClientService.Client", "final InetSocketAddress address"]]}, "className": "BlockStoreContext", "renamed": ["void", "function", "(", "InetSocketAddress", "arg0", ",", "Channel", "arg1", ")", "{", "Preconditions", ".", "checkArgument", "(", "NETTY_CHANNEL_POOL_MAP", ".", "containsKey", "(", "arg0", ")", ")", ";", "NETTY_CHANNEL_POOL_MAP", ".", "get", "(", "arg0", ")", ".", "release", "(", "arg1", ")", ";", "}"], "nl": "Releases a netty channel to the channel pools.", "nlToks": ["Releases", "a", "netty", "channel", "to", "the", "channel", "pools", "."], "path": "poemlin/alluxio/tree/master/core/client/src/main/java/alluxio/client/block/BlockStoreContext.java", "idx": 1991}
{"memberVariables": {"OOZIE_HOME_DIR=\"oozie.home.dir\"": "String", "CONF_SYSTEM_ID=\"oozie.system.id\"": "String", "systemId": "String", "SERVICES": "Services", "CONF_SERVICE_CLASSES=\"oozie.services\"": "String", "CONF_SYSTEM_MODE=\"oozie.systemmode\"": "String", "conf": "Configuration", "services=new LinkedHashMap<Class<? extends Service>,Service>()": "Map<Class<? extends Service>,Service>", "oozieHome": "String", "CONF_DELETE_RUNTIME_DIR=\"oozie.delete.runtime.dir.on.shutdown\"": "String", "CONF_SERVICE_EXT_CLASSES=\"oozie.services.ext\"": "String", "systemMode": "SYSTEM_MODE", "runtimeDir": "String", "MAX_SYSTEM_ID_LEN=10": "int"}, "code": ["String", "function", "(", ")", "{", "return", "systemId", ";", "}"], "memberFunctions": {"getRuntimeDir": [["String"]], "init": [["void"]], "setService": [["void", "Class<? extends Service> klass"]], "setServiceInternal": [["void", "Class<? extends Service> klass", "boolean logging"]], "getConf": [["Configuration"]], "setOozieHome": [["void"]], "getSystemMode": [["SYSTEM_MODE"]], "setSystemMode": [["void", "SYSTEM_MODE sysMode"]], "get": [["T", "Class<T> serviceKlass"], ["Services"]], "destroy": [["void"]], "createRuntimeDir": [["String"]], "getOozieHome": [["String"]]}, "className": "Services", "renamed": ["String", "function", "(", ")", "{", "return", "systemId", ";", "}"], "nl": "Return the system ID, the value defined in the  {@link #CONF_SYSTEM_ID} configuration property.", "nlToks": ["Return", "the", "system", "ID", ",", "the", "value", "defined", "in", "the", "-LCB-", "@link", "#CONF_SYSTEM_ID", "-RCB-", "configuration", "property", "."], "path": "pingpangkuangmo/oozie/tree/master/core/src/main/java/org/apache/oozie/service/Services.java", "idx": 1992}
{"memberVariables": {"bundle=new Bundle()": "Bundle", "bundle": "Bundle"}, "code": ["E", "function", "(", "final", "String", "key", ",", "final", "ArrayList", "<", "ShareOpenGraphObject", ">", "value", ")", "{", "this", ".", "bundle", ".", "putParcelableArrayList", "(", "key", ",", "value", ")", ";", "return", "(", "E", ")", "this", ";", "}"], "memberFunctions": {"putStringArrayList": [["E", "final String key", "final ArrayList<String> value"]], "getPhoto": [["SharePhoto", "final String key"]], "putPhotoArrayList": [["E", "final String key", "final ArrayList<SharePhoto> value"]], "putDoubleArray": [["E", "final String key", "final double[] value"]], "getDouble": [["double", "final String key", "final double defaultValue"]], "putDouble": [["E", "final String key", "final double value"]], "putLong": [["E", "final String key", "final long value"]], "getBundle": [["Bundle"]], "getDoubleArray": [["double[]", "final String key"]], "get": [["Object", "String key"]], "getObjectArrayList": [["ArrayList<ShareOpenGraphObject>", "final String key"]], "putIntArray": [["E", "final String key", "final int[] value"]], "getBoolean": [["boolean", "final String key", "final boolean defaultValue"]], "putLongArray": [["E", "final String key", "final long[] value"]], "keySet": [["Set<String>"]], "putBoolean": [["E", "final String key", "final boolean value"]], "getBooleanArray": [["boolean[]", "final String key"]], "getPhotoArrayList": [["ArrayList<SharePhoto>", "final String key"]], "getObject": [["ShareOpenGraphObject", "final String key"]], "putPhoto": [["E", "final String key", "final SharePhoto value"]], "readFrom": [["E", "final P model"]], "putInt": [["E", "final String key", "final int value"]], "putString": [["E", "final String key", "final String value"]], "getStringArrayList": [["ArrayList<String>", "final String key"]], "getString": [["String", "final String key"]], "describeContents": [["int"]], "getLongArray": [["long[]", "final String key"]], "getLong": [["long", "final String key", "final long defaultValue"]], "getInt": [["int", "final String key", "final int defaultValue"]], "putBooleanArray": [["E", "final String key", "final boolean[] value"]], "putObject": [["E", "final String key", "final ShareOpenGraphObject value"]], "writeToParcel": [["void", "final Parcel out", "final int flags"]], "getIntArray": [["int[]", "final String key"]]}, "className": "ShareOpenGraphValueContainer", "renamed": ["E", "function", "(", "final", "String", "arg0", ",", "final", "ArrayList", "<", "ShareOpenGraphObject", ">", "arg1", ")", "{", "this", ".", "bundle", ".", "putParcelableArrayList", "(", "arg0", ",", "arg1", ")", ";", "return", "(", "E", ")", "this", ";", "}"], "nl": "Sets an array of object values in the object.", "nlToks": ["Sets", "an", "array", "of", "object", "values", "in", "the", "object", "."], "path": "adament67/testproject/tree/master/Android Projects/studio/EstiloRobe/facebook/src/main/java/com/facebook/share/model/ShareOpenGraphValueContainer.java", "idx": 1993}
{"memberVariables": {"userInfo": "String", "encodedPath": "String", "scheme": "String", "queryParams": "List<NameValuePair>", "encodedSchemeSpecificPart": "String", "encodedFragment": "String", "encodedUserInfo": "String", "encodedAuthority": "String", "path": "String", "fragment": "String", "encodedQuery": "String", "port": "int", "host": "String"}, "code": ["URIBuilder", "function", "(", "final", "String", "fragment", ")", "{", "this", ".", "fragment", "=", "fragment", ";", "this", ".", "encodedFragment", "=", "null", ";", "return", "this", ";", "}"], "memberFunctions": {"setHost": [["URIBuilder", "final String host"]], "encodeUserInfo": [["String", "final String userInfo", "Charset charset"]], "getScheme": [["String"]], "encodeQuery": [["String", "final List<NameValuePair> params", "Charset charset"]], "buildString": [["String", "Charset charset"]], "setPath": [["URIBuilder", "final String path"]], "setScheme": [["URIBuilder", "final String scheme"]], "setPort": [["URIBuilder", "final int port"]], "addParameter": [["URIBuilder", "final String param", "final String value"]], "setUserInfo": [["URIBuilder", "final String userInfo"], ["URIBuilder", "final String username", "final String password"]], "encodeFragment": [["String", "final String fragment", "Charset charset"]], "parseQuery": [["List<NameValuePair>", "final String query"]], "getPort": [["int"]], "digestURI": [["void", "final URI uri"]], "build": [["URI", "Charset charset"]], "setParameter": [["URIBuilder", "final String param", "final String value"]], "getPath": [["String"]], "encodePath": [["String", "final String path", "Charset charset"]], "getQueryParams": [["List<NameValuePair>"]], "getFragment": [["String"]], "setQuery": [["URIBuilder", "final String query"]], "getUserInfo": [["String"]], "normalizePath": [["String", "String path"]], "getHost": [["String"]]}, "className": "URIBuilder", "renamed": ["URIBuilder", "function", "(", "final", "String", "arg0", ")", "{", "this", ".", "fragment", "=", "arg0", ";", "this", ".", "encodedFragment", "=", "null", ";", "return", "this", ";", "}"], "nl": "Sets URI fragment. The value is expected to be unescaped and may contain non ASCII characters.", "nlToks": ["Sets", "URI", "fragment", ".", "The", "value", "is", "expected", "to", "be", "unescaped", "and", "may", "contain", "non", "ASCII", "characters", "."], "path": "13383848500/dashihui/tree/master/MIT-Afford/xutils_library/src/main/java/com/lidroid/xutils/http/client/util/URIBuilder.java", "idx": 1994}
{"memberVariables": {"acceptedC14nAlgorithms=new ArrayList<>()": "List<String>", "signatureAlgorithm=\"http://www.w3.org/2001/04/xmldsig-more#rsa-sha256\"": "String", "maximumKeySize=512": "long", "keySize=256": "long", "acceptedSignatureAlgorithms=new ArrayList<>()": "List<String>", "c14nAlgorithm=WSConstants.C14N_EXCL_OMIT_COMMENTS": "String", "digestAlgorithm=WSConstants.SHA256": "String", "minimumKeySize=128": "long", "useKeyValue": "boolean"}, "code": ["void", "function", "(", "long", "keySize", ")", "{", "this", ".", "keySize", "=", "keySize", ";", "}"], "memberFunctions": {"getC14nAlgorithm": [["String"]], "isUseKeyValue": [["boolean"]], "getAcceptedC14nAlgorithms": [["List<String>"]], "setUseKeyValue": [["void", "boolean useKeyValue"]], "getMinimumKeySize": [["long"]], "setAcceptedC14nAlgorithms": [["void", "List<String> acceptedC14nAlgorithms"]], "setC14nAlgorithm": [["void", "String c14nAlgorithm"]], "setDigestAlgorithm": [["void", "String digestAlgorithm"]], "setMinimumKeySize": [["void", "long minimumKeySize"]], "setAcceptedSignatureAlgorithms": [["void", "List<String> acceptedSignatureAlgorithms"]], "getDigestAlgorithm": [["String"]], "getAcceptedSignatureAlgorithms": [["List<String>"]], "getSignatureAlgorithm": [["String"]], "setSignatureAlgorithm": [["void", "String signatureAlgorithm"]], "getKeySize": [["long"]], "setMaximumKeySize": [["void", "long maximumKeySize"]], "getMaximumKeySize": [["long"]]}, "className": "SignatureProperties", "renamed": ["void", "function", "(", "long", "arg0", ")", "{", "this", ".", "keySize", "=", "arg0", ";", "}"], "nl": "Set the key size to use when generating a symmetric key. The default is 256 bits.", "nlToks": ["Set", "the", "key", "size", "to", "use", "when", "generating", "a", "symmetric", "key", ".", "The", "default", "is", "256", "bits", "."], "path": "primesign/cxf/tree/master/services/sts/sts-core/src/main/java/org/apache/cxf/sts/SignatureProperties.java", "idx": 1996}
{"memberVariables": {"MIN_LEN=1": "int", "MAX_LEN=1000": "int", "mSessionTimeoutMs": "int", "DELTA=50": "int"}, "code": ["void", "function", "(", ")", "{", "mSessionTimeoutMs", "=", "Configuration", ".", "getInt", "(", "PropertyKey", ".", "WORKER_SESSION_TIMEOUT_MS", ")", ";", "}"], "memberFunctions": {"constructor": [["void"]], "constructorWithException": [["void"]], "getSessionId": [["void"]], "timeout": [["void"]]}, "className": "SessionInfoTest", "renamed": ["void", "function", "(", ")", "{", "mSessionTimeoutMs", "=", "Configuration", ".", "getInt", "(", "PropertyKey", ".", "WORKER_SESSION_TIMEOUT_MS", ")", ";", "}"], "nl": "Sets up the configuration for Alluxio before a test runs.", "nlToks": ["Sets", "up", "the", "configuration", "for", "Alluxio", "before", "a", "test", "runs", "."], "path": "poemlin/alluxio/tree/master/core/server/src/test/java/alluxio/SessionInfoTest.java", "idx": 1997}
{"memberVariables": {"INSTANCE=new SpringConfigRegistry(true)": "SpringConfigRegistry", "mSpringConfigMap": "Map<SpringConfig,String>"}, "code": ["Map", "<", "SpringConfig", ",", "String", ">", "function", "(", ")", "{", "return", "Collections", ".", "unmodifiableMap", "(", "mSpringConfigMap", ")", ";", "}"], "memberFunctions": {"removeAllSpringConfig": [["void"]], "addSpringConfig": [["boolean", "SpringConfig springConfig", "String configName"]], "removeSpringConfig": [["boolean", "SpringConfig springConfig"]], "getInstance": [["SpringConfigRegistry"]]}, "className": "SpringConfigRegistry", "renamed": ["Map", "<", "SpringConfig", ",", "String", ">", "function", "(", ")", "{", "return", "Collections", ".", "unmodifiableMap", "(", "mSpringConfigMap", ")", ";", "}"], "nl": "retrieve all SpringConfig in the registry", "nlToks": ["retrieve", "all", "SpringConfig", "in", "the", "registry"], "path": "adilek/rebound/tree/master/rebound-core/src/main/java/com/facebook/rebound/SpringConfigRegistry.java", "idx": 1998}
{"memberVariables": {"SUBMIT_MINUTES=1": "int", "KB=1024": "long", "MB=KB * 1024": "long", "SUBMIT_DAYS=24 * 60": "int", "SUBMIT_HOURS=60": "int", "PB=TB * 1024": "long", "TB=GB * 1024": "long", "GB=MB * 1024": "long"}, "code": ["String", "function", "(", ")", "{", "SimpleDateFormat", "sdf", "=", "new", "SimpleDateFormat", "(", "\"yyyy-MM-dd'T'HH:mm:ss'Z'\"", ")", ";", "sdf", ".", "setTimeZone", "(", "TimeZone", ".", "getTimeZone", "(", "\"UTC\"", ")", ")", ";", "return", "sdf", ".", "format", "(", "new", "Date", "(", ")", ")", ";", "}"], "memberFunctions": {"trim": [["String", "String input"]], "concat": [["String", "String s1", "String s2"]], "firstNotNull": [["Object", "Object o1", "Object o2"]], "urlEncode": [["String", "String input"]]}, "className": "ELConstantsFunctions", "renamed": ["String", "function", "(", ")", "{", "SimpleDateFormat", "loc0", "=", "new", "SimpleDateFormat", "(", "\"srini_string\"", ")", ";", "loc0", ".", "setTimeZone", "(", "TimeZone", ".", "getTimeZone", "(", "\"srini_string\"", ")", ")", ";", "return", "loc0", ".", "format", "(", "new", "Date", "(", ")", ")", ";", "}"], "nl": "Return the UTC current date and time in W3C format down to second (yyyy-MM-ddTHH:mm:ssZ). i.e.: 1997-07-16T19:20:30Z", "nlToks": ["Return", "the", "UTC", "current", "date", "and", "time", "in", "W3C", "format", "down", "to", "second", "-LRB-", "yyyy-MM-ddTHH", ":", "mm", ":", "ssZ", "-RRB-", ".", "i.e.", ":", "1997-07-16T19:20:30Z"], "path": "pingpangkuangmo/oozie/tree/master/core/src/main/java/org/apache/oozie/util/ELConstantsFunctions.java", "idx": 1999}
{"memberVariables": {"m_newDirectoryContents": "Collection<File>", "m_storedDirectoryContents": "Collection<File>", "m_log=LoggerFactory.getLogger(getClass())": "Logger", "m_removed": "boolean", "m_directory": "File", "m_markedForRemoval=false": "boolean"}, "code": ["void", "function", "(", ")", "{", "this", ".", "m_storedDirectoryContents", "=", "this", ".", "m_newDirectoryContents", ";", "}"], "memberFunctions": {"removed": [["boolean"]], "hashCode": [["int"]], "equals": [["boolean", "final Object obj"]], "markedForRemoval": [["boolean"]], "getDirectory": [["File"]], "markForRemoval": [["void"]], "shouldUpdate": [["boolean"]], "setRemoved": [["void"]], "getFiles": [["Collection<File>", "final File dir"]]}, "className": "DirectoryUpdateTracker", "renamed": ["void", "function", "(", ")", "{", "this", ".", "m_storedDirectoryContents", "=", "this", ".", "m_newDirectoryContents", ";", "}"], "nl": "Lets this know the application has been updated with what's on disk, and this should synchronize with the last disk check.", "nlToks": ["Lets", "this", "know", "the", "application", "has", "been", "updated", "with", "what", "'s", "on", "disk", ",", "and", "this", "should", "synchronize", "with", "the", "last", "disk", "check", "."], "path": "adamfisk/littleshoot-client/tree/master/client/services/src/main/java/org/lastbamboo/client/services/DirectoryUpdateTracker.java", "idx": 2000}
{"memberVariables": {"mEntries=new ArrayList<E>()": "List<E>", "instances=new HashMap<String,SQLiteUriMatcher>()": "Map<String,SQLiteUriMatcher>", "mBaseContentUri": "Uri", "mAuthority": "String", "mUriMatcher=new UriMatcher(UriMatcher.NO_MATCH)": "UriMatcher", "TAG=SQLiteUriMatcher.class.getSimpleName()": "String"}, "code": ["void", "function", "(", "String", "path", ",", "String", "tablesSQL", ")", "{", "addTablesSQL", "(", "path", ",", "null", ",", "null", ",", "tablesSQL", ")", ";", "}"], "memberFunctions": {"createMatcherEntry": [["E", "String path"], ["E", "String path", "SQLiteMatcherEntry.Type baseType", "String subType"]], "addSQLBuilderCallback": [["void", "String path", "SQLiteMatcherEntry.SQLBuilderCallback callback"], ["void", "String path", "SQLiteMatcherEntry.Type baseType", "String subType", "SQLiteMatcherEntry.SQLBuilderCallback callback"]], "getMatcherEntry": [["E", "Uri uri"]], "getType": [["String", "Uri uri"]], "getEntries": [["List<E>"]], "addMatherEntry": [["void", "E matcherEntry"]], "addRawSQL": [["void", "String path", "String rawSQL"], ["void", "String path", "SQLiteMatcherEntry.Type baseType", "String subType", "String rawSQL"]], "getInstance": [["U", "Class<U> clazz", "String authority"]], "instantiate": [["void"]]}, "className": "SQLiteUriMatcher", "renamed": ["void", "function", "(", "String", "arg0", ",", "String", "arg1", ")", "{", "addTablesSQL", "(", "arg0", ",", "null", ",", "null", ",", "arg1", ")", ";", "}"], "nl": "Add mapping between Uri path and SQL which represent one of more (using INNER JOIN or LEFT OUTER JOIN) tables. The base type and sub type will be guessed.", "nlToks": ["Add", "mapping", "between", "Uri", "path", "and", "SQL", "which", "represent", "one", "of", "more", "-LRB-", "using", "INNER", "JOIN", "or", "LEFT", "OUTER", "JOIN", "-RRB-", "tables", ".", "The", "base", "type", "and", "sub", "type", "will", "be", "guessed", "."], "path": "pop1030123/android-atleap/tree/master/atleap-core/src/main/java/com/blandware/android/atleap/provider/sqlite/SQLiteUriMatcher.java", "idx": 2001}
{"memberVariables": {"individualStructures": "HashMap<String,IndividualStructure>"}, "code": ["void", "function", "(", ")", "{", "individualStructures", ".", "clear", "(", ")", ";", "}"], "memberFunctions": {"removeIndividualStructure": [["void", "String identifier"]], "setIndividualStructures": [["void", "HashMap<String,IndividualStructure> individualStructures"]], "addIndividualStructure": [["void", "String identifier", "IndividualStructure individualStructure"]], "getIndividualStructures": [["HashMap<String,IndividualStructure>"]]}, "className": "IndividualModel", "renamed": ["void", "function", "(", ")", "{", "individualStructures", ".", "clear", "(", ")", ";", "}"], "nl": "Clear the individual model.", "nlToks": ["Clear", "the", "individual", "model", "."], "path": "plt-tud/r43ples/tree/master/src/main/java/de/tud/plt/r43ples/merging/model/structure/IndividualModel.java", "idx": 2002}
{"memberVariables": {"ignoreExceptions=true": "boolean", "sourceCodeFile": "File", "sourceCodeFilename": "String", "languageVersion": "LanguageVersion", "attributes": "ConcurrentMap<String,Object>", "report=new Report()": "Report"}, "code": ["LanguageVersion", "function", "(", ")", "{", "return", "this", ".", "languageVersion", ";", "}"], "memberFunctions": {"setSourceCodeFile": [["void", "File sourceCodeFile"]], "setLanguageVersion": [["void", "LanguageVersion languageVersion"]], "setAttribute": [["boolean", "String name", "Object value"]], "getAttribute": [["Object", "String name"]], "isIgnoreExceptions": [["boolean"]], "setSourceCodeFilename": [["void", "String filename"]], "getSourceCodeFile": [["File"]], "setIgnoreExceptions": [["void", "boolean ignoreExceptions"]], "getReport": [["Report"]], "removeAttribute": [["Object", "String name"]], "getSourceCodeFilename": [["String"]], "setReport": [["void", "Report report"]]}, "className": "RuleContext", "renamed": ["LanguageVersion", "function", "(", ")", "{", "return", "this", ".", "languageVersion", ";", "}"], "nl": "Get the LanguageVersion associated with the current source file.", "nlToks": ["Get", "the", "LanguageVersion", "associated", "with", "the", "current", "source", "file", "."], "path": "adangel/pmd/tree/master/pmd-core/src/main/java/net/sourceforge/pmd/RuleContext.java", "idx": 2003}
{"memberVariables": {"encryptionCryptoProperties": "Object", "bus": "Bus", "signatureCrypto": "Crypto", "signatureProperties=new SignatureProperties()": "SignatureProperties", "LOG=LogUtils.getL7dLogger(StaticSTSProperties.class)": "Logger", "issuer": "String", "encryptionProperties=new EncryptionProperties()": "EncryptionProperties", "callbackHandler": "CallbackHandler", "relationships": "List<Relationship>", "validateUseKey=true": "boolean", "relationshipResolver": "RelationshipResolver", "callbackHandlerClass": "String", "signatureUsername": "String", "encryptionCrypto": "Crypto", "samlRealmCodec": "SAMLRealmCodec", "encryptionUsername": "String", "signatureCryptoProperties": "Object", "identityMapper": "IdentityMapper", "realmParser": "RealmParser"}, "code": ["SignatureProperties", "function", "(", ")", "{", "return", "signatureProperties", ";", "}"], "memberFunctions": {"getRelationshipResolver": [["RelationshipResolver"]], "getBus": [["Bus"]], "setSamlRealmCodec": [["void", "SAMLRealmCodec samlRealmCodec"]], "getResourceManager": [["ResourceManager"]], "setSignaturePropertiesFile": [["void", "String signaturePropertiesFile"]], "setCallbackHandler": [["void", "CallbackHandler callbackHandler"]], "setEncryptionProperties": [["void", "EncryptionProperties encryptionProperties"]], "getEncryptionProperties": [["EncryptionProperties"]], "isValidateUseKey": [["boolean"]], "setSignatureUsername": [["void", "String signatureUsername"]], "getRelationships": [["List<Relationship>"]], "getSamlRealmCodec": [["SAMLRealmCodec"]], "getEncryptionUsername": [["String"]], "setIdentityMapper": [["void", "IdentityMapper identityMapper"]], "setEncryptionPropertiesFile": [["void", "String encryptionPropertiesFile"]], "setEncryptionUsername": [["void", "String encryptionUsername"]], "setCallbackHandlerClass": [["void", "String callbackHandlerClass"]], "getEncryptionCrypto": [["Crypto"]], "setRelationships": [["void", "List<Relationship> relationships"]], "setSignatureProperties": [["void", "SignatureProperties signatureProperties"]], "setRealmParser": [["void", "RealmParser realmParser"]], "getIssuer": [["String"]], "setSignatureCryptoProperties": [["void", "Object signatureCryptoProperties"]], "setSignatureCrypto": [["void", "Crypto signatureCrypto"]], "getIdentityMapper": [["IdentityMapper"]], "setValidateUseKey": [["void", "boolean validateUseKey"]], "configureProperties": [["void"]], "setEncryptionCrypto": [["void", "Crypto encryptionCrypto"]], "getRealmParser": [["RealmParser"]], "getSignatureUsername": [["String"]], "getSignatureCrypto": [["Crypto"]], "setIssuer": [["void", "String issuer"]], "getCallbackHandler": [["CallbackHandler"]], "setEncryptionCryptoProperties": [["void", "Object encryptionCryptoProperties"]], "setBus": [["void", "Bus bus"]]}, "className": "StaticSTSProperties", "renamed": ["SignatureProperties", "function", "(", ")", "{", "return", "signatureProperties", ";", "}"], "nl": "Get the SignatureProperties to use.", "nlToks": ["Get", "the", "SignatureProperties", "to", "use", "."], "path": "primesign/cxf/tree/master/services/sts/sts-core/src/main/java/org/apache/cxf/sts/StaticSTSProperties.java", "idx": 2004}
{"memberVariables": {"fldname": "String", "pred": "Predicate", "tblname": "String", "newval": "Expression"}, "code": ["Predicate", "function", "(", ")", "{", "return", "pred", ";", "}"], "memberFunctions": {"newValue": [["Expression"]], "targetField": [["String"]], "tableName": [["String"]]}, "className": "ModifyData", "renamed": ["Predicate", "function", "(", ")", "{", "return", "pred", ";", "}"], "nl": "Returns the predicate that describes which records should be modified.", "nlToks": ["Returns", "the", "predicate", "that", "describes", "which", "records", "should", "be", "modified", "."], "path": "prerit2803/DBMSProject2/tree/master/simpledb/parse/ModifyData.java", "idx": 2005}
{"memberVariables": {"TOL=1e-9": "double"}, "code": ["boolean", "function", "(", "DenseMatrix64F", "cov", ")", "{", "return", "MatrixFeatures", ".", "isDiagonalPositive", "(", "cov", ")", ";", "}"], "memberFunctions": {"randomVector": [["void", "DenseMatrix64F cov", "DenseMatrix64F vector", "Random rand"]], "invert": [["boolean", "DenseMatrix64F cov"], ["boolean", "final DenseMatrix64F cov", "final DenseMatrix64F cov_inv"]], "isValid": [["int", "DenseMatrix64F cov"]]}, "className": "CovarianceOps", "renamed": ["boolean", "function", "(", "DenseMatrix64F", "arg0", ")", "{", "return", "MatrixFeatures", ".", "isDiagonalPositive", "(", "arg0", ")", ";", "}"], "nl": "This is a fairly light weight check to see of a covariance matrix is valid. It checks to see if the diagonal elements are all positive, which they should be if it is valid.  Not all invalid covariance matrices will be caught by this method.", "nlToks": ["This", "is", "a", "fairly", "light", "weight", "check", "to", "see", "of", "a", "covariance", "matrix", "is", "valid", ".", "It", "checks", "to", "see", "if", "the", "diagonal", "elements", "are", "all", "positive", ",", "which", "they", "should", "be", "if", "it", "is", "valid", ".", "Not", "all", "invalid", "covariance", "matrices", "will", "be", "caught", "by", "this", "method", "."], "path": "adamaulia/efficient-java-matrix-library/tree/master/src/org/ejml/ops/CovarianceOps.java", "idx": 2006}
{"memberVariables": {"DECODER=Charset.forName(\"US-ASCII\").newDecoder()": "CharsetDecoder", "LOG=LoggerFactory.getLogger(MinaUtils.class)": "Logger"}, "code": ["void", "function", "(", "final", "ByteBuffer", "bb", ",", "final", "int", "position", ",", "final", "long", "value", ")", "{", "bb", ".", "putInt", "(", "position", ",", "(", "int", ")", "(", "value", "&", "0xffffffffL", ")", ")", ";", "}"], "memberFunctions": {"splitToByteArrays": [["Collection<byte[]>", "final ByteBuffer buffer", "final int chunkSize"]], "split": [["Collection<ByteBuffer>", "final ByteBuffer buffer", "final int chunkSize"]], "toByteArray": [["byte[]", "final ByteBuffer buf"]], "putUnsignedByte": [["void", "final ByteBuffer bb", "final int value"], ["void", "final ByteBuffer bb", "final int position", "final int value"]], "toAsciiString": [["String", "final ByteBuffer buf"]], "putUnsignedShort": [["void", "final ByteBuffer bb", "final int value"], ["void", "final ByteBuffer bb", "final int position", "final int value"]], "isUdp": [["boolean", "final IoSession session"]], "getString": [["String", "final ByteBuffer buf"]], "createBuffer": [["ByteBuffer", "final ByteBuffer buffer"]], "toBuf": [["ByteBuffer", "final String str"]]}, "className": "MinaUtils", "renamed": ["void", "function", "(", "final", "ByteBuffer", "arg0", ",", "final", "int", "arg1", ",", "final", "long", "arg2", ")", "{", "arg0", ".", "putInt", "(", "arg1", ",", "(", "int", ")", "(", "arg2", "&", "0xffffffffL", ")", ")", ";", "}"], "nl": "Puts an unsigned byte into the buffer.", "nlToks": ["Puts", "an", "unsigned", "byte", "into", "the", "buffer", "."], "path": "adamfisk/littleshoot-client/tree/master/common/util/mina/src/main/java/org/lastbamboo/common/util/mina/MinaUtils.java", "idx": 2010}
{"memberVariables": {"issuedAt=-1": "long", "scopes=Collections.emptyList()": "List<OAuthPermission>", "subject": "UserSubject", "client": "Client", "preAuthorized": "boolean", "tokenString": "String", "lifetime=-1": "long", "tokenSecret": "String"}, "code": ["void", "function", "(", "UserSubject", "subject", ")", "{", "this", ".", "subject", "=", "subject", ";", "}"], "memberFunctions": {"setScopes": [["void", "List<OAuthPermission> scopes"]], "getSubject": [["UserSubject"]], "setPreAuthorized": [["void", "boolean preAuthorized"]], "getTokenKey": [["String"]], "isPreAuthorized": [["boolean"]], "getLifetime": [["long"]], "getClient": [["Client"]], "getIssuedAt": [["long"]], "getTokenSecret": [["String"]], "getScopes": [["List<OAuthPermission>"]]}, "className": "Token", "renamed": ["void", "function", "(", "UserSubject", "arg0", ")", "{", "this", ".", "subject", "=", "arg0", ";", "}"], "nl": "Sets a subject capturing the login name  the end user used to login to the resource server when authorizing a given client request", "nlToks": ["Sets", "a", "subject", "capturing", "the", "login", "name", "the", "end", "user", "used", "to", "login", "to", "the", "resource", "server", "when", "authorizing", "a", "given", "client", "request"], "path": "primesign/cxf/tree/master/rt/rs/security/oauth-parent/oauth/src/main/java/org/apache/cxf/rs/security/oauth/data/Token.java", "idx": 2011}
{"memberVariables": {"scope": "Scriptable", "dim": "Dim", "type": "int", "debugGui": "SwingGui", "EXIT_ACTION=1": "int", "SCOPE_PROVIDER=2": "int"}, "code": ["void", "function", "(", "boolean", "value", ")", "{", "dim", ".", "setBreakOnExceptions", "(", "value", ")", ";", "debugGui", ".", "getMenubar", "(", ")", ".", "getBreakOnExceptions", "(", ")", ".", "setSelected", "(", "value", ")", ";", "}"], "memberFunctions": {"getIn": [["InputStream"]], "setExitAction": [["void", "Runnable r"]], "doBreak": [["void"]], "main": [["void", "String[] args"]], "run": [["void"]], "setBreakOnReturn": [["void", "boolean value"]], "getOut": [["PrintStream"]], "setSize": [["void", "int w", "int h"], ["void", "java.awt.Dimension dimension"]], "contextCreated": [["void", "Context cx"]], "setVisible": [["void", "boolean flag"]], "mainEmbedded": [["void", "String title"], ["void", "ContextFactory factory", "Scriptable scope", "String title"], ["void", "ContextFactory factory", "ScopeProvider scopeProvider", "String title"]], "contextExited": [["void", "Context cx"]], "setBreakOnEnter": [["void", "boolean value"]], "getErr": [["PrintStream"]], "mainEmbeddedImpl": [["void", "ContextFactory factory", "Object scopeProvider", "String title"]], "go": [["void"]], "isVisible": [["boolean"]], "newScopeProvider": [["ScopeProvider", "Scriptable scope"]], "setScopeProvider": [["void", "ScopeProvider p"]], "pack": [["void"]], "clearAllBreakpoints": [["void"]], "contextReleased": [["void", "Context cx"]], "setOptimizationLevel": [["void", "int level"]], "detach": [["void"]], "dispose": [["void"]], "setScope": [["void", "Scriptable scope"]], "attachTo": [["void", "ContextFactory factory"]], "contextEntered": [["void", "Context cx"]], "getScope": [["Scriptable"]], "getDebugFrame": [["JFrame"]]}, "className": "Main", "renamed": ["void", "function", "(", "boolean", "arg0", ")", "{", "dim", ".", "setBreakOnExceptions", "(", "arg0", ")", ";", "debugGui", ".", "getMenubar", "(", ")", ".", "getBreakOnExceptions", "(", ")", ".", "setSelected", "(", "arg0", ")", ";", "}"], "nl": "Sets whether execution should break when a script exception is thrown.", "nlToks": ["Sets", "whether", "execution", "should", "break", "when", "a", "script", "exception", "is", "thrown", "."], "path": "adamfisk/littleshoot-client/tree/master/bin/rhino1_7R2/toolsrc/org/mozilla/javascript/tools/debugger/Main.java", "idx": 2012}
{"memberVariables": {"unitsPerInch=92f": "float", "dotsPerInch=unitsPerInch": "float", "originLat": "float", "dotsPerDeg": "float", "originLon": "float", "lonCorr": "float"}, "code": ["float", "function", "(", "int", "y", ")", "{", "return", "originLat", "-", "y", "/", "dotsPerDeg", ";", "}"], "memberFunctions": {"getDotsPerDeg": [["float"]], "adjustTransformation": [["void", "BoundingBox bb", "int viewWidth", "int viewHeight"]], "setScreenResolution": [["void", "int dotsPerInch"]], "adjust": [["void", "double dx", "double dy"]], "x": [["int", "double lon"]], "y": [["int", "double lat"]], "getDotsPerUnit": [["float"]], "zoom": [["void", "float factor", "int focusX", "int focusY"]], "lon": [["float", "int x"]], "computeScale": [["float"]]}, "className": "CoordTransformer", "renamed": ["float", "function", "(", "int", "arg0", ")", "{", "return", "originLat", "-", "arg0", "/", "dotsPerDeg", ";", "}"], "nl": "Computes the corresponding latitude for a given view y coordinate.", "nlToks": ["Computes", "the", "corresponding", "latitude", "for", "a", "given", "view", "y", "coordinate", "."], "path": "peterplupo/ia201102/tree/master/trabalho1/aimax-osm/src/main/java/aimax/osm/viewer/CoordTransformer.java", "idx": 2014}
{"memberVariables": {"_PurchaseOrder_QNAME=new QName(\"\",\"purchaseOrder\")": "QName", "_Comment_QNAME=new QName(\"\",\"comment\")": "QName"}, "code": ["USAddress", "function", "(", ")", "{", "return", "new", "USAddress", "(", ")", ";", "}"], "memberFunctions": {"createPurchaseOrder": [["JAXBElement<PurchaseOrderType>", "PurchaseOrderType value"]], "createItemsItem": [["Items.Item"]], "createPurchaseOrderType": [["PurchaseOrderType"]], "createItems": [["Items"]], "createPurchaseOrders": [["PurchaseOrders"]], "createComment": [["JAXBElement<String>", "String value"]]}, "className": "ObjectFactory", "renamed": ["USAddress", "function", "(", ")", "{", "return", "new", "USAddress", "(", ")", ";", "}"], "nl": "Create an instance of  {@link USAddress }", "nlToks": ["Create", "an", "instance", "of", "-LCB-", "@link", "USAddress", "-RCB-"], "path": "pmeijer/meta-core/tree/master/meta/DesignDataPackage/tools/jaxb-ri-2.2.6/samples/streaming-unmarshalling/src/primer/ObjectFactory.java", "idx": 2016}
{"memberVariables": {"logger=Logger.getLogger(AbstractExecutionThreadService.class.getName())": "Logger", "delegate=new AbstractService(){\n  @Override protected final void doStart(){\n    Executor executor=MoreExecutors.renamingDecorator(executor(),new Supplier<String>(){\n      @Override public String get(){\n        return serviceName();\n      }\n    }\n);\n    executor.execute(new Runnable(){\n      @Override public void run(){\n        try {\n          startUp();\n          notifyStarted();\n          if (isRunning()) {\n            try {\n              AbstractExecutionThreadService.this.run();\n            }\n catch (            Throwable t) {\n              try {\n                shutDown();\n              }\n catch (              Exception ignored) {\n                logger.log(Level.WARNING,\"Error while attempting to shut down the service after failure.\",ignored);\n              }\n              notifyFailed(t);\n              return;\n            }\n          }\n          shutDown();\n          notifyStopped();\n        }\n catch (        Throwable t) {\n          notifyFailed(t);\n        }\n      }\n    }\n);\n  }\n  @Override protected void doStop(){\n    triggerShutdown();\n  }\n  @Override public String toString(){\n    return AbstractExecutionThreadService.this.toString();\n  }\n}\n": "Service"}, "code": ["void", "function", "(", ")", "{", "}"], "memberFunctions": {"doStop": [["void"]], "run": [["void"]], "failureCause": [["Throwable"]], "serviceName": [["String"]], "triggerShutdown": [["void"]], "startAsync": [["Service"]], "shutDown": [["void"]], "isRunning": [["boolean"]], "executor": [["Executor"]], "doStart": [["void"]], "awaitTerminated": [["void"], ["void", "long timeout", "TimeUnit unit"]], "stopAsync": [["Service"]], "toString": [["String"], ["String"]], "state": [["State"]], "awaitRunning": [["void"], ["void", "long timeout", "TimeUnit unit"]], "addListener": [["void", "Listener listener", "Executor executor"]]}, "className": "AbstractExecutionThreadService", "renamed": ["void", "function", "(", ")", "{", "}"], "nl": "Start the service. This method is invoked on the execution thread. By default this method does nothing.", "nlToks": ["Start", "the", "service", ".", "This", "method", "is", "invoked", "on", "the", "execution", "thread", ".", "By", "default", "this", "method", "does", "nothing", "."], "path": "hazendaz/guava/tree/master/guava/src/com/google/common/util/concurrent/AbstractExecutionThreadService.java", "idx": 2017}
{"memberVariables": {"mArray=new ArrayList<Object>()": "List<Object>"}, "code": ["JSONObject", "function", "(", "int", "index", ")", "{", "Object", "tmp", "=", "mArray", ".", "get", "(", "index", ")", ";", "return", "tmp", "==", "null", "?", "null", ":", "tmp", "instanceof", "JSONObject", "?", "(", "JSONObject", ")", "tmp", ":", "null", ";", "}"], "memberFunctions": {"add": [["void", "Object ele"]], "getLong": [["long", "int index", "long def"]], "getInt": [["int", "int index", "int def"]], "addAll": [["void", "Object[] eles"], ["void", "Collection<?> c"]], "get": [["Object", "int index"]], "length": [["int"]], "getDouble": [["double", "int index", "double def"]], "getArray": [["JSONArray", "int index"]], "getBoolean": [["boolean", "int index", "boolean def"]], "getFloat": [["float", "int index", "float def"]], "getString": [["String", "int index"]], "writeJSON": [["void", "JSONConverter jc", "JSONWriter jb", "boolean writeClass"]]}, "className": "JSONArray", "renamed": ["JSONObject", "function", "(", "int", "arg0", ")", "{", "Object", "loc0", "=", "mArray", ".", "get", "(", "arg0", ")", ";", "return", "loc0", "==", "null", "?", "null", ":", "loc0", "instanceof", "JSONObject", "?", "(", "JSONObject", ")", "loc0", ":", "null", ";", "}"], "nl": "get JSONObject value.", "nlToks": ["get", "JSONObject", "value", "."], "path": "acupple/dubbo/tree/master/dubbo-common/src/main/java/com/alibaba/dubbo/common/json/JSONArray.java", "idx": 2019}
{"memberVariables": {}, "code": ["double", "function", "(", "DenseMatrix64F", "mat", ")", "{", "PermuteArray", "perm", "=", "new", "PermuteArray", "(", "mat", ".", "numCols", ")", ";", "double", "total", "=", "0", ";", "int", "p", "[", "]", "=", "perm", ".", "next", "(", ")", ";", "while", "(", "p", "!=", "null", ")", "{", "double", "prod", "=", "1", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "mat", ".", "numRows", ";", "i", "++", ")", "{", "prod", "*=", "mat", ".", "get", "(", "i", ",", "p", "[", "i", "]", ")", ";", "}", "total", "+=", "perm", ".", "sgn", "(", ")", "*", "prod", ";", "p", "=", "perm", ".", "next", "(", ")", ";", "}", "return", "total", ";", "}"], "memberFunctions": {"recursive": [["double", "DenseMatrix64F mat"]]}, "className": "NaiveDeterminant", "renamed": ["double", "function", "(", "DenseMatrix64F", "arg0", ")", "{", "PermuteArray", "loc0", "=", "new", "PermuteArray", "(", "arg0", ".", "numCols", ")", ";", "double", "loc1", "=", "0", ";", "int", "loc2", "[", "]", "=", "loc0", ".", "next", "(", ")", ";", "while", "(", "loc2", "!=", "null", ")", "{", "double", "loc3", "=", "1", ";", "for", "(", "int", "loc4", "=", "0", ";", "loc4", "<", "arg0", ".", "numRows", ";", "loc4", "++", ")", "{", "loc3", "*=", "arg0", ".", "get", "(", "loc4", ",", "loc2", "[", "loc4", "]", ")", ";", "}", "loc1", "+=", "loc0", ".", "sgn", "(", ")", "*", "loc3", ";", "loc2", "=", "loc0", ".", "next", "(", ")", ";", "}", "return", "loc1", ";", "}"], "nl": " Computes the determinant of the matrix using Leibniz's formula   A direct implementation of Leibniz determinant equation.  This is of little practical use because of its slow runtime of O(n!) where n is the width of the matrix. LU decomposition should be used instead.  One advantage of Leibniz's equation is how simplistic it is.   det(A) = Sum( &sigma; in Sn ; sgn(&sigma;) Prod( i = 1 to n ; ai,&sigma;(i)) )  sgn is the sign function of permutations. +1 or -1 for even and odd permutations a set of permutations. if n=3 then the possible permutations are (1,2,3) (1,3,2), (3,2,1), ... etc  ", "nlToks": ["Computes", "the", "determinant", "of", "the", "matrix", "using", "Leibniz", "'s", "formula", "A", "direct", "implementation", "of", "Leibniz", "determinant", "equation", ".", "This", "is", "of", "little", "practical", "use", "because", "of", "its", "slow", "runtime", "of", "O", "-LRB-", "n", "!", "-RRB-", "where", "n", "is", "the", "width", "of", "the", "matrix", ".", "LU", "decomposition", "should", "be", "used", "instead", ".", "One", "advantage", "of", "Leibniz", "'s", "equation", "is", "how", "simplistic", "it", "is", ".", "det", "-LRB-", "A", "-RRB-", "=", "Sum", "-LRB-", "&", "sigma", ";", "in", "Sn", ";", "sgn", "-LRB-", "&", "sigma", ";-RRB-", "Prod", "-LRB-", "i", "=", "1", "to", "n", ";", "ai", ",", "&", "sigma", ";", "-LRB-", "i", "-RRB-", "-RRB-", "-RRB-", "sgn", "is", "the", "sign", "function", "of", "permutations", ".", "+1", "or", "-1", "for", "even", "and", "odd", "permutations", "a", "set", "of", "permutations", ".", "if", "n", "=", "3", "then", "the", "possible", "permutations", "are", "-LRB-", "1,2,3", "-RRB-", "-LRB-", "1,3,2", "-RRB-", ",", "-LRB-", "3,2,1", "-RRB-", ",", "...", "etc"], "path": "adamaulia/efficient-java-matrix-library/tree/master/src/org/ejml/alg/dense/misc/NaiveDeterminant.java", "idx": 2020}
{"memberVariables": {"customDishRepository": "CustomDishRepository", "simpleDishRepository": "SimpleDishRepository", "dishRepository": "DishRepository", "dishFilterService": "DishFilterService", "log=LoggerFactory.getLogger(DishService.class)": "Logger"}, "code": ["Dish", "function", "(", "SiteUrl", "siteUrl", ")", "{", "return", "dishRepository", ".", "findBySiteUrl", "(", "siteUrl", ")", ";", "}"], "memberFunctions": {"findAllSimpleDish": [["Page<SimpleDish>", "Pageable pageable"]], "findSimpleById": [["SimpleDish", "String id"]], "findByHashes": [["Page<SimpleDish>", "String hashes", "Pageable pageable"]], "save": [["Dish", "Dish dish"]], "findOne": [["Dish", "String id"]], "deleteAll": [["void"]], "deleteByHost": [["void", "String host"]], "searchIngredientFullText": [["Page<SimpleDish>", "LinkedMultiValueMap<String,String> requestParams", "Pageable pageable"]], "findAll": [["Page<Dish>", "Pageable pageable"]], "delete": [["void", "String id"]], "findBySiteUrlId": [["Dish", "String siteUrlId"]], "findOneById": [["Dish", "String id"]], "findByHashesLimit": [["List<SimpleDish>", "String hashes", "int limit"]], "findByProcedureStepsLessThanLimit": [["List<SimpleDish>", "int steps", "int limit"]], "findOnlyIdByProcedureStepsLessThan": [["List<SimpleDish>", "int steps", "Pageable pageable"]], "findByTitleUrl": [["Dish", "String titleUrl"]], "countByTitleUrl": [["Long", "String titleUrl"]], "findByPreparationStepsLessThanLimit": [["List<SimpleDish>", "int steps", "int limit"]], "findOnlyIdByPreparationStepsLessThan": [["List<SimpleDish>", "int steps", "Pageable pageable"]], "findOnlyIdByHashes": [["List<SimpleDish>", "String hashes", "Pageable pageable"]]}, "className": "DishService", "renamed": ["Dish", "function", "(", "SiteUrl", "arg0", ")", "{", "return", "dishRepository", ".", "findBySiteUrl", "(", "arg0", ")", ";", "}"], "nl": "Get a dish by site url", "nlToks": ["Get", "a", "dish", "by", "site", "url"], "path": "pigkey/kitchen/tree/master/app/src/main/java/com/kitchen/app/service/DishService.java", "idx": 2021}
{"memberVariables": {"LOG=Logger.getLogger(ItemUID.class)": "Logger", "MYCLASS=(new ItemUID()).getClass()": "Class", "id": "String"}, "code": ["String", "function", "(", ")", "{", "return", "(", "new", "java", ".", "rmi", ".", "server", ".", "UID", "(", ")", ")", ".", "toString", "(", ")", ";", "}"], "memberFunctions": {"readObjectID": [["String", "Object obj"]], "createObjectID": [["String", "Object obj"]], "toString": [["String"]], "getIDOfObject": [["String", "Object obj", "boolean canCreate"]]}, "className": "ItemUID", "renamed": ["String", "function", "(", ")", "{", "return", "(", "new", "java", ".", "rmi", ".", "server", ".", "UID", "(", ")", ")", ".", "toString", "(", ")", ";", "}"], "nl": "Generates a new unique ID and returns it as a String. The contents of the String is supposed to be unique with respect to all Strings generated by other instances of this class. TODO: We should consider using java.util.UUID for this instead.", "nlToks": ["Generates", "a", "new", "unique", "ID", "and", "returns", "it", "as", "a", "String", ".", "The", "contents", "of", "the", "String", "is", "supposed", "to", "be", "unique", "with", "respect", "to", "all", "Strings", "generated", "by", "other", "instances", "of", "this", "class", ".", "TODO", ":", "We", "should", "consider", "using", "java.util.UUID", "for", "this", "instead", "."], "path": "pichiliani/CoArgoUML/tree/master/v0.24/fonte/src/argouml-app/src/org/argouml/util/ItemUID.java", "idx": 2023}
{"memberVariables": {"limit": "int", "name": "String", "flushed": "boolean", "errorCount": "int"}, "code": ["void", "function", "(", ")", "{", "flushed", "=", "true", ";", "}"], "memberFunctions": {"enqueue": [["void", "int type", "String message"], ["void", "int type", "String message", "Position position"], ["void", "ErrorInfo e"]], "displayError": [["void", "ErrorInfo error"]], "hasErrors": [["boolean"]], "errorCount": [["int"]], "tooManyErrors": [["void", "ErrorInfo lastError"]]}, "className": "AbstractErrorQueue", "renamed": ["void", "function", "(", ")", "{", "flushed", "=", "true", ";", "}"], "nl": "This method is called to flush the error queue. Subclasses may want to print summary information in this method.", "nlToks": ["This", "method", "is", "called", "to", "flush", "the", "error", "queue", ".", "Subclasses", "may", "want", "to", "print", "summary", "information", "in", "this", "method", "."], "path": "polyglot-compiler/polyglot/tree/master/src/polyglot/util/AbstractErrorQueue.java", "idx": 2024}
{"memberVariables": {"RETVAL_MALFORMED=3": "int", "RETVAL_OK=0": "int", "RETVAL_ERROR=1": "int", "RETVAL_NOENTRY=2": "int"}, "code": ["void", "function", "(", "long", "xid", ",", "int", "retval", ",", "ServiceInfo", "[", "]", "info", ")", "{", "}"], "memberFunctions": {"onServiceRegistration": [["void", "ServiceID id", "int flags", "int prefixBits", "InetAddress addr", "InetAddress oldAddr"]], "onServiceRemove": [["void", "long xid", "int retval", "ServiceInfoStat[] info"]], "onServiceUnregistration": [["void", "ServiceID id", "int flags", "int prefixBits", "InetAddress addr"]], "onServiceDelayed": [["void", "long xid", "long pktId", "ServiceID service"]], "onServiceModify": [["void", "long xid", "int retval", "ServiceInfoStat[] info"]], "onFlowStatUpdate": [["void", "long xid", "int retval", "FlowStat[] stats", "boolean more"]], "getRetvalString": [["String", "int retval"]], "onServiceGet": [["void", "long xid", "int retval", "ServiceInfo[] info"]]}, "className": "HostCtrlCallbacks", "renamed": ["void", "function", "(", "long", "arg0", ",", "int", "arg1", ",", "ServiceInfo", "[", "]", "arg2", ")", "{", "}"], "nl": "Called as a result of a previous service addition request.", "nlToks": ["Called", "as", "a", "result", "of", "a", "previous", "service", "addition", "request", "."], "path": "princeton-sns/serval/tree/master/src/libservalctrl/java/src/org/servalarch/servalctrl/HostCtrlCallbacks.java", "idx": 2026}
{"memberVariables": {"clientIpAddress": "String", "clientId": "String", "allowedGrantTypes=new LinkedList<String>()": "List<String>", "isConfidential": "boolean", "applicationCertificates=new LinkedList<String>()": "List<String>", "subject": "UserSubject", "redirectUris=new LinkedList<String>()": "List<String>", "registeredScopes=new LinkedList<String>()": "List<String>", "applicationLogoUri": "String", "serialVersionUID=-5550840247125850922L": "long", "applicationDescription": "String", "registeredAudiences=new LinkedList<String>()": "List<String>", "applicationWebUri": "String", "clientSecret": "String", "properties=new HashMap<String,String>()": "Map<String,String>", "applicationName": "String"}, "code": ["List", "<", "String", ">", "function", "(", ")", "{", "return", "registeredScopes", ";", "}"], "memberFunctions": {"getSubject": [["UserSubject"]], "getApplicationName": [["String"]], "setSubject": [["void", "UserSubject subject"]], "getClientId": [["String"]], "getAllowedGrantTypes": [["List<String>"]], "setApplicationDescription": [["void", "String applicationDescription"]], "setRegisteredScopes": [["void", "List<String> registeredScopes"]], "setProperties": [["void", "Map<String,String> properties"]], "getClientIpAddress": [["String"]], "getApplicationDescription": [["String"]], "setApplicationCertificates": [["void", "List<String> applicationCertificates"]], "getApplicationWebUri": [["String"]], "setApplicationLogoUri": [["void", "String logoPath"]], "setConfidential": [["void", "boolean isConf"]], "getRedirectUris": [["List<String>"]], "setApplicationWebUri": [["void", "String applicationWebUri"]], "setClientIpAddress": [["void", "String clientIpAddress"]], "getApplicationLogoUri": [["String"]], "setClientSecret": [["void", "String id"]], "setAllowedGrantTypes": [["void", "List<String> allowedGrantTypes"]], "isConfidential": [["boolean"]], "getClientSecret": [["String"]], "setApplicationName": [["void", "String applicationName"]], "getProperties": [["Map<String,String>"]], "setRedirectUris": [["void", "List<String> redirectUris"]], "getRegisteredAudiences": [["List<String>"]], "setRegisteredAudiences": [["void", "List<String> registeredAudiences"]], "getApplicationCertificates": [["List<String>"]], "setClientId": [["void", "String id"]]}, "className": "Client", "renamed": ["List", "<", "String", ">", "function", "(", ")", "{", "return", "registeredScopes", ";", "}"], "nl": "Get the list of registered scopes", "nlToks": ["Get", "the", "list", "of", "registered", "scopes"], "path": "primesign/cxf/tree/master/rt/rs/security/oauth-parent/oauth2/src/main/java/org/apache/cxf/rs/security/oauth2/common/Client.java", "idx": 2029}
{"memberVariables": {"LOG=Logger.getLogger(TempFileUtils.class)": "Logger"}, "code": ["void", "function", "(", "File", "dir", ")", "{", "try", "{", "traverseDir", "(", "dir", ",", "new", "FileAction", "(", ")", "{", "public", "void", "act", "(", "File", "f", ")", "{", "f", ".", "delete", "(", ")", ";", "}", "}", ")", ";", "}", "catch", "(", "IOException", "ioe", ")", "{", "LOG", ".", "error", "(", "\"Exception deleting directory\"", ",", "ioe", ")", ";", "}", "}"], "memberFunctions": {"act": [["void", "File file"]], "traverseDir": [["void", "File dir", "FileAction action"]], "readAllFiles": [["Collection<SourceUnit>", "File dir"]], "createTempDir": [["File"]], "readFileNames": [["Collection<String>", "File dir"]]}, "className": "TempFileUtils", "renamed": ["void", "function", "(", "File", "arg0", ")", "{", "try", "{", "traverseDir", "(", "arg0", ",", "new", "FileAction", "(", ")", "{", "public", "void", "act", "(", "File", "arg1", ")", "{", "arg1", ".", "delete", "(", ")", ";", "}", "}", ")", ";", "}", "catch", "(", "IOException", "loc0", ")", "{", "LOG", ".", "error", "(", "\"srini_string\"", ",", "loc0", ")", ";", "}", "}"], "nl": "Deletes a directory and all of its contents.", "nlToks": ["Deletes", "a", "directory", "and", "all", "of", "its", "contents", "."], "path": "pichiliani/CoArgoUML/tree/master/v0.24/fonte/src/argouml-app/src/org/argouml/uml/generator/TempFileUtils.java", "idx": 2030}
{"memberVariables": {"FORMAT=Pattern.compile(\"((\\\\w+\\\\.)+|\\\\.)((\\\\w+)(\\\\$\\\\w+)*)(#(\\\\w+)\\\\(((\\\\w+)(, \\\\w+)*)?\\\\))?\")": "Pattern", "packages=null": "String[]", "operation=null": "String", "classes=new String[1]": "String[]"}, "code": ["String", "function", "(", ")", "{", "return", "operation", ";", "}"], "memberFunctions": {"makeOuterClassOf": [["QualifiedName", "ASTClassOrInterfaceDeclaration node"]], "isClass": [["boolean"]], "makeOperationOf": [["QualifiedName", "ASTMethodDeclaration node"], ["QualifiedName", "ASTConstructorDeclaration node"], ["QualifiedName", "QualifiedName parent", "String opName", "ASTFormalParameters params"]], "parseName": [["QualifiedName", "String name"]], "getOperationName": [["String", "String methodName", "ASTFormalParameters params"]], "isOperation": [["boolean"]], "makeNestedClassOf": [["QualifiedName", "QualifiedName parent", "String className"]], "hashCode": [["int"]], "equals": [["boolean", "Object o"]], "getPackages": [["String[]"]], "toString": [["String"]], "getClasses": [["String[]"]], "makeClassOf": [["QualifiedName", "Class<?> clazz"]]}, "className": "QualifiedName", "renamed": ["String", "function", "(", ")", "{", "return", "operation", ";", "}"], "nl": "Returns the operation string. @return The operation string.", "nlToks": ["Returns", "the", "operation", "string", ".", "@return", "The", "operation", "string", "."], "path": "adangel/pmd/tree/master/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/ast/QualifiedName.java", "idx": 2031}
{"memberVariables": {"TYPE_STRING=3": "int", "valueBoolean": "boolean", "TYPE_DOUBLE_UNSIGNED=7": "int", "TYPE_INTEGER_UNSIGNED=6": "int", "valid=true": "boolean", "TYPE_RADIO=4": "int", "TYPE_DOUBLE_SIGNED=1": "int", "description": "String", "type": "int", "valueCheck": "boolean[]", "serialVersionUID=-5926084016803995902L": "long", "TYPE_CHECK=5": "int", "invalidationMessage": "String", "valueString": "String", "options": "String[]", "valueDouble": "double", "valueInteger": "int", "TYPE_INTEGER_SIGNED=0": "int", "TYPE_BOOLEAN=2": "int"}, "code": ["void", "function", "(", ")", "{", "valid", "=", "true", ";", "}"], "memberFunctions": {"isValid": [["boolean"]], "setInvalidationMessage": [["void", "final String message"]], "getDouble": [["Double"]], "getDefault": [["String"]], "getInteger": [["Integer"]], "setDescription": [["void", "final String description"]], "getString": [["String"]], "invalidate": [["void", "final String warning"]], "isInvalid": [["boolean"]], "getDescription": [["String"]], "getSelected": [["Integer"]], "getType": [["int"]], "setValue": [["void", "final boolean value"], ["void", "final boolean[] value"], ["void", "final double value"], ["void", "final int value"], ["void", "final String value"]], "getInvalidationMessage": [["String"]], "setOptions": [["void", "final String[] options"]], "getBoolean": [["Boolean"]], "getOptions": [["String[]"]], "getChecked": [["boolean[]"]]}, "className": "Argument", "renamed": ["void", "function", "(", ")", "{", "valid", "=", "true", ";", "}"], "nl": "Argument will be declared valid.", "nlToks": ["Argument", "will", "be", "declared", "valid", "."], "path": "phpvdb/buffer_bci/tree/master/java/android/FieldTripClientsService/app/src/main/java/edu/nl/ru/fieldtripclientsservice/base/Argument.java", "idx": 2035}
{"memberVariables": {"rondas=new AtomicLong(0)": "AtomicLong", "pilotos": "List<? extends Piloto>", "timeout=new AtomicLong(0)": "AtomicLong", "observadores": "List<Observador>", "partida": "Partida", "semaforo": "Semaphore"}, "code": ["void", "function", "(", ")", "{", "Collections", ".", "shuffle", "(", "this", ".", "pilotos", ")", ";", "for", "(", "Piloto", "piloto", ":", "this", ".", "getPilotos", "(", ")", ")", "{", "this", ".", "runTurno", "(", "piloto", ")", ";", "}", "this", ".", "notificarObservadoresRondaTerminada", "(", "this", ".", "rondas", ".", "incrementAndGet", "(", ")", ")", ";", "}"], "memberFunctions": {"rondaTerminada": [["void", "Motor motor", "long ronda"]], "exception": [["void", "Motor motor", "long ronda", "Piloto piloto", "Comando comando", "Exception exception"]], "agregarObservador": [["void", "Observador observador"]], "notificarObservadoresException": [["void", "Piloto piloto", "Comando comando", "Exception exception"]], "run": [["void"]], "setPartida": [["void", "Partida partida"]], "finalizacion": [["void", "Motor motor"]], "runTurno": [["void", "Piloto piloto"]], "setPilotos": [["void", "List<? extends Piloto> pilotos"]], "setTimeout": [["void", "long timeout"]], "getRondas": [["long"]], "notificarObservadoresRondaTerminada": [["void", "long ronda"]], "getPartida": [["Partida"]], "getObservadores": [["List<Observador>"]], "notificarObservadoresFinalizacion": [["void"]], "getTimeout": [["long"]], "getPilotos": [["List<? extends Piloto>"]], "getSemaforo": [["Semaphore"]]}, "className": "Motor", "renamed": ["void", "function", "(", ")", "{", "Collections", ".", "shuffle", "(", "this", ".", "pilotos", ")", ";", "for", "(", "Piloto", "loc0", ":", "this", ".", "getPilotos", "(", ")", ")", "{", "this", ".", "runTurno", "(", "loc0", ")", ";", "}", "this", ".", "notificarObservadoresRondaTerminada", "(", "this", ".", "rondas", ".", "incrementAndGet", "(", ")", ")", ";", "}"], "nl": "Ejecuta una ronda.", "nlToks": ["Ejecuta", "una", "ronda", "."], "path": "plataforma-educativa/batalla-espacial/tree/master/src/main/java/ar/com/comunidadesfera/batallaespacial/juego/Motor.java", "idx": 2036}
{"memberVariables": {"status=-1": "int", "INFINITY=Integer.MAX_VALUE": "int", "request=null": "HttpServletRequest", "base=null": "URI", "response=null": "HttpServletResponse"}, "code": ["String", "function", "(", ")", "{", "final", "String", "path", "=", "this", ".", "getOriginalPath", "(", ")", ";", "if", "(", "!", "path", ".", "endsWith", "(", "\"/\"", ")", ")", "return", "path", ";", "return", "path", ".", "substring", "(", "0", ",", "path", ".", "length", "(", ")", "-", "1", ")", ";", "}"], "memberFunctions": {"lookup": [["URI", "DAVResource resource"]], "getDepth": [["int"]], "read": [["InputStream"]], "getDestination": [["URI"]], "getMethod": [["String"]], "getStatus": [["int"]], "hasRequestBody": [["boolean"]], "setStatus": [["void", "int status"]], "setHeader": [["void", "String name", "String value"]], "getOverwrite": [["boolean"]], "getOriginalPath": [["String"]], "setContentType": [["void", "String type"]], "write": [["OutputStream"], ["PrintWriter", "String encoding"]], "getIfModifiedSince": [["Date"]]}, "className": "DAVTransaction", "renamed": ["String", "function", "(", ")", "{", "final", "String", "loc0", "=", "this", ".", "getOriginalPath", "(", ")", ";", "if", "(", "!", "loc0", ".", "endsWith", "(", "\"srini_string\"", ")", ")", "return", "loc0", ";", "return", "loc0", ".", "substring", "(", "0", ",", "loc0", ".", "length", "(", ")", "-", "1", ")", ";", "}"], "nl": "Return the path originally requested by the client.", "nlToks": ["Return", "the", "path", "originally", "requested", "by", "the", "client", "."], "path": "pfumagalli/webdav/tree/master/src/main/java/it/could/webdav/DAVTransaction.java", "idx": 2037}
{"memberVariables": {}, "code": ["void", "function", "(", ")", "{", "long", "containerId", "=", "1", ";", "long", "fileId", "=", "IdUtils", ".", "createFileId", "(", "containerId", ")", ";", "Assert", ".", "assertNotEquals", "(", "-", "1", ",", "fileId", ")", ";", "}"], "memberFunctions": {"getRandomNonNegativeLong": [["void"]], "createRpcId": [["void"]]}, "className": "IdUtilsTest", "renamed": ["void", "function", "(", ")", "{", "long", "loc0", "=", "1", ";", "long", "loc1", "=", "IdUtils", ".", "createFileId", "(", "loc0", ")", ";", "Assert", ".", "assertNotEquals", "(", "-", "1", ",", "loc1", ")", ";", "}"], "nl": "Tests if output of  {@link IdUtils#createFileId(long)} is valid.", "nlToks": ["Tests", "if", "output", "of", "-LCB-", "@link", "IdUtils", "#createFileId", "-LRB-", "long", "-RRB-", "-RCB-", "is", "valid", "."], "path": "poemlin/alluxio/tree/master/core/common/src/test/java/alluxio/util/IdUtilsTest.java", "idx": 2038}
{"memberVariables": {"propertyDescriptors=new ArrayList<>()": "List<PropertyDescriptor<?>>", "propertyValuesByDescriptor=new HashMap<>()": "Map<PropertyDescriptor<?>,Object>"}, "code": ["List", "<", "PropertyDescriptor", "<", "?", ">>", "function", "(", ")", "{", "return", "new", "ArrayList", "<", ">", "(", "propertyDescriptors", ")", ";", "}"], "memberFunctions": {"copyPropertyValues": [["Map<PropertyDescriptor<?>,Object>"]], "usesDefaultValues": [["boolean"]], "getName": [["String"]], "getPropertyDescriptor": [["PropertyDescriptor<?>", "String name"]], "getProperty": [["T", "PropertyDescriptor<T> propertyDescriptor"]], "definePropertyDescriptor": [["void", "PropertyDescriptor<?> propertyDescriptor"]], "getPropertyDescriptors": [["List<PropertyDescriptor<?>>"]], "dysfunctionReason": [["String"]], "hasDescriptor": [["boolean", "PropertyDescriptor<?> descriptor"]], "useDefaultValueFor": [["void", "PropertyDescriptor<?> desc"]], "ignoredProperties": [["Set<PropertyDescriptor<?>>"]], "setProperty": [["void", "PropertyDescriptor<T> propertyDescriptor", "T value"]], "checkValidPropertyDescriptor": [["void", "PropertyDescriptor<?> propertyDescriptor"]], "getPropertiesByPropertyDescriptor": [["Map<PropertyDescriptor<?>,Object>"]]}, "className": "AbstractPropertySource", "renamed": ["List", "<", "PropertyDescriptor", "<", "?", ">>", "function", "(", ")", "{", "return", "new", "ArrayList", "<", ">", "(", "propertyDescriptors", ")", ";", "}"], "nl": "Creates a copied list of the property descriptors and returns it.", "nlToks": ["Creates", "a", "copied", "list", "of", "the", "property", "descriptors", "and", "returns", "it", "."], "path": "adangel/pmd/tree/master/pmd-core/src/main/java/net/sourceforge/pmd/AbstractPropertySource.java", "idx": 2040}
{"memberVariables": {"reader": "Reader", "dataSourceName": "String"}, "code": ["InputStream", "function", "(", ")", "{", "return", "new", "ReaderInputStream", "(", "reader", ")", ";", "}"], "memberFunctions": {"getDataSourceName": [["String"]], "getNiceFileName": [["String", "boolean shortNames", "String inputFileName"]], "toString": [["String"]], "setDataSourceName": [["void", "String dataSourceName"]]}, "className": "ReaderDataSource", "renamed": ["InputStream", "function", "(", ")", "{", "return", "new", "ReaderInputStream", "(", "reader", ")", ";", "}"], "nl": "Convert the Reader into an InputStream.  Note: This uses the default encoding. ", "nlToks": ["Convert", "the", "Reader", "into", "an", "InputStream", ".", "Note", ":", "This", "uses", "the", "default", "encoding", "."], "path": "adangel/pmd/tree/master/pmd-core/src/main/java/net/sourceforge/pmd/util/datasource/ReaderDataSource.java", "idx": 2041}
{"memberVariables": {"expDataUnitId": "BigDecimal", "dataUnitId": "BigDecimal", "createTimeStamp": "Timestamp", "actValue": "String", "errorCode": "String", "srcFileName": "String", "errorMsg": "String", "failedAttrib": "String", "expDataSetId": "BigDecimal", "regPclTestResult": "RegPCLTestResultEntity", "dataSetId": "BigDecimal", "id": "RegPCLTestResultDetailsEntityPK", "serialVersionUID=3309870439513279844L": "long", "expValue": "String"}, "code": ["void", "function", "(", "String", "failedAttrib", ")", "{", "this", ".", "failedAttrib", "=", "failedAttrib", ";", "}"], "memberFunctions": {"updateCreateTimeStamp": [["void"]], "setActValue": [["void", "String actValue"]], "getDataSetId": [["BigDecimal"]], "getId": [["RegPCLTestResultDetailsEntityPK"]], "setSrcFileName": [["void", "String srcFileName"]], "getRegPclTestResult": [["RegPCLTestResultEntity"]], "setExpValue": [["void", "String expValue"]], "getSrcFileName": [["String"]], "setErrorCode": [["void", "String errorCode"]], "getDataUnitId": [["BigDecimal"]], "setErrorMsg": [["void", "String errorMsg"]], "getErrorCode": [["String"]], "setDataUnitId": [["void", "BigDecimal dataUnitId"]], "setId": [["void", "RegPCLTestResultDetailsEntityPK id"]], "getExpDataSetId": [["BigDecimal"]], "getErrorMsg": [["String"]], "getActValue": [["String"]], "setRegPclTestResult": [["void", "RegPCLTestResultEntity regPclTestResult"]], "getExpValue": [["String"]], "setCreateTimeStamp": [["void", "Timestamp createTimeStamp"]], "getExpDataUnitId": [["BigDecimal"]], "getCreateTimeStamp": [["Timestamp"]], "getFailedAttrib": [["String"]], "setExpDataSetId": [["void", "BigDecimal expDataSetId"]], "setDataSetId": [["void", "BigDecimal dataSetId"]], "setExpDataUnitId": [["void", "BigDecimal expDataUnitId"]]}, "className": "RegPCLTestResultDetailsEntity", "renamed": ["void", "function", "(", "String", "arg0", ")", "{", "this", ".", "failedAttrib", "=", "arg0", ";", "}"], "nl": "Sets the failed attrib.", "nlToks": ["Sets", "the", "failed", "attrib", "."], "path": "pkesireddy/portico_fletcher/tree/master/FetcherTesterService/src/main/java/org/ithaka/cm/fetchertester/entity/RegPCLTestResultDetailsEntity.java", "idx": 2042}
{"memberVariables": {"manager": "ProfileManager"}, "code": ["void", "function", "(", "Profile", "profile", ")", "{", "getManager", "(", ")", ".", "registerProfile", "(", "profile", ")", ";", "}"], "memberFunctions": {"getManager": [["ProfileManager"]], "notInitialized": [["void", "String string"]], "isInitiated": [["boolean"]], "reset": [["void"]], "setManager": [["void", "ProfileManager profileManager"]], "remove": [["void", "Profile profile"]]}, "className": "ProfileFacade", "renamed": ["void", "function", "(", "Profile", "arg0", ")", "{", "getManager", "(", ")", ".", "registerProfile", "(", "arg0", ")", ";", "}"], "nl": "Register a profile in the  {@link ProfileManager}.", "nlToks": ["Register", "a", "profile", "in", "the", "-LCB-", "@link", "ProfileManager", "-RCB-", "."], "path": "pichiliani/CoArgoUML/tree/master/v0.24/fonte/src/argouml-app/src/org/argouml/profile/ProfileFacade.java", "idx": 2045}
{"memberVariables": {}, "code": ["boolean", "function", "(", "Method", "bridgeMethod", ",", "Method", "candidateMethod", ",", "Map", "<", "TypeVariable", ",", "Type", ">", "typeVariableMap", ")", "{", "if", "(", "isResolvedTypeMatch", "(", "candidateMethod", ",", "bridgeMethod", ",", "typeVariableMap", ")", ")", "{", "return", "true", ";", "}", "Method", "method", "=", "findGenericDeclaration", "(", "bridgeMethod", ")", ";", "return", "(", "method", "!=", "null", "&&", "isResolvedTypeMatch", "(", "method", ",", "candidateMethod", ",", "typeVariableMap", ")", ")", ";", "}"], "memberFunctions": {"searchCandidates": [["Method", "List<Method> candidateMethods", "Method bridgeMethod"]], "isVisibilityBridgeMethodPair": [["boolean", "Method bridgeMethod", "Method bridgedMethod"]], "searchForMatch": [["Method", "Class type", "Method bridgeMethod"]], "isBridgedCandidateFor": [["boolean", "Method candidateMethod", "Method bridgeMethod"]], "findBridgedMethod": [["Method", "Method bridgeMethod"]], "findGenericDeclaration": [["Method", "Method bridgeMethod"]], "isResolvedTypeMatch": [["boolean", "Method genericMethod", "Method candidateMethod", "Map<TypeVariable,Type> typeVariableMap"]]}, "className": "BridgeMethodResolver", "renamed": ["boolean", "function", "(", "Method", "arg0", ",", "Method", "arg1", ",", "Map", "<", "TypeVariable", ",", "Type", ">", "arg2", ")", "{", "if", "(", "isResolvedTypeMatch", "(", "arg1", ",", "arg0", ",", "arg2", ")", ")", "{", "return", "true", ";", "}", "Method", "loc0", "=", "findGenericDeclaration", "(", "arg0", ")", ";", "return", "(", "loc0", "!=", "null", "&&", "isResolvedTypeMatch", "(", "loc0", ",", "arg1", ",", "arg2", ")", ")", ";", "}"], "nl": "Determines whether or not the bridge  {@link Method} is the bridge for thesupplied candidate  {@link Method}.", "nlToks": ["Determines", "whether", "or", "not", "the", "bridge", "-LCB-", "@link", "Method", "-RCB-", "is", "the", "bridge", "for", "thesupplied", "candidate", "-LCB-", "@link", "Method", "-RCB-", "."], "path": "16ren/Android-Next/tree/master/bus/src/main/java/com/mcxiaoke/next/bus/support/BridgeMethodResolver.java", "idx": 2046}
{"memberVariables": {"xPosition": "int", "dirArriba": "boolean", "canvas": "Canvas", "ySpeed=1": "int", "ballDegradation=2": "int", "color": "Color", "diameter": "int", "dirIzquierda": "boolean", "yPosition": "int", "groundPosition": "int", "GRAVITY=0": "int", "circle": "Ellipse2D.Double"}, "code": ["void", "function", "(", ")", "{", "canvas", ".", "setForegroundColor", "(", "color", ")", ";", "canvas", ".", "fillCircle", "(", "xPosition", ",", "yPosition", ",", "diameter", ")", ";", "}"], "memberFunctions": {"erase": [["void"]], "move": [["void"]], "getXPosition": [["int"]], "getYPosition": [["int"]]}, "className": "BoxBall", "renamed": ["void", "function", "(", ")", "{", "canvas", ".", "setForegroundColor", "(", "color", ")", ";", "canvas", ".", "fillCircle", "(", "xPosition", ",", "yPosition", ",", "diameter", ")", ";", "}"], "nl": "Draw this ball at its current position onto the canvas.", "nlToks": ["Draw", "this", "ball", "at", "its", "current", "position", "onto", "the", "canvas", "."], "path": "pizcogirl/100/tree/master/BoxBall.java", "idx": 2047}
{"memberVariables": {"functions": "Map<String,Method>", "current=new ThreadLocal<ELEvaluator>()": "ThreadLocal<ELEvaluator>", "context": "Context", "evaluator=new ExpressionEvaluatorImpl()": "ExpressionEvaluator", "vars": "Map<String,Object>"}, "code": ["Object", "function", "(", "String", "name", ")", "{", "if", "(", "!", "vars", ".", "containsKey", "(", "name", ")", ")", "{", "throw", "new", "ELException", "(", "XLog", ".", "format", "(", "\"variable [{0}] cannot be resolved\"", ",", "name", ")", ")", ";", "}", "return", "vars", ".", "get", "(", "name", ")", ";", "}"], "memberFunctions": {"setVariables": [["void", "Map<String,Object> vars"]], "resolveFunction": [["Method", "String prefix", "String name"]], "addFunction": [["void", "String prefix", "String functionName", "Method method"]], "setVariable": [["void", "String name", "Object value"], ["void", "String name", "Object value"]], "getCurrent": [["ELEvaluator"]], "getVariable": [["Object", "String name"], ["Object", "String name"]], "getContext": [["Context"]], "evaluate": [["T", "String expr", "Class<T> clazz"]]}, "className": "ELEvaluator", "renamed": ["Object", "function", "(", "String", "arg0", ")", "{", "if", "(", "!", "vars", ".", "containsKey", "(", "arg0", ")", ")", "{", "throw", "new", "ELException", "(", "XLog", ".", "format", "(", "\"srini_string\"", ",", "arg0", ")", ")", ";", "}", "return", "vars", ".", "get", "(", "arg0", ")", ";", "}"], "nl": "Resolve a variable name. Used by the EL evaluator implemenation. ", "nlToks": ["Resolve", "a", "variable", "name", ".", "Used", "by", "the", "EL", "evaluator", "implemenation", "."], "path": "pingpangkuangmo/oozie/tree/master/core/src/main/java/org/apache/oozie/util/ELEvaluator.java", "idx": 2048}
{"memberVariables": {}, "code": ["void", "function", "(", ")", "{", "final", "Path", "path", "=", "new", "Path", "(", "\"hdfs://localhost:1234/foo/bar/baz?please=dont&show=up\"", ")", ";", "final", "String", "output", "=", "HadoopUtils", ".", "getPathWithoutScheme", "(", "path", ")", ";", "Assert", ".", "assertFalse", "(", "\"/foo/bar/baz\"", ".", "equals", "(", "output", ")", ")", ";", "}"], "memberFunctions": {"testGetPathWithoutSchemaFromHDFSURI": [["void"]], "testGetPathWithoutSchema": [["void"]], "testGetPathWithoutSchemaThatContainsSchema": [["void"]]}, "className": "HadoopUtilsTest", "renamed": ["void", "function", "(", ")", "{", "final", "Path", "loc0", "=", "new", "Path", "(", "\"srini_string\"", ")", ";", "final", "String", "loc1", "=", "HadoopUtils", ".", "getPathWithoutScheme", "(", "loc0", ")", ";", "Assert", ".", "assertFalse", "(", "\"srini_string\"", ".", "equals", "(", "loc1", ")", ")", ";", "}"], "nl": "This test doesn't work the way you might expect. If you take the URI.create(\"hdfs://localhost:1234/foo/bar/baz?please=dont&amp;show=up\").getPath it will return /foo/bar/baz. If you go through Hadoop's Path using  {@link Path#Path(String)}then Hadoop injects the query params into the path, so when you call toURI it gives a different response.", "nlToks": ["This", "test", "does", "n't", "work", "the", "way", "you", "might", "expect", ".", "If", "you", "take", "the", "URI.create", "-LRB-", "``", "hdfs", ":", "/", "/", "localhost", ":1234", "/", "foo/bar/baz", "?", "please", "=", "dont", "&", "show", "=", "up", "''", "-RRB-", ".", "getPath", "it", "will", "return", "/", "foo/bar/baz", ".", "If", "you", "go", "through", "Hadoop", "'s", "Path", "using", "-LCB-", "@link", "Path", "#Path", "-LRB-", "String", "-RRB-", "-RCB-", "then", "Hadoop", "injects", "the", "query", "params", "into", "the", "path", ",", "so", "when", "you", "call", "toURI", "it", "gives", "a", "different", "response", "."], "path": "poemlin/alluxio/tree/master/core/client/src/test/java/alluxio/hadoop/HadoopUtilsTest.java", "idx": 2050}
{"memberVariables": {"xPosition": "int", "canvas": "Canvas", "ySpeed=1": "int", "ballDegradation=2": "int", "color": "Color", "diameter": "int", "yPosition": "int", "groundPosition": "int", "GRAVITY=3": "int", "circle": "Ellipse2D.Double"}, "code": ["int", "function", "(", ")", "{", "return", "xPosition", ";", "}"], "memberFunctions": {"erase": [["void"]], "move": [["void"]], "draw": [["void"]], "getYPosition": [["int"]]}, "className": "BouncingBall", "renamed": ["int", "function", "(", ")", "{", "return", "xPosition", ";", "}"], "nl": "return the horizontal position of this ball", "nlToks": ["return", "the", "horizontal", "position", "of", "this", "ball"], "path": "pizcogirl/100/tree/master/BouncingBall.java", "idx": 2051}
{"memberVariables": {"_cssText": "String", "rgbColorValue": "RGBColor", "floatValue": "float", "rectValue": "Rect", "counter": "Counter", "primitiveType": "short"}, "code": ["float", "function", "(", "short", "unitType", ")", "{", "return", "floatValue", ";", "}"], "memberFunctions": {"setStringValue": [["void", "short stringType", "String stringValue"]], "getCssValueType": [["short"]], "getStringValue": [["String"]], "getNewIdentValue": [["FSCssValue", "String identValue"]], "getCssText": [["String"]], "getRectValue": [["Rect"]], "setFloatValue": [["void", "short unitType", "float floatValue"]], "getPrimitiveType": [["short"]], "getRGBColorValue": [["RGBColor"]], "toString": [["String"]], "getCounterValue": [["Counter"]], "setCssText": [["void", "String cssText"]]}, "className": "FSCssValue", "renamed": ["float", "function", "(", "short", "arg0", ")", "{", "return", "floatValue", ";", "}"], "nl": "This method is used to get a float value in a specified unit.", "nlToks": ["This", "method", "is", "used", "to", "get", "a", "float", "value", "in", "a", "specified", "unit", "."], "path": "plutogeek/flyingsaucer/tree/master/flying-saucer-core/src/main/java/org/xhtmlrenderer/css/value/FSCssValue.java", "idx": 2053}
{"memberVariables": {"mManagerView": "BlockMetadataManagerView", "mDir": "StorageDir", "mBlocksToMoveOutSize=0L": "long", "mBlocksToMoveInSize=0L": "long", "mTierView": "StorageTierView", "mBlocksToMoveIn=new HashSet<>()": "Set<Long>", "mBlocksToMoveOut=new HashSet<>()": "Set<Long>"}, "code": ["void", "function", "(", "long", "blockId", ",", "long", "blockSize", ")", "{", "if", "(", "mBlocksToMoveIn", ".", "add", "(", "blockId", ")", ")", "{", "mBlocksToMoveInSize", "+=", "blockSize", ";", "}", "}"], "memberFunctions": {"getEvitableBytes": [["long"]], "getParentTierView": [["StorageTierView"]], "isMarkedToMoveOut": [["boolean", "long blockId"]], "createTempBlockMeta": [["TempBlockMeta", "long sessionId", "long blockId", "long initialBlockSize"]], "clearBlockMarks": [["void"]], "getDirViewIndex": [["int"]], "getCommittedBytes": [["long"]], "getEvictableBlocks": [["List<BlockMeta>"]], "getCapacityBytes": [["long"]], "getAvailableBytes": [["long"]], "toBlockStoreLocation": [["BlockStoreLocation"]], "markBlockMoveOut": [["void", "long blockId", "long blockSize"]]}, "className": "StorageDirView", "renamed": ["void", "function", "(", "long", "arg0", ",", "long", "arg1", ")", "{", "if", "(", "mBlocksToMoveIn", ".", "add", "(", "arg0", ")", ")", "{", "mBlocksToMoveInSize", "+=", "arg1", ";", "}", "}"], "nl": "Marks a block to move into this dir view, which is used by the evictor.", "nlToks": ["Marks", "a", "block", "to", "move", "into", "this", "dir", "view", ",", "which", "is", "used", "by", "the", "evictor", "."], "path": "poemlin/alluxio/tree/master/core/server/src/main/java/alluxio/worker/block/meta/StorageDirView.java", "idx": 2054}
{"memberVariables": {"PROPERTY_NAME=\"javax.wsdl.factory.WSDLCorbaFactory\"": "String", "DEFAULT_FACTORY_IMPL_NAME=\"org.apache.cxf.tools.corba.processors.wsdl.WSDLCorbaFactoryImpl\"": "String", "PROPERTY_FILE_NAME=\"wsdl.properties\"": "String", "fullPropertyFileName": "String"}, "code": ["WSDLCorbaFactory", "function", "(", ")", "{", "String", "factoryImplName", "=", "findFactoryImplName", "(", ")", ";", "return", "newInstance", "(", "factoryImplName", ")", ";", "}"], "memberFunctions": {"findFactoryImplName": [["String"]], "getFullPropertyFileName": [["String"]], "newWSDLWriter": [["WSDLWriter"]], "newWSDLReader": [["WSDLReader"]], "newDefinition": [["Definition"]], "newPopulatedExtensionRegistry": [["ExtensionRegistry"]]}, "className": "WSDLCorbaFactory", "renamed": ["WSDLCorbaFactory", "function", "(", ")", "{", "String", "loc0", "=", "findFactoryImplName", "(", ")", ";", "return", "newInstance", "(", "loc0", ")", ";", "}"], "nl": "Get a new instance of a WSDLFactory. This method follows (almost) the same basic sequence of steps that JAXP follows to determine the fully-qualified class name of the class which implements WSDLFactory. The steps (in order) are:  Check the javax.wsdl.factory.WSDLFactory system property. Check the lib/wsdl.properties file in the JRE directory. The key will have the same name as the above system property. Use the default value.  Once an instance of a WSDLFactory is obtained, invoke newDefinition(), newWSDLReader(), or newWSDLWriter(), to create the desired instances.", "nlToks": ["Get", "a", "new", "instance", "of", "a", "WSDLFactory", ".", "This", "method", "follows", "-LRB-", "almost", "-RRB-", "the", "same", "basic", "sequence", "of", "steps", "that", "JAXP", "follows", "to", "determine", "the", "fully-qualified", "class", "name", "of", "the", "class", "which", "implements", "WSDLFactory", ".", "The", "steps", "-LRB-", "in", "order", "-RRB-", "are", ":", "Check", "the", "javax.wsdl.factory.WSDLFactory", "system", "property", ".", "Check", "the", "lib/wsdl", ".", "properties", "file", "in", "the", "JRE", "directory", ".", "The", "key", "will", "have", "the", "same", "name", "as", "the", "above", "system", "property", ".", "Use", "the", "default", "value", ".", "Once", "an", "instance", "of", "a", "WSDLFactory", "is", "obtained", ",", "invoke", "newDefinition", "-LRB-", "-RRB-", ",", "newWSDLReader", "-LRB-", "-RRB-", ",", "or", "newWSDLWriter", "-LRB-", "-RRB-", ",", "to", "create", "the", "desired", "instances", "."], "path": "primesign/cxf/tree/master/tools/corba/src/main/java/org/apache/cxf/tools/corba/common/WSDLCorbaFactory.java", "idx": 2055}
{"memberVariables": {"toAtUserList=new ArrayList<String>()": "List<String>", "atMeGroupList=null": "Set<String>", "instance=null": "EaseAtMessageHelper"}, "code": ["Set", "<", "String", ">", "function", "(", ")", "{", "return", "atMeGroupList", ";", "}"], "memberFunctions": {"isAtMeMsg": [["boolean", "EMMessage message"]], "cleanToAtUserList": [["void"]], "hasAtMeMsg": [["boolean", "String groupId"]], "containsAtAll": [["boolean", "String content"]], "get": [["EaseAtMessageHelper"]], "addAtUser": [["void", "String username"]], "containsAtUsername": [["boolean", "String content"]], "parseMessages": [["void", "List<EMMessage> messages"]], "removeAtMeGroup": [["void", "String groupId"]], "atListToJsonArray": [["JSONArray", "List<String> atList"]], "getAtMessageUsernames": [["List<String>", "String content"]]}, "className": "EaseAtMessageHelper", "renamed": ["Set", "<", "String", ">", "function", "(", ")", "{", "return", "atMeGroupList", ";", "}"], "nl": "get groups which I was mentioned", "nlToks": ["get", "groups", "which", "I", "was", "mentioned"], "path": "15109237255/SuperWeChat/tree/master/easeui/src/com/hyphenate/easeui/model/EaseAtMessageHelper.java", "idx": 2056}
{"memberVariables": {"NO_ARGUMENTS=new Object[0]": "Object[]"}, "code": ["PropertyDescriptor", "function", "(", "String", "propertyName", ",", "Object", "fromObj", ")", "{", "for", "(", "PropertyDescriptor", "property", ":", "propertyDescriptorsFor", "(", "fromObj", ",", "null", ")", ")", "{", "if", "(", "property", ".", "getName", "(", ")", ".", "equals", "(", "propertyName", ")", ")", "{", "return", "property", ";", "}", "}", "return", "null", ";", "}"], "memberFunctions": {"propertyDescriptorsFor": [["PropertyDescriptor[]", "Object fromObj", "Class<Object> stopClass"]]}, "className": "PropertyUtil", "renamed": ["PropertyDescriptor", "function", "(", "String", "arg0", ",", "Object", "arg1", ")", "{", "for", "(", "PropertyDescriptor", "loc0", ":", "propertyDescriptorsFor", "(", "arg1", ",", "null", ")", ")", "{", "if", "(", "loc0", ".", "getName", "(", ")", ".", "equals", "(", "arg0", ")", ")", "{", "return", "loc0", ";", "}", "}", "return", "null", ";", "}"], "nl": "Returns the description of the property with the provided name on the provided object's interface.", "nlToks": ["Returns", "the", "description", "of", "the", "property", "with", "the", "provided", "name", "on", "the", "provided", "object", "'s", "interface", "."], "path": "plow/JavaHamcrest/tree/master/hamcrest-library/src/main/java/org/hamcrest/beans/PropertyUtil.java", "idx": 2062}
{"memberVariables": {"offsetHours=0": "int", "offsetMinutes=0": "int", "seconds=0.0": "double", "minutes=0": "int", "hour=0": "int", "TIME_PATTERN=\"%02d:%02d:%02d%+03d:%02d\"": "String"}, "code": ["void", "function", "(", "int", "minutes", ")", "{", "if", "(", "minutes", "<", "0", "||", "minutes", ">", "59", ")", "{", "throw", "new", "IllegalArgumentException", "(", "\"Valid minutes value is between 0..59\"", ")", ";", "}", "this", ".", "minutes", "=", "minutes", ";", "}"], "memberFunctions": {"getOffsetHours": [["int"]], "toDate": [["Date", "Date d"]], "toISO8601": [["String"]], "setHour": [["void", "int hour"]], "getMilliseconds": [["long"]], "setOffsetMinutes": [["void", "int minutes"]], "getMinutes": [["int"]], "getSeconds": [["double"]], "hashCode": [["int"]], "setSeconds": [["void", "double seconds"]], "equals": [["boolean", "final Object obj"]], "getOffsetMinutes": [["int"]], "getHour": [["int"]], "toString": [["String"]], "setOffsetHours": [["void", "int hours"]], "setTime": [["void", "Date d"]]}, "className": "Time", "renamed": ["void", "function", "(", "int", "arg0", ")", "{", "if", "(", "arg0", "<", "0", "||", "arg0", ">", "59", ")", "{", "throw", "new", "IllegalArgumentException", "(", "\"srini_string\"", ")", ";", "}", "this", ".", "minutes", "=", "arg0", ";", "}"], "nl": "Set the minute of hour.", "nlToks": ["Set", "the", "minute", "of", "hour", "."], "path": "pkoziol/marine-api/tree/master/src/main/java/net/sf/marineapi/nmea/util/Time.java", "idx": 2064}
{"memberVariables": {"MICROCOIN=MILLICOIN.divide(1000)": "Coin", "SMALLEST_UNIT_EXPONENT=8": "int", "COIN_VALUE=LongMath.pow(10,SMALLEST_UNIT_EXPONENT)": "long", "SATOSHI=Coin.valueOf(1)": "Coin", "FRIENDLY_FORMAT=MonetaryFormat.BTC.minDecimals(2).repeatOptionalDecimals(1,6).postfixCode()": "MonetaryFormat", "COIN=Coin.valueOf(COIN_VALUE)": "Coin", "CENT=COIN.divide(100)": "Coin", "FIFTY_COINS=COIN.multiply(50)": "Coin", "NEGATIVE_SATOSHI=Coin.valueOf(-1)": "Coin", "MILLICOIN=COIN.divide(1000)": "Coin", "MAX_SATOSHIS=COIN_VALUE * NetworkParameters.MAX_COINS": "long", "ZERO=Coin.valueOf(0)": "Coin", "value": "long", "PLAIN_FORMAT=MonetaryFormat.BTC.minDecimals(0).repeatOptionalDecimals(1,8).noCode()": "MonetaryFormat"}, "code": ["String", "function", "(", ")", "{", "return", "PLAIN_FORMAT", ".", "format", "(", "this", ")", ".", "toString", "(", ")", ";", "}"], "memberFunctions": {"add": [["Coin", "final Coin value"]], "signum": [["int"]], "isNegative": [["boolean"]], "isLessThan": [["boolean", "Coin other"]], "valueOf": [["Coin", "final long satoshis"], ["Coin", "final int coins", "final int cents"]], "subtract": [["Coin", "final Coin value"]], "isGreaterThan": [["boolean", "Coin other"]], "isPositive": [["boolean"]], "smallestUnitExponent": [["int"]], "compareTo": [["int", "final Coin other"]], "longValue": [["long"]], "parseCoin": [["Coin", "final String str"]], "toFriendlyString": [["String"]], "getValue": [["long"]], "shiftLeft": [["Coin", "final int n"]], "shiftRight": [["Coin", "final int n"]], "divideAndRemainder": [["Coin[]", "final long divisor"]], "hashCode": [["int"]], "negate": [["Coin"]], "equals": [["boolean", "final Object o"]], "isZero": [["boolean"]], "divide": [["Coin", "final long divisor"], ["long", "final Coin divisor"]], "toString": [["String"]], "multiply": [["Coin", "final long factor"]]}, "className": "Coin", "renamed": ["String", "function", "(", ")", "{", "return", "PLAIN_FORMAT", ".", "format", "(", "this", ")", ".", "toString", "(", ")", ";", "}"], "nl": " Returns the value as a plain string denominated in BTC. The result is unformatted with no trailing zeroes. For instance, a value of 150000 satoshis gives an output string of \"0.0015\" BTC ", "nlToks": ["Returns", "the", "value", "as", "a", "plain", "string", "denominated", "in", "BTC", ".", "The", "result", "is", "unformatted", "with", "no", "trailing", "zeroes", ".", "For", "instance", ",", "a", "value", "of", "150000", "satoshis", "gives", "an", "output", "string", "of", "``", "0.0015", "''", "BTC"], "path": "1000000000001/bitcoinj/tree/master/core/src/main/java/org/bitcoinj/core/Coin.java", "idx": 2066}
{"memberVariables": {"uiStack": "UIStack"}, "code": ["void", "function", "(", "JPanel", "panel", ")", "{", "uiStack", ".", "addToStack", "(", "panel", ")", ";", "}"], "memberFunctions": {"getCurrentPanel": [["JPanel"]], "restart": [["JPanel"]], "show": [["void"]], "back": [["JPanel"], ["JPanel", "int n"]]}, "className": "JStackCore", "renamed": ["void", "function", "(", "JPanel", "arg0", ")", "{", "uiStack", ".", "addToStack", "(", "arg0", ")", ";", "}"], "nl": "Adds a panel on the stack.", "nlToks": ["Adds", "a", "panel", "on", "the", "stack", "."], "path": "porthunt/NovaUI/tree/master/src/controller/JStackCore.java", "idx": 2067}
{"memberVariables": {"defaultNillable=true": "boolean", "defaultExtensibleElements": "boolean", "qualifyAttributes": "boolean", "defaultMinOccurs": "int", "defaultExtensibleAttributes": "boolean", "qualifyElements=true": "boolean"}, "code": ["boolean", "function", "(", ")", "{", "return", "defaultNillable", ";", "}"], "memberFunctions": {"setDefaultExtensibleElements": [["void", "boolean defaultExtensibleElements"]], "setQualifyAttributes": [["void", "boolean qualifyAttributes"]], "getDefaultMinOccurs": [["int"]], "setDefaultExtensibleAttributes": [["void", "boolean defaultExtensibleAttributes"]], "isDefaultExtensibleAttributes": [["boolean"]], "setQualifyElements": [["void", "boolean qualifyElements"]], "setDefaultMinOccurs": [["void", "int defaultMinOccurs"]], "isQualifyAttributes": [["boolean"]], "isQualifyElements": [["boolean"]], "isDefaultExtensibleElements": [["boolean"]], "setDefaultNillable": [["void", "boolean defaultNillable"]]}, "className": "TypeCreationOptions", "renamed": ["boolean", "function", "(", ")", "{", "return", "defaultNillable", ";", "}"], "nl": "Absent any annotations of XML mapping, the value of the nillable attribute on elements.", "nlToks": ["Absent", "any", "annotations", "of", "XML", "mapping", ",", "the", "value", "of", "the", "nillable", "attribute", "on", "elements", "."], "path": "primesign/cxf/tree/master/rt/databinding/aegis/src/main/java/org/apache/cxf/aegis/type/TypeCreationOptions.java", "idx": 2068}
{"memberVariables": {"sources=new ArrayList<Source>()": "ArrayList<Source>", "validator": "JAXPValidator"}, "code": ["List", "<", "SAXParseException", ">", "function", "(", "Source", "instance", ")", "{", "try", "{", "return", "problemToExceptionList", "(", "validator", ".", "validateInstance", "(", "instance", ")", ".", "getProblems", "(", ")", ")", ";", "}", "catch", "(", "XMLUnitException", "e", ")", "{", "throw", "new", "XMLUnitRuntimeException", "(", "e", ".", "getMessage", "(", ")", ",", "e", ".", "getCause", "(", ")", ")", ";", "}", "}"], "memberFunctions": {"isSchemaValid": [["boolean"]], "addSchemaSource": [["void", "Source s"]], "isInstanceValid": [["boolean", "Source instance"]], "problemToExceptionList": [["List<SAXParseException>", "Iterable<ValidationProblem> problems"]], "getSchemaErrors": [["List<SAXParseException>"]]}, "className": "Validator", "renamed": ["List", "<", "SAXParseException", ">", "function", "(", "Source", "arg0", ")", "{", "try", "{", "return", "problemToExceptionList", "(", "validator", ".", "validateInstance", "(", "arg0", ")", ".", "getProblems", "(", ")", ")", ";", "}", "catch", "(", "XMLUnitException", "loc0", ")", "{", "throw", "new", "XMLUnitRuntimeException", "(", "loc0", ".", "getMessage", "(", ")", ",", "loc0", ".", "getCause", "(", ")", ")", ";", "}", "}"], "nl": "Obtain a list of all errors in the given instance. The list contains  {@link org.xml.sax.SAXParseException SAXParseException}s.", "nlToks": ["Obtain", "a", "list", "of", "all", "errors", "in", "the", "given", "instance", ".", "The", "list", "contains", "-LCB-", "@link", "org.xml.sax.SAXParseException", "SAXParseException", "-RCB-", "s."], "path": "phbenisc/xmlunit/tree/master/xmlunit-legacy/src/main/java/org/custommonkey/xmlunit/jaxp13/Validator.java", "idx": 2069}
{"memberVariables": {"differenceEvaluator=DifferenceEvaluators.Default": "DifferenceEvaluator", "comparisonResultsToCheck=CHECK_FOR_IDENTICAL": "ComparisonResult[]", "CHECK_FOR_IDENTICAL=new ComparisonResult[]{ComparisonResult.SIMILAR,ComparisonResult.DIFFERENT}": "ComparisonResult[]", "controlSource": "Source", "CHECK_FOR_SIMILAR=new ComparisonResult[]{ComparisonResult.DIFFERENT}": "ComparisonResult[]", "namespaceContext": "Map<String,String>", "nodeFilter": "Predicate<Node>", "differenceListeners=new ArrayList<ComparisonListener>()": "List<ComparisonListener>", "attributeFilter": "Predicate<Attr>", "ignoreWhitespace": "boolean", "comparisonListeners=new ArrayList<ComparisonListener>()": "List<ComparisonListener>", "ignoreComments": "boolean", "normalizeWhitespace": "boolean", "nodeMatcher": "NodeMatcher", "comparisonController=ComparisonControllers.Default": "ComparisonController", "testSource": "Source", "results": "List<Difference>", "comparisonResultsToCheck": "EnumSet<ComparisonResult>"}, "code": ["DiffBuilder", "function", "(", "final", "ComparisonListener", "...", "comparisonListeners", ")", "{", "this", ".", "differenceListeners", ".", "addAll", "(", "Arrays", ".", "asList", "(", "comparisonListeners", ")", ")", ";", "return", "this", ";", "}"], "memberFunctions": {"checkForIdentical": [["DiffBuilder"]], "withNamespaceContext": [["DiffBuilder", "Map<String,String> uri2Prefix"]], "compare": [["DiffBuilder", "final Object control"]], "withNodeFilter": [["DiffBuilder", "Predicate<Node> nodeFilter"]], "comparisonPerformed": [["void", "final Comparison comparison", "final ComparisonResult outcome"]], "withNodeMatcher": [["DiffBuilder", "final NodeMatcher nodeMatcher"]], "getDifferences": [["List<Difference>"]], "withComparisonController": [["DiffBuilder", "final ComparisonController comparisonController"]], "ignoreWhitespace": [["DiffBuilder"]], "withDifferenceEvaluator": [["DiffBuilder", "final DifferenceEvaluator differenceEvaluator"]], "ignoreComments": [["DiffBuilder"]], "checkForSimilar": [["DiffBuilder"]], "withTest": [["DiffBuilder", "Object test"]], "normalizeWhitespace": [["DiffBuilder"]], "build": [["Diff"]], "getSource": [["Source", "Object object"]], "withComparisonListeners": [["DiffBuilder", "final ComparisonListener... comparisonListeners"]], "wrap": [["Source", "final Source source"]], "withAttributeFilter": [["DiffBuilder", "Predicate<Attr> attributeFilter"]]}, "className": "DiffBuilder", "renamed": ["DiffBuilder", "function", "(", "final", "ComparisonListener", "...", "arg0", ")", "{", "this", ".", "differenceListeners", ".", "addAll", "(", "Arrays", ".", "asList", "(", "arg0", ")", ")", ";", "return", "this", ";", "}"], "nl": "Registers a listener that is notified of each comparison with outcome other than  {@link ComparisonResult#EQUAL}.", "nlToks": ["Registers", "a", "listener", "that", "is", "notified", "of", "each", "comparison", "with", "outcome", "other", "than", "-LCB-", "@link", "ComparisonResult", "#EQUAL", "-RCB-", "."], "path": "phbenisc/xmlunit/tree/master/xmlunit-core/src/main/java/org/xmlunit/builder/DiffBuilder.java", "idx": 2070}
{"memberVariables": {"conduitSelector": "ConduitSelector", "requestContext=new HashMap<String,Object>()": "Map<String,Object>", "bus": "Bus", "inInterceptors=new ModCountCopyOnWriteArrayList<Interceptor<? extends Message>>()": "List<Interceptor<? extends Message>>", "synchronousTimeout=60000": "long", "outInterceptors=new ModCountCopyOnWriteArrayList<Interceptor<? extends Message>>()": "List<Interceptor<? extends Message>>", "LOG=LogUtils.getL7dLogger(ClientConfiguration.class)": "Logger", "inFault=new ModCountCopyOnWriteArrayList<Interceptor<? extends Message>>()": "List<Interceptor<? extends Message>>", "responseContext=new HashMap<String,Object>()": "Map<String,Object>", "outFault=new ModCountCopyOnWriteArrayList<Interceptor<? extends Message>>()": "List<Interceptor<? extends Message>>"}, "code": ["void", "function", "(", "ConduitSelector", "cs", ")", "{", "this", ".", "conduitSelector", "=", "cs", ";", "}"], "memberFunctions": {"getBus": [["Bus"]], "getOutFaultInterceptors": [["List<Interceptor<? extends Message>>"]], "getEndpoint": [["Endpoint"]], "getSynchronousTimeout": [["long"]], "setOutInterceptors": [["void", "List<Interceptor<? extends Message>> interceptors"]], "getInInterceptors": [["List<Interceptor<? extends Message>>"]], "getResponseContext": [["Map<String,Object>"]], "isResponseExpectedForOneway": [["boolean"]], "setOutFaultInterceptors": [["void", "List<Interceptor<? extends Message>> interceptors"]], "getHttpConduit": [["HTTPConduit"]], "getConduit": [["Conduit"]], "setSynchronousTimeout": [["void", "long synchronousTimeout"]], "getConduitSelector": [["ConduitSelector"]], "getInFaultInterceptors": [["List<Interceptor<? extends Message>>"]], "getOutInterceptors": [["List<Interceptor<? extends Message>>"]], "setInInterceptors": [["void", "List<Interceptor<? extends Message>> interceptors"]], "getRequestContext": [["Map<String,Object>"]], "setInFaultInterceptors": [["void", "List<Interceptor<? extends Message>> interceptors"]], "setBus": [["void", "Bus bus"]], "prepareConduitSelector": [["void", "Message message"]]}, "className": "ClientConfiguration", "renamed": ["void", "function", "(", "ConduitSelector", "arg0", ")", "{", "this", ".", "conduitSelector", "=", "arg0", ";", "}"], "nl": "Sets the conduit selector", "nlToks": ["Sets", "the", "conduit", "selector"], "path": "primesign/cxf/tree/master/rt/rs/client/src/main/java/org/apache/cxf/jaxrs/client/ClientConfiguration.java", "idx": 2072}
{"memberVariables": {}, "code": ["FaultMode", "function", "(", "Message", "message", ")", "{", "if", "(", "message", "!=", "null", "&&", "message", ".", "getExchange", "(", ")", "!=", "null", "&&", "message", "==", "message", ".", "getExchange", "(", ")", ".", "getOutFaultMessage", "(", ")", ")", "{", "FaultMode", "mode", "=", "message", ".", "get", "(", "FaultMode", ".", "class", ")", ";", "if", "(", "null", "!=", "mode", ")", "{", "return", "mode", ";", "}", "else", "{", "return", "FaultMode", ".", "RUNTIME_FAULT", ";", "}", "}", "return", "null", ";", "}"], "memberFunctions": {"isDOMPresent": [["boolean", "Message m"]], "isRequestor": [["boolean", "Message message"]], "isTrue": [["boolean", "Object value"]], "isOutbound": [["boolean", "Message message"]], "isEmptyPartialResponse": [["boolean", "Message message"]], "getContextualBoolean": [["boolean", "Message m", "String key", "boolean defaultValue"]], "isFault": [["boolean", "Message message"]], "isPartialResponse": [["boolean", "Message message"]], "getContextualProperty": [["Object", "Message m", "String propPreferred", "String propDefault"]]}, "className": "MessageUtils", "renamed": ["FaultMode", "function", "(", "Message", "arg0", ")", "{", "if", "(", "arg0", "!=", "null", "&&", "arg0", ".", "getExchange", "(", ")", "!=", "null", "&&", "arg0", "==", "arg0", ".", "getExchange", "(", ")", ".", "getOutFaultMessage", "(", ")", ")", "{", "FaultMode", "loc0", "=", "arg0", ".", "get", "(", "FaultMode", ".", "class", ")", ";", "if", "(", "null", "!=", "loc0", ")", "{", "return", "loc0", ";", "}", "else", "{", "return", "FaultMode", ".", "RUNTIME_FAULT", ";", "}", "}", "return", "null", ";", "}"], "nl": "Determine the fault mode for the underlying (fault) message  (for use on server side only).", "nlToks": ["Determine", "the", "fault", "mode", "for", "the", "underlying", "-LRB-", "fault", "-RRB-", "message", "-LRB-", "for", "use", "on", "server", "side", "only", "-RRB-", "."], "path": "primesign/cxf/tree/master/core/src/main/java/org/apache/cxf/message/MessageUtils.java", "idx": 2073}
{"memberVariables": {}, "code": ["void", "function", "(", "Context", "context", ",", "View", "view", ")", "{", "if", "(", "view", "==", "null", ")", "return", ";", "InputMethodManager", "inputMethodManager", "=", "(", "InputMethodManager", ")", "context", ".", "getSystemService", "(", "Context", ".", "INPUT_METHOD_SERVICE", ")", ";", "inputMethodManager", ".", "hideSoftInputFromWindow", "(", "view", ".", "getWindowToken", "(", ")", ",", "0", ")", ";", "}"], "memberFunctions": {"showSoftInput": [["void", "Context context", "View view"]]}, "className": "SoftInputUtil", "renamed": ["void", "function", "(", "Context", "arg0", ",", "View", "arg1", ")", "{", "if", "(", "arg1", "==", "null", ")", "return", ";", "InputMethodManager", "loc0", "=", "(", "InputMethodManager", ")", "arg0", ".", "getSystemService", "(", "Context", ".", "INPUT_METHOD_SERVICE", ")", ";", "loc0", ".", "hideSoftInputFromWindow", "(", "arg1", ".", "getWindowToken", "(", ")", ",", "0", ")", ";", "}"], "nl": "Hide keyboard", "nlToks": ["Hide", "keyboard"], "path": "pop1030123/android-atleap/tree/master/atleap-core/src/main/java/com/blandware/android/atleap/util/SoftInputUtil.java", "idx": 2074}
{"memberVariables": {"lastModifiedTimeStamp": "Timestamp", "fetcherStartTimestamp": "Timestamp", "createTimeStamp": "Timestamp", "serialVersionUID=1L": "long", "batchId": "BigDecimal", "errorMsg": "String", "outcomeType": "OutcomeType", "createdBy": "String", "feedId": "BigDecimal", "testId": "long", "runId": "BigDecimal", "fetcherEndTimeStamp": "Timestamp", "regPclTestResultDetails": "List<RegPCLTestResultDetailsEntity>", "runStatus": "RunStatusType"}, "code": ["BigDecimal", "function", "(", ")", "{", "return", "this", ".", "runId", ";", "}"], "memberFunctions": {"setLastModifiedTimeStamp": [["void", "Timestamp lastModifiedTimeStamp"]], "setFeedId": [["void", "BigDecimal feedId"]], "setFetcherStartTimestamp": [["void", "Timestamp fetcherStartTimestamp"]], "getOutcomeType": [["OutcomeType"]], "updateLastModifiedTimeStamp": [["void"]], "updateCreateTimeStamp": [["void"]], "setBatchId": [["void", "BigDecimal batchId"]], "getRegPclTestResultDetails": [["List<RegPCLTestResultDetailsEntity>"]], "setTestId": [["void", "long testId"]], "getTestId": [["long"]], "removeRegPclTestResultDetail": [["RegPCLTestResultDetailsEntity", "RegPCLTestResultDetailsEntity regPclTestResultDetail"]], "setRegPclTestResultDetails": [["void", "List<RegPCLTestResultDetailsEntity> regPclTestResultDetails"]], "setErrorMsg": [["void", "String errorMsg"]], "getRunStatus": [["RunStatusType"]], "addRegPclTestResultDetail": [["RegPCLTestResultDetailsEntity", "RegPCLTestResultDetailsEntity regPclTestResultDetail"]], "getErrorMsg": [["String"]], "setRunStatus": [["void", "RunStatusType runStatus"]], "getFetcherEndTimeStamp": [["Timestamp"]], "getLastModifiedTimeStamp": [["Timestamp"]], "getFeedId": [["BigDecimal"]], "setRunId": [["void", "BigDecimal runId"]], "getFetcherStartTimestamp": [["Timestamp"]], "setFetcherEndTimeStamp": [["void", "Timestamp fetcherEndTimeStamp"]], "setCreateTimeStamp": [["void", "Timestamp createTimeStamp"]], "setCreatedBy": [["void", "String createdBy"]], "getCreateTimeStamp": [["Timestamp"]], "getBatchId": [["BigDecimal"]], "setOutcomeType": [["void", "OutcomeType outcomeType"]], "getCreatedBy": [["String"]]}, "className": "RegPCLTestResultEntity", "renamed": ["BigDecimal", "function", "(", ")", "{", "return", "this", ".", "runId", ";", "}"], "nl": "Gets the run id.", "nlToks": ["Gets", "the", "run", "id", "."], "path": "pkesireddy/portico_fletcher/tree/master/FetcherTesterService/src/main/java/org/ithaka/cm/fetchertester/entity/RegPCLTestResultEntity.java", "idx": 2075}
{"memberVariables": {"passiveAuth": "boolean", "requestQueryParams=new HashMap<String,String[]>()": "Map<String,String[]>", "serialVersionUID=8131978212432223682L": "long", "commonAuthCallerPath": "String", "forceAuth": "boolean", "type": "String", "requestHeaders=new HashMap<String,String>()": "Map<String,String>", "tenantDomain": "String", "isPost": "boolean", "relyingParty": "String"}, "code": ["String", "function", "(", ")", "{", "return", "tenantDomain", ";", "}"], "memberFunctions": {"setRelyingParty": [["void", "String relyingParty"]], "addHeader": [["void", "String key", "String values"]], "getRelyingParty": [["String"]], "getForceAuth": [["boolean"]], "getCommonAuthCallerPath": [["String"]], "getRequestQueryParams": [["Map<String,String[]>"]], "addRequestQueryParam": [["void", "String key", "String[] value"]], "setPost": [["void", "boolean post"]], "setType": [["void", "String type"]], "isPost": [["boolean"]], "setTenantDomain": [["void", "String tenantDomain"]], "appendRequestQueryParams": [["void", "Map<String,String[]> map"]], "getPassiveAuth": [["boolean"]], "getRequestHeaders": [["Map<String,String>"]], "getRequestQueryParam": [["String[]", "String key"]], "getType": [["String"]], "setPassiveAuth": [["void", "boolean passiveAuth"]], "setCommonAuthCallerPath": [["void", "String commonAuthCallerPath"]], "setForceAuth": [["void", "boolean forceAuth"]], "setRequestQueryParams": [["void", "Map<String,String[]> requestQueryParams"]]}, "className": "AuthenticationRequest", "renamed": ["String", "function", "(", ")", "{", "return", "tenantDomain", ";", "}"], "nl": "Get the tenant domain", "nlToks": ["Get", "the", "tenant", "domain"], "path": "harsha1979/carbon-identity/tree/master/components/authentication-framework/org.wso2.carbon.identity.application.authentication.framework/src/main/java/org/wso2/carbon/identity/application/authentication/framework/model/AuthenticationRequest.java", "idx": 2076}
{"memberVariables": {"_cssText": "String", "rgbColorValue": "RGBColor", "floatValue": "float", "rectValue": "Rect", "counter": "Counter", "primitiveType": "short"}, "code": ["Rect", "function", "(", ")", "{", "return", "rectValue", ";", "}"], "memberFunctions": {"setStringValue": [["void", "short stringType", "String stringValue"]], "getCssValueType": [["short"]], "getStringValue": [["String"]], "getNewIdentValue": [["FSCssValue", "String identValue"]], "getCssText": [["String"]], "setFloatValue": [["void", "short unitType", "float floatValue"]], "getFloatValue": [["float", "short unitType"]], "getPrimitiveType": [["short"]], "getRGBColorValue": [["RGBColor"]], "toString": [["String"]], "getCounterValue": [["Counter"]], "setCssText": [["void", "String cssText"]]}, "className": "FSCssValue", "renamed": ["Rect", "function", "(", ")", "{", "return", "rectValue", ";", "}"], "nl": "Not supported. This method is used to get the Rect value.", "nlToks": ["Not", "supported", ".", "This", "method", "is", "used", "to", "get", "the", "Rect", "value", "."], "path": "plutogeek/flyingsaucer/tree/master/flying-saucer-core/src/main/java/org/xhtmlrenderer/css/value/FSCssValue.java", "idx": 2077}
{"memberVariables": {"appPath=\"\"": "String", "keys": "Keys", "machine": "Machine", "logPath=\"\"": "String", "options": "Options", "playlists": "HashMap<Integer,Playlist>", "genreListModel": "DefaultListModel", "logger=Logger.getLogger(\"JaMuz\")": "Logger", "db": "DbConnJaMuz", "tags": "ArrayList<String>"}, "code": ["List", "<", "Playlist", ">", "function", "(", ")", "{", "List", "list", "=", "new", "ArrayList", "(", "playlists", ".", "values", "(", ")", ")", ";", "Collections", ".", "sort", "(", "list", ")", ";", "return", "list", ";", "}"], "memberFunctions": {"logConfig": [["void", "String id"]], "getCurrentMachine": [["boolean"]], "createLog": [["boolean"]], "getProxy": [["Proxy"]], "readTags": [["void"]], "getPlaylistsVisible": [["List<Playlist>"]], "readGenres": [["void"]], "setProxy": [["boolean"]], "connectDatabase": [["boolean"]], "getPlaylist": [["Playlist", "int id"]], "readPlaylists": [["boolean"]], "getLogger": [["Logger"]], "getTags": [["ArrayList<String>"]], "configure": [["boolean", "String appPath"]], "getKeys": [["Options"]], "getFile": [["File", "String filename", "String... args"]], "getDb": [["DbConnJaMuz"]], "getMachine": [["Machine"]], "getGenreListModel": [["DefaultListModel"]], "getHttpClient": [["DefaultHttpClient"]], "getLogPath": [["String"]], "getOptions": [["Options"]], "getGenres": [["List<String>"]]}, "className": "Jamuz", "renamed": ["List", "<", "Playlist", ">", "function", "(", ")", "{", "List", "loc0", "=", "new", "ArrayList", "(", "playlists", ".", "values", "(", ")", ")", ";", "Collections", ".", "sort", "(", "loc0", ")", ";", "return", "loc0", ";", "}"], "nl": "Return playlists as a Collection", "nlToks": ["Return", "playlists", "as", "a", "Collection"], "path": "phramusca/JaMuz/tree/master/src/jamuz/Jamuz.java", "idx": 2078}
{"memberVariables": {"con": "Connection", "findByFileNameSQL=null": "PreparedStatement", "findByIDSQL=null": "PreparedStatement", "deleteItemSQL=null": "PreparedStatement", "newItemSQL=null": "PreparedStatement", "listSQL=null": "PreparedStatement", "updateItemSQL=null": "PreparedStatement"}, "code": ["void", "function", "(", "String", "jdbcURL", ",", "String", "userName", ",", "String", "password", ",", "String", "driver", ")", "{", "try", "{", "Class", ".", "forName", "(", "driver", ")", ".", "newInstance", "(", ")", ";", "con", "=", "DriverManager", ".", "getConnection", "(", "jdbcURL", ",", "userName", ",", "password", ")", ";", "Documents", ".", "createDb", "(", ")", ";", "}", "catch", "(", "Exception", "e", ")", "{", "throw", "new", "MoxieException", "(", "e", ")", ";", "}", "}"], "memberFunctions": {"newItem": [["Document", "Document doc"]], "deleteItem": [["void", "Document doc"], ["void", "int id"]], "findByID": [["Document", "int id"]], "fromResultSet": [["Document", "ResultSet results"]], "findByFileName": [["Document", "String fileName"]], "exists": [["boolean", "String fileName"], ["boolean", "int id"]], "updateItem": [["void", "Document doc"]], "createDb": [["void"]], "list": [["List<Document>"]]}, "className": "Documents", "renamed": ["void", "function", "(", "String", "arg0", ",", "String", "arg1", ",", "String", "arg2", ",", "String", "arg3", ")", "{", "try", "{", "Class", ".", "forName", "(", "arg3", ")", ".", "newInstance", "(", ")", ";", "con", "=", "DriverManager", ".", "getConnection", "(", "arg0", ",", "arg1", ",", "arg2", ")", ";", "Documents", ".", "createDb", "(", ")", ";", "}", "catch", "(", "Exception", "loc0", ")", "{", "throw", "new", "MoxieException", "(", "loc0", ")", ";", "}", "}"], "nl": "Initializes our Documents object and underlying database connection.", "nlToks": ["Initializes", "our", "Documents", "object", "and", "underlying", "database", "connection", "."], "path": "adamfisk/littleshoot-client/tree/master/server/static/build/src/main/webapp/dojo/demos/offline/editor/server/org/dojo/moxie/Documents.java", "idx": 2080}
{"memberVariables": {"description": "List<DescriptionType>", "paramName": "CString", "id": "java.lang.String", "paramValue": "XsdStringType"}, "code": ["void", "function", "(", "CString", "value", ")", "{", "this", ".", "paramName", "=", "value", ";", "}"], "memberFunctions": {"getParamName": [["CString"]], "getParamValue": [["XsdStringType"]], "setParamValue": [["void", "XsdStringType value"]], "setId": [["void", "java.lang.String value"]], "getId": [["java.lang.String"]], "getDescription": [["List<DescriptionType>"]]}, "className": "ParamValueType", "renamed": ["void", "function", "(", "CString", "arg0", ")", "{", "this", ".", "paramName", "=", "arg0", ";", "}"], "nl": "Sets the value of the paramName property.", "nlToks": ["Sets", "the", "value", "of", "the", "paramName", "property", "."], "path": "primesign/cxf/tree/master/rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/handler/types/ParamValueType.java", "idx": 2081}
{"memberVariables": {"_imageResourceLoader": "ImageResourceLoader", "_uriResolver": "UriResolver"}, "code": ["boolean", "function", "(", "String", "uri", ")", "{", "return", "false", ";", "}"], "memberFunctions": {"onLayoutException": [["void", "Throwable t"]], "onRenderException": [["void", "Throwable t"]], "shrinkImageCache": [["void"]], "getImageResource": [["ImageResource", "String uri"]], "resolveURI": [["String", "String uri"]], "setImageResourceLoader": [["void", "ImageResourceLoader loader"]], "getBinaryResource": [["byte[]", "String uri"]], "documentStarted": [["void"]], "getBaseURL": [["String"]], "getCSSResource": [["CSSResource", "String uri"]], "clearImageCache": [["void"]], "getXMLResource": [["XMLResource", "String uri"]], "setBaseURL": [["void", "String uri"]], "resolveAndOpenStream": [["InputStream", "String uri"]], "setRepaintListener": [["void", "RepaintListener listener"]], "documentLoaded": [["void"]]}, "className": "DelegatingUserAgent", "renamed": ["boolean", "function", "(", "String", "arg0", ")", "{", "return", "false", ";", "}"], "nl": "Returns true if the given URI was visited, meaning it was requested at some point since initialization.", "nlToks": ["Returns", "true", "if", "the", "given", "URI", "was", "visited", ",", "meaning", "it", "was", "requested", "at", "some", "point", "since", "initialization", "."], "path": "plutogeek/flyingsaucer/tree/master/flying-saucer-core/src/main/java/org/xhtmlrenderer/swing/DelegatingUserAgent.java", "idx": 2082}
{"memberVariables": {"processor=null": "DAVProcessor", "context=null": "ServletContext", "logger=null": "DAVLogger", "repository=null": "DAVRepository", "config=null": "ServletConfig"}, "code": ["String", "function", "(", "String", "servletName", ")", "{", "if", "(", "servletName", "==", "null", ")", "throw", "new", "NullPointerException", "(", ")", ";", "return", "DAVRepository", ".", "class", ".", "getName", "(", ")", "+", "\".\"", "+", "servletName", ";", "}"], "memberFunctions": {"init": [["void", "ServletConfig config"]], "getServletConfig": [["ServletConfig"]], "getServletContext": [["ServletContext"]], "service": [["void", "ServletRequest request", "ServletResponse response"]], "destroy": [["void"]], "getServletInfo": [["String"]], "notify": [["void", "DAVResource resource", "int event"]]}, "className": "DAVServlet", "renamed": ["String", "function", "(", "String", "arg0", ")", "{", "if", "(", "arg0", "==", "null", ")", "throw", "new", "NullPointerException", "(", ")", ";", "return", "DAVRepository", ".", "class", ".", "getName", "(", ")", "+", "\"srini_string\"", "+", "arg0", ";", "}"], "nl": "Retrieve the key in the  {@link ServletContext} where the instance ofthe  {@link DAVRepository} associated with a named {@link DAVServlet}can be found.", "nlToks": ["Retrieve", "the", "key", "in", "the", "-LCB-", "@link", "ServletContext", "-RCB-", "where", "the", "instance", "ofthe", "-LCB-", "@link", "DAVRepository", "-RCB-", "associated", "with", "a", "named", "-LCB-", "@link", "DAVServlet", "-RCB-", "can", "be", "found", "."], "path": "pfumagalli/webdav/tree/master/src/main/java/it/could/webdav/DAVServlet.java", "idx": 2083}
{"memberVariables": {"_out": "Hessian2Output"}, "code": ["void", "function", "(", "Object", "object", ")", "{", "_out", ".", "writeStreamingObject", "(", "object", ")", ";", "}"], "memberFunctions": {"flush": [["void"]], "getHessian2Output": [["Hessian2Output"]], "setCloseStreamOnClose": [["void", "boolean isClose"]], "isCloseStreamOnClose": [["boolean"]], "close": [["void"]]}, "className": "Hessian2StreamingOutput", "renamed": ["void", "function", "(", "Object", "arg0", ")", "{", "_out", ".", "writeStreamingObject", "(", "arg0", ")", ";", "}"], "nl": "Writes any object to the output stream.", "nlToks": ["Writes", "any", "object", "to", "the", "output", "stream", "."], "path": "007slm/citrus/tree/master/common/hessian/src/main/java/com/alibaba/citrus/hessian/io/Hessian2StreamingOutput.java", "idx": 2084}
{"memberVariables": {"cpd": "CPD", "BASE_TEST_RESOURCE_PATH": "String", "files": "int", "expectedFilesCount": "int", "canTestSymLinks=false": "boolean"}, "code": ["void", "function", "(", ")", "{", "if", "(", "canTestSymLinks", ")", "{", "NoFileAssertListener", "listener", "=", "new", "NoFileAssertListener", "(", "1", ")", ";", "cpd", ".", "setCpdListener", "(", "listener", ")", ";", "cpd", ".", "add", "(", "new", "File", "(", "BASE_TEST_RESOURCE_PATH", ",", "\"real-file.txt\"", ")", ")", ";", "cpd", ".", "add", "(", "new", "File", "(", "BASE_TEST_RESOURCE_PATH", ",", "\"symlink-for-real-file.txt\"", ")", ")", ";", "listener", ".", "verify", "(", ")", ";", "}", "}"], "memberFunctions": {"addedFile": [["void", "int fileCount", "File file"]], "testFileAddedWithRelativePath": [["void"]], "prepareSymLinks": [["void"]], "testFileSectionWithBrokenSymlinks": [["void"]], "phaseUpdate": [["void", "int phase"]], "setup": [["void"]], "verify": [["void"]]}, "className": "CPDTest", "renamed": ["void", "function", "(", ")", "{", "if", "(", "canTestSymLinks", ")", "{", "NoFileAssertListener", "loc0", "=", "new", "NoFileAssertListener", "(", "1", ")", ";", "cpd", ".", "setCpdListener", "(", "loc0", ")", ";", "cpd", ".", "add", "(", "new", "File", "(", "BASE_TEST_RESOURCE_PATH", ",", "\"srini_string\"", ")", ")", ";", "cpd", ".", "add", "(", "new", "File", "(", "BASE_TEST_RESOURCE_PATH", ",", "\"srini_string\"", ")", ")", ";", "loc0", ".", "verify", "(", ")", ";", "}", "}"], "nl": "A file should be added only once - even if it was found twice, because of a sym link.", "nlToks": ["A", "file", "should", "be", "added", "only", "once", "-", "even", "if", "it", "was", "found", "twice", ",", "because", "of", "a", "sym", "link", "."], "path": "adangel/pmd/tree/master/pmd-core/src/test/java/net/sourceforge/pmd/cpd/CPDTest.java", "idx": 2086}
{"memberVariables": {"TEST_ID=1234": "long", "mGenerator": "BlockContainerIdGenerator"}, "code": ["void", "function", "(", ")", "{", "mGenerator", ".", "setNextContainerId", "(", "TEST_ID", ")", ";", "Assert", ".", "assertEquals", "(", "TEST_ID", ",", "mGenerator", ".", "getNewContainerId", "(", ")", ")", ";", "Assert", ".", "assertEquals", "(", "TEST_ID", "+", "1", ",", "mGenerator", ".", "getNewContainerId", "(", ")", ")", ";", "Assert", ".", "assertEquals", "(", "TEST_ID", "+", "2", ",", "mGenerator", ".", "getNewContainerId", "(", ")", ")", ";", "}"], "memberFunctions": {"getNewContainerId": [["void"]], "before": [["void"]]}, "className": "BlockContainerIdGeneratorTest", "renamed": ["void", "function", "(", ")", "{", "mGenerator", ".", "setNextContainerId", "(", "TEST_ID", ")", ";", "Assert", ".", "assertEquals", "(", "TEST_ID", ",", "mGenerator", ".", "getNewContainerId", "(", ")", ")", ";", "Assert", ".", "assertEquals", "(", "TEST_ID", "+", "1", ",", "mGenerator", ".", "getNewContainerId", "(", ")", ")", ";", "Assert", ".", "assertEquals", "(", "TEST_ID", "+", "2", ",", "mGenerator", ".", "getNewContainerId", "(", ")", ")", ";", "}"], "nl": "Tests the  {@link BlockContainerIdGenerator#setNextContainerId(long)} method.", "nlToks": ["Tests", "the", "-LCB-", "@link", "BlockContainerIdGenerator", "#setNextContainerId", "-LRB-", "long", "-RRB-", "-RCB-", "method", "."], "path": "poemlin/alluxio/tree/master/core/server/src/test/java/alluxio/master/block/meta/BlockContainerIdGeneratorTest.java", "idx": 2087}
{"memberVariables": {"N=4": "int", "rand=new Random(234234)": "Random"}, "code": ["void", "function", "(", ")", "{", "checkRankNUpdate", "(", "N", ",", "N", "-", "2", ")", ";", "checkRankNUpdate", "(", "N", "*", "2", "+", "1", ",", "N", "-", "2", ")", ";", "checkRankNUpdate", "(", "N", "-", "1", ",", "N", "-", "2", ")", ";", "}"], "memberFunctions": {"symmRankNMinus_U": [["void"]], "checkSymmRankNMinus_U": [["void", "int lengthA", "int heightB"]], "symmRankNMinus_L": [["void"]], "checkRankNUpdate": [["void", "int lengthA", "int heightB"]], "checkSymmRankNMinus_L": [["void", "int lengthA", "int widthB"]]}, "className": "TestBlockInnerRankUpdate", "renamed": ["void", "function", "(", ")", "{", "checkRankNUpdate", "(", "N", ",", "N", "-", "2", ")", ";", "checkRankNUpdate", "(", "N", "*", "2", "+", "1", ",", "N", "-", "2", ")", ";", "checkRankNUpdate", "(", "N", "-", "1", ",", "N", "-", "2", ")", ";", "}"], "nl": "Tests rankNUpdate with various sized input matrices", "nlToks": ["Tests", "rankNUpdate", "with", "various", "sized", "input", "matrices"], "path": "adamaulia/efficient-java-matrix-library/tree/master/test/org/ejml/alg/block/TestBlockInnerRankUpdate.java", "idx": 2088}
{"memberVariables": {"mockServerMessage=mock(ServerMessage.class)": "ServerMessage", "mockServerSession=mock(ServerSession.class)": "ServerSession", "testEventProperties": "HashMap<String,Object>", "MOCK_SESSION_ID=\"1234-5678-9012-3456\"": "String", "notificationController": "NotificationController"}, "code": ["void", "function", "(", ")", "{", "when", "(", "mockServerSession", ".", "getId", "(", ")", ")", ".", "thenReturn", "(", "null", ")", ";", "notificationController", ".", "registerUserSession", "(", "mockServerSession", ",", "mockServerMessage", ")", ";", "}"], "memberFunctions": {"testHandleEventThrowsIllegalArgumentExceptionOnEmptyUser": [["void"]], "testHandleEventThrowsIllegalArgumentExceptionOnEmptyApplication": [["void"]], "testDeregisterUserSessionWithNullServerSessonThrowsException": [["void"]], "testDeregisterUserSessionWithNullServerSessionIdThrowsException": [["void"]], "testHandleEventThrowsIllegalArgumentExceptionOnNullTitle": [["void"]], "testGetServerSessionByUserId": [["void"]], "tearDown": [["void"]], "testHandleEventThrowsIllegalArgumentExceptionOnEmptyTitle": [["void"]], "testDeletePersistentNotificationThrowsIllegalArgumentOnNullServerSession": [["void"]], "testDeregisterUserSessionRemovesUserFromKnownClients": [["void"]], "testHandleEventThrowsIllegalArgumentExceptionOnEmptyMessage": [["void"]], "testHandleEventThrowsIllegalArgumentExceptionOnNullApplication": [["void"]], "testDeletePersistentNotificationThrowsIllegalArgumentOnNullUserId": [["void"]], "testRegisterUserSessionWithNullServerSessionThrowsException": [["void"]], "testHandleEventThrowsIllegalArgumentExceptionOnNullUser": [["void"]], "testRegisterUserSession": [["void"]], "setUp": [["void"]], "testHandleEventThrowsIllegalArgumentExceptionOnNullTimestamp": [["void"]], "testHandleEventThrowsIllegalArgumentExceptionOnNullMessage": [["void"]]}, "className": "NotificationControllerTest", "renamed": ["void", "function", "(", ")", "{", "when", "(", "mockServerSession", ".", "getId", "(", ")", ")", ".", "thenReturn", "(", "null", ")", ";", "notificationController", ".", "registerUserSession", "(", "mockServerSession", ",", "mockServerMessage", ")", ";", "}"], "nl": "Test method for {@link NotificationController#registerUserSession(ServerSession,ServerMessage)}. Verifies that method throws  {@code NullPointerException} when ServerSession ID is null.", "nlToks": ["Test", "method", "for", "-LCB-", "@link", "NotificationController", "#registerUserSession", "-LRB-", "ServerSession", ",", "ServerMessage", "-RRB-", "-RCB-", ".", "Verifies", "that", "method", "throws", "-LCB-", "@code", "NullPointerException", "-RCB-", "when", "ServerSession", "ID", "is", "null", "."], "path": "pklinef/ddf-ui/tree/master/search-ui/search-endpoint/src/test/java/org/codice/ddf/ui/searchui/query/controller/NotificationControllerTest.java", "idx": 2090}
{"memberVariables": {"dim": "Dimension", "panel": "XHTMLPanel"}, "code": ["Rectangle", "function", "(", ")", "{", "if", "(", "panel", ".", "getPreferredSize", "(", ")", "!=", "null", ")", "{", "return", "new", "Rectangle", "(", "0", ",", "0", ",", "(", "int", ")", "panel", ".", "getPreferredSize", "(", ")", ".", "getWidth", "(", ")", ",", "(", "int", ")", "panel", ".", "getPreferredSize", "(", ")", ".", "getHeight", "(", ")", ")", ";", "}", "else", "{", "return", "new", "Rectangle", "(", "0", ",", "0", ",", "panel", ".", "getWidth", "(", ")", ",", "panel", ".", "getHeight", "(", ")", ")", ";", "}", "}"], "memberFunctions": {"layout": [["void", "Graphics2D g2", "Dimension dim"]], "renderToImageAutoSize": [["BufferedImage", "String url", "int width"], ["BufferedImage", "String url", "int width", "int bufferedImageType"]], "setDocument": [["void", "String url"], ["void", "Document doc", "String base_url"]], "setSharedContext": [["void", "SharedContext ctx"]], "getPanel": [["XHTMLPanel"]], "getSharedContext": [["SharedContext"]], "render": [["void", "Graphics2D g2"]], "renderToImage": [["BufferedImage", "String url", "int width", "int height"], ["BufferedImage", "String url", "int width", "int height", "int bufferedImageType"]]}, "className": "Graphics2DRenderer", "renamed": ["Rectangle", "function", "(", ")", "{", "if", "(", "panel", ".", "getPreferredSize", "(", ")", "!=", "null", ")", "{", "return", "new", "Rectangle", "(", "0", ",", "0", ",", "(", "int", ")", "panel", ".", "getPreferredSize", "(", ")", ".", "getWidth", "(", ")", ",", "(", "int", ")", "panel", ".", "getPreferredSize", "(", ")", ".", "getHeight", "(", ")", ")", ";", "}", "else", "{", "return", "new", "Rectangle", "(", "0", ",", "0", ",", "panel", ".", "getWidth", "(", ")", ",", "panel", ".", "getHeight", "(", ")", ")", ";", "}", "}"], "nl": "Returns the size image needed to render the document without anything going off the side. Could be different than the dimensions passed into layout because of text that couldn't break or a table that's set to be too big.", "nlToks": ["Returns", "the", "size", "image", "needed", "to", "render", "the", "document", "without", "anything", "going", "off", "the", "side", ".", "Could", "be", "different", "than", "the", "dimensions", "passed", "into", "layout", "because", "of", "text", "that", "could", "n't", "break", "or", "a", "table", "that", "'s", "set", "to", "be", "too", "big", "."], "path": "plutogeek/flyingsaucer/tree/master/flying-saucer-core/src/main/java/org/xhtmlrenderer/simple/Graphics2DRenderer.java", "idx": 2091}
{"memberVariables": {"QR": "DenseMatrix64F", "numRows": "int", "minLength": "int", "v[]": "double", "tau": "double", "error": "boolean", "numCols": "int", "gammas[]": "double", "gamma": "double"}, "code": ["DenseMatrix64F", "function", "(", ")", "{", "return", "QR", ";", "}"], "memberFunctions": {"applyTranQ": [["void", "DenseMatrix64F A"]], "setExpectedMaxSize": [["void", "int numRows", "int numCols"]], "householder": [["void", "final int j"]], "getGammas": [["double[]"]], "applyQ": [["void", "DenseMatrix64F A"]], "decompose": [["boolean", "DenseMatrix64F A"]], "getQ": [["DenseMatrix64F", "DenseMatrix64F Q", "boolean compact"]], "getR": [["DenseMatrix64F", "DenseMatrix64F R", "boolean compact"]], "inputModified": [["boolean"]], "updateA": [["void", "final int w"]]}, "className": "QRDecompositionHouseholderTran_D64", "renamed": ["DenseMatrix64F", "function", "(", ")", "{", "return", "QR", ";", "}"], "nl": "Inner matrix that stores the decomposition", "nlToks": ["Inner", "matrix", "that", "stores", "the", "decomposition"], "path": "adamaulia/efficient-java-matrix-library/tree/master/src/org/ejml/alg/dense/decomposition/qr/QRDecompositionHouseholderTran_D64.java", "idx": 2093}
{"memberVariables": {"TIMEOUT": "int"}, "code": ["InputStream", "function", "(", "String", "name", ")", "{", "InputStream", "stream", "=", "loadResourceAsStream", "(", "name", ",", "ResourceLoader", ".", "class", ".", "getClassLoader", "(", ")", ")", ";", "if", "(", "stream", "==", "null", ")", "{", "throw", "new", "RuleSetNotFoundException", "(", "\"Can't find resource \"", "+", "name", "+", "\". Make sure the resource is a valid file or URL or is on the CLASSPATH\"", ")", ";", "}", "return", "stream", ";", "}"], "memberFunctions": {}, "className": "ResourceLoader", "renamed": ["InputStream", "function", "(", "String", "arg0", ")", "{", "InputStream", "loc0", "=", "loadResourceAsStream", "(", "arg0", ",", "ResourceLoader", ".", "class", ".", "getClassLoader", "(", ")", ")", ";", "if", "(", "loc0", "==", "null", ")", "{", "throw", "new", "RuleSetNotFoundException", "(", "\"srini_string\"", "+", "arg0", "+", "\"srini_string\"", ")", ";", "}", "return", "loc0", ";", "}"], "nl": "Method to find a file, first by finding it as a file (either by the absolute or relative path), then as a URL, and then finally seeing if it is on the classpath.  Caller is responsible for closing the  {@link InputStream}.", "nlToks": ["Method", "to", "find", "a", "file", ",", "first", "by", "finding", "it", "as", "a", "file", "-LRB-", "either", "by", "the", "absolute", "or", "relative", "path", "-RRB-", ",", "then", "as", "a", "URL", ",", "and", "then", "finally", "seeing", "if", "it", "is", "on", "the", "classpath", ".", "Caller", "is", "responsible", "for", "closing", "the", "-LCB-", "@link", "InputStream", "-RCB-", "."], "path": "adangel/pmd/tree/master/pmd-core/src/main/java/net/sourceforge/pmd/util/ResourceLoader.java", "idx": 2094}
{"memberVariables": {"lineItem": "OrderLineType", "iter": "java.util.Iterator"}, "code": ["int", "function", "(", ")", "{", "int", "quantity", "=", "0", ";", "try", "{", "quantity", "=", "lineItem", ".", "getLineItem", "(", ")", ".", "getQuantity", "(", ")", ".", "getValue", "(", ")", ".", "intValue", "(", ")", ";", "}", "catch", "(", "NullPointerException", "npe", ")", "{", "}", "return", "quantity", ";", "}"], "memberFunctions": {"getItemDescription": [["String"]], "next": [["Object"]], "getItemPriceCurrency": [["java.util.Currency"]], "getItemPartNumber": [["String"]], "getItemPrice": [["double"]], "getTheItemPrice": [["BasePriceType"]], "hasNext": [["boolean"]], "remove": [["void"]]}, "className": "OrderLineTypeFacade", "renamed": ["int", "function", "(", ")", "{", "int", "loc0", "=", "0", ";", "try", "{", "loc0", "=", "lineItem", ".", "getLineItem", "(", ")", ".", "getQuantity", "(", ")", ".", "getValue", "(", ")", ".", "intValue", "(", ")", ";", "}", "catch", "(", "NullPointerException", "loc1", ")", "{", "}", "return", "loc0", ";", "}"], "nl": "Returns the quantity associated with a line item.", "nlToks": ["Returns", "the", "quantity", "associated", "with", "a", "line", "item", "."], "path": "pmeijer/meta-core/tree/master/meta/DesignDataPackage/tools/jaxb-ri-2.2.6/samples/ubl/src/samples/ubl/report/facade/OrderLineTypeFacade.java", "idx": 2096}
{"memberVariables": {"AMPLIFIED=true": "boolean", "DELETED=false": "boolean", "gisticID": "int", "peakStart": "int", "genes_in_ROI": "ArrayList<CanonicalGene>", "cytoband": "String", "amp": "boolean", "NO_SUCH_GISTIC=-1": "int", "cancerStudyId": "int", "chromosome": "int", "peakEnd": "int", "qValue": "double"}, "code": ["void", "function", "(", "String", "cytoband", ")", "{", "this", ".", "cytoband", "=", "cytoband", ";", "}"], "memberFunctions": {"setPeakEnd": [["void", "int peakEnd"]], "setAmp": [["void", "boolean amp"]], "getCytoband": [["String"]], "setPeakStart": [["void", "int peakStart"]], "getPeakStart": [["int"]], "setqValue": [["void", "double qValue"]], "getAmp": [["boolean"]], "getInternalId": [["int"]], "setGenes_in_ROI": [["void", "ArrayList<CanonicalGene> genes_in_ROI"]], "peakSize": [["int"]], "getCancerStudyId": [["int"]], "getChromosome": [["int"]], "getPeakEnd": [["int"]], "addGene": [["void", "CanonicalGene gene"]], "setInternalId": [["void", "int internalId"]], "setCancerStudyId": [["void", "int cancerStudyId"]], "getqValue": [["double"]], "toString": [["String"]], "getGenes_in_ROI": [["ArrayList<CanonicalGene>"]], "setChromosome": [["void", "int chromosome"]]}, "className": "Gistic", "renamed": ["void", "function", "(", "String", "arg0", ")", "{", "this", ".", "cytoband", "=", "arg0", ";", "}"], "nl": "Sets the cytoband of a gistic", "nlToks": ["Sets", "the", "cytoband", "of", "a", "gistic"], "path": "adamabeshouse/cbioportal/tree/master/core/src/main/java/org/mskcc/cbio/portal/model/Gistic.java", "idx": 2098}
{"memberVariables": {"_SignCertificateResponse_QNAME=new QName(\"http://platformlayer.org/auth/v1.0\",\"signCertificateResponse\")": "QName", "_Access_QNAME=new QName(\"http://platformlayer.org/auth/v1.0\",\"access\")": "QName", "_CheckServiceAccessResponse_QNAME=new QName(\"http://platformlayer.org/auth/v1.0\",\"checkServiceAccessResponse\")": "QName", "_SignCertificateRequest_QNAME=new QName(\"http://platformlayer.org/auth/v1.0\",\"signCertificateRequest\")": "QName", "_CertificateChainInfo_QNAME=new QName(\"http://platformlayer.org/auth/v1.0\",\"certificateChainInfo\")": "QName", "_RegistrationRequest_QNAME=new QName(\"http://platformlayer.org/auth/v1.0\",\"registrationRequest\")": "QName", "_User_QNAME=new QName(\"http://platformlayer.org/auth/v1.0\",\"user\")": "QName", "_AuthenticateResponse_QNAME=new QName(\"http://platformlayer.org/auth/v1.0\",\"authenticateResponse\")": "QName", "_CheckServiceAccessRequest_QNAME=new QName(\"http://platformlayer.org/auth/v1.0\",\"checkServiceAccessRequest\")": "QName", "_ValidateTokenResponse_QNAME=new QName(\"http://platformlayer.org/auth/v1.0\",\"validateTokenResponse\")": "QName", "_AuthenticateRequest_QNAME=new QName(\"http://platformlayer.org/auth/v1.0\",\"authenticateRequest\")": "QName", "_Auth_QNAME=new QName(\"http://platformlayer.org/auth/v1.0\",\"auth\")": "QName", "_ValidateAccess_QNAME=new QName(\"http://platformlayer.org/auth/v1.0\",\"validateAccess\")": "QName", "_RegistrationResponse_QNAME=new QName(\"http://platformlayer.org/auth/v1.0\",\"registrationResponse\")": "QName", "_Roles_QNAME=new QName(\"http://platformlayer.org/auth/v1.0\",\"roles\")": "QName"}, "code": ["ValidateAccess", "function", "(", ")", "{", "return", "new", "ValidateAccess", "(", ")", ";", "}"], "memberFunctions": {"createValidateTokenResponse": [["ValidateTokenResponse"], ["JAXBElement<ValidateTokenResponse>", "ValidateTokenResponse value"]], "createCertificateChainInfo": [["CertificateChainInfo"], ["JAXBElement<CertificateChainInfo>", "CertificateChainInfo value"]], "createRoleList": [["RoleList"]], "createCheckServiceAccessRequest": [["CheckServiceAccessRequest"], ["JAXBElement<CheckServiceAccessRequest>", "CheckServiceAccessRequest value"]], "createRole": [["Role"]], "createToken": [["Token"]], "createCheckServiceAccessResponse": [["CheckServiceAccessResponse"], ["JAXBElement<CheckServiceAccessResponse>", "CheckServiceAccessResponse value"]], "createPasswordCredentials": [["PasswordCredentials"]], "createAuthenticateResponse": [["AuthenticateResponse"], ["JAXBElement<AuthenticateResponse>", "AuthenticateResponse value"]], "createAuthenticateRequest": [["AuthenticateRequest"], ["JAXBElement<AuthenticateRequest>", "AuthenticateRequest value"]], "createAuth": [["Auth"], ["JAXBElement<Auth>", "Auth value"]], "createCertificateInfo": [["CertificateInfo"]], "createUserValidation": [["UserValidation"]], "createCertificateCredentials": [["CertificateCredentials"]], "createRegistrationResponse": [["RegistrationResponse"], ["JAXBElement<RegistrationResponse>", "RegistrationResponse value"]], "createUser": [["User"], ["JAXBElement<User>", "User value"]], "createRoles": [["JAXBElement<RoleList>", "RoleList value"]], "createRegistrationRequest": [["RegistrationRequest"], ["JAXBElement<RegistrationRequest>", "RegistrationRequest value"]], "createAccess": [["Access"], ["JAXBElement<Access>", "Access value"]], "createProjectValidation": [["ProjectValidation"]], "createSignCertificateResponse": [["SignCertificateResponse"], ["JAXBElement<SignCertificateResponse>", "SignCertificateResponse value"]], "createSignCertificateRequest": [["SignCertificateRequest"], ["JAXBElement<SignCertificateRequest>", "SignCertificateRequest value"]]}, "className": "ObjectFactory", "renamed": ["ValidateAccess", "function", "(", ")", "{", "return", "new", "ValidateAccess", "(", ")", ";", "}"], "nl": "Create an instance of  {@link ValidateAccess }", "nlToks": ["Create", "an", "instance", "of", "-LCB-", "@link", "ValidateAccess", "-RCB-"], "path": "platformlayer/platformlayer/tree/master/auth/client/src/generated/xjc/org/platformlayer/auth/v1/ObjectFactory.java", "idx": 2099}
{"memberVariables": {}, "code": ["String", "function", "(", "HttpServletRequest", "request", ")", "{", "String", "format", "=", "request", ".", "getParameter", "(", "WebService", ".", "FORMAT", ")", ";", "return", "format", "==", "null", "?", "format", ":", "format", ".", "toLowerCase", "(", ")", ";", "}"], "memberFunctions": {"getCancerStudyIDs": [["HashSet<String>", "HttpServletRequest request"]], "getCaseSetId": [["String", "HttpServletRequest request"]], "getSampleIds": [["ArrayList<String>", "HttpServletRequest request"]], "getCancerStudyId": [["String", "HttpServletRequest request"]], "getGeneticProfileId": [["ArrayList<String>", "HttpServletRequest request"]]}, "className": "WebserviceParserUtils", "renamed": ["String", "function", "(", "HttpServletRequest", "arg0", ")", "{", "String", "loc0", "=", "arg0", ".", "getParameter", "(", "WebService", ".", "FORMAT", ")", ";", "return", "loc0", "==", "null", "?", "loc0", ":", "loc0", ".", "toLowerCase", "(", ")", ";", "}"], "nl": "Get the return format requested", "nlToks": ["Get", "the", "return", "format", "requested"], "path": "adamabeshouse/cbioportal/tree/master/core/src/main/java/org/mskcc/cbio/portal/util/WebserviceParserUtils.java", "idx": 2100}
{"memberVariables": {"dishCollectionRepository": "DishCollectionRepository", "log=LoggerFactory.getLogger(DishCollectionService.class)": "Logger"}, "code": ["DishCollection", "function", "(", "DishCollection", "dishCollection", ")", "{", "log", ".", "debug", "(", "\"Request to save DishCollection : {}\"", ",", "dishCollection", ")", ";", "DishCollection", "result", "=", "dishCollectionRepository", ".", "save", "(", "dishCollection", ")", ";", "return", "result", ";", "}"], "memberFunctions": {"findOneByName": [["DishCollection", "String name"]], "findOne": [["DishCollection", "String id"]], "findAll": [["Page<DishCollection>", "Pageable pageable"]], "delete": [["void", "String id"]]}, "className": "DishCollectionService", "renamed": ["DishCollection", "function", "(", "DishCollection", "arg0", ")", "{", "log", ".", "debug", "(", "\"srini_string\"", ",", "arg0", ")", ";", "DishCollection", "loc0", "=", "dishCollectionRepository", ".", "save", "(", "arg0", ")", ";", "return", "loc0", ";", "}"], "nl": "Save a dishCollection.", "nlToks": ["Save", "a", "dishCollection", "."], "path": "pigkey/kitchen/tree/master/app/src/main/java/com/kitchen/app/service/DishCollectionService.java", "idx": 2105}
{"memberVariables": {"ZERO_HASH=new Sha256Hash(new byte[32])": "Sha256Hash", "bytes": "byte[]"}, "code": ["Sha256Hash", "function", "(", "byte", "[", "]", "contents", ")", "{", "return", "new", "Sha256Hash", "(", "Utils", ".", "doubleDigest", "(", "contents", ")", ")", ";", "}"], "memberFunctions": {"hashFileContents": [["Sha256Hash", "File f"]], "hashCode": [["int"]], "equals": [["boolean", "Object other"]], "create": [["Sha256Hash", "byte[] contents"]], "toBigInteger": [["BigInteger"]], "toString": [["String"]], "duplicate": [["Sha256Hash"]], "compareTo": [["int", "Object o"]], "getBytes": [["byte[]"]]}, "className": "Sha256Hash", "renamed": ["Sha256Hash", "function", "(", "byte", "[", "]", "arg0", ")", "{", "return", "new", "Sha256Hash", "(", "Utils", ".", "doubleDigest", "(", "arg0", ")", ")", ";", "}"], "nl": "Calculates the hash of the hash of the contents. This is a standard operation in Bitcoin.", "nlToks": ["Calculates", "the", "hash", "of", "the", "hash", "of", "the", "contents", ".", "This", "is", "a", "standard", "operation", "in", "Bitcoin", "."], "path": "plncoin/plncoin-and/tree/master/plncoinj/core/src/main/java/com/google/bitcoin/core/Sha256Hash.java", "idx": 2106}
{"memberVariables": {"HADOOP_NN_KERBEROS_NAME=\"dfs.namenode.kerberos.principal\"": "String", "APP_LIB_PATH_LIST=\"oozie.wf.application.lib\"": "String", "HADOOP_USER=\"user.name\"": "String", "CONF_PREFIX=Service.CONF_PREFIX + \"WorkflowAppService.\"": "String", "SYSTEM_LIB_PATH=CONF_PREFIX + \"system.libpath\"": "String", "HADOOP_UGI=\"hadoop.job.ugi\"": "String", "HADOOP_JT_KERBEROS_NAME=\"mapreduce.jobtracker.kerberos.principal\"": "String", "systemLibPath": "Path"}, "code": ["void", "function", "(", ")", "{", "}"], "memberFunctions": {"init": [["void", "Services services"]], "getInterface": [["Class<? extends Service>"]], "createProtoActionConf": [["XConfiguration", "Configuration jobConf", "String authToken", "boolean isWorkflowJob"]], "getLibFiles": [["List<String>", "FileSystem fs", "Path libPath"]], "readDefinition": [["String", "String appPath", "String user", "String group", "String autToken"]], "parseDef": [["WorkflowApp", "Configuration jobConf", "String authToken"], ["WorkflowApp", "String wfXml"]], "accept": [["boolean", "Path path"]]}, "className": "WorkflowAppService", "renamed": ["void", "function", "(", ")", "{", "}"], "nl": "Destroy the workflow application service.", "nlToks": ["Destroy", "the", "workflow", "application", "service", "."], "path": "pingpangkuangmo/oozie/tree/master/core/src/main/java/org/apache/oozie/service/WorkflowAppService.java", "idx": 2107}
{"memberVariables": {"TIMEZONE_MODE=\"timezone_mode\"": "String", "eventTimezone=\"\"": "String"}, "code": ["String", "function", "(", ")", "{", "return", "fromCalendar", "(", "GregorianCalendar", ".", "getInstance", "(", ")", ")", ";", "}"], "memberFunctions": {"get12HourTime": [["String", "final Date date"]], "getTimeZoneDateString": [["String", "final Date date"]], "getDateObject": [["Date", "final String iso8601String"]], "get24HourTime": [["String", "final Date date"]], "getEventTimezone": [["TimeZone"]], "dateFromCalendar": [["String", "Calendar currentDate"]], "getTimeZoneDate": [["Date", "final Date date"]], "fromCalendar": [["String", "final Calendar calendar"]], "setEventTimezone": [["void"]]}, "className": "ISO8601Date", "renamed": ["String", "function", "(", ")", "{", "return", "fromCalendar", "(", "GregorianCalendar", ".", "getInstance", "(", ")", ")", ";", "}"], "nl": "Get current date and time formatted as ISO 8601 string.", "nlToks": ["Get", "current", "date", "and", "time", "formatted", "as", "ISO", "8601", "string", "."], "path": "piyush0/open-event-android/tree/master/android/app/src/main/java/org/fossasia/openevent/utils/ISO8601Date.java", "idx": 2108}
{"memberVariables": {"differenceEvaluator=DifferenceEvaluators.Default": "DifferenceEvaluator", "comparisonResultsToCheck=CHECK_FOR_IDENTICAL": "ComparisonResult[]", "CHECK_FOR_IDENTICAL=new ComparisonResult[]{ComparisonResult.SIMILAR,ComparisonResult.DIFFERENT}": "ComparisonResult[]", "controlSource": "Source", "CHECK_FOR_SIMILAR=new ComparisonResult[]{ComparisonResult.DIFFERENT}": "ComparisonResult[]", "namespaceContext": "Map<String,String>", "nodeFilter": "Predicate<Node>", "differenceListeners=new ArrayList<ComparisonListener>()": "List<ComparisonListener>", "attributeFilter": "Predicate<Attr>", "ignoreWhitespace": "boolean", "comparisonListeners=new ArrayList<ComparisonListener>()": "List<ComparisonListener>", "ignoreComments": "boolean", "normalizeWhitespace": "boolean", "nodeMatcher": "NodeMatcher", "comparisonController=ComparisonControllers.Default": "ComparisonController", "testSource": "Source", "results": "List<Difference>", "comparisonResultsToCheck": "EnumSet<ComparisonResult>"}, "code": ["DiffBuilder", "function", "(", "final", "Object", "control", ")", "{", "final", "Source", "controlSource", "=", "getSource", "(", "control", ")", ";", "return", "new", "DiffBuilder", "(", "controlSource", ")", ";", "}"], "memberFunctions": {"checkForIdentical": [["DiffBuilder"]], "withNamespaceContext": [["DiffBuilder", "Map<String,String> uri2Prefix"]], "withNodeFilter": [["DiffBuilder", "Predicate<Node> nodeFilter"]], "comparisonPerformed": [["void", "final Comparison comparison", "final ComparisonResult outcome"]], "withNodeMatcher": [["DiffBuilder", "final NodeMatcher nodeMatcher"]], "getDifferences": [["List<Difference>"]], "withComparisonController": [["DiffBuilder", "final ComparisonController comparisonController"]], "ignoreWhitespace": [["DiffBuilder"]], "withDifferenceEvaluator": [["DiffBuilder", "final DifferenceEvaluator differenceEvaluator"]], "ignoreComments": [["DiffBuilder"]], "withDifferenceListeners": [["DiffBuilder", "final ComparisonListener... comparisonListeners"]], "checkForSimilar": [["DiffBuilder"]], "withTest": [["DiffBuilder", "Object test"]], "normalizeWhitespace": [["DiffBuilder"]], "build": [["Diff"]], "getSource": [["Source", "Object object"]], "withComparisonListeners": [["DiffBuilder", "final ComparisonListener... comparisonListeners"]], "wrap": [["Source", "final Source source"]], "withAttributeFilter": [["DiffBuilder", "Predicate<Attr> attributeFilter"]]}, "className": "DiffBuilder", "renamed": ["DiffBuilder", "function", "(", "final", "Object", "arg0", ")", "{", "final", "Source", "loc0", "=", "getSource", "(", "arg0", ")", ";", "return", "new", "DiffBuilder", "(", "loc0", ")", ";", "}"], "nl": "Create a DiffBuilder from all kind of types supported by  {@link Input#from(Object)}.", "nlToks": ["Create", "a", "DiffBuilder", "from", "all", "kind", "of", "types", "supported", "by", "-LCB-", "@link", "Input", "#from", "-LRB-", "Object", "-RRB-", "-RCB-", "."], "path": "phbenisc/xmlunit/tree/master/xmlunit-core/src/main/java/org/xmlunit/builder/DiffBuilder.java", "idx": 2109}
{"memberVariables": {"LOG=LoggerFactory.getLogger(JsonUtils.class)": "Logger"}, "code": ["void", "function", "(", "final", "JSONObject", "json", ",", "final", "String", "name", ",", "final", "Collection", "value", ")", "{", "try", "{", "json", ".", "put", "(", "name", ",", "value", ")", ";", "}", "catch", "(", "final", "JSONException", "e", ")", "{", "LOG", ".", "warn", "(", "\"JSON error\"", ",", "e", ")", ";", "}", "}"], "memberFunctions": {"extractInt": [["int", "final JSONObject json", "final String key"]], "getInetAddresses": [["Collection<InetSocketAddress>", "final String data"]]}, "className": "JsonUtils", "renamed": ["void", "function", "(", "final", "JSONObject", "arg0", ",", "final", "String", "arg1", ",", "final", "Collection", "arg2", ")", "{", "try", "{", "arg0", ".", "put", "(", "arg1", ",", "arg2", ")", ";", "}", "catch", "(", "final", "JSONException", "loc0", ")", "{", "LOG", ".", "warn", "(", "\"srini_string\"", ",", "loc0", ")", ";", "}", "}"], "nl": "Puts the specified name/value pair in the specified JSON object.", "nlToks": ["Puts", "the", "specified", "name/value", "pair", "in", "the", "specified", "JSON", "object", "."], "path": "adamfisk/littleshoot-client/tree/master/common/json/src/main/java/org/lastbamboo/common/json/JsonUtils.java", "idx": 2110}
{"memberVariables": {"svd": "SingularValueDecomposition<DenseMatrix64F>", "mat": "DenseMatrix64F", "U": "T", "V": "T", "W": "T"}, "code": ["T", "function", "(", ")", "{", "return", "V", ";", "}"], "memberFunctions": {"getW": [["T"]], "getSVD": [["SingularValueDecomposition"]], "getSingleValue": [["double", "int index"]], "rank": [["int"]], "nullSpace": [["SimpleMatrix"]], "nullity": [["int"]], "getU": [["T"]], "quality": [["double"]]}, "className": "SimpleSVD", "renamed": ["T", "function", "(", ")", "{", "return", "V", ";", "}"], "nl": " Returns the orthogonal 'V' matrix. ", "nlToks": ["Returns", "the", "orthogonal", "`", "V", "'", "matrix", "."], "path": "adamaulia/efficient-java-matrix-library/tree/master/src/org/ejml/simple/SimpleSVD.java", "idx": 2111}
{"memberVariables": {"mCert": "X509Certificate", "mAlias": "String", "mSubjectSecondary=\"\"": "String", "mSubjectPrimary": "String", "mString": "String"}, "code": ["String", "function", "(", ")", "{", "return", "mAlias", ";", "}"], "memberFunctions": {"getSubjectPrimary": [["String"]], "getCertificate": [["X509Certificate"]], "getSubjectAltNames": [["List<String>"]], "toString": [["String"]], "compareTo": [["int", "TrustedCertificateEntry another"]], "getSubjectSecondary": [["String"]]}, "className": "TrustedCertificateEntry", "renamed": ["String", "function", "(", ")", "{", "return", "mAlias", ";", "}"], "nl": "The alias associated with this certificate.", "nlToks": ["The", "alias", "associated", "with", "this", "certificate", "."], "path": "prathyks/strongswan/tree/master/src/frontends/android/app/src/main/java/org/strongswan/android/security/TrustedCertificateEntry.java", "idx": 2112}
{"memberVariables": {"LOG=LoggerFactory.getLogger(TurnLauncher.class)": "Logger", "m_turnServer": "TurnServer"}, "code": ["void", "function", "(", "final", "String", "[", "]", "args", ")", "{", "LOG", ".", "debug", "(", "\"Launching SIP and TURN servers...\"", ")", ";", "final", "TurnLauncher", "launcher", "=", "new", "TurnLauncher", "(", ")", ";", "LOG", ".", "debug", "(", "\"Created launcher\"", ")", ";", "try", "{", "launcher", ".", "start", "(", ")", ";", "LOG", ".", "debug", "(", "\"Started launcher\"", ")", ";", "}", "catch", "(", "final", "Throwable", "t", ")", "{", "LOG", ".", "error", "(", "\"Could not start!!!\"", ",", "t", ")", ";", "}", "}"], "memberFunctions": {"stop": [["void"]], "start": [["void"]]}, "className": "TurnLauncher", "renamed": ["void", "function", "(", "final", "String", "[", "]", "arg0", ")", "{", "LOG", ".", "debug", "(", "\"srini_string\"", ")", ";", "final", "TurnLauncher", "loc0", "=", "new", "TurnLauncher", "(", ")", ";", "LOG", ".", "debug", "(", "\"srini_string\"", ")", ";", "try", "{", "loc0", ".", "start", "(", ")", ";", "LOG", ".", "debug", "(", "\"srini_string\"", ")", ";", "}", "catch", "(", "final", "Throwable", "loc1", ")", "{", "LOG", ".", "error", "(", "\"srini_string\"", ",", "loc1", ")", ";", "}", "}"], "nl": "Launches the SIP and TURN servers.", "nlToks": ["Launches", "the", "SIP", "and", "TURN", "servers", "."], "path": "adamfisk/littleshoot-client/tree/master/common/turn/server/src/main/java/org/lastbamboo/common/turn/server/TurnLauncher.java", "idx": 2115}
{"memberVariables": {"projectSecret": "byte[]", "csr": "String", "project": "String"}, "code": ["void", "function", "(", "byte", "[", "]", "value", ")", "{", "this", ".", "projectSecret", "=", "(", "(", "byte", "[", "]", ")", "value", ")", ";", "}"], "memberFunctions": {"setCsr": [["void", "String value"]], "getCsr": [["String"]], "getProjectSecret": [["byte[]"]], "setProject": [["void", "String value"]], "getProject": [["String"]]}, "className": "SignCertificateRequest", "renamed": ["void", "function", "(", "byte", "[", "]", "arg0", ")", "{", "this", ".", "projectSecret", "=", "(", "(", "byte", "[", "]", ")", "arg0", ")", ";", "}"], "nl": "Sets the value of the projectSecret property.", "nlToks": ["Sets", "the", "value", "of", "the", "projectSecret", "property", "."], "path": "platformlayer/platformlayer/tree/master/auth/client/src/generated/xjc/org/platformlayer/auth/v1/SignCertificateRequest.java", "idx": 2116}
{"memberVariables": {}, "code": ["String", "function", "(", "Date", "dateObj", ",", "DateFormatType", "dateFormatType", ")", "{", "String", "strDate", "=", "null", ";", "SimpleDateFormat", "dateFormat", "=", "new", "SimpleDateFormat", "(", "dateFormatType", ".", "valueOf", "(", ")", ")", ";", "strDate", "=", "dateFormat", ".", "format", "(", "dateObj", ")", ";", "return", "strDate", ";", "}"], "memberFunctions": {"getExecutorCallable": [["FetcherTesterExecCallable", "FeedTestConfig feedTestConfig"]], "getWaiterCallable": [["FetcherTesterWaitCallable", "List<FeedTestConfig> feedTestConfigLst", "ExecutorService fixedPoolExecutorService"]]}, "className": "FetcherTesterUtil", "renamed": ["String", "function", "(", "Date", "arg0", ",", "DateFormatType", "arg1", ")", "{", "String", "loc0", "=", "null", ";", "SimpleDateFormat", "loc1", "=", "new", "SimpleDateFormat", "(", "arg1", ".", "valueOf", "(", ")", ")", ";", "loc0", "=", "loc1", ".", "format", "(", "arg0", ")", ";", "return", "loc0", ";", "}"], "nl": "Format date.", "nlToks": ["Format", "date", "."], "path": "pkesireddy/portico_fletcher/tree/master/FetcherTesterService/src/main/java/org/ithaka/cm/fetchertester/util/FetcherTesterUtil.java", "idx": 2118}
{"memberVariables": {}, "code": ["int", "function", "(", "SymmetricQrAlgorithm", "alg", ",", "double", "val", ",", "double", "tol", ")", "{", "int", "total", "=", "0", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "alg", ".", "getNumberOfEigenvalues", "(", ")", ";", "i", "++", ")", "{", "double", "a", "=", "alg", ".", "getEigenvalue", "(", "i", ")", ";", "if", "(", "Math", ".", "abs", "(", "a", "-", "val", ")", "<=", "tol", ")", "{", "total", "++", ";", "}", "}", "return", "total", ";", "}"], "memberFunctions": {"hasOffDiagonal": [["void"]], "shouldNotChange": [["void"]], "zeroDiagonalNotZeroOff": [["void"]], "multipleEigenvalues": [["void"]]}, "className": "TestSymmetricQrAlgorithm", "renamed": ["int", "function", "(", "SymmetricQrAlgorithm", "arg0", ",", "double", "arg1", ",", "double", "arg2", ")", "{", "int", "loc0", "=", "0", ";", "for", "(", "int", "loc1", "=", "0", ";", "loc1", "<", "arg0", ".", "getNumberOfEigenvalues", "(", ")", ";", "loc1", "++", ")", "{", "double", "loc2", "=", "arg0", ".", "getEigenvalue", "(", "loc1", ")", ";", "if", "(", "Math", ".", "abs", "(", "loc2", "-", "arg1", ")", "<=", "arg2", ")", "{", "loc0", "++", ";", "}", "}", "return", "loc0", ";", "}"], "nl": "Counts the number of times the specified eigenvalue appears.", "nlToks": ["Counts", "the", "number", "of", "times", "the", "specified", "eigenvalue", "appears", "."], "path": "adamaulia/efficient-java-matrix-library/tree/master/test/org/ejml/alg/dense/decomposition/eig/symm/TestSymmetricQrAlgorithm.java", "idx": 2119}
{"memberVariables": {"nsPrefixMap": "Map<String,String>"}, "code": ["BasicNameManager", "function", "(", "ServiceInfo", "service", ")", "{", "BasicNameManager", "nameManager", "=", "new", "BasicNameManager", "(", ")", ";", "nameManager", ".", "initialize", "(", "service", ",", "null", ")", ";", "return", "nameManager", ";", "}"], "memberFunctions": {"getJavascriptName": [["String", "XmlSchemaComplexType schemaType"], ["String", "QName qname"]], "transformURI": [["String", "String uri"]], "defineFallbackPrefix": [["String", "String uri"]], "initialize": [["void", "ServiceInfo service", "Endpoint endpoint"]], "getOptions": [["JavascriptOptionsFeature", "Endpoint endpoint"]]}, "className": "BasicNameManager", "renamed": ["BasicNameManager", "function", "(", "ServiceInfo", "arg0", ")", "{", "BasicNameManager", "loc0", "=", "new", "BasicNameManager", "(", ")", ";", "loc0", ".", "initialize", "(", "arg0", ",", "null", ")", ";", "return", "loc0", ";", "}"], "nl": "Factory that just takes a service. Used in tools and unit tests.", "nlToks": ["Factory", "that", "just", "takes", "a", "service", ".", "Used", "in", "tools", "and", "unit", "tests", "."], "path": "primesign/cxf/tree/master/rt/javascript/javascript-rt/src/main/java/org/apache/cxf/javascript/BasicNameManager.java", "idx": 2120}
{"memberVariables": {"SINGLETON": "IConfigurationFactory", "handler=new ConfigurationProperties()": "ConfigurationHandler"}, "code": ["ConfigurationHandler", "function", "(", ")", "{", "return", "handler", ";", "}"], "memberFunctions": {"getInstance": [["IConfigurationFactory"]]}, "className": "ConfigurationFactory", "renamed": ["ConfigurationHandler", "function", "(", ")", "{", "return", "handler", ";", "}"], "nl": "Returns the customized configuration for the user.", "nlToks": ["Returns", "the", "customized", "configuration", "for", "the", "user", "."], "path": "pichiliani/CoArgoUML/tree/master/v0.24/fonte/src/argouml-app/src/org/argouml/configuration/ConfigurationFactory.java", "idx": 2121}
{"memberVariables": {"federationPullResults=new ConcurrentHashMap<String,FederationModel>()": "Map<String,FederationModel>", "notificationManager": "INotificationManager", "settings": "IStoredSettings", "federationRegistrations=Collections.synchronizedList(new ArrayList<FederationModel>())": "List<FederationModel>", "runtimeManager": "IRuntimeManager", "logger=LoggerFactory.getLogger(getClass())": "Logger", "repositoryManager": "IRepositoryManager"}, "code": ["FederationProposal", "function", "(", "String", "token", ")", "{", "List", "<", "FederationProposal", ">", "list", "=", "getPendingFederationProposals", "(", ")", ";", "for", "(", "FederationProposal", "proposal", ":", "list", ")", "{", "if", "(", "proposal", ".", "token", ".", "equals", "(", "token", ")", ")", "{", "return", "proposal", ";", "}", "}", "return", "null", ";", "}"], "memberFunctions": {"deletePendingFederationProposal": [["boolean", "FederationProposal proposal"]], "authenticate": [["UserModel", "HttpServletRequest httpRequest"]], "getFederationRegistration": [["FederationModel", "String url", "String name"]], "getFederationUser": [["UserModel"]], "acknowledgeFederationStatus": [["boolean", "String identification", "FederationModel registration"]], "getPendingFederationProposals": [["List<FederationProposal>"]], "getFederationResultRegistrations": [["List<FederationModel>"]], "start": [["FederationManager"]], "canFederate": [["boolean"]], "getRepositories": [["Map<String,RepositoryModel>", "String gitblitUrl", "String token"]], "stop": [["FederationManager"]], "getFederationSets": [["List<FederationSet>", "String gitblitUrl"]], "getProposalsFolder": [["File"]], "submitFederationProposal": [["boolean", "FederationProposal proposal", "String gitblitUrl"]], "getFederationToken": [["String", "FederationToken type"], ["String", "String value"]], "createFederationProposal": [["FederationProposal", "String gitblitUrl", "String token"]], "getFederationRegistrations": [["List<FederationModel>"]], "getFederationTokens": [["List<String>"]], "validateFederationRequest": [["boolean", "FederationRequest req", "String token"]]}, "className": "FederationManager", "renamed": ["FederationProposal", "function", "(", "String", "arg0", ")", "{", "List", "<", "FederationProposal", ">", "loc0", "=", "getPendingFederationProposals", "(", ")", ";", "for", "(", "FederationProposal", "loc1", ":", "loc0", ")", "{", "if", "(", "loc1", ".", "arg0", ".", "equals", "(", "arg0", ")", ")", "{", "return", "loc1", ";", "}", "}", "return", "null", ";", "}"], "nl": "Returns the proposal identified by the supplied token.", "nlToks": ["Returns", "the", "proposal", "identified", "by", "the", "supplied", "token", "."], "path": "pombreda/gitblit/tree/master/src/main/java/com/gitblit/manager/FederationManager.java", "idx": 2122}
{"memberVariables": {"_cssText": "String", "rgbColorValue": "RGBColor", "floatValue": "float", "rectValue": "Rect", "counter": "Counter", "primitiveType": "short"}, "code": ["void", "function", "(", "String", "cssText", ")", "{", "this", ".", "_cssText", "=", "cssText", ";", "}"], "memberFunctions": {"setStringValue": [["void", "short stringType", "String stringValue"]], "getCssValueType": [["short"]], "getStringValue": [["String"]], "getNewIdentValue": [["FSCssValue", "String identValue"]], "getCssText": [["String"]], "getRectValue": [["Rect"]], "setFloatValue": [["void", "short unitType", "float floatValue"]], "getFloatValue": [["float", "short unitType"]], "getPrimitiveType": [["short"]], "getRGBColorValue": [["RGBColor"]], "toString": [["String"]], "getCounterValue": [["Counter"]]}, "className": "FSCssValue", "renamed": ["void", "function", "(", "String", "arg0", ")", "{", "this", ".", "_cssText", "=", "arg0", ";", "}"], "nl": "Not supported, class is immutable. Sets the string representation of the current value.", "nlToks": ["Not", "supported", ",", "class", "is", "immutable", ".", "Sets", "the", "string", "representation", "of", "the", "current", "value", "."], "path": "plutogeek/flyingsaucer/tree/master/flying-saucer-core/src/main/java/org/xhtmlrenderer/css/value/FSCssValue.java", "idx": 2125}
{"memberVariables": {"blk": "Block", "currentrec": "int", "pg=new Page()": "Page"}, "code": ["void", "function", "(", ")", "{", "blk", "=", "new", "Block", "(", "blk", ".", "fileName", "(", ")", ",", "blk", ".", "number", "(", ")", "-", "1", ")", ";", "pg", ".", "read", "(", "blk", ")", ";", "currentrec", "=", "pg", ".", "getInt", "(", "LogMgr", ".", "LAST_POS", ")", ";", "}"], "memberFunctions": {"next": [["BasicLogRecord"]], "add": [["void", "BasicLogRecord e"]], "set": [["void", "BasicLogRecord e"]], "previous": [["BasicLogRecord"]], "hasPrevious": [["boolean"]], "hasNext": [["boolean"]], "moveToPreviousBlock": [["void"]], "nextIndex": [["int"]], "remove": [["void"]], "previousIndex": [["int"]]}, "className": "LogIterator", "renamed": ["void", "function", "(", ")", "{", "blk", "=", "new", "Block", "(", "blk", ".", "fileName", "(", ")", ",", "blk", ".", "number", "(", ")", "-", "1", ")", ";", "pg", ".", "read", "(", "blk", ")", ";", "currentrec", "=", "pg", ".", "getInt", "(", "LogMgr", ".", "LAST_POS", ")", ";", "}"], "nl": "Moves to the next log block in reverse order, and positions it after the last record in that block.", "nlToks": ["Moves", "to", "the", "next", "log", "block", "in", "reverse", "order", ",", "and", "positions", "it", "after", "the", "last", "record", "in", "that", "block", "."], "path": "prerit2803/DBMSProject2/tree/master/simpledb/log/LogIterator.java", "idx": 2126}
{"memberVariables": {"serialVersionUID=-8428728265893081763L": "long"}, "code": ["Object", "function", "(", "String", "targetJndiName", ")", "{", "Object", "home", "=", "new", "InitialContext", "(", ")", ".", "lookup", "(", "targetJndiName", ")", ";", "Method", "method", "=", "home", ".", "getClass", "(", ")", ".", "getMethod", "(", "\"create\"", ",", "new", "Class", "[", "0", "]", ")", ";", "return", "method", ".", "invoke", "(", "home", ",", "new", "Object", "[", "0", "]", ")", ";", "}"], "memberFunctions": {"ejbCreate": [["void"]], "setMessageDrivenContext": [["void", "MessageDrivenContext mdc"]], "ejbRemove": [["void"]]}, "className": "DispatchMDBMessageListenerImpl", "renamed": ["Object", "function", "(", "String", "arg0", ")", "{", "Object", "loc0", "=", "new", "InitialContext", "(", ")", ".", "lookup", "(", "arg0", ")", ";", "Method", "loc1", "=", "loc0", ".", "getClass", "(", ")", ".", "getMethod", "(", "\"srini_string\"", ",", "new", "Class", "[", "0", "]", ")", ";", "return", "loc1", ".", "invoke", "(", "loc0", ",", "new", "Object", "[", "0", "]", ")", ";", "}"], "nl": "Looks up the target object by EJB local reference.", "nlToks": ["Looks", "up", "the", "target", "object", "by", "EJB", "local", "reference", "."], "path": "primesign/cxf/tree/master/integration/jca/src/main/java/org/apache/cxf/jca/inbound/DispatchMDBMessageListenerImpl.java", "idx": 2127}
{"memberVariables": {"keyWrapAlgorithm=WSConstants.KEYTRANSPORT_RSAOEP": "String", "keyIdentifierType=WSConstants.ISSUER_SERIAL": "int", "acceptedKeyWrapAlgorithms=new ArrayList<>()": "List<String>", "encryptionName": "String", "acceptedEncryptionAlgorithms=new ArrayList<>()": "List<String>", "encryptionAlgorithm=WSConstants.AES_256": "String"}, "code": ["List", "<", "String", ">", "function", "(", ")", "{", "return", "acceptedEncryptionAlgorithms", ";", "}"], "memberFunctions": {"setEncryptionName": [["void", "String encryptionName"]], "getEncryptionAlgorithm": [["String"]], "setAcceptedKeyWrapAlgorithms": [["void", "List<String> acceptedKeyWrapAlgorithms"]], "getAcceptedKeyWrapAlgorithms": [["List<String>"]], "getKeyWrapAlgorithm": [["String"]], "setKeyWrapAlgorithm": [["void", "String keyWrapAlgorithm"]], "getKeyIdentifierType": [["int"]], "setAcceptedEncryptionAlgorithms": [["void", "List<String> acceptedEncryptionAlgorithms"]], "setKeyIdentifierType": [["void", "int keyIdentifierType"]], "setEncryptionAlgorithm": [["void", "String encryptionAlgorithm"]], "getEncryptionName": [["String"]]}, "className": "EncryptionProperties", "renamed": ["List", "<", "String", ">", "function", "(", ")", "{", "return", "acceptedEncryptionAlgorithms", ";", "}"], "nl": "Get the list of accepted encryption algorithms. A request can contain a wst:EncryptionAlgorithm uri to use to encrypt an issued token. The algorithm specified must be contained in this list. The default algorithms are 3-DES, AES-128, AES-128 GCM, AES-192, AES-192 GCM, AES-256 and AES-256 GCM.", "nlToks": ["Get", "the", "list", "of", "accepted", "encryption", "algorithms", ".", "A", "request", "can", "contain", "a", "wst", ":", "EncryptionAlgorithm", "uri", "to", "use", "to", "encrypt", "an", "issued", "token", ".", "The", "algorithm", "specified", "must", "be", "contained", "in", "this", "list", ".", "The", "default", "algorithms", "are", "3-DES", ",", "AES-128", ",", "AES-128", "GCM", ",", "AES-192", ",", "AES-192", "GCM", ",", "AES-256", "and", "AES-256", "GCM", "."], "path": "primesign/cxf/tree/master/services/sts/sts-core/src/main/java/org/apache/cxf/sts/service/EncryptionProperties.java", "idx": 2128}
{"memberVariables": {"environments=null": "IEnvironments", "factories=new HashMap<String,RestConnectionFactory>()": "HashMap<String,RestConnectionFactory>", "config=null": "AutoSIMRestConfig"}, "code": ["void", "function", "(", "BundleContext", "context", ")", "{", "for", "(", "AutoSIMConnectionConfig", "connectionConfig", ":", "config", ".", "connections", ")", "{", "environments", ".", "deregisterConnectionFactory", "(", "connectionConfig", ".", "name", ")", ";", "factories", ".", "remove", "(", "connectionConfig", ".", "name", ")", ";", "}", "}"], "memberFunctions": {"start": [["void", "BundleContext context"]]}, "className": "RestServiceActivator", "renamed": ["void", "function", "(", "BundleContext", "arg0", ")", "{", "for", "(", "AutoSIMConnectionConfig", "loc0", ":", "config", ".", "connections", ")", "{", "environments", ".", "deregisterConnectionFactory", "(", "loc0", ".", "name", ")", ";", "factories", ".", "remove", "(", "loc0", ".", "name", ")", ";", "}", "}"], "nl": "Implements BundleActivator.stop(). Does nothing since the framework will automatically unregister any registered services.", "nlToks": ["Implements", "BundleActivator.stop", "-LRB-", "-RRB-", ".", "Does", "nothing", "since", "the", "framework", "will", "automatically", "unregister", "any", "registered", "services", "."], "path": "adityayadav76/internet_of_things_simulator/tree/master/AutoSIM-Rest/src/com/automatski/autosim/rest/RestServiceActivator.java", "idx": 2130}
{"memberVariables": {"emptyWidth": "int", "headers": "String[]", "EMPTY=\"(empty)\"": "String", "data": "Object[][]", "borders": "Borders", "columns": "int", "columnWidths": "int[]", "bitmask": "int"}, "code": ["String", "function", "(", "String", "[", "]", "headers", ",", "Object", "[", "]", "[", "]", "data", ")", "{", "return", "of", "(", "headers", ",", "data", ",", "Borders", ".", "FULL", ")", ";", "}"], "memberFunctions": {"pad": [["String", "int width", "String data"]], "isset": [["boolean", "int v"]], "columns": [["boolean"]], "printDivider": [["void", "StringBuilder out", "String format"]], "header": [["boolean"]], "toString": [["String"]], "printData": [["void", "StringBuilder out", "Object[] data", "boolean isHeader"]], "body": [["boolean"]], "rows": [["boolean"]]}, "className": "FlipTable", "renamed": ["String", "function", "(", "String", "[", "]", "arg0", ",", "Object", "[", "]", "[", "]", "arg1", ")", "{", "return", "of", "(", "arg0", ",", "arg1", ",", "Borders", ".", "FULL", ")", ";", "}"], "nl": "Create a new table with the specified headers and row data.", "nlToks": ["Create", "a", "new", "table", "with", "the", "specified", "headers", "and", "row", "data", "."], "path": "pombreda/gitblit/tree/master/src/main/java/com/gitblit/utils/FlipTable.java", "idx": 2131}
{"memberVariables": {"xpath": "String", "test": "Detail", "control": "Detail", "type": "ComparisonType", "value": "Object", "target": "Node"}, "code": ["Node", "function", "(", ")", "{", "return", "target", ";", "}"], "memberFunctions": {"getValue": [["Object"]], "getTestDetails": [["Detail"]], "getType": [["ComparisonType"]], "getControlDetails": [["Detail"]], "getXPath": [["String"]], "toString": [["String", "ComparisonFormatter formatter"], ["String"]]}, "className": "Comparison", "renamed": ["Node", "function", "(", ")", "{", "return", "target", ";", "}"], "nl": "The actual target.", "nlToks": ["The", "actual", "target", "."], "path": "phbenisc/xmlunit/tree/master/xmlunit-core/src/main/java/org/xmlunit/diff/Comparison.java", "idx": 2132}
{"memberVariables": {"impl": "ActivityGraphsHelper"}, "code": ["ActivityGraphsHelper", "function", "(", ")", "{", "return", "impl", ";", "}"], "memberFunctions": {"setParameters": [["void", "Object objectFlowState", "Collection parameters"]], "addInState": [["void", "Object classifierInState", "Object state"]], "setSynch": [["void", "Object objectFlowState", "boolean isSynch"]], "findStateByName": [["Object", "Object c", "String s"]], "isAddingActivityGraphAllowed": [["boolean", "Object context"]], "setInStates": [["void", "Object classifierInState", "Collection newStates"]], "findClassifierByName": [["Object", "Object ofs", "String s"]], "addContent": [["void", "Object partition", "Object modelElement"]], "removeContent": [["void", "Object partition", "Object modelElement"]], "setContents": [["void", "Object partition", "Collection newContents"]], "addParameter": [["void", "Object objectFlowState", "Object parameter"]], "removeParameter": [["void", "Object objectFlowState", "Object parameter"]]}, "className": "AbstractActivityGraphsHelperDecorator", "renamed": ["ActivityGraphsHelper", "function", "(", ")", "{", "return", "impl", ";", "}"], "nl": "The component we are decorating.", "nlToks": ["The", "component", "we", "are", "decorating", "."], "path": "pichiliani/CoArgoUML/tree/master/v0.24/fonte/src/argouml-core-model/src/org/argouml/model/AbstractActivityGraphsHelperDecorator.java", "idx": 2133}
{"memberVariables": {}, "code": ["void", "function", "(", ")", "{", "String", "out", "=", "WebUtils", ".", "convertMsToClockTime", "(", "TimeUnit", ".", "SECONDS", ".", "toMillis", "(", "1", ")", ")", ";", "Assert", ".", "assertEquals", "(", "\"0 day(s), 0 hour(s), 0 minute(s), and 1 second(s)\"", ",", "out", ")", ";", "}"], "memberFunctions": {"convertToClockTimeWithOneMinute30Seconds": [["void"]], "convertToClockTimeWithOneDay4Hours10Minutes45SecondsWithStopwatch": [["void"]], "convertToClockTimeWithNegativeValue": [["void"]], "convertToClockTimeWithShortValue": [["void"]], "convertToClockTimeWithOneDay4Hours10Minutes45Seconds": [["void"]], "convertToClockTimeWithOneHour10Minutes45Seconds": [["void"]], "convertToClockTimeWithOneMinute": [["void"]], "convertToClockTimeWithOneHour": [["void"]], "convertToClockTimeWithOneDay": [["void"]]}, "className": "WebUtilsTest", "renamed": ["void", "function", "(", ")", "{", "String", "loc0", "=", "WebUtils", ".", "convertMsToClockTime", "(", "TimeUnit", ".", "SECONDS", ".", "toMillis", "(", "1", ")", ")", ";", "Assert", ".", "assertEquals", "(", "\"srini_string\"", ",", "loc0", ")", ";", "}"], "nl": "Tests the  {@link WebUtils#convertMsToClockTime(long)} method with one second.", "nlToks": ["Tests", "the", "-LCB-", "@link", "WebUtils", "#convertMsToClockTime", "-LRB-", "long", "-RRB-", "-RCB-", "method", "with", "one", "second", "."], "path": "poemlin/alluxio/tree/master/core/server/src/test/java/alluxio/web/WebUtilsTest.java", "idx": 2134}
{"memberVariables": {"VK_PACKAGE=new VisibilityKindEnum(\"vk_package\")": "VisibilityKindEnum", "typeName": "java.util.List", "VK_PRIVATE=new VisibilityKindEnum(\"vk_private\")": "VisibilityKindEnum", "VK_PUBLIC=new VisibilityKindEnum(\"vk_public\")": "VisibilityKindEnum", "literalName": "java.lang.String", "VK_PROTECTED=new VisibilityKindEnum(\"vk_protected\")": "VisibilityKindEnum"}, "code": ["java", ".", "lang", ".", "String", "function", "(", ")", "{", "return", "literalName", ";", "}"], "memberFunctions": {"readResolve": [["java.lang.Object"]], "forName": [["VisibilityKind", "java.lang.String name"]], "refTypeName": [["java.util.List"]], "hashCode": [["int"]], "equals": [["boolean", "java.lang.Object o"]]}, "className": "VisibilityKindEnum", "renamed": ["java", ".", "lang", ".", "String", "function", "(", ")", "{", "return", "literalName", ";", "}"], "nl": "Returns a string representation of the enumeration value.", "nlToks": ["Returns", "a", "string", "representation", "of", "the", "enumeration", "value", "."], "path": "pichiliani/CoArgoUML/tree/master/v0.24/fonte/src/argouml-core-model-mdr/build/java/org/omg/uml/foundation/datatypes/VisibilityKindEnum.java", "idx": 2135}
{"memberVariables": {"edgeOffset=0": "int", "figure=null": "FigNode", "UPLINK_FACTOR=5": "float", "uplinks=new ArrayList<ClassdiagramNode>()": "List<ClassdiagramNode>", "rank=NORANK": "int", "downlinks=new ArrayList<ClassdiagramNode>()": "List<ClassdiagramNode>", "NORANK=-1": "int", "column=NOCOLUMN": "int", "placementHint=-1": "int", "weight=NOWEIGHT": "float", "NOCOLUMN=-1": "int", "NOWEIGHT=-1": "int"}, "code": ["List", "<", "ClassdiagramNode", ">", "function", "(", ")", "{", "return", "downlinks", ";", "}"], "memberFunctions": {"getUplinks": [["Vector<ClassdiagramNode>"]], "getLocation": [["Point"]], "isComment": [["boolean"]], "getUpNodes": [["List<ClassdiagramNode>"]], "getWeight": [["float"]], "getFigure": [["FigNode"]], "getDownlinks": [["Vector<ClassdiagramNode>"]], "compareTo": [["int", "Object arg0"]], "setColumn": [["void", "int newColumn"]], "addDownlink": [["void", "ClassdiagramNode newDownlink"]], "setLocation": [["void", "Point newLocation"]], "setEdgeOffset": [["void", "int newOffset"]], "isStandalone": [["boolean"]], "getColumn": [["int"]], "getSubtreeWeight": [["float"]], "calculateWeight": [["float"]], "setRank": [["void", "int newRank"]], "addRank": [["void", "int n"]], "getTypeOrderNumer": [["int"]], "getEdgeOffset": [["int"]], "getRank": [["int"]], "setWeight": [["void", "float w"]], "isPackage": [["boolean"]], "addUplink": [["void", "ClassdiagramNode newUplink"]], "getLevel": [["int"]], "getSize": [["Dimension"]], "setPlacementHint": [["void", "int hint"]], "getPlacementHint": [["int"]], "setFigure": [["void", "FigNode newFigure"]]}, "className": "ClassdiagramNode", "renamed": ["List", "<", "ClassdiagramNode", ">", "function", "(", ")", "{", "return", "downlinks", ";", "}"], "nl": "Get the downlinks of this node.", "nlToks": ["Get", "the", "downlinks", "of", "this", "node", "."], "path": "pichiliani/CoArgoUML/tree/master/v0.24/fonte/src/argouml-app/src/org/argouml/uml/diagram/static_structure/layout/ClassdiagramNode.java", "idx": 2136}
{"memberVariables": {"OOZIE_HOME_DIR=\"oozie.home.dir\"": "String", "CONF_SYSTEM_ID=\"oozie.system.id\"": "String", "systemId": "String", "SERVICES": "Services", "CONF_SERVICE_CLASSES=\"oozie.services\"": "String", "CONF_SYSTEM_MODE=\"oozie.systemmode\"": "String", "conf": "Configuration", "services=new LinkedHashMap<Class<? extends Service>,Service>()": "Map<Class<? extends Service>,Service>", "oozieHome": "String", "CONF_DELETE_RUNTIME_DIR=\"oozie.delete.runtime.dir.on.shutdown\"": "String", "CONF_SERVICE_EXT_CLASSES=\"oozie.services.ext\"": "String", "systemMode": "SYSTEM_MODE", "runtimeDir": "String", "MAX_SYSTEM_ID_LEN=10": "int"}, "code": ["String", "function", "(", ")", "{", "return", "runtimeDir", ";", "}"], "memberFunctions": {"init": [["void"]], "setService": [["void", "Class<? extends Service> klass"]], "getSystemId": [["String"]], "setServiceInternal": [["void", "Class<? extends Service> klass", "boolean logging"]], "getConf": [["Configuration"]], "setOozieHome": [["void"]], "getSystemMode": [["SYSTEM_MODE"]], "setSystemMode": [["void", "SYSTEM_MODE sysMode"]], "get": [["T", "Class<T> serviceKlass"], ["Services"]], "destroy": [["void"]], "createRuntimeDir": [["String"]], "getOozieHome": [["String"]]}, "className": "Services", "renamed": ["String", "function", "(", ")", "{", "return", "runtimeDir", ";", "}"], "nl": "Return the runtime directory of the Oozie instance.  The directory is created under TMP and it is always a new directory per Services initialization.", "nlToks": ["Return", "the", "runtime", "directory", "of", "the", "Oozie", "instance", ".", "The", "directory", "is", "created", "under", "TMP", "and", "it", "is", "always", "a", "new", "directory", "per", "Services", "initialization", "."], "path": "pingpangkuangmo/oozie/tree/master/core/src/main/java/org/apache/oozie/service/Services.java", "idx": 2137}
{"memberVariables": {"spaceDelimited": "boolean", "SINCE=\"SINCE\"": "String", "defaultValue": "String", "caseSensitive": "boolean", "SPACE_DELIMITED=\"SPACE-DELIMITED\"": "String", "description": "String", "serialVersionUID=1L": "long", "RESTART_REQUIRED=\"RESTART REQUIRED\"": "String", "restartRequired": "boolean", "name": "String", "CASE_SENSITIVE=\"CASE-SENSITIVE\"": "String", "currentValue": "String", "since": "String"}, "code": ["boolean", "function", "(", "boolean", "defaultValue", ")", "{", "if", "(", "!", "StringUtils", ".", "isEmpty", "(", "currentValue", ")", ")", "{", "return", "Boolean", ".", "parseBoolean", "(", "currentValue", ".", "trim", "(", ")", ")", ";", "}", "return", "defaultValue", ";", "}"], "memberFunctions": {"getChar": [["char", "char defaultValue"]], "getInteger": [["int", "int defaultValue"]], "getString": [["String", "String defaultValue"]], "getMap": [["Map<String,String>"]], "isDefaultValue": [["boolean"]], "getStrings": [["List<String>"], ["List<String>", "String separator"]]}, "className": "SettingModel", "renamed": ["boolean", "function", "(", "boolean", "arg0", ")", "{", "if", "(", "!", "StringUtils", ".", "isEmpty", "(", "currentValue", ")", ")", "{", "return", "Boolean", ".", "parseBoolean", "(", "currentValue", ".", "trim", "(", ")", ")", ";", "}", "return", "arg0", ";", "}"], "nl": "Returns the boolean value for the currentValue. If the currentValue can not be interpreted as a boolean, the defaultValue is returned.", "nlToks": ["Returns", "the", "boolean", "value", "for", "the", "currentValue", ".", "If", "the", "currentValue", "can", "not", "be", "interpreted", "as", "a", "boolean", ",", "the", "defaultValue", "is", "returned", "."], "path": "pombreda/gitblit/tree/master/src/main/java/com/gitblit/models/SettingModel.java", "idx": 2138}
{"memberVariables": {}, "code": ["void", "function", "(", "SeekBar", "slider", ")", "{", "int", "current", "=", "slider", ".", "getProgress", "(", ")", ";", "if", "(", "current", "<", "slider", ".", "getMax", "(", ")", ")", "{", "slider", ".", "setProgress", "(", "current", "+", "1", ")", ";", "}", "else", "{", "slider", ".", "setProgress", "(", "current", "-", "1", ")", ";", "}", "slider", ".", "setProgress", "(", "current", ")", ";", "}"], "memberFunctions": {"StringToBitMap": [["Bitmap", "String encodedString"]], "erase": [["void", "Bitmap img"]], "getMorph": [["Bitmap", "Bitmap i1", "Bitmap i2", "double percentage"]], "isGood": [["boolean", "Bitmap img"]], "rescaleImg": [["Bitmap", "String path"], ["Bitmap", "Bitmap img"]], "shareImage": [["Intent", "Bitmap img", "String path"]], "decodeSampledBitmapFromResource": [["Bitmap", "String path", "int reqWidth", "int reqHeight"]], "BitMapToString": [["String", "Bitmap bitmap"]], "rescaleThumb": [["Bitmap", "String path"], ["Bitmap", "Bitmap img"]], "hasBackground": [["boolean"]], "createMessage": [["TextView", "TextView message", "int resId"]], "getEmail": [["Intent"]], "getImageUri": [["Uri", "Context inContext", "Bitmap inImage"]], "switchDims": [["void"]], "calculateInSampleSize": [["int", "BitmapFactory.Options options", "int reqWidth", "int reqHeight"]], "hasForeground": [["boolean"]], "getDims": [["int[]"]]}, "className": "Actions", "renamed": ["void", "function", "(", "SeekBar", "arg0", ")", "{", "int", "loc0", "=", "arg0", ".", "getProgress", "(", ")", ";", "if", "(", "loc0", "<", "arg0", ".", "getMax", "(", ")", ")", "{", "arg0", ".", "setProgress", "(", "loc0", "+", "1", ")", ";", "}", "else", "{", "arg0", ".", "setProgress", "(", "loc0", "-", "1", ")", ";", "}", "arg0", ".", "setProgress", "(", "loc0", ")", ";", "}"], "nl": "Puts the slider back in its original position, but makes it seem as if it has moved, allowing onProgressChanged() to be called", "nlToks": ["Puts", "the", "slider", "back", "in", "its", "original", "position", ",", "but", "makes", "it", "seem", "as", "if", "it", "has", "moved", ",", "allowing", "onProgressChanged", "-LRB-", "-RRB-", "to", "be", "called"], "path": "picklelo/morph/tree/master/Morph/src/Actions.java", "idx": 2139}
{"memberVariables": {"time": "Time"}, "code": ["void", "function", "(", ")", "{", "assertEquals", "(", "1", ",", "time", ".", "getHour", "(", ")", ")", ";", "}"], "memberFunctions": {"testDateRoundTrip": [["void"]], "testParseTimeWithOneDecimal": [["void"]], "testSetNegativeMinutes": [["void"]], "testFormatTimeWithOneDecimal": [["void"]], "testSetMinutes": [["void"]], "testParseTimeWithoutDecimals": [["void"]], "testGetMinutes": [["void"]], "testParseTimeWithDecimals": [["void"]], "testSetInvalidSeconds": [["void"]], "testSetNegativeHour": [["void"]], "testToDate": [["void"]], "testGetSeconds": [["void"]], "testSetHour": [["void"]], "testSetSeconds": [["void"]], "testSetTime": [["void"]], "testGetMilliseconds": [["void"]], "testSetInvalidHour": [["void"]], "testSetNegativeSeconds": [["void"]], "setUp": [["void"]], "testSetInvalidMinutes": [["void"]], "testFormatTimeNoDecimals": [["void"]], "testFormatTimeWithDecimals": [["void"]], "testEquals": [["void"]]}, "className": "TimeTest", "renamed": ["void", "function", "(", ")", "{", "assertEquals", "(", "1", ",", "time", ".", "getHour", "(", ")", ")", ";", "}"], "nl": "Test method for  {@link net.sf.marineapi.nmea.util.Time#getHour()}.", "nlToks": ["Test", "method", "for", "-LCB-", "@link", "net.sf.marineapi.nmea.util.Time", "#getHour", "-LRB-", "-RRB-", "-RCB-", "."], "path": "pkoziol/marine-api/tree/master/src/test/java/net/sf/marineapi/nmea/util/TimeTest.java", "idx": 2140}
{"memberVariables": {"SHORT_FORMAT=\"yyyy-MM-dd\"": "String", "FULL_FORMAT=\"E, MMMM dd, yyyy hh:mm a\"": "String", "NORMAL_DAY_OF_WEEK_FORMAT=\"E, MMMM dd, yyyy\"": "String", "NORMAL_FORMAT=\"yyyy-MM-dd HH:mm:ss\"": "String"}, "code": ["Date", "function", "(", "DatePicker", "datePicker", ")", "{", "int", "day", "=", "datePicker", ".", "getDayOfMonth", "(", ")", ";", "int", "month", "=", "datePicker", ".", "getMonth", "(", ")", ";", "int", "year", "=", "datePicker", ".", "getYear", "(", ")", ";", "Calendar", "calendar", "=", "Calendar", ".", "getInstance", "(", ")", ";", "calendar", ".", "set", "(", "year", ",", "month", ",", "day", ")", ";", "return", "calendar", ".", "getTime", "(", ")", ";", "}"], "memberFunctions": {"stringToDate": [["Date", "String date", "String format"]], "getDateTime": [["String"]], "getStringTimeFromTime": [["String", "int hourofday", "int minute"]], "getStringTimeFromTimePicker": [["String", "TimePicker timePicker"]], "isAfter": [["boolean", "Date date1", "Date date2"]], "dateToString": [["String", "Date date", "String format"]], "isBefore": [["boolean", "Date date1", "Date date2"]]}, "className": "Helper", "renamed": ["Date", "function", "(", "DatePicker", "arg0", ")", "{", "int", "loc0", "=", "arg0", ".", "getDayOfMonth", "(", ")", ";", "int", "loc1", "=", "arg0", ".", "getMonth", "(", ")", ";", "int", "loc2", "=", "arg0", ".", "getYear", "(", ")", ";", "Calendar", "loc3", "=", "Calendar", ".", "getInstance", "(", ")", ";", "loc3", ".", "set", "(", "loc2", ",", "loc1", ",", "loc0", ")", ";", "return", "loc3", ".", "getTime", "(", ")", ";", "}"], "nl": "Get Date from DatePicker", "nlToks": ["Get", "Date", "from", "DatePicker"], "path": "adament67/testproject/tree/master/Android Projects/studio/EstiloRobe/estiloRobe/src/main/java/com/constants/Helper.java", "idx": 2142}
{"memberVariables": {"serialVersionUID=1L": "long", "isSystemDerived": "String", "isActive": "String", "predecessorId": "BigDecimal", "srcFileName": "String", "successorId": "BigDecimal", "feedId": "BigDecimal", "checksum": "String", "transmissionDatasetId": "String", "comments": "String", "inactivationReasonType": "String", "isFormatValid": "String", "dataUnitId": "long", "receiptDate": "Timestamp", "srcUniqueFileName": "String", "createdDate": "Timestamp", "dataSetId": "Long", "fileSize": "BigDecimal", "destFileName": "String", "loadedInCats": "String", "checksumType": "String", "modifiedDate": "Timestamp", "runId": "BigDecimal", "isPrepopulated": "String", "isBulk": "String", "isUpdate": "String", "receiptDateType": "String", "status": "String"}, "code": ["void", "function", "(", "Timestamp", "createdDate", ")", "{", "this", ".", "createdDate", "=", "createdDate", ";", "}"], "memberFunctions": {"setIsSystemDerived": [["void", "String isSystemDerived"]], "setIsPrepopulated": [["void", "String isPrepopulated"]], "getStatus": [["String"]], "getIsUpdate": [["String"]], "getDataUnitId": [["long"]], "getFileSize": [["BigDecimal"]], "setInactivationReasonType": [["void", "String inactivationReasonType"]], "setDataUnitId": [["void", "long dataUnitId"]], "getComments": [["String"]], "getCreatedDate": [["Timestamp"]], "setFileSize": [["void", "BigDecimal fileSize"]], "getPredecessorId": [["BigDecimal"]], "setIsUpdate": [["void", "String isUpdate"]], "getReceiptDateType": [["String"]], "getFeedId": [["BigDecimal"]], "setReceiptDate": [["void", "Timestamp receiptDate"]], "getModifiedDate": [["Timestamp"]], "setSuccessorId": [["void", "BigDecimal successorId"]], "setDestFileName": [["void", "String destFileName"]], "setIsBulk": [["void", "String isBulk"]], "getIsFormatValid": [["String"]], "setDataSetId": [["void", "Long dataSetId"]], "setIsActive": [["void", "String isActive"]], "setChecksumType": [["void", "String checksumType"]], "setFeedId": [["void", "BigDecimal feedId"]], "getInactivationReasonType": [["String"]], "getSrcUniqueFileName": [["String"]], "getDataSetId": [["Long"]], "setReceiptDateType": [["void", "String receiptDateType"]], "getRunId": [["BigDecimal"]], "setSrcFileName": [["void", "String srcFileName"]], "getChecksumType": [["String"]], "getSrcFileName": [["String"]], "getChecksum": [["String"]], "getDestFileName": [["String"]], "getReceiptDate": [["Timestamp"]], "setTransmissionDatasetId": [["void", "String transmissionDatasetId"]], "getTransmissionDatasetId": [["String"]], "setComments": [["void", "String comments"]], "getLoadedInCats": [["String"]], "getSuccessorId": [["BigDecimal"]], "setLoadedInCats": [["void", "String loadedInCats"]], "getIsPrepopulated": [["String"]], "setSrcUniqueFileName": [["void", "String srcUniqueFileName"]], "setChecksum": [["void", "String checksum"]], "setIsFormatValid": [["void", "String isFormatValid"]], "getIsBulk": [["String"]], "setRunId": [["void", "BigDecimal runId"]], "setStatus": [["void", "String status"]], "getIsActive": [["String"]], "setModifiedDate": [["void", "Timestamp modifiedDate"]], "setPredecessorId": [["void", "BigDecimal predecessorId"]], "getIsSystemDerived": [["String"]]}, "className": "PCLDataUnitEntity", "renamed": ["void", "function", "(", "Timestamp", "arg0", ")", "{", "this", ".", "createdDate", "=", "arg0", ";", "}"], "nl": "Sets the created date.", "nlToks": ["Sets", "the", "created", "date", "."], "path": "pkesireddy/portico_fletcher/tree/master/FetcherTesterService/src/main/java/org/ithaka/cm/fetchertester/entity/PCLDataUnitEntity.java", "idx": 2143}
{"memberVariables": {"obj": "org.apache.cxf.transport.Assertor", "INDENT=\"  \"": "String"}, "code": ["boolean", "function", "(", "Collection", "<", "Assertion", ">", "assertions", ",", "Collection", "<", "Assertion", ">", "candidates", ")", "{", "if", "(", "null", "==", "candidates", "||", "candidates", ".", "isEmpty", "(", ")", ")", "{", "return", "true", ";", "}", "for", "(", "Assertion", "c", ":", "candidates", ")", "{", "if", "(", "!", "contains", "(", "assertions", ",", "c", ")", ")", "{", "return", "false", ";", "}", "}", "return", "true", ";", "}"], "memberFunctions": {"createAsserter": [["Assertor", "Object o"]], "isEmptyPolicyOperator": [["boolean", "PolicyOperator p"]], "logPolicy": [["void", "Logger log", "Level level", "String msg", "PolicyComponent pc"]], "isEmptyPolicy": [["boolean", "Policy p"]], "indent": [["void", "StringBuilder buf", "int level"]], "getWrappedAssertor": [["org.apache.cxf.transport.Assertor"]], "canAssert": [["boolean", "QName type"]], "nl": [["void", "StringBuilder buf"]], "assertMessage": [["void", "Message message"]], "printPolicyComponent": [["void", "PolicyComponent pc"], ["void", "PolicyComponent pc", "StringBuilder buf", "int level"]], "typeToString": [["String", "short type"]]}, "className": "PolicyUtils", "renamed": ["boolean", "function", "(", "Collection", "<", "Assertion", ">", "arg0", ",", "Collection", "<", "Assertion", ">", "arg1", ")", "{", "if", "(", "null", "==", "arg1", "||", "arg1", ".", "isEmpty", "(", ")", ")", "{", "return", "true", ";", "}", "for", "(", "Assertion", "loc0", ":", "arg1", ")", "{", "if", "(", "!", "contains", "(", "arg0", ",", "loc0", ")", ")", "{", "return", "false", ";", "}", "}", "return", "true", ";", "}"], "nl": "Determine if one collection of assertions contains another collection of assertion, using the equal method from the Assertion interface.", "nlToks": ["Determine", "if", "one", "collection", "of", "assertions", "contains", "another", "collection", "of", "assertion", ",", "using", "the", "equal", "method", "from", "the", "Assertion", "interface", "."], "path": "primesign/cxf/tree/master/rt/ws/policy/src/main/java/org/apache/cxf/ws/policy/PolicyUtils.java", "idx": 2144}
{"memberVariables": {"lang": "Lang"}, "code": ["NodeVisitor", "function", "(", "Node", "n", ")", "{", "return", "this", ";", "}"], "memberFunctions": {"visitEdgeNoOverride": [["N", "Node parent", "N child"]], "leave": [["Node", "Node parent", "Node old", "Node n", "NodeVisitor v"], ["Node", "Node old", "Node n", "NodeVisitor v"]], "finish": [["void"], ["void", "Node ast"]], "toString": [["String"]], "override": [["Node", "Node parent", "Node n"], ["Node", "Node n"]], "visitEdge": [["N", "Node parent", "N child"]], "copy": [["NodeVisitor"]], "lang": [["Lang"]], "begin": [["NodeVisitor"]]}, "className": "NodeVisitor", "renamed": ["NodeVisitor", "function", "(", "Node", "arg0", ")", "{", "return", "this", ";", "}"], "nl": "Begin normal traversal of a subtree rooted at  {@code n}. This gives the visitor the option of changing internal state or returning a new visitor which will be used to visit the children of  {@code n}.  This method is typically called by the method {@link #enter(Node,Node) enter(parent, n)}. If a subclass overrides the method  {@link #enter(Node,Node) enter(parent, n)} then this methodmay not be called.", "nlToks": ["Begin", "normal", "traversal", "of", "a", "subtree", "rooted", "at", "-LCB-", "@code", "n", "-RCB-", ".", "This", "gives", "the", "visitor", "the", "option", "of", "changing", "internal", "state", "or", "returning", "a", "new", "visitor", "which", "will", "be", "used", "to", "visit", "the", "children", "of", "-LCB-", "@code", "n", "-RCB-", ".", "This", "method", "is", "typically", "called", "by", "the", "method", "-LCB-", "@link", "#enter", "-LRB-", "Node", ",", "Node", "-RRB-", "enter", "-LRB-", "parent", ",", "n", "-RRB-", "-RCB-", ".", "If", "a", "subclass", "overrides", "the", "method", "-LCB-", "@link", "#enter", "-LRB-", "Node", ",", "Node", "-RRB-", "enter", "-LRB-", "parent", ",", "n", "-RRB-", "-RCB-", "then", "this", "methodmay", "not", "be", "called", "."], "path": "polyglot-compiler/polyglot/tree/master/src/polyglot/visit/NodeVisitor.java", "idx": 2145}
{"memberVariables": {"description": "List<DescriptionType>", "paramName": "CString", "id": "java.lang.String", "paramValue": "XsdStringType"}, "code": ["XsdStringType", "function", "(", ")", "{", "return", "paramValue", ";", "}"], "memberFunctions": {"getParamName": [["CString"]], "setParamName": [["void", "CString value"]], "setParamValue": [["void", "XsdStringType value"]], "setId": [["void", "java.lang.String value"]], "getId": [["java.lang.String"]], "getDescription": [["List<DescriptionType>"]]}, "className": "ParamValueType", "renamed": ["XsdStringType", "function", "(", ")", "{", "return", "paramValue", ";", "}"], "nl": "Gets the value of the paramValue property.", "nlToks": ["Gets", "the", "value", "of", "the", "paramValue", "property", "."], "path": "primesign/cxf/tree/master/rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/handler/types/ParamValueType.java", "idx": 2146}
{"memberVariables": {}, "code": ["ConfigSetupType", "function", "(", "String", "s", ")", "{", "try", "{", "return", "valueOf", "(", "s", ".", "toUpperCase", "(", ")", ")", ";", "}", "catch", "(", "IllegalArgumentException", "e", ")", "{", "FetcherTesterRestSvcManager", ".", "LOGGER", ".", "error", "(", "\"exception in fromString\"", ",", "e", ")", ";", "throw", "new", "FetcherTesterServiceException", "(", "\"query parameter [inc]: Invalid value: \"", "+", "s", ",", "e", ")", ";", "}", "}"], "memberFunctions": {"configSetUp": [["ConfigSetUpDTO", "@PathParam(\"target\") ConfigSetupType target", "@PathParam(\"feedId\") Integer feedId"]], "destFileExists": [["PubFilesOperationResp", "@Context UriInfo uriInfo", "DestinationFileExistsDTO destinationFileExistsDTO"]], "runFeeds": [["ItemList<FeedConfigResponse>", "@Context UriInfo uriInfo", "List<FeedConfig> feedConfigs"]], "runFeed": [["RestCallStatus", "@PathParam(\"fetcher\") AppType appType", "@PathParam(\"feedId\") Integer feedId"]], "execShellCommand": [["PubFilesOperationResp", "@Context UriInfo uriInfo", "ShellCommandDTO shellCommandDTO"]], "getAppVersion": [["AppVersionDTO"]], "seedFilesSetUp": [["PubFilesOperationResp", "@PathParam(\"feedId\") Integer feedId"]]}, "className": "IFetcherTesterRestSvcManager", "renamed": ["ConfigSetupType", "function", "(", "String", "arg0", ")", "{", "try", "{", "return", "valueOf", "(", "arg0", ".", "toUpperCase", "(", ")", ")", ";", "}", "catch", "(", "IllegalArgumentException", "loc0", ")", "{", "FetcherTesterRestSvcManager", ".", "LOGGER", ".", "error", "(", "\"srini_string\"", ",", "loc0", ")", ";", "throw", "new", "FetcherTesterServiceException", "(", "\"srini_string\"", "+", "arg0", ",", "loc0", ")", ";", "}", "}"], "nl": "From string.", "nlToks": ["From", "string", "."], "path": "pkesireddy/portico_fletcher/tree/master/FetcherTesterService/src/main/java/org/ithaka/cm/fetchertester/svc/IFetcherTesterRestSvcManager.java", "idx": 2147}
{"memberVariables": {"IMPL": "ViewConfigurationVersionImpl"}, "code": ["int", "function", "(", "ViewConfiguration", "config", ")", "{", "return", "IMPL", ".", "getScaledPagingTouchSlop", "(", "config", ")", ";", "}"], "memberFunctions": {}, "className": "ViewConfigurationCompat", "renamed": ["int", "function", "(", "ViewConfiguration", "arg0", ")", "{", "return", "IMPL", ".", "getScaledPagingTouchSlop", "(", "arg0", ")", ";", "}"], "nl": "Call  {@link ViewConfiguration#getScaledPagingTouchSlop()}. If running on a pre- {@android.os.Build.VERSION_CODES #FROYO} device,returns  {@link ViewConfiguration#getScaledTouchSlop()}.", "nlToks": ["Call", "-LCB-", "@link", "ViewConfiguration", "#getScaledPagingTouchSlop", "-LRB-", "-RRB-", "-RCB-", ".", "If", "running", "on", "a", "pre", "-", "-LCB-", "@android", ".", "os.Build.VERSION", "_", "CODES", "#FROYO", "-RCB-", "device", ",", "returns", "-LCB-", "@link", "ViewConfiguration", "#getScaledTouchSlop", "-LRB-", "-RRB-", "-RCB-", "."], "path": "prateeka/AndroidDev/tree/master/SherlockActionBar/src/android/support/v4/view/ViewConfigurationCompat.java", "idx": 2148}
{"memberVariables": {"ext": "ExtensionInfo", "EXPR=0": "int", "DECL=4": "int", "pos": "Position", "MEMB=3": "int", "STMT=1": "int", "TYPE=2": "int", "FILE=5": "int"}, "code": ["TypeNode", "function", "(", "String", "fmt", ",", "Object", "...", "os", ")", "{", "return", "(", "TypeNode", ")", "parse", "(", "TYPE", ",", "fmt", ",", "os", ")", ";", "}"], "memberFunctions": {"parseMember": [["ClassMember", "String fmt", "Object... os"], ["ClassMember", "String fmt", "List<?> subst"]], "parser": [["QQParser", "Lexer lexer", "TypeSystem ts", "NodeFactory nf", "ErrorQueue eq"]], "parseStmt": [["Stmt", "String fmt", "Object... os"], ["Stmt", "String fmt", "List<?> subst"]], "parseDecl": [["ClassDecl", "String fmt", "Object... os"], ["ClassDecl", "String fmt", "List<?> subst"]], "parseFile": [["SourceFile", "String fmt", "Object... os"], ["SourceFile", "String fmt", "List<?> subst"]], "type_position": [["Position", "polyglot.types.TypeObject t"]], "parse": [["Node", "int kind", "String fmt", "Object... subst"]], "lexer": [["Lexer", "String fmt", "Position pos", "Object... subst"]], "parseExpr": [["Expr", "String fmt", "Object... os"], ["Expr", "String fmt", "List<?> subst"]]}, "className": "QQ", "renamed": ["TypeNode", "function", "(", "String", "arg0", ",", "Object", "...", "arg1", ")", "{", "return", "(", "TypeNode", ")", "parse", "(", "TYPE", ",", "arg0", ",", "arg1", ")", ";", "}"], "nl": "Parse a string into a  {@code TypeNode} AST node,applying substitutions.", "nlToks": ["Parse", "a", "string", "into", "a", "-LCB-", "@code", "TypeNode", "-RCB-", "AST", "node", ",", "applying", "substitutions", "."], "path": "polyglot-compiler/polyglot/tree/master/src/polyglot/qq/QQ.java", "idx": 2150}
{"memberVariables": {"EXAMPLE=\"$GPRMB,A,0.00,R,,RUSKI,5536.200,N,01436.500,E,432.3,234.9,,V*58\"": "String", "rmb": "RMBSentence", "empty": "RMBSentence"}, "code": ["void", "function", "(", ")", "{", "try", "{", "rmb", ".", "setSteerTo", "(", "null", ")", ";", "fail", "(", "\"Did not throw IllegalArgumentException\"", ")", ";", "}", "catch", "(", "IllegalArgumentException", "e", ")", "{", "assertTrue", "(", "e", ".", "getMessage", "(", ")", ".", "contains", "(", "\"LEFT or RIGHT\"", ")", ")", ";", "}", "catch", "(", "Exception", "e", ")", "{", "fail", "(", "e", ".", "getMessage", "(", ")", ")", ";", "}", "}"], "memberFunctions": {"testGetVelocity": [["void"]], "testGetCrossTrackError": [["void"]], "testArrivalStatus": [["void"]], "testSetDestination": [["void"]], "testSetBearing": [["void"]], "testSetOriginId": [["void"]], "testSetStatus": [["void"]], "testConstructor": [["void"]], "testGetBearing": [["void"]], "testSetBearingWithNegativeValue": [["void"]], "testSetSteerTo": [["void"]], "testGetSteerTo": [["void"]], "testSetVelocity": [["void"]], "testGetOriginId": [["void"]], "testSetVelocityWithNegativeValue": [["void"]], "setUp": [["void"]], "testGetStatus": [["void"]], "testSetBearingWithValueGreaterThanAllowed": [["void"]], "testGetRange": [["void"]], "testSetRange": [["void"]], "testGetDestination": [["void"]], "testSetCrossTrackError": [["void"]]}, "className": "RMBTest", "renamed": ["void", "function", "(", ")", "{", "try", "{", "rmb", ".", "setSteerTo", "(", "null", ")", ";", "fail", "(", "\"srini_string\"", ")", ";", "}", "catch", "(", "IllegalArgumentException", "loc0", ")", "{", "assertTrue", "(", "loc0", ".", "getMessage", "(", ")", ".", "contains", "(", "\"srini_string\"", ")", ")", ";", "}", "catch", "(", "Exception", "loc0", ")", "{", "fail", "(", "loc0", ".", "getMessage", "(", ")", ")", ";", "}", "}"], "nl": "Test method for {@link net.sf.marineapi.nmea.parser.RMBParser#setSteerTo(CompassPoint)}.", "nlToks": ["Test", "method", "for", "-LCB-", "@link", "net.sf.marineapi.nmea.parser.RMBParser", "#setSteerTo", "-LRB-", "CompassPoint", "-RRB-", "-RCB-", "."], "path": "pkoziol/marine-api/tree/master/src/test/java/net/sf/marineapi/nmea/parser/RMBTest.java", "idx": 2152}
{"memberVariables": {"bestValueToMe": "Coin", "refundTransactionUnlockTimeSecs": "long", "connectedHandler=null": "PaymentChannelServer", "contract": "Transaction", "clientOutput": "TransactionOutput", "myKey": "ECKey", "bestValueSignature": "byte[]", "state=null": "PaymentChannelServerState"}, "code": ["void", "function", "(", ")", "{", "if", "(", "connectedHandler", "!=", "null", ")", "connectedHandler", ".", "close", "(", ")", ";", "}"], "memberFunctions": {"setConnectedHandler": [["PaymentChannelServer", "PaymentChannelServer connectedHandler", "boolean override"]], "toString": [["String"]], "updateValueToMe": [["void", "Coin newValue", "byte[] newSignature"]], "clearConnectedHandler": [["void"]], "getOrCreateState": [["PaymentChannelServerState", "Wallet wallet", "TransactionBroadcaster broadcaster"]]}, "className": "StoredServerChannel", "renamed": ["void", "function", "(", ")", "{", "if", "(", "connectedHandler", "!=", "null", ")", "connectedHandler", ".", "close", "(", ")", ";", "}"], "nl": "If a handler is connected, call its  {@link org.bitcoinj.protocols.channels.PaymentChannelServer#close()}method thus disconnecting the TCP connection.", "nlToks": ["If", "a", "handler", "is", "connected", ",", "call", "its", "-LCB-", "@link", "org.bitcoinj.protocols.channels.PaymentChannelServer", "#close", "-LRB-", "-RRB-", "-RCB-", "method", "thus", "disconnecting", "the", "TCP", "connection", "."], "path": "1000000000001/bitcoinj/tree/master/core/src/main/java/org/bitcoinj/protocols/channels/StoredServerChannel.java", "idx": 2153}
{"memberVariables": {"m_SignedPart=null": "Element", "m_SignMode=-1": "int", "PROP_SIGNEDELEMENT=\"signedElement\"": "String", "m_WrappingPayloadElemnt=null": "Element", "PROP_REFERRINGELEMENT=\"referringElement\"": "String", "m_CurrWrappingMode=NO_WRAP": "WrappingAttackMode", "PROP_WRAPPINGELMENT=\"wrappingElement\"": "String", "m_PropertyChangeSupport=new java.beans.PropertyChangeSupport(this)": "PropertyChangeSupport", "m_CurrWrappingPayloadIdx=NO_CURR_WRAP_IDX": "int", "m_AttackPayloadElemnt=null": "Element", "m_IsAdditionalWrap=false": "boolean", "PROP_ATTACKELEMENT=\"attackElement\"": "String"}, "code": ["void", "function", "(", "final", "PropertyChangeListener", "listener", ")", "{", "m_PropertyChangeSupport", ".", "addPropertyChangeListener", "(", "listener", ")", ";", "}"], "memberFunctions": {"setAttackPayloadElement": [["void", "Element attackPayloadEl"]], "setCurrWrappingPayloadIdx": [["void", "int m_CurrWrappingPayloadIdx"]], "setWrappingPayloadElement": [["void", "Element wrappingPayloadEl"]], "isSigned": [["boolean"]], "isAdditionalWrap": [["boolean"]], "getWrappingPayloadElement": [["Element"]], "setCurrWrappingMode": [["void", "WrappingAttackMode currWrappingMode"]], "setIsAdditionalWrap": [["void", "boolean isAdditionalWrap"]], "getAttackPayloadElement": [["Element"]], "setSignedPart": [["void", "Element referencedElement"]], "getCurrWrappingPayloadIdx": [["int"]], "removePropertyChangeListener": [["void", "final PropertyChangeListener listener"], ["void", "final String propertyName", "final PropertyChangeListener listener"]], "getCurrWrappingMode": [["WrappingAttackMode"]], "getSignedPart": [["Element"]], "getSignMode": [["int"]], "setSignMode": [["void", "int signMode"]]}, "className": "ElementAttackProperties", "renamed": ["void", "function", "(", "final", "PropertyChangeListener", "arg0", ")", "{", "m_PropertyChangeSupport", ".", "addPropertyChangeListener", "(", "arg0", ")", ";", "}"], "nl": "Add PropertyChangeListener.", "nlToks": ["Add", "PropertyChangeListener", "."], "path": "0xwindows/WS-Attacker/tree/master/libs/XML_Encryption_Attack_Library/src/main/java/wsattacker/library/xmlencryptionattack/encryptedelements/ElementAttackProperties.java", "idx": 2155}
{"memberVariables": {"approvedScope=new LinkedList<String>()": "List<String>", "requestedScope=new LinkedList<String>()": "List<String>", "audience": "String", "subject": "UserSubject", "client": "Client", "grantType": "String"}, "code": ["Client", "function", "(", ")", "{", "return", "client", ";", "}"], "memberFunctions": {"getSubject": [["UserSubject"]], "setClient": [["void", "Client client"]], "setSubject": [["void", "UserSubject subject"]], "setRequestedScope": [["void", "List<String> requestedScope"]], "getApprovedScope": [["List<String>"]], "setGrantType": [["void", "String grantType"]], "getGrantType": [["String"]], "getRequestedScope": [["List<String>"]], "getAudience": [["String"]], "setApprovedScope": [["void", "List<String> approvedScope"]], "setAudience": [["void", "String audience"]]}, "className": "AccessTokenRegistration", "renamed": ["Client", "function", "(", ")", "{", "return", "client", ";", "}"], "nl": "Returns the  {@link Client} instance", "nlToks": ["Returns", "the", "-LCB-", "@link", "Client", "-RCB-", "instance"], "path": "primesign/cxf/tree/master/rt/rs/security/oauth-parent/oauth2/src/main/java/org/apache/cxf/rs/security/oauth2/common/AccessTokenRegistration.java", "idx": 2156}
{"memberVariables": {"IMPL": "AccessibilityServiceInfoVersionImpl", "FEEDBACK_ALL_MASK=0xFFFFFFFF": "int"}, "code": ["String", "function", "(", "AccessibilityServiceInfo", "info", ")", "{", "return", "IMPL", ".", "getDescription", "(", "info", ")", ";", "}"], "memberFunctions": {"getResolveInfo": [["ResolveInfo", "AccessibilityServiceInfo info"], ["ResolveInfo", "AccessibilityServiceInfo info"], ["ResolveInfo", "AccessibilityServiceInfo info"]], "flagToString": [["String", "int flag"]], "getId": [["String", "AccessibilityServiceInfo info"], ["String", "AccessibilityServiceInfo info"], ["String", "AccessibilityServiceInfo info"]], "getCanRetrieveWindowContent": [["boolean", "AccessibilityServiceInfo info"], ["boolean", "AccessibilityServiceInfo info"], ["boolean", "AccessibilityServiceInfo info"]], "getSettingsActivityName": [["String", "AccessibilityServiceInfo info"], ["String", "AccessibilityServiceInfo info"], ["String", "AccessibilityServiceInfo info"]], "feedbackTypeToString": [["String", "int feedbackType"]]}, "className": "AccessibilityServiceInfoCompat", "renamed": ["String", "function", "(", "AccessibilityServiceInfo", "arg0", ")", "{", "return", "IMPL", ".", "getDescription", "(", "arg0", ")", ";", "}"], "nl": "Description of the accessibility service.  Statically set from  {@link AccessibilityService#SERVICE_META_DATA meta-data}. ", "nlToks": ["Description", "of", "the", "accessibility", "service", ".", "Statically", "set", "from", "-LCB-", "@link", "AccessibilityService", "#SERVICE_META_DATA", "meta-data", "-RCB-", "."], "path": "prateeka/AndroidDev/tree/master/SherlockActionBar/src/android/support/v4/accessibilityservice/AccessibilityServiceInfoCompat.java", "idx": 2159}
{"memberVariables": {"LOG=Logger.getLogger(Translator.class)": "Logger", "systemDefaultLocale": "Locale", "BUNDLES_PATH=\"org.argouml.i18n\"": "String", "bundles": "Map<String,ResourceBundle>", "classLoaders=new ArrayList<ClassLoader>()": "List<ClassLoader>", "initialized": "boolean"}, "code": ["void", "function", "(", "Locale", "locale", ")", "{", "Locale", ".", "setDefault", "(", "locale", ")", ";", "bundles", "=", "new", "HashMap", "<", "String", ",", "ResourceBundle", ">", "(", ")", ";", "}"], "memberFunctions": {"initInternal": [["void", "String s"]], "init": [["void"], ["void", "String locale"]], "localize": [["String", "String key", "Object[] args"], ["String", "String key"]], "getName": [["String", "String key"]], "initForEclipse": [["void"], ["void", "String locale"]], "addClassLoader": [["void", "ClassLoader cl"]], "loadBundle": [["void", "String name"]], "messageFormat": [["String", "String key", "Object[] args"]], "getSystemDefaultLocale": [["Locale"]], "getLocales": [["Locale[]"]]}, "className": "Translator", "renamed": ["void", "function", "(", "Locale", "arg0", ")", "{", "Locale", ".", "setDefault", "(", "arg0", ")", ";", "bundles", "=", "new", "HashMap", "<", "String", ",", "ResourceBundle", ">", "(", ")", ";", "}"], "nl": "Change the current Locale.  Only use this before the GUI is initialized.", "nlToks": ["Change", "the", "current", "Locale", ".", "Only", "use", "this", "before", "the", "GUI", "is", "initialized", "."], "path": "pichiliani/CoArgoUML/tree/master/v0.24/fonte/src/argouml-app/src/org/argouml/i18n/Translator.java", "idx": 2160}
{"memberVariables": {"chunks": "List<ScriptChunk>"}, "code": ["Script", "function", "(", "@", "Nullable", "TransactionSignature", "signature", ",", "ECKey", "pubKey", ")", "{", "byte", "[", "]", "pubkeyBytes", "=", "pubKey", ".", "getPubKey", "(", ")", ";", "byte", "[", "]", "sigBytes", "=", "signature", "!=", "null", "?", "signature", ".", "encodeToBitcoin", "(", ")", ":", "new", "byte", "[", "]", "{", "}", ";", "return", "new", "ScriptBuilder", "(", ")", ".", "data", "(", "sigBytes", ")", ".", "data", "(", "pubkeyBytes", ")", ".", "build", "(", ")", ";", "}"], "memberFunctions": {"op": [["ScriptBuilder", "int opcode"], ["ScriptBuilder", "int index", "int opcode"]], "updateScriptWithSignature": [["Script", "Script scriptSig", "byte[] signature", "int targetIndex", "int sigsPrefixCount", "int sigsSuffixCount"]], "createOpReturnScript": [["Script", "byte[] data"]], "data": [["ScriptBuilder", "byte[] data"], ["ScriptBuilder", "int index", "byte[] data"]], "createMultiSigInputScriptBytes": [["Script", "List<byte[]> signatures"], ["Script", "List<byte[]> signatures", "@Nullable byte[] multisigProgramBytes"]], "smallNum": [["ScriptBuilder", "int num"], ["ScriptBuilder", "int index", "int num"]], "createRedeemScript": [["Script", "int threshold", "List<ECKey> pubkeys"]], "addChunk": [["ScriptBuilder", "ScriptChunk chunk"], ["ScriptBuilder", "int index", "ScriptChunk chunk"]], "createOutputScript": [["Script", "Address to"], ["Script", "ECKey key"]], "createMultiSigInputScript": [["Script", "List<TransactionSignature> signatures"], ["Script", "TransactionSignature... signatures"]], "createMultiSigOutputScript": [["Script", "int threshold", "List<ECKey> pubkeys"]], "build": [["Script"]], "createP2SHMultiSigInputScript": [["Script", "@Nullable List<TransactionSignature> signatures", "Script multisigProgram"]], "createP2SHOutputScript": [["Script", "byte[] hash"], ["Script", "Script redeemScript"], ["Script", "int threshold", "List<ECKey> pubkeys"]]}, "className": "ScriptBuilder", "renamed": ["Script", "function", "(", "@", "Nullable", "TransactionSignature", "arg0", ",", "ECKey", "arg1", ")", "{", "byte", "[", "]", "loc0", "=", "arg1", ".", "getPubKey", "(", ")", ";", "byte", "[", "]", "loc1", "=", "arg0", "!=", "null", "?", "arg0", ".", "encodeToBitcoin", "(", ")", ":", "new", "byte", "[", "]", "{", "}", ";", "return", "new", "ScriptBuilder", "(", ")", ".", "data", "(", "loc1", ")", ".", "data", "(", "loc0", ")", ".", "build", "(", ")", ";", "}"], "nl": "Creates a scriptSig that can redeem a pay-to-address output. If given signature is null, incomplete scriptSig will be created with OP_0 instead of signature", "nlToks": ["Creates", "a", "scriptSig", "that", "can", "redeem", "a", "pay-to-address", "output", ".", "If", "given", "signature", "is", "null", ",", "incomplete", "scriptSig", "will", "be", "created", "with", "OP_0", "instead", "of", "signature"], "path": "1000000000001/bitcoinj/tree/master/core/src/main/java/org/bitcoinj/script/ScriptBuilder.java", "idx": 2161}
{"memberVariables": {"comments": "String", "inactivationReasonType": "String", "receiptDate": "Timestamp", "isActive": "String", "predecessorId": "BigDecimal", "srcFileName": "String", "serialVersionUID=-2837724379118220768L": "long", "srcUniqueFileName": "String", "successorId": "BigDecimal", "createdDate": "Timestamp", "pclDataUnits": "List<PCLDataUnitEntity>", "dataSetId": "long", "feedId": "BigDecimal", "fileSize": "BigDecimal", "destFileName": "String", "checksum": "String", "checksumType": "String", "modifiedDate": "Timestamp", "runId": "BigDecimal", "isPrepopulated": "String", "isUpdate": "String", "receiptDateType": "String", "status": "String"}, "code": ["Timestamp", "function", "(", ")", "{", "return", "this", ".", "receiptDate", ";", "}"], "memberFunctions": {"setFeedId": [["void", "BigDecimal feedId"]], "getInactivationReasonType": [["String"]], "getSrcUniqueFileName": [["String"]], "getDataSetId": [["long"]], "setReceiptDateType": [["void", "String receiptDateType"]], "setIsPrepopulated": [["void", "String isPrepopulated"]], "getRunId": [["BigDecimal"]], "setSrcFileName": [["void", "String srcFileName"]], "getChecksumType": [["String"]], "getSrcFileName": [["String"]], "getChecksum": [["String"]], "getStatus": [["String"]], "getDestFileName": [["String"]], "getIsUpdate": [["String"]], "getFileSize": [["BigDecimal"]], "getPclDataUnits": [["List<PCLDataUnitEntity>"]], "setPclDataUnits": [["void", "List<PCLDataUnitEntity> pclDataUnits"]], "setInactivationReasonType": [["void", "String inactivationReasonType"]], "getComments": [["String"]], "getCreatedDate": [["Timestamp"]], "setComments": [["void", "String comments"]], "removePclDataUnit": [["PCLDataUnitEntity", "PCLDataUnitEntity pclDataUnit"]], "getSuccessorId": [["BigDecimal"]], "getIsPrepopulated": [["String"]], "setSrcUniqueFileName": [["void", "String srcUniqueFileName"]], "setFileSize": [["void", "BigDecimal fileSize"]], "getPredecessorId": [["BigDecimal"]], "setChecksum": [["void", "String checksum"]], "setIsUpdate": [["void", "String isUpdate"]], "getReceiptDateType": [["String"]], "getFeedId": [["BigDecimal"]], "setRunId": [["void", "BigDecimal runId"]], "setReceiptDate": [["void", "Timestamp receiptDate"]], "setStatus": [["void", "String status"]], "getModifiedDate": [["Timestamp"]], "getIsActive": [["String"]], "setSuccessorId": [["void", "BigDecimal successorId"]], "setDestFileName": [["void", "String destFileName"]], "addPclDataUnit": [["PCLDataUnitEntity", "PCLDataUnitEntity pclDataUnit"]], "setModifiedDate": [["void", "Timestamp modifiedDate"]], "setCreatedDate": [["void", "Timestamp createdDate"]], "setDataSetId": [["void", "long dataSetId"]], "setPredecessorId": [["void", "BigDecimal predecessorId"]], "setIsActive": [["void", "String isActive"]], "setChecksumType": [["void", "String checksumType"]]}, "className": "PCLDataSetEntity", "renamed": ["Timestamp", "function", "(", ")", "{", "return", "this", ".", "receiptDate", ";", "}"], "nl": "Gets the receipt date.", "nlToks": ["Gets", "the", "receipt", "date", "."], "path": "pkesireddy/portico_fletcher/tree/master/FetcherTesterService/src/main/java/org/ithaka/cm/fetchertester/entity/PCLDataSetEntity.java", "idx": 2162}
{"memberVariables": {"spIdentifier": "String", "assertionConsumerURL": "String", "requestId": "String", "enforceAssertionsSigned=true": "boolean", "enforceKnownIssuer=true": "boolean", "issuerIDP": "String", "LOG=LogUtils.getL7dLogger(SAMLSSOResponseValidator.class)": "Logger", "clientAddress": "String", "replayCache": "TokenReplayCache<String>"}, "code": ["void", "function", "(", "boolean", "enforceKnownIssuer", ")", "{", "this", ".", "enforceKnownIssuer", "=", "enforceKnownIssuer", ";", "}"], "memberFunctions": {"validateSamlResponse": [["SSOValidatorResponse", "org.opensaml.saml.saml2.core.Response samlResponse", "boolean postBinding"]], "setReplayCache": [["void", "TokenReplayCache<String> replayCache"]], "validateAudienceRestrictionCondition": [["void", "org.opensaml.saml.saml2.core.Conditions conditions"]], "validateAuthenticationSubject": [["boolean", "org.opensaml.saml.saml2.core.Subject subject", "String id", "boolean postBinding"]], "setIssuerIDP": [["void", "String issuerIDP"]], "setEnforceAssertionsSigned": [["void", "boolean enforceAssertionsSigned"]], "validateSubjectConfirmation": [["void", "org.opensaml.saml.saml2.core.SubjectConfirmationData subjectConfData", "String id", "boolean postBinding"]], "matchSaml2AudienceRestriction": [["boolean", "String appliesTo", "List<AudienceRestriction> audienceRestrictions"]], "getSpIdentifier": [["String"]], "setRequestId": [["void", "String requestId"]], "getClientAddress": [["String"]], "validateIssuer": [["void", "org.opensaml.saml.saml2.core.Issuer issuer"]], "setSpIdentifier": [["void", "String spIdentifier"]], "getIssuerIDP": [["String"]], "getAssertionConsumerURL": [["String"]], "setAssertionConsumerURL": [["void", "String assertionConsumerURL"]], "setClientAddress": [["void", "String clientAddress"]], "getRequestId": [["String"]]}, "className": "SAMLSSOResponseValidator", "renamed": ["void", "function", "(", "boolean", "arg0", ")", "{", "this", ".", "enforceKnownIssuer", "=", "arg0", ";", "}"], "nl": "Enforce that the Issuer of the received Response/Assertion is known. The default is true.", "nlToks": ["Enforce", "that", "the", "Issuer", "of", "the", "received", "Response/Assertion", "is", "known", ".", "The", "default", "is", "true", "."], "path": "primesign/cxf/tree/master/rt/rs/security/sso/saml/src/main/java/org/apache/cxf/rs/security/saml/sso/SAMLSSOResponseValidator.java", "idx": 2163}
{"memberVariables": {"access": "ValidateAccess"}, "code": ["ValidateAccess", "function", "(", ")", "{", "return", "access", ";", "}"], "memberFunctions": {"setAccess": [["void", "ValidateAccess value"]]}, "className": "ValidateTokenResponse", "renamed": ["ValidateAccess", "function", "(", ")", "{", "return", "access", ";", "}"], "nl": "Gets the value of the access property.", "nlToks": ["Gets", "the", "value", "of", "the", "access", "property", "."], "path": "platformlayer/platformlayer/tree/master/auth/client/src/generated/xjc/org/platformlayer/auth/v1/ValidateTokenResponse.java", "idx": 2167}
{"memberVariables": {"VERSION=\"PRE-0.26.alpha1\"": "String"}, "code": ["void", "function", "(", ")", "{", "ApplicationVersion", ".", "init", "(", "VERSION", ")", ";", "}"], "memberFunctions": {}, "className": "ArgoVersion", "renamed": ["void", "function", "(", ")", "{", "ApplicationVersion", ".", "init", "(", "VERSION", ")", ";", "}"], "nl": "Make the version of ArgoUML public.", "nlToks": ["Make", "the", "version", "of", "ArgoUML", "public", "."], "path": "pichiliani/CoArgoUML/tree/master/v0.24/fonte/src/argouml-app/src/org/argouml/application/ArgoVersion.java", "idx": 2168}
{"memberVariables": {"filename": "String", "tx": "Transaction", "ti": "TableInfo", "currentblknum": "int", "rp": "RecordPage"}, "code": ["void", "function", "(", "RID", "rid", ")", "{", "moveTo", "(", "rid", ".", "blockNumber", "(", ")", ")", ";", "rp", ".", "moveToId", "(", "rid", ".", "id", "(", ")", ")", ";", "}"], "memberFunctions": {"next": [["boolean"]], "atLastBlock": [["boolean"]], "currentRid": [["RID"]], "appendBlock": [["void"]], "beforeFirst": [["void"]], "insert": [["void"]], "getString": [["String", "String fldname"]], "delete": [["void"]], "setInt": [["void", "String fldname", "int val"]], "getInt": [["int", "String fldname"]], "setString": [["void", "String fldname", "String val"]], "close": [["void"]], "moveTo": [["void", "int b"]]}, "className": "RecordFile", "renamed": ["void", "function", "(", "RID", "arg0", ")", "{", "moveTo", "(", "arg0", ".", "blockNumber", "(", ")", ")", ";", "rp", ".", "moveToId", "(", "arg0", ".", "id", "(", ")", ")", ";", "}"], "nl": "Positions the current record as indicated by the specified RID.", "nlToks": ["Positions", "the", "current", "record", "as", "indicated", "by", "the", "specified", "RID", "."], "path": "prerit2803/DBMSProject2/tree/master/simpledb/record/RecordFile.java", "idx": 2169}
{"memberVariables": {"viewer": "RpgScreen", "model": "RpgPlatform"}, "code": ["void", "function", "(", "WalkDirection", "direction", ")", "{", "viewer", ".", "moveCharacter2d", "(", "direction", ")", ";", "}"], "memberFunctions": {"updateModel": [["void"]], "getViewer": [["RpgScreen"]], "getModel": [["RpgPlatform"]], "setModel": [["void", "RpgPlatform model"]], "moveCharacter": [["void", "WalkDirection direction"], ["void", "Path path", "int[] destinationPos"]], "triggerEvent": [["void"]], "setViewer": [["void", "RpgScreen viewer"]], "getMap": [["TiledMap"]], "runAutomaticEvents": [["void"]]}, "className": "RpgController", "renamed": ["void", "function", "(", "WalkDirection", "arg0", ")", "{", "viewer", ".", "moveCharacter2d", "(", "arg0", ")", ";", "}"], "nl": "Method called only from the Model. It sends a command to the Viewer to update the character sprite as the model's character moves.", "nlToks": ["Method", "called", "only", "from", "the", "Model", ".", "It", "sends", "a", "command", "to", "the", "Viewer", "to", "update", "the", "character", "sprite", "as", "the", "model", "'s", "character", "moves", "."], "path": "prativa/shadowstruggles/tree/master/Shadow Struggles/src/br/edu/ifsp/pds/shadowstruggles/rpg/RpgController.java", "idx": 2171}
{"memberVariables": {"BLOCK_WORKER_THRIFT_CLIENT_HEARTBEAT_POOL=new ConcurrentHashMapV8<>()": "ConcurrentHashMapV8<InetSocketAddress,BlockWorkerThriftClientPool>", "mBlockMasterClientPool": "BlockMasterClientPool", "mHasLocalWorker": "Boolean", "BLOCK_WORKER_THRIFT_CLIENT_POOL=new ConcurrentHashMapV8<>()": "ConcurrentHashMapV8<InetSocketAddress,BlockWorkerThriftClientPool>", "NETTY_CHANNEL_POOL_MAP=new ConcurrentHashMapV8<>()": "ConcurrentHashMapV8<InetSocketAddress,NettyChannelPool>", "CACHED_CONTEXTS=new ConcurrentHashMap<>()": "Map<InetSocketAddress,BlockStoreContext>"}, "code": ["BlockWorkerClient", "function", "(", "WorkerNetAddress", "address", ")", "{", "Preconditions", ".", "checkNotNull", "(", "address", ",", "ExceptionMessage", ".", "NO_WORKER_AVAILABLE", ".", "getMessage", "(", ")", ")", ";", "long", "clientId", "=", "IdUtils", ".", "getRandomNonNegativeLong", "(", ")", ";", "return", "new", "RetryHandlingBlockWorkerClient", "(", "address", ",", "clientId", ")", ";", "}"], "memberFunctions": {"releaseBlockWorkerThriftClient": [["void", "InetSocketAddress address", "BlockWorkerClientService.Client client"]], "initializeGauges": [["void"]], "hasLocalWorker": [["boolean"]], "releaseBlockWorkerThriftClientHeartbeat": [["void", "InetSocketAddress address", "BlockWorkerClientService.Client client"]], "releaseWorkerClient": [["void", "BlockWorkerClient blockWorkerClient"]], "get": [["BlockStoreContext", "InetSocketAddress masterAddress"], ["BlockStoreContext"]], "acquireMasterClientResource": [["CloseableResource<BlockMasterClient>"]], "releaseNettyChannel": [["void", "InetSocketAddress address", "Channel channel"]], "acquireBlockWorkerThriftClient": [["BlockWorkerClientService.Client", "final InetSocketAddress address"]], "getWorkerAddresses": [["List<WorkerNetAddress>", "String hostname"]], "acquireNettyChannel": [["Channel", "final InetSocketAddress address", "final Callable<Bootstrap> bootstrapBuilder"]], "acquireBlockWorkerThriftClientHeartbeat": [["BlockWorkerClientService.Client", "final InetSocketAddress address"]]}, "className": "BlockStoreContext", "renamed": ["BlockWorkerClient", "function", "(", "WorkerNetAddress", "arg0", ")", "{", "Preconditions", ".", "checkNotNull", "(", "arg0", ",", "ExceptionMessage", ".", "NO_WORKER_AVAILABLE", ".", "getMessage", "(", ")", ")", ";", "long", "loc0", "=", "IdUtils", ".", "getRandomNonNegativeLong", "(", ")", ";", "return", "new", "RetryHandlingBlockWorkerClient", "(", "arg0", ",", "loc0", ")", ";", "}"], "nl": "Obtains a client for a worker with the given address.", "nlToks": ["Obtains", "a", "client", "for", "a", "worker", "with", "the", "given", "address", "."], "path": "poemlin/alluxio/tree/master/core/client/src/main/java/alluxio/client/block/BlockStoreContext.java", "idx": 2173}
{"memberVariables": {"expDataUnitId": "BigDecimal", "dataUnitId": "BigDecimal", "createTimeStamp": "Timestamp", "actValue": "String", "errorCode": "String", "srcFileName": "String", "errorMsg": "String", "failedAttrib": "String", "expDataSetId": "BigDecimal", "regPclTestResult": "RegPCLTestResultEntity", "dataSetId": "BigDecimal", "id": "RegPCLTestResultDetailsEntityPK", "serialVersionUID=3309870439513279844L": "long", "expValue": "String"}, "code": ["String", "function", "(", ")", "{", "return", "this", ".", "failedAttrib", ";", "}"], "memberFunctions": {"updateCreateTimeStamp": [["void"]], "setActValue": [["void", "String actValue"]], "getDataSetId": [["BigDecimal"]], "getId": [["RegPCLTestResultDetailsEntityPK"]], "setSrcFileName": [["void", "String srcFileName"]], "getRegPclTestResult": [["RegPCLTestResultEntity"]], "setExpValue": [["void", "String expValue"]], "getSrcFileName": [["String"]], "setErrorCode": [["void", "String errorCode"]], "getDataUnitId": [["BigDecimal"]], "setErrorMsg": [["void", "String errorMsg"]], "getErrorCode": [["String"]], "setDataUnitId": [["void", "BigDecimal dataUnitId"]], "setId": [["void", "RegPCLTestResultDetailsEntityPK id"]], "setFailedAttrib": [["void", "String failedAttrib"]], "getExpDataSetId": [["BigDecimal"]], "getErrorMsg": [["String"]], "getActValue": [["String"]], "setRegPclTestResult": [["void", "RegPCLTestResultEntity regPclTestResult"]], "getExpValue": [["String"]], "setCreateTimeStamp": [["void", "Timestamp createTimeStamp"]], "getExpDataUnitId": [["BigDecimal"]], "getCreateTimeStamp": [["Timestamp"]], "setExpDataSetId": [["void", "BigDecimal expDataSetId"]], "setDataSetId": [["void", "BigDecimal dataSetId"]], "setExpDataUnitId": [["void", "BigDecimal expDataUnitId"]]}, "className": "RegPCLTestResultDetailsEntity", "renamed": ["String", "function", "(", ")", "{", "return", "this", ".", "failedAttrib", ";", "}"], "nl": "Gets the failed attrib.", "nlToks": ["Gets", "the", "failed", "attrib", "."], "path": "pkesireddy/portico_fletcher/tree/master/FetcherTesterService/src/main/java/org/ithaka/cm/fetchertester/entity/RegPCLTestResultDetailsEntity.java", "idx": 2175}
{"memberVariables": {"headers": "Map<String,Object>", "body[]": "byte", "deliveryTag": "long", "replyTo": "String", "contentEncoding": "String", "messageId": "String", "correlationId": "String", "soapAction": "String", "contentType": "String"}, "code": ["void", "function", "(", "Map", "<", "String", ",", "Object", ">", "headers", ")", "{", "this", ".", "headers", "=", "headers", ";", "}"], "memberFunctions": {"getCorrelationId": [["String"]], "getContentEncoding": [["String"]], "getHeaders": [["Map<String,Object>"]], "getBody": [["byte[]"]], "getReplyTo": [["String"]], "setCorrelationId": [["void", "String correlationId"]], "setContentEncoding": [["void", "String contentEncoding"]], "getDeliveryTag": [["long"]], "setMessageId": [["void", "String messageId"]], "setSoapAction": [["void", "String soapAction"]], "setBody": [["void", "byte[] body"]], "getMessageId": [["String"]], "setReplyTo": [["void", "String replyTo"]], "setDeliveryTag": [["void", "long deliveryTag"]], "getContentType": [["String"]], "setContentType": [["void", "String contentType"]], "getSoapAction": [["String"]]}, "className": "RabbitMQMessage", "renamed": ["void", "function", "(", "Map", "<", "String", ",", "Object", ">", "arg0", ")", "{", "this", ".", "headers", "=", "arg0", ";", "}"], "nl": "set all headers for the message", "nlToks": ["set", "all", "headers", "for", "the", "message"], "path": "harsha89/wso2-axis2-transports/tree/master/modules/rabbitmq/src/main/java/org/apache/axis2/transport/rabbitmq/RabbitMQMessage.java", "idx": 2176}
{"memberVariables": {"_the_production": "production", "_core_hash_cache": "int", "_symbol_after_dot=null": "symbol", "_dot_pos": "int"}, "code": ["int", "function", "(", ")", "{", "return", "super", ".", "hashCode", "(", ")", ";", "}"], "memberFunctions": {"shift_core": [["lr_item_core"]], "symbol_after_dot": [["symbol"]], "to_simple_string": [["String"]], "dot_pos": [["int"]], "hashCode": [["int"]], "equals": [["boolean", "lr_item_core other"], ["boolean", "Object other"]], "toString": [["String"]], "dot_before_nt": [["non_terminal"]], "the_production": [["production"]], "core_hashCode": [["int"]], "core_equals": [["boolean", "lr_item_core other"]], "dot_at_end": [["boolean"]]}, "className": "lr_item_core", "renamed": ["int", "function", "(", ")", "{", "return", "super", ".", "hashCode", "(", ")", ";", "}"], "nl": "Return the hash code that object would have provided for us so we have a (nearly) unique id for debugging.", "nlToks": ["Return", "the", "hash", "code", "that", "object", "would", "have", "provided", "for", "us", "so", "we", "have", "a", "-LRB-", "nearly", "-RRB-", "unique", "id", "for", "debugging", "."], "path": "polyglot-compiler/polyglot/tree/master/tools/java_cup/src/java_cup/lr_item_core.java", "idx": 2178}
{"memberVariables": {"log=LogFactory.getLog(SAMLSSOValidatorServiceClient.class)": "Log", "stub": "IdentitySAMLValidatorServiceStub"}, "code": ["ValidatedItemDTO", "[", "]", "function", "(", "String", "samlRequest", ",", "boolean", "isPost", ")", "{", "try", "{", "return", "stub", ".", "validateAuthnRequest", "(", "samlRequest", ",", "isPost", ")", ";", "}", "catch", "(", "RemoteException", "e", ")", "{", "log", ".", "error", "(", "\"Error validating SAML request\"", ",", "e", ")", ";", "throw", "new", "AxisFault", "(", "e", ".", "getMessage", "(", ")", ",", "e", ")", ";", "}", "}"], "memberFunctions": {"buildResponse": [["GeneratedResponseDTO", "String issuer", "String userName"]], "getIssuersOfSAMLServiceProviders": [["String[]"]]}, "className": "SAMLSSOValidatorServiceClient", "renamed": ["ValidatedItemDTO", "[", "]", "function", "(", "String", "arg0", ",", "boolean", "arg1", ")", "{", "try", "{", "return", "stub", ".", "validateAuthnRequest", "(", "arg0", ",", "arg1", ")", ";", "}", "catch", "(", "RemoteException", "loc0", ")", "{", "log", ".", "error", "(", "\"srini_string\"", ",", "loc0", ")", ";", "throw", "new", "AxisFault", "(", "loc0", ".", "getMessage", "(", ")", ",", "loc0", ")", ";", "}", "}"], "nl": "Validate SAML request", "nlToks": ["Validate", "SAML", "request"], "path": "harsha1979/carbon-identity/tree/master/components/tools/samlsso-validator/org.wso2.carbon.identity.tools.saml.validator.ui/src/main/java/org/wso2/carbon/identity/tools/saml/validator/ui/client/SAMLSSOValidatorServiceClient.java", "idx": 2179}
{"memberVariables": {"addressHeader": "int", "INTERVAL=TARGET_TIMESPAN / TARGET_SPACING": "int", "alertSigningKey": "byte[]", "acceptableAddressCodes": "int[]", "packetMagic": "long", "p2shHeader": "int", "paramSet=Collections.synchronizedList(new ArrayList<NetworkParameters>())": "List<NetworkParameters>", "PROTOCOL_VERSION=70001": "int", "genesisBlock": "Block", "proofOfWorkLimit": "BigInteger", "subsidyDecreaseBlockCount": "int", "port": "int", "MAX_MONEY=new BigInteger(\"21000000\",10).multiply(COIN)": "BigInteger", "TARGET_SPACING=10 * 60": "int", "dnsSeeds": "String[]", "checkpoints=new HashMap<Integer,Sha256Hash>()": "Map<Integer,Sha256Hash>", "SATOSHI_KEY=Hex.decode(\"04fc9702847840aaf195de8442ebecedf5b095cdbb9bc716bda9110971b28a49e0ead8564ff0db22209e0374782c093bb899692d524e9d6a6956e7c5ecbcd68284\")": "byte[]", "interval": "int", "id": "String", "spendableCoinbaseDepth": "int", "dumpedPrivateKeyHeader": "int", "targetTimespan": "int", "TARGET_TIMESPAN=14 * 24 * 60* 60": "int", "BIP16_ENFORCE_TIME=1333238400": "int"}, "code": ["Sha256Hash", "function", "(", "Block", "b", ")", "{", "return", "b", ".", "getHash", "(", ")", ";", "}"], "memberFunctions": {"regTests": [["NetworkParameters"]], "allowEmptyPeerChain": [["boolean"]], "getDumpedPrivateKeyHeader": [["int"]], "testNet2": [["NetworkParameters"]], "testNet3": [["NetworkParameters"]], "unitTests": [["NetworkParameters"]], "getId": [["String"]], "getAddressHeader": [["int"]], "getAcceptableAddressCodes": [["int[]"]], "prodNet": [["NetworkParameters"]], "fromID": [["NetworkParameters", "String id"]], "getTargetTimespan": [["int"]], "getDnsSeeds": [["String[]"]], "hashCode": [["int"]], "getSpendableCoinbaseDepth": [["int"]], "testNet": [["NetworkParameters"]], "getMaxMoney": [["BigInteger"]], "getParamsFromAddressByte": [["NetworkParameters", "int version"]], "registerParams": [["void", "NetworkParameters params"]], "isCheckpoint": [["boolean", "int height"]], "getP2SHHeader": [["int"]], "getInterval": [["int"]], "getRetargetBlockCount": [["int"], ["int", "StoredBlock cursor"]], "getGenesisBlock": [["Block"]], "getSubsidyDecreaseBlockCount": [["int"]], "createGenesis": [["Block", "NetworkParameters n"]], "getPacketMagic": [["long"]], "getPort": [["int"]], "getAlertSigningKey": [["byte[]"]], "equals": [["boolean", "Object other"]], "passesCheckpoint": [["boolean", "int height", "Sha256Hash hash"]], "isAcceptableAddressVersion": [["boolean", "int version"]], "getURIScheme": [["String"]], "getProofOfWorkLimit": [["BigInteger"]]}, "className": "NetworkParameters", "renamed": ["Sha256Hash", "function", "(", "Block", "arg0", ")", "{", "return", "arg0", ".", "getHash", "(", ")", ";", "}"], "nl": "Gets the hash of the given block for the purpose of checking its PoW", "nlToks": ["Gets", "the", "hash", "of", "the", "given", "block", "for", "the", "purpose", "of", "checking", "its", "PoW"], "path": "plncoin/plncoin-and/tree/master/plncoinj/core/src/main/java/com/google/bitcoin/core/NetworkParameters.java", "idx": 2181}
{"memberVariables": {"LOG=LoggerFactory.getLogger(Constants.LOGGER_TYPE)": "Logger"}, "code": ["void", "function", "(", "String", "srcPath", ",", "String", "dstPath", ")", "{", "com", ".", "google", ".", "common", ".", "io", ".", "Files", ".", "move", "(", "new", "File", "(", "srcPath", ")", ",", "new", "File", "(", "dstPath", ")", ")", ";", "}"], "memberFunctions": {"setLocalDirStickyBit": [["void", "String dir"]], "getLocalFileMode": [["short", "String filePath"]], "changeLocalFileUser": [["void", "String path", "String user"]], "delete": [["void", "String path"]], "getLocalFileOwner": [["String", "String filePath"]], "createFile": [["void", "String filePath"]], "createStorageDirPath": [["void", "String path"]], "changeLocalFileToFullPermission": [["void", "String filePath"]], "changeLocalFileGroup": [["void", "String path", "String group"]], "getLocalFileGroup": [["String", "String filePath"]], "createDir": [["void", "String path"]], "exists": [["boolean", "String path"]], "createBlockPath": [["void", "String path"]], "changeLocalFilePermission": [["void", "String filePath", "String perms"]], "deletePathRecursively": [["void", "String path"]]}, "className": "FileUtils", "renamed": ["void", "function", "(", "String", "arg0", ",", "String", "arg1", ")", "{", "com", ".", "google", ".", "common", ".", "io", ".", "Files", ".", "move", "(", "new", "File", "(", "arg0", ")", ",", "new", "File", "(", "arg1", ")", ")", ";", "}"], "nl": "Moves file from one place to another, can across storage devices (e.g., from memory to SSD) when  {@link File#renameTo} may not work.Current implementation uses  {@link com.google.common.io.Files#move(File,File)}, may change if there is a better solution.", "nlToks": ["Moves", "file", "from", "one", "place", "to", "another", ",", "can", "across", "storage", "devices", "-LRB-", "e.g.", ",", "from", "memory", "to", "SSD", "-RRB-", "when", "-LCB-", "@link", "File", "#renameTo", "-RCB-", "may", "not", "work.Current", "implementation", "uses", "-LCB-", "@link", "com.google.common.io.Files", "#move", "-LRB-", "File", ",", "File", "-RRB-", "-RCB-", ",", "may", "change", "if", "there", "is", "a", "better", "solution", "."], "path": "poemlin/alluxio/tree/master/core/common/src/main/java/alluxio/util/io/FileUtils.java", "idx": 2184}
{"memberVariables": {"nominalTime": "Date", "trackerUri": "String", "lastModifiedTime": "Date", "missingDependencies": "String", "createdConf": "String", "errorMessage": "String", "externalId": "String", "errorCode": "String", "type": "String", "actionXml": "String", "jobId": "String", "consoleUrl": "String", "runConf": "String", "actionNumber": "int", "createdTime": "Date", "timeOut=0": "int", "id": "String", "externalStatus": "String", "status=CoordinatorAction.Status.WAITING": "Status"}, "code": ["List", "<", "JsonCoordinatorAction", ">", "function", "(", "JSONArray", "array", ")", "{", "List", "<", "JsonCoordinatorAction", ">", "list", "=", "new", "ArrayList", "<", "JsonCoordinatorAction", ">", "(", ")", ";", "for", "(", "Object", "obj", ":", "array", ")", "{", "list", ".", "add", "(", "new", "JsonCoordinatorAction", "(", "(", "JSONObject", ")", "obj", ")", ")", ";", "}", "return", "list", ";", "}"], "memberFunctions": {"getMissingDependencies": [["String"]], "getConsoleUrl": [["String"]], "setJobId": [["void", "String id"]], "setActionNumber": [["void", "int actionNumber"]], "toJSONArray": [["JSONArray", "List<? extends JsonCoordinatorAction> actions"]], "getId": [["String"]], "getExternalId": [["String"]], "getActionNumber": [["int"]], "getStatus": [["Status"]], "setTrackerUri": [["void", "String trackerUri"]], "setErrorCode": [["void", "String errorCode"]], "setTimeOut": [["void", "int timeOut"]], "setErrorMessage": [["void", "String errorMessage"]], "getErrorCode": [["String"]], "hashCode": [["int"]], "setRunConf": [["void", "String runConf"]], "toJSONObject": [["JSONObject"]], "setId": [["void", "String id"]], "setCreatedTime": [["void", "Date createdTime"]], "setExternalId": [["void", "String extId"]], "setNominalTime": [["void", "Date nominalTime"]], "getJobId": [["String"]], "setCreatedConf": [["void", "String createdConf"]], "setLastModifiedTime": [["void", "Date lastModifiedTime"]], "getLastModifiedTime": [["Date"]], "setExternalStatus": [["void", "String externalStatus"]], "setConsoleUrl": [["void", "String consoleUrl"]], "setType": [["void", "String type"]], "getNominalTime": [["Date"]], "getCreatedConf": [["String"]], "setMissingDependencies": [["void", "String missingDependencies"]], "getExternalStatus": [["String"]], "setActionXml": [["void", "String actionXml"]], "setStatus": [["void", "Status status"]], "getRunConf": [["String"]], "setErrorInfo": [["void", "String errorCode", "String errorMessage"]], "getActionXml": [["String"]], "getType": [["String"]], "getTimeOut": [["int"]], "equals": [["boolean", "Object obj"]], "toString": [["String"]], "getCreatedTime": [["Date"]], "getTrackerUri": [["String"]], "getErrorMessage": [["String"]]}, "className": "JsonCoordinatorAction", "renamed": ["List", "<", "JsonCoordinatorAction", ">", "function", "(", "JSONArray", "arg0", ")", "{", "List", "<", "JsonCoordinatorAction", ">", "loc0", "=", "new", "ArrayList", "<", "JsonCoordinatorAction", ">", "(", ")", ";", "for", "(", "Object", "loc1", ":", "arg0", ")", "{", "loc0", ".", "add", "(", "new", "JsonCoordinatorAction", "(", "(", "JSONObject", ")", "loc1", ")", ")", ";", "}", "return", "loc0", ";", "}"], "nl": "Convert a JSONArray into a nodes list.", "nlToks": ["Convert", "a", "JSONArray", "into", "a", "nodes", "list", "."], "path": "pingpangkuangmo/oozie/tree/master/client/src/main/java/org/apache/oozie/client/rest/JsonCoordinatorAction.java", "idx": 2185}
{"memberVariables": {"md5Cache=new HashMap<String,byte[]>()": "Map<String,byte[]>", "b": "byte[]", "filed": "BlockingQueue<filechunk>", "poison=new filechunk(0)": "filechunk", "digestPool=new ConcurrentLinkedQueue<MessageDigest>()": "Queue<MessageDigest>", "digest": "MessageDigest", "n": "int", "empty": "BlockingQueue<filechunk>"}, "code": ["void", "function", "(", ")", "{", "md5Cache", ".", "clear", "(", ")", ";", "}"], "memberFunctions": {"call": [["MessageDigest"]], "longToBytes": [["byte[]", "long x"]], "encodeHex": [["String", "final long in", "final int length"], ["String", "final byte[] in"]], "encodeMD5Raw": [["byte[]", "final String key"], ["byte[]", "final File file"], ["byte[]", "final byte[] b"]], "encodeOctal": [["String", "final byte[] in"]], "encodeMD5Hex": [["String", "final String key"], ["String", "final File file"], ["String", "final byte[] b"]], "decodeHex": [["byte[]", "final String hex"]], "fastFingerprintRaw": [["byte[]", "final File file", "final boolean includeDate"]], "consume": [["void", "final filechunk c"]], "fastFingerprintHex": [["String", "final File file", "final boolean includeDate"]], "nextFree": [["filechunk"]]}, "className": "Digest", "renamed": ["void", "function", "(", ")", "{", "md5Cache", ".", "clear", "(", ")", ";", "}"], "nl": "clean the md5 cache", "nlToks": ["clean", "the", "md5", "cache"], "path": "adarsh-ideal/loklak_server/tree/master/src/org/loklak/tools/Digest.java", "idx": 2186}
{"memberVariables": {"serialVersionUID=1L": "long", "isSystemDerived": "String", "isActive": "String", "predecessorId": "BigDecimal", "srcFileName": "String", "successorId": "BigDecimal", "feedId": "BigDecimal", "checksum": "String", "transmissionDatasetId": "String", "comments": "String", "inactivationReasonType": "String", "isFormatValid": "String", "dataUnitId": "long", "receiptDate": "Timestamp", "srcUniqueFileName": "String", "createdDate": "Timestamp", "dataSetId": "Long", "fileSize": "BigDecimal", "destFileName": "String", "loadedInCats": "String", "checksumType": "String", "modifiedDate": "Timestamp", "runId": "BigDecimal", "isPrepopulated": "String", "isBulk": "String", "isUpdate": "String", "receiptDateType": "String", "status": "String"}, "code": ["String", "function", "(", ")", "{", "return", "this", ".", "inactivationReasonType", ";", "}"], "memberFunctions": {"setIsSystemDerived": [["void", "String isSystemDerived"]], "setIsPrepopulated": [["void", "String isPrepopulated"]], "getStatus": [["String"]], "getIsUpdate": [["String"]], "getDataUnitId": [["long"]], "getFileSize": [["BigDecimal"]], "setInactivationReasonType": [["void", "String inactivationReasonType"]], "setDataUnitId": [["void", "long dataUnitId"]], "getComments": [["String"]], "getCreatedDate": [["Timestamp"]], "setFileSize": [["void", "BigDecimal fileSize"]], "getPredecessorId": [["BigDecimal"]], "setIsUpdate": [["void", "String isUpdate"]], "getReceiptDateType": [["String"]], "getFeedId": [["BigDecimal"]], "setReceiptDate": [["void", "Timestamp receiptDate"]], "getModifiedDate": [["Timestamp"]], "setSuccessorId": [["void", "BigDecimal successorId"]], "setDestFileName": [["void", "String destFileName"]], "setIsBulk": [["void", "String isBulk"]], "getIsFormatValid": [["String"]], "setDataSetId": [["void", "Long dataSetId"]], "setIsActive": [["void", "String isActive"]], "setChecksumType": [["void", "String checksumType"]], "setFeedId": [["void", "BigDecimal feedId"]], "getSrcUniqueFileName": [["String"]], "getDataSetId": [["Long"]], "setReceiptDateType": [["void", "String receiptDateType"]], "getRunId": [["BigDecimal"]], "setSrcFileName": [["void", "String srcFileName"]], "getChecksumType": [["String"]], "getSrcFileName": [["String"]], "getChecksum": [["String"]], "getDestFileName": [["String"]], "getReceiptDate": [["Timestamp"]], "setTransmissionDatasetId": [["void", "String transmissionDatasetId"]], "getTransmissionDatasetId": [["String"]], "setComments": [["void", "String comments"]], "getLoadedInCats": [["String"]], "getSuccessorId": [["BigDecimal"]], "setLoadedInCats": [["void", "String loadedInCats"]], "getIsPrepopulated": [["String"]], "setSrcUniqueFileName": [["void", "String srcUniqueFileName"]], "setChecksum": [["void", "String checksum"]], "setIsFormatValid": [["void", "String isFormatValid"]], "getIsBulk": [["String"]], "setRunId": [["void", "BigDecimal runId"]], "setStatus": [["void", "String status"]], "getIsActive": [["String"]], "setModifiedDate": [["void", "Timestamp modifiedDate"]], "setCreatedDate": [["void", "Timestamp createdDate"]], "setPredecessorId": [["void", "BigDecimal predecessorId"]], "getIsSystemDerived": [["String"]]}, "className": "PCLDataUnitEntity", "renamed": ["String", "function", "(", ")", "{", "return", "this", ".", "inactivationReasonType", ";", "}"], "nl": "Gets the inactivation reason type.", "nlToks": ["Gets", "the", "inactivation", "reason", "type", "."], "path": "pkesireddy/portico_fletcher/tree/master/FetcherTesterService/src/main/java/org/ithaka/cm/fetchertester/entity/PCLDataUnitEntity.java", "idx": 2187}
{"memberVariables": {"log=LogFactory.getLog(ClaimAdminClient.class)": "Log", "stub": "ClaimManagementServiceStub"}, "code": ["void", "function", "(", "String", "msg", ",", "Exception", "e", ")", "{", "log", ".", "error", "(", "msg", ",", "e", ")", ";", "throw", "new", "AxisFault", "(", "msg", ",", "e", ")", ";", "}"], "memberFunctions": {"getAllClaimMappingsByDialect": [["ClaimDialectDTO", "String dialect"]], "getAllClaimMappings": [["ClaimDialectDTO[]"]], "addNewClaimDialect": [["void", "ClaimDialectDTO dialect"]], "getAllClaimMappingsByDialectWithRole": [["ClaimDialectDTO", "String dialect"]], "updateClaimMapping": [["void", "ClaimMappingDTO claimMapping"]], "removeClaimMapping": [["void", "String dialectUri", "String claimUri"]], "removeClaimDialect": [["void", "String dialectUri"]], "addNewClaimMappping": [["void", "ClaimMappingDTO claimMapping"]]}, "className": "ClaimAdminClient", "renamed": ["void", "function", "(", "String", "arg0", ",", "Exception", "arg1", ")", "{", "log", ".", "error", "(", "arg0", ",", "arg1", ")", ";", "throw", "new", "AxisFault", "(", "arg0", ",", "arg1", ")", ";", "}"], "nl": "Logs and wraps the given exception.", "nlToks": ["Logs", "and", "wraps", "the", "given", "exception", "."], "path": "harsha1979/carbon-identity/tree/master/components/claim-mgt/org.wso2.carbon.claim.mgt.ui/src/main/java/org/wso2/carbon/claim/mgt/ui/client/ClaimAdminClient.java", "idx": 2189}
{"memberVariables": {"sCleanerCleanMethod": "Method", "sByteBufferCleanerMethod": "Method", "LOG=LoggerFactory.getLogger(Constants.LOGGER_TYPE)": "Logger"}, "code": ["ByteBuffer", "function", "(", "int", "start", ",", "int", "len", ")", "{", "ByteBuffer", "ret", "=", "ByteBuffer", ".", "allocate", "(", "len", "*", "4", ")", ";", "for", "(", "int", "k", "=", "0", ";", "k", "<", "len", ";", "k", "++", ")", "{", "ret", ".", "putInt", "(", "start", "+", "k", ")", ";", "}", "ret", ".", "flip", "(", ")", ";", "return", "ret", ";", "}"], "memberFunctions": {"equalConstantByteArray": [["boolean", "byte value", "int len", "byte[] arr"]], "getIncreasingByteBuffer": [["ByteBuffer", "int len"], ["ByteBuffer", "int start", "int len"]], "fastCopy": [["void", "final ReadableByteChannel src", "final WritableByteChannel dest"]], "cleanDirectBuffer": [["void", "ByteBuffer buffer"]], "sliceByteBuffer": [["ByteBuffer", "ByteBuffer buffer", "int position", "int length"], ["ByteBuffer", "ByteBuffer buffer", "int position"]], "byteToInt": [["int", "byte b"]], "equalIncreasingByteArray": [["boolean", "int len", "byte[] arr"], ["boolean", "int start", "int len", "byte[] arr"]], "equalIncreasingByteBuffer": [["boolean", "int start", "int len", "ByteBuffer buf"]], "getIncreasingByteArray": [["byte[]", "int len"], ["byte[]", "int start", "int len"]], "writeBufferToFile": [["void", "String path", "byte[] buffer"]], "cloneByteBufferList": [["List<ByteBuffer>", "List<ByteBuffer> source"]], "cloneByteBuffer": [["ByteBuffer", "ByteBuffer buf"]], "newByteArrayFromByteBuffer": [["byte[]", "ByteBuffer buf"]], "putIntByteBuffer": [["void", "ByteBuffer buf", "int b"]], "generateNewByteBufferFromThriftRPCResults": [["ByteBuffer", "ByteBuffer data"]]}, "className": "BufferUtils", "renamed": ["ByteBuffer", "function", "(", "int", "arg0", ",", "int", "arg1", ")", "{", "ByteBuffer", "loc0", "=", "ByteBuffer", ".", "allocate", "(", "arg1", "*", "4", ")", ";", "for", "(", "int", "loc1", "=", "0", ";", "loc1", "<", "arg1", ";", "loc1", "++", ")", "{", "loc0", ".", "putInt", "(", "arg0", "+", "loc1", ")", ";", "}", "loc0", ".", "flip", "(", ")", ";", "return", "loc0", ";", "}"], "nl": "Gets a  {@link ByteBuffer} containing an increasing sequence of integers starting at the givenvalue.", "nlToks": ["Gets", "a", "-LCB-", "@link", "ByteBuffer", "-RCB-", "containing", "an", "increasing", "sequence", "of", "integers", "starting", "at", "the", "givenvalue", "."], "path": "poemlin/alluxio/tree/master/core/common/src/main/java/alluxio/util/io/BufferUtils.java", "idx": 2190}
{"memberVariables": {"volume": "int", "occupancy": "double", "measurement_date": "Timestamp", "lane_id": "int", "id": "long", "speed": "double", "quality": "int"}, "code": ["int", "function", "(", ")", "{", "return", "lane_id", ";", "}"], "memberFunctions": {"getOccupancy": [["double"]], "setOccupancy": [["void", "double occupancy"]], "getMeasurement_date": [["Timestamp"]], "getId": [["long"]], "setVolume": [["void", "int volume"]], "setLane_id": [["void", "int lane_id"]], "setSpeed": [["void", "double speed"]], "getVolume": [["int"]], "setQuality": [["void", "int quality"]], "getQuality": [["int"]], "getSpeed": [["double"]], "setMeasurement_date": [["void", "Timestamp measurement_date"]], "setId": [["void", "long id"]], "toString": [["String"]]}, "className": "LaneData", "renamed": ["int", "function", "(", ")", "{", "return", "lane_id", ";", "}"], "nl": "Gets the lane_id.", "nlToks": ["Gets", "the", "lane_id", "."], "path": "pfontana3w2/DataScienceProject/tree/master/TrafficVolumePrediction_0.5/src/gov/nist/dataeval/db/bean/LaneData.java", "idx": 2191}
{"memberVariables": {"logger=LoggerFactory.getLogger(StringUtils.class)": "Logger", "KVP_PATTERN=Pattern.compile(\"([_.a-zA-Z0-9][-_.a-zA-Z0-9]*)[=](.*)\")": "Pattern", "INT_PATTERN=Pattern.compile(\"^\\\\d+$\")": "Pattern", "EMPTY_STRING_ARRAY=new String[0]": "String[]"}, "code": ["boolean", "function", "(", "String", "s", ")", "{", "if", "(", "s", ".", "length", "(", ")", "==", "0", "||", "!", "Character", ".", "isJavaIdentifierStart", "(", "s", ".", "charAt", "(", "0", ")", ")", ")", "{", "return", "false", ";", "}", "for", "(", "int", "i", "=", "1", ";", "i", "<", "s", ".", "length", "(", ")", ";", "i", "++", ")", "{", "if", "(", "!", "Character", ".", "isJavaIdentifierPart", "(", "s", ".", "charAt", "(", "i", ")", ")", ")", "{", "return", "false", ";", "}", "}", "return", "true", ";", "}"], "memberFunctions": {"getQueryStringValue": [["String", "String qs", "String key"]], "isEmpty": [["boolean", "String str"]], "isBlank": [["boolean", "String str"]], "isContains": [["boolean", "String values", "String value"], ["boolean", "String[] values", "String value"]], "translat": [["String", "String src", "String from", "String to"]], "parseQueryString": [["Map<String,String>", "String qs"]], "isInteger": [["boolean", "String str"]], "getServiceKey": [["String", "Map<String,String> ps"]], "split": [["String[]", "String str", "char ch"]], "isNumeric": [["boolean", "String str"]], "parseKeyValuePair": [["Map<String,String>", "String str", "String itemSeparator"]], "isNotEmpty": [["boolean", "String str"]], "toString": [["String", "Throwable e"], ["String", "String msg", "Throwable e"]], "toQueryString": [["String", "Map<String,String> ps"]], "join": [["String", "String[] array"], ["String", "String[] array", "char split"], ["String", "String[] array", "String split"], ["String", "Collection<String> coll", "String split"]], "isEquals": [["boolean", "String s1", "String s2"]], "parseInteger": [["int", "String str"]], "camelToSplitName": [["String", "String camelName", "String split"]], "toArgumentString": [["String", "Object[] args"]]}, "className": "StringUtils", "renamed": ["boolean", "function", "(", "String", "arg0", ")", "{", "if", "(", "arg0", ".", "length", "(", ")", "==", "0", "||", "!", "Character", ".", "isJavaIdentifierStart", "(", "arg0", ".", "charAt", "(", "0", ")", ")", ")", "{", "return", "false", ";", "}", "for", "(", "int", "loc0", "=", "1", ";", "loc0", "<", "arg0", ".", "length", "(", ")", ";", "loc0", "++", ")", "{", "if", "(", "!", "Character", ".", "isJavaIdentifierPart", "(", "arg0", ".", "charAt", "(", "loc0", ")", ")", ")", "{", "return", "false", ";", "}", "}", "return", "true", ";", "}"], "nl": "Returns true if s is a legal Java identifier. more info.", "nlToks": ["Returns", "true", "if", "s", "is", "a", "legal", "Java", "identifier", ".", "more", "info", "."], "path": "acupple/dubbo/tree/master/dubbo-common/src/main/java/com/alibaba/dubbo/common/utils/StringUtils.java", "idx": 2192}
{"memberVariables": {"URL_SAVED=\"configuration.save.url\"": "String", "FILE_SAVED=\"configuration.save.file\"": "String", "URL_LOADED=\"configuration.load.url\"": "String", "config=getFactory().getConfigurationHandler()": "ConfigurationHandler", "FILE_LOADED=\"configuration.load.file\"": "String"}, "code": ["boolean", "function", "(", ")", "{", "return", "config", ".", "loadDefault", "(", ")", ";", "}"], "memberFunctions": {"save": [["boolean"], ["boolean", "boolean force"]], "setInteger": [["void", "ConfigurationKey key", "int newValue"]], "getDouble": [["double", "ConfigurationKey key", "double defaultValue"], ["double", "ConfigurationKey key"]], "getInteger": [["int", "ConfigurationKey key"], ["int", "ConfigurationKey key", "int defaultValue"]], "getString": [["String", "ConfigurationKey key"], ["String", "ConfigurationKey key", "String defaultValue"]], "removeListener": [["void", "PropertyChangeListener pcl"], ["void", "ConfigurationKey key", "PropertyChangeListener pcl"]], "getFactory": [["IConfigurationFactory"]], "setDouble": [["void", "ConfigurationKey key", "double newValue"]], "makeKey": [["ConfigurationKey", "String k1"], ["ConfigurationKey", "ConfigurationKey ck", "String k1"], ["ConfigurationKey", "String k1", "String k2"], ["ConfigurationKey", "String k1", "String k2", "String k3"], ["ConfigurationKey", "String k1", "String k2", "String k3", "String k4"], ["ConfigurationKey", "String k1", "String k2", "String k3", "String k4", "String k5"]], "setString": [["void", "ConfigurationKey key", "String newValue"]], "removeKey": [["void", "ConfigurationKey key"]], "getConfigurationHandler": [["ConfigurationHandler"]], "getBoolean": [["boolean", "ConfigurationKey key"], ["boolean", "ConfigurationKey key", "boolean defaultValue"]], "setBoolean": [["void", "ConfigurationKey key", "boolean newValue"]], "addListener": [["void", "PropertyChangeListener pcl"], ["void", "ConfigurationKey key", "PropertyChangeListener pcl"]]}, "className": "Configuration", "renamed": ["boolean", "function", "(", ")", "{", "return", "config", ".", "loadDefault", "(", ")", ";", "}"], "nl": "Load the configuration from the default location. The configuration will be automatically loaded from the default location the first time a value is queried or modified, if it had not been previously loaded.  Only the first load request will be honored, so if the configuration is to be loaded from a non-default location, load(name) must be used prior to any other call.  The configuration can be loaded only one time. Implementations must ignore load requests once a load is already successful, and must return false for each of those ignored requests.", "nlToks": ["Load", "the", "configuration", "from", "the", "default", "location", ".", "The", "configuration", "will", "be", "automatically", "loaded", "from", "the", "default", "location", "the", "first", "time", "a", "value", "is", "queried", "or", "modified", ",", "if", "it", "had", "not", "been", "previously", "loaded", ".", "Only", "the", "first", "load", "request", "will", "be", "honored", ",", "so", "if", "the", "configuration", "is", "to", "be", "loaded", "from", "a", "non-default", "location", ",", "load", "-LRB-", "name", "-RRB-", "must", "be", "used", "prior", "to", "any", "other", "call", ".", "The", "configuration", "can", "be", "loaded", "only", "one", "time", ".", "Implementations", "must", "ignore", "load", "requests", "once", "a", "load", "is", "already", "successful", ",", "and", "must", "return", "false", "for", "each", "of", "those", "ignored", "requests", "."], "path": "pichiliani/CoArgoUML/tree/master/v0.24/fonte/src/argouml-app/src/org/argouml/configuration/Configuration.java", "idx": 2193}
{"memberVariables": {"exactUtility": "double", "id": "int", "itemsets=new ArrayList<List<Integer>>()": "List<List<Integer>>", "profits=new ArrayList<List<Double>>()": "List<List<Double>>"}, "code": ["void", "function", "(", "List", "<", "Double", ">", "utilityValues", ")", "{", "profits", ".", "add", "(", "utilityValues", ")", ";", "}"], "memberFunctions": {"getUtilities": [["List<List<Double>>"]], "print": [["void"]], "size": [["int"]], "get": [["List<Integer>", "int index"]], "toString": [["String"]], "getId": [["int"]], "getItemsets": [["List<List<Integer>>"]], "addItemset": [["void", "List<Integer> itemset"]]}, "className": "SequenceWithUtility", "renamed": ["void", "function", "(", "List", "<", "Double", ">", "arg0", ")", "{", "profits", ".", "add", "(", "arg0", ")", ";", "}"], "nl": "Add the utility values of an itemset to this sequence", "nlToks": ["Add", "the", "utility", "values", "of", "an", "itemset", "to", "this", "sequence"], "path": "prateek96/Data_Mining_Assignments/tree/master/Assignment_1/Assignment-1.11/husrm/SequenceWithUtility.java", "idx": 2194}
{"memberVariables": {"inTransaction": "ThreadLocal<Boolean>", "transactionOutputMap": "TransactionalHashMap<StoredTransactionOutPoint,StoredTransactionOutput>", "mapValues": "TransactionalHashMap<UniqueKeyType,ValueType>", "wasUndoable": "boolean", "verifiedChainHead": "StoredBlock", "tempMap": "ThreadLocal<HashMap<KeyType,ValueType>>", "index": "long", "mapKeys": "HashMap<MultiKeyType,Set<UniqueKeyType>>", "chainHead": "StoredBlock", "blockMap": "TransactionalHashMap<Sha256Hash,StoredBlockAndWasUndoableFlag>", "tempSetRemoved": "ThreadLocal<HashSet<KeyType>>", "block": "StoredBlock", "fullBlockMap": "TransactionalMultiKeyHashMap<Sha256Hash,Integer,StoredUndoableBlock>", "serialVersionUID=-4064230006297064377L": "long", "map": "HashMap<KeyType,ValueType>", "hash": "Sha256Hash", "fullStoreDepth": "int"}, "code": ["long", "function", "(", ")", "{", "return", "index", ";", "}"], "memberFunctions": {"getHash": [["Sha256Hash"]], "getTransactionOutput": [["StoredTransactionOutput", "Sha256Hash hash", "long index"]], "removeUnspentTransactionOutput": [["void", "StoredTransactionOutput out"]], "put": [["void", "KeyType key", "ValueType value"], ["void", "UniqueKeyType uniqueKey", "MultiKeyType multiKey", "ValueType value"], ["void", "StoredBlock block"], ["void", "StoredBlock storedBlock", "StoredUndoableBlock undoableBlock"]], "remove": [["ValueType", "KeyType key"]], "hasUnspentOutputs": [["boolean", "Sha256Hash hash", "int numOutputs"]], "BeginTransaction": [["void"]], "getVerifiedChainHead": [["StoredBlock"]], "CommitTransaction": [["void"]], "hashCode": [["int"]], "get": [["ValueType", "KeyType key"], ["ValueType", "UniqueKeyType key"], ["StoredBlock", "Sha256Hash hash"]], "abortDatabaseBatchWrite": [["void"], ["void"]], "removeByUniqueKey": [["ValueType", "UniqueKeyType key"]], "addUnspentTransactionOutput": [["void", "StoredTransactionOutput out"]], "beginDatabaseBatchWrite": [["void"], ["void"]], "close": [["void"]], "setVerifiedChainHead": [["void", "StoredBlock chainHead"]], "commitDatabaseBatchWrite": [["void"], ["void"]], "getUndoBlock": [["StoredUndoableBlock", "Sha256Hash hash"]], "getChainHead": [["StoredBlock"]], "setChainHead": [["void", "StoredBlock chainHead"]], "equals": [["boolean", "Object o"]], "toString": [["String"]], "AbortTransaction": [["void"]], "removeByMultiKey": [["void", "MultiKeyType key"]], "getOnceUndoableStoredBlock": [["StoredBlock", "Sha256Hash hash"]]}, "className": "StoredTransactionOutPoint", "renamed": ["long", "function", "(", ")", "{", "return", "index", ";", "}"], "nl": "The index of the output in transaction to which we refer", "nlToks": ["The", "index", "of", "the", "output", "in", "transaction", "to", "which", "we", "refer"], "path": "1000000000001/bitcoinj/tree/master/core/src/main/java/org/bitcoinj/store/MemoryFullPrunedBlockStore.java", "idx": 2195}
{"memberVariables": {"mCachePartiallyReadBlock": "boolean", "mReadType": "ReadType", "mSeekBufferSizeBytes": "long", "mLocationPolicy": "FileWriteLocationPolicy"}, "code": ["InStreamOptions", "function", "(", "long", "bufferSizeBytes", ")", "{", "mSeekBufferSizeBytes", "=", "bufferSizeBytes", ";", "return", "this", ";", "}"], "memberFunctions": {"getLocationPolicy": [["FileWriteLocationPolicy"]], "defaults": [["InStreamOptions"]], "isCachePartiallyReadBlock": [["boolean"]], "hashCode": [["int"]], "equals": [["boolean", "Object o"]], "getSeekBufferSizeBytes": [["long"]], "toString": [["String"]], "setLocationPolicy": [["InStreamOptions", "FileWriteLocationPolicy policy"]], "getAlluxioStorageType": [["AlluxioStorageType"]], "setReadType": [["InStreamOptions", "ReadType readType"]], "setCachePartiallyReadBlock": [["InStreamOptions", "boolean cachePartiallyReadBlock"]]}, "className": "InStreamOptions", "renamed": ["InStreamOptions", "function", "(", "long", "arg0", ")", "{", "mSeekBufferSizeBytes", "=", "arg0", ";", "return", "this", ";", "}"], "nl": "Sets  {@link #mSeekBufferSizeBytes}.", "nlToks": ["Sets", "-LCB-", "@link", "#mSeekBufferSizeBytes", "-RCB-", "."], "path": "poemlin/alluxio/tree/master/core/client/src/main/java/alluxio/client/file/options/InStreamOptions.java", "idx": 2196}
{"memberVariables": {"pattern": "String"}, "code": ["String", "function", "(", ")", "{", "return", "formatUTC", "(", "new", "Date", "(", ")", ",", "DateTimeFormat", ".", "SQL", ",", "false", ")", ";", "}"], "memberFunctions": {"formatUTCtoSqlLocal": [["String", "Date date"]], "formatUTC": [["String", "Date date", "String format", "boolean toLocal"], ["String", "Date date", "DateTimeFormat format", "boolean toLocal"]], "getCurrentLocal": [["String", "DateTimeFormat format"]], "getPattern": [["String"]], "parseSqlUtc": [["Date", "String date"]], "parseUTC": [["Date", "String date", "DateTimeFormat format"]], "formatUTCtoSqlUTC": [["String", "Date date"]]}, "className": "DateTime", "renamed": ["String", "function", "(", ")", "{", "return", "formatUTC", "(", "new", "Date", "(", ")", ",", "DateTimeFormat", ".", "SQL", ",", "false", ")", ";", "}"], "nl": "Get current UTC dateTime in SQL format.", "nlToks": ["Get", "current", "UTC", "dateTime", "in", "SQL", "format", "."], "path": "phramusca/JaMuz/tree/master/src/jamuz/utils/DateTime.java", "idx": 2198}
{"memberVariables": {"counter": "Map<T,Integer>"}, "code": ["void", "function", "(", "T", "key", ")", "{", "Integer", "value", "=", "counter", ".", "get", "(", "key", ")", ";", "if", "(", "value", "==", "null", ")", "{", "counter", ".", "put", "(", "key", ",", "1", ")", ";", "}", "else", "{", "counter", ".", "put", "(", "key", ",", "value", "+", "1", ")", ";", "}", "}"], "memberFunctions": {"probabilityOf": [["Double", "T key"]], "toString": [["String"]], "getStates": [["Set<T>"]], "getCount": [["Integer", "T key"]]}, "className": "FrequencyCounter", "renamed": ["void", "function", "(", "T", "arg0", ")", "{", "Integer", "loc0", "=", "counter", ".", "get", "(", "arg0", ")", ";", "if", "(", "loc0", "==", "null", ")", "{", "counter", ".", "put", "(", "arg0", ",", "1", ")", ";", "}", "else", "{", "counter", ".", "put", "(", "arg0", ",", "loc0", "+", "1", ")", ";", "}", "}"], "nl": "Increments the count to which the specified key is mapped in this frequency counter, or puts 1 if the map contains no mapping for this key.", "nlToks": ["Increments", "the", "count", "to", "which", "the", "specified", "key", "is", "mapped", "in", "this", "frequency", "counter", ",", "or", "puts", "1", "if", "the", "map", "contains", "no", "mapping", "for", "this", "key", "."], "path": "peterplupo/ia201102/tree/master/trabalho1/aima-core/src/main/java/aima/core/util/FrequencyCounter.java", "idx": 2199}
{"memberVariables": {"totalElapsedMinutes": "Long", "testResultLst": "List<TestResultDTO>", "startTime": "String", "endTime": "String", "batchId": "Long", "batchStatus": "String", "totalElapsedSeconds": "Long"}, "code": ["void", "function", "(", "List", "<", "TestResultDTO", ">", "testResultLst", ")", "{", "this", ".", "testResultLst", "=", "testResultLst", ";", "}"], "memberFunctions": {"setBatchStatus": [["void", "String batchStatus"]], "getTotalElapsedSeconds": [["Long"]], "setBatchId": [["void", "Long batchId"]], "setTotalElapsedMinutes": [["void", "Long totalElapsedMinutes"]], "getEndTime": [["String"]], "getTotalElapsedMinutes": [["Long"]], "setEndTime": [["void", "String endTime"]], "getBatchId": [["Long"]], "setTotalElapsedSeconds": [["void", "Long totalElapsedSeconds"]], "toString": [["String"]], "getStartTime": [["String"]], "setStartTime": [["void", "String startTime"]], "getTestResultLst": [["List<TestResultDTO>"]], "getBatchStatus": [["String"]]}, "className": "TestResultsDTO", "renamed": ["void", "function", "(", "List", "<", "TestResultDTO", ">", "arg0", ")", "{", "this", ".", "testResultLst", "=", "arg0", ";", "}"], "nl": "Sets the test result lst.", "nlToks": ["Sets", "the", "test", "result", "lst", "."], "path": "pkesireddy/portico_fletcher/tree/master/FetcherTesterService/src/main/java/org/ithaka/cm/fetchertester/model/TestResultsDTO.java", "idx": 2204}
{"memberVariables": {"javaPrimitiveWrap=true": "boolean"}, "code": ["Scriptable", "function", "(", "Context", "cx", ",", "Scriptable", "scope", ",", "Object", "javaObject", ",", "Class", "<", "?", ">", "staticType", ")", "{", "Scriptable", "wrap", ";", "wrap", "=", "new", "NativeJavaObject", "(", "scope", ",", "javaObject", ",", "staticType", ")", ";", "return", "wrap", ";", "}"], "memberFunctions": {"setJavaPrimitiveWrap": [["void", "boolean value"]], "isJavaPrimitiveWrap": [["boolean"]], "wrap": [["Object", "Context cx", "Scriptable scope", "Object obj", "Class<?> staticType"]], "wrapNewObject": [["Scriptable", "Context cx", "Scriptable scope", "Object obj"]]}, "className": "WrapFactory", "renamed": ["Scriptable", "function", "(", "Context", "arg0", ",", "Scriptable", "arg1", ",", "Object", "arg2", ",", "Class", "<", "?", ">", "arg3", ")", "{", "Scriptable", "loc0", ";", "loc0", "=", "new", "NativeJavaObject", "(", "arg1", ",", "arg2", ",", "arg3", ")", ";", "return", "loc0", ";", "}"], "nl": "Wrap Java object as Scriptable instance to allow full access to its methods and fields from JavaScript.  {@link #wrap(Context,Scriptable,Object,Class)} and{@link #wrapNewObject(Context,Scriptable,Object)} call this methodwhen they can not convert javaObject to JavaScript primitive value or JavaScript array.  Subclasses can override the method to provide custom wrappers for Java objects.", "nlToks": ["Wrap", "Java", "object", "as", "Scriptable", "instance", "to", "allow", "full", "access", "to", "its", "methods", "and", "fields", "from", "JavaScript", ".", "-LCB-", "@link", "#wrap", "-LRB-", "Context", ",", "Scriptable", ",", "Object", ",", "Class", "-RRB-", "-RCB-", "and", "-LCB-", "@link", "#wrapNewObject", "-LRB-", "Context", ",", "Scriptable", ",", "Object", "-RRB-", "-RCB-", "call", "this", "methodwhen", "they", "can", "not", "convert", "javaObject", "to", "JavaScript", "primitive", "value", "or", "JavaScript", "array", ".", "Subclasses", "can", "override", "the", "method", "to", "provide", "custom", "wrappers", "for", "Java", "objects", "."], "path": "adamfisk/littleshoot-client/tree/master/bin/rhino1_7R2/src/org/mozilla/javascript/WrapFactory.java", "idx": 2205}
{"memberVariables": {"mDirIndex": "int", "ANY_TIER=\"\"": "String", "mTierAlias": "String", "ANY_DIR=-1": "int"}, "code": ["String", "function", "(", ")", "{", "return", "mTierAlias", ";", "}"], "memberFunctions": {"hashCode": [["int"]], "equals": [["boolean", "Object o"]], "anyDirInTier": [["BlockStoreLocation", "String tierAlias"]], "toString": [["String"]], "anyTier": [["BlockStoreLocation"]], "dir": [["int"]], "belongsTo": [["boolean", "BlockStoreLocation location"]]}, "className": "BlockStoreLocation", "renamed": ["String", "function", "(", ")", "{", "return", "mTierAlias", ";", "}"], "nl": "Gets the storage tier alias of the location.", "nlToks": ["Gets", "the", "storage", "tier", "alias", "of", "the", "location", "."], "path": "poemlin/alluxio/tree/master/core/server/src/main/java/alluxio/worker/block/BlockStoreLocation.java", "idx": 2206}
{"memberVariables": {"bestValueToMe": "BigInteger", "refundTransactionUnlockTimeSecs": "long", "connectedHandler=null": "PaymentChannelServer", "contract": "Transaction", "clientOutput": "TransactionOutput", "myKey": "ECKey", "bestValueSignature": "byte[]", "state=null": "PaymentChannelServerState"}, "code": ["PaymentChannelServerState", "function", "(", "Wallet", "wallet", ",", "TransactionBroadcaster", "broadcaster", ")", "{", "if", "(", "state", "==", "null", ")", "state", "=", "new", "PaymentChannelServerState", "(", "this", ",", "wallet", ",", "broadcaster", ")", ";", "checkArgument", "(", "wallet", "==", "state", ".", "wallet", ")", ";", "return", "state", ";", "}"], "memberFunctions": {"setConnectedHandler": [["PaymentChannelServer", "PaymentChannelServer connectedHandler", "boolean override"]], "closeConnectedHandler": [["void"]], "toString": [["String"]], "updateValueToMe": [["void", "BigInteger newValue", "byte[] newSignature"]], "clearConnectedHandler": [["void"]]}, "className": "StoredServerChannel", "renamed": ["PaymentChannelServerState", "function", "(", "Wallet", "arg0", ",", "TransactionBroadcaster", "arg1", ")", "{", "if", "(", "state", "==", "null", ")", "state", "=", "new", "PaymentChannelServerState", "(", "this", ",", "arg0", ",", "arg1", ")", ";", "checkArgument", "(", "arg0", "==", "state", ".", "arg0", ")", ";", "return", "state", ";", "}"], "nl": "Gets the canonical  {@link PaymentChannelServerState} object for this channel, either by returning an existing oneor by creating a new one.", "nlToks": ["Gets", "the", "canonical", "-LCB-", "@link", "PaymentChannelServerState", "-RCB-", "object", "for", "this", "channel", ",", "either", "by", "returning", "an", "existing", "oneor", "by", "creating", "a", "new", "one", "."], "path": "plncoin/plncoin-and/tree/master/plncoinj/core/src/main/java/com/google/bitcoin/protocols/channels/StoredServerChannel.java", "idx": 2207}
{"memberVariables": {"schemaCollection": "SchemaCollection", "prefixes": "Set<String>", "fallbackNamespacePrefixMap": "Map<String,String>", "nsCounter": "int", "attributes": "StringBuilder"}, "code": ["String", "function", "(", "XmlSchemaAttribute", "attribute", ",", "boolean", "qualified", ")", "{", "if", "(", "qualified", ")", "{", "String", "prefix", "=", "getPrefix", "(", "attribute", ".", "getQName", "(", ")", ".", "getNamespaceURI", "(", ")", ")", ";", "collect", "(", "prefix", ",", "attribute", ".", "getQName", "(", ")", ".", "getNamespaceURI", "(", ")", ")", ";", "return", "prefix", "+", "\":\"", "+", "attribute", ".", "getName", "(", ")", ";", "}", "return", "attribute", ".", "getName", "(", ")", ";", "}"], "memberFunctions": {"getAttributes": [["String"]], "getPrefix": [["String", "String namespaceURI"]], "xmlElementString": [["String", "QName elementQName", "boolean qualified"], ["String", "QName name"]], "collect": [["void", "String prefix", "String uri"]]}, "className": "NamespacePrefixAccumulator", "renamed": ["String", "function", "(", "XmlSchemaAttribute", "arg0", ",", "boolean", "arg1", ")", "{", "if", "(", "arg1", ")", "{", "String", "loc0", "=", "getPrefix", "(", "arg0", ".", "getQName", "(", ")", ".", "getNamespaceURI", "(", ")", ")", ";", "collect", "(", "loc0", ",", "arg0", ".", "getQName", "(", ")", ".", "getNamespaceURI", "(", ")", ")", ";", "return", "loc0", "+", "\"srini_string\"", "+", "arg0", ".", "getName", "(", ")", ";", "}", "return", "arg0", ".", "getName", "(", ")", ";", "}"], "nl": "Obtain a suitable name for use in Javascript for an attribute. This function is purely a tribute to the awful modularity of XmlSchema.", "nlToks": ["Obtain", "a", "suitable", "name", "for", "use", "in", "Javascript", "for", "an", "attribute", ".", "This", "function", "is", "purely", "a", "tribute", "to", "the", "awful", "modularity", "of", "XmlSchema", "."], "path": "primesign/cxf/tree/master/rt/javascript/javascript-rt/src/main/java/org/apache/cxf/javascript/NamespacePrefixAccumulator.java", "idx": 2208}
{"memberVariables": {"tx": "Transaction", "lhs": "Plan", "schema=new Schema()": "Schema", "rhs": "Plan"}, "code": ["Scan", "function", "(", ")", "{", "TempTable", "tt", "=", "copyRecordsFrom", "(", "rhs", ")", ";", "TableInfo", "ti", "=", "tt", ".", "getTableInfo", "(", ")", ";", "Scan", "leftscan", "=", "lhs", ".", "open", "(", ")", ";", "return", "new", "MultiBufferProductScan", "(", "leftscan", ",", "ti", ",", "tx", ")", ";", "}"], "memberFunctions": {"schema": [["Schema"]], "copyRecordsFrom": [["TempTable", "Plan p"]], "blocksAccessed": [["int"]], "distinctValues": [["int", "String fldname"]], "recordsOutput": [["int"]]}, "className": "MultiBufferProductPlan", "renamed": ["Scan", "function", "(", ")", "{", "TempTable", "loc0", "=", "copyRecordsFrom", "(", "rhs", ")", ";", "TableInfo", "loc1", "=", "loc0", ".", "getTableInfo", "(", ")", ";", "Scan", "loc2", "=", "lhs", ".", "open", "(", ")", ";", "return", "new", "MultiBufferProductScan", "(", "loc2", ",", "loc1", ",", "tx", ")", ";", "}"], "nl": "A scan for this query is created and returned, as follows. First, the method materializes its RHS query. It then determines the optimal chunk size, based on the size of the materialized file and the number of available buffers. It creates a chunk plan for each chunk, saving them in a list. Finally, it creates a multiscan for this list of plans, and returns that scan.", "nlToks": ["A", "scan", "for", "this", "query", "is", "created", "and", "returned", ",", "as", "follows", ".", "First", ",", "the", "method", "materializes", "its", "RHS", "query", ".", "It", "then", "determines", "the", "optimal", "chunk", "size", ",", "based", "on", "the", "size", "of", "the", "materialized", "file", "and", "the", "number", "of", "available", "buffers", ".", "It", "creates", "a", "chunk", "plan", "for", "each", "chunk", ",", "saving", "them", "in", "a", "list", ".", "Finally", ",", "it", "creates", "a", "multiscan", "for", "this", "list", "of", "plans", ",", "and", "returns", "that", "scan", "."], "path": "prerit2803/DBMSProject2/tree/master/simpledb/multibuffer/MultiBufferProductPlan.java", "idx": 2210}
{"memberVariables": {"_utf8=\"UTF-8\"": "String", "_highPriority": "boolean", "_messageBody": "byte[]", "_encoding=\"UTF-16LE\"": "String", "_correlationId": "byte[]", "_label": "String"}, "code": ["void", "function", "(", "boolean", "value", ")", "{", "_highPriority", "=", "value", ";", "}"], "memberFunctions": {"getCorrelationId": [["byte[]"]], "getBodyAsString": [["String"]], "getLabel": [["String"]], "getCorrelationIdAsString": [["String"]], "setBodyAsString": [["void", "String value"]], "getBody": [["byte[]"]], "setCorrelationId": [["void", "byte[] value"]], "setLabel": [["void", "String value"]], "getHighPriority": [["boolean"]], "setBody": [["void", "byte[] value"]], "setCorrelationIdAsString": [["void", "String value"]]}, "className": "Message", "renamed": ["void", "function", "(", "boolean", "arg0", ")", "{", "_highPriority", "=", "arg0", ";", "}"], "nl": "Sets whether the message should be trated as high priority or not.", "nlToks": ["Sets", "whether", "the", "message", "should", "be", "trated", "as", "high", "priority", "or", "not", "."], "path": "harsha89/wso2-axis2-transports/tree/master/modules/msmq/src/main/java/org/apache/axis2/transport/msmq/util/Message.java", "idx": 2211}
{"memberVariables": {"controllerServerSession": "ServerSession", "LOGGER=LoggerFactory.getLogger(AbstractEventController.class)": "Logger", "persistentStore": "PersistentStore", "eventAdmin": "EventAdmin", "userSessionMap=Collections.synchronizedMap(new HashMap<String,ServerSession>(41))": "Map<String,ServerSession>", "EVENT_TOPIC_CANCEL=\"download/action/cancel\"": "java.lang.String", "executorService=Executors.newCachedThreadPool()": "ExecutorService"}, "code": ["ServerSession", "function", "(", "String", "userId", ")", "{", "return", "userSessionMap", ".", "get", "(", "userId", ")", ";", "}"], "memberFunctions": {"queuePersistedMessages": [["void", "final ServerSession serverSession", "List<Map<String,Object>> messages", "final String topic"]], "getControllerRootTopic": [["String"]], "getNotificationsForUser": [["List<Map<String,String>>", "String userId"]], "deregisterUserSession": [["void", "ServerSession serverSession", "ServerMessage serverMessage"]], "registerUserSession": [["void", "final ServerSession serverSession", "ServerMessage serverMessage"]], "adminCancelDownload": [["void", "String userId", "String downloadIdentifier"]], "getUserId": [["String", "ServerSession serverSession", "Subject subject"]]}, "className": "AbstractEventController", "renamed": ["ServerSession", "function", "(", "String", "arg0", ")", "{", "return", "userSessionMap", ".", "get", "(", "arg0", ")", ";", "}"], "nl": "Obtains the  {@link ServerSession} associated with a given user id.", "nlToks": ["Obtains", "the", "-LCB-", "@link", "ServerSession", "-RCB-", "associated", "with", "a", "given", "user", "id", "."], "path": "pklinef/ddf-ui/tree/master/search-ui/search-endpoint/src/main/java/org/codice/ddf/ui/searchui/query/controller/AbstractEventController.java", "idx": 2212}
{"memberVariables": {"secretKey": "String", "applicationDescription": "String", "preAuthorizedToken": "AccessToken", "callbackURI": "String", "loginName": "String", "applicationURI": "String", "logoUri": "String", "consumerKey": "String", "applicationName": "String"}, "code": ["String", "function", "(", ")", "{", "return", "applicationDescription", ";", "}"], "memberFunctions": {"getSecretKey": [["String"]], "getApplicationName": [["String"]], "setApplicationDescription": [["void", "String applicationDescription"]], "setApplicationName": [["void", "String applicationName"]], "setCallbackURI": [["void", "String callbackURI"]], "setApplicationURI": [["void", "String applicationURI"]], "setPreAuthorizedToken": [["void", "AccessToken preAuthorizedToken"]], "getApplicationURI": [["String"]], "getLoginName": [["String"]], "setLoginName": [["void", "String name"]], "hashCode": [["int"]], "setLogoUri": [["void", "String logoPath"]], "equals": [["boolean", "Object o"]], "getCallbackURI": [["String"]], "getConsumerKey": [["String"]], "getPreAuthorizedToken": [["AccessToken"]], "getLogoUri": [["String"]]}, "className": "Client", "renamed": ["String", "function", "(", ")", "{", "return", "applicationDescription", ";", "}"], "nl": "Gets the description of the third-party application.", "nlToks": ["Gets", "the", "description", "of", "the", "third-party", "application", "."], "path": "primesign/cxf/tree/master/rt/rs/security/oauth-parent/oauth/src/main/java/org/apache/cxf/rs/security/oauth/data/Client.java", "idx": 2215}
{"memberVariables": {"locationPositions": "Hashtable<String,Point2D>", "links": "LabeledGraph<String,Double>"}, "code": ["List", "<", "String", ">", "function", "(", ")", "{", "return", "links", ".", "getVertexLabels", "(", ")", ";", "}"], "memberFunctions": {"getDistance": [["Double", "String fromLocation", "String toLocation"]], "clear": [["void"]], "randomlyGenerateDestination": [["String"]], "clearLinks": [["void"]], "setPosition": [["void", "String loc", "double x", "double y"]], "addBidirectionalLink": [["void", "String fromLocation", "String toLocation", "Double distance"]], "removeUnidirectionalLink": [["void", "String fromLocation", "String toLocation"]], "getPosition": [["Point2D", "String loc"]], "removeBidirectionalLink": [["void", "String fromLocation", "String toLocation"]], "isLocation": [["boolean", "String str"]], "addUnidirectionalLink": [["void", "String fromLocation", "String toLocation", "Double distance"]], "getLocationsLinkedTo": [["List<String>", "String fromLocation"]], "setDistAndDirToRefLocation": [["void", "String loc", "double dist", "int dir"]]}, "className": "ExtendableMap", "renamed": ["List", "<", "String", ">", "function", "(", ")", "{", "return", "links", ".", "getVertexLabels", "(", ")", ";", "}"], "nl": "Returns a list of all locations.", "nlToks": ["Returns", "a", "list", "of", "all", "locations", "."], "path": "peterplupo/ia201102/tree/master/trabalho1/aima-core/src/main/java/aima/core/environment/map/ExtendableMap.java", "idx": 2217}
{"memberVariables": {"s": "Scan", "moregroups": "boolean", "groupfields": "Collection<String>", "aggfns": "Collection<AggregationFn>", "groupval": "GroupValue"}, "code": ["Constant", "function", "(", "String", "fldname", ")", "{", "if", "(", "groupfields", ".", "contains", "(", "fldname", ")", ")", "return", "groupval", ".", "getVal", "(", "fldname", ")", ";", "for", "(", "AggregationFn", "fn", ":", "aggfns", ")", "if", "(", "fn", ".", "fieldName", "(", ")", ".", "equals", "(", "fldname", ")", ")", "return", "fn", ".", "value", "(", ")", ";", "throw", "new", "RuntimeException", "(", "\"field \"", "+", "fldname", "+", "\" not found.\"", ")", ";", "}"], "memberFunctions": {"next": [["boolean"]], "getInt": [["int", "String fldname"]], "beforeFirst": [["void"]], "getString": [["String", "String fldname"]], "close": [["void"]], "hasField": [["boolean", "String fldname"]]}, "className": "GroupByScan", "renamed": ["Constant", "function", "(", "String", "arg0", ")", "{", "if", "(", "groupfields", ".", "contains", "(", "arg0", ")", ")", "return", "groupval", ".", "getVal", "(", "arg0", ")", ";", "for", "(", "AggregationFn", "loc0", ":", "aggfns", ")", "if", "(", "loc0", ".", "fieldName", "(", ")", ".", "equals", "(", "arg0", ")", ")", "return", "loc0", ".", "value", "(", ")", ";", "throw", "new", "RuntimeException", "(", "\"srini_string\"", "+", "arg0", "+", "\"srini_string\"", ")", ";", "}"], "nl": "Gets the Constant value of the specified field. If the field is a group field, then its value can be obtained from the saved group value. Otherwise, the value is obtained from the appropriate aggregation function.", "nlToks": ["Gets", "the", "Constant", "value", "of", "the", "specified", "field", ".", "If", "the", "field", "is", "a", "group", "field", ",", "then", "its", "value", "can", "be", "obtained", "from", "the", "saved", "group", "value", ".", "Otherwise", ",", "the", "value", "is", "obtained", "from", "the", "appropriate", "aggregation", "function", "."], "path": "prerit2803/DBMSProject2/tree/master/simpledb/materialize/GroupByScan.java", "idx": 2218}
{"memberVariables": {"testData": "String", "method": "String", "filepath": "String", "step": "String", "stepResult": "String", "time": "String"}, "code": ["String", "function", "(", ")", "{", "return", "testData", ";", "}"], "memberFunctions": {"setMethod": [["void", "String value"]], "setStepResult": [["void", "String value"]], "setFilepath": [["void", "String value"]], "getTime": [["String"]], "getStep": [["String"]], "getFilepath": [["String"]], "getMethod": [["String"]], "getStepResult": [["String"]], "setStep": [["void", "String value"]], "setTestData": [["void", "String value"]], "setTime": [["void", "String value"]]}, "className": "Steps", "renamed": ["String", "function", "(", ")", "{", "return", "testData", ";", "}"], "nl": "Gets the value of the testData property.", "nlToks": ["Gets", "the", "value", "of", "the", "testData", "property", "."], "path": "prabalbsws/selenium_automation/tree/master/src/newpojo/Steps.java", "idx": 2219}
{"memberVariables": {"DEFAULT_USER_BLOCK_SIZE=Constants.KB": "int", "mNumWorkers": "int", "DEFAULT_WORKER_CAPACITY_BYTES=100 * Constants.MB": "long", "mUserBlockSize": "int", "mConfiguration": "Map<PropertyKey,String>", "mStartCluster": "boolean", "mLocalAlluxioCluster=null": "LocalAlluxioCluster", "mConfiguration=new HashMap<>()": "Map<PropertyKey,String>", "mWorkerCapacityBytes": "long"}, "code": ["LocalAlluxioClusterResource", "function", "(", "PropertyKey", "key", ",", "Object", "value", ")", "{", "mConfiguration", ".", "put", "(", "key", ",", "value", ".", "toString", "(", ")", ")", ";", "return", "this", ";", "}"], "memberFunctions": {"apply": [["Statement", "final Statement statement", "Description description"]], "build": [["LocalAlluxioClusterResource"]], "get": [["LocalAlluxioCluster"]], "start": [["void"]], "setStartCluster": [["Builder", "boolean startCluster"]], "setNumWorkers": [["Builder", "int numWorkers"]]}, "className": "LocalAlluxioClusterResource", "renamed": ["LocalAlluxioClusterResource", "function", "(", "PropertyKey", "arg0", ",", "Object", "arg1", ")", "{", "mConfiguration", ".", "put", "(", "arg0", ",", "arg1", ".", "toString", "(", ")", ")", ";", "return", "this", ";", "}"], "nl": "Adds a property to the cluster resource.", "nlToks": ["Adds", "a", "property", "to", "the", "cluster", "resource", "."], "path": "poemlin/alluxio/tree/master/tests/src/test/java/alluxio/LocalAlluxioClusterResource.java", "idx": 2220}
{"memberVariables": {"msgSection1=\"The provided input \"": "String", "regex": "String", "validatorConfig=new IdentityValidatorConfig()": "IdentityValidatorConfig", "msgSection3=\"contains illegal characters matching one of the black list patterns [ %s ]\"": "String", "msgSection4=\" or \"": "String", "msgSection2=\"does not match any of the white list patterns [ %s ]\"": "String"}, "code": ["String", "function", "(", "String", "input", ",", "String", "...", "blackListPatterns", ")", "{", "if", "(", "StringUtils", ".", "isEmpty", "(", "input", ")", "||", "isValidOverBlackListPatterns", "(", "input", ",", "blackListPatterns", ")", ")", "{", "return", "input", ";", "}", "throw", "new", "IdentityValidationException", "(", "msgSection1", "+", "String", ".", "format", "(", "msgSection3", ",", "getPatternString", "(", "blackListPatterns", ")", ")", ")", ";", "}"], "memberFunctions": {"isValidOverWhiteListPatterns": [["boolean", "String input", "String... whiteListPatterns"]], "getRegex": [["String"]], "isValidOverBlackListPatterns": [["boolean", "String input", "String... blackListPatterns"]], "getPatternString": [["String", "String[] patterns"]], "patternExists": [["boolean", "String key"]], "removePattern": [["void", "String key"]], "isValid": [["boolean", "String input", "String[] whiteListPatterns", "String[] blackListPatterns"]], "getValidInput": [["String", "String input", "String[] whiteListPatterns", "String[] blackListPatterns"]], "getValidInputOverWhiteListPatterns": [["String", "String input", "String... whiteListPatterns"]], "addPattern": [["void", "String key", "String regex"]]}, "className": "IdentityValidationUtil", "renamed": ["String", "function", "(", "String", "arg0", ",", "String", "...", "arg1", ")", "{", "if", "(", "StringUtils", ".", "isEmpty", "(", "arg0", ")", "||", "isValidOverBlackListPatterns", "(", "arg0", ",", "arg1", ")", ")", "{", "return", "arg0", ";", "}", "throw", "new", "IdentityValidationException", "(", "msgSection1", "+", "String", ".", "format", "(", "msgSection3", ",", "getPatternString", "(", "arg1", ")", ")", ")", ";", "}"], "nl": "Returns the input if valid over the given black list patterns else throws an IdentityValidationException", "nlToks": ["Returns", "the", "input", "if", "valid", "over", "the", "given", "black", "list", "patterns", "else", "throws", "an", "IdentityValidationException"], "path": "harsha1979/carbon-identity/tree/master/components/identity-core/org.wso2.carbon.identity.base/src/main/java/org/wso2/carbon/identity/base/IdentityValidationUtil.java", "idx": 2222}
{"memberVariables": {"srcplan": "Plan", "tx": "Transaction"}, "code": ["Schema", "function", "(", ")", "{", "return", "srcplan", ".", "schema", "(", ")", ";", "}"], "memberFunctions": {"blocksAccessed": [["int"]], "distinctValues": [["int", "String fldname"]], "recordsOutput": [["int"]], "open": [["Scan"]]}, "className": "MaterializePlan", "renamed": ["Schema", "function", "(", ")", "{", "return", "srcplan", ".", "schema", "(", ")", ";", "}"], "nl": "Returns the schema of the materialized table, which is the same as in the underlying plan.", "nlToks": ["Returns", "the", "schema", "of", "the", "materialized", "table", ",", "which", "is", "the", "same", "as", "in", "the", "underlying", "plan", "."], "path": "prerit2803/DBMSProject2/tree/master/simpledb/materialize/MaterializePlan.java", "idx": 2225}
{"memberVariables": {"globalLog=new Result()": "Result", "log": "List<ResultEntry>", "observers": "Map<ResultObserver,ResultObserverSettings>"}, "code": ["Result", "function", "(", "List", "<", "String", ">", "sources", ")", "{", "Result", "ret", "=", "new", "Result", "(", ")", ";", "for", "(", "ResultEntry", "l", ":", "this", ".", "log", ")", "{", "if", "(", "sources", ".", "contains", "(", "l", ".", "getSource", "(", ")", ")", ")", "{", "ret", ".", "add", "(", "l", ")", ";", "}", "}", "return", "ret", ";", "}"], "memberFunctions": {"getGlobalResult": [["Result"]], "filterOut": [["Result", "List<String> sources"], ["Result", "String source"], ["Result", "ResultLevel level"]], "removeObserver": [["boolean", "ResultObserver o"]], "addObserverLogSource": [["void", "ResultObserver o", "String source"]], "setSources": [["void", "ResultObserver o", "List<String> sources"]], "remove": [["boolean", "Object arg0"]], "iterator": [["Iterator<ResultEntry>"]], "removeAll": [["boolean", "Collection<?> arg0"]], "get": [["ResultEntry", "int index"]], "toArray": [["Object[]"], ["T[]", "T[] arg0"]], "registerObserver": [["boolean", "ResultObserver o"]], "add": [["boolean", "ResultEntry arg0"]], "removeObserverLogSource": [["void", "ResultObserver o", "String source"]], "containsAll": [["boolean", "Collection<?> arg0"]], "clear": [["void"]], "isEmpty": [["boolean"]], "setObserverLevel": [["void", "ResultObserver o", "ResultLevel level"]], "contains": [["boolean", "Object arg0"]], "size": [["int"]], "addAll": [["boolean", "Collection<? extends ResultEntry> arg0"]], "getSoures": [["List<String>", "ResultObserver o"]], "toString": [["String"]], "notifyObserversClear": [["void"]], "notifyObserversAdd": [["void", "ResultEntry newResult"]], "retainAll": [["boolean", "Collection<?> arg0"]]}, "className": "Result", "renamed": ["Result", "function", "(", "List", "<", "String", ">", "arg0", ")", "{", "Result", "loc0", "=", "new", "Result", "(", ")", ";", "for", "(", "ResultEntry", "loc1", ":", "this", ".", "log", ")", "{", "if", "(", "arg0", ".", "contains", "(", "loc1", ".", "getSource", "(", ")", ")", ")", "{", "loc0", ".", "add", "(", "loc1", ")", ";", "}", "}", "return", "loc0", ";", "}"], "nl": "Complementary operation to filterOnly", "nlToks": ["Complementary", "operation", "to", "filterOnly"], "path": "0xwindows/WS-Attacker/tree/master/framework/src/main/java/wsattacker/main/plugin/result/Result.java", "idx": 2232}
{"memberVariables": {"MAX_TINT_FACTOR=1": "double", "MIN_TINT_FACTOR=0.2": "double", "FIXED_TINT_FACTOR=0.875": "double"}, "code": ["Map", "<", "T", ",", "String", ">", "function", "(", "Set", "<", "T", ">", "keys", ")", "{", "Map", "<", "T", ",", "String", ">", "colorMap", "=", "new", "HashMap", "<", "T", ",", "String", ">", "(", ")", ";", "for", "(", "T", "key", ":", "keys", ")", "{", "Color", "color", "=", "tintColor", "(", "getRandomColor", "(", ")", ",", "FIXED_TINT_FACTOR", ")", ";", "colorMap", ".", "put", "(", "key", ",", "getColorString", "(", "color", ")", ")", ";", "}", "return", "colorMap", ";", "}"], "memberFunctions": {"getGraduatedColorMap": [["Map<T,String>", "Set<T> keys", "Color baseColor"]], "tintColor": [["Color", "Color origColor", "double tintFactor"]], "getRandomColor": [["Color"]], "applyTint": [["int", "int color", "double tintFactor"]], "getColorString": [["String", "Color color"]]}, "className": "ColorFactory", "renamed": ["Map", "<", "T", ",", "String", ">", "function", "(", "Set", "<", "T", ">", "arg0", ")", "{", "Map", "<", "T", ",", "String", ">", "loc0", "=", "new", "HashMap", "<", "T", ",", "String", ">", "(", ")", ";", "for", "(", "T", "loc1", ":", "arg0", ")", "{", "Color", "loc2", "=", "tintColor", "(", "getRandomColor", "(", ")", ",", "FIXED_TINT_FACTOR", ")", ";", "loc0", ".", "put", "(", "loc1", ",", "getColorString", "(", "loc2", ")", ")", ";", "}", "return", "loc0", ";", "}"], "nl": "Builds a map of the supplied keys to random colors. Each color is selected randomly and tinted with a fixed tint.", "nlToks": ["Builds", "a", "map", "of", "the", "supplied", "keys", "to", "random", "colors", ".", "Each", "color", "is", "selected", "randomly", "and", "tinted", "with", "a", "fixed", "tint", "."], "path": "pombreda/gitblit/tree/master/src/main/java/com/gitblit/utils/ColorFactory.java", "idx": 2233}
{"memberVariables": {"ITERATIONS=\"iterations\"": "String", "POPULATION_SIZE=\"populationSize\"": "String", "individualLength": "int", "mutationProbability": "double", "finiteAlphabet": "Character[]", "metrics=new Metrics()": "Metrics", "random=new Random()": "Random"}, "code": ["void", "function", "(", ")", "{", "setPopulationSize", "(", "0", ")", ";", "setIterations", "(", "0", ")", ";", "}"], "memberFunctions": {"randomSelection": [["String", "Set<String> population", "FitnessFunction fitnessFn"]], "mutate": [["String", "String individual"]], "geneticAlgorithm": [["String", "Set<String> population", "FitnessFunction fitnessFn", "GoalTest goalTest"], ["String", "Set<String> population", "FitnessFunction fitnessFn", "int iterations"]], "setIterations": [["void", "int cnt"]], "randomOffset": [["int", "int length"]], "retrieveBestIndividual": [["String", "Set<String> population", "FitnessFunction fitnessFn"]], "getMetrics": [["Metrics"]], "getPopulationSize": [["int"]], "reproduce": [["String", "String x", "String y"]], "setPopulationSize": [["void", "int size"]], "getIterations": [["int"]], "validatePopulation": [["void", "Set<String> population"]], "ga": [["String", "Set<String> population", "FitnessFunction fitnessFn"]]}, "className": "GeneticAlgorithm", "renamed": ["void", "function", "(", ")", "{", "setPopulationSize", "(", "0", ")", ";", "setIterations", "(", "0", ")", ";", "}"], "nl": "Sets the population size and number of iterations to zero.", "nlToks": ["Sets", "the", "population", "size", "and", "number", "of", "iterations", "to", "zero", "."], "path": "peterplupo/ia201102/tree/master/trabalho1/aima-core/src/main/java/aima/core/search/local/GeneticAlgorithm.java", "idx": 2234}
{"memberVariables": {"document": "RIFLDocument"}, "code": ["void", "function", "(", "Document", "document", ",", "Element", "rootElement", ")", "{", "Element", "domainAssignment", "=", "document", ".", "createElement", "(", "\"domainassignment\"", ")", ";", "rootElement", ".", "appendChild", "(", "domainAssignment", ")", ";", "for", "(", "SourceSinkDomPair", "spec", ":", "this", ".", "document", ".", "getDomainAssignment", "(", ")", ")", "writeSourceSinkDomPair", "(", "spec", ",", "document", ",", "domainAssignment", ")", ";", "}"], "memberFunctions": {"writeFlowPair": [["void", "FlowPair pair", "Document document", "Element parentElement"]], "writeSourceSinkDomPair": [["void", "SourceSinkDomPair pair", "Document document", "Element rootElement"]], "getDocument": [["RIFLDocument"]], "writeJavaFieldSpec": [["void", "JavaFieldSpec spec", "Document document", "Element parentElement"]], "writeAttackerIO": [["void", "Document document", "Element rootElement"]], "writeDomains": [["void", "Document document", "Element rootElement"]], "writeDomainHierarchy": [["void", "Document document", "Element rootElement"]], "writeJavaParameterSpec": [["void", "JavaParameterSpec spec", "Document document", "Element parentElement"]], "writeDomainSpec": [["void", "DomainSpec spec", "Document document", "Element parentElement"]], "writeFlowPolicy": [["void", "Document document", "Element rootElement"]], "writeDomainPair": [["void", "DomPair pair", "Document document", "Element parentElement"]], "write": [["String"]], "writeSourceSinkSpec": [["void", "SourceSinkSpec spec", "Document document", "Element parentElement"]]}, "className": "RIFLWriter", "renamed": ["void", "function", "(", "Document", "arg0", ",", "Element", "arg1", ")", "{", "Element", "loc0", "=", "arg0", ".", "createElement", "(", "\"srini_string\"", ")", ";", "arg1", ".", "appendChild", "(", "loc0", ")", ";", "for", "(", "SourceSinkDomPair", "loc1", ":", "this", ".", "document", ".", "getDomainAssignment", "(", ")", ")", "writeSourceSinkDomPair", "(", "loc1", ",", "arg0", ",", "loc0", ")", ";", "}"], "nl": "Writes out the domains assignments section of the RIFL document", "nlToks": ["Writes", "out", "the", "domains", "assignments", "section", "of", "the", "RIFL", "document"], "path": "0-14N/soot-inflow/tree/master/src/soot/jimple/infoflow/rifl/RIFLWriter.java", "idx": 2235}
{"memberVariables": {"NAME=\"name\"": "String", "FAULT=\"fault\"": "String", "MEMBER=\"member\"": "String", "tz": "TimeZone", "values=new ArrayList<>()": "ArrayList<Object>", "VALUE=\"value\"": "String"}, "code": ["int", "function", "(", ")", "{", "return", "values", ".", "size", "(", ")", ";", "}"], "memberFunctions": {"getStringValue": [["String", "int index"]], "parseArray": [["ArrayList<Object>", "Node valueNode"]], "getValues": [["List"]], "getStructValue": [["Map<String,Object>", "int index"]], "getDoubleValue": [["Double", "int index"]], "parse": [["void", "Document doc"]], "getIntegerValue": [["Integer", "int index"]], "getBooleanValue": [["Boolean", "int index"]], "parseStruct": [["HashMap<String,Object>", "Node valueNode"]], "getArrayValue": [["List<Object>", "int index"]], "parseValue": [["Object", "Node valueNode"]], "getBinaryValue": [["byte[]", "int index"]], "getDateValue": [["Date", "int index"]]}, "className": "XMLRPCResult", "renamed": ["int", "function", "(", ")", "{", "return", "values", ".", "size", "(", ")", ";", "}"], "nl": "Returns number of top level result values.", "nlToks": ["Returns", "number", "of", "top", "level", "result", "values", "."], "path": "petr-panteleyev/java-xmlrpc/tree/master/src/main/java/org/panteleyev/xmlrpc/XMLRPCResult.java", "idx": 2237}
{"memberVariables": {"KEY_MOST_RECENT_PROJECT_FILE=Configuration.makeKey(\"project\",\"mostrecent\",\"file\")": "ConfigurationKey", "DOCUMENTATION_TAG=\"documentation\"": "String", "KEY_MOST_RECENT_EXPORT_DIRECTORY=Configuration.makeKey(\"project\",\"mostrecent\",\"exportdirectory\")": "ConfigurationKey", "KEY_SCREEN_LEFT_X=Configuration.makeKey(\"screen\",\"left\")": "ConfigurationKey", "KEY_INPUT_SOURCE_ENCODING=Configuration.makeKey(\"import\",\"file\",\"encoding\")": "ConfigurationKey", "KEY_SCREEN_THEME=Configuration.makeKey(\"screen\",\"theme\")": "ConfigurationKey", "DEPRECATED_TAG=\"deprecated\"": "String", "KEY_SNAP=Configuration.makeKey(\"snap\")": "ConfigurationKey", "CONSOLE_LOG=\"argo.console.log\"": "String", "KEY_SCREEN_HEIGHT=Configuration.makeKey(\"screen\",\"height\")": "ConfigurationKey", "KEY_SPLASH=Configuration.makeKey(\"init\",\"splash\")": "ConfigurationKey", "KEY_EDEM=Configuration.makeKey(\"init\",\"edem\")": "ConfigurationKey", "KEY_NUMBER_LAST_RECENT_USED=Configuration.makeKey(\"project\",\"mostrecent\",\"maxNumber\")": "ConfigurationKey", "RESOURCEDIR=\"/org/argouml/resource/\"": "String", "KEY_SCREEN_NORTHEAST_WIDTH=Configuration.makeKey(\"screen\",\"northeast\",\"width\")": "ConfigurationKey", "KEY_USER_EMAIL=Configuration.makeKey(\"user\",\"email\")": "ConfigurationKey", "ARGO_CONSOLE_PREFIX=\"argo.console.prefix\"": "String", "SCOPE_APPLICATION=0": "int", "KEY_SCREEN_SOUTHEAST_WIDTH=Configuration.makeKey(\"screen\",\"southeast\",\"width\")": "ConfigurationKey", "SINCE_TAG=\"since\"": "String", "KEY_LOCALE=Configuration.makeKey(\"locale\")": "ConfigurationKey", "KEY_USER_FULLNAME=Configuration.makeKey(\"user\",\"fullname\")": "ConfigurationKey", "KEY_IMPORT_GENERAL_SETTINGS_FLAGS=Configuration.makeKey(\"import\",\"general\",\"flags\")": "ConfigurationKey", "KEY_SCREEN_SOUTH_HEIGHT=Configuration.makeKey(\"screen\",\"south\",\"height\")": "ConfigurationKey", "KEY_SCREEN_EAST_WIDTH=Configuration.makeKey(\"screen\",\"east\",\"width\")": "ConfigurationKey", "KEY_IMPORT_GENERAL_DETAIL_LEVEL=Configuration.makeKey(\"import\",\"general\",\"detail\",\"level\")": "ConfigurationKey", "KEY_USER_IMPORT_CLASSPATH=Configuration.makeKey(\"import\",\"clazzpath\")": "ConfigurationKey", "VERSION_TAG=\"version\"": "String", "SEE_TAG=\"see\"": "String", "SCOPE_PROJECT=1": "int", "ARGO_CONSOLE_SUPPRESS=\"argo.console.suppress\"": "String", "KEY_THEME_CLASS=Configuration.makeKey(\"screen\",\"themeClass\")": "ConfigurationKey", "DOCUMENTATION_TAG_ALT=\"javadocs\"": "String", "KEY_SMOOTH_EDGES=Configuration.makeKey(\"screen\",\"diagram-antialiasing\")": "ConfigurationKey", "KEY_XMI_STRIP_DIAGRAMS=Configuration.makeKey(\"import\",\"xmi\",\"stripDiagrams\")": "ConfigurationKey", "KEY_SCREEN_NORTH_HEIGHT=Configuration.makeKey(\"screen\",\"north\",\"height\")": "ConfigurationKey", "KEY_SCREEN_WIDTH=Configuration.makeKey(\"screen\",\"width\")": "ConfigurationKey", "KEY_SCREEN_SOUTHWEST_WIDTH=Configuration.makeKey(\"screen\",\"southwest\",\"width\")": "ConfigurationKey", "KEY_SCREEN_WEST_WIDTH=Configuration.makeKey(\"screen\",\"west\",\"width\")": "ConfigurationKey", "KEY_SCREEN_TOP_Y=Configuration.makeKey(\"screen\",\"top\")": "ConfigurationKey", "KEY_DEFAULT_MODEL=Configuration.makeKey(\"defaultModel\")": "ConfigurationKey", "KEY_SCREEN_NORTHWEST_WIDTH=Configuration.makeKey(\"screen\",\"northwest\",\"width\")": "ConfigurationKey", "KEY_USER_EXPLORER_PERSPECTIVES=Configuration.makeKey(\"explorer\",\"perspectives\")": "ConfigurationKey", "ARGOINI=\"/org/argouml/argo.ini\"": "String", "AUTHOR_TAG=\"author\"": "String", "KEY_GRID=Configuration.makeKey(\"grid\")": "ConfigurationKey", "KEY_RELOAD_RECENT_PROJECT=Configuration.makeKey(\"init\",\"project\",\"loadmostrecent\")": "ConfigurationKey", "KEY_LOOK_AND_FEEL_CLASS=Configuration.makeKey(\"screen\",\"lookAndFeelClass\")": "ConfigurationKey", "KEY_SCREEN_MAXIMIZED=Configuration.makeKey(\"screen\",\"maximized\")": "ConfigurationKey", "KEY_STARTUP_DIR=Configuration.makeKey(\"default\",\"user\",\"dir\")": "ConfigurationKey"}, "code": ["String", "function", "(", ")", "{", "return", "\"UTF-8\"", ";", "}"], "memberFunctions": {"setDirectory": [["void", "String dir"]], "getDirectory": [["String"]]}, "className": "Argo", "renamed": ["String", "function", "(", ")", "{", "return", "\"srini_string\"", ";", "}"], "nl": "Supply the encoding to be used throughout the persistence mechanism.", "nlToks": ["Supply", "the", "encoding", "to", "be", "used", "throughout", "the", "persistence", "mechanism", "."], "path": "pichiliani/CoArgoUML/tree/master/v0.24/fonte/src/argouml-app/src/org/argouml/application/api/Argo.java", "idx": 2238}
{"memberVariables": {"timeElapsed": "long", "request": "HttpServletRequest", "messages": "ArrayList", "startTime": "Date", "stopTime": "Date", "parameters": "ArrayList"}, "code": ["void", "function", "(", "Object", "caller", ",", "String", "msg", ",", "String", "color", ")", "{", "Class", "callerClass", "=", "caller", ".", "getClass", "(", ")", ";", "XDebugMessage", "message", "=", "new", "XDebugMessage", "(", "callerClass", ".", "getName", "(", ")", ",", "msg", ",", "color", ")", ";", "messages", ".", "add", "(", "message", ")", ";", "}"], "memberFunctions": {"getDebugMessages": [["ArrayList"]], "getRequest": [["HttpServletRequest"]], "getCompleteLog": [["String"]], "getParameters": [["ArrayList"]], "startTimer": [["void"]], "stopTimer": [["void"]], "getTimeElapsed": [["long"]], "addParameter": [["void", "int type", "String name", "String value"], ["void", "int type", "String name", "int value"], ["void", "int type", "String name", "boolean value"]]}, "className": "XDebug", "renamed": ["void", "function", "(", "Object", "arg0", ",", "String", "arg1", ",", "String", "arg2", ")", "{", "Class", "loc0", "=", "arg0", ".", "getClass", "(", ")", ";", "XDebugMessage", "loc1", "=", "new", "XDebugMessage", "(", "loc0", ".", "getName", "(", ")", ",", "arg1", ",", "arg2", ")", ";", "messages", ".", "add", "(", "loc1", ")", ";", "}"], "nl": "Logs a new message with the specified color code.", "nlToks": ["Logs", "a", "new", "message", "with", "the", "specified", "color", "code", "."], "path": "adamabeshouse/cbioportal/tree/master/core/src/main/java/org/mskcc/cbio/portal/util/XDebug.java", "idx": 2239}
{"memberVariables": {"HAS_REMOTE_CONTROL_APIS=Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH": "boolean", "mActualMetadataEditor": "Object", "METADATA_KEY_ARTWORK=100": "int", "mActualRemoteControlClient": "Object"}, "code": ["MetadataEditorCompat", "function", "(", "int", "key", ",", "long", "value", ")", "{", "if", "(", "HAS_REMOTE_CONTROL_APIS", ")", "{", "(", "(", "RemoteControlClient", ".", "MetadataEditor", ")", "mActualMetadataEditor", ")", ".", "putLong", "(", "key", ",", "value", ")", ";", "}", "return", "this", ";", "}"], "memberFunctions": {"setPlaybackState": [["void", "int state"]], "putBitmap": [["MetadataEditorCompat", "int key", "Bitmap bitmap"]], "apply": [["void"]], "removeFromMediaRouter": [["void", "MediaRouter router"]], "putString": [["MetadataEditorCompat", "int key", "String value"]], "clear": [["void"]], "addToMediaRouter": [["void", "MediaRouter router"]], "getActualRemoteControlClientObject": [["Object"]], "editMetadata": [["MetadataEditorCompat", "boolean startEmpty"]], "setTransportControlFlags": [["void", "int transportControlFlags"]]}, "className": "RemoteControlClientCompat", "renamed": ["MetadataEditorCompat", "function", "(", "int", "arg0", ",", "long", "arg1", ")", "{", "if", "(", "HAS_REMOTE_CONTROL_APIS", ")", "{", "(", "(", "RemoteControlClient", ".", "MetadataEditor", ")", "mActualMetadataEditor", ")", ".", "putLong", "(", "arg0", ",", "arg1", ")", ";", "}", "return", "this", ";", "}"], "nl": "Adds numerical information to be displayed. Note that none of the information added after {@link #apply()} has been called, will be displayed.", "nlToks": ["Adds", "numerical", "information", "to", "be", "displayed", ".", "Note", "that", "none", "of", "the", "information", "added", "after", "-LCB-", "@link", "#apply", "-LRB-", "-RRB-", "-RCB-", "has", "been", "called", ",", "will", "be", "displayed", "."], "path": "phpeng-ms/CastCompanionLibrary-android/tree/master/src/com/google/android/libraries/cast/companionlibrary/remotecontrol/RemoteControlClientCompat.java", "idx": 2244}
{"memberVariables": {"ourInstance=new GeneralMotorCon()": "GeneralMotorCon", "spin90Time=3000": "int", "TAG=\"GMC\"": "String", "batLvl=0": "int", "threadTimer=0": "long", "spinSpeed=2": "int", "cmd": "CommandManager", "hoverTime=2000": "int", "speed=10": "int", "spin90Speed=50": "int", "drone": "ARDrone", "spinTime=50": "int"}, "code": ["void", "function", "(", ")", "{", "SpaceXGUI", ".", "getInstance", "(", ")", ".", "appendToConsole", "(", "TAG", ",", "\" - spinning left\"", ")", ";", "cmd", ".", "setLedsAnimation", "(", "LEDAnimation", ".", "BLINK_RED", ",", "3", ",", "(", "spinTime", "/", "1000", ")", ")", ";", "cmd", ".", "spinLeft", "(", "spinSpeed", ")", ".", "doFor", "(", "spinTime", ")", ";", "cmd", ".", "hover", "(", ")", ".", "doFor", "(", "hoverTime", ")", ";", "}"], "memberFunctions": {"spin90Left": [["void"]], "spinRight": [["void"]], "takeoff": [["void"]], "forward": [["void", "int time"]], "right": [["void"]], "lowerAltitude": [["void"]], "spin90Right": [["void"]], "landing": [["void"]], "setDrone": [["void", "ARDrone drone"]], "left": [["void"]], "backward": [["void", "int time"]], "getInstance": [["GeneralMotorCon"]], "setBatLvl": [["void", "int batLvl"]], "waitFor": [["void", "int millis"]], "getBatLvl": [["int"]], "onStop": [["void"]], "raiseAltitude": [["void"]]}, "className": "GeneralMotorCon", "renamed": ["void", "function", "(", ")", "{", "SpaceXGUI", ".", "getInstance", "(", ")", ".", "appendToConsole", "(", "TAG", ",", "\"srini_string\"", ")", ";", "cmd", ".", "setLedsAnimation", "(", "LEDAnimation", ".", "BLINK_RED", ",", "3", ",", "(", "spinTime", "/", "1000", ")", ")", ";", "cmd", ".", "spinLeft", "(", "spinSpeed", ")", ".", "doFor", "(", "spinTime", ")", ";", "cmd", ".", "hover", "(", ")", ".", "doFor", "(", "hoverTime", ")", ";", "}"], "nl": "SpinLeft spins the drone a little to the left", "nlToks": ["SpinLeft", "spins", "the", "drone", "a", "little", "to", "the", "left"], "path": "02343Gruppe2/02343_Ardrone/tree/master/src/algo/GeneralMotorCon.java", "idx": 2245}
{"memberVariables": {"ingredientService": "IngredientService", "log=LoggerFactory.getLogger(IngredientResource.class)": "Logger"}, "code": ["ResponseEntity", "<", "Ingredient", ">", "function", "(", "@", "PathVariable", "String", "id", ")", "{", "log", ".", "debug", "(", "\"REST request to get Ingredient : {}\"", ",", "id", ")", ";", "Ingredient", "ingredient", "=", "ingredientService", ".", "findOne", "(", "id", ")", ";", "return", "Optional", ".", "ofNullable", "(", "ingredient", ")", ".", "map", "(", "result", "->", "new", "ResponseEntity", "<", ">", "(", "result", ",", "HttpStatus", ".", "OK", ")", ")", ".", "orElse", "(", "new", "ResponseEntity", "<", ">", "(", "HttpStatus", ".", "NOT_FOUND", ")", ")", ";", "}"], "memberFunctions": {"updateIngredient": [["ResponseEntity<Ingredient>", "@RequestBody Ingredient ingredient"]], "getAutoSuggest": [["ResponseEntity<List<String>>", "@RequestParam(required=false,defaultValue=\"c\u00c3\u00a1\") String search"]], "deleteIngredient": [["ResponseEntity<Void>", "@PathVariable String id"]], "getAllIngredients": [["ResponseEntity<List<Ingredient>>", "Pageable pageable"]], "createIngredient": [["ResponseEntity<Ingredient>", "@RequestBody Ingredient ingredient"]]}, "className": "IngredientResource", "renamed": ["ResponseEntity", "<", "Ingredient", ">", "function", "(", "@", "PathVariable", "String", "arg0", ")", "{", "log", ".", "debug", "(", "\"srini_string\"", ",", "arg0", ")", ";", "Ingredient", "loc0", "=", "ingredientService", ".", "findOne", "(", "arg0", ")", ";", "return", "Optional", ".", "ofNullable", "(", "loc0", ")", ".", "map", "(", "result", "->", "new", "ResponseEntity", "<", ">", "(", "result", ",", "HttpStatus", ".", "OK", ")", ")", ".", "orElse", "(", "new", "ResponseEntity", "<", ">", "(", "HttpStatus", ".", "NOT_FOUND", ")", ")", ";", "}"], "nl": "GET  /ingredients/:id : get the \"id\" ingredient.", "nlToks": ["GET", "/", "ingredients", "/", ":", "id", ":", "get", "the", "``", "id", "''", "ingredient", "."], "path": "pigkey/kitchen/tree/master/app/src/main/java/com/kitchen/app/web/rest/IngredientResource.java", "idx": 2246}
{"memberVariables": {}, "code": ["void", "function", "(", "Element", "element", ")", "{", "unhandled", "(", "element", ")", ";", "}"], "memberFunctions": {"unhandled": [["void", "Node aNode"]], "testDocumentType": [["void", "DocumentType doctype"]], "testComment": [["void", "Comment comment"]], "testNode": [["void", "Node aNode", "NodeTest forTest"]], "testEntity": [["void", "Entity entity"]], "noMoreNodes": [["void", "NodeTest forTest"]], "testAttribute": [["void", "Attr attribute"]], "testText": [["void", "Text text"]], "testEntityReference": [["void", "EntityReference reference"]], "testCDATASection": [["void", "CDATASection cdata"]], "testNotation": [["void", "Notation notation"]], "testProcessingInstruction": [["void", "ProcessingInstruction instr"]]}, "className": "AbstractNodeTester", "renamed": ["void", "function", "(", "Element", "arg0", ")", "{", "unhandled", "(", "arg0", ")", ";", "}"], "nl": "Template delegator for testNode() method. OVERRIDE to add custom logic", "nlToks": ["Template", "delegator", "for", "testNode", "-LRB-", "-RRB-", "method", ".", "OVERRIDE", "to", "add", "custom", "logic"], "path": "phbenisc/xmlunit/tree/master/xmlunit-legacy/src/main/java/org/custommonkey/xmlunit/AbstractNodeTester.java", "idx": 2248}
{"memberVariables": {"connection": "Connection", "info": "DbInfo"}, "code": ["String", "function", "(", "ResultSet", "rs", ",", "String", "source", ")", "{", "return", "getStringValue", "(", "rs", ",", "source", ",", "true", ")", ";", "}"], "memberFunctions": {"disconnect": [["void"]], "getInfo": [["DbInfo"]], "getConnnection": [["Connection"]], "connect": [["boolean"]]}, "className": "DbConn", "renamed": ["String", "function", "(", "ResultSet", "arg0", ",", "String", "arg1", ")", "{", "return", "getStringValue", "(", "arg0", ",", "arg1", ",", "true", ")", ";", "}"], "nl": "Get string value from database, replacing empty string with {Empty}", "nlToks": ["Get", "string", "value", "from", "database", ",", "replacing", "empty", "string", "with", "-LCB-", "Empty", "-RCB-"], "path": "phramusca/JaMuz/tree/master/src/jamuz/DbConn.java", "idx": 2250}
{"memberVariables": {}, "code": ["String", "function", "(", "String", "classFullName", ")", "{", "int", "lastDot", "=", "classFullName", ".", "lastIndexOf", "(", "'.'", ")", ";", "return", "(", "lastDot", "<", "0", ")", "?", "\"\"", ":", "classFullName", ".", "substring", "(", "0", ",", "lastDot", ")", ";", "}"], "memberFunctions": {"newProxy": [["T", "Class<T> interfaceType", "InvocationHandler handler"]], "initialize": [["void", "Class<?>... classes"]]}, "className": "Reflection", "renamed": ["String", "function", "(", "String", "arg0", ")", "{", "int", "loc0", "=", "arg0", ".", "lastIndexOf", "(", "'.'", ")", ";", "return", "(", "loc0", "<", "0", ")", "?", "\"srini_string\"", ":", "arg0", ".", "substring", "(", "0", ",", "loc0", ")", ";", "}"], "nl": "Returns the package name of  {@code classFullName} according to the Java Language Specification(section 6.7). Unlike  {@link Class#getPackage}, this method only parses the class name, without attempting to define the  {@link Package} and hence load files.", "nlToks": ["Returns", "the", "package", "name", "of", "-LCB-", "@code", "classFullName", "-RCB-", "according", "to", "the", "Java", "Language", "Specification", "-LRB-", "section", "6.7", "-RRB-", ".", "Unlike", "-LCB-", "@link", "Class", "#getPackage", "-RCB-", ",", "this", "method", "only", "parses", "the", "class", "name", ",", "without", "attempting", "to", "define", "the", "-LCB-", "@link", "Package", "-RCB-", "and", "hence", "load", "files", "."], "path": "hazendaz/guava/tree/master/guava/src/com/google/common/reflect/Reflection.java", "idx": 2251}
{"memberVariables": {"next": "SimpleTypedNameDeclaration", "typeImage": "String", "type": "Class<?>", "primitiveTypes=new HashSet<>()": "Set<String>"}, "code": ["boolean", "function", "(", "Object", "obj", ")", "{", "return", "internalEquals", "(", "obj", ")", "||", "internalEqualsNext", "(", "obj", ")", ";", "}"], "memberFunctions": {"getTypeImage": [["String"]], "addNext": [["void", "SimpleTypedNameDeclaration next"]], "getType": [["Class<?>"]], "hashCode": [["int"]], "internalEquals": [["boolean", "Object obj"]], "toString": [["String"]], "internalEqualsNext": [["boolean", "Object obj"]]}, "className": "SimpleTypedNameDeclaration", "renamed": ["boolean", "function", "(", "Object", "arg0", ")", "{", "return", "internalEquals", "(", "arg0", ")", "||", "internalEqualsNext", "(", "arg0", ")", ";", "}"], "nl": "{@inheritDoc} Additionally - two  {@link SimpleTypedNameDeclaration} are equal, if theycontain types, that can be cast into each other. ", "nlToks": ["-LCB-", "@inheritDoc", "-RCB-", "Additionally", "-", "two", "-LCB-", "@link", "SimpleTypedNameDeclaration", "-RCB-", "are", "equal", ",", "if", "theycontain", "types", ",", "that", "can", "be", "cast", "into", "each", "other", "."], "path": "adangel/pmd/tree/master/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/symboltable/SimpleTypedNameDeclaration.java", "idx": 2253}
{"memberVariables": {"lineItem": "OrderLineType", "iter": "java.util.Iterator"}, "code": ["String", "function", "(", ")", "{", "String", "num", "=", "\"\"", ";", "try", "{", "num", "=", "lineItem", ".", "getLineItem", "(", ")", ".", "getItem", "(", ")", ".", "getSellersItemIdentification", "(", ")", ".", "getID", "(", ")", ".", "getValue", "(", ")", ";", "}", "catch", "(", "NullPointerException", "npe", ")", "{", "}", "return", "num", ";", "}"], "memberFunctions": {"getItemDescription": [["String"]], "next": [["Object"]], "getItemPriceCurrency": [["java.util.Currency"]], "getItemQuantity": [["int"]], "getItemPrice": [["double"]], "getTheItemPrice": [["BasePriceType"]], "hasNext": [["boolean"]], "remove": [["void"]]}, "className": "OrderLineTypeFacade", "renamed": ["String", "function", "(", ")", "{", "String", "loc0", "=", "\"srini_string\"", ";", "try", "{", "loc0", "=", "lineItem", ".", "getLineItem", "(", ")", ".", "getItem", "(", ")", ".", "getSellersItemIdentification", "(", ")", ".", "getID", "(", ")", ".", "getValue", "(", ")", ";", "}", "catch", "(", "NullPointerException", "loc1", ")", "{", "}", "return", "loc0", ";", "}"], "nl": "Returns the part number associated with a line item.", "nlToks": ["Returns", "the", "part", "number", "associated", "with", "a", "line", "item", "."], "path": "pmeijer/meta-core/tree/master/meta/DesignDataPackage/tools/jaxb-ri-2.2.6/samples/ubl/src/samples/ubl/report/facade/OrderLineTypeFacade.java", "idx": 2254}
{"memberVariables": {"handler": "IParserEventHandler", "GROUP_END=new GroupEndEvent()": "IParserEvent", "GROUP_START=new GroupStartEvent()": "IParserEvent", "DOCUMENT_START=new DocumentStartEvent()": "IParserEvent", "handlerStack=new ArrayDeque<IParserEventHandler>()": "Deque<IParserEventHandler>", "m_fontEncodings=new HashMap<Integer,String>()": "Map<Integer,String>", "stack=new ArrayDeque<ParserState>()": "Deque<ParserState>", "DOCUMENT_END=new DocumentEndEvent()": "IParserEvent", "state=new ParserState()": "ParserState", "skipBytes": "int"}, "code": ["void", "function", "(", "int", "parameter", ")", "{", "state", ".", "unicodeAlternateSkipCount", "=", "parameter", ";", "}"], "memberFunctions": {"processCharacter": [["void", "char c"]], "processUpr": [["void", "IParserEvent command"]], "handleEvent": [["void", "IParserEvent event"]], "processDocumentEnd": [["void"]], "processGroupEnd": [["void"]], "processCommand": [["void", "Command command", "int parameter", "boolean hasParameter", "boolean optional"]], "parse": [["void", "IRtfSource source", "IRtfListener listener"]], "processCharacterBytes": [["void", "byte[] data"]], "processString": [["void", "String string"]], "processDocumentStart": [["void"]], "handleCommand": [["void", "Command command", "int parameter", "boolean hasParameter", "boolean optional"]], "processGroupStart": [["void"]], "processFont": [["void", "int parameter"]], "processEncoding": [["void", "Command command", "boolean hasParameter", "int parameter"]], "processUnicode": [["void", "int parameter"]], "currentEncoding": [["String"]], "processBinaryBytes": [["void", "byte[] data"]], "processFontCharset": [["void", "int parameter"]]}, "className": "StandardRtfParser", "renamed": ["void", "function", "(", "int", "arg0", ")", "{", "state", ".", "unicodeAlternateSkipCount", "=", "arg0", ";", "}"], "nl": "Set the number of bytes to skip after a Unicode character.", "nlToks": ["Set", "the", "number", "of", "bytes", "to", "skip", "after", "a", "Unicode", "character", "."], "path": "harrisaoz/rtfparserkit/tree/master/RTF Parser Kit/src/main/java/com/rtfparserkit/parser/standard/StandardRtfParser.java", "idx": 2256}
{"memberVariables": {"mGlobalTileID": "int", "mTileWidth": "int", "mTileColumn": "int", "mTileRow": "int", "mTileHeight": "int", "mTextureRegion": "TextureRegion"}, "code": ["void", "function", "(", "final", "TextureRegion", "pTextureRegion", ")", "{", "this", ".", "mTextureRegion", "=", "pTextureRegion", ";", "}"], "memberFunctions": {"getTileHeight": [["int"]], "setGlobalTileID": [["void", "final TMXTiledMap pTMXTiledMap", "final int pGlobalTileID"]], "getTileWidth": [["int"]], "getTMXTileProperties": [["TMXProperties<TMXTileProperty>", "final TMXTiledMap pTMXTiledMap"]], "getGlobalTileID": [["int"]], "getTileY": [["int"]], "getTileX": [["int"]], "getTextureRegion": [["TextureRegion"]], "getTileRow": [["int"]], "getTileColumn": [["int"]]}, "className": "TMXTile", "renamed": ["void", "function", "(", "final", "TextureRegion", "arg0", ")", "{", "this", ".", "mTextureRegion", "=", "arg0", ";", "}"], "nl": "You'd probably want to call  {@link TMXTile#setGlobalTileID(TMXTiledMap,int)} instead.", "nlToks": ["You", "'d", "probably", "want", "to", "call", "-LCB-", "@link", "TMXTile", "#setGlobalTileID", "-LRB-", "TMXTiledMap", ",", "int", "-RRB-", "-RCB-", "instead", "."], "path": "pradhanta/AndEngine/tree/master/src/org/anddev/andengine/entity/layer/tiled/tmx/TMXTile.java", "idx": 2258}
{"memberVariables": {"COMMITTED_BLOCKS_NUM=10L": "long", "TEST_SESSION_ID=33L": "long", "mBlockStoreMeta": "BlockStoreMeta", "mBlockStoreMetaFull": "BlockStoreMeta", "TEST_BLOCK_SIZE=200L": "long", "mMetadataManager": "BlockMetadataManager", "mTestFolder=new TemporaryFolder()": "TemporaryFolder"}, "code": ["void", "function", "(", ")", "{", "Assert", ".", "assertEquals", "(", "TieredBlockStoreTestUtils", ".", "getDefaultTotalCapacityBytes", "(", ")", ",", "mBlockStoreMeta", ".", "getCapacityBytes", "(", ")", ")", ";", "}"], "memberFunctions": {"getUsedBytesOnTiers": [["void"]], "before": [["void"]], "getCapacityBytesOnDirs": [["void"]], "getUsedBytes": [["void"]], "getNumberOfBlocks": [["void"]], "getCapacityBytesOnTiers": [["void"]], "getUsedBytesOnDirs": [["void"]], "getBlockList": [["void"]]}, "className": "BlockStoreMetaTest", "renamed": ["void", "function", "(", ")", "{", "Assert", ".", "assertEquals", "(", "TieredBlockStoreTestUtils", ".", "getDefaultTotalCapacityBytes", "(", ")", ",", "mBlockStoreMeta", ".", "getCapacityBytes", "(", ")", ")", ";", "}"], "nl": "Tests the  {@link BlockStoreMeta#getCapacityBytes()} method.", "nlToks": ["Tests", "the", "-LCB-", "@link", "BlockStoreMeta", "#getCapacityBytes", "-LRB-", "-RRB-", "-RCB-", "method", "."], "path": "poemlin/alluxio/tree/master/core/server/src/test/java/alluxio/worker/block/BlockStoreMetaTest.java", "idx": 2259}
{"memberVariables": {"readable": "Readable", "cbuf=createBuffer()": "CharBuffer", "lines=new LinkedList<String>()": "Queue<String>", "reader": "Reader", "lineBuf=new LineBuffer(){\n  @Override protected void handleLine(  String line,  String end){\n    lines.add(line);\n  }\n}\n": "LineBuffer", "buf=cbuf.array()": "char[]"}, "code": ["String", "function", "(", ")", "{", "while", "(", "lines", ".", "peek", "(", ")", "==", "null", ")", "{", "cbuf", ".", "clear", "(", ")", ";", "int", "read", "=", "(", "reader", "!=", "null", ")", "?", "reader", ".", "read", "(", "buf", ",", "0", ",", "buf", ".", "length", ")", ":", "readable", ".", "read", "(", "cbuf", ")", ";", "if", "(", "read", "==", "-", "1", ")", "{", "lineBuf", ".", "finish", "(", ")", ";", "break", ";", "}", "lineBuf", ".", "add", "(", "buf", ",", "0", ",", "read", ")", ";", "}", "return", "lines", ".", "poll", "(", ")", ";", "}"], "memberFunctions": {"handleLine": [["void", "String line", "String end"]]}, "className": "LineReader", "renamed": ["String", "function", "(", ")", "{", "while", "(", "lines", ".", "peek", "(", ")", "==", "null", ")", "{", "cbuf", ".", "clear", "(", ")", ";", "int", "loc0", "=", "(", "reader", "!=", "null", ")", "?", "reader", ".", "loc0", "(", "buf", ",", "0", ",", "buf", ".", "length", ")", ":", "readable", ".", "loc0", "(", "cbuf", ")", ";", "if", "(", "loc0", "==", "-", "1", ")", "{", "lineBuf", ".", "finish", "(", ")", ";", "break", ";", "}", "lineBuf", ".", "add", "(", "buf", ",", "0", ",", "loc0", ")", ";", "}", "return", "lines", ".", "poll", "(", ")", ";", "}"], "nl": "Reads a line of text. A line is considered to be terminated by any one of a line feed ( {@code '\\n'}), a carriage return ( {@code '\\r'}), or a carriage return followed immediately by a linefeed ( {@code \"\\r\\n\"}).", "nlToks": ["Reads", "a", "line", "of", "text", ".", "A", "line", "is", "considered", "to", "be", "terminated", "by", "any", "one", "of", "a", "line", "feed", "-LRB-", "-LCB-", "@code", "'", "\\", "n", "'", "-RCB-", "-RRB-", ",", "a", "carriage", "return", "-LRB-", "-LCB-", "@code", "'", "\\", "r", "'", "-RCB-", "-RRB-", ",", "or", "a", "carriage", "return", "followed", "immediately", "by", "a", "linefeed", "-LRB-", "-LCB-", "@code", "''", "\\", "r", "\\", "n", "''", "-RCB-", "-RRB-", "."], "path": "hazendaz/guava/tree/master/guava/src/com/google/common/io/LineReader.java", "idx": 2261}
{"memberVariables": {"gsv": "GSVSentence", "EXAMPLE=\"$GPGSV,3,2,12,15,56,182,51,17,38,163,47,18,63,058,50,21,53,329,47*73\"": "String", "empty": "GSVSentence"}, "code": ["void", "function", "(", ")", "{", "gsv", ".", "setSentenceCount", "(", "1", ")", ";", "assertEquals", "(", "1", ",", "gsv", ".", "getSentenceCount", "(", ")", ")", ";", "gsv", ".", "setSentenceCount", "(", "2", ")", ";", "assertEquals", "(", "2", ",", "gsv", ".", "getSentenceCount", "(", ")", ")", ";", "}"], "memberFunctions": {"testSetSatelliteCount": [["void"]], "testIsFirst": [["void"]], "testSetSatelliteInfo": [["void"]], "testGetSentenceIndex": [["void"]], "testGetSatelliteCount": [["void"]], "testConstructor": [["void"]], "testGetSatelliteInfo": [["void"]], "testParserGlonassGSV": [["void"]], "testGetSentenceCount": [["void"]], "testGetSatelliteInfoWithEmptyFields": [["void"]], "testGetSatelliteInfoWithShortSentence": [["void"]], "setUp": [["void"]], "testIsLast": [["void"]], "testSatelliteInfo": [["void", "SatelliteInfo si", "String id", "int elevation", "int azimuth", "int noise"]]}, "className": "GSVTest", "renamed": ["void", "function", "(", ")", "{", "gsv", ".", "setSentenceCount", "(", "1", ")", ";", "assertEquals", "(", "1", ",", "gsv", ".", "getSentenceCount", "(", ")", ")", ";", "gsv", ".", "setSentenceCount", "(", "2", ")", ";", "assertEquals", "(", "2", ",", "gsv", ".", "getSentenceCount", "(", ")", ")", ";", "}"], "nl": "Test method for {@link net.sf.marineapi.nmea.parser.GSVParser#setSentenceCount(int)}.", "nlToks": ["Test", "method", "for", "-LCB-", "@link", "net.sf.marineapi.nmea.parser.GSVParser", "#setSentenceCount", "-LRB-", "int", "-RRB-", "-RCB-", "."], "path": "pkoziol/marine-api/tree/master/src/test/java/net/sf/marineapi/nmea/parser/GSVTest.java", "idx": 2267}
{"memberVariables": {"bigIcon": "int", "emojiText": "String", "icon": "int", "name": "String", "type": "Type", "iconPath": "String", "identityCode": "String", "bigIconPath": "String"}, "code": ["void", "function", "(", "String", "iconPath", ")", "{", "this", ".", "iconPath", "=", "iconPath", ";", "}"], "memberFunctions": {"setName": [["void", "String name"]], "getName": [["String"]], "getIconPath": [["String"]], "getBigIcon": [["int"]], "setBigIcon": [["void", "int dynamicIcon"]], "setType": [["void", "Type type"]], "setIdentityCode": [["void", "String identityCode"]], "getIcon": [["int"]], "getEmojiText": [["String"]], "getBigIconPath": [["String"]], "setIcon": [["void", "int icon"]], "setBigIconPath": [["void", "String bigIconPath"]], "setEmojiText": [["void", "String emojiText"]], "getType": [["Type"]], "getIdentityCode": [["String"]], "newEmojiText": [["String", "int codePoint"]]}, "className": "EaseEmojicon", "renamed": ["void", "function", "(", "String", "arg0", ")", "{", "this", ".", "iconPath", "=", "arg0", ";", "}"], "nl": "set icon path", "nlToks": ["set", "icon", "path"], "path": "15109237255/SuperWeChat/tree/master/easeui/src/com/hyphenate/easeui/domain/EaseEmojicon.java", "idx": 2269}
{"memberVariables": {"remoteRepositories=new LinkedList<>()": "List<RemoteRepository>", "log=LogFactory.getLog(MavenArtifactResolver.class)": "Log", "DEFAULT_CONTENT_TYPE=\"default\"": "String", "repositorySystem": "RepositorySystem", "properties": "MavenProperties", "authentication": "Authentication"}, "code": ["boolean", "function", "(", ")", "{", "return", "(", "this", ".", "properties", ".", "getProxy", "(", ")", "!=", "null", "&&", "this", ".", "properties", ".", "getProxy", "(", ")", ".", "getAuth", "(", ")", "!=", "null", "&&", "this", ".", "properties", ".", "getProxy", "(", ")", ".", "getAuth", "(", ")", ".", "getUsername", "(", ")", "!=", "null", "&&", "this", ".", "properties", ".", "getProxy", "(", ")", ".", "getAuth", "(", ")", ".", "getPassword", "(", ")", "!=", "null", ")", ";", "}"], "memberFunctions": {"toResource": [["FileSystemResource", "ArtifactResult resolvedArtifact"]], "toArtifact": [["Artifact", "MavenResource resource"]], "resolve": [["Resource", "MavenResource resource"]], "newRepositorySystem": [["RepositorySystem"]], "newRepositorySystemSession": [["DefaultRepositorySystemSession", "RepositorySystem system", "String localRepoPath"]], "validateCoordinates": [["void", "MavenResource resource"]], "isProxyEnabled": [["boolean"]]}, "className": "MavenArtifactResolver", "renamed": ["boolean", "function", "(", ")", "{", "return", "(", "this", ".", "properties", ".", "getProxy", "(", ")", "!=", "null", "&&", "this", ".", "properties", ".", "getProxy", "(", ")", ".", "getAuth", "(", ")", "!=", "null", "&&", "this", ".", "properties", ".", "getProxy", "(", ")", ".", "getAuth", "(", ")", ".", "getUsername", "(", ")", "!=", "null", "&&", "this", ".", "properties", ".", "getProxy", "(", ")", ".", "getAuth", "(", ")", ".", "getPassword", "(", ")", "!=", "null", ")", ";", "}"], "nl": "Check if the proxy setting has username/password set.", "nlToks": ["Check", "if", "the", "proxy", "setting", "has", "username/password", "set", "."], "path": "pperalta/spring-cloud-deployer/tree/master/spring-cloud-deployer-resource-maven/src/main/java/org/springframework/cloud/deployer/resource/maven/MavenArtifactResolver.java", "idx": 2271}
{"memberVariables": {"handler": "IParserEventHandler", "GROUP_END=new GroupEndEvent()": "IParserEvent", "GROUP_START=new GroupStartEvent()": "IParserEvent", "DOCUMENT_START=new DocumentStartEvent()": "IParserEvent", "handlerStack=new ArrayDeque<IParserEventHandler>()": "Deque<IParserEventHandler>", "m_fontEncodings=new HashMap<Integer,String>()": "Map<Integer,String>", "stack=new ArrayDeque<ParserState>()": "Deque<ParserState>", "DOCUMENT_END=new DocumentEndEvent()": "IParserEvent", "state=new ParserState()": "ParserState", "skipBytes": "int"}, "code": ["void", "function", "(", "IRtfSource", "source", ",", "IRtfListener", "listener", ")", "{", "handler", "=", "new", "DefaultEventHandler", "(", "listener", ")", ";", "IRtfParser", "reader", "=", "new", "RawRtfParser", "(", ")", ";", "reader", ".", "parse", "(", "source", ",", "this", ")", ";", "}"], "memberFunctions": {"processCharacter": [["void", "char c"]], "processUpr": [["void", "IParserEvent command"]], "handleEvent": [["void", "IParserEvent event"]], "processDocumentEnd": [["void"]], "processGroupEnd": [["void"]], "processCommand": [["void", "Command command", "int parameter", "boolean hasParameter", "boolean optional"]], "processCharacterBytes": [["void", "byte[] data"]], "processString": [["void", "String string"]], "processDocumentStart": [["void"]], "processUnicodeAlternateSkipCount": [["void", "int parameter"]], "handleCommand": [["void", "Command command", "int parameter", "boolean hasParameter", "boolean optional"]], "processGroupStart": [["void"]], "processFont": [["void", "int parameter"]], "processEncoding": [["void", "Command command", "boolean hasParameter", "int parameter"]], "processUnicode": [["void", "int parameter"]], "currentEncoding": [["String"]], "processBinaryBytes": [["void", "byte[] data"]], "processFontCharset": [["void", "int parameter"]]}, "className": "StandardRtfParser", "renamed": ["void", "function", "(", "IRtfSource", "arg0", ",", "IRtfListener", "arg1", ")", "{", "handler", "=", "new", "DefaultEventHandler", "(", "arg1", ")", ";", "IRtfParser", "loc0", "=", "new", "RawRtfParser", "(", ")", ";", "loc0", ".", "parse", "(", "arg0", ",", "this", ")", ";", "}"], "nl": "Main entry point: parse RTF data from the input stream, and pass events based on the RTF content to the listener.", "nlToks": ["Main", "entry", "point", ":", "parse", "RTF", "data", "from", "the", "input", "stream", ",", "and", "pass", "events", "based", "on", "the", "RTF", "content", "to", "the", "listener", "."], "path": "harrisaoz/rtfparserkit/tree/master/RTF Parser Kit/src/main/java/com/rtfparserkit/parser/standard/StandardRtfParser.java", "idx": 2272}
{"memberVariables": {"globalLog=new Result()": "Result", "log": "List<ResultEntry>", "observers": "Map<ResultObserver,ResultObserverSettings>"}, "code": ["Result", "function", "(", "String", "source", ")", "{", "Result", "ret", "=", "new", "Result", "(", ")", ";", "for", "(", "ResultEntry", "l", ":", "this", ".", "log", ")", "{", "if", "(", "l", ".", "getSource", "(", ")", ".", "equals", "(", "source", ")", ")", "{", "ret", ".", "add", "(", "l", ")", ";", "}", "}", "return", "ret", ";", "}"], "memberFunctions": {"getGlobalResult": [["Result"]], "filterOut": [["Result", "List<String> sources"], ["Result", "String source"], ["Result", "ResultLevel level"]], "removeObserver": [["boolean", "ResultObserver o"]], "addObserverLogSource": [["void", "ResultObserver o", "String source"]], "setSources": [["void", "ResultObserver o", "List<String> sources"]], "remove": [["boolean", "Object arg0"]], "iterator": [["Iterator<ResultEntry>"]], "removeAll": [["boolean", "Collection<?> arg0"]], "get": [["ResultEntry", "int index"]], "toArray": [["Object[]"], ["T[]", "T[] arg0"]], "registerObserver": [["boolean", "ResultObserver o"]], "add": [["boolean", "ResultEntry arg0"]], "removeObserverLogSource": [["void", "ResultObserver o", "String source"]], "containsAll": [["boolean", "Collection<?> arg0"]], "clear": [["void"]], "isEmpty": [["boolean"]], "setObserverLevel": [["void", "ResultObserver o", "ResultLevel level"]], "contains": [["boolean", "Object arg0"]], "size": [["int"]], "addAll": [["boolean", "Collection<? extends ResultEntry> arg0"]], "getSoures": [["List<String>", "ResultObserver o"]], "toString": [["String"]], "notifyObserversClear": [["void"]], "notifyObserversAdd": [["void", "ResultEntry newResult"]], "retainAll": [["boolean", "Collection<?> arg0"]]}, "className": "Result", "renamed": ["Result", "function", "(", "String", "arg0", ")", "{", "Result", "loc0", "=", "new", "Result", "(", ")", ";", "for", "(", "ResultEntry", "loc1", ":", "this", ".", "log", ")", "{", "if", "(", "loc1", ".", "getSource", "(", ")", ".", "equals", "(", "arg0", ")", ")", "{", "loc0", ".", "add", "(", "loc1", ")", ";", "}", "}", "return", "loc0", ";", "}"], "nl": "Complementary operation to filterOnly", "nlToks": ["Complementary", "operation", "to", "filterOnly"], "path": "0xwindows/WS-Attacker/tree/master/framework/src/main/java/wsattacker/main/plugin/result/Result.java", "idx": 2273}
{"memberVariables": {"unzeroVector=new DenseMatrix64F(5,1,true,0.3,1,-2,3,4)": "DenseMatrix64F", "rand=new Random(234)": "Random", "zeroMatrix=new DenseMatrix64F(3,4)": "DenseMatrix64F", "unzeroMatrix=new DenseMatrix64F(3,2,true,0.2,1,-2,3,6,5)": "DenseMatrix64F", "squareMatrix=new DenseMatrix64F(2,2,true,0.2,1,-2,3)": "DenseMatrix64F"}, "code": ["void", "function", "(", ")", "{", "double", "val", "=", "NormOps", ".", "conditionP2", "(", "unzeroMatrix", ")", ";", "assertEquals", "(", "2.1655", ",", "val", ",", "1e-3", ")", ";", "checkUncountable", "(", "NormOps", ".", "conditionP2", "(", "zeroMatrix", ")", ")", ";", "}"], "memberFunctions": {"inducedP2": [["void"]], "checkUncountable": [["void", "double val"]], "inducedP1": [["void"]], "normalizeF": [["void"]], "normF": [["void"]], "fastNormP2": [["void"]], "fastNormP": [["void"]], "normPInf": [["void"]], "conditionP": [["void"]], "elementP": [["void"]], "inducedPInf": [["void"]], "normP": [["void"]], "normP2": [["void"]], "fastElementP": [["void"]], "fastNormF": [["void"]], "normP1": [["void"]]}, "className": "TestNormOps", "renamed": ["void", "function", "(", ")", "{", "double", "loc0", "=", "NormOps", ".", "conditionP2", "(", "unzeroMatrix", ")", ";", "assertEquals", "(", "2.1655", ",", "loc0", ",", "1e-3", ")", ";", "checkUncountable", "(", "NormOps", ".", "conditionP2", "(", "zeroMatrix", ")", ")", ";", "}"], "nl": "Tests against the condition number from octave.", "nlToks": ["Tests", "against", "the", "condition", "number", "from", "octave", "."], "path": "adamaulia/efficient-java-matrix-library/tree/master/test/org/ejml/ops/TestNormOps.java", "idx": 2274}
{"memberVariables": {"BUCKET_PREFIX=\"prefix\"": "String", "mClient": "OSSClient", "DST=\"dst\"": "String", "SRC=\"src\"": "String", "mOSSUnderFileSystem": "OSSUnderFileSystem", "PATH=\"path\"": "String", "BUCKET_NAME=\"bucket\"": "String"}, "code": ["void", "function", "(", ")", "{", "Mockito", ".", "when", "(", "mClient", ".", "listObjects", "(", "Matchers", ".", "any", "(", "ListObjectsRequest", ".", "class", ")", ")", ")", ".", "thenThrow", "(", "ServiceException", ".", "class", ")", ";", "boolean", "result", "=", "mOSSUnderFileSystem", ".", "delete", "(", "PATH", ",", "false", ")", ";", "Assert", ".", "assertFalse", "(", "result", ")", ";", "}"], "memberFunctions": {"before": [["void"]], "renameOnServiceException": [["void"]], "deleteRecursiveOnServiceException": [["void"]]}, "className": "OSSUnderFileSystemTest", "renamed": ["void", "function", "(", ")", "{", "Mockito", ".", "when", "(", "mClient", ".", "listObjects", "(", "Matchers", ".", "any", "(", "ListObjectsRequest", ".", "class", ")", ")", ")", ".", "thenThrow", "(", "ServiceException", ".", "class", ")", ";", "boolean", "loc0", "=", "mOSSUnderFileSystem", ".", "delete", "(", "PATH", ",", "false", ")", ";", "Assert", ".", "assertFalse", "(", "loc0", ")", ";", "}"], "nl": "Test case for  {@link OSSUnderFileSystem#delete(String,boolean)}.", "nlToks": ["Test", "case", "for", "-LCB-", "@link", "OSSUnderFileSystem", "#delete", "-LRB-", "String", ",", "boolean", "-RRB-", "-RCB-", "."], "path": "poemlin/alluxio/tree/master/underfs/oss/src/test/java/alluxio/underfs/oss/OSSUnderFileSystemTest.java", "idx": 2276}
{"memberVariables": {"languageToLanguageVersion=new HashMap<>()": "Map<Language,LanguageVersion>"}, "code": ["List", "<", "Language", ">", "function", "(", "File", "sourceFile", ")", "{", "return", "getLanguagesForFile", "(", "sourceFile", ".", "getName", "(", ")", ")", ";", "}"], "memberFunctions": {"getDefaultLanguageVersionForFile": [["LanguageVersion", "File sourceFile"], ["LanguageVersion", "String fileName"]], "getDefaultLanguageVersion": [["LanguageVersion", "Language language"]], "getExtension": [["String", "String fileName"]], "setDefaultLanguageVersion": [["LanguageVersion", "LanguageVersion languageVersion"]]}, "className": "LanguageVersionDiscoverer", "renamed": ["List", "<", "Language", ">", "function", "(", "File", "arg0", ")", "{", "return", "getLanguagesForFile", "(", "arg0", ".", "getName", "(", ")", ")", ";", "}"], "nl": "Get the Languages of a given source file.", "nlToks": ["Get", "the", "Languages", "of", "a", "given", "source", "file", "."], "path": "adangel/pmd/tree/master/pmd-core/src/main/java/net/sourceforge/pmd/lang/LanguageVersionDiscoverer.java", "idx": 2277}
{"memberVariables": {"suppressedTests=new HashSet<Method>()": "Set<Method>", "logger=Logger.getLogger(FeatureSpecificTestSuiteBuilder.class.getName())": "Logger", "subjectGenerator": "G", "name": "String", "setUp": "Runnable", "tearDown": "Runnable", "features=new LinkedHashSet<Feature<?>>()": "Set<Feature<?>>"}, "code": ["B", "function", "(", "Method", "...", "methods", ")", "{", "return", "suppressing", "(", "Arrays", ".", "asList", "(", "methods", ")", ")", ";", "}"], "memberFunctions": {"withSetUp": [["B", "Runnable setUp"]], "named": [["B", "String name"]], "getName": [["String"]], "intersect": [["boolean", "Set<?> a", "Set<?> b"]], "getSetUp": [["Runnable"]], "createTestSuite": [["TestSuite"]], "checkCanCreate": [["void"]], "filterSuite": [["TestSuite", "TestSuite suite"]], "getSuppressedTests": [["Set<Method>"]], "matches": [["boolean", "Test test"]], "extractMethod": [["Method", "Test test"]], "withTearDown": [["B", "Runnable tearDown"]], "getSubjectGenerator": [["G"]], "getFeatures": [["Set<Feature<?>>"]], "formatFeatureSet": [["String", "Set<? extends Feature<?>> features"]], "makeSuiteForTesterClass": [["TestSuite", "Class<? extends AbstractTester<?>> testerClass"]], "self": [["B"]], "getTesters": [["List<Class<? extends AbstractTester>>"]], "usingGenerator": [["B", "G subjectGenerator"]], "getTearDown": [["Runnable"]], "withFeatures": [["B", "Feature<?>... features"], ["B", "Iterable<? extends Feature<?>> features"]]}, "className": "FeatureSpecificTestSuiteBuilder", "renamed": ["B", "function", "(", "Method", "...", "arg0", ")", "{", "return", "suppressing", "(", "Arrays", ".", "asList", "(", "arg0", ")", ")", ";", "}"], "nl": "Prevents the given methods from being run as part of the test suite. Note: in principle this should never need to be used, but it might be useful if the semantics of an implementation disagree in unforeseen ways with the semantics expected by a test, or to keep dependent builds clean in spite of an erroneous test.", "nlToks": ["Prevents", "the", "given", "methods", "from", "being", "run", "as", "part", "of", "the", "test", "suite", ".", "Note", ":", "in", "principle", "this", "should", "never", "need", "to", "be", "used", ",", "but", "it", "might", "be", "useful", "if", "the", "semantics", "of", "an", "implementation", "disagree", "in", "unforeseen", "ways", "with", "the", "semantics", "expected", "by", "a", "test", ",", "or", "to", "keep", "dependent", "builds", "clean", "in", "spite", "of", "an", "erroneous", "test", "."], "path": "hazendaz/guava/tree/master/guava-testlib/src/com/google/common/collect/testing/FeatureSpecificTestSuiteBuilder.java", "idx": 2279}
{"memberVariables": {"sHasRemoteControlAPIs=Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH": "boolean"}, "code": ["void", "function", "(", "AudioManager", "audioManager", ",", "RemoteControlClientCompat", "remoteControlClient", ")", "{", "if", "(", "!", "sHasRemoteControlAPIs", ")", "{", "return", ";", "}", "audioManager", ".", "registerRemoteControlClient", "(", "(", "RemoteControlClient", ")", "remoteControlClient", ".", "getActualRemoteControlClientObject", "(", ")", ")", ";", "}"], "memberFunctions": {"unregisterRemoteControlClient": [["void", "AudioManager audioManager", "RemoteControlClientCompat remoteControlClient"]]}, "className": "RemoteControlHelper", "renamed": ["void", "function", "(", "AudioManager", "arg0", ",", "RemoteControlClientCompat", "arg1", ")", "{", "if", "(", "!", "sHasRemoteControlAPIs", ")", "{", "return", ";", "}", "arg0", ".", "registerRemoteControlClient", "(", "(", "RemoteControlClient", ")", "arg1", ".", "getActualRemoteControlClientObject", "(", ")", ")", ";", "}"], "nl": "Registers the instance of RemoteControlClient with the AudioManager.", "nlToks": ["Registers", "the", "instance", "of", "RemoteControlClient", "with", "the", "AudioManager", "."], "path": "phpeng-ms/CastCompanionLibrary-android/tree/master/src/com/google/android/libraries/cast/companionlibrary/remotecontrol/RemoteControlHelper.java", "idx": 2280}
{"memberVariables": {"maxSizeSent": "long", "LEVEL_TRANSPORT=1": "int", "faultsSending": "long", "faultsReceiving": "long", "LEVEL_NONE=0": "int", "messagesSent": "long", "minSizeReceived": "long", "maxSizeReceived": "long", "timeoutsSending": "long", "bytesSent": "long", "avgSizeSent": "double", "responseCodeTable=Collections.synchronizedMap(new HashMap<Integer,Long>())": "Map<Integer,Long>", "lastResetTime=System.currentTimeMillis()": "long", "LEVEL_FULL=2": "int", "timeoutsReceiving": "long", "bytesReceived": "long", "ONE=(long)1": "Long", "level=LEVEL_FULL": "int", "avgSizeReceived": "double", "messagesReceived": "long", "minSizeSent": "long"}, "code": ["long", "function", "(", ")", "{", "return", "messagesSent", ";", "}"], "memberFunctions": {"notifyReceivedMessageSize": [["void", "long size"], ["void", "MessageContext mc", "long size"]], "getAvgSizeSent": [["double"]], "incrementBytesReceived": [["void", "long size"], ["void", "MessageContext mc", "long size"]], "getBytesReceived": [["long"]], "setLevel": [["void", "int level"]], "incrementFaultsReceiving": [["void"], ["void", "int errorCode", "MessageContext mc"]], "getResponseCodeTable": [["Map<Integer,Long>"]], "getTimeoutsSending": [["long"]], "getFaultsSending": [["long"]], "getBytesSent": [["long"]], "getLastResetTime": [["long"]], "incrementFaultsSending": [["void"], ["void", "int errorCode", "MessageContext mc"]], "getMaxSizeReceived": [["long"]], "incrementTimeoutsSending": [["void"], ["void", "MessageContext mc"]], "getMinSizeReceived": [["long"]], "getMsgLevelMetrics": [["MessageLevelMetricsCollector", "MessageContext mc"]], "getMinSizeSent": [["long"]], "getTimeoutsReceiving": [["long"]], "incrementMessagesReceived": [["void"], ["void", "MessageContext mc"]], "incrementBytesSent": [["void", "long size"], ["void", "MessageContext mc", "long size"]], "getMessagesReceived": [["long"]], "getLevel": [["int"]], "getFaultsReceiving": [["long"]], "getMaxSizeSent": [["long"]], "incrementMessagesSent": [["void"], ["void", "MessageContext mc"]], "reset": [["void"]], "notifySentMessageSize": [["void", "long size"], ["void", "MessageContext mc", "long size"]], "reportResponseCode": [["void", "int respCode"], ["void", "MessageContext mc", "int respCode"]], "getAvgSizeReceived": [["double"]], "incrementTimeoutsReceiving": [["void"], ["void", "MessageContext mc"]]}, "className": "MetricsCollector", "renamed": ["long", "function", "(", ")", "{", "return", "messagesSent", ";", "}"], "nl": "Get the number of messages sent. This metrics is incremented after a message has been completely and successfully put on the wire.", "nlToks": ["Get", "the", "number", "of", "messages", "sent", ".", "This", "metrics", "is", "incremented", "after", "a", "message", "has", "been", "completely", "and", "successfully", "put", "on", "the", "wire", "."], "path": "harsha89/wso2-axis2-transports/tree/master/modules/base/src/main/java/org/apache/axis2/transport/base/MetricsCollector.java", "idx": 2281}
{"memberVariables": {"hashcode_cache=null": "Integer", "_all=new HashMap<>(11)": "HashMap<lalr_item,lalr_item>"}, "code": ["lalr_item", "function", "(", ")", "{", "lalr_item", "result", ";", "if", "(", "_all", ".", "values", "(", ")", ".", "size", "(", ")", "==", "0", ")", "return", "null", ";", "result", "=", "iterator", "(", ")", ".", "next", "(", ")", ";", "remove", "(", "result", ")", ";", "return", "result", ";", "}"], "memberFunctions": {"add": [["lalr_item", "lalr_item itm"], ["void", "lalr_item_set other"]], "not_null": [["void", "Object obj"]], "is_superset_of": [["boolean", "lalr_item_set other"]], "remove": [["void", "lalr_item itm"], ["void", "lalr_item_set other"]], "iterator": [["Iterator<lalr_item>"]], "contains": [["boolean", "lalr_item itm"]], "size": [["int"]], "find": [["lalr_item", "lalr_item itm"]], "hashCode": [["int"]], "equals": [["boolean", "lalr_item_set other"], ["boolean", "Object other"]], "is_subset_of": [["boolean", "lalr_item_set other"]], "compute_closure": [["void"]], "toString": [["String"]]}, "className": "lalr_item_set", "renamed": ["lalr_item", "function", "(", ")", "{", "lalr_item", "loc0", ";", "if", "(", "_all", ".", "values", "(", ")", ".", "size", "(", ")", "==", "0", ")", "return", "null", ";", "loc0", "=", "iterator", "(", ")", ".", "next", "(", ")", ";", "remove", "(", "loc0", ")", ";", "return", "loc0", ";", "}"], "nl": "Remove and return one item from the set (done in hash order). Return null if there are no items in the set.", "nlToks": ["Remove", "and", "return", "one", "item", "from", "the", "set", "-LRB-", "done", "in", "hash", "order", "-RRB-", ".", "Return", "null", "if", "there", "are", "no", "items", "in", "the", "set", "."], "path": "polyglot-compiler/polyglot/tree/master/tools/java_cup/src/java_cup/lalr_item_set.java", "idx": 2286}
{"memberVariables": {"theURI": "URI"}, "code": ["URI", "function", "(", ")", "{", "return", "theURI", ";", "}"], "memberFunctions": {}, "className": "URLConnectionInfo", "renamed": ["URI", "function", "(", ")", "{", "return", "theURI", ";", "}"], "nl": "This field returns the URI associated with the connection in question.", "nlToks": ["This", "field", "returns", "the", "URI", "associated", "with", "the", "connection", "in", "question", "."], "path": "primesign/cxf/tree/master/rt/transports/http/src/main/java/org/apache/cxf/transport/http/URLConnectionInfo.java", "idx": 2287}
{"memberVariables": {"LESS_PATH=CLASSPATH_PREFIX + \"/less/\"": "String", "LESS_JS={\"less-env.js\",\"less.js\",\"less-rtl-plugin.js\",\"less-api.js\"}": "String[]", "lastModified=new HashMap<String,Long>()": "Map<String,Long>", "scope": "Scriptable", "parse": "Function", "CLASSPATH_PREFIX=\"META-INF\"": "String", "PATTERN_THEME_REQUEST=Pattern.compile(\"(.*)/(library\\\\.css|library-RTL\\\\.css|library-parameters\\\\.json)$\")": "Pattern", "config": "FilterConfig", "cache=new HashMap<String,String>()": "Map<String,String>", "PATTERN_THEME_REQUEST_PARTS=Pattern.compile(\"(/resources/(.*)/themes/)([^/]*)/.*\")": "Pattern"}, "code": ["void", "function", "(", "String", "msg", ")", "{", "this", ".", "config", ".", "getServletContext", "(", ")", ".", "log", "(", "this", ".", "config", ".", "getFilterName", "(", ")", "+", "\": \"", "+", "msg", ")", ";", "}"], "memberFunctions": {"init": [["void", "FilterConfig filterConfig"]], "findResource": [["URL", "String path"]], "compile": [["void", "String sourcePath", "boolean compressCSS", "boolean compressJSON"]], "load": [["String", "String path"]], "doFilter": [["void", "ServletRequest request", "ServletResponse response", "FilterChain chain"]], "destroy": [["void"]], "compileCSS": [["Scriptable", "String input", "String path", "boolean compressCSS", "boolean compressJSON", "String libraryName"]], "getMaxLastModified": [["long", "String[] paths"]]}, "className": "LessFilter", "renamed": ["void", "function", "(", "String", "arg0", ")", "{", "this", ".", "config", ".", "getServletContext", "(", ")", ".", "log", "(", "this", ".", "config", ".", "getFilterName", "(", ")", "+", "\"srini_string\"", "+", "arg0", ")", ";", "}"], "nl": "logs the message prepended by the filter name (copy of  {@link GenericServlet#log(String)})", "nlToks": ["logs", "the", "message", "prepended", "by", "the", "filter", "name", "-LRB-", "copy", "of", "-LCB-", "@link", "GenericServlet", "#log", "-LRB-", "String", "-RRB-", "-RCB-", "-RRB-"], "path": "piejanssens/openui5/tree/master/src/testsuite-utils/src/main/java/com/sap/openui5/LessFilter.java", "idx": 2288}
{"memberVariables": {"serialVersionUID=8619915839101228583L": "long", "jitProvisioningEnabled": "boolean", "PROVISIONING_USER=\"UN\"": "String", "PROVISIONING_DOMAIN=\"UD\"": "String", "PROVISIONING_IDP=\"IDP\"": "String", "PROVISIONING_TENANT=\"TD\"": "String"}, "code": ["String", "function", "(", ")", "{", "return", "null", ";", "}"], "memberFunctions": {"init": [["void", "Property[] provisioningProperties"]], "getPassword": [["String", "Map<ClaimMapping,List<String>> attributeMap"]], "getSingleValuedClaims": [["Map<String,String>", "Map<ClaimMapping,List<String>> attributeMap"]], "getDomainFromUserName": [["String", "String username"]], "getUserNames": [["List<String>", "Map<ClaimMapping,List<String>> attributeMap"]], "removeDomainFromUserName": [["String", "String username"]], "isJitProvisioningEnabled": [["boolean"]], "getGroupNames": [["List<String>", "Map<ClaimMapping,List<String>> attributeMap"]], "provision": [["ProvisionedIdentifier", "ProvisioningEntity provisioningEntity"]], "buildUserId": [["String", "ProvisioningEntity provisioningEntity", "String provisioningPattern", "String separator", "String idpName"]], "getUserStoreDomainName": [["String"]], "buildProvisioningEntries": [["String[]", "String provisioningPattern"]]}, "className": "AbstractOutboundProvisioningConnector", "renamed": ["String", "function", "(", ")", "{", "return", "null", ";", "}"], "nl": "override only if needed - if claims are controlled by the identity provider, this will return null. If it is connector specific this must return the corresponding claim dialect.", "nlToks": ["override", "only", "if", "needed", "-", "if", "claims", "are", "controlled", "by", "the", "identity", "provider", ",", "this", "will", "return", "null", ".", "If", "it", "is", "connector", "specific", "this", "must", "return", "the", "corresponding", "claim", "dialect", "."], "path": "harsha1979/carbon-identity/tree/master/components/provisioning/org.wso2.carbon.identity.provisioning/src/main/java/org/wso2/carbon/identity/provisioning/AbstractOutboundProvisioningConnector.java", "idx": 2291}
{"memberVariables": {"gsv": "GSVSentence", "EXAMPLE=\"$GPGSV,3,2,12,15,56,182,51,17,38,163,47,18,63,058,50,21,53,329,47*73\"": "String", "empty": "GSVSentence"}, "code": ["void", "function", "(", ")", "{", "GSVSentence", "g", "=", "new", "GSVParser", "(", "\"$GPGSV,3,2,12,15,56,182,51,17,38,163,47\"", ")", ";", "List", "<", "SatelliteInfo", ">", "sat", "=", "g", ".", "getSatelliteInfo", "(", ")", ";", "assertEquals", "(", "2", ",", "sat", ".", "size", "(", ")", ")", ";", "testSatelliteInfo", "(", "sat", ".", "get", "(", "0", ")", ",", "\"15\"", ",", "56", ",", "182", ",", "51", ")", ";", "testSatelliteInfo", "(", "sat", ".", "get", "(", "1", ")", ",", "\"17\"", ",", "38", ",", "163", ",", "47", ")", ";", "}"], "memberFunctions": {"testSetSatelliteCount": [["void"]], "testIsFirst": [["void"]], "testSetSatelliteInfo": [["void"]], "testGetSentenceIndex": [["void"]], "testGetSatelliteCount": [["void"]], "testConstructor": [["void"]], "testGetSatelliteInfo": [["void"]], "testParserGlonassGSV": [["void"]], "testGetSentenceCount": [["void"]], "testGetSatelliteInfoWithEmptyFields": [["void"]], "testSetSentenceCount": [["void"]], "setUp": [["void"]], "testIsLast": [["void"]], "testSatelliteInfo": [["void", "SatelliteInfo si", "String id", "int elevation", "int azimuth", "int noise"]]}, "className": "GSVTest", "renamed": ["void", "function", "(", ")", "{", "GSVSentence", "loc0", "=", "new", "GSVParser", "(", "\"srini_string\"", ")", ";", "List", "<", "SatelliteInfo", ">", "loc1", "=", "loc0", ".", "getSatelliteInfo", "(", ")", ";", "assertEquals", "(", "2", ",", "loc1", ".", "size", "(", ")", ")", ";", "testSatelliteInfo", "(", "loc1", ".", "get", "(", "0", ")", ",", "\"srini_string\"", ",", "56", ",", "182", ",", "51", ")", ";", "testSatelliteInfo", "(", "loc1", ".", "get", "(", "1", ")", ",", "\"srini_string\"", ",", "38", ",", "163", ",", "47", ")", ";", "}"], "nl": "Test method for {@link net.sf.marineapi.nmea.parser.GSVParser#getSatelliteInfo()}.", "nlToks": ["Test", "method", "for", "-LCB-", "@link", "net.sf.marineapi.nmea.parser.GSVParser", "#getSatelliteInfo", "-LRB-", "-RRB-", "-RCB-", "."], "path": "pkoziol/marine-api/tree/master/src/test/java/net/sf/marineapi/nmea/parser/GSVTest.java", "idx": 2292}
{"memberVariables": {"mBuffer=null": "ByteBuffer", "LENGTH=5": "int"}, "code": ["void", "function", "(", ")", "{", "DataByteBuffer", "data", "=", "new", "DataByteBuffer", "(", "mBuffer", ",", "LENGTH", ")", ";", "Object", "output", "=", "data", ".", "getNettyOutput", "(", ")", ";", "Assert", ".", "assertTrue", "(", "output", "instanceof", "ByteBuf", "||", "output", "instanceof", "FileRegion", ")", ";", "}"], "memberFunctions": {"before": [["void"]], "length": [["void"]], "readOnlyByteBuffer": [["void"]]}, "className": "DataByteBufferTest", "renamed": ["void", "function", "(", ")", "{", "DataByteBuffer", "loc0", "=", "new", "DataByteBuffer", "(", "mBuffer", ",", "LENGTH", ")", ";", "Object", "loc1", "=", "loc0", ".", "getNettyOutput", "(", ")", ";", "Assert", ".", "assertTrue", "(", "loc1", "instanceof", "ByteBuf", "||", "loc1", "instanceof", "FileRegion", ")", ";", "}"], "nl": "Tests the  {@link DataByteBuffer#getNettyOutput()} method.", "nlToks": ["Tests", "the", "-LCB-", "@link", "DataByteBuffer", "#getNettyOutput", "-LRB-", "-RRB-", "-RCB-", "method", "."], "path": "poemlin/alluxio/tree/master/core/server/src/test/java/alluxio/network/protocol/databuffer/DataByteBufferTest.java", "idx": 2293}
{"memberVariables": {"CONFIG=registerLoggerByName(\"org.xhtmlrenderer.config\")": "String", "MATCH=registerLoggerByName(\"org.xhtmlrenderer.match\")": "String", "RENDER=registerLoggerByName(\"org.xhtmlrenderer.render\")": "String", "CSS_PARSE=registerLoggerByName(\"org.xhtmlrenderer.css-parse\")": "String", "LOGGER_NAMES=new ArrayList(20)": "List", "EXCEPTION=registerLoggerByName(\"org.xhtmlrenderer.exception\")": "String", "loggingEnabled=true": "boolean", "XML_ENTITIES=registerLoggerByName(\"org.xhtmlrenderer.load.xml-entities\")": "String", "JUNIT=registerLoggerByName(\"org.xhtmlrenderer.junit\")": "String", "INIT=registerLoggerByName(\"org.xhtmlrenderer.init\")": "String", "loggerImpl": "XRLogger", "LOAD=registerLoggerByName(\"org.xhtmlrenderer.load\")": "String", "LAYOUT=registerLoggerByName(\"org.xhtmlrenderer.layout\")": "String", "GENERAL=registerLoggerByName(\"org.xhtmlrenderer.general\")": "String", "CASCADE=registerLoggerByName(\"org.xhtmlrenderer.cascade\")": "String", "initPending=true": "boolean"}, "code": ["boolean", "function", "(", ")", "{", "return", "loggingEnabled", ";", "}"], "memberFunctions": {"exception": [["void", "String msg"], ["void", "String msg", "Throwable th"]], "getLoggerImpl": [["XRLogger"]], "init": [["void", "String msg"], ["void", "Level level", "String msg"], ["void", "Level level", "String msg", "Throwable th"], ["void"]], "junit": [["void", "String msg"], ["void", "Level level", "String msg"], ["void", "Level level", "String msg", "Throwable th"]], "listRegisteredLoggers": [["List"]], "cssParse": [["void", "String msg"], ["void", "Level level", "String msg"], ["void", "Level level", "String msg", "Throwable th"]], "log": [["void", "String where", "Level level", "String msg"], ["void", "String where", "Level level", "String msg", "Throwable th"]], "cascade": [["void", "String msg"], ["void", "Level level", "String msg"], ["void", "Level level", "String msg", "Throwable th"]], "match": [["void", "String msg"], ["void", "Level level", "String msg"], ["void", "Level level", "String msg", "Throwable th"]], "main": [["void", "String args[]"]], "registerLoggerByName": [["String", "final String loggerName"]], "setLevel": [["void", "String log", "Level level"]], "layout": [["void", "String msg"], ["void", "Level level", "String msg"], ["void", "Level level", "String msg", "Throwable th"]], "setLoggingEnabled": [["void", "boolean loggingEnabled"]], "general": [["void", "String msg"], ["void", "Level level", "String msg"], ["void", "Level level", "String msg", "Throwable th"]], "load": [["void", "String msg"], ["void", "Level level", "String msg"], ["void", "Level level", "String msg", "Throwable th"]], "setLoggerImpl": [["void", "XRLogger loggerImpl"]], "render": [["void", "String msg"], ["void", "Level level", "String msg"], ["void", "Level level", "String msg", "Throwable th"]], "xmlEntities": [["void", "String msg"], ["void", "Level level", "String msg"], ["void", "Level level", "String msg", "Throwable th"]]}, "className": "XRLog", "renamed": ["boolean", "function", "(", ")", "{", "return", "loggingEnabled", ";", "}"], "nl": "Whether logging is on or off.", "nlToks": ["Whether", "logging", "is", "on", "or", "off", "."], "path": "plutogeek/flyingsaucer/tree/master/flying-saucer-core/src/main/java/org/xhtmlrenderer/util/XRLog.java", "idx": 2294}
{"memberVariables": {"clients": "Map<String,RegisteredClient>"}, "code": ["RegisteredClient", "function", "(", "ServerConfiguration", "issuer", ")", "{", "return", "clients", ".", "get", "(", "issuer", ".", "getIssuer", "(", ")", ")", ";", "}"], "memberFunctions": {"afterPropertiesSet": [["void"]], "getClients": [["Map<String,RegisteredClient>"]], "setClients": [["void", "Map<String,RegisteredClient> clients"]]}, "className": "StaticClientConfigurationService", "renamed": ["RegisteredClient", "function", "(", "ServerConfiguration", "arg0", ")", "{", "return", "clients", ".", "get", "(", "arg0", ".", "getIssuer", "(", ")", ")", ";", "}"], "nl": "Get the client configured for this issuer", "nlToks": ["Get", "the", "client", "configured", "for", "this", "issuer"], "path": "adilansari/OpenID-Connect-Java-Spring-Server/tree/master/openid-connect-client/src/main/java/org/mitre/openid/connect/client/service/impl/StaticClientConfigurationService.java", "idx": 2295}
{"memberVariables": {}, "code": ["String", "function", "(", "String", "fileName", ")", "{", "String", "name", "=", "fileName", ";", "int", "index", "=", "fileName", ".", "lastIndexOf", "(", "'.'", ")", ";", "if", "(", "index", "!=", "-", "1", ")", "{", "name", "=", "fileName", ".", "substring", "(", "0", ",", "index", ")", ";", "}", "return", "name", ";", "}"], "memberFunctions": {"findPatternInFile": [["boolean", "final File file", "final String pattern"]], "readFilelist": [["String", "File filelist"]], "normalizeFilename": [["String", "String fileName"]], "collectFiles": [["List<DataSource>", "String fileLocations", "FilenameFilter filenameFilter"]], "collect": [["List<DataSource>", "List<DataSource> dataSources", "String fileLocation", "FilenameFilter filenameFilter"]]}, "className": "FileUtil", "renamed": ["String", "function", "(", "String", "arg0", ")", "{", "String", "loc0", "=", "arg0", ";", "int", "loc1", "=", "arg0", ".", "lastIndexOf", "(", "'.'", ")", ";", "if", "(", "loc1", "!=", "-", "1", ")", "{", "loc0", "=", "arg0", ".", "substring", "(", "0", ",", "loc1", ")", ";", "}", "return", "loc0", ";", "}"], "nl": "Helper method to get a filename without its extension", "nlToks": ["Helper", "method", "to", "get", "a", "filename", "without", "its", "extension"], "path": "adangel/pmd/tree/master/pmd-core/src/main/java/net/sourceforge/pmd/util/FileUtil.java", "idx": 2297}
{"memberVariables": {"fields=new HashMap<>()": "Map<FieldSignature,Set<String>>", "nestedClasses=new HashMap<>()": "Map<String,ClassStats>", "memo=new HashMap<>()": "Map<ClassMetricKey,Double>", "operations=new HashMap<>()": "Map<OperationSignature,Map<String,OperationStats>>"}, "code": ["boolean", "function", "(", "String", "name", ",", "FieldSigMask", "mask", ")", "{", "for", "(", "FieldSignature", "sig", ":", "fields", ".", "keySet", "(", ")", ")", "{", "if", "(", "mask", ".", "covers", "(", "sig", ")", ")", "{", "if", "(", "fields", ".", "get", "(", "sig", ")", ".", "contains", "(", "name", ")", ")", "{", "return", "true", ";", "}", "}", "}", "return", "false", ";", "}"], "memberFunctions": {"compute": [["double", "OperationMetricKey key", "ASTMethodOrConstructorDeclaration node", "String name", "boolean force"], ["double", "Metrics.ClassMetricKey key", "ASTClassOrInterfaceDeclaration node", "boolean force"]], "addOperation": [["void", "String name", "OperationSignature sig"]], "addField": [["void", "String name", "FieldSignature sig"]], "getNestedClassStats": [["ClassStats", "String className", "boolean createIfNotFound"]]}, "className": "ClassStats", "renamed": ["boolean", "function", "(", "String", "arg0", ",", "FieldSigMask", "arg1", ")", "{", "for", "(", "FieldSignature", "loc0", ":", "fields", ".", "keySet", "(", ")", ")", "{", "if", "(", "arg1", ".", "covers", "(", "loc0", ")", ")", "{", "if", "(", "fields", ".", "get", "(", "loc0", ")", ".", "contains", "(", "arg0", ")", ")", "{", "return", "true", ";", "}", "}", "}", "return", "false", ";", "}"], "nl": "Checks whether the class declares a field by the name given which is covered by the signature mask.", "nlToks": ["Checks", "whether", "the", "class", "declares", "a", "field", "by", "the", "name", "given", "which", "is", "covered", "by", "the", "signature", "mask", "."], "path": "adangel/pmd/tree/master/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/oom/ClassStats.java", "idx": 2298}
{"memberVariables": {"listeners": "EventListenerList"}, "code": ["void", "function", "(", "TreePath", "path", ")", "{", "Object", "node", "=", "path", ".", "getLastPathComponent", "(", ")", ";", "TreePath", "parentPath", "=", "path", ".", "getParentPath", "(", ")", ";", "if", "(", "parentPath", "==", "null", ")", "{", "fireChildrenChanged", "(", "path", ",", "null", ",", "null", ")", ";", "}", "else", "{", "Object", "parent", "=", "parentPath", ".", "getLastPathComponent", "(", ")", ";", "fireChildChanged", "(", "parentPath", ",", "getIndexOfChild", "(", "parent", ",", "node", ")", ",", "node", ")", ";", "}", "}"], "memberFunctions": {"fireChildAdded": [["void", "TreePath parentPath", "int index", "Object child"]], "fireChildRemoved": [["void", "TreePath parentPath", "int index", "Object child"]], "getIndexOfChild": [["int", "Object parent", "Object child"]], "fireTreeStructureChanged": [["void", "TreePath parentPath"]], "addTreeModelListener": [["void", "TreeModelListener l"]], "fireNewRoot": [["void"]], "fireChildrenAdded": [["void", "TreePath parentPath", "int[] indices", "Object[] children"]], "removeTreeModelListener": [["void", "TreeModelListener l"]], "fireChildrenChanged": [["void", "TreePath parentPath", "int[] indices", "Object[] children"]], "fireChildrenRemoved": [["void", "TreePath parentPath", "int[] indices", "Object[] children"]], "clone": [["Object"]], "fireStructureChanged": [["void"]], "firePathLeafStateChanged": [["void", "TreePath path"]], "fireChildChanged": [["void", "TreePath parentPath", "int index", "Object child"]]}, "className": "AbstractTreeModel", "renamed": ["void", "function", "(", "TreePath", "arg0", ")", "{", "Object", "loc0", "=", "arg0", ".", "getLastPathComponent", "(", ")", ";", "TreePath", "loc1", "=", "arg0", ".", "getParentPath", "(", ")", ";", "if", "(", "loc1", "==", "null", ")", "{", "fireChildrenChanged", "(", "arg0", ",", "null", ",", "null", ")", ";", "}", "else", "{", "Object", "loc2", "=", "loc1", ".", "getLastPathComponent", "(", ")", ";", "fireChildChanged", "(", "loc1", ",", "getIndexOfChild", "(", "loc2", ",", "loc0", ")", ",", "loc0", ")", ";", "}", "}"], "nl": "Call when the path itself has changed, but no structure changes have occurred.", "nlToks": ["Call", "when", "the", "path", "itself", "has", "changed", ",", "but", "no", "structure", "changes", "have", "occurred", "."], "path": "0xwindows/WS-Attacker/tree/master/framework/src/main/java/wsattacker/gui/composition/AbstractTreeModel.java", "idx": 2299}
{"memberVariables": {"RETVAL_MALFORMED=3": "int", "RETVAL_OK=0": "int", "RETVAL_ERROR=1": "int", "RETVAL_NOENTRY=2": "int"}, "code": ["void", "function", "(", "long", "xid", ",", "int", "retval", ",", "ServiceInfoStat", "[", "]", "info", ")", "{", "}"], "memberFunctions": {"onServiceRegistration": [["void", "ServiceID id", "int flags", "int prefixBits", "InetAddress addr", "InetAddress oldAddr"]], "onServiceAdd": [["void", "long xid", "int retval", "ServiceInfo[] info"]], "onServiceUnregistration": [["void", "ServiceID id", "int flags", "int prefixBits", "InetAddress addr"]], "onServiceDelayed": [["void", "long xid", "long pktId", "ServiceID service"]], "onServiceModify": [["void", "long xid", "int retval", "ServiceInfoStat[] info"]], "onFlowStatUpdate": [["void", "long xid", "int retval", "FlowStat[] stats", "boolean more"]], "getRetvalString": [["String", "int retval"]], "onServiceGet": [["void", "long xid", "int retval", "ServiceInfo[] info"]]}, "className": "HostCtrlCallbacks", "renamed": ["void", "function", "(", "long", "arg0", ",", "int", "arg1", ",", "ServiceInfoStat", "[", "]", "arg2", ")", "{", "}"], "nl": "Called as a result of a previous service removal request.", "nlToks": ["Called", "as", "a", "result", "of", "a", "previous", "service", "removal", "request", "."], "path": "princeton-sns/serval/tree/master/src/libservalctrl/java/src/org/servalarch/servalctrl/HostCtrlCallbacks.java", "idx": 2300}
{"memberVariables": {"reason": "String", "feedId": "String", "testId": "String", "batchId": "String", "runStatus": "String"}, "code": ["void", "function", "(", "String", "testId", ")", "{", "this", ".", "testId", "=", "testId", ";", "}"], "memberFunctions": {"setFeedId": [["void", "String feedId"]], "isFeedRunnable": [["boolean"]], "getReason": [["String"]], "getRunStatus": [["String"]], "setReason": [["void", "String reason"]], "getBatchId": [["String"]], "toString": [["String"]], "getFeedId": [["String"]], "setBatchId": [["void", "String batchId"]], "getTestId": [["String"]], "setRunStatus": [["void", "String runStatus"]]}, "className": "FeedConfigResponse", "renamed": ["void", "function", "(", "String", "arg0", ")", "{", "this", ".", "testId", "=", "arg0", ";", "}"], "nl": "Sets the test id.", "nlToks": ["Sets", "the", "test", "id", "."], "path": "pkesireddy/portico_fletcher/tree/master/FetcherTesterService/src/main/java/org/ithaka/cm/fetchertester/model/FeedConfigResponse.java", "idx": 2301}
{"memberVariables": {"m_ioSession": "IoSession", "m_publicAddress": "InetAddress", "m_permittedAddresses=Collections.synchronizedMap(new LRUMap(100))": "Map<InetAddress,InetAddress>", "m_trackedRemoteHosts=Collections.synchronizedSet(new HashSet<InetAddress>())": "Set<InetAddress>", "LOG=LoggerFactory.getLogger(TurnClientImpl.class)": "Logger", "m_mappedAddress": "InetSocketAddress", "m_connections=new ConcurrentHashMap<InetSocketAddress,IoSession>()": "Map<InetSocketAddress,IoSession>", "m_allocatedTurnServer": "TcpAllocatedTurnServer"}, "code": ["void", "function", "(", ")", "{", "final", "Iterator", "<", "IoSession", ">", "iter", "=", "this", ".", "m_connections", ".", "values", "(", ")", ".", "iterator", "(", ")", ";", "while", "(", "iter", ".", "hasNext", "(", ")", ")", "{", "final", "IoSession", "readerWriter", "=", "iter", ".", "next", "(", ")", ";", "readerWriter", ".", "close", "(", ")", ";", "iter", ".", "remove", "(", ")", ";", "}", "}"], "memberFunctions": {"hasActiveDestination": [["boolean"]], "updateConnectionStatus": [["void", "final InetSocketAddress remoteAddress", "final ConnectionStatus status"]], "handleConnect": [["void", "final InetSocketAddress remoteAddress"]], "getMappedAddress": [["InetSocketAddress"]], "getRelayAddress": [["InetSocketAddress"]], "addConnection": [["void", "final IoSession session"]], "getIoSession": [["IoSession"]], "hasIncomingPermission": [["boolean", "final IoSession session"]], "startServer": [["void"]], "removeConnection": [["void", "final IoSession session"]], "getNumConnections": [["int"]], "write": [["boolean", "final InetSocketAddress remoteAddress", "final ByteBuffer data"]], "close": [["void"]]}, "className": "TurnClientImpl", "renamed": ["void", "function", "(", ")", "{", "final", "Iterator", "<", "IoSession", ">", "loc0", "=", "this", ".", "m_connections", ".", "values", "(", ")", ".", "iterator", "(", ")", ";", "while", "(", "loc0", ".", "hasNext", "(", ")", ")", "{", "final", "IoSession", "loc1", "=", "loc0", ".", "next", "(", ")", ";", "loc1", ".", "close", "(", ")", ";", "loc0", ".", "remove", "(", ")", ";", "}", "}"], "nl": "Closes all connections to remote hosts associated with this TURN client.", "nlToks": ["Closes", "all", "connections", "to", "remote", "hosts", "associated", "with", "this", "TURN", "client", "."], "path": "adamfisk/littleshoot-client/tree/master/common/turn/server/src/main/java/org/lastbamboo/common/turn/server/TurnClientImpl.java", "idx": 2302}
{"memberVariables": {"user=null": "String", "run=1": "int", "appName=null": "String", "lastModifiedTime": "Date", "conf=null": "String", "status=WorkflowJob.Status.PREP": "Status", "appPath=null": "String", "consoleUrl": "String", "externalId=null": "String", "createdTime": "Date", "startTime": "Date", "id": "String", "endTime": "Date", "actions": "List<? extends JsonWorkflowAction>", "group": "String"}, "code": ["JSONArray", "function", "(", "List", "<", "?", "extends", "JsonWorkflowJob", ">", "workflows", ")", "{", "JSONArray", "array", "=", "new", "JSONArray", "(", ")", ";", "if", "(", "workflows", "!=", "null", ")", "{", "for", "(", "JsonWorkflowJob", "node", ":", "workflows", ")", "{", "array", ".", "add", "(", "node", ".", "toJSONObject", "(", ")", ")", ";", "}", "}", "return", "array", ";", "}"], "memberFunctions": {"getConsoleUrl": [["String"]], "setActions": [["void", "List<? extends JsonWorkflowAction> nodes"]], "getUser": [["String"]], "getAppPath": [["String"]], "getId": [["String"]], "getActions": [["List<WorkflowAction>"]], "setRun": [["void", "int run"]], "getExternalId": [["String"]], "getStatus": [["Status"]], "setAppPath": [["void", "String appPath"]], "getEndTime": [["Date"]], "toJSONObject": [["JSONObject"]], "setId": [["void", "String id"]], "setCreatedTime": [["void", "Date createdTime"]], "getStartTime": [["Date"]], "setStartTime": [["void", "Date startTime"]], "setExternalId": [["void", "String externalId"]], "setUser": [["void", "String user"]], "getRun": [["int"]], "fromJSONArray": [["List<WorkflowJob>", "JSONArray array"]], "getAppName": [["String"]], "setAppName": [["void", "String appName"]], "getConf": [["String"]], "getLastModifiedTime": [["Date"]], "setLastModifiedTime": [["void", "Date lastModTime"]], "setConsoleUrl": [["void", "String consoleUrl"]], "setConf": [["void", "String conf"]], "setStatus": [["void", "Status status"]], "setGroup": [["void", "String group"]], "setEndTime": [["void", "Date endTime"]], "getGroup": [["String"]], "toString": [["String"]], "getCreatedTime": [["Date"]]}, "className": "JsonWorkflowJob", "renamed": ["JSONArray", "function", "(", "List", "<", "?", "extends", "JsonWorkflowJob", ">", "arg0", ")", "{", "JSONArray", "loc0", "=", "new", "JSONArray", "(", ")", ";", "if", "(", "arg0", "!=", "null", ")", "{", "for", "(", "JsonWorkflowJob", "loc1", ":", "arg0", ")", "{", "loc0", ".", "add", "(", "loc1", ".", "toJSONObject", "(", ")", ")", ";", "}", "}", "return", "loc0", ";", "}"], "nl": "Convert a workflows list into a JSONArray.", "nlToks": ["Convert", "a", "workflows", "list", "into", "a", "JSONArray", "."], "path": "pingpangkuangmo/oozie/tree/master/client/src/main/java/org/apache/oozie/client/rest/JsonWorkflowJob.java", "idx": 2303}
{"memberVariables": {"rppaValue": "RPPA", "isMutated": "mutations", "gene": "String", "mutationType": "String", "caseId": "String", "cnaValue": "CNA", "geneticEventComparator=null": "GeneticEventComparator", "mrnaValue": "MRNA"}, "code": ["boolean", "function", "(", ")", "{", "return", "(", "mrnaValue", "==", "MRNA", ".", "DOWNREGULATED", ")", ";", "}"], "memberFunctions": {"getRPPAValue": [["RPPA"]], "isMutated": [["boolean"]], "isRPPADownRegulated": [["boolean"]], "caseCaseId": [["String"]], "getMutationValue": [["mutations"]], "getMrnaValue": [["MRNA"]], "isCnaAmplified": [["boolean"]], "setGeneticEventComparator": [["void", "GeneticEventComparator geneticEventComparator"]], "getGene": [["String"]], "isCnaHeterozygousDeleted": [["boolean"]], "equals": [["boolean", "Object obj"]], "getCnaValue": [["CNA"]], "toString": [["String"]], "isRPPAUpRegulated": [["boolean"]], "getMutationType": [["String"]], "isCnaHomozygouslyDeleted": [["boolean"]], "isMRNAUpRegulated": [["boolean"]]}, "className": "GeneticEventImpl", "renamed": ["boolean", "function", "(", ")", "{", "return", "(", "mrnaValue", "==", "MRNA", ".", "DOWNREGULATED", ")", ";", "}"], "nl": "Is the Gene mRNA down-regulated?", "nlToks": ["Is", "the", "Gene", "mRNA", "down-regulated", "?"], "path": "adamabeshouse/cbioportal/tree/master/core/src/main/java/org/mskcc/cbio/portal/model/GeneticEventImpl.java", "idx": 2304}
{"memberVariables": {}, "code": ["Verb", "function", "(", ")", "{", "return", "Verb", ".", "POST", ";", "}"], "memberFunctions": {"getTimestampService": [["TimestampService"]], "getAccessTokenExtractor": [["AccessTokenExtractor"]], "getAccessTokenEndpoint": [["String"]], "createService": [["OAuthService", "OAuthConfig config"]], "getAuthorizationUrl": [["String", "Token requestToken"]], "getSignatureService": [["SignatureService"]], "getBaseStringExtractor": [["BaseStringExtractor"]], "getRequestTokenEndpoint": [["String"]], "getRequestTokenExtractor": [["RequestTokenExtractor"]], "getRequestTokenVerb": [["Verb"]], "getHeaderExtractor": [["HeaderExtractor"]]}, "className": "DefaultApi10a", "renamed": ["Verb", "function", "(", ")", "{", "return", "Verb", ".", "POST", ";", "}"], "nl": "Returns the verb for the access token endpoint (defaults to POST)", "nlToks": ["Returns", "the", "verb", "for", "the", "access", "token", "endpoint", "-LRB-", "defaults", "to", "POST", "-RRB-"], "path": "pnsantos/scribe-java/tree/master/src/main/java/org/scribe/builder/api/DefaultApi10a.java", "idx": 2307}
{"memberVariables": {"mCascade": "boolean"}, "code": ["DeleteLineageOptions", "function", "(", "boolean", "cascade", ")", "{", "mCascade", "=", "cascade", ";", "return", "this", ";", "}"], "memberFunctions": {"defaults": [["DeleteLineageOptions"]], "hashCode": [["int"]], "equals": [["boolean", "Object o"]], "isCascade": [["boolean"]], "toString": [["String"]]}, "className": "DeleteLineageOptions", "renamed": ["DeleteLineageOptions", "function", "(", "boolean", "arg0", ")", "{", "mCascade", "=", "arg0", ";", "return", "this", ";", "}"], "nl": "Sets the cascade flag for this option.", "nlToks": ["Sets", "the", "cascade", "flag", "for", "this", "option", "."], "path": "poemlin/alluxio/tree/master/core/client/src/main/java/alluxio/client/lineage/options/DeleteLineageOptions.java", "idx": 2308}
{"memberVariables": {"rppaValue": "RPPA", "isMutated": "mutations", "gene": "String", "mutationType": "String", "caseId": "String", "cnaValue": "CNA", "geneticEventComparator=null": "GeneticEventComparator", "mrnaValue": "MRNA"}, "code": ["boolean", "function", "(", ")", "{", "return", "(", "mrnaValue", "==", "MRNA", ".", "UPREGULATED", ")", ";", "}"], "memberFunctions": {"getRPPAValue": [["RPPA"]], "isMutated": [["boolean"]], "isRPPADownRegulated": [["boolean"]], "caseCaseId": [["String"]], "getMutationValue": [["mutations"]], "getMrnaValue": [["MRNA"]], "isCnaAmplified": [["boolean"]], "setGeneticEventComparator": [["void", "GeneticEventComparator geneticEventComparator"]], "getGene": [["String"]], "isCnaHeterozygousDeleted": [["boolean"]], "equals": [["boolean", "Object obj"]], "getCnaValue": [["CNA"]], "isMRNADownRegulated": [["boolean"]], "toString": [["String"]], "isRPPAUpRegulated": [["boolean"]], "getMutationType": [["String"]], "isCnaHomozygouslyDeleted": [["boolean"]]}, "className": "GeneticEventImpl", "renamed": ["boolean", "function", "(", ")", "{", "return", "(", "mrnaValue", "==", "MRNA", ".", "UPREGULATED", ")", ";", "}"], "nl": "Is the Gene mRNA upregulated?", "nlToks": ["Is", "the", "Gene", "mRNA", "upregulated", "?"], "path": "adamabeshouse/cbioportal/tree/master/core/src/main/java/org/mskcc/cbio/portal/model/GeneticEventImpl.java", "idx": 2309}
{"memberVariables": {"WORKFLOW=\"oozie.el.workflow.bean\"": "String", "ACTION_TRACKER_URI=\"action.tracker.uri\"": "String", "LAST_ACTION_IN_ERROR=\"oozie.el.last.action.in.error\"": "String", "ACTION_PROTO_CONF=\"oozie.el.action.proto.conf\"": "String", "ACTION_DATA=\"action.data\"": "String", "ACTION_EXTERNAL_STATUS=\"action.external.status\"": "String", "ACTION_ERROR_CODE=\"action.error.code\"": "String", "ACTION_EXTERNAL_ID=\"action.external.id\"": "String", "ACTION=\"oozie.el.action.bean\"": "String", "ACTION_ERROR_MESSAGE=\"action.error.message\"": "String"}, "code": ["int", "function", "(", ")", "{", "return", "getWorkflow", "(", ")", ".", "getRun", "(", ")", ";", "}"], "memberFunctions": {"getWorkflow": [["WorkflowJobBean"]], "getActionVar": [["String", "String actionName", "String varName"]], "wf_callback": [["String", "String externalStatusVar"]], "setActionInfo": [["void", "WorkflowInstance workflowInstance", "WorkflowAction action"]], "wf_conf": [["String", "String property"]], "wf_actionExternalStatus": [["String", "String actionName"]], "getAction": [["WorkflowActionBean"]], "wf_actionExternalId": [["String", "String actionName"]], "getProtoActionConf": [["Configuration"]], "wf_group": [["String"]], "wf_transition": [["String", "String actionName"]], "wf_lastErrorNode": [["String"]], "wf_appPath": [["String"]], "wf_errorCode": [["String", "String actionName"]], "configureEvaluator": [["void", "ELEvaluator evaluator", "WorkflowJobBean workflow", "WorkflowActionBean action"]], "wf_id": [["String"]], "wf_actionTrackerUri": [["String", "String actionName"]], "wf_actionData": [["Map<String,String>", "String actionName"]], "wf_name": [["String"]], "wf_errorMessage": [["String", "String actionName"]], "wf_user": [["String"]]}, "className": "DagELFunctions", "renamed": ["int", "function", "(", ")", "{", "return", "getWorkflow", "(", ")", ".", "getRun", "(", ")", ";", "}"], "nl": "Return the workflow run number, unless a rerun it is always 1.", "nlToks": ["Return", "the", "workflow", "run", "number", ",", "unless", "a", "rerun", "it", "is", "always", "1", "."], "path": "pingpangkuangmo/oozie/tree/master/core/src/main/java/org/apache/oozie/DagELFunctions.java", "idx": 2311}
{"memberVariables": {"BIP32_STANDARDISATION_TIME_SECS=1369267200": "int", "keys=Maps.newHashMap()": "Map<ImmutableList<ChildNumber>,DeterministicKey>", "rootPath": "ImmutableList<ChildNumber>", "lastChildNumbers=Maps.newHashMap()": "Map<ImmutableList<ChildNumber>,ChildNumber>"}, "code": ["void", "function", "(", "DeterministicKey", "key", ")", "{", "ImmutableList", "<", "ChildNumber", ">", "path", "=", "key", ".", "getPath", "(", ")", ";", "final", "DeterministicKey", "parent", "=", "key", ".", "getParent", "(", ")", ";", "if", "(", "parent", "!=", "null", ")", "lastChildNumbers", ".", "put", "(", "parent", ".", "getPath", "(", ")", ",", "key", ".", "getChildNumber", "(", ")", ")", ";", "keys", ".", "put", "(", "path", ",", "key", ")", ";", "}"], "memberFunctions": {"getNextChildNumberToDerive": [["ChildNumber", "ImmutableList<ChildNumber> path", "boolean privateDerivation"]], "get": [["DeterministicKey", "List<ChildNumber> path", "boolean relativePath", "boolean create"]], "getRootKey": [["DeterministicKey"]], "deriveChild": [["DeterministicKey", "List<ChildNumber> parentPath", "boolean relative", "boolean createParent", "ChildNumber createChildNumber"], ["DeterministicKey", "DeterministicKey parent", "ChildNumber createChildNumber"]], "getNumChildren": [["int", "ImmutableList<ChildNumber> path"]], "deriveNextChild": [["DeterministicKey", "ImmutableList<ChildNumber> parentPath", "boolean relative", "boolean createParent", "boolean privateDerivation"]]}, "className": "DeterministicHierarchy", "renamed": ["void", "function", "(", "DeterministicKey", "arg0", ")", "{", "ImmutableList", "<", "ChildNumber", ">", "loc0", "=", "arg0", ".", "getPath", "(", ")", ";", "final", "DeterministicKey", "loc1", "=", "arg0", ".", "getParent", "(", ")", ";", "if", "(", "loc1", "!=", "null", ")", "lastChildNumbers", ".", "put", "(", "loc1", ".", "getPath", "(", ")", ",", "arg0", ".", "getChildNumber", "(", ")", ")", ";", "keys", ".", "put", "(", "loc0", ",", "arg0", ")", ";", "}"], "nl": "Inserts a key into the heirarchy. Used during deserialization: you normally don't need this. Keys must be inserted in order.", "nlToks": ["Inserts", "a", "key", "into", "the", "heirarchy", ".", "Used", "during", "deserialization", ":", "you", "normally", "do", "n't", "need", "this", ".", "Keys", "must", "be", "inserted", "in", "order", "."], "path": "1000000000001/bitcoinj/tree/master/core/src/main/java/org/bitcoinj/crypto/DeterministicHierarchy.java", "idx": 2312}
{"memberVariables": {"totalElapsedMinutes": "Long", "testResultLst": "List<TestResultDTO>", "startTime": "String", "endTime": "String", "batchId": "Long", "batchStatus": "String", "totalElapsedSeconds": "Long"}, "code": ["List", "<", "TestResultDTO", ">", "function", "(", ")", "{", "return", "testResultLst", ";", "}"], "memberFunctions": {"setBatchStatus": [["void", "String batchStatus"]], "getTotalElapsedSeconds": [["Long"]], "setBatchId": [["void", "Long batchId"]], "setTotalElapsedMinutes": [["void", "Long totalElapsedMinutes"]], "setTestResultLst": [["void", "List<TestResultDTO> testResultLst"]], "getEndTime": [["String"]], "getTotalElapsedMinutes": [["Long"]], "setEndTime": [["void", "String endTime"]], "getBatchId": [["Long"]], "setTotalElapsedSeconds": [["void", "Long totalElapsedSeconds"]], "toString": [["String"]], "getStartTime": [["String"]], "setStartTime": [["void", "String startTime"]], "getBatchStatus": [["String"]]}, "className": "TestResultsDTO", "renamed": ["List", "<", "TestResultDTO", ">", "function", "(", ")", "{", "return", "testResultLst", ";", "}"], "nl": "Gets the test result lst.", "nlToks": ["Gets", "the", "test", "result", "lst", "."], "path": "pkesireddy/portico_fletcher/tree/master/FetcherTesterService/src/main/java/org/ithaka/cm/fetchertester/model/TestResultsDTO.java", "idx": 2313}
{"memberVariables": {"m_EncryptedKeyElement=null": "EncryptedKeyElement", "m_KeyInfoEl=null": "Element", "LOG=Logger.getLogger(KeyInfoElement.class)": "Logger"}, "code": ["EncryptedKeyElement", "function", "(", ")", "{", "return", "m_EncryptedKeyElement", ";", "}"], "memberFunctions": {"getKeyInfoElement": [["Element"]]}, "className": "KeyInfoElement", "renamed": ["EncryptedKeyElement", "function", "(", ")", "{", "return", "m_EncryptedKeyElement", ";", "}"], "nl": "Get the EncryptedKeyElement object of the KeyInfoElement object", "nlToks": ["Get", "the", "EncryptedKeyElement", "object", "of", "the", "KeyInfoElement", "object"], "path": "0xwindows/WS-Attacker/tree/master/libs/XML_Encryption_Attack_Library/src/main/java/wsattacker/library/xmlencryptionattack/encryptedelements/key/KeyInfoElement.java", "idx": 2314}
{"memberVariables": {"failedImages": "HashSet<String>"}, "code": ["void", "function", "(", "String", "img", ")", "{", "failedImages", ".", "add", "(", "img", ")", ";", "}"], "memberFunctions": {"failed": [["boolean", "String img"]]}, "className": "ImageLoadFailTracker", "renamed": ["void", "function", "(", "String", "arg0", ")", "{", "failedImages", ".", "add", "(", "arg0", ")", ";", "}"], "nl": "Add an image url that failed loading to be tracked", "nlToks": ["Add", "an", "image", "url", "that", "failed", "loading", "to", "be", "tracked"], "path": "philipbjorge/WhatAndroid/tree/master/WhatAndroid/src/main/java/what/whatandroid/imgloader/ImageLoadFailTracker.java", "idx": 2315}
{"memberVariables": {"summary": "String", "isCurrentScenario": "boolean", "services=new ArrayList<>()": "List<String>", "wsuId": "String", "modules=new ArrayList<>()": "List<String>", "description": "String", "isGeneralPolicy": "boolean", "category": "String", "type": "String", "scenarioId": "String"}, "code": ["void", "function", "(", "boolean", "currentScenario", ")", "{", "isCurrentScenario", "=", "currentScenario", ";", "}"], "memberFunctions": {"setSummary": [["void", "String summary"]], "getSummary": [["String"]], "isCurrentScenario": [["boolean"]], "getModules": [["List<String>"]], "getCategory": [["String"]], "setCurrentScenario": [["void", "boolean currentScenario"]], "setDescription": [["void", "String description"]], "setType": [["void", "String type"]], "getDescription": [["String"]], "addModule": [["void", "String module"]], "getGeneralPolicy": [["boolean"]], "addService": [["void", "String service"]], "setCategory": [["void", "String category"]], "getType": [["String"]], "getScenarioId": [["String"]], "setScenarioId": [["void", "String scenarioId"]], "getIsCurrentScenario": [["boolean"]], "setGeneralPolicy": [["void", "boolean isGeneralPolicy"]], "getServices": [["List<String>"]], "setWsuId": [["void", "String wsuId"]], "getWsuId": [["String"]]}, "className": "SecurityScenario", "renamed": ["void", "function", "(", "boolean", "arg0", ")", "{", "isCurrentScenario", "=", "arg0", ";", "}"], "nl": "Setter for property 'currentScenario'.", "nlToks": ["Setter", "for", "property", "`", "currentScenario", "'", "."], "path": "harsha1979/carbon-identity/tree/master/components/security-mgt/org.wso2.carbon.security.mgt/src/main/java/org/wso2/carbon/security/SecurityScenario.java", "idx": 2316}
{"memberVariables": {"SORT_ALPHABETICALLY=new ComparatorAlphabetic()": "Comparator<Map.Entry<String,Int>>", "_totalWords": "int", "_ignoreWords": "Set<String>", "SORT_BY_FREQUENCY=new ComparatorFrequency()": "Comparator<Map.Entry<String,Int>>", "_wordFrequency": "Map<String,Int>"}, "code": ["void", "function", "(", "File", "ignoreFile", ")", "{", "Scanner", "ignoreScanner", "=", "new", "Scanner", "(", "ignoreFile", ")", ";", "ignoreScanner", ".", "useDelimiter", "(", "\"[^A-Za-z]+\"", ")", ";", "while", "(", "ignoreScanner", ".", "hasNext", "(", ")", ")", "{", "_ignoreWords", ".", "add", "(", "ignoreScanner", ".", "next", "(", ")", ")", ";", "}", "ignoreScanner", ".", "close", "(", ")", ";", "}"], "memberFunctions": {"countWords": [["void", "File sourceFile"], ["void", "String source"]], "getWordCount": [["int"]], "getWordFrequency": [["void", "ArrayList<String> out_words", "ArrayList<Integer> out_counts"]], "getFrequencies": [["int[]", "SortOrder sortBy"]], "getEntryCount": [["int"]], "getWords": [["String[]", "SortOrder sortBy"]]}, "className": "WordCounter", "renamed": ["void", "function", "(", "File", "arg0", ")", "{", "Scanner", "loc0", "=", "new", "Scanner", "(", "arg0", ")", ";", "loc0", ".", "useDelimiter", "(", "\"srini_string\"", ")", ";", "while", "(", "loc0", ".", "hasNext", "(", ")", ")", "{", "_ignoreWords", ".", "add", "(", "loc0", ".", "next", "(", ")", ")", ";", "}", "loc0", ".", "close", "(", ")", ";", "}"], "nl": "Reads file of words to ignore. Ignore words are added to a Set. The IOException is passed to caller because we certinaly don't know what the user interface issue is.", "nlToks": ["Reads", "file", "of", "words", "to", "ignore", ".", "Ignore", "words", "are", "added", "to", "a", "Set", ".", "The", "IOException", "is", "passed", "to", "caller", "because", "we", "certinaly", "do", "n't", "know", "what", "the", "user", "interface", "issue", "is", "."], "path": "prap19/Sem3_SourceCode/tree/master/AgeAttribution/src/edu/nlp/ageattr/helper/wordFrequency/WordCounter.java", "idx": 2317}
{"memberVariables": {"comments": "String", "inactivationReasonType": "String", "receiptDate": "Timestamp", "isActive": "String", "predecessorId": "BigDecimal", "srcFileName": "String", "serialVersionUID=-2837724379118220768L": "long", "srcUniqueFileName": "String", "successorId": "BigDecimal", "createdDate": "Timestamp", "pclDataUnits": "List<PCLDataUnitEntity>", "dataSetId": "long", "feedId": "BigDecimal", "fileSize": "BigDecimal", "destFileName": "String", "checksum": "String", "checksumType": "String", "modifiedDate": "Timestamp", "runId": "BigDecimal", "isPrepopulated": "String", "isUpdate": "String", "receiptDateType": "String", "status": "String"}, "code": ["void", "function", "(", "String", "checksum", ")", "{", "this", ".", "checksum", "=", "checksum", ";", "}"], "memberFunctions": {"setFeedId": [["void", "BigDecimal feedId"]], "getInactivationReasonType": [["String"]], "getSrcUniqueFileName": [["String"]], "getDataSetId": [["long"]], "setReceiptDateType": [["void", "String receiptDateType"]], "setIsPrepopulated": [["void", "String isPrepopulated"]], "getRunId": [["BigDecimal"]], "setSrcFileName": [["void", "String srcFileName"]], "getChecksumType": [["String"]], "getSrcFileName": [["String"]], "getChecksum": [["String"]], "getStatus": [["String"]], "getDestFileName": [["String"]], "getIsUpdate": [["String"]], "getFileSize": [["BigDecimal"]], "getPclDataUnits": [["List<PCLDataUnitEntity>"]], "setPclDataUnits": [["void", "List<PCLDataUnitEntity> pclDataUnits"]], "setInactivationReasonType": [["void", "String inactivationReasonType"]], "getReceiptDate": [["Timestamp"]], "getComments": [["String"]], "getCreatedDate": [["Timestamp"]], "setComments": [["void", "String comments"]], "removePclDataUnit": [["PCLDataUnitEntity", "PCLDataUnitEntity pclDataUnit"]], "getSuccessorId": [["BigDecimal"]], "getIsPrepopulated": [["String"]], "setSrcUniqueFileName": [["void", "String srcUniqueFileName"]], "setFileSize": [["void", "BigDecimal fileSize"]], "getPredecessorId": [["BigDecimal"]], "setIsUpdate": [["void", "String isUpdate"]], "getReceiptDateType": [["String"]], "getFeedId": [["BigDecimal"]], "setRunId": [["void", "BigDecimal runId"]], "setReceiptDate": [["void", "Timestamp receiptDate"]], "setStatus": [["void", "String status"]], "getModifiedDate": [["Timestamp"]], "getIsActive": [["String"]], "setSuccessorId": [["void", "BigDecimal successorId"]], "setDestFileName": [["void", "String destFileName"]], "addPclDataUnit": [["PCLDataUnitEntity", "PCLDataUnitEntity pclDataUnit"]], "setModifiedDate": [["void", "Timestamp modifiedDate"]], "setCreatedDate": [["void", "Timestamp createdDate"]], "setDataSetId": [["void", "long dataSetId"]], "setPredecessorId": [["void", "BigDecimal predecessorId"]], "setIsActive": [["void", "String isActive"]], "setChecksumType": [["void", "String checksumType"]]}, "className": "PCLDataSetEntity", "renamed": ["void", "function", "(", "String", "arg0", ")", "{", "this", ".", "checksum", "=", "arg0", ";", "}"], "nl": "Sets the checksum.", "nlToks": ["Sets", "the", "checksum", "."], "path": "pkesireddy/portico_fletcher/tree/master/FetcherTesterService/src/main/java/org/ithaka/cm/fetchertester/entity/PCLDataSetEntity.java", "idx": 2318}
{"memberVariables": {"PWD=new File(\".\")": "File", "parameters=new HashMap<String,Object>()": "Map<String,Object>", "transformation": "Transformation"}, "code": ["void", "function", "(", "final", "Result", "result", ")", "{", "withExceptionHandling", "(", "new", "Trans", "<", "Object", ">", "(", ")", "{", "public", "Object", "transform", "(", ")", "{", "transformation", ".", "transformTo", "(", "result", ")", ";", "return", "null", ";", "}", "}", ")", ";", "}"], "memberFunctions": {"withExceptionHandling": [["R", "Trans<R> trans"]], "setOutputProperties": [["void", "Properties outputProperties"]], "transform": [["R"]], "getDefaultSystemId": [["String"]], "setParameter": [["void", "String name", "Object value"]], "setErrorListener": [["void", "ErrorListener errorListener"]], "setOutputProperty": [["void", "String name", "String value"]], "clearParameters": [["void"]], "getResultDocument": [["Document"]], "getResultString": [["String"]], "setURIResolver": [["void", "URIResolver uriResolver"]], "provideSystemIdIfRequired": [["void", "Source source"]], "getParameter": [["Object", "String name"]]}, "className": "Transform", "renamed": ["void", "function", "(", "final", "Result", "arg0", ")", "{", "withExceptionHandling", "(", "new", "Trans", "<", "Object", ">", "(", ")", "{", "public", "Object", "transform", "(", ")", "{", "transformation", ".", "transformTo", "(", "arg0", ")", ";", "return", "null", ";", "}", "}", ")", ";", "}"], "nl": "Perform the actual transformation", "nlToks": ["Perform", "the", "actual", "transformation"], "path": "phbenisc/xmlunit/tree/master/xmlunit-legacy/src/main/java/org/custommonkey/xmlunit/Transform.java", "idx": 2320}
{"memberVariables": {"nodesByIds": "Map<String,Node>", "graph": "Graph<Node,Edge>"}, "code": ["boolean", "function", "(", "Node", "node", ")", "{", "boolean", "ret", "=", "graph", ".", "removeVertex", "(", "node", ")", ";", "if", "(", "ret", ")", "{", "nodesByIds", ".", "remove", "(", "node", ".", "getId", "(", ")", ")", ";", "}", "return", "ret", ";", "}"], "memberFunctions": {"getNodes": [["Collection<Node>"], ["Node[]", "Edge edge"]], "addNode": [["void", "Node node"]], "findEdgeSet": [["Collection", "Node node1", "Node node2"]], "getNodeById": [["Node", "String id"]], "getNeighbors": [["Collection<Node>", "Node node"]], "removeEdge": [["boolean", "Edge edge"]], "countNodes": [["int"], ["int", "boolean excludeDrugs"]], "getDegree": [["int", "Node node"]], "getOpposite": [["Node", "Node node", "Edge edge"]], "getEdges": [["Collection<Edge>"]], "addEdge": [["void", "Edge edge"]], "coundEdges": [["int"]], "getIncidentEdges": [["Collection<Edge>", "Node node"]]}, "className": "Network", "renamed": ["boolean", "function", "(", "Node", "arg0", ")", "{", "boolean", "loc0", "=", "graph", ".", "removeVertex", "(", "arg0", ")", ";", "if", "(", "loc0", ")", "{", "nodesByIds", ".", "remove", "(", "arg0", ".", "getId", "(", ")", ")", ";", "}", "return", "loc0", ";", "}"], "nl": "remove a node", "nlToks": ["remove", "a", "node"], "path": "adamabeshouse/cbioportal/tree/master/core/src/main/java/org/mskcc/cbio/portal/network/Network.java", "idx": 2321}
{"memberVariables": {"ruleSets=new ArrayList<>()": "List<RuleSet>", "ruleChain=new RuleChain()": "RuleChain"}, "code": ["void", "function", "(", "RuleSet", "ruleSet", ")", "{", "ruleSets", ".", "add", "(", "ruleSet", ")", ";", "ruleChain", ".", "add", "(", "ruleSet", ")", ";", "}"], "memberFunctions": {"usesTypeResolution": [["boolean", "Language language"]], "apply": [["void", "List<Node> acuList", "RuleContext ctx", "Language language"]], "start": [["void", "RuleContext ctx"]], "usesDFA": [["boolean", "Language language"]], "getRuleByName": [["Rule", "String ruleName"]], "getAllRuleSets": [["RuleSet[]"]], "usesMetrics": [["boolean", "Language language"]], "getChecksum": [["long"]], "ruleCount": [["int"]], "applies": [["boolean", "File file"]], "getRuleSetsIterator": [["Iterator<RuleSet>"]], "end": [["void", "RuleContext ctx"]], "removeDysfunctionalRules": [["void", "Collection<Rule> collector"]], "getAllRules": [["Set<Rule>"]]}, "className": "RuleSets", "renamed": ["void", "function", "(", "RuleSet", "arg0", ")", "{", "ruleSets", ".", "add", "(", "arg0", ")", ";", "ruleChain", ".", "add", "(", "arg0", ")", ";", "}"], "nl": "Add a ruleset for a language. Only one ruleset can be added for a specific language. If ruleSet.getLanguage() is null, it is assumed to be a RuleSet of java rules.", "nlToks": ["Add", "a", "ruleset", "for", "a", "language", ".", "Only", "one", "ruleset", "can", "be", "added", "for", "a", "specific", "language", ".", "If", "ruleSet.getLanguage", "-LRB-", "-RRB-", "is", "null", ",", "it", "is", "assumed", "to", "be", "a", "RuleSet", "of", "java", "rules", "."], "path": "adangel/pmd/tree/master/pmd-core/src/main/java/net/sourceforge/pmd/RuleSets.java", "idx": 2322}
{"memberVariables": {"lib": "XMLLibImpl", "undeclared=new HashSet()": "Set", "prefixToURI=new HashMap()": "Map", "uriToPrefix=new HashMap()": "Map"}, "code": ["void", "function", "(", "XmlCursor", "cursor", ",", "ObjArray", "declarations", ")", "{", "javax", ".", "xml", ".", "namespace", ".", "QName", "qname", "=", "cursor", ".", "getName", "(", ")", ";", "String", "uri", "=", "qname", ".", "getNamespaceURI", "(", ")", ";", "Set", "prefixes", "=", "(", "Set", ")", "uriToPrefix", ".", "get", "(", "uri", ")", ";", "if", "(", "prefixes", "==", "null", "||", "prefixes", ".", "size", "(", ")", "==", "0", ")", "{", "undeclared", ".", "add", "(", "uri", ")", ";", "if", "(", "declarations", "!=", "null", ")", "declarations", ".", "add", "(", "new", "Namespace", "(", "lib", ",", "uri", ")", ")", ";", "}", "}"], "memberFunctions": {"getNamespace": [["Namespace", "XMLLibImpl lib", "XmlCursor cursor", "Object[] inScopeNamespaces"]], "namespaceDeclarations": [["Object[]", "XMLLibImpl lib", "XmlCursor cursor"]], "getNamespaces": [["void", "XmlCursor cursor", "Map prefixToURI"]], "getAllNamespaces": [["Map", "XMLLibImpl lib", "XmlCursor cursor"]], "removeNamespace": [["void", "XmlCursor cursor", "String prefix"]], "update": [["void", "XmlCursor cursor", "ObjArray declarations"]], "inScopeNamespaces": [["Object[]", "XMLLibImpl lib", "XmlCursor cursor"]], "declareNamespace": [["void", "String prefix", "String uri", "ObjArray declarations"]]}, "className": "NamespaceHelper", "renamed": ["void", "function", "(", "XmlCursor", "arg0", ",", "ObjArray", "arg1", ")", "{", "javax", ".", "xml", ".", "namespace", ".", "QName", "loc0", "=", "arg0", ".", "getName", "(", ")", ";", "String", "loc1", "=", "loc0", ".", "getNamespaceURI", "(", ")", ";", "Set", "loc2", "=", "(", "Set", ")", "uriToPrefix", ".", "get", "(", "loc1", ")", ";", "if", "(", "loc2", "==", "null", "||", "loc2", ".", "size", "(", ")", "==", "0", ")", "{", "undeclared", ".", "add", "(", "loc1", ")", ";", "if", "(", "arg1", "!=", "null", ")", "arg1", ".", "add", "(", "new", "Namespace", "(", "lib", ",", "loc1", ")", ")", ";", "}", "}"], "nl": "Updates the internal state of this NamespaceHelper to reflect the existance of the XML token pointed to by the cursor.", "nlToks": ["Updates", "the", "internal", "state", "of", "this", "NamespaceHelper", "to", "reflect", "the", "existance", "of", "the", "XML", "token", "pointed", "to", "by", "the", "cursor", "."], "path": "adamfisk/littleshoot-client/tree/master/bin/rhino1_7R2/deprecatedsrc/org/mozilla/javascript/xml/impl/xmlbeans/NamespaceHelper.java", "idx": 2324}
{"memberVariables": {}, "code": ["GetOfferDetailsResponse", ".", "Return", ".", "DetailOfferData", "function", "(", ")", "{", "return", "new", "GetOfferDetailsResponse", ".", "Return", ".", "DetailOfferData", "(", ")", ";", "}"], "memberFunctions": {"createGetOfferDetailsResponseReturnDetailOfferDataSourceGeos": [["GetOfferDetailsResponse.Return.DetailOfferData.SourceGeos"]], "createGetOfferDetailsResponseReturnDetailOfferDataSeo": [["GetOfferDetailsResponse.Return.DetailOfferData.Seo"]], "createGetOfferDetailsResponseReturnDetailOfferDataMerchantAddresses": [["GetOfferDetailsResponse.Return.DetailOfferData.Merchant.Addresses"]], "createGetOfferDetailsResponseReturnDetailOfferDataTargetGeosGeoCountry": [["GetOfferDetailsResponse.Return.DetailOfferData.TargetGeos.Geo.Country"]], "createGetOfferDetailsResponseReturnDetailOfferDataOfferMediaOfferImageEntry": [["GetOfferDetailsResponse.Return.DetailOfferData.OfferMedia.OfferImage.Entry"]], "createGetOfferDetailsResponseReturnDetailOfferDataTargetGeosGeo": [["GetOfferDetailsResponse.Return.DetailOfferData.TargetGeos.Geo"]], "createGetOfferDetailsResponseReturnDetailOfferDataOfferMedia": [["GetOfferDetailsResponse.Return.DetailOfferData.OfferMedia"]], "createGetOfferDetailsResponseReturnDetailOfferDataFulfillmentPartner": [["GetOfferDetailsResponse.Return.DetailOfferData.FulfillmentPartner"]], "createGetOfferDetailsResponseReturnDetailOfferDataOfferMediaOfferImageEntryValue": [["GetOfferDetailsResponse.Return.DetailOfferData.OfferMedia.OfferImage.Entry.Value"]], "createGetOfferDetailsResponseReturnDetailOfferDataProductsProduct": [["GetOfferDetailsResponse.Return.DetailOfferData.Products.Product"]], "createGetOfferDetailsResponseReturnDetailOfferDataRedemptionAddressesRedemptionAddress": [["GetOfferDetailsResponse.Return.DetailOfferData.RedemptionAddresses.RedemptionAddress"]], "createGetOfferDetailsResponseReturnDetailOfferDataSourceGeosGeoRegion": [["GetOfferDetailsResponse.Return.DetailOfferData.SourceGeos.Geo.Region"]], "createGetOfferDetailsResponseReturnDetailOfferDataTargetGeosGeoCity": [["GetOfferDetailsResponse.Return.DetailOfferData.TargetGeos.Geo.City"]], "createGetOfferDetailsResponse": [["GetOfferDetailsResponse"]], "createGetOfferDetailsResponseReturnDetailOfferDataSourceGeosGeoCity": [["GetOfferDetailsResponse.Return.DetailOfferData.SourceGeos.Geo.City"]], "createGetOfferDetailsResponseReturnDetailOfferDataOfferMediaOfferImageEntryValueItem": [["GetOfferDetailsResponse.Return.DetailOfferData.OfferMedia.OfferImage.Entry.Value.Item"]], "createGetOfferDetailsResponseReturnDetailOfferDataProducts": [["GetOfferDetailsResponse.Return.DetailOfferData.Products"]], "createGetOfferDetailsResponseReturnDetailOfferDataOfferMediaOfferImage": [["GetOfferDetailsResponse.Return.DetailOfferData.OfferMedia.OfferImage"]], "createGetOfferDetailsResponseReturnDetailOfferDataRedemptionAddresses": [["GetOfferDetailsResponse.Return.DetailOfferData.RedemptionAddresses"]], "createGetOfferDetailsResponseReturn": [["GetOfferDetailsResponse.Return"]], "createGetOfferDetailsResponseReturnDetailOfferDataSourceGeosGeoCountry": [["GetOfferDetailsResponse.Return.DetailOfferData.SourceGeos.Geo.Country"]], "createGetOfferDetailsResponseReturnDetailOfferDataTargetGeos": [["GetOfferDetailsResponse.Return.DetailOfferData.TargetGeos"]], "createGetOfferDetailsResponseReturnDetailOfferDataTargetGeosGeoRegion": [["GetOfferDetailsResponse.Return.DetailOfferData.TargetGeos.Geo.Region"]], "createGetOfferDetailsResponseReturnDetailOfferDataMerchant": [["GetOfferDetailsResponse.Return.DetailOfferData.Merchant"]], "createGetOfferDetailsResponseReturnDetailOfferDataSourceGeosGeo": [["GetOfferDetailsResponse.Return.DetailOfferData.SourceGeos.Geo"]], "createGetOfferDetailsResponseReturnDetailOfferDataOfferDisplay": [["GetOfferDetailsResponse.Return.DetailOfferData.OfferDisplay"]]}, "className": "ObjectFactory", "renamed": ["GetOfferDetailsResponse", ".", "Return", ".", "DetailOfferData", "function", "(", ")", "{", "return", "new", "GetOfferDetailsResponse", ".", "Return", ".", "DetailOfferData", "(", ")", ";", "}"], "nl": "Create an instance of  {@link GetOfferDetailsResponse.Return.DetailOfferData }", "nlToks": ["Create", "an", "instance", "of", "-LCB-", "@link", "GetOfferDetailsResponse.Return.DetailOfferData", "-RCB-"], "path": "priyankgandhi/mastercard/tree/master/eop-openapi-client/src/main/java/com/eop/api/offerdetail/gen/ObjectFactory.java", "idx": 2325}
{"memberVariables": {"serialVersionUID=0": "long", "delegate": "Supplier<T>", "expirationNanos": "long", "durationNanos": "long", "instance": "T", "function": "Function<? super F,T>", "supplier": "Supplier<F>", "initialized": "boolean", "value": "T"}, "code": ["Supplier", "<", "T", ">", "function", "(", "Supplier", "<", "T", ">", "delegate", ")", "{", "return", "new", "ThreadSafeSupplier", "<", "T", ">", "(", "Preconditions", ".", "checkNotNull", "(", "delegate", ")", ")", ";", "}"], "memberFunctions": {"ofInstance": [["Supplier<T>", "@Nullable T instance"]], "supplierFunction": [["Function<Supplier<T>,T>"]], "compose": [["Supplier<T>", "Function<? super F,T> function", "Supplier<F> supplier"]], "apply": [["Object", "Supplier<Object> input"]], "hashCode": [["int"], ["int"]], "get": [["T"], ["T"], ["T"], ["T"], ["T"], ["T"]], "equals": [["boolean", "@Nullable Object obj"], ["boolean", "@Nullable Object obj"]], "toString": [["String"], ["String"], ["String"], ["String"], ["String"], ["String"], ["String"]], "memoizeWithExpiration": [["Supplier<T>", "Supplier<T> delegate", "long duration", "TimeUnit unit"]], "memoize": [["Supplier<T>", "Supplier<T> delegate"]]}, "className": "Suppliers", "renamed": ["Supplier", "<", "T", ">", "function", "(", "Supplier", "<", "T", ">", "arg0", ")", "{", "return", "new", "ThreadSafeSupplier", "<", "T", ">", "(", "Preconditions", ".", "checkNotNull", "(", "arg0", ")", ")", ";", "}"], "nl": "Returns a supplier whose  {@code get()} method synchronizes on {@code delegate} before callingit, making it thread-safe.", "nlToks": ["Returns", "a", "supplier", "whose", "-LCB-", "@code", "get", "-LRB-", "-RRB-", "-RCB-", "method", "synchronizes", "on", "-LCB-", "@code", "delegate", "-RCB-", "before", "callingit", ",", "making", "it", "thread-safe", "."], "path": "hazendaz/guava/tree/master/guava/src/com/google/common/base/Suppliers.java", "idx": 2328}
{"memberVariables": {"sensorModel=null": "Map<Object,Matrix>", "stateVariableDomain=null": "FiniteDomain", "prior=null": "Matrix", "stateVariable=null": "RandomVariable", "transitionModel=null": "Matrix"}, "code": ["Matrix", "function", "(", "CategoricalDistribution", "fromCD", ")", "{", "double", "[", "]", "values", "=", "fromCD", ".", "getValues", "(", ")", ";", "return", "new", "Matrix", "(", "values", ",", "values", ".", "length", ")", ";", "}"], "memberFunctions": {"getEvidence": [["Matrix", "List<AssignmentProposition> evidence"]], "getTransitionModel": [["Matrix"]], "getSensorModel": [["Map<Object,Matrix>"]], "createUnitMessage": [["Matrix"]], "normalize": [["Matrix", "Matrix m"]], "getPrior": [["Matrix"]], "getStateVariable": [["RandomVariable"]]}, "className": "HiddenMarkovModel", "renamed": ["Matrix", "function", "(", "CategoricalDistribution", "arg0", ")", "{", "double", "[", "]", "loc0", "=", "arg0", ".", "getValues", "(", ")", ";", "return", "new", "Matrix", "(", "loc0", ",", "loc0", ".", "length", ")", ";", "}"], "nl": "Convert a Categorical Distribution into a column vector in Matrix form.", "nlToks": ["Convert", "a", "Categorical", "Distribution", "into", "a", "column", "vector", "in", "Matrix", "form", "."], "path": "peterplupo/ia201102/tree/master/trabalho1/aima-core/src/main/java/aima/core/probability/hmm/HiddenMarkovModel.java", "idx": 2329}
{"memberVariables": {"evaluationResults": "List<Node>", "listeners": "List<ViewerModelListener>", "LOGGER=Logger.getLogger(ViewerModel.class.getName())": "Logger", "rootNode": "Node"}, "code": ["List", "<", "Node", ">", "function", "(", ")", "{", "return", "evaluationResults", ";", "}"], "memberFunctions": {"fireViewerModelEvent": [["void", "ViewerModelEvent e"]], "removeViewerModelListener": [["void", "ViewerModelListener l"]], "appendToXPathExpression": [["void", "String pathFragment", "Object appender"]], "selectNode": [["void", "Node node", "Object selector"]], "addViewerModelListener": [["void", "ViewerModelListener l"]], "commitSource": [["void", "String source", "LanguageVersion languageVersion"]], "hasCompiledTree": [["boolean"]], "evaluateXPathExpression": [["void", "String xPath", "Object evaluator"]], "getRootNode": [["Node"]]}, "className": "ViewerModel", "renamed": ["List", "<", "Node", ">", "function", "(", ")", "{", "return", "evaluationResults", ";", "}"], "nl": "Retrieves the results of last evaluation.", "nlToks": ["Retrieves", "the", "results", "of", "last", "evaluation", "."], "path": "adangel/pmd/tree/master/pmd-core/src/main/java/net/sourceforge/pmd/util/viewer/model/ViewerModel.java", "idx": 2331}
{"memberVariables": {"filter": "AxisServiceFilter", "listener": "AxisServiceTrackerListener", "pendingActions": "Queue<Runnable>", "services": "Set<AxisService>", "config": "AxisConfiguration", "lock=new Object()": "Object", "observer=new AxisObserver(){\n  public void init(  AxisConfiguration axisConfig){\n  }\n  public void serviceUpdate(  AxisEvent event,  final AxisService service){\nswitch (event.getEventType()) {\ncase AxisEvent.SERVICE_DEPLOY:\ncase AxisEvent.SERVICE_START:\n      if (filter.matches(service)) {\n        boolean pending;\nsynchronized (lock) {\n          if (pending=(pendingActions != null)) {\n            pendingActions.add(new Runnable(){\n              public void run(){\n                serviceAdded(service);\n              }\n            }\n);\n          }\n        }\n        if (!pending) {\n          serviceAdded(service);\n        }\n      }\n    break;\ncase AxisEvent.SERVICE_REMOVE:\ncase AxisEvent.SERVICE_STOP:\n  boolean pending;\nsynchronized (lock) {\n  if (pending=(pendingActions != null)) {\n    pendingActions.add(new Runnable(){\n      public void run(){\n        serviceRemoved(service);\n      }\n    }\n);\n  }\n}\nif (!pending) {\nserviceRemoved(service);\n}\n}\n}\npublic void moduleUpdate(AxisEvent event,AxisModule module){\n}\npublic void addParameter(Parameter param) throws AxisFault {\n}\npublic void removeParameter(Parameter param) throws AxisFault {\n}\npublic void deserializeParameters(OMElement parameterElement) throws AxisFault {\n}\npublic Parameter getParameter(String name){\nreturn null;\n}\npublic ArrayList<Parameter> getParameters(){\nreturn null;\n}\npublic boolean isParameterLocked(String parameterName){\nreturn false;\n}\npublic void serviceGroupUpdate(AxisEvent event,AxisServiceGroup serviceGroup){\n}\n}\n": "AxisObserver"}, "code": ["boolean", "function", "(", ")", "{", "return", "services", "!=", "null", ";", "}"], "memberFunctions": {"deserializeParameters": [["void", "OMElement parameterElement"]], "init": [["void", "AxisConfiguration axisConfig"]], "isParameterLocked": [["boolean", "String parameterName"]], "serviceAdded": [["void", "AxisService service"]], "serviceGroupUpdate": [["void", "AxisEvent event", "AxisServiceGroup serviceGroup"]], "moduleUpdate": [["void", "AxisEvent event", "AxisModule module"]], "start": [["void"]], "addParameter": [["void", "Parameter param"]], "stop": [["void"]], "getParameters": [["ArrayList<Parameter>"]], "serviceRemoved": [["void", "AxisService service"]], "serviceUpdate": [["void", "AxisEvent event", "final AxisService service"]], "removeParameter": [["void", "Parameter param"]], "getParameter": [["Parameter", "String name"]]}, "className": "AxisServiceTracker", "renamed": ["boolean", "function", "(", ")", "{", "return", "services", "!=", "null", ";", "}"], "nl": "Check whether the tracker is started.", "nlToks": ["Check", "whether", "the", "tracker", "is", "started", "."], "path": "harsha89/wso2-axis2-transports/tree/master/modules/base/src/main/java/org/apache/axis2/transport/base/tracker/AxisServiceTracker.java", "idx": 2332}
{"memberVariables": {"mWriter": "ByteBuffer", "mBuffer": "byte[]"}, "code": ["void", "function", "(", "int", "required", ")", "{", "if", "(", "mWriter", ".", "remaining", "(", ")", ">=", "required", ")", "{", "return", ";", "}", "byte", "[", "]", "buffer", "=", "new", "byte", "[", "(", "mBuffer", ".", "length", "+", "required", ")", "*", "2", "]", ";", "System", ".", "arraycopy", "(", "mBuffer", ",", "0", ",", "buffer", ",", "0", ",", "mWriter", ".", "position", "(", ")", ")", ";", "mBuffer", "=", "buffer", ";", "ByteBuffer", "writer", "=", "ByteBuffer", ".", "wrap", "(", "buffer", ")", ";", "writer", ".", "position", "(", "mWriter", ".", "position", "(", ")", ")", ";", "mWriter", "=", "writer", ";", "}"], "memberFunctions": {"put24": [["BufferedByteWriter", "byte value"], ["BufferedByteWriter", "short value"], ["BufferedByteWriter", "int value"]], "putLen8": [["BufferedByteWriter", "byte[] value"]], "put16": [["BufferedByteWriter", "byte value"], ["BufferedByteWriter", "short value"]], "putLen16": [["BufferedByteWriter", "byte[] value"]], "toByteArray": [["byte[]"]], "put64": [["BufferedByteWriter", "byte value"], ["BufferedByteWriter", "short value"], ["BufferedByteWriter", "int value"], ["BufferedByteWriter", "long value"]], "put": [["BufferedByteWriter", "byte[] value"], ["BufferedByteWriter", "byte value"]], "put32": [["BufferedByteWriter", "byte value"], ["BufferedByteWriter", "short value"], ["BufferedByteWriter", "int value"]]}, "className": "BufferedByteWriter", "renamed": ["void", "function", "(", "int", "arg0", ")", "{", "if", "(", "mWriter", ".", "remaining", "(", ")", ">=", "arg0", ")", "{", "return", ";", "}", "byte", "[", "]", "loc0", "=", "new", "byte", "[", "(", "mBuffer", ".", "length", "+", "arg0", ")", "*", "2", "]", ";", "System", ".", "arraycopy", "(", "mBuffer", ",", "0", ",", "loc0", ",", "0", ",", "mWriter", ".", "position", "(", ")", ")", ";", "mBuffer", "=", "loc0", ";", "ByteBuffer", "loc1", "=", "ByteBuffer", ".", "wrap", "(", "loc0", ")", ";", "loc1", ".", "position", "(", "mWriter", ".", "position", "(", ")", ")", ";", "mWriter", "=", "loc1", ";", "}"], "nl": "Ensure that there is enough space available to write the requested number of bytes. If necessary the internal buffer is resized.", "nlToks": ["Ensure", "that", "there", "is", "enough", "space", "available", "to", "write", "the", "requested", "number", "of", "bytes", ".", "If", "necessary", "the", "internal", "buffer", "is", "resized", "."], "path": "prathyks/strongswan/tree/master/src/frontends/android/app/src/main/java/org/strongswan/android/utils/BufferedByteWriter.java", "idx": 2333}
{"memberVariables": {"tok": "StreamTokenizer", "keywords": "Collection<String>"}, "code": ["String", "function", "(", ")", "{", "if", "(", "!", "matchStringConstant", "(", ")", ")", "throw", "new", "BadSyntaxException", "(", ")", ";", "String", "s", "=", "tok", ".", "sval", ";", "nextToken", "(", ")", ";", "return", "s", ";", "}"], "memberFunctions": {"matchDelim": [["boolean", "char d"]], "matchIntConstant": [["boolean"]], "eatDelim": [["void", "char d"]], "eatIntConstant": [["int"]], "matchKeyword": [["boolean", "String w"]], "nextToken": [["void"]], "initKeywords": [["void"]], "matchStringConstant": [["boolean"]], "eatKeyword": [["void", "String w"]], "matchId": [["boolean"]], "eatId": [["String"]]}, "className": "Lexer", "renamed": ["String", "function", "(", ")", "{", "if", "(", "!", "matchStringConstant", "(", ")", ")", "throw", "new", "BadSyntaxException", "(", ")", ";", "String", "loc0", "=", "tok", ".", "sval", ";", "nextToken", "(", ")", ";", "return", "loc0", ";", "}"], "nl": "Throws an exception if the current token is not  a string.  Otherwise, returns that string and moves to the next token.", "nlToks": ["Throws", "an", "exception", "if", "the", "current", "token", "is", "not", "a", "string", ".", "Otherwise", ",", "returns", "that", "string", "and", "moves", "to", "the", "next", "token", "."], "path": "prerit2803/DBMSProject2/tree/master/simpledb/parse/Lexer.java", "idx": 2335}
{"memberVariables": {"ERROR_ELEMENT_NOT_IN_GRAPH=\"not an element of this graph\"": "String", "graph": "MutableGraph<Integer>", "ERROR_SELF_LOOP=\"self-loops are not allowed\"": "String", "ERROR_ADDED_SELF_LOOP=\"Should not be allowed to add a self-loop edge.\"": "String", "N1=1": "Integer", "ERROR_MODIFIABLE_SET=\"Set returned is unexpectedly modifiable\"": "String", "N4=4": "Integer", "ERROR_NODE_NOT_IN_GRAPH=\"Should not be allowed to pass a node that is not an element of the graph.\"": "String", "N5=5": "Integer", "NODE_NOT_IN_GRAPH=1000": "Integer", "N2=2": "Integer", "NODE_STRING=\"Node\"": "String", "N3=3": "Integer"}, "code": ["boolean", "function", "(", "Integer", "n", ")", "{", "return", "graph", ".", "addNode", "(", "n", ")", ";", "}"], "memberFunctions": {"degree_isolatedNode": [["void"]], "removeEdge_existingEdge": [["void"]], "adjacentNodes_checkReturnedSetMutability": [["void"]], "putEdge": [["boolean", "Integer n1", "Integer n2"]], "successors_checkReturnedSetMutability": [["void"]], "removeNode_queryAfterRemoval": [["void"]], "predecessors_noPredecessors": [["void"]], "removeNode_existingNode": [["void"]], "validateGraphState": [["void"]], "nodes_oneNode": [["void"]], "outDegree_isolatedNode": [["void"]], "successors_noSuccessors": [["void"]], "adjacentNodes_oneEdge": [["void"]], "inDegree_isolatedNode": [["void"]], "removeNode_nodeNotPresent": [["void"]], "assertNodeNotInGraphErrorMessage": [["void", "Throwable throwable"]], "init": [["void"]], "nodes_noNodes": [["void"]], "removeEdge_oneOfMany": [["void"]], "removeEdge_edgeNotPresent": [["void"]], "predecessors_checkReturnedSetMutability": [["void"]], "predecessors_nodeNotInGraph": [["void"]], "outDegree_nodeNotInGraph": [["void"]], "successors_nodeNotInGraph": [["void"]], "degree_nodeNotInGraph": [["void"]], "adjacentNodes_nodeNotInGraph": [["void"]], "addNode_newNode": [["void"]], "inDegree_nodeNotInGraph": [["void"]], "createGraph": [["MutableGraph<Integer>"]], "adjacentNodes_noAdjacentNodes": [["void"]], "nodes_checkReturnedSetMutability": [["void"]], "degree_oneEdge": [["void"]], "removeEdge_nodeNotPresent": [["void"]], "removeNode_antiparallelEdges": [["void"]], "validateGraph": [["void", "Graph<N> graph"]], "addNode_existingNode": [["void"]]}, "className": "AbstractGraphTest", "renamed": ["boolean", "function", "(", "Integer", "arg0", ")", "{", "return", "graph", ".", "addNode", "(", "arg0", ")", ";", "}"], "nl": "A proxy method that adds the node  {@code n} to the graph being tested. In case of Immutablegraph implementations, this method should add  {@code n} to the graph builder and build a newgraph with the current builder state.", "nlToks": ["A", "proxy", "method", "that", "adds", "the", "node", "-LCB-", "@code", "n", "-RCB-", "to", "the", "graph", "being", "tested", ".", "In", "case", "of", "Immutablegraph", "implementations", ",", "this", "method", "should", "add", "-LCB-", "@code", "n", "-RCB-", "to", "the", "graph", "builder", "and", "build", "a", "newgraph", "with", "the", "current", "builder", "state", "."], "path": "hazendaz/guava/tree/master/guava-tests/test/com/google/common/graph/AbstractGraphTest.java", "idx": 2336}
{"memberVariables": {"produceMediaTypes": "List<String>", "bus": "Bus", "consumeMediaTypes": "List<String>", "enableStreaming": "boolean", "BUNDLE=BundleUtils.getBundle(AbstractJAXBProvider.class)": "ResourceBundle", "enableBuffering": "boolean", "LOG=LogUtils.getL7dLogger(AbstractJAXBProvider.class)": "Logger"}, "code": ["List", "<", "String", ">", "function", "(", ")", "{", "return", "produceMediaTypes", ";", "}"], "memberFunctions": {"init": [["void", "List<ClassResourceInfo> resources"]], "getBus": [["Bus"]], "setConsumeMediaTypes": [["void", "List<String> types"]], "setEnableBuffering": [["void", "boolean enableBuf"]], "getEnableStreaming": [["boolean"]], "setEnableStreaming": [["void", "boolean enableStream"]], "setBus": [["void", "Bus b"]], "setProduceMediaTypes": [["void", "List<String> types"]], "getConsumeMediaTypes": [["List<String>"]], "getEnableBuffering": [["boolean"]], "isPayloadEmpty": [["boolean", "HttpHeaders headers"], ["boolean", "MultivaluedMap<String,String> headers"]], "reportEmptyContentLength": [["void"]]}, "className": "AbstractConfigurableProvider", "renamed": ["List", "<", "String", ">", "function", "(", ")", "{", "return", "produceMediaTypes", ";", "}"], "nl": "Gets the custom Produces media types", "nlToks": ["Gets", "the", "custom", "Produces", "media", "types"], "path": "primesign/cxf/tree/master/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/provider/AbstractConfigurableProvider.java", "idx": 2337}
{"memberVariables": {"NULL_PLAYERID_COMMANDS=Collections.unmodifiableCollection(Arrays.asList(Command.READY,Command.PING))": "Collection<Command>", "NO_PLAYERID_COMMANDS=Collections.unmodifiableCollection(Arrays.asList(Command.INITIALISE_GAME,Command.PLAYERS_JOINED,Command.JOIN_ACCEPT,Command.JOIN_REJECT,Command.JOIN_GAME))": "Collection<Command>"}, "code": ["Message", "function", "(", "String", "jsonMessage", ")", "{", "Object", "parsed", ";", "try", "{", "parsed", "=", "JSONValue", ".", "parseWithException", "(", "jsonMessage", ")", ";", "}", "catch", "(", "ParseException", "e", ")", "{", "throw", "new", "ParserException", "(", "\"Unable to parse packet. Error: \"", "+", "e", ".", "toString", "(", ")", "+", "\". Message:'\"", "+", "jsonMessage", "+", "\"'\"", ")", ";", "}", "return", "parseJSONValueToMessage", "(", "parsed", ")", ";", "}"], "memberFunctions": {"parseJSONValueToMessage": [["Message", "Object parsed"]], "validateObjectField": [["void", "JSONObject object"]], "validateType": [["void", "JSONObject object", "String key", "Class<?> class1"], ["boolean", "Object obj", "Class<?> class1"]], "parseOuterJSONObjectToMessage": [["Message", "Object parsed"]], "validatePayloadType": [["void", "Object obj", "Class<?> class1"]], "parsePayload": [["Payload", "Command command", "Object payloadObj"]], "singleIntegerPayload": [["Payload", "Object payloadObj"]], "parseOuterMesage": [["Message", "String msgString"]], "stringifyMessage": [["String", "Message message"]]}, "className": "Parser", "renamed": ["Message", "function", "(", "String", "arg0", ")", "{", "Object", "loc0", ";", "try", "{", "loc0", "=", "JSONValue", ".", "parseWithException", "(", "arg0", ")", ";", "}", "catch", "(", "ParseException", "loc1", ")", "{", "throw", "new", "ParserException", "(", "\"srini_string\"", "+", "loc1", ".", "toString", "(", ")", "+", "\"srini_string\"", "+", "arg0", "+", "\"srini_string\"", ")", ";", "}", "return", "parseJSONValueToMessage", "(", "loc0", ")", ";", "}"], "nl": "Parses an entire JSON object in the format described by Json communication structure", "nlToks": ["Parses", "an", "entire", "JSON", "object", "in", "the", "format", "described", "by", "Json", "communication", "structure"], "path": "adamncasey/MultiplayerRisk/tree/master/src/networking/parser/Parser.java", "idx": 2338}
{"memberVariables": {"gammasV[]": "double", "min": "int", "gammasU[]": "double", "b[]": "double", "u[]": "double", "UBV": "DenseMatrix64F", "m": "int", "n": "int"}, "code": ["void", "function", "(", "DenseMatrix64F", "A", ")", "{", "UBV", "=", "A", ";", "m", "=", "UBV", ".", "numRows", ";", "n", "=", "UBV", ".", "numCols", ";", "min", "=", "Math", ".", "min", "(", "m", ",", "n", ")", ";", "int", "max", "=", "Math", ".", "max", "(", "m", ",", "n", ")", ";", "if", "(", "b", ".", "length", "<", "max", "+", "1", ")", "{", "b", "=", "new", "double", "[", "max", "+", "1", "]", ";", "u", "=", "new", "double", "[", "max", "+", "1", "]", ";", "}", "if", "(", "gammasU", ".", "length", "<", "m", ")", "{", "gammasU", "=", "new", "double", "[", "m", "]", ";", "}", "if", "(", "gammasV", ".", "length", "<", "n", ")", "{", "gammasV", "=", "new", "double", "[", "n", "]", ";", "}", "}"], "memberFunctions": {"handleV": [["DenseMatrix64F", "DenseMatrix64F V", "boolean transpose", "boolean compact", "int m", "int n", "int min"]], "handleU": [["DenseMatrix64F", "DenseMatrix64F U", "boolean transpose", "boolean compact", "int m", "int n", "int min"]], "decompose": [["boolean", "DenseMatrix64F A"]], "getDiagonal": [["void", "double[] diag", "double[] off"]], "_decompose": [["boolean"]], "inputModified": [["boolean"]], "getU": [["DenseMatrix64F", "DenseMatrix64F U", "boolean transpose", "boolean compact"]], "getV": [["DenseMatrix64F", "DenseMatrix64F V", "boolean transpose", "boolean compact"]], "handleB": [["DenseMatrix64F", "DenseMatrix64F B", "boolean compact", "int m", "int n", "int min"]], "computeV": [["void", "int k"]], "computeU": [["void", "int k"]], "getUBV": [["DenseMatrix64F"]], "getGammasU": [["double[]"]], "getB": [["DenseMatrix64F", "DenseMatrix64F B", "boolean compact"]], "getGammasV": [["double[]"]]}, "className": "BidiagonalDecompositionRow_D64", "renamed": ["void", "function", "(", "DenseMatrix64F", "arg0", ")", "{", "UBV", "=", "arg0", ";", "m", "=", "UBV", ".", "numRows", ";", "n", "=", "UBV", ".", "numCols", ";", "min", "=", "Math", ".", "min", "(", "m", ",", "n", ")", ";", "int", "loc0", "=", "Math", ".", "loc0", "(", "m", ",", "n", ")", ";", "if", "(", "b", ".", "length", "<", "loc0", "+", "1", ")", "{", "b", "=", "new", "double", "[", "loc0", "+", "1", "]", ";", "u", "=", "new", "double", "[", "loc0", "+", "1", "]", ";", "}", "if", "(", "gammasU", ".", "length", "<", "m", ")", "{", "gammasU", "=", "new", "double", "[", "m", "]", ";", "}", "if", "(", "gammasV", ".", "length", "<", "n", ")", "{", "gammasV", "=", "new", "double", "[", "n", "]", ";", "}", "}"], "nl": "Sets up internal data structures and creates a copy of the input matrix.", "nlToks": ["Sets", "up", "internal", "data", "structures", "and", "creates", "a", "copy", "of", "the", "input", "matrix", "."], "path": "adamaulia/efficient-java-matrix-library/tree/master/src/org/ejml/alg/dense/decomposition/bidiagonal/BidiagonalDecompositionRow_D64.java", "idx": 2339}
{"memberVariables": {"_label": "String"}, "code": ["String", "function", "(", ")", "{", "if", "(", "label", "(", ")", "!=", "null", ")", "return", "label", "(", ")", "+", "\":\"", ";", "else", "return", "\" \"", ";", "}"], "memberFunctions": {"is_action": [["boolean"]], "hashCode": [["int"]], "equals": [["boolean", "production_part other"], ["boolean", "Object other"]], "label": [["String"]]}, "className": "production_part", "renamed": ["String", "function", "(", ")", "{", "if", "(", "label", "(", ")", "!=", "null", ")", "return", "label", "(", ")", "+", "\"srini_string\"", ";", "else", "return", "\"srini_string\"", ";", "}"], "nl": "Convert to a string.", "nlToks": ["Convert", "to", "a", "string", "."], "path": "polyglot-compiler/polyglot/tree/master/tools/java_cup/src/java_cup/production_part.java", "idx": 2341}
{"memberVariables": {"KEY_CONTENT_TYPE=\"content-type\"": "String", "KEY_TRACK_ID=\"track-id\"": "String", "KEY_TRACKS_DATA=\"track-data\"": "String", "KEY_CUSTOM_DATA=\"custom-data\"": "String", "KEY_TRACK_LANGUAGE=\"track-language\"": "String", "KEY_STREAM_TYPE=\"stream-type\"": "String", "KEY_TRACK_CONTENT_ID=\"track-custom-id\"": "String", "KEY_IMAGES=\"images\"": "String", "TAG=LogUtils.makeLogTag(Utils.class)": "String", "KEY_TRACK_TYPE=\"track-type\"": "String", "KEY_TRACK_NAME=\"track-name\"": "String", "KEY_URL=\"movie-urls\"": "String", "KEY_TRACK_SUBTYPE=\"track-subtype\"": "String", "KEY_TRACK_CUSTOM_DATA=\"track-custom-data\"": "String", "KEY_STREAM_DURATION=\"stream-duration\"": "String", "IS_KITKAT_OR_ABOVE=Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT": "boolean"}, "code": ["String", "function", "(", "MediaInfo", "info", ",", "int", "index", ")", "{", "Uri", "uri", "=", "getImageUri", "(", "info", ",", "index", ")", ";", "if", "(", "uri", "!=", "null", ")", "{", "return", "uri", ".", "toString", "(", ")", ";", "}", "return", "null", ";", "}"], "memberFunctions": {"formatMillis": [["String", "int millisec"]], "mediaInfoToBundle": [["Bundle", "MediaInfo info"]], "getWifiSsid": [["String", "Context context"]], "bundleToMediaInfo": [["MediaInfo", "Bundle wrapper"]], "showToast": [["void", "Context context", "int resourceId"]], "getImageUri": [["Uri", "MediaInfo info", "int level"]], "checkGooglePlayServices": [["boolean", "final Activity activity"]], "convertDpToPixel": [["int", "Context context", "float dp"]], "scaleAndCenterCropBitmap": [["Bitmap", "Bitmap source", "int newHeight", "int newWidth"]]}, "className": "Utils", "renamed": ["String", "function", "(", "MediaInfo", "arg0", ",", "int", "arg1", ")", "{", "Uri", "loc0", "=", "getImageUri", "(", "arg0", ",", "arg1", ")", ";", "if", "(", "loc0", "!=", "null", ")", "{", "return", "loc0", ".", "toString", "(", ")", ";", "}", "return", "null", ";", "}"], "nl": "Returns the URL of an image for the  {@link MediaInfo} at the given index. Index should be anumber between 0 and  {@code n-1} where {@code n} is the number of images for that given item.", "nlToks": ["Returns", "the", "URL", "of", "an", "image", "for", "the", "-LCB-", "@link", "MediaInfo", "-RCB-", "at", "the", "given", "index", ".", "Index", "should", "be", "anumber", "between", "0", "and", "-LCB-", "@code", "n-1", "-RCB-", "where", "-LCB-", "@code", "n", "-RCB-", "is", "the", "number", "of", "images", "for", "that", "given", "item", "."], "path": "phpeng-ms/CastCompanionLibrary-android/tree/master/src/com/google/android/libraries/cast/companionlibrary/utils/Utils.java", "idx": 2343}
{"memberVariables": {"failed=new AtomicInteger()": "AtomicInteger", "totalElapsed=new AtomicLong()": "AtomicLong", "active=new AtomicInteger()": "AtomicInteger", "succeededMaxElapsed=new AtomicLong()": "AtomicLong", "SERVICE_STATISTICS=new ConcurrentHashMap<String,RpcStatus>()": "ConcurrentMap<String,RpcStatus>", "METHOD_STATISTICS=new ConcurrentHashMap<String,ConcurrentMap<String,RpcStatus>>()": "ConcurrentMap<String,ConcurrentMap<String,RpcStatus>>", "values=new ConcurrentHashMap<String,Object>()": "ConcurrentMap<String,Object>", "total=new AtomicLong()": "AtomicLong", "failedElapsed=new AtomicLong()": "AtomicLong", "maxElapsed=new AtomicLong()": "AtomicLong", "failedMaxElapsed=new AtomicLong()": "AtomicLong"}, "code": ["long", "function", "(", ")", "{", "return", "totalElapsed", ".", "get", "(", ")", ";", "}"], "memberFunctions": {"getFailedAverageElapsed": [["long"]], "getSucceededMaxElapsed": [["long"]], "set": [["void", "String key", "Object value"]], "getSucceededElapsed": [["long"]], "getSucceeded": [["long"]], "getSucceededAverageElapsed": [["long"]], "getMaxElapsed": [["long"]], "getStatus": [["RpcStatus", "URL url"], ["RpcStatus", "URL url", "String methodName"]], "removeStatus": [["void", "URL url"], ["void", "URL url", "String methodName"]], "getAverageTps": [["long"]], "getFailedElapsed": [["long"]], "getFailedMaxElapsed": [["long"]], "get": [["Object", "String key"]], "endCount": [["void", "URL url", "String methodName", "long elapsed", "boolean succeeded"], ["void", "RpcStatus status", "long elapsed", "boolean succeeded"]], "getAverageElapsed": [["long"]], "getActive": [["int"]], "getTotal": [["long"]], "beginCount": [["void", "URL url", "String methodName"], ["void", "RpcStatus status"]], "getFailed": [["int"]]}, "className": "RpcStatus", "renamed": ["long", "function", "(", ")", "{", "return", "totalElapsed", ".", "get", "(", ")", ";", "}"], "nl": "get total elapsed.", "nlToks": ["get", "total", "elapsed", "."], "path": "acupple/dubbo/tree/master/dubbo-rpc/dubbo-rpc-api/src/main/java/com/alibaba/dubbo/rpc/RpcStatus.java", "idx": 2344}
{"memberVariables": {}, "code": ["String", "function", "(", "BufferedReader", "unmappedIn", ")", "{", "String", "unmappedLine", "=", "unmappedIn", ".", "readLine", "(", ")", ";", "while", "(", "unmappedLine", "!=", "null", "&&", "unmappedLine", ".", "trim", "(", ")", ".", "startsWith", "(", "\"#\"", ")", ")", "{", "unmappedLine", "=", "unmappedIn", ".", "readLine", "(", ")", ";", "}", "return", "unmappedLine", ";", "}"], "memberFunctions": {"sizeMismatch": [["boolean", "String inputFile", "String mappedFile", "String unmappedFile"]], "main": [["void", "String[] args"]], "updatePositions": [["void", "String inputFile", "String mappedFile", "String unmappedFile", "String auxFile", "String outputFile"]], "isUnmapped": [["boolean", "MafRecord record", "String unmappedLine"]], "getNextModRow": [["Integer", "BufferedReader auxIn"]]}, "className": "PostLiftOver", "renamed": ["String", "function", "(", "BufferedReader", "arg0", ")", "{", "String", "loc0", "=", "arg0", ".", "readLine", "(", ")", ";", "while", "(", "loc0", "!=", "null", "&&", "loc0", ".", "trim", "(", ")", ".", "startsWith", "(", "\"srini_string\"", ")", ")", "{", "loc0", "=", "arg0", ".", "readLine", "(", ")", ";", "}", "return", "loc0", ";", "}"], "nl": "Skips any comment lines and retrieves a data line from the unmapped file (created by liftOver).", "nlToks": ["Skips", "any", "comment", "lines", "and", "retrieves", "a", "data", "line", "from", "the", "unmapped", "file", "-LRB-", "created", "by", "liftOver", "-RRB-", "."], "path": "adamabeshouse/cbioportal/tree/master/portal/src/org/mskcc/cgds/scripts/PostLiftOver.java", "idx": 2347}
{"memberVariables": {"EXAMPLE=\"$GPVTG,360.0,T,348.7,M,16.89,N,31.28,K,A\"": "String", "vtg": "VTGSentence", "empty": "VTGSentence"}, "code": ["void", "function", "(", ")", "{", "final", "double", "mcog", "=", "95.56789", ";", "vtg", ".", "setMagneticCourse", "(", "mcog", ")", ";", "assertTrue", "(", "vtg", ".", "toString", "(", ")", ".", "contains", "(", "\",095.6,M,\"", ")", ")", ";", "assertEquals", "(", "mcog", ",", "vtg", ".", "getMagneticCourse", "(", ")", ",", "0.1", ")", ";", "}"], "memberFunctions": {"testGetMagneticCourse": [["void"]], "testGetSpeedKmh": [["void"]], "testGetSpeedKnots": [["void"]], "testSetMagneticCourseWithNegativeValue": [["void"]], "testSetMagneticCourseWithValueGreaterThanAllowed": [["void"]], "testSetSpeedKmhWithNegativeValue": [["void"]], "testSetSpeedKnotsWithNegativeValue": [["void"]], "testConstructor": [["void"]], "testGetTrueCourse": [["void"]], "testSetSpeedKmh": [["void"]], "testSetMode": [["void"]], "testSetModeWhenOmitted": [["void"]], "testSetTrueCourseWithNegativeValue": [["void"]], "setUp": [["void"]], "testSetSpeedKnots": [["void"]], "testSetTrueCourse": [["void"]], "testGetMode": [["void"]], "testSetTrueCourseWithValueGreaterThanAllowed": [["void"]]}, "className": "VTGTest", "renamed": ["void", "function", "(", ")", "{", "final", "double", "loc0", "=", "95.56789", ";", "vtg", ".", "setMagneticCourse", "(", "loc0", ")", ";", "assertTrue", "(", "vtg", ".", "toString", "(", ")", ".", "contains", "(", "\"srini_string\"", ")", ")", ";", "assertEquals", "(", "loc0", ",", "vtg", ".", "getMagneticCourse", "(", ")", ",", "0.1", ")", ";", "}"], "nl": "Test method for {@link net.sf.marineapi.nmea.parser.VTGParser#setMagneticCourse(double)}.", "nlToks": ["Test", "method", "for", "-LCB-", "@link", "net.sf.marineapi.nmea.parser.VTGParser", "#setMagneticCourse", "-LRB-", "double", "-RRB-", "-RCB-", "."], "path": "pkoziol/marine-api/tree/master/src/test/java/net/sf/marineapi/nmea/parser/VTGTest.java", "idx": 2348}
{"memberVariables": {"mc": "MessageContext"}, "code": ["void", "function", "(", "MessageContext", "context", ")", "{", "mc", "=", "context", ";", "}"], "memberFunctions": {"getUpdated": [["String", "T pojo"]], "getTitle": [["String", "T pojo"]], "getLinks": [["Map<String,String>", "T pojo"]], "getAuthor": [["String", "T pojo"]], "getCategories": [["List<String>", "T pojo"]], "getMessageContext": [["MessageContext"]], "getId": [["String", "T pojo"]], "getBaseUri": [["String", "T pojo"]]}, "className": "AbstractAtomElementBuilder", "renamed": ["void", "function", "(", "MessageContext", "arg0", ")", "{", "mc", "=", "arg0", ";", "}"], "nl": "Sets MessageContext", "nlToks": ["Sets", "MessageContext"], "path": "primesign/cxf/tree/master/rt/rs/extensions/providers/src/main/java/org/apache/cxf/jaxrs/provider/atom/AbstractAtomElementBuilder.java", "idx": 2349}
{"memberVariables": {"mFiles": "Set<InodeFile>", "sTtlIntervalMs=Configuration.getInt(PropertyKey.MASTER_TTL_CHECKER_INTERVAL_MS)": "long", "mTtlIntervalStartTimeMs": "long"}, "code": ["int", "function", "(", ")", "{", "return", "Objects", ".", "hashCode", "(", "mTtlIntervalStartTimeMs", ")", ";", "}"], "memberFunctions": {"removeFile": [["void", "InodeFile file"]], "getTtlIntervalMs": [["long"]], "equals": [["boolean", "Object o"]], "compareTo": [["int", "TtlBucket ttlBucket"]], "getFiles": [["Set<InodeFile>"]], "getTtlIntervalStartTimeMs": [["long"]], "getTtlIntervalEndTimeMs": [["long"]], "addFile": [["void", "InodeFile file"]]}, "className": "TtlBucket", "renamed": ["int", "function", "(", ")", "{", "return", "Objects", ".", "hashCode", "(", "mTtlIntervalStartTimeMs", ")", ";", "}"], "nl": "Returns the hash code for the  {@link TtlBucket}.", "nlToks": ["Returns", "the", "hash", "code", "for", "the", "-LCB-", "@link", "TtlBucket", "-RCB-", "."], "path": "poemlin/alluxio/tree/master/core/server/src/main/java/alluxio/master/file/meta/TtlBucket.java", "idx": 2350}
{"memberVariables": {"svd": "SingularValueDecomposition<DenseMatrix64F>", "mat": "DenseMatrix64F", "U": "T", "V": "T", "W": "T"}, "code": ["double", "function", "(", "int", "index", ")", "{", "return", "W", ".", "get", "(", "index", ",", "index", ")", ";", "}"], "memberFunctions": {"getV": [["T"]], "getW": [["T"]], "getSVD": [["SingularValueDecomposition"]], "rank": [["int"]], "nullSpace": [["SimpleMatrix"]], "nullity": [["int"]], "getU": [["T"]], "quality": [["double"]]}, "className": "SimpleSVD", "renamed": ["double", "function", "(", "int", "arg0", ")", "{", "return", "W", ".", "get", "(", "arg0", ",", "arg0", ")", ";", "}"], "nl": "Returns the specified singular value.", "nlToks": ["Returns", "the", "specified", "singular", "value", "."], "path": "adamaulia/efficient-java-matrix-library/tree/master/src/org/ejml/simple/SimpleSVD.java", "idx": 2351}
{"memberVariables": {"ruleSets=new ArrayList<>()": "List<RuleSet>", "ruleChain=new RuleChain()": "RuleChain"}, "code": ["RuleSet", "[", "]", "function", "(", ")", "{", "return", "ruleSets", ".", "toArray", "(", "new", "RuleSet", "[", "ruleSets", ".", "size", "(", ")", "]", ")", ";", "}"], "memberFunctions": {"usesTypeResolution": [["boolean", "Language language"]], "apply": [["void", "List<Node> acuList", "RuleContext ctx", "Language language"]], "start": [["void", "RuleContext ctx"]], "usesDFA": [["boolean", "Language language"]], "getRuleByName": [["Rule", "String ruleName"]], "usesMetrics": [["boolean", "Language language"]], "getChecksum": [["long"]], "addRuleSet": [["void", "RuleSet ruleSet"]], "ruleCount": [["int"]], "applies": [["boolean", "File file"]], "getRuleSetsIterator": [["Iterator<RuleSet>"]], "end": [["void", "RuleContext ctx"]], "removeDysfunctionalRules": [["void", "Collection<Rule> collector"]], "getAllRules": [["Set<Rule>"]]}, "className": "RuleSets", "renamed": ["RuleSet", "[", "]", "function", "(", ")", "{", "return", "ruleSets", ".", "toArray", "(", "new", "RuleSet", "[", "ruleSets", ".", "size", "(", ")", "]", ")", ";", "}"], "nl": "Get all the RuleSets.", "nlToks": ["Get", "all", "the", "RuleSets", "."], "path": "adangel/pmd/tree/master/pmd-core/src/main/java/net/sourceforge/pmd/RuleSets.java", "idx": 2352}
{"memberVariables": {"rawParameters": "String", "hasArgs": "boolean", "params": "HashMap<String,String>", "command": "String", "rawCommand": "String"}, "code": ["int", "function", "(", "String", "param", ")", "{", "try", "{", "return", "Integer", ".", "parseInt", "(", "params", ".", "get", "(", "param", ")", ")", ";", "}", "catch", "(", "Exception", "e", ")", "{", "return", "-", "1", ";", "}", "}"], "memberFunctions": {"getExternalArgs": [["String[]"]], "getLong": [["long", "String param"]], "hasArguments": [["boolean"]], "isSet": [["boolean", "String key"]], "getCommand": [["String"]], "isValid": [["boolean"]], "getExternalCommand": [["String[]", "String absolutePath"]], "toString": [["String"]], "getString": [["String", "String param"]], "parameters": [["String"]], "getBool": [["boolean", "String param"]], "parseCommand": [["void"]]}, "className": "PoseidonCommand", "renamed": ["int", "function", "(", "String", "arg0", ")", "{", "try", "{", "return", "Integer", ".", "parseInt", "(", "params", ".", "get", "(", "arg0", ")", ")", ";", "}", "catch", "(", "Exception", "loc0", ")", "{", "return", "-", "1", ";", "}", "}"], "nl": "Gets the value of the given parameter as an integer", "nlToks": ["Gets", "the", "value", "of", "the", "given", "parameter", "as", "an", "integer"], "path": "porkkana/msfgui/tree/master/src/msfgui/emulator/console/PoseidonCommand.java", "idx": 2354}
{"memberVariables": {"mOwnerBits": "Bits", "mGroupBits": "Bits", "SVALS=values()": "Bits[]", "mOtherBits": "Bits", "mString": "String"}, "code": ["boolean", "function", "(", "Bits", "that", ")", "{", "if", "(", "that", "!=", "null", ")", "{", "return", "(", "ordinal", "(", ")", "&", "that", ".", "ordinal", "(", ")", ")", "==", "that", ".", "ordinal", "(", ")", ";", "}", "return", "false", ";", "}"], "memberFunctions": {"extractOtherBits": [["Bits", "short mode"]], "tryParseInt": [["boolean", "String value"]], "or": [["Bits", "Bits that"]], "set": [["void", "Bits u", "Bits g", "Bits o"]], "extractOwnerBits": [["Bits", "short mode"]], "applyUMask": [["Mode", "Mode umask"], ["Mode"]], "setOtherBits": [["void", "Bits bits"]], "getOtherBits": [["Bits"]], "getDefault": [["Mode"]], "createFullAccess": [["Mode"]], "getGroupBits": [["Bits"]], "extractGroupBits": [["Bits", "short mode"]], "getOwnerBits": [["Bits"]], "setOwnerBits": [["void", "Bits bits"]], "not": [["Bits"]], "fromShort": [["void", "short n"]], "and": [["Bits", "Bits that"]], "hashCode": [["int"]], "setGroupBits": [["void", "Bits bits"]], "equals": [["boolean", "Object obj"]], "getUMask": [["Mode"]], "toString": [["String"], ["String"]], "toShort": [["short"]], "createNoAccess": [["Mode"]]}, "className": "Mode", "renamed": ["boolean", "function", "(", "Bits", "arg0", ")", "{", "if", "(", "arg0", "!=", "null", ")", "{", "return", "(", "ordinal", "(", ")", "&", "arg0", ".", "ordinal", "(", ")", ")", "==", "arg0", ".", "ordinal", "(", ")", ";", "}", "return", "false", ";", "}"], "nl": "Checks whether these bits imply the given bits.", "nlToks": ["Checks", "whether", "these", "bits", "imply", "the", "given", "bits", "."], "path": "poemlin/alluxio/tree/master/core/common/src/main/java/alluxio/security/authorization/Mode.java", "idx": 2356}
{"memberVariables": {"FRAME_SIZE_EXCEPTION_PATTERN=Pattern.compile(\"Frame size \\\\((\\\\d+)\\\\) larger than max length\")": "Pattern", "mConnected=false": "boolean", "mProtocol=null": "TProtocol", "mMode": "String", "mServiceVersion": "long", "mAddress=null": "InetSocketAddress", "mTransportProvider": "TransportProvider", "LOG=LoggerFactory.getLogger(Constants.LOGGER_TYPE)": "Logger", "RPC_MAX_NUM_RETRY=30": "int", "mClosed=false": "boolean"}, "code": ["void", "function", "(", ")", "{", "}"], "memberFunctions": {"disconnect": [["void"]], "afterDisconnect": [["void"]], "afterConnect": [["void"]], "checkVersion": [["void", "AlluxioService.Client client", "long version"]], "getServiceName": [["String"]], "isConnected": [["boolean"]], "getClient": [["AlluxioService.Client"]], "call": [["V"], ["V"]], "retryRPC": [["V", "RpcCallable<V> rpc"], ["V", "RpcCallableThrowsAlluxioTException<V> rpc"]], "getServiceVersion": [["long"]], "resetConnection": [["void"]], "getAddress": [["InetSocketAddress"]], "close": [["void"]], "connect": [["void"]]}, "className": "AbstractClient", "renamed": ["void", "function", "(", ")", "{", "}"], "nl": "This method is called before the connection is disconnected. Implementations should add any additional operations before the connection is disconnected.", "nlToks": ["This", "method", "is", "called", "before", "the", "connection", "is", "disconnected", ".", "Implementations", "should", "add", "any", "additional", "operations", "before", "the", "connection", "is", "disconnected", "."], "path": "poemlin/alluxio/tree/master/core/common/src/main/java/alluxio/AbstractClient.java", "idx": 2357}
{"memberVariables": {"comments": "String", "inactivationReasonType": "String", "receiptDate": "Timestamp", "isActive": "String", "predecessorId": "BigDecimal", "srcFileName": "String", "serialVersionUID=-2837724379118220768L": "long", "srcUniqueFileName": "String", "successorId": "BigDecimal", "createdDate": "Timestamp", "pclDataUnits": "List<PCLDataUnitEntity>", "dataSetId": "long", "feedId": "BigDecimal", "fileSize": "BigDecimal", "destFileName": "String", "checksum": "String", "checksumType": "String", "modifiedDate": "Timestamp", "runId": "BigDecimal", "isPrepopulated": "String", "isUpdate": "String", "receiptDateType": "String", "status": "String"}, "code": ["void", "function", "(", "String", "isActive", ")", "{", "this", ".", "isActive", "=", "isActive", ";", "}"], "memberFunctions": {"setFeedId": [["void", "BigDecimal feedId"]], "getInactivationReasonType": [["String"]], "getSrcUniqueFileName": [["String"]], "getDataSetId": [["long"]], "setReceiptDateType": [["void", "String receiptDateType"]], "setIsPrepopulated": [["void", "String isPrepopulated"]], "getRunId": [["BigDecimal"]], "setSrcFileName": [["void", "String srcFileName"]], "getChecksumType": [["String"]], "getSrcFileName": [["String"]], "getChecksum": [["String"]], "getStatus": [["String"]], "getDestFileName": [["String"]], "getIsUpdate": [["String"]], "getFileSize": [["BigDecimal"]], "getPclDataUnits": [["List<PCLDataUnitEntity>"]], "setPclDataUnits": [["void", "List<PCLDataUnitEntity> pclDataUnits"]], "setInactivationReasonType": [["void", "String inactivationReasonType"]], "getReceiptDate": [["Timestamp"]], "getComments": [["String"]], "getCreatedDate": [["Timestamp"]], "setComments": [["void", "String comments"]], "removePclDataUnit": [["PCLDataUnitEntity", "PCLDataUnitEntity pclDataUnit"]], "getSuccessorId": [["BigDecimal"]], "getIsPrepopulated": [["String"]], "setSrcUniqueFileName": [["void", "String srcUniqueFileName"]], "setFileSize": [["void", "BigDecimal fileSize"]], "getPredecessorId": [["BigDecimal"]], "setChecksum": [["void", "String checksum"]], "setIsUpdate": [["void", "String isUpdate"]], "getReceiptDateType": [["String"]], "getFeedId": [["BigDecimal"]], "setRunId": [["void", "BigDecimal runId"]], "setReceiptDate": [["void", "Timestamp receiptDate"]], "setStatus": [["void", "String status"]], "getModifiedDate": [["Timestamp"]], "getIsActive": [["String"]], "setSuccessorId": [["void", "BigDecimal successorId"]], "setDestFileName": [["void", "String destFileName"]], "addPclDataUnit": [["PCLDataUnitEntity", "PCLDataUnitEntity pclDataUnit"]], "setModifiedDate": [["void", "Timestamp modifiedDate"]], "setCreatedDate": [["void", "Timestamp createdDate"]], "setDataSetId": [["void", "long dataSetId"]], "setPredecessorId": [["void", "BigDecimal predecessorId"]], "setChecksumType": [["void", "String checksumType"]]}, "className": "PCLDataSetEntity", "renamed": ["void", "function", "(", "String", "arg0", ")", "{", "this", ".", "isActive", "=", "arg0", ";", "}"], "nl": "Sets the checks if is active.", "nlToks": ["Sets", "the", "checks", "if", "is", "active", "."], "path": "pkesireddy/portico_fletcher/tree/master/FetcherTesterService/src/main/java/org/ithaka/cm/fetchertester/entity/PCLDataSetEntity.java", "idx": 2358}
{"memberVariables": {"pos": "int", "pg": "Page"}, "code": ["String", "function", "(", ")", "{", "String", "result", "=", "pg", ".", "getString", "(", "pos", ")", ";", "pos", "+=", "STR_SIZE", "(", "result", ".", "length", "(", ")", ")", ";", "return", "result", ";", "}"], "memberFunctions": {"nextInt": [["int"]]}, "className": "BasicLogRecord", "renamed": ["String", "function", "(", ")", "{", "String", "loc0", "=", "pg", ".", "getString", "(", "pos", ")", ";", "pos", "+=", "STR_SIZE", "(", "loc0", ".", "length", "(", ")", ")", ";", "return", "loc0", ";", "}"], "nl": "Returns the next value of the current log record,  assuming it is a string.", "nlToks": ["Returns", "the", "next", "value", "of", "the", "current", "log", "record", ",", "assuming", "it", "is", "a", "string", "."], "path": "prerit2803/DBMSProject2/tree/master/simpledb/log/BasicLogRecord.java", "idx": 2360}
{"memberVariables": {"cascadedProperties": "Map", "fingerprint": "String", "emptyCascadedStyle=new CascadedStyle()": "CascadedStyle"}, "code": ["CascadedStyle", "function", "(", "IdentValue", "display", ")", "{", "CSSPrimitiveValue", "val", "=", "new", "PropertyValue", "(", "display", ")", ";", "List", "props", "=", "Collections", ".", "singletonList", "(", "new", "PropertyDeclaration", "(", "CSSName", ".", "DISPLAY", ",", "val", ",", "true", ",", "StylesheetInfo", ".", "USER", ")", ")", ";", "return", "new", "CascadedStyle", "(", "props", ".", "iterator", "(", ")", ")", ";", "}"], "memberFunctions": {"createLayoutPropertyDeclaration": [["PropertyDeclaration", "CSSName cssName", "IdentValue display"]], "getCascadedPropertyDeclarations": [["java.util.Iterator"]], "propertyByName": [["PropertyDeclaration", "CSSName cssName"]], "createLayoutStyle": [["CascadedStyle", "PropertyDeclaration[] decls"], ["CascadedStyle", "List decls"], ["CascadedStyle", "CascadedStyle startingPoint", "PropertyDeclaration[] decls"]], "countAssigned": [["int"]], "addProperties": [["void", "java.util.Iterator iter"]], "hasProperty": [["boolean", "CSSName cssName"]], "getFingerprint": [["String"]], "getIdent": [["IdentValue", "CSSName cssName"]]}, "className": "CascadedStyle", "renamed": ["CascadedStyle", "function", "(", "IdentValue", "arg0", ")", "{", "CSSPrimitiveValue", "loc0", "=", "new", "PropertyValue", "(", "arg0", ")", ";", "List", "loc1", "=", "Collections", ".", "singletonList", "(", "new", "PropertyDeclaration", "(", "CSSName", ".", "DISPLAY", ",", "loc0", ",", "true", ",", "StylesheetInfo", ".", "USER", ")", ")", ";", "return", "new", "CascadedStyle", "(", "loc1", ".", "iterator", "(", ")", ")", ";", "}"], "nl": "Creates a CascadedStyle, setting the display property to to the value of the display parameter.", "nlToks": ["Creates", "a", "CascadedStyle", ",", "setting", "the", "display", "property", "to", "to", "the", "value", "of", "the", "display", "parameter", "."], "path": "plutogeek/flyingsaucer/tree/master/flying-saucer-core/src/main/java/org/xhtmlrenderer/css/newmatch/CascadedStyle.java", "idx": 2361}
{"memberVariables": {"LEVEL_TAG=\"level\"": "String", "level": "String", "MESSAGE_TAG=\"message\"": "String", "throwable": "String", "THROWABLE_TAG=\"throwable\"": "String", "title": "String", "message": "String", "xmlParser": "LazyXmlParser", "EVENT_TIMESTAMP_TAG=\"date\"": "String", "DATETIME_FORMATTER=DateTimeFormat.getFormat(\"yyyy-MM-ddTHH:mm:ss'.'SSSZ\")": "DateTimeFormat", "TITLE_TAG=\"title\"": "String", "entryNode": "Node", "eventTimestamp": "Date"}, "code": ["String", "function", "(", ")", "{", "if", "(", "title", "==", "null", ")", "{", "title", "=", "avoidNull", "(", "xmlParser", ".", "getTitle", "(", ")", ")", ";", "}", "return", "title", ";", "}"], "memberFunctions": {"getTextValue": [["String", "@Nonnull final Node node"]], "getLevel": [["String"], ["String"]], "avoidNull": [["String", "@Nullable final String value"]], "getTagValue": [["String", "@Nonnull final String tagName"]], "getEventTimestamp": [["Date"], ["Date"]], "getMessage": [["String"], ["String"]], "getUniqueElementByTagName": [["Node", "@Nonnull final String tagName"]], "getThrowable": [["String"], ["String"]]}, "className": "Entry", "renamed": ["String", "function", "(", ")", "{", "if", "(", "title", "==", "null", ")", "{", "title", "=", "avoidNull", "(", "xmlParser", ".", "getTitle", "(", ")", ")", ";", "}", "return", "title", ";", "}"], "nl": "Returns short message of the log record.", "nlToks": ["Returns", "short", "message", "of", "the", "log", "record", "."], "path": "primesign/cxf/tree/master/rt/management-web/src/main/java/org/apache/cxf/management/web/browser/client/service/browser/Entry.java", "idx": 2362}
{"memberVariables": {"DELETED=new Object()": "Object", "_size": "int", "_values": "int[]", "_mask": "int", "NULL=0xdeadbeef": "int", "_keys": "Object[]"}, "code": ["int", "function", "(", "Object", "key", ")", "{", "int", "mask", "=", "_mask", ";", "int", "hash", "=", "System", ".", "identityHashCode", "(", "key", ")", "%", "mask", "&", "mask", ";", "Object", "[", "]", "keys", "=", "_keys", ";", "while", "(", "true", ")", "{", "Object", "mapKey", "=", "keys", "[", "hash", "]", ";", "if", "(", "mapKey", "==", "null", ")", "return", "NULL", ";", "else", "if", "(", "mapKey", "==", "key", ")", "return", "_values", "[", "hash", "]", ";", "hash", "=", "(", "hash", "+", "1", ")", "%", "mask", ";", "}", "}"], "memberFunctions": {"size": [["int"]], "clear": [["void"]], "resize": [["void", "int newSize"]], "toString": [["String"]], "put": [["int", "Object key", "int value"]], "remove": [["int", "Object key"]]}, "className": "IdentityIntMap", "renamed": ["int", "function", "(", "Object", "arg0", ")", "{", "int", "loc0", "=", "_mask", ";", "int", "loc1", "=", "System", ".", "identityHashCode", "(", "arg0", ")", "%", "loc0", "&", "loc0", ";", "Object", "[", "]", "loc2", "=", "_keys", ";", "while", "(", "true", ")", "{", "Object", "loc3", "=", "loc2", "[", "loc1", "]", ";", "if", "(", "loc3", "==", "null", ")", "return", "NULL", ";", "else", "if", "(", "loc3", "==", "arg0", ")", "return", "_values", "[", "loc1", "]", ";", "loc1", "=", "(", "loc1", "+", "1", ")", "%", "loc0", ";", "}", "}"], "nl": "Puts a new value in the property table with the appropriate flags", "nlToks": ["Puts", "a", "new", "value", "in", "the", "property", "table", "with", "the", "appropriate", "flags"], "path": "acupple/dubbo/tree/master/hessian-lite/src/main/java/com/alibaba/com/caucho/hessian/util/IdentityIntMap.java", "idx": 2363}
{"memberVariables": {"edgeOffset=0": "int", "figure=null": "FigNode", "UPLINK_FACTOR=5": "float", "uplinks=new ArrayList<ClassdiagramNode>()": "List<ClassdiagramNode>", "rank=NORANK": "int", "downlinks=new ArrayList<ClassdiagramNode>()": "List<ClassdiagramNode>", "NORANK=-1": "int", "column=NOCOLUMN": "int", "placementHint=-1": "int", "weight=NOWEIGHT": "float", "NOCOLUMN=-1": "int", "NOWEIGHT=-1": "int"}, "code": ["int", "function", "(", ")", "{", "return", "placementHint", ";", "}"], "memberFunctions": {"getUplinks": [["Vector<ClassdiagramNode>"]], "getLocation": [["Point"]], "isComment": [["boolean"]], "getUpNodes": [["List<ClassdiagramNode>"]], "getWeight": [["float"]], "getFigure": [["FigNode"]], "getDownlinks": [["Vector<ClassdiagramNode>"]], "compareTo": [["int", "Object arg0"]], "setColumn": [["void", "int newColumn"]], "addDownlink": [["void", "ClassdiagramNode newDownlink"]], "setLocation": [["void", "Point newLocation"]], "setEdgeOffset": [["void", "int newOffset"]], "isStandalone": [["boolean"]], "getColumn": [["int"]], "getSubtreeWeight": [["float"]], "calculateWeight": [["float"]], "setRank": [["void", "int newRank"]], "addRank": [["void", "int n"]], "getTypeOrderNumer": [["int"]], "getEdgeOffset": [["int"]], "getRank": [["int"]], "setWeight": [["void", "float w"]], "isPackage": [["boolean"]], "addUplink": [["void", "ClassdiagramNode newUplink"]], "getLevel": [["int"]], "getSize": [["Dimension"]], "setPlacementHint": [["void", "int hint"]], "setFigure": [["void", "FigNode newFigure"]], "getDownNodes": [["List<ClassdiagramNode>"]]}, "className": "ClassdiagramNode", "renamed": ["int", "function", "(", ")", "{", "return", "placementHint", ";", "}"], "nl": "Get the current placement hint.", "nlToks": ["Get", "the", "current", "placement", "hint", "."], "path": "pichiliani/CoArgoUML/tree/master/v0.24/fonte/src/argouml-app/src/org/argouml/uml/diagram/static_structure/layout/ClassdiagramNode.java", "idx": 2364}
{"memberVariables": {"bus": "Bus", "resolvers=new CopyOnWriteArrayList<ServiceContractResolver>()": "List<ServiceContractResolver>"}, "code": ["URI", "function", "(", "QName", "qname", ")", "{", "for", "(", "ServiceContractResolver", "resolver", ":", "resolvers", ")", "{", "URI", "contractLocation", "=", "resolver", ".", "getContractLocation", "(", "qname", ")", ";", "if", "(", "null", "!=", "contractLocation", ")", "{", "return", "contractLocation", ";", "}", "}", "return", "null", ";", "}"], "memberFunctions": {"unregister": [["void", "ServiceContractResolver resolver"]], "isRegistered": [["boolean", "ServiceContractResolver resolver"]], "getResolvers": [["List<ServiceContractResolver>"]], "setBus": [["void", "Bus b"]], "register": [["void", "ServiceContractResolver resolver"]]}, "className": "ServiceContractResolverRegistryImpl", "renamed": ["URI", "function", "(", "QName", "arg0", ")", "{", "for", "(", "ServiceContractResolver", "loc0", ":", "resolvers", ")", "{", "URI", "loc1", "=", "loc0", ".", "getContractLocation", "(", "arg0", ")", ";", "if", "(", "null", "!=", "loc1", ")", "{", "return", "loc1", ";", "}", "}", "return", "null", ";", "}"], "nl": "Calls each of the registered ServiceContractResolver instances to resolve the location of the service's contract. It returns the location  from the first resolver that matches the QName to a location.", "nlToks": ["Calls", "each", "of", "the", "registered", "ServiceContractResolver", "instances", "to", "resolve", "the", "location", "of", "the", "service", "'s", "contract", ".", "It", "returns", "the", "location", "from", "the", "first", "resolver", "that", "matches", "the", "QName", "to", "a", "location", "."], "path": "primesign/cxf/tree/master/core/src/main/java/org/apache/cxf/bus/managers/ServiceContractResolverRegistryImpl.java", "idx": 2365}
{"memberVariables": {"taken=new BitSet(64)": "BitSet", "black=new BitSet(64)": "BitSet"}, "code": ["boolean", "function", "(", ")", "{", "return", "!", "(", "hasMoves", "(", "OthelloSide", ".", "BLACK", ")", "||", "hasMoves", "(", "OthelloSide", ".", "WHITE", ")", ")", ";", "}"], "memberFunctions": {"countBlack": [["int"]], "move": [["void", "Move m", "OthelloSide turn"]], "set": [["void", "OthelloSide side", "int x", "int y"]], "get": [["boolean", "OthelloSide side", "int x", "int y"]], "checkMove": [["boolean", "Move m", "OthelloSide turn"]], "onBoard": [["boolean", "int x", "int y"]], "copy": [["OthelloBoard"]], "countWhite": [["int"]], "hasMoves": [["boolean", "OthelloSide side"]], "occupied": [["boolean", "int x", "int y"]]}, "className": "OthelloBoard", "renamed": ["boolean", "function", "(", ")", "{", "return", "!", "(", "hasMoves", "(", "OthelloSide", ".", "BLACK", ")", "||", "hasMoves", "(", "OthelloSide", ".", "WHITE", ")", ")", ";", "}"], "nl": "Tests if the game is finished. The game is finished if neither side has a legal move.", "nlToks": ["Tests", "if", "the", "game", "is", "finished", ".", "The", "game", "is", "finished", "if", "neither", "side", "has", "a", "legal", "move", "."], "path": "preethiper/othello/tree/master/java/OthelloBoard.java", "idx": 2366}
{"memberVariables": {"absoluteFile": "File", "testProperties": "Properties", "includeProperties": "Properties"}, "code": ["void", "function", "(", ")", "{", "System", ".", "out", ".", "println", "(", "\"asProperties\"", ")", ";", "ResourceBundle", "bundle", "=", "ResourceBundle", ".", "getBundle", "(", "DBType", ".", "class", ".", "getPackage", "(", ")", ".", "getName", "(", ")", "+", "\".test\"", ")", ";", "Properties", "expResult", "=", "testProperties", ";", "Properties", "result", "=", "DBType", ".", "getResourceBundleAsProperties", "(", "bundle", ")", ";", "Assert", ".", "assertEquals", "(", "expResult", ",", "result", ")", ";", "}"], "memberFunctions": {"testGetIncludeProperties": [["void"]], "testGetProperties": [["void"]], "testGetPropertiesFromFile": [["void"]], "setUp": [["void"]], "tearDown": [["void"]]}, "className": "DBTypeTest", "renamed": ["void", "function", "(", ")", "{", "System", ".", "out", ".", "println", "(", "\"srini_string\"", ")", ";", "ResourceBundle", "loc0", "=", "ResourceBundle", ".", "getBundle", "(", "DBType", ".", "class", ".", "getPackage", "(", ")", ".", "getName", "(", ")", "+", "\"srini_string\"", ")", ";", "Properties", "loc1", "=", "testProperties", ";", "Properties", "loc2", "=", "DBType", ".", "getResourceBundleAsProperties", "(", "loc0", ")", ";", "Assert", ".", "assertEquals", "(", "loc1", ",", "loc2", ")", ";", "}"], "nl": "Test of getResourceBundleAsProperties method, of class DBType.", "nlToks": ["Test", "of", "getResourceBundleAsProperties", "method", ",", "of", "class", "DBType", "."], "path": "adangel/pmd/tree/master/pmd-core/src/test/java/net/sourceforge/pmd/util/database/DBTypeTest.java", "idx": 2367}
{"memberVariables": {"isWorkerRunning=false": "boolean", "queue=new ArrayDeque<Runnable>()": "Deque<Runnable>", "executor": "Executor", "internalLock=new Object()": "Object", "suspensions=0": "int", "log=Logger.getLogger(SerializingExecutor.class.getName())": "Logger"}, "code": ["void", "function", "(", "Runnable", "task", ")", "{", "synchronized", "(", "internalLock", ")", "{", "queue", ".", "add", "(", "task", ")", ";", "}", "startQueueWorker", "(", ")", ";", "}"], "memberFunctions": {"suspend": [["void"]], "resume": [["void"]], "executeFirst": [["void", "Runnable task"]], "startQueueWorker": [["void"]], "run": [["void"]], "workOnQueue": [["void"]]}, "className": "SerializingExecutor", "renamed": ["void", "function", "(", "Runnable", "arg0", ")", "{", "synchronized", "(", "internalLock", ")", "{", "queue", ".", "add", "(", "arg0", ")", ";", "}", "startQueueWorker", "(", ")", ";", "}"], "nl": "Adds a task to the queue and makes sure a worker thread is running, unless the queue has been suspended. If this method throws, e.g. a  {@code RejectedExecutionException} from the delegate executor,execution of tasks will stop until a call to this method or to  {@link #resume()} is made.", "nlToks": ["Adds", "a", "task", "to", "the", "queue", "and", "makes", "sure", "a", "worker", "thread", "is", "running", ",", "unless", "the", "queue", "has", "been", "suspended", ".", "If", "this", "method", "throws", ",", "e.g.", "a", "-LCB-", "@code", "RejectedExecutionException", "-RCB-", "from", "the", "delegate", "executor", ",", "execution", "of", "tasks", "will", "stop", "until", "a", "call", "to", "this", "method", "or", "to", "-LCB-", "@link", "#resume", "-LRB-", "-RRB-", "-RCB-", "is", "made", "."], "path": "hazendaz/guava/tree/master/guava/src/com/google/common/util/concurrent/SerializingExecutor.java", "idx": 2370}
{"memberVariables": {"unAttachedReference": "TokenReference", "expires": "Date", "tokenId": "String", "created": "Date", "lifetime": "long", "attachedReference": "TokenReference", "token": "Element"}, "code": ["void", "function", "(", "Date", "expires", ")", "{", "this", ".", "expires", "=", "expires", ";", "}"], "memberFunctions": {"setAttachedReference": [["void", "TokenReference attachedReference"]], "getTokenId": [["String"]], "getUnAttachedReference": [["TokenReference"]], "getLifetime": [["long"]], "getCreated": [["Date"]], "setCreated": [["void", "Date created"]], "setUnattachedReference": [["void", "TokenReference unattachedReference"]], "setToken": [["void", "Element token"]], "getToken": [["Element"]], "setLifetime": [["void", "long lifetime"]], "setTokenId": [["void", "String tokenId"]], "getExpires": [["Date"]], "getAttachedReference": [["TokenReference"]]}, "className": "TokenRenewerResponse", "renamed": ["void", "function", "(", "Date", "arg0", ")", "{", "this", ".", "expires", "=", "arg0", ";", "}"], "nl": "Set the Date that this Token expires", "nlToks": ["Set", "the", "Date", "that", "this", "Token", "expires"], "path": "primesign/cxf/tree/master/services/sts/sts-core/src/main/java/org/apache/cxf/sts/token/renewer/TokenRenewerResponse.java", "idx": 2373}
{"memberVariables": {"DEFAULT_PRIORITY=5": "int", "BASIC_AUTH_HEADER=\"Basic\"": "String", "log=LogFactory.getLog(BasicAuthHandler.class)": "Log", "priority": "int", "properties": "Map<String,String>"}, "code": ["int", "function", "(", ")", "{", "return", "priority", ";", "}"], "memberFunctions": {"canHandle": [["boolean", "Message message", "ClassResourceInfo classResourceInfo"]], "setProperties": [["void", "Map<String,String> authenticatorProperties"]], "setDefaultPriority": [["void"]], "isAuthenticated": [["boolean", "Message message", "ClassResourceInfo classResourceInfo"]], "setPriority": [["void", "int priority"]]}, "className": "BasicAuthHandler", "renamed": ["int", "function", "(", ")", "{", "return", "priority", ";", "}"], "nl": "Ideally this should be configurable. For the moment, hard code the priority.", "nlToks": ["Ideally", "this", "should", "be", "configurable", ".", "For", "the", "moment", ",", "hard", "code", "the", "priority", "."], "path": "harsha1979/carbon-identity/tree/master/components/scim/org.wso2.carbon.identity.scim.provider/src/main/java/org/wso2/carbon/identity/scim/provider/auth/BasicAuthHandler.java", "idx": 2377}
{"memberVariables": {"INT_MASK=0xffffffffL": "long"}, "code": ["int", "function", "(", "int", "dividend", ",", "int", "divisor", ")", "{", "return", "(", "int", ")", "(", "toLong", "(", "dividend", ")", "/", "toLong", "(", "divisor", ")", ")", ";", "}"], "memberFunctions": {"compare": [["int", "int a", "int b"], ["int", "int[] left", "int[] right"]], "saturatedCast": [["int", "long value"]], "toLong": [["long", "int value"]], "max": [["int", "int... array"]], "decode": [["int", "String stringValue"]], "parseUnsignedInt": [["int", "String s"], ["int", "String string", "int radix"]], "min": [["int", "int... array"]], "lexicographicalComparator": [["Comparator<int[]>"]], "checkedCast": [["int", "long value"]], "toString": [["String"], ["String", "int x"], ["String", "int x", "int radix"]], "join": [["String", "String separator", "int... array"]], "flip": [["int", "int value"]], "remainder": [["int", "int dividend", "int divisor"]]}, "className": "UnsignedInts", "renamed": ["int", "function", "(", "int", "arg0", ",", "int", "arg1", ")", "{", "return", "(", "int", ")", "(", "toLong", "(", "arg0", ")", "/", "toLong", "(", "arg1", ")", ")", ";", "}"], "nl": "Returns dividend / divisor, where the dividend and divisor are treated as unsigned 32-bit quantities.", "nlToks": ["Returns", "dividend", "/", "divisor", ",", "where", "the", "dividend", "and", "divisor", "are", "treated", "as", "unsigned", "32-bit", "quantities", "."], "path": "hazendaz/guava/tree/master/guava/src/com/google/common/primitives/UnsignedInts.java", "idx": 2378}
{"memberVariables": {"LOG=LogUtils.getL7dLogger(TypeUtil.class)": "Logger"}, "code": ["Type", "function", "(", "Type", "type", ")", "{", "return", "getSingleTypeParameter", "(", "type", ",", "0", ")", ";", "}"], "memberFunctions": {"getReadType": [["AegisType", "XMLStreamReader xsr", "AegisContext context", "AegisType baseType"]], "getReadTypeStandalone": [["AegisType", "XMLStreamReader xsr", "AegisContext context", "AegisType baseType"]], "getWriteType": [["AegisType", "AegisContext globalContext", "Object value", "AegisType type"]], "getTypeClass": [["Class<?>", "Type type", "boolean throwForNonClass"]], "setAttributeAttributes": [["void", "QName name", "AegisType type", "XmlSchema root"]], "getTypeRelatedClass": [["Class<?>", "Type type"]], "getWriteTypeStandalone": [["AegisType", "AegisContext globalContext", "Object value", "AegisType type"], ["AegisType", "AegisContext globalContext", "Object value", "java.lang.reflect.Type reflectType"]]}, "className": "TypeUtil", "renamed": ["Type", "function", "(", "Type", "arg0", ")", "{", "return", "getSingleTypeParameter", "(", "arg0", ",", "0", ")", ";", "}"], "nl": "Insist that a Type is a parameterized type of one parameter. This is used to decompose Holders, for example.", "nlToks": ["Insist", "that", "a", "Type", "is", "a", "parameterized", "type", "of", "one", "parameter", ".", "This", "is", "used", "to", "decompose", "Holders", ",", "for", "example", "."], "path": "primesign/cxf/tree/master/rt/databinding/aegis/src/main/java/org/apache/cxf/aegis/type/TypeUtil.java", "idx": 2381}
{"memberVariables": {"LOG=LogUtils.getL7dLogger(TypeUtil.class)": "Logger"}, "code": ["AegisType", "function", "(", "AegisContext", "globalContext", ",", "Object", "value", ",", "java", ".", "lang", ".", "reflect", ".", "Type", "reflectType", ")", "{", "if", "(", "reflectType", "==", "null", ")", "{", "return", "getWriteTypeStandalone", "(", "globalContext", ",", "value", ",", "(", "AegisType", ")", "null", ")", ";", "}", "else", "{", "return", "globalContext", ".", "getTypeMapping", "(", ")", ".", "getTypeCreator", "(", ")", ".", "createType", "(", "reflectType", ")", ";", "}", "}"], "memberFunctions": {"getReadType": [["AegisType", "XMLStreamReader xsr", "AegisContext context", "AegisType baseType"]], "getReadTypeStandalone": [["AegisType", "XMLStreamReader xsr", "AegisContext context", "AegisType baseType"]], "getWriteType": [["AegisType", "AegisContext globalContext", "Object value", "AegisType type"]], "getTypeClass": [["Class<?>", "Type type", "boolean throwForNonClass"]], "setAttributeAttributes": [["void", "QName name", "AegisType type", "XmlSchema root"]], "getSingleTypeParameter": [["Type", "Type type"], ["Type", "Type type", "int index"]], "getTypeRelatedClass": [["Class<?>", "Type type"]]}, "className": "TypeUtil", "renamed": ["AegisType", "function", "(", "AegisContext", "arg0", ",", "Object", "arg1", ",", "java", ".", "lang", ".", "reflect", ".", "Type", "arg2", ")", "{", "if", "(", "arg2", "==", "null", ")", "{", "return", "getWriteTypeStandalone", "(", "arg0", ",", "arg1", ",", "(", "AegisType", ")", "null", ")", ";", "}", "else", "{", "return", "arg0", ".", "getTypeMapping", "(", ")", ".", "getTypeCreator", "(", ")", ".", "createType", "(", "arg2", ")", ";", "}", "}"], "nl": "Allow writing of collections when the type of the collection object is known via an  {@link java.lang.reflect.Type} object.", "nlToks": ["Allow", "writing", "of", "collections", "when", "the", "type", "of", "the", "collection", "object", "is", "known", "via", "an", "-LCB-", "@link", "java.lang.reflect.Type", "-RCB-", "object", "."], "path": "primesign/cxf/tree/master/rt/databinding/aegis/src/main/java/org/apache/cxf/aegis/type/TypeUtil.java", "idx": 2384}
{"memberVariables": {"reliableEndpoint": "RMEndpoint", "completedSequenceCount": "AtomicInteger", "processingSequenceCount": "AtomicInteger"}, "code": ["Identifier", "function", "(", ")", "{", "return", "reliableEndpoint", ".", "getManager", "(", ")", ".", "getIdGenerator", "(", ")", ".", "generateSequenceIdentifier", "(", ")", ";", "}"], "memberFunctions": {"getReliableEndpoint": [["RMEndpoint"]], "getManager": [["RMManager"]], "getBus": [["Bus"]], "getName": [["String"]], "getProcessingSequenceCount": [["int"]], "getEndpoint": [["Endpoint"]], "getCompletedSequenceCount": [["int"]]}, "className": "AbstractEndpoint", "renamed": ["Identifier", "function", "(", ")", "{", "return", "reliableEndpoint", ".", "getManager", "(", ")", ".", "getIdGenerator", "(", ")", ".", "generateSequenceIdentifier", "(", ")", ";", "}"], "nl": "Generates and returns a new sequence identifier.", "nlToks": ["Generates", "and", "returns", "a", "new", "sequence", "identifier", "."], "path": "primesign/cxf/tree/master/rt/ws/rm/src/main/java/org/apache/cxf/ws/rm/AbstractEndpoint.java", "idx": 2385}
{"memberVariables": {"p": "Plan", "comp": "RecordComparator", "tx": "Transaction", "sch": "Schema"}, "code": ["int", "function", "(", "String", "fldname", ")", "{", "return", "p", ".", "distinctValues", "(", "fldname", ")", ";", "}"], "memberFunctions": {"schema": [["Schema"]], "splitIntoRuns": [["List<TempTable>", "Scan src"]], "blocksAccessed": [["int"]], "recordsOutput": [["int"]], "copy": [["boolean", "Scan src", "UpdateScan dest"]], "doAMergeIteration": [["List<TempTable>", "List<TempTable> runs"]], "mergeTwoRuns": [["TempTable", "TempTable p1", "TempTable p2"]], "open": [["Scan"]]}, "className": "SortPlan", "renamed": ["int", "function", "(", "String", "arg0", ")", "{", "return", "p", ".", "distinctValues", "(", "arg0", ")", ";", "}"], "nl": "Returns the number of distinct field values in the sorted table, which is the same as in the underlying query.", "nlToks": ["Returns", "the", "number", "of", "distinct", "field", "values", "in", "the", "sorted", "table", ",", "which", "is", "the", "same", "as", "in", "the", "underlying", "query", "."], "path": "prerit2803/DBMSProject2/tree/master/simpledb/materialize/SortPlan.java", "idx": 2386}
{"memberVariables": {"mKeyCount": "int", "BUCKET_SIZE_BYTES=Constants.BYTES_IN_INTEGER + 1": "int", "mBuf": "ByteBuffer", "INDEX_HASHER_SEED=0x1311": "int", "FINGERPRINT_HASHER_SEED=0x7a91": "int", "FINGERPRINT_HASHER=Hashing.murmur3_32(FINGERPRINT_HASHER_SEED)": "HashFunction", "INDEX_HASHER=Hashing.murmur3_32(INDEX_HASHER_SEED)": "HashFunction", "mHashTableBuf": "ByteBuffer", "MAX_PROBES=50": "int", "mNumBuckets": "int"}, "code": ["byte", "function", "(", "ByteBuffer", "key", ")", "{", "byte", "[", "]", "keyBytes", "=", "BufferUtils", ".", "newByteArrayFromByteBuffer", "(", "key", ")", ";", "return", "fingerprintHash", "(", "keyBytes", ")", ";", "}"], "memberFunctions": {"keyCount": [["int"]], "keyIterator": [["Iterator<ByteBuffer>", "final PayloadReader reader"]], "bucketOffset": [["int", "ByteBuffer key", "PayloadReader reader"]], "createEmptyIndex": [["LinearProbingIndex"]], "loadFromByteArray": [["LinearProbingIndex", "ByteBuffer buffer"]], "byteCount": [["int"]], "get": [["ByteBuffer", "ByteBuffer key", "PayloadReader reader"]], "indexHash": [["int", "byte[] key"], ["int", "ByteBuffer key"]], "nextKey": [["ByteBuffer", "ByteBuffer currentKey", "PayloadReader reader"]], "put": [["boolean", "byte[] key", "byte[] value", "PayloadWriter writer"]], "getBytes": [["byte[]"]]}, "className": "LinearProbingIndex", "renamed": ["byte", "function", "(", "ByteBuffer", "arg0", ")", "{", "byte", "[", "]", "loc0", "=", "BufferUtils", ".", "newByteArrayFromByteBuffer", "(", "arg0", ")", ";", "return", "fingerprintHash", "(", "loc0", ")", ";", "}"], "nl": "Hashes a key in  {@code ByteBuffer} into a non-zero, one byte fingerprint.", "nlToks": ["Hashes", "a", "key", "in", "-LCB-", "@code", "ByteBuffer", "-RCB-", "into", "a", "non-zero", ",", "one", "byte", "fingerprint", "."], "path": "poemlin/alluxio/tree/master/keyvalue/client/src/main/java/alluxio/client/keyvalue/LinearProbingIndex.java", "idx": 2387}
{"memberVariables": {"mLockManager": "BlockLockManager", "TEST_BLOCK_ID=9": "long", "mThrown=ExpectedException.none()": "ExpectedException", "TEST_SESSION_ID=2": "long", "mFolder=new TemporaryFolder()": "TemporaryFolder"}, "code": ["void", "function", "(", ")", "{", "setMaxLocks", "(", "1", ")", ";", "final", "BlockLockManager", "manager", "=", "new", "BlockLockManager", "(", ")", ";", "long", "lockId1", "=", "manager", ".", "lockBlock", "(", "TEST_SESSION_ID", ",", "1", ",", "BlockLockType", ".", "READ", ")", ";", "manager", ".", "lockBlock", "(", "TEST_SESSION_ID", ",", "1", ",", "BlockLockType", ".", "READ", ")", ";", "manager", ".", "unlockBlock", "(", "lockId1", ")", ";", "lockExpectingHang", "(", "manager", ",", "2", ")", ";", "}"], "memberFunctions": {"lockAcrossSessions": [["void"]], "stress": [["void"]], "validateLockIdWithNoRecord": [["void"]], "unlockNonExistingLock": [["void"]], "before": [["void"]], "reuseLock": [["void"]], "readBlocksWrite": [["void"]], "validateLockIdWithWrongBlockId": [["void"]], "setMaxLocks": [["void", "int maxLocks"]], "lockExpectingHang": [["void", "final BlockLockManager manager", "final long blockId"]], "lockBlock": [["void"]], "grabManyLocks": [["void"]], "validateLockIdWithWrongSessionId": [["void"]], "cleanupSession": [["void"]], "after": [["void"]]}, "className": "BlockLockManagerTest", "renamed": ["void", "function", "(", ")", "{", "setMaxLocks", "(", "1", ")", ";", "final", "BlockLockManager", "loc0", "=", "new", "BlockLockManager", "(", ")", ";", "long", "loc1", "=", "loc0", ".", "lockBlock", "(", "TEST_SESSION_ID", ",", "1", ",", "BlockLockType", ".", "READ", ")", ";", "loc0", ".", "lockBlock", "(", "TEST_SESSION_ID", ",", "1", ",", "BlockLockType", ".", "READ", ")", ";", "loc0", ".", "unlockBlock", "(", "loc1", ")", ";", "lockExpectingHang", "(", "loc0", ",", "2", ")", ";", "}"], "nl": "Tests that block locks are not returned to the pool when they are still in use.", "nlToks": ["Tests", "that", "block", "locks", "are", "not", "returned", "to", "the", "pool", "when", "they", "are", "still", "in", "use", "."], "path": "poemlin/alluxio/tree/master/core/server/src/test/java/alluxio/worker/block/BlockLockManagerTest.java", "idx": 2388}
{"memberVariables": {}, "code": ["String", "function", "(", "String", "string", ",", "int", "minLength", ",", "char", "padChar", ")", "{", "checkNotNull", "(", "string", ")", ";", "if", "(", "string", ".", "length", "(", ")", ">=", "minLength", ")", "{", "return", "string", ";", "}", "StringBuilder", "sb", "=", "new", "StringBuilder", "(", "minLength", ")", ";", "for", "(", "int", "i", "=", "string", ".", "length", "(", ")", ";", "i", "<", "minLength", ";", "i", "++", ")", "{", "sb", ".", "append", "(", "padChar", ")", ";", "}", "sb", ".", "append", "(", "string", ")", ";", "return", "sb", ".", "toString", "(", ")", ";", "}"], "memberFunctions": {"nullToEmpty": [["String", "@Nullable String string"]], "commonPrefix": [["String", "CharSequence a", "CharSequence b"]], "isNullOrEmpty": [["boolean", "@Nullable String string"]], "validSurrogatePairAt": [["boolean", "CharSequence string", "int index"]], "repeat": [["String", "String string", "int count"]], "commonSuffix": [["String", "CharSequence a", "CharSequence b"]], "emptyToNull": [["String", "@Nullable String string"]], "padEnd": [["String", "String string", "int minLength", "char padChar"]]}, "className": "Strings", "renamed": ["String", "function", "(", "String", "arg0", ",", "int", "arg1", ",", "char", "arg2", ")", "{", "checkNotNull", "(", "arg0", ")", ";", "if", "(", "arg0", ".", "length", "(", ")", ">=", "arg1", ")", "{", "return", "arg0", ";", "}", "StringBuilder", "loc0", "=", "new", "StringBuilder", "(", "arg1", ")", ";", "for", "(", "int", "loc1", "=", "arg0", ".", "length", "(", ")", ";", "loc1", "<", "arg1", ";", "loc1", "++", ")", "{", "loc0", ".", "append", "(", "arg2", ")", ";", "}", "loc0", ".", "append", "(", "arg0", ")", ";", "return", "loc0", ".", "toString", "(", ")", ";", "}"], "nl": "Returns a string, of length at least  {@code minLength}, consisting of  {@code string} prependedwith as many copies of  {@code padChar} as are necessary to reach that length. For example,  {@code padStart(\"7\", 3, '0')} returns {@code \"007\"} {@code padStart(\"2010\", 3, '0')} returns {@code \"2010\"} See  {@link java.util.Formatter} for a richer set of formatting capabilities.", "nlToks": ["Returns", "a", "string", ",", "of", "length", "at", "least", "-LCB-", "@code", "minLength", "-RCB-", ",", "consisting", "of", "-LCB-", "@code", "string", "-RCB-", "prependedwith", "as", "many", "copies", "of", "-LCB-", "@code", "padChar", "-RCB-", "as", "are", "necessary", "to", "reach", "that", "length", ".", "For", "example", ",", "-LCB-", "@code", "padStart", "-LRB-", "``", "7", "''", ",", "3", ",", "'", "0", "'", "-RRB-", "-RCB-", "returns", "-LCB-", "@code", "``", "007", "''", "-RCB-", "-LCB-", "@code", "padStart", "-LRB-", "``", "2010", "''", ",", "3", ",", "'", "0", "'", "-RRB-", "-RCB-", "returns", "-LCB-", "@code", "``", "2010", "''", "-RCB-", "See", "-LCB-", "@link", "java.util.Formatter", "-RCB-", "for", "a", "richer", "set", "of", "formatting", "capabilities", "."], "path": "hazendaz/guava/tree/master/guava/src/com/google/common/base/Strings.java", "idx": 2392}
{"memberVariables": {"mPenEvent": "PenEvent", "TAG=\"PenHardware\"": "String", "buttonListener=null": "HardwareButtonListener", "KEY_OVERRIDE_PEN_TYPE=\"override_pen_type\"": "String", "PEN_TYPE_ICS=\"PEN_TYPE_ICS\"": "String", "mHasPenDigitizer": "boolean", "PEN_TYPE_THINKPAD_TABLET=\"PEN_TYPE_THINKPAD_TABLET\"": "String", "mHasPressureSensor": "boolean", "tabletMODELwithoutPressure=new ArrayList<String>(){\n  private static final long serialVersionUID=1868225200818950866L;\n{\n    add(\"K1\");\n    add(\"A500\");\n    add(\"A501\");\n    add(\"AT100\");\n    add(\"AT1S0\");\n    add(\"GT-P1000\");\n    add(\"GT-P1000L\");\n    add(\"GT-P1000N\");\n    add(\"SGH-T849\");\n    add(\"GT-P7510\");\n    add(\"GT-P7501\");\n    add(\"GT-P6810\");\n    add(\"GT-P6210\");\n    add(\"Galaxy Nexus\");\n    add(\"VTAB1008\");\n  }\n}\n": "ArrayList<String>", "PEN_TYPE_SAMSUNG_NOTE=\"PEN_TYPE_SAMSUNG_NOTE\"": "String", "PEN_TYPE_HTC=\"PEN_TYPE_HTC\"": "String", "PEN_TYPE_CAPACITIVE=\"PEN_TYPE_CAPACITIVE\"": "String", "instance=null": "Hardware", "PEN_TYPE_LEFT_ALT=\"PEN_TYPE_LEFT_ALT\"": "String", "model": "String", "serialVersionUID=1868225200818950866L": "long", "PEN_TYPE_AUTO=\"PEN_TYPE_AUTO\"": "String"}, "code": ["boolean", "function", "(", ")", "{", "Assert", ".", "assertNotNull", "(", "instance", ")", ";", "return", "instance", ".", "mHasPressureSensor", ";", "}"], "memberFunctions": {"onKeyDown": [["boolean", "int keyCode", "KeyEvent event"]], "isPenEvent": [["boolean", "MotionEvent event"]], "onKeyUp": [["boolean", "int keyCode", "KeyEvent event"]], "isPenButtonPressed": [["boolean", "MotionEvent event"]], "forceCapacitivePen": [["void"]], "addViewHack": [["void", "ViewGroup viewGroup"]], "forceFromPreferences": [["void", "Context context"]], "forceSamsungNote": [["void"]], "hasPenDigitizer": [["boolean"]], "setOnHardwareButtonListener": [["void", "HardwareButtonListener buttonListener"]], "forceLeftAlt": [["void"]], "autodetect": [["void", "Context context"]], "forceThinkpadTablet": [["void"]], "forceICS": [["void"]], "callOnHardwareButtonListener": [["void", "HardwareButtonListener.Type button"]], "forceHTC": [["void"]], "getInstance": [["Hardware", "Context context"]]}, "className": "Hardware", "renamed": ["boolean", "function", "(", ")", "{", "Assert", ".", "assertNotNull", "(", "instance", ")", ";", "return", "instance", ".", "mHasPressureSensor", ";", "}"], "nl": "Test whether the device has a working pressure sensor", "nlToks": ["Test", "whether", "the", "device", "has", "a", "working", "pressure", "sensor"], "path": "praveensubramaniam/android-quill/tree/master/src/name/vbraun/lib/pen/Hardware.java", "idx": 2393}
{"memberVariables": {"swu": "int", "matrixItemRemainingUtility[][]": "int", "matrixItemUtility[][]": "int", "itemNames": "int[]"}, "code": ["void", "function", "(", "int", "itemPos", ",", "int", "itemset", ",", "int", "utility", ",", "int", "remainingUtility", ")", "{", "matrixItemUtility", "[", "itemPos", "]", "[", "itemset", "]", "=", "utility", ";", "matrixItemRemainingUtility", "[", "itemPos", "]", "[", "itemset", "]", "=", "remainingUtility", ";", "}"], "memberFunctions": {"toString": [["String"]]}, "className": "QMatrix", "renamed": ["void", "function", "(", "int", "arg0", ",", "int", "arg1", ",", "int", "arg2", ",", "int", "arg3", ")", "{", "matrixItemUtility", "[", "arg0", "]", "[", "arg1", "]", "=", "arg2", ";", "matrixItemRemainingUtility", "[", "arg0", "]", "[", "arg1", "]", "=", "arg3", ";", "}"], "nl": "Register item in the matrix", "nlToks": ["Register", "item", "in", "the", "matrix"], "path": "prateek96/Data_Mining_Assignments/tree/master/Assignment_1/Assignment-1.11/uspan/QMatrix.java", "idx": 2394}
{"memberVariables": {"errorLevelFolder=0": "int", "tooltip": "String", "errorLevel=0": "int", "value=\"\"": "String"}, "code": ["void", "function", "(", ")", "{", "this", ".", "errorLevel", "=", "this", ".", "errorLevelFolder", ";", "}"], "memberFunctions": {"setKO": [["void"], ["void", "boolean match"]], "isWarning": [["boolean"]], "setErrorLevel": [["void", "int errorlevel"]], "getErrorLevel": [["int"]], "analyseTrack": [["String", "String tagValue", "String matchValue", "String field"]], "analyseTrackYear": [["String", "String tagValue", "String matchValue"]], "formatNumber": [["String", "int value"]], "colorField": [["String", "String text", "int errorLevel"], ["String", "String text", "int errorLevel", "boolean html"]], "getValue": [["String"]], "analyseTrackComment": [["String", "String tagValue", "String matchValue"]], "analyseTrackBpm": [["String", "Float tagValue", "Float matchValue"]], "hashCode": [["int"]], "setValue": [["void", "String value"]], "equals": [["boolean", "Object obj"]], "getDisplayToolTip": [["String"]], "setOK": [["void"]], "toString": [["String"]], "isNotValid": [["boolean"]], "getDisplayColor": [["Color"]], "analyseTrackNumber": [["String", "String tagValue", "String matchValue"]], "getDisplayText": [["String"]], "setWarning": [["void"], ["void", "boolean match"]], "analyseTrackString": [["String", "String tagValue", "String matchValue"]], "isKO": [["boolean"]]}, "className": "FolderInfoResult", "renamed": ["void", "function", "(", ")", "{", "this", ".", "errorLevel", "=", "this", ".", "errorLevelFolder", ";", "}"], "nl": "Restores errorLevel to folder one", "nlToks": ["Restores", "errorLevel", "to", "folder", "one"], "path": "phramusca/JaMuz/tree/master/src/jamuz/process/check/FolderInfoResult.java", "idx": 2395}
{"memberVariables": {"NA_LONG=Long.MIN_VALUE": "long", "NA_STRING=\"NA\"": "String", "NA_INT=-1": "int", "NA_FLOAT=-1": "float"}, "code": ["String", "function", "(", "int", "index", ",", "String", "[", "]", "parts", ")", "{", "try", "{", "if", "(", "parts", "[", "index", "]", ".", "length", "(", ")", "==", "0", ")", "{", "return", "NA_STRING", ";", "}", "else", "{", "return", "parts", "[", "index", "]", ";", "}", "}", "catch", "(", "ArrayIndexOutOfBoundsException", "e", ")", "{", "return", "NA_STRING", ";", "}", "}"], "memberFunctions": {"getPartPercentage": [["Float", "int index", "String[] parts"]], "getPartFloat": [["Float", "int index", "String[] parts"]], "adjustDataLine": [["String", "String dataLine", "int headerCount"]], "getPartLong": [["Long", "int index", "String[] parts"]], "getPartFloat2": [["Float", "int index", "String[] parts"]], "getPartStringAllowEmpty": [["String", "int index", "String[] parts"]], "getPartInt": [["Integer", "int index", "String[] parts"]]}, "className": "TabDelimitedFileUtil", "renamed": ["String", "function", "(", "int", "arg0", ",", "String", "[", "]", "arg1", ")", "{", "try", "{", "if", "(", "arg1", "[", "arg0", "]", ".", "length", "(", ")", "==", "0", ")", "{", "return", "NA_STRING", ";", "}", "else", "{", "return", "arg1", "[", "arg0", "]", ";", "}", "}", "catch", "(", "ArrayIndexOutOfBoundsException", "loc0", ")", "{", "return", "NA_STRING", ";", "}", "}"], "nl": "If field is not found in header or data line, or is empty, it just returns empty  field value \"NA\".", "nlToks": ["If", "field", "is", "not", "found", "in", "header", "or", "data", "line", ",", "or", "is", "empty", ",", "it", "just", "returns", "empty", "field", "value", "``", "NA", "''", "."], "path": "adamabeshouse/cbioportal/tree/master/core/src/main/java/org/mskcc/cbio/maf/TabDelimitedFileUtil.java", "idx": 2396}
{"memberVariables": {"expectedDataUnitId": "Long", "seqNo": "Long", "dataSetId": "Long", "dataUnitId": "Long", "expectedValue": "String", "actualValue": "String", "expectedDataSetId": "Long", "errorCode": "String", "testId": "Long", "failedAttributeName": "String", "srcFileName": "String", "errorMsg": "String"}, "code": ["void", "function", "(", "Long", "expectedDataUnitId", ")", "{", "this", ".", "expectedDataUnitId", "=", "expectedDataUnitId", ";", "}"], "memberFunctions": {"setExpectedValue": [["void", "String expectedValue"]], "getExpectedValue": [["String"]], "getExpectedDataSetId": [["Long"]], "setExpectedDataSetId": [["void", "Long expectedDataSetId"]], "setActualValue": [["void", "String actualValue"]], "getDataSetId": [["Long"]], "setSrcFileName": [["void", "String srcFileName"]], "getExpectedDataUnitId": [["Long"]], "getSrcFileName": [["String"]], "getSeqNo": [["Long"]], "getFailedAttributeName": [["String"]], "setTestId": [["void", "Long testId"]], "setFailedAttributeName": [["void", "String failedAttributeName"]], "getTestId": [["Long"]], "setErrorCode": [["void", "String errorCode"]], "getActualValue": [["String"]], "getDataUnitId": [["Long"]], "setSeqNo": [["void", "Long seqNo"]], "setErrorMsg": [["void", "String errorMsg"]], "getErrorCode": [["String"]], "setDataUnitId": [["void", "Long dataUnitId"]], "setDataSetId": [["void", "Long dataSetId"]], "toString": [["String"]], "getErrorMsg": [["String"]]}, "className": "TestResultDetailsDTO", "renamed": ["void", "function", "(", "Long", "arg0", ")", "{", "this", ".", "expectedDataUnitId", "=", "arg0", ";", "}"], "nl": "Sets the expected data unit id.", "nlToks": ["Sets", "the", "expected", "data", "unit", "id", "."], "path": "pkesireddy/portico_fletcher/tree/master/FetcherTesterService/src/main/java/org/ithaka/cm/fetchertester/model/TestResultDetailsDTO.java", "idx": 2398}
{"memberVariables": {"hashcode_cache=null": "Integer", "_all=new HashMap<>(11)": "HashMap<lalr_item,lalr_item>"}, "code": ["void", "function", "(", "Object", "obj", ")", "{", "if", "(", "obj", "==", "null", ")", "throw", "new", "internal_error", "(", "\"Null object used in set operation\"", ")", ";", "}"], "memberFunctions": {"add": [["lalr_item", "lalr_item itm"], ["void", "lalr_item_set other"]], "is_superset_of": [["boolean", "lalr_item_set other"]], "remove": [["void", "lalr_item itm"], ["void", "lalr_item_set other"]], "iterator": [["Iterator<lalr_item>"]], "contains": [["boolean", "lalr_item itm"]], "size": [["int"]], "find": [["lalr_item", "lalr_item itm"]], "hashCode": [["int"]], "get_one": [["lalr_item"]], "equals": [["boolean", "lalr_item_set other"], ["boolean", "Object other"]], "is_subset_of": [["boolean", "lalr_item_set other"]], "compute_closure": [["void"]], "toString": [["String"]]}, "className": "lalr_item_set", "renamed": ["void", "function", "(", "Object", "arg0", ")", "{", "if", "(", "arg0", "==", "null", ")", "throw", "new", "internal_error", "(", "\"srini_string\"", ")", ";", "}"], "nl": "Helper function for null test.  Throws an interal_error exception if its parameter is null.", "nlToks": ["Helper", "function", "for", "null", "test", ".", "Throws", "an", "interal_error", "exception", "if", "its", "parameter", "is", "null", "."], "path": "polyglot-compiler/polyglot/tree/master/tools/java_cup/src/java_cup/lalr_item_set.java", "idx": 2399}
{"memberVariables": {"savePending": "AtomicBoolean", "delayTimeUnit": "TimeUnit", "wallet": "Wallet", "file": "File", "delay": "long", "executor": "ScheduledThreadPoolExecutor", "saver": "Callable<Void>", "log=LoggerFactory.getLogger(WalletFiles.class)": "Logger", "vListener": "Listener"}, "code": ["void", "function", "(", ")", "{", "if", "(", "savePending", ".", "getAndSet", "(", "true", ")", ")", "return", ";", "executor", ".", "schedule", "(", "saver", ",", "delay", ",", "delayTimeUnit", ")", ";", "}"], "memberFunctions": {"onAfterAutoSave": [["void", "File newlySavedFile"]], "saveNowInternal": [["void"]], "shutdownAndWait": [["void"]], "setListener": [["void", "@Nonnull Listener listener"]], "saveNow": [["void"]], "onBeforeAutoSave": [["void", "File tempFile"]]}, "className": "WalletFiles", "renamed": ["void", "function", "(", ")", "{", "if", "(", "savePending", ".", "getAndSet", "(", "true", ")", ")", "return", ";", "executor", ".", "schedule", "(", "saver", ",", "delay", ",", "delayTimeUnit", ")", ";", "}"], "nl": "Queues up a save in the background. Useful for not very important wallet changes.", "nlToks": ["Queues", "up", "a", "save", "in", "the", "background", ".", "Useful", "for", "not", "very", "important", "wallet", "changes", "."], "path": "1000000000001/bitcoinj/tree/master/core/src/main/java/org/bitcoinj/wallet/WalletFiles.java", "idx": 2400}
{"memberVariables": {"N=4": "int", "rand=new Random(234234)": "Random"}, "code": ["void", "function", "(", ")", "{", "checkSymmRankNMinus_U", "(", "N", ",", "N", "-", "2", ")", ";", "checkSymmRankNMinus_U", "(", "N", "*", "2", "+", "1", ",", "N", "-", "2", ")", ";", "checkSymmRankNMinus_U", "(", "N", "-", "1", ",", "N", "-", "2", ")", ";", "}"], "memberFunctions": {"checkSymmRankNMinus_U": [["void", "int lengthA", "int heightB"]], "rankNUpdate": [["void"]], "symmRankNMinus_L": [["void"]], "checkRankNUpdate": [["void", "int lengthA", "int heightB"]], "checkSymmRankNMinus_L": [["void", "int lengthA", "int widthB"]]}, "className": "TestBlockInnerRankUpdate", "renamed": ["void", "function", "(", ")", "{", "checkSymmRankNMinus_U", "(", "N", ",", "N", "-", "2", ")", ";", "checkSymmRankNMinus_U", "(", "N", "*", "2", "+", "1", ",", "N", "-", "2", ")", ";", "checkSymmRankNMinus_U", "(", "N", "-", "1", ",", "N", "-", "2", ")", ";", "}"], "nl": "Tests symmRankNMinus_U with various sized input matrices", "nlToks": ["Tests", "symmRankNMinus_U", "with", "various", "sized", "input", "matrices"], "path": "adamaulia/efficient-java-matrix-library/tree/master/test/org/ejml/alg/block/TestBlockInnerRankUpdate.java", "idx": 2401}
{"memberVariables": {"prerequisites": "Set<Goal>", "corequisites": "Set<Goal>", "name": "String", "state": "int", "job": "Job"}, "code": ["boolean", "function", "(", "Goal", "goal", ")", "{", "return", "job", "(", ")", "!=", "null", "&&", "job", "(", ")", "==", "goal", ".", "job", "(", ")", ";", "}"], "memberFunctions": {"corequisiteGoals": [["Collection<Goal>", "Scheduler scheduler"]], "setUnreachable": [["void"]], "isReachable": [["boolean"]], "addPrerequisiteGoal": [["void", "Goal g", "Scheduler scheduler"]], "setUnreachableThisRun": [["void"]], "stateString": [["String"]], "addCorequisiteGoal": [["void", "Goal g", "Scheduler scheduler"]], "hashCode": [["int"]], "createPass": [["Pass", "ExtensionInfo extInfo"]], "prerequisiteGoals": [["Collection<Goal>", "Scheduler scheduler"]], "checkCycles": [["void", "Goal current", "Scheduler scheduler"]], "hasBeenReached": [["boolean"]], "equals": [["boolean", "Object o"]], "name": [["String"]], "setState": [["void", "int state"]], "toString": [["String"]], "state": [["int"]], "job": [["Job"]]}, "className": "AbstractGoal", "renamed": ["boolean", "function", "(", "Goal", "arg0", ")", "{", "return", "job", "(", ")", "!=", "null", "&&", "job", "(", ")", "==", "arg0", ".", "job", "(", ")", ";", "}"], "nl": "Return true if this goal conflicts with the other; that is passes running over both goals could access the same data.", "nlToks": ["Return", "true", "if", "this", "goal", "conflicts", "with", "the", "other", ";", "that", "is", "passes", "running", "over", "both", "goals", "could", "access", "the", "same", "data", "."], "path": "polyglot-compiler/polyglot/tree/master/src/polyglot/frontend/goals/AbstractGoal.java", "idx": 2403}
{"memberVariables": {"template": "MetaData.Template", "workflowImpl": "MetaData.WorkflowImpl", "workflowImplId": "String", "parametersMetaData": "ParametersMetaData", "templateName": "String", "templateDescription": "String", "templateId": "String", "workflowImplName": "String", "workflowImplDescription": "String"}, "code": ["String", "function", "(", ")", "{", "return", "workflowImplId", ";", "}"], "memberFunctions": {"getWorkflowImpl": [["MetaData.WorkflowImpl"]], "getTemplate": [["MetaData.Template"]], "setWorkflowImplId": [["void", "String value"]], "getParametersMetaData": [["ParametersMetaData"], ["ParametersMetaData"]], "setWorkflowImplName": [["void", "String value"]], "setTemplateId": [["void", "String value"], ["void", "String value"]], "getTemplateDescription": [["String"]], "setTemplateDescription": [["void", "String value"]], "setTemplateName": [["void", "String value"]], "setParametersMetaData": [["void", "ParametersMetaData value"], ["void", "ParametersMetaData value"]], "getWorkflowImplName": [["String"]], "setTemplate": [["void", "MetaData.Template value"]], "getTemplateId": [["String"], ["String"]], "getWorkflowImplDescription": [["String"]], "getTemplateName": [["String"]], "setWorkflowImpl": [["void", "MetaData.WorkflowImpl value"]], "setWorkflowImplDescription": [["void", "String value"]]}, "className": "MetaData", "renamed": ["String", "function", "(", ")", "{", "return", "workflowImplId", ";", "}"], "nl": "Gets the value of the workflowImplId property.", "nlToks": ["Gets", "the", "value", "of", "the", "workflowImplId", "property", "."], "path": "harsha1979/carbon-identity/tree/master/components/workflow-mgt/org.wso2.carbon.identity.workflow.mgt/src/main/java/org/wso2/carbon/identity/workflow/mgt/bean/metadata/MetaData.java", "idx": 2405}
{"memberVariables": {"ignoreExceptions=true": "boolean", "sourceCodeFile": "File", "sourceCodeFilename": "String", "languageVersion": "LanguageVersion", "attributes": "ConcurrentMap<String,Object>", "report=new Report()": "Report"}, "code": ["void", "function", "(", "boolean", "ignoreExceptions", ")", "{", "this", ".", "ignoreExceptions", "=", "ignoreExceptions", ";", "}"], "memberFunctions": {"setSourceCodeFile": [["void", "File sourceCodeFile"]], "setLanguageVersion": [["void", "LanguageVersion languageVersion"]], "setAttribute": [["boolean", "String name", "Object value"]], "getLanguageVersion": [["LanguageVersion"]], "getAttribute": [["Object", "String name"]], "isIgnoreExceptions": [["boolean"]], "setSourceCodeFilename": [["void", "String filename"]], "getSourceCodeFile": [["File"]], "getReport": [["Report"]], "removeAttribute": [["Object", "String name"]], "getSourceCodeFilename": [["String"]], "setReport": [["void", "Report report"]]}, "className": "RuleContext", "renamed": ["void", "function", "(", "boolean", "arg0", ")", "{", "this", ".", "ignoreExceptions", "=", "arg0", ";", "}"], "nl": "Configure whether exceptions during applying a rule should be ignored or not. If set to true then such exceptions are logged as warnings and the processing is continued with the next rule - the failing rule is simply skipped. This is the default behavior.  If set to false then the processing will be aborted with the exception. This is especially useful during unit tests, in order to not oversee any exceptions.", "nlToks": ["Configure", "whether", "exceptions", "during", "applying", "a", "rule", "should", "be", "ignored", "or", "not", ".", "If", "set", "to", "true", "then", "such", "exceptions", "are", "logged", "as", "warnings", "and", "the", "processing", "is", "continued", "with", "the", "next", "rule", "-", "the", "failing", "rule", "is", "simply", "skipped", ".", "This", "is", "the", "default", "behavior", ".", "If", "set", "to", "false", "then", "the", "processing", "will", "be", "aborted", "with", "the", "exception", ".", "This", "is", "especially", "useful", "during", "unit", "tests", ",", "in", "order", "to", "not", "oversee", "any", "exceptions", "."], "path": "adangel/pmd/tree/master/pmd-core/src/main/java/net/sourceforge/pmd/RuleContext.java", "idx": 2406}
{"memberVariables": {"msgSection1=\"The provided input \"": "String", "regex": "String", "validatorConfig=new IdentityValidatorConfig()": "IdentityValidatorConfig", "msgSection3=\"contains illegal characters matching one of the black list patterns [ %s ]\"": "String", "msgSection4=\" or \"": "String", "msgSection2=\"does not match any of the white list patterns [ %s ]\"": "String"}, "code": ["String", "function", "(", "String", "input", ",", "String", "...", "whiteListPatterns", ")", "{", "if", "(", "StringUtils", ".", "isEmpty", "(", "input", ")", "||", "isValidOverWhiteListPatterns", "(", "input", ",", "whiteListPatterns", ")", ")", "{", "return", "input", ";", "}", "throw", "new", "IdentityValidationException", "(", "msgSection1", "+", "String", ".", "format", "(", "msgSection2", ",", "getPatternString", "(", "whiteListPatterns", ")", ")", ")", ";", "}"], "memberFunctions": {"isValidOverWhiteListPatterns": [["boolean", "String input", "String... whiteListPatterns"]], "getRegex": [["String"]], "isValidOverBlackListPatterns": [["boolean", "String input", "String... blackListPatterns"]], "getPatternString": [["String", "String[] patterns"]], "patternExists": [["boolean", "String key"]], "removePattern": [["void", "String key"]], "isValid": [["boolean", "String input", "String[] whiteListPatterns", "String[] blackListPatterns"]], "getValidInputOverBlackListPatterns": [["String", "String input", "String... blackListPatterns"]], "getValidInput": [["String", "String input", "String[] whiteListPatterns", "String[] blackListPatterns"]], "addPattern": [["void", "String key", "String regex"]]}, "className": "IdentityValidationUtil", "renamed": ["String", "function", "(", "String", "arg0", ",", "String", "...", "arg1", ")", "{", "if", "(", "StringUtils", ".", "isEmpty", "(", "arg0", ")", "||", "isValidOverWhiteListPatterns", "(", "arg0", ",", "arg1", ")", ")", "{", "return", "arg0", ";", "}", "throw", "new", "IdentityValidationException", "(", "msgSection1", "+", "String", ".", "format", "(", "msgSection2", ",", "getPatternString", "(", "arg1", ")", ")", ")", ";", "}"], "nl": "Returns the input if valid over the given white list patterns else throws an IdentityValidationException", "nlToks": ["Returns", "the", "input", "if", "valid", "over", "the", "given", "white", "list", "patterns", "else", "throws", "an", "IdentityValidationException"], "path": "harsha1979/carbon-identity/tree/master/components/identity-core/org.wso2.carbon.identity.base/src/main/java/org/wso2/carbon/identity/base/IdentityValidationUtil.java", "idx": 2407}
{"memberVariables": {"EXAMPLE=\"$IIMWV,125.1,T,5.5,M,A\"": "String", "mwv": "MWVSentence"}, "code": ["void", "function", "(", ")", "{", "final", "double", "speed", "=", "7.75", ";", "mwv", ".", "setSpeed", "(", "speed", ")", ";", "assertEquals", "(", "speed", ",", "mwv", ".", "getSpeed", "(", ")", ",", "0.1", ")", ";", "}"], "memberFunctions": {"testSetNegativeSpeed": [["void"]], "testSetInvalidSpeedUnit": [["void"]], "testIsTrue": [["void"]], "testMWVParserTalkerId": [["void"]], "testSetStatus": [["void"]], "testSetAngle": [["void"]], "testSetSpeedUnit": [["void"]], "testSetNegativeAngle": [["void"]], "testGetAngle": [["void"]], "testSetTrue": [["void"]], "testSetAngleOutOfRange": [["void"]], "setUp": [["void"]], "testGetSpeed": [["void"]], "testGetStatus": [["void"]], "testGetSpeedUnit": [["void"]]}, "className": "MWVTest", "renamed": ["void", "function", "(", ")", "{", "final", "double", "loc0", "=", "7.75", ";", "mwv", ".", "setSpeed", "(", "loc0", ")", ";", "assertEquals", "(", "loc0", ",", "mwv", ".", "getSpeed", "(", ")", ",", "0.1", ")", ";", "}"], "nl": "Test method for {@link net.sf.marineapi.nmea.parser.MWVParser#setSpeed(double)}.", "nlToks": ["Test", "method", "for", "-LCB-", "@link", "net.sf.marineapi.nmea.parser.MWVParser", "#setSpeed", "-LRB-", "double", "-RRB-", "-RCB-", "."], "path": "pkoziol/marine-api/tree/master/src/test/java/net/sf/marineapi/nmea/parser/MWVTest.java", "idx": 2408}
{"memberVariables": {"responseHeaders=new HashMap<>()": "Map<String,String>", "responseCode=-1": "int", "delay": "long", "errorMessage": "String"}, "code": ["long", "function", "(", ")", "{", "return", "delay", ";", "}"], "memberFunctions": {"addResponseHeader": [["ThrottleResponse", "String header", "String value"]], "getResponseHeaders": [["Map<String,String>"]], "getResponseCode": [["int"]], "setResponseCode": [["ThrottleResponse", "int rc"], ["ThrottleResponse", "int rc", "String msg"]], "setDelay": [["ThrottleResponse", "long d"]], "getErrorMessage": [["String"]]}, "className": "ThrottleResponse", "renamed": ["long", "function", "(", ")", "{", "return", "delay", ";", "}"], "nl": "Delay processing for specified milliseconds.  Should be \"small\" to prevent the client from timing out.", "nlToks": ["Delay", "processing", "for", "specified", "milliseconds", ".", "Should", "be", "``", "small", "''", "to", "prevent", "the", "client", "from", "timing", "out", "."], "path": "primesign/cxf/tree/master/rt/features/throttling/src/main/java/org/apache/cxf/throttling/ThrottleResponse.java", "idx": 2409}
{"memberVariables": {"instance": "Position"}, "code": ["void", "function", "(", ")", "{", "assertEquals", "(", "25.0", ",", "instance", ".", "getLongitude", "(", ")", ",", "0.0000001", ")", ";", "instance", ".", "setLongitude", "(", "180.0", ")", ";", "assertEquals", "(", "180", ",", "instance", ".", "getLongitude", "(", ")", ",", "0.0000001", ")", ";", "assertEquals", "(", "CompassPoint", ".", "EAST", ",", "instance", ".", "getLongitudeHemisphere", "(", ")", ")", ";", "}"], "memberFunctions": {"testGetLatitude": [["void"]], "testSetIllegalLatitudeSouth": [["void"]], "testDistanceToSelf": [["void"]], "testSetIllegalLongitudeWest": [["void"]], "testGetDatum": [["void"]], "testSetLatitudeSouth": [["void"]], "testDistanceTo": [["void"]], "testSetIllegalLongitudeEast": [["void"]], "testToWaypoint": [["void"]], "setUp": [["void"]], "testGetLongitude": [["void"]], "testSetLongitudeWest": [["void"]], "testGetLatitudeHemisphere": [["void"]], "testSetLatitudeNorth": [["void"]], "testGetLongitudeHemisphere": [["void"]], "testSetIllegalLatitudeNorth": [["void"]]}, "className": "PositionTest", "renamed": ["void", "function", "(", ")", "{", "assertEquals", "(", "25.0", ",", "instance", ".", "getLongitude", "(", ")", ",", "0.0000001", ")", ";", "instance", ".", "setLongitude", "(", "180.0", ")", ";", "assertEquals", "(", "180", ",", "instance", ".", "getLongitude", "(", ")", ",", "0.0000001", ")", ";", "assertEquals", "(", "CompassPoint", ".", "EAST", ",", "instance", ".", "getLongitudeHemisphere", "(", ")", ")", ";", "}"], "nl": "Test for setLongitude()", "nlToks": ["Test", "for", "setLongitude", "-LRB-", "-RRB-"], "path": "pkoziol/marine-api/tree/master/src/test/java/net/sf/marineapi/nmea/util/PositionTest.java", "idx": 2410}
{"memberVariables": {"filter": "Predicate<? super T>", "iterated=false": "boolean", "i": "Iterator<T>", "mapper": "Mapper<? super F,T>", "lookAhead=null": "T", "element": "E"}, "code": ["Iterable", "<", "T", ">", "function", "(", "final", "Iterable", "<", "T", ">", "sequence", ",", "final", "Predicate", "<", "?", "super", "T", ">", "filter", ")", "{", "return", "new", "Iterable", "<", "T", ">", "(", ")", "{", "@", "Override", "public", "Iterator", "<", "T", ">", "iterator", "(", ")", "{", "return", "new", "FilteringIterator", "<", "T", ">", "(", "sequence", ".", "iterator", "(", ")", ",", "filter", ")", ";", "}", "}", ";", "}"], "memberFunctions": {"singleton": [["Iterable<E>", "final E single"]], "filter": [["Iterable<T>", "final Iterable<T> sequence", "final Predicate<? super T> filter"]], "all": [["boolean", "final Iterable<T> sequence", "final Predicate<? super T> predicate"]], "next": [["E"], ["T"], ["T"]], "cast": [["Iterable<E>", "final Iterable i"]], "count": [["int", "Iterable seq"]], "hasNext": [["boolean"], ["boolean"], ["boolean"]], "map": [["Iterable<T>", "final Iterable<F> from", "final Mapper<? super F,T> mapper"]], "any": [["boolean", "final Iterable<T> sequence", "final Predicate<? super T> predicate"]], "asList": [["List<E>", "Iterable<E> i"]], "remove": [["void"], ["void"], ["void"]]}, "className": "Linqy", "renamed": ["Iterable", "<", "T", ">", "function", "(", "final", "Iterable", "<", "T", ">", "arg0", ",", "final", "Predicate", "<", "?", "super", "T", ">", "arg1", ")", "{", "return", "new", "Iterable", "<", "T", ">", "(", ")", "{", "@", "Override", "public", "Iterator", "<", "T", ">", "iterator", "(", ")", "{", "return", "new", "FilteringIterator", "<", "T", ">", "(", "arg0", ".", "iterator", "(", ")", ",", "arg1", ")", ";", "}", "}", ";", "}"], "nl": "Exclude all elements from an iterable that don't match a given predicate.", "nlToks": ["Exclude", "all", "elements", "from", "an", "iterable", "that", "do", "n't", "match", "a", "given", "predicate", "."], "path": "phbenisc/xmlunit/tree/master/xmlunit-core/src/main/java/org/xmlunit/util/Linqy.java", "idx": 2411}
{"memberVariables": {"actions": "List<CoordinatorActionBean>"}, "code": ["List", "<", "CoordinatorActionBean", ">", "function", "(", ")", "{", "return", "actions", ";", "}"], "memberFunctions": {}, "className": "CoordinatorActionInfo", "renamed": ["List", "<", "CoordinatorActionBean", ">", "function", "(", ")", "{", "return", "actions", ";", "}"], "nl": "Return the coordiantor actions being returned.", "nlToks": ["Return", "the", "coordiantor", "actions", "being", "returned", "."], "path": "pingpangkuangmo/oozie/tree/master/core/src/main/java/org/apache/oozie/CoordinatorActionInfo.java", "idx": 2412}
{"memberVariables": {"repository": "ScheduleRepository"}, "code": ["void", "function", "(", "@", "ModelAttribute", "Schedule", "schedule", ")", "{", "repository", ".", "save", "(", "schedule", ")", ";", "}"], "memberFunctions": {"updateSchedule": [["void", "@ModelAttribute Schedule schedule"]], "removeSchedule": [["void", "@PathVariable long schedule_id"]]}, "className": "ScheduleController", "renamed": ["void", "function", "(", "@", "ModelAttribute", "Schedule", "arg0", ")", "{", "repository", ".", "save", "(", "arg0", ")", ";", "}"], "nl": "Create schedule", "nlToks": ["Create", "schedule"], "path": "adalee-group/watering-system/tree/master/server/schedule-service/src/main/java/edu/hucare/controller/ScheduleController.java", "idx": 2413}
{"memberVariables": {"executorService=Executors.newCachedThreadPool(runnable -> {\n  Thread thread=new Thread(runnable);\n  thread.setDaemon(true);\n  return thread;\n}\n)": "ExecutorService", "CONDITION_SLEEP_IN_MILLIS=10": "long", "SEMAPHORE_LOOPS_COUNT=5": "int", "SEMAPHORE_SLEEP_IN_MILLIS=10": "long"}, "code": ["void", "function", "(", "long", "millis", ",", "Runnable", "runnable", ")", "{", "Future", "<", "Void", ">", "future", "=", "asyncFx", "(", "runnable", ")", ";", "waitForMillis", "(", "millis", ",", "future", ")", ";", "}"], "memberFunctions": {"callConditionAndReturnResult": [["boolean", "Callable<Boolean> condition"]], "runOnFxThread": [["void", "Runnable runnable"]], "callCallableAndSetFuture": [["void", "Callable<T> callable", "SettableFuture<T> future"]], "sleepWithException": [["void", "long duration", "TimeUnit timeUnit"]], "sleep": [["void", "long duration", "TimeUnit timeUnit"]], "waitForMillis": [["T", "long millis", "Future<T> future"]], "async": [["Future<Void>", "Runnable runnable"], ["Future<T>", "Callable<T> callable"]], "runOnThread": [["void", "Runnable runnable", "ExecutorService executorService"]], "waitForFxEvents": [["void"], ["void", "int attemptsCount"]], "asyncFx": [["Future<Void>", "Runnable runnable"], ["Future<T>", "Callable<T> callable"]], "blockFxThreadWithSemaphore": [["void"]], "waitFor": [["T", "Future<T> future"], ["T", "long timeout", "TimeUnit timeUnit", "Future<T> future"], ["void", "long timeout", "TimeUnit timeUnit", "Callable<Boolean> condition"], ["void", "long timeout", "TimeUnit timeUnit", "ObservableBooleanValue booleanValue"]], "waitForAsync": [["void", "long millis", "Runnable runnable"], ["T", "long millis", "Callable<T> callable"]]}, "className": "WaitForAsyncUtils", "renamed": ["void", "function", "(", "long", "arg0", ",", "Runnable", "arg1", ")", "{", "Future", "<", "Void", ">", "loc0", "=", "asyncFx", "(", "arg1", ")", ";", "waitForMillis", "(", "arg0", ",", "loc0", ")", ";", "}"], "nl": "Runs the given  {@link Runnable} on the JavaFX Application Thread at some unspecified timein the future and waits for it  {@code long} milliseconds to finish, otherwise times out with{@link TimeoutException}.", "nlToks": ["Runs", "the", "given", "-LCB-", "@link", "Runnable", "-RCB-", "on", "the", "JavaFX", "Application", "Thread", "at", "some", "unspecified", "timein", "the", "future", "and", "waits", "for", "it", "-LCB-", "@code", "long", "-RCB-", "milliseconds", "to", "finish", ",", "otherwise", "times", "out", "with", "-LCB-", "@link", "TimeoutException", "-RCB-", "."], "path": "hastebrot/TestFX/tree/master/subprojects/testfx-core/src/main/java/org/testfx/util/WaitForAsyncUtils.java", "idx": 2414}
{"memberVariables": {"appName=\"JaMuz\"": "String", "logger=null": "Logger"}, "code": ["void", "function", "(", "Logger", "logger", ")", "{", "Popup", ".", "logger", "=", "logger", ";", "}"], "memberFunctions": {"popupError": [["void", "String str"]], "warning": [["void", "String str"]], "error": [["void", "String str"], ["void", "String str", "Exception ex"], ["void", "Exception ex"], ["void", "String methodName", "String sql", "Exception ex"]], "info": [["void", "String str"]]}, "className": "Popup", "renamed": ["void", "function", "(", "Logger", "arg0", ")", "{", "Popup", ".", "arg0", "=", "arg0", ";", "}"], "nl": "Set the logger", "nlToks": ["Set", "the", "logger"], "path": "phramusca/JaMuz/tree/master/src/jamuz/utils/Popup.java", "idx": 2415}
{"memberVariables": {"time": "Time"}, "code": ["void", "function", "(", ")", "{", "time", ".", "setSeconds", "(", "45.12345", ")", ";", "assertEquals", "(", "45.12345", ",", "time", ".", "getSeconds", "(", ")", ",", "0.001", ")", ";", "}"], "memberFunctions": {"testDateRoundTrip": [["void"]], "testParseTimeWithOneDecimal": [["void"]], "testSetNegativeMinutes": [["void"]], "testFormatTimeWithOneDecimal": [["void"]], "testSetMinutes": [["void"]], "testParseTimeWithoutDecimals": [["void"]], "testGetMinutes": [["void"]], "testParseTimeWithDecimals": [["void"]], "testSetInvalidSeconds": [["void"]], "testSetNegativeHour": [["void"]], "testToDate": [["void"]], "testGetSeconds": [["void"]], "testSetHour": [["void"]], "testGetHour": [["void"]], "testSetTime": [["void"]], "testGetMilliseconds": [["void"]], "testSetInvalidHour": [["void"]], "testSetNegativeSeconds": [["void"]], "setUp": [["void"]], "testSetInvalidMinutes": [["void"]], "testFormatTimeNoDecimals": [["void"]], "testFormatTimeWithDecimals": [["void"]], "testEquals": [["void"]]}, "className": "TimeTest", "renamed": ["void", "function", "(", ")", "{", "time", ".", "setSeconds", "(", "45.12345", ")", ";", "assertEquals", "(", "45.12345", ",", "time", ".", "getSeconds", "(", ")", ",", "0.001", ")", ";", "}"], "nl": "Test method for  {@link net.sf.marineapi.nmea.util.Time#setSeconds(int)}.", "nlToks": ["Test", "method", "for", "-LCB-", "@link", "net.sf.marineapi.nmea.util.Time", "#setSeconds", "-LRB-", "int", "-RRB-", "-RCB-", "."], "path": "pkoziol/marine-api/tree/master/src/test/java/net/sf/marineapi/nmea/util/TimeTest.java", "idx": 2416}
{"memberVariables": {"sCleanerCleanMethod": "Method", "sByteBufferCleanerMethod": "Method", "LOG=LoggerFactory.getLogger(Constants.LOGGER_TYPE)": "Logger"}, "code": ["ByteBuffer", "function", "(", "int", "len", ")", "{", "return", "getIncreasingIntBuffer", "(", "0", ",", "len", ")", ";", "}"], "memberFunctions": {"equalConstantByteArray": [["boolean", "byte value", "int len", "byte[] arr"]], "getIncreasingByteBuffer": [["ByteBuffer", "int len"], ["ByteBuffer", "int start", "int len"]], "fastCopy": [["void", "final ReadableByteChannel src", "final WritableByteChannel dest"]], "cleanDirectBuffer": [["void", "ByteBuffer buffer"]], "sliceByteBuffer": [["ByteBuffer", "ByteBuffer buffer", "int position", "int length"], ["ByteBuffer", "ByteBuffer buffer", "int position"]], "byteToInt": [["int", "byte b"]], "equalIncreasingByteArray": [["boolean", "int len", "byte[] arr"], ["boolean", "int start", "int len", "byte[] arr"]], "equalIncreasingByteBuffer": [["boolean", "int start", "int len", "ByteBuffer buf"]], "getIncreasingByteArray": [["byte[]", "int len"], ["byte[]", "int start", "int len"]], "writeBufferToFile": [["void", "String path", "byte[] buffer"]], "cloneByteBufferList": [["List<ByteBuffer>", "List<ByteBuffer> source"]], "cloneByteBuffer": [["ByteBuffer", "ByteBuffer buf"]], "newByteArrayFromByteBuffer": [["byte[]", "ByteBuffer buf"]], "putIntByteBuffer": [["void", "ByteBuffer buf", "int b"]], "generateNewByteBufferFromThriftRPCResults": [["ByteBuffer", "ByteBuffer data"]]}, "className": "BufferUtils", "renamed": ["ByteBuffer", "function", "(", "int", "arg0", ")", "{", "return", "getIncreasingIntBuffer", "(", "0", ",", "arg0", ")", ";", "}"], "nl": "Gets a  {@link ByteBuffer} containing an increasing sequence of integers starting at zero.", "nlToks": ["Gets", "a", "-LCB-", "@link", "ByteBuffer", "-RCB-", "containing", "an", "increasing", "sequence", "of", "integers", "starting", "at", "zero", "."], "path": "poemlin/alluxio/tree/master/core/common/src/main/java/alluxio/util/io/BufferUtils.java", "idx": 2418}
{"memberVariables": {"instance": "SentenceFactory", "parsers": "Map<String,Class<? extends SentenceParser>>"}, "code": ["Sentence", "function", "(", "TalkerId", "talker", ",", "String", "type", ")", "{", "if", "(", "talker", "==", "null", ")", "{", "throw", "new", "IllegalArgumentException", "(", "\"TalkerId cannot be null\"", ")", ";", "}", "return", "createParserImpl", "(", "type", ",", "talker", ")", ";", "}"], "memberFunctions": {"unregisterParser": [["void", "Class<? extends SentenceParser> parser"]], "hasParser": [["boolean", "String type"]], "listParsers": [["List<String>"]], "reset": [["void"]], "registerParser": [["void", "String type", "Class<? extends SentenceParser> parser"]], "getInstance": [["SentenceFactory"]], "createParserImpl": [["Sentence", "String sid", "Object param"]]}, "className": "SentenceFactory", "renamed": ["Sentence", "function", "(", "TalkerId", "arg0", ",", "String", "arg1", ")", "{", "if", "(", "arg0", "==", "null", ")", "{", "throw", "new", "IllegalArgumentException", "(", "\"srini_string\"", ")", ";", "}", "return", "createParserImpl", "(", "arg1", ",", "arg0", ")", ";", "}"], "nl": "Creates a parser for specified talker and sentence type. This method is mainly intended to be used when custom parsers have been registered in the factory. The returned instance needs to be cast to corresponding sentence interface.", "nlToks": ["Creates", "a", "parser", "for", "specified", "talker", "and", "sentence", "type", ".", "This", "method", "is", "mainly", "intended", "to", "be", "used", "when", "custom", "parsers", "have", "been", "registered", "in", "the", "factory", ".", "The", "returned", "instance", "needs", "to", "be", "cast", "to", "corresponding", "sentence", "interface", "."], "path": "pkoziol/marine-api/tree/master/src/main/java/net/sf/marineapi/nmea/parser/SentenceFactory.java", "idx": 2419}
{"memberVariables": {"serialVersionUID=1L": "long", "isSystemDerived": "String", "isActive": "String", "predecessorId": "BigDecimal", "srcFileName": "String", "successorId": "BigDecimal", "feedId": "BigDecimal", "checksum": "String", "transmissionDatasetId": "String", "comments": "String", "inactivationReasonType": "String", "isFormatValid": "String", "dataUnitId": "long", "receiptDate": "Timestamp", "srcUniqueFileName": "String", "createdDate": "Timestamp", "dataSetId": "Long", "fileSize": "BigDecimal", "destFileName": "String", "loadedInCats": "String", "checksumType": "String", "modifiedDate": "Timestamp", "runId": "BigDecimal", "isPrepopulated": "String", "isBulk": "String", "isUpdate": "String", "receiptDateType": "String", "status": "String"}, "code": ["void", "function", "(", "BigDecimal", "feedId", ")", "{", "this", ".", "feedId", "=", "feedId", ";", "}"], "memberFunctions": {"setIsSystemDerived": [["void", "String isSystemDerived"]], "setIsPrepopulated": [["void", "String isPrepopulated"]], "getStatus": [["String"]], "getIsUpdate": [["String"]], "getDataUnitId": [["long"]], "getFileSize": [["BigDecimal"]], "setInactivationReasonType": [["void", "String inactivationReasonType"]], "setDataUnitId": [["void", "long dataUnitId"]], "getComments": [["String"]], "getCreatedDate": [["Timestamp"]], "setFileSize": [["void", "BigDecimal fileSize"]], "getPredecessorId": [["BigDecimal"]], "setIsUpdate": [["void", "String isUpdate"]], "getReceiptDateType": [["String"]], "getFeedId": [["BigDecimal"]], "setReceiptDate": [["void", "Timestamp receiptDate"]], "getModifiedDate": [["Timestamp"]], "setSuccessorId": [["void", "BigDecimal successorId"]], "setDestFileName": [["void", "String destFileName"]], "setIsBulk": [["void", "String isBulk"]], "getIsFormatValid": [["String"]], "setDataSetId": [["void", "Long dataSetId"]], "setIsActive": [["void", "String isActive"]], "setChecksumType": [["void", "String checksumType"]], "getInactivationReasonType": [["String"]], "getSrcUniqueFileName": [["String"]], "getDataSetId": [["Long"]], "setReceiptDateType": [["void", "String receiptDateType"]], "getRunId": [["BigDecimal"]], "setSrcFileName": [["void", "String srcFileName"]], "getChecksumType": [["String"]], "getSrcFileName": [["String"]], "getChecksum": [["String"]], "getDestFileName": [["String"]], "getReceiptDate": [["Timestamp"]], "setTransmissionDatasetId": [["void", "String transmissionDatasetId"]], "getTransmissionDatasetId": [["String"]], "setComments": [["void", "String comments"]], "getLoadedInCats": [["String"]], "getSuccessorId": [["BigDecimal"]], "setLoadedInCats": [["void", "String loadedInCats"]], "getIsPrepopulated": [["String"]], "setSrcUniqueFileName": [["void", "String srcUniqueFileName"]], "setChecksum": [["void", "String checksum"]], "setIsFormatValid": [["void", "String isFormatValid"]], "getIsBulk": [["String"]], "setRunId": [["void", "BigDecimal runId"]], "setStatus": [["void", "String status"]], "getIsActive": [["String"]], "setModifiedDate": [["void", "Timestamp modifiedDate"]], "setCreatedDate": [["void", "Timestamp createdDate"]], "setPredecessorId": [["void", "BigDecimal predecessorId"]], "getIsSystemDerived": [["String"]]}, "className": "PCLDataUnitEntity", "renamed": ["void", "function", "(", "BigDecimal", "arg0", ")", "{", "this", ".", "feedId", "=", "arg0", ";", "}"], "nl": "Sets the feed id.", "nlToks": ["Sets", "the", "feed", "id", "."], "path": "pkesireddy/portico_fletcher/tree/master/FetcherTesterService/src/main/java/org/ithaka/cm/fetchertester/entity/PCLDataUnitEntity.java", "idx": 2421}
{"memberVariables": {"SESSION_ID=5555": "long", "mBuffer=null": "ByteBuf", "BLOCK_ID=1": "long", "LOCK_ID=4444": "long", "mThrown=ExpectedException.none()": "ExpectedException", "LENGTH=0": "long", "STATUS=RPCResponse.Status.SUCCESS": "RPCResponse.Status", "OFFSET=2": "long"}, "code": ["void", "function", "(", ")", "{", "RPCBlockReadResponse", "resp", "=", "new", "RPCBlockReadResponse", "(", "BLOCK_ID", ",", "OFFSET", ",", "LENGTH", ",", "null", ",", "STATUS", ")", ";", "resp", ".", "encode", "(", "mBuffer", ")", ";", "RPCBlockReadResponse", "resp2", "=", "RPCBlockReadResponse", ".", "decode", "(", "mBuffer", ")", ";", "assertValid", "(", "BLOCK_ID", ",", "OFFSET", ",", "LENGTH", ",", "STATUS", ",", "resp", ")", ";", "assertValid", "(", "BLOCK_ID", ",", "OFFSET", ",", "LENGTH", ",", "STATUS", ",", "resp2", ")", ";", "}"], "memberFunctions": {"encodedLength": [["void"]], "before": [["void"]], "getPayloadDataBuffer": [["void"]], "assertValid": [["void", "long blockId", "long offset", "long length", "RPCResponse.Status status", "RPCBlockReadResponse resp"], ["void", "RPCBlockReadResponse resp"]], "createErrorResponse": [["void"]], "validate": [["void"]]}, "className": "RPCBlockReadResponseTest", "renamed": ["void", "function", "(", ")", "{", "RPCBlockReadResponse", "loc0", "=", "new", "RPCBlockReadResponse", "(", "BLOCK_ID", ",", "OFFSET", ",", "LENGTH", ",", "null", ",", "STATUS", ")", ";", "loc0", ".", "encode", "(", "mBuffer", ")", ";", "RPCBlockReadResponse", "loc1", "=", "RPCBlockReadResponse", ".", "decode", "(", "mBuffer", ")", ";", "assertValid", "(", "BLOCK_ID", ",", "OFFSET", ",", "LENGTH", ",", "STATUS", ",", "loc0", ")", ";", "assertValid", "(", "BLOCK_ID", ",", "OFFSET", ",", "LENGTH", ",", "STATUS", ",", "loc1", ")", ";", "}"], "nl": "Tests the  {@link RPCBlockReadResponse#encode(ByteBuf)} and{@link RPCBlockReadResponse#decode(ByteBuf)} methods.", "nlToks": ["Tests", "the", "-LCB-", "@link", "RPCBlockReadResponse", "#encode", "-LRB-", "ByteBuf", "-RRB-", "-RCB-", "and", "-LCB-", "@link", "RPCBlockReadResponse", "#decode", "-LRB-", "ByteBuf", "-RRB-", "-RCB-", "methods", "."], "path": "poemlin/alluxio/tree/master/core/server/src/test/java/alluxio/network/protocol/RPCBlockReadResponseTest.java", "idx": 2422}
{"memberVariables": {"lineItem": "OrderLineType", "iter": "java.util.Iterator"}, "code": ["double", "function", "(", ")", "{", "double", "price", "=", "0.0", ";", "try", "{", "price", "=", "getTheItemPrice", "(", ")", ".", "getPriceAmount", "(", ")", ".", "getValue", "(", ")", ".", "doubleValue", "(", ")", ";", "}", "catch", "(", "NullPointerException", "npe", ")", "{", "}", "return", "price", ";", "}"], "memberFunctions": {"getItemDescription": [["String"]], "next": [["Object"]], "getItemPriceCurrency": [["java.util.Currency"]], "getItemQuantity": [["int"]], "getItemPartNumber": [["String"]], "getTheItemPrice": [["BasePriceType"]], "hasNext": [["boolean"]], "remove": [["void"]]}, "className": "OrderLineTypeFacade", "renamed": ["double", "function", "(", ")", "{", "double", "loc0", "=", "0.0", ";", "try", "{", "loc0", "=", "getTheItemPrice", "(", ")", ".", "getPriceAmount", "(", ")", ".", "getValue", "(", ")", ".", "doubleValue", "(", ")", ";", "}", "catch", "(", "NullPointerException", "loc1", ")", "{", "}", "return", "loc0", ";", "}"], "nl": "Returns the price associated with a line item.", "nlToks": ["Returns", "the", "price", "associated", "with", "a", "line", "item", "."], "path": "pmeijer/meta-core/tree/master/meta/DesignDataPackage/tools/jaxb-ri-2.2.6/samples/ubl/src/samples/ubl/report/facade/OrderLineTypeFacade.java", "idx": 2423}
{"memberVariables": {"asMap": "Map<K,Long>", "map": "ConcurrentHashMap<K,Long>"}, "code": ["AtomicLongMap", "<", "K", ">", "function", "(", ")", "{", "return", "new", "AtomicLongMap", "<", "K", ">", "(", "new", "ConcurrentHashMap", "<", ">", "(", ")", ")", ";", "}"], "memberFunctions": {"getAndIncrement": [["long", "K key"]], "incrementAndGet": [["long", "K key"]], "createAsMap": [["Map<K,Long>"]], "asMap": [["Map<K,Long>"]], "removeIfZero": [["boolean", "K key"]], "replace": [["boolean", "K key", "long expectedOldValue", "long newValue"]], "decrementAndGet": [["long", "K key"]], "updateAndGet": [["long", "K key", "LongUnaryOperator updaterFunction"]], "sum": [["long"]], "put": [["long", "K key", "long newValue"]], "remove": [["long", "K key"], ["boolean", "K key", "long value"]], "removeAllZeros": [["void"]], "get": [["long", "K key"]], "putAll": [["void", "Map<? extends K,? extends Long> m"]], "getAndAdd": [["long", "K key", "long delta"]], "getAndAccumulate": [["long", "K key", "long x", "LongBinaryOperator accumulatorFunction"]], "accumulateAndGet": [["long", "K key", "long x", "LongBinaryOperator accumulatorFunction"]], "containsKey": [["boolean", "Object key"]], "isEmpty": [["boolean"]], "clear": [["void"]], "size": [["int"]], "addAndGet": [["long", "K key", "long delta"]], "toString": [["String"]], "getAndUpdate": [["long", "K key", "LongUnaryOperator updaterFunction"]], "getAndDecrement": [["long", "K key"]], "putIfAbsent": [["long", "K key", "long newValue"]]}, "className": "AtomicLongMap", "renamed": ["AtomicLongMap", "<", "K", ">", "function", "(", ")", "{", "return", "new", "AtomicLongMap", "<", "K", ">", "(", "new", "ConcurrentHashMap", "<", ">", "(", ")", ")", ";", "}"], "nl": "Creates an  {@code AtomicLongMap}.", "nlToks": ["Creates", "an", "-LCB-", "@code", "AtomicLongMap", "-RCB-", "."], "path": "hazendaz/guava/tree/master/guava/src/com/google/common/util/concurrent/AtomicLongMap.java", "idx": 2424}
{"memberVariables": {"CONFIG=registerLoggerByName(\"org.xhtmlrenderer.config\")": "String", "MATCH=registerLoggerByName(\"org.xhtmlrenderer.match\")": "String", "RENDER=registerLoggerByName(\"org.xhtmlrenderer.render\")": "String", "CSS_PARSE=registerLoggerByName(\"org.xhtmlrenderer.css-parse\")": "String", "LOGGER_NAMES=new ArrayList(20)": "List", "EXCEPTION=registerLoggerByName(\"org.xhtmlrenderer.exception\")": "String", "loggingEnabled=true": "boolean", "XML_ENTITIES=registerLoggerByName(\"org.xhtmlrenderer.load.xml-entities\")": "String", "JUNIT=registerLoggerByName(\"org.xhtmlrenderer.junit\")": "String", "INIT=registerLoggerByName(\"org.xhtmlrenderer.init\")": "String", "loggerImpl": "XRLogger", "LOAD=registerLoggerByName(\"org.xhtmlrenderer.load\")": "String", "LAYOUT=registerLoggerByName(\"org.xhtmlrenderer.layout\")": "String", "GENERAL=registerLoggerByName(\"org.xhtmlrenderer.general\")": "String", "CASCADE=registerLoggerByName(\"org.xhtmlrenderer.cascade\")": "String", "initPending=true": "boolean"}, "code": ["void", "function", "(", "boolean", "loggingEnabled", ")", "{", "XRLog", ".", "loggingEnabled", "=", "loggingEnabled", ";", "}"], "memberFunctions": {"exception": [["void", "String msg"], ["void", "String msg", "Throwable th"]], "getLoggerImpl": [["XRLogger"]], "init": [["void", "String msg"], ["void", "Level level", "String msg"], ["void", "Level level", "String msg", "Throwable th"], ["void"]], "junit": [["void", "String msg"], ["void", "Level level", "String msg"], ["void", "Level level", "String msg", "Throwable th"]], "listRegisteredLoggers": [["List"]], "cssParse": [["void", "String msg"], ["void", "Level level", "String msg"], ["void", "Level level", "String msg", "Throwable th"]], "log": [["void", "String where", "Level level", "String msg"], ["void", "String where", "Level level", "String msg", "Throwable th"]], "cascade": [["void", "String msg"], ["void", "Level level", "String msg"], ["void", "Level level", "String msg", "Throwable th"]], "match": [["void", "String msg"], ["void", "Level level", "String msg"], ["void", "Level level", "String msg", "Throwable th"]], "main": [["void", "String args[]"]], "registerLoggerByName": [["String", "final String loggerName"]], "setLevel": [["void", "String log", "Level level"]], "layout": [["void", "String msg"], ["void", "Level level", "String msg"], ["void", "Level level", "String msg", "Throwable th"]], "general": [["void", "String msg"], ["void", "Level level", "String msg"], ["void", "Level level", "String msg", "Throwable th"]], "load": [["void", "String msg"], ["void", "Level level", "String msg"], ["void", "Level level", "String msg", "Throwable th"]], "setLoggerImpl": [["void", "XRLogger loggerImpl"]], "render": [["void", "String msg"], ["void", "Level level", "String msg"], ["void", "Level level", "String msg", "Throwable th"]], "xmlEntities": [["void", "String msg"], ["void", "Level level", "String msg"], ["void", "Level level", "String msg", "Throwable th"]], "isLoggingEnabled": [["boolean"]]}, "className": "XRLog", "renamed": ["void", "function", "(", "boolean", "arg0", ")", "{", "XRLog", ".", "arg0", "=", "arg0", ";", "}"], "nl": "Turns logging on or off, without affecting logging configuration.", "nlToks": ["Turns", "logging", "on", "or", "off", ",", "without", "affecting", "logging", "configuration", "."], "path": "plutogeek/flyingsaucer/tree/master/flying-saucer-core/src/main/java/org/xhtmlrenderer/util/XRLog.java", "idx": 2425}
{"memberVariables": {}, "code": ["boolean", "function", "(", "long", "bytesToBeAvailable", ",", "EvictionPlan", "plan", ",", "BlockMetadataManager", "metaManager", ")", "{", "Preconditions", ".", "checkNotNull", "(", "plan", ")", ";", "return", "blocksInTheSameDir", "(", "plan", ",", "metaManager", ")", "&&", "requestSpaceSatisfied", "(", "bytesToBeAvailable", ",", "plan", ",", "metaManager", ")", ";", "}"], "memberFunctions": {"requestSpaceSatisfied": [["boolean", "long bytesToBeAvailable", "EvictionPlan plan", "BlockMetadataManager meta"]], "validCascadingPlan": [["boolean", "long bytesToBeAvailable", "EvictionPlan plan", "BlockMetadataManager metaManager"]], "blocksInTheSameDir": [["boolean", "EvictionPlan plan", "BlockMetadataManager meta"]], "assertEvictionPlanValid": [["void", "long bytesToBeAvailable", "EvictionPlan plan", "BlockMetadataManager metaManager"]]}, "className": "EvictorTestUtils", "renamed": ["boolean", "function", "(", "long", "arg0", ",", "EvictionPlan", "arg1", ",", "BlockMetadataManager", "arg2", ")", "{", "Preconditions", ".", "checkNotNull", "(", "arg1", ")", ";", "return", "blocksInTheSameDir", "(", "arg1", ",", "arg2", ")", "&&", "requestSpaceSatisfied", "(", "arg0", ",", "arg1", ",", "arg2", ")", ";", "}"], "nl": "Assume the plan is returned by a non-cascading evictor, check whether it is valid. a cascading evictor is an evictor that always tries to move from the target tier to the next tier and recursively move down 1 tier until finally blocks are evicted from the final tier.", "nlToks": ["Assume", "the", "plan", "is", "returned", "by", "a", "non-cascading", "evictor", ",", "check", "whether", "it", "is", "valid", ".", "a", "cascading", "evictor", "is", "an", "evictor", "that", "always", "tries", "to", "move", "from", "the", "target", "tier", "to", "the", "next", "tier", "and", "recursively", "move", "down", "1", "tier", "until", "finally", "blocks", "are", "evicted", "from", "the", "final", "tier", "."], "path": "poemlin/alluxio/tree/master/core/server/src/test/java/alluxio/worker/block/evictor/EvictorTestUtils.java", "idx": 2426}
{"memberVariables": {}, "code": ["GetOfferDetailsResponse", ".", "Return", "function", "(", ")", "{", "return", "new", "GetOfferDetailsResponse", ".", "Return", "(", ")", ";", "}"], "memberFunctions": {"createGetOfferDetailsResponseReturnDetailOfferDataSourceGeos": [["GetOfferDetailsResponse.Return.DetailOfferData.SourceGeos"]], "createGetOfferDetailsResponseReturnDetailOfferDataSeo": [["GetOfferDetailsResponse.Return.DetailOfferData.Seo"]], "createGetOfferDetailsResponseReturnDetailOfferDataMerchantAddresses": [["GetOfferDetailsResponse.Return.DetailOfferData.Merchant.Addresses"]], "createGetOfferDetailsResponseReturnDetailOfferDataTargetGeosGeoCountry": [["GetOfferDetailsResponse.Return.DetailOfferData.TargetGeos.Geo.Country"]], "createGetOfferDetailsResponseReturnDetailOfferDataOfferMediaOfferImageEntry": [["GetOfferDetailsResponse.Return.DetailOfferData.OfferMedia.OfferImage.Entry"]], "createGetOfferDetailsResponseReturnDetailOfferDataTargetGeosGeo": [["GetOfferDetailsResponse.Return.DetailOfferData.TargetGeos.Geo"]], "createGetOfferDetailsResponseReturnDetailOfferDataOfferMedia": [["GetOfferDetailsResponse.Return.DetailOfferData.OfferMedia"]], "createGetOfferDetailsResponseReturnDetailOfferDataFulfillmentPartner": [["GetOfferDetailsResponse.Return.DetailOfferData.FulfillmentPartner"]], "createGetOfferDetailsResponseReturnDetailOfferDataOfferMediaOfferImageEntryValue": [["GetOfferDetailsResponse.Return.DetailOfferData.OfferMedia.OfferImage.Entry.Value"]], "createGetOfferDetailsResponseReturnDetailOfferDataProductsProduct": [["GetOfferDetailsResponse.Return.DetailOfferData.Products.Product"]], "createGetOfferDetailsResponseReturnDetailOfferDataRedemptionAddressesRedemptionAddress": [["GetOfferDetailsResponse.Return.DetailOfferData.RedemptionAddresses.RedemptionAddress"]], "createGetOfferDetailsResponseReturnDetailOfferDataSourceGeosGeoRegion": [["GetOfferDetailsResponse.Return.DetailOfferData.SourceGeos.Geo.Region"]], "createGetOfferDetailsResponseReturnDetailOfferDataTargetGeosGeoCity": [["GetOfferDetailsResponse.Return.DetailOfferData.TargetGeos.Geo.City"]], "createGetOfferDetailsResponseReturnDetailOfferData": [["GetOfferDetailsResponse.Return.DetailOfferData"]], "createGetOfferDetailsResponse": [["GetOfferDetailsResponse"]], "createGetOfferDetailsResponseReturnDetailOfferDataSourceGeosGeoCity": [["GetOfferDetailsResponse.Return.DetailOfferData.SourceGeos.Geo.City"]], "createGetOfferDetailsResponseReturnDetailOfferDataOfferMediaOfferImageEntryValueItem": [["GetOfferDetailsResponse.Return.DetailOfferData.OfferMedia.OfferImage.Entry.Value.Item"]], "createGetOfferDetailsResponseReturnDetailOfferDataProducts": [["GetOfferDetailsResponse.Return.DetailOfferData.Products"]], "createGetOfferDetailsResponseReturnDetailOfferDataOfferMediaOfferImage": [["GetOfferDetailsResponse.Return.DetailOfferData.OfferMedia.OfferImage"]], "createGetOfferDetailsResponseReturnDetailOfferDataRedemptionAddresses": [["GetOfferDetailsResponse.Return.DetailOfferData.RedemptionAddresses"]], "createGetOfferDetailsResponseReturnDetailOfferDataSourceGeosGeoCountry": [["GetOfferDetailsResponse.Return.DetailOfferData.SourceGeos.Geo.Country"]], "createGetOfferDetailsResponseReturnDetailOfferDataTargetGeos": [["GetOfferDetailsResponse.Return.DetailOfferData.TargetGeos"]], "createGetOfferDetailsResponseReturnDetailOfferDataTargetGeosGeoRegion": [["GetOfferDetailsResponse.Return.DetailOfferData.TargetGeos.Geo.Region"]], "createGetOfferDetailsResponseReturnDetailOfferDataMerchant": [["GetOfferDetailsResponse.Return.DetailOfferData.Merchant"]], "createGetOfferDetailsResponseReturnDetailOfferDataSourceGeosGeo": [["GetOfferDetailsResponse.Return.DetailOfferData.SourceGeos.Geo"]], "createGetOfferDetailsResponseReturnDetailOfferDataOfferDisplay": [["GetOfferDetailsResponse.Return.DetailOfferData.OfferDisplay"]]}, "className": "ObjectFactory", "renamed": ["GetOfferDetailsResponse", ".", "Return", "function", "(", ")", "{", "return", "new", "GetOfferDetailsResponse", ".", "Return", "(", ")", ";", "}"], "nl": "Create an instance of  {@link GetOfferDetailsResponse.Return }", "nlToks": ["Create", "an", "instance", "of", "-LCB-", "@link", "GetOfferDetailsResponse.Return", "-RCB-"], "path": "priyankgandhi/mastercard/tree/master/eop-openapi-client/src/main/java/com/eop/api/offerdetail/gen/ObjectFactory.java", "idx": 2427}
{"memberVariables": {"str": "String", "SLA_NAME_SPACE_URI=\"uri:oozie:sla:0.1\"": "String", "element": "Element"}, "code": ["Element", "function", "(", "InputStream", "is", ")", "{", "ParamChecker", ".", "notNull", "(", "is", ",", "\"is\"", ")", ";", "SAXBuilder", "saxBuilder", "=", "createSAXBuilder", "(", ")", ";", "Document", "document", "=", "saxBuilder", ".", "build", "(", "is", ")", ";", "return", "document", ".", "getRootElement", "(", ")", ";", "}"], "memberFunctions": {"writePropToString": [["String", "Properties props"]], "prettyPrint": [["PrettyPrint", "Element element"], ["PrettyPrint", "String xmlStr"], ["PrettyPrint", "Configuration conf"]], "removeComments": [["String", "String xmlStr"], ["void", "List l"], ["void", "Document doc"]], "resolveEntity": [["InputSource", "String publicId", "String systemId"]], "toString": [["String"]], "createSchema": [["Schema", "InputStream is"]], "validateData": [["void", "String xmlData", "SchemaName xsdFile"]], "createSAXBuilder": [["SAXBuilder"]], "getRootAttribute": [["String", "String filePath", "String attributeName"]], "validateXml": [["void", "Schema schema", "String xml"]]}, "className": "XmlUtils", "renamed": ["Element", "function", "(", "InputStream", "arg0", ")", "{", "ParamChecker", ".", "notNull", "(", "arg0", ",", "\"srini_string\"", ")", ";", "SAXBuilder", "loc0", "=", "createSAXBuilder", "(", ")", ";", "Document", "loc1", "=", "loc0", ".", "build", "(", "arg0", ")", ";", "return", "loc1", ".", "getRootElement", "(", ")", ";", "}"], "nl": "Parse a inputstream assuming it is a valid XML document and return an JDOM Element for it.", "nlToks": ["Parse", "a", "inputstream", "assuming", "it", "is", "a", "valid", "XML", "document", "and", "return", "an", "JDOM", "Element", "for", "it", "."], "path": "pingpangkuangmo/oozie/tree/master/core/src/main/java/org/apache/oozie/util/XmlUtils.java", "idx": 2428}
{"memberVariables": {"fetcherJobIncrementer": "JobParametersIncrementer", "logger=LoggerUtil.getLogger(JobLauncherController.class)": "Logger", "jobRegistry": "JobRegistry", "jobRepository": "JobRepository", "synchJobLauncher": "SimpleJobLauncher"}, "code": ["JobLauncher", "function", "(", ")", "{", "synchJobLauncher", "=", "new", "SimpleJobLauncher", "(", ")", ";", "synchJobLauncher", ".", "setJobRepository", "(", "jobRepository", ")", ";", "return", "synchJobLauncher", ";", "}"], "memberFunctions": {"printJobNames": [["void"]], "launchJob": [["void", "String jobName", "String feedId"]]}, "className": "JobLauncherController", "renamed": ["JobLauncher", "function", "(", ")", "{", "synchJobLauncher", "=", "new", "SimpleJobLauncher", "(", ")", ";", "synchJobLauncher", ".", "setJobRepository", "(", "jobRepository", ")", ";", "return", "synchJobLauncher", ";", "}"], "nl": "Provides SimpleJobLauncher Bean", "nlToks": ["Provides", "SimpleJobLauncher", "Bean"], "path": "pkesireddy/portico_fletcher/tree/master/fetcher-master/fetcher-core/src/main/java/org/ithaka/cm/fetcher/core/jobs/JobLauncherController.java", "idx": 2430}
{"memberVariables": {}, "code": ["void", "function", "(", "Object", "[", "]", "array", ")", "{", "notEmpty", "(", "array", ",", "\"[Assertion failed] - this array must not be empty: it must contain at least 1 element\"", ")", ";", "}"], "memberFunctions": {"isTrue": [["void", "boolean expression", "String message"], ["void", "boolean expression"]], "isAssignable": [["void", "Class<?> superType", "Class<?> subType"], ["void", "Class<?> superType", "Class<?> subType", "String message"]], "notNull": [["void", "Object object", "String message"], ["void", "Object object"]], "isNull": [["void", "Object object", "String message"], ["void", "Object object"]], "noNullElements": [["void", "Object[] array", "String message"], ["void", "Object[] array"]], "isInstanceOf": [["void", "Class<?> clazz", "Object obj"], ["void", "Class<?> type", "Object obj", "String message"]], "state": [["void", "boolean expression", "String message"], ["void", "boolean expression"]]}, "className": "Assert", "renamed": ["void", "function", "(", "Object", "[", "]", "arg0", ")", "{", "notEmpty", "(", "arg0", ",", "\"srini_string\"", ")", ";", "}"], "nl": "Assert that an array has elements; that is, it must not be {@code null} and must have at least one element.Assert.notEmpty(array);", "nlToks": ["Assert", "that", "an", "array", "has", "elements", ";", "that", "is", ",", "it", "must", "not", "be", "-LCB-", "@code", "null", "-RCB-", "and", "must", "have", "at", "least", "one", "element.Assert.notEmpty", "-LRB-", "array", "-RRB-", ";"], "path": "16ren/Android-Next/tree/master/bus/src/main/java/com/mcxiaoke/next/bus/support/Assert.java", "idx": 2432}
{"memberVariables": {"identifier": "String", "wsseValueType": "String", "useKeyIdentifier": "boolean", "useDirectReference": "boolean", "wsse11TokenType": "String"}, "code": ["boolean", "function", "(", ")", "{", "return", "useKeyIdentifier", ";", "}"], "memberFunctions": {"setWsse11TokenType": [["void", "String wsse11TokenType"]], "setWsseValueType": [["void", "String wsseValueType"]], "getWsse11TokenType": [["String"]], "getIdentifier": [["String"]], "setIdentifier": [["void", "String identifier"]], "setUseDirectReference": [["void", "boolean useDirectReference"]], "getWsseValueType": [["String"]], "isUseDirectReference": [["boolean"]], "setUseKeyIdentifier": [["void", "boolean useKeyIdentifier"]]}, "className": "TokenReference", "renamed": ["boolean", "function", "(", ")", "{", "return", "useKeyIdentifier", ";", "}"], "nl": "Get whether to use a KeyIdentifier to refer to this token", "nlToks": ["Get", "whether", "to", "use", "a", "KeyIdentifier", "to", "refer", "to", "this", "token"], "path": "primesign/cxf/tree/master/services/sts/sts-core/src/main/java/org/apache/cxf/sts/token/provider/TokenReference.java", "idx": 2433}
{"memberVariables": {"LOG=Logger.getLogger(ChildGenUML.class)": "Logger"}, "code": ["Enumeration", "function", "(", "Object", "o", ")", "{", "return", "new", "IteratorEnumeration", "(", "gen2", "(", "o", ")", ")", ";", "}"], "memberFunctions": {"gen2": [["Iterator", "Object o"]]}, "className": "ChildGenUML", "renamed": ["Enumeration", "function", "(", "Object", "arg0", ")", "{", "return", "new", "IteratorEnumeration", "(", "gen2", "(", "arg0", ")", ")", ";", "}"], "nl": "Reply a java.util.Enumeration of the children of the given Object", "nlToks": ["Reply", "a", "java.util.Enumeration", "of", "the", "children", "of", "the", "given", "Object"], "path": "pichiliani/CoArgoUML/tree/master/v0.24/fonte/src/argouml-app/src/org/argouml/uml/cognitive/critics/ChildGenUML.java", "idx": 2435}
{"memberVariables": {"limit": "int", "count": "int", "invMap": "Map<Item,Integer>"}, "code": ["boolean", "function", "(", ")", "{", "System", ".", "out", ".", "println", "(", "count", "+", "\" >= \"", "+", "limit", ")", ";", "return", "count", ">=", "limit", ";", "}"], "memberFunctions": {"addItem": [["void", "Item item", "int quantity"]], "printInventory": [["void"]], "getItemStacks": [["ItemStack[]"]], "dumpAll": [["void"]]}, "className": "MobInventory", "renamed": ["boolean", "function", "(", ")", "{", "System", ".", "out", ".", "println", "(", "count", "+", "\"srini_string\"", "+", "limit", ")", ";", "return", "count", ">=", "limit", ";", "}"], "nl": "Returns true if inventory is full.", "nlToks": ["Returns", "true", "if", "inventory", "is", "full", "."], "path": "pregnantboy/fyp/tree/master/forge/src/main/java/fuzzyMod/inventory/MobInventory.java", "idx": 2436}
{"memberVariables": {"canonicalForm": "String"}, "code": ["String", "function", "(", ")", "{", "return", "canonicalForm", ";", "}"], "memberFunctions": {"fromValid": [["HostSpecifier", "String specifier"]], "hashCode": [["int"]], "isValid": [["boolean", "String specifier"]], "equals": [["boolean", "@Nullable Object other"]], "from": [["HostSpecifier", "String specifier"]]}, "className": "HostSpecifier", "renamed": ["String", "function", "(", ")", "{", "return", "canonicalForm", ";", "}"], "nl": "Returns a string representation of the host specifier suitable for inclusion in a URI. If the host specifier is a domain name, the string will be normalized to all lower case. If the specifier was an IPv6 address without brackets, brackets are added so that the result will be usable in the host part of a URI.", "nlToks": ["Returns", "a", "string", "representation", "of", "the", "host", "specifier", "suitable", "for", "inclusion", "in", "a", "URI", ".", "If", "the", "host", "specifier", "is", "a", "domain", "name", ",", "the", "string", "will", "be", "normalized", "to", "all", "lower", "case", ".", "If", "the", "specifier", "was", "an", "IPv6", "address", "without", "brackets", ",", "brackets", "are", "added", "so", "that", "the", "result", "will", "be", "usable", "in", "the", "host", "part", "of", "a", "URI", "."], "path": "hazendaz/guava/tree/master/guava/src/com/google/common/net/HostSpecifier.java", "idx": 2437}
{"memberVariables": {"clienteEnvia": "ClienteConecta", "LOG=Logger.getLogger(ProjectManager.class)": "Logger", "instance=new ProjectManager()": "ProjectManager", "saveAction": "Action", "SAVE_STATE_PROPERTY_NAME=\"saveState\"": "String", "NO_PROJECT=\"noProject\"": "String", "creatingCurrentProject": "boolean", "listenerList=new EventListenerList()": "EventListenerList", "CURRENT_PROJECT_PROPERTY_NAME=\"currentProject\"": "String", "currentProject": "Project", "event": "PropertyChangeEvent"}, "code": ["Project", "function", "(", ")", "{", "return", "makeEmptyProject", "(", "true", ")", ";", "}"], "memberFunctions": {"setSaveAction": [["void", "Action save"]], "getManager": [["ProjectManager"]], "getCurrentProject": [["Project"]], "firePropertyChanged": [["void", "String propertyName", "Object oldValue", "Object newValue"]], "removeProject": [["void", "Project oldProject"]], "createDefaultDiagrams": [["void"]], "isSaveActionEnabled": [["boolean"]], "setSaveEnabled": [["void", "boolean newValue"]], "setCurrentProject": [["void", "Project newProject"]], "removePropertyChangeListener": [["void", "PropertyChangeListener listener"]], "addPropertyChangeListener": [["void", "PropertyChangeListener listener"]], "execute": [["Object", "final ModelCommand command"]]}, "className": "ProjectManager", "renamed": ["Project", "function", "(", ")", "{", "return", "makeEmptyProject", "(", "true", ")", ";", "}"], "nl": "Makes an empty project.", "nlToks": ["Makes", "an", "empty", "project", "."], "path": "pichiliani/CoArgoUML/tree/master/v0.24/fonte/src/argouml-app/src/org/argouml/kernel/ProjectManager.java", "idx": 2438}
{"memberVariables": {"length=-1": "int", "OOZIE_VERSION=\"0.1\"": "String", "TABLE_COLUMNS=new HashMap<Table,List<Column>>()": "Map<Table,List<Column>>", "column": "Column", "isPrimaryKey": "boolean", "type": "Class<?>", "oozieDbName": "String", "table": "Table"}, "code": ["String", "function", "(", "Table", "table", ",", "DBType", "dbType", ")", "{", "return", "Schema", ".", "generateCreateTableScript", "(", "table", ",", "dbType", ",", "TABLE_COLUMNS", ".", "get", "(", "table", ")", ")", ";", "}"], "memberFunctions": {"generateInsertVersionScript": [["String", "String dbName"]], "getOozieVersion": [["String"]], "setOozieDbName": [["void", "String dbName"]], "getName": [["String"]], "column": [["Column"]], "isPrimaryKey": [["boolean"]], "asLabel": [["String"]], "getType": [["Class<?>"]], "getValidationQuery": [["String", "String dbName"]], "getLength": [["int"]], "toString": [["String"], ["String"]], "table": [["Table"]], "columnName": [["String"]]}, "className": "OozieSchema", "renamed": ["String", "function", "(", "Table", "arg0", ",", "DBType", "arg1", ")", "{", "return", "Schema", ".", "generateCreateTableScript", "(", "arg0", ",", "arg1", ",", "TABLE_COLUMNS", ".", "get", "(", "arg0", ")", ")", ";", "}"], "nl": "Generates the create table SQL Statement", "nlToks": ["Generates", "the", "create", "table", "SQL", "Statement"], "path": "pingpangkuangmo/oozie/tree/master/core/src/main/java/org/apache/oozie/store/OozieSchema.java", "idx": 2439}
{"memberVariables": {"_imageResourceLoader": "ImageResourceLoader", "_uriResolver": "UriResolver"}, "code": ["String", "function", "(", ")", "{", "return", "_uriResolver", ".", "getBaseUri", "(", ")", ";", "}"], "memberFunctions": {"isVisited": [["boolean", "String uri"]], "onLayoutException": [["void", "Throwable t"]], "onRenderException": [["void", "Throwable t"]], "shrinkImageCache": [["void"]], "getImageResource": [["ImageResource", "String uri"]], "resolveURI": [["String", "String uri"]], "setImageResourceLoader": [["void", "ImageResourceLoader loader"]], "getBinaryResource": [["byte[]", "String uri"]], "documentStarted": [["void"]], "getCSSResource": [["CSSResource", "String uri"]], "clearImageCache": [["void"]], "getXMLResource": [["XMLResource", "String uri"]], "setBaseURL": [["void", "String uri"]], "resolveAndOpenStream": [["InputStream", "String uri"]], "setRepaintListener": [["void", "RepaintListener listener"]], "documentLoaded": [["void"]]}, "className": "DelegatingUserAgent", "renamed": ["String", "function", "(", ")", "{", "return", "_uriResolver", ".", "getBaseUri", "(", ")", ";", "}"], "nl": "Returns the current baseUrl for this class.", "nlToks": ["Returns", "the", "current", "baseUrl", "for", "this", "class", "."], "path": "plutogeek/flyingsaucer/tree/master/flying-saucer-core/src/main/java/org/xhtmlrenderer/swing/DelegatingUserAgent.java", "idx": 2440}
{"memberVariables": {}, "code": ["void", "function", "(", ")", "{", "if", "(", "!", "ThreadContext", ".", "peek", "(", ")", ".", "isEmpty", "(", ")", ")", "{", "ThreadContext", ".", "pop", "(", ")", ";", "}", "}"], "memberFunctions": {"getTransactionUniqueId": [["String"]], "addFishTagging": [["void", "String... ids"]], "removeFishTagging": [["void"]]}, "className": "NDCUtil", "renamed": ["void", "function", "(", ")", "{", "if", "(", "!", "ThreadContext", ".", "peek", "(", ")", ".", "isEmpty", "(", ")", ")", "{", "ThreadContext", ".", "pop", "(", ")", ";", "}", "}"], "nl": "Removes the last last fish tagging.", "nlToks": ["Removes", "the", "last", "last", "fish", "tagging", "."], "path": "pkesireddy/portico_fletcher/tree/master/FetcherTesterService/src/main/java/org/ithaka/cm/fetchertester/util/NDCUtil.java", "idx": 2441}
{"memberVariables": {"mThrown=ExpectedException.none()": "ExpectedException"}, "code": ["void", "function", "(", ")", "{", "Mode", "mode", "=", "new", "Mode", "(", "Mode", ".", "getDefault", "(", ")", ")", ";", "Assert", ".", "assertEquals", "(", "Mode", ".", "Bits", ".", "ALL", ",", "mode", ".", "getOwnerBits", "(", ")", ")", ";", "Assert", ".", "assertEquals", "(", "Mode", ".", "Bits", ".", "ALL", ",", "mode", ".", "getGroupBits", "(", ")", ")", ";", "Assert", ".", "assertEquals", "(", "Mode", ".", "Bits", ".", "ALL", ",", "mode", ".", "getOtherBits", "(", ")", ")", ";", "Assert", ".", "assertEquals", "(", "0777", ",", "mode", ".", "toShort", "(", ")", ")", ";", "}"], "memberFunctions": {"umaskExceedLength": [["void"]], "setOwnerBits": [["void"]], "umask": [["void"]], "fromShort": [["void"]], "equals": [["void"]], "setGroupBits": [["void"]], "toStringTest": [["void"]], "setOtherBits": [["void"]], "after": [["void"]], "umaskNotInteger": [["void"]], "toShort": [["void"]], "createNoAccess": [["void"]]}, "className": "ModeTest", "renamed": ["void", "function", "(", ")", "{", "Mode", "loc0", "=", "new", "Mode", "(", "Mode", ".", "getDefault", "(", ")", ")", ";", "Assert", ".", "assertEquals", "(", "Mode", ".", "Bits", ".", "ALL", ",", "loc0", ".", "getOwnerBits", "(", ")", ")", ";", "Assert", ".", "assertEquals", "(", "Mode", ".", "Bits", ".", "ALL", ",", "loc0", ".", "getGroupBits", "(", ")", ")", ";", "Assert", ".", "assertEquals", "(", "Mode", ".", "Bits", ".", "ALL", ",", "loc0", ".", "getOtherBits", "(", ")", ")", ";", "Assert", ".", "assertEquals", "(", "0777", ",", "loc0", ".", "toShort", "(", ")", ")", ";", "}"], "nl": "Tests the  {@link Mode#Mode(Mode)} constructor.", "nlToks": ["Tests", "the", "-LCB-", "@link", "Mode", "#Mode", "-LRB-", "Mode", "-RRB-", "-RCB-", "constructor", "."], "path": "poemlin/alluxio/tree/master/core/common/src/test/java/alluxio/security/authorization/ModeTest.java", "idx": 2442}
{"memberVariables": {"elem2": "String", "elem1": "String", "elem3": "int"}, "code": ["String", "function", "(", ")", "{", "return", "elem1", ";", "}"], "memberFunctions": {"getElem3": [["int"]], "getElem2": [["String"]], "setElem2": [["void", "String value"]], "setElem1": [["void", "String value"]], "setElem3": [["void", "int value"]]}, "className": "MyComplexStruct", "renamed": ["String", "function", "(", ")", "{", "return", "elem1", ";", "}"], "nl": "Gets the value of the elem1 property.", "nlToks": ["Gets", "the", "value", "of", "the", "elem1", "property", "."], "path": "primesign/cxf/tree/master/rt/bindings/soap/src/test/java/org/apache/cxf/binding/soap/MyComplexStruct.java", "idx": 2444}
{"memberVariables": {"repeatList": "Vector", "timeImpl": "TimeField"}, "code": ["void", "function", "(", "RepeatField", "repeatField", ")", "{", "if", "(", "repeatField", "==", "null", ")", "throw", "new", "NullPointerException", "(", "\"null repeatField\"", ")", ";", "this", ".", "repeatList", ".", "add", "(", "repeatField", ")", ";", "}"], "memberFunctions": {"getTime": [["Time"]], "setRepeatTimes": [["void", "Vector repeatTimes"]], "toString": [["String"]], "getRepeatTimes": [["Vector", "boolean create"]], "setTime": [["void", "Time timeField"]]}, "className": "TimeDescriptionImpl", "renamed": ["void", "function", "(", "RepeatField", "arg0", ")", "{", "if", "(", "arg0", "==", "null", ")", "throw", "new", "NullPointerException", "(", "\"srini_string\"", ")", ";", "this", ".", "repeatList", ".", "add", "(", "arg0", ")", ";", "}"], "nl": "Add a repeat field.", "nlToks": ["Add", "a", "repeat", "field", "."], "path": "adamfisk/littleshoot-client/tree/master/common/sdp/src/main/java/org/lastbamboo/common/sdp/TimeDescriptionImpl.java", "idx": 2445}
{"memberVariables": {"URL_SAVED=\"configuration.save.url\"": "String", "FILE_SAVED=\"configuration.save.file\"": "String", "URL_LOADED=\"configuration.load.url\"": "String", "config=getFactory().getConfigurationHandler()": "ConfigurationHandler", "FILE_LOADED=\"configuration.load.file\"": "String"}, "code": ["IConfigurationFactory", "function", "(", ")", "{", "return", "ConfigurationFactory", ".", "getInstance", "(", ")", ";", "}"], "memberFunctions": {"save": [["boolean"], ["boolean", "boolean force"]], "setInteger": [["void", "ConfigurationKey key", "int newValue"]], "getDouble": [["double", "ConfigurationKey key", "double defaultValue"], ["double", "ConfigurationKey key"]], "getInteger": [["int", "ConfigurationKey key"], ["int", "ConfigurationKey key", "int defaultValue"]], "getString": [["String", "ConfigurationKey key"], ["String", "ConfigurationKey key", "String defaultValue"]], "removeListener": [["void", "PropertyChangeListener pcl"], ["void", "ConfigurationKey key", "PropertyChangeListener pcl"]], "setDouble": [["void", "ConfigurationKey key", "double newValue"]], "makeKey": [["ConfigurationKey", "String k1"], ["ConfigurationKey", "ConfigurationKey ck", "String k1"], ["ConfigurationKey", "String k1", "String k2"], ["ConfigurationKey", "String k1", "String k2", "String k3"], ["ConfigurationKey", "String k1", "String k2", "String k3", "String k4"], ["ConfigurationKey", "String k1", "String k2", "String k3", "String k4", "String k5"]], "setString": [["void", "ConfigurationKey key", "String newValue"]], "load": [["boolean"], ["boolean", "File file"], ["boolean", "URL url"]], "removeKey": [["void", "ConfigurationKey key"]], "getConfigurationHandler": [["ConfigurationHandler"]], "getBoolean": [["boolean", "ConfigurationKey key"], ["boolean", "ConfigurationKey key", "boolean defaultValue"]], "setBoolean": [["void", "ConfigurationKey key", "boolean newValue"]], "addListener": [["void", "PropertyChangeListener pcl"], ["void", "ConfigurationKey key", "PropertyChangeListener pcl"]]}, "className": "Configuration", "renamed": ["IConfigurationFactory", "function", "(", ")", "{", "return", "ConfigurationFactory", ".", "getInstance", "(", ")", ";", "}"], "nl": "Returns the configuration factory instance. This is equivalent to ConfigurationFactory.getInstance() but using Configuration.getFactory() is shorter to type and allows us not to have to deal with ConfigurationFactory at all if we don't need to modify or configure it.", "nlToks": ["Returns", "the", "configuration", "factory", "instance", ".", "This", "is", "equivalent", "to", "ConfigurationFactory.getInstance", "-LRB-", "-RRB-", "but", "using", "Configuration.getFactory", "-LRB-", "-RRB-", "is", "shorter", "to", "type", "and", "allows", "us", "not", "to", "have", "to", "deal", "with", "ConfigurationFactory", "at", "all", "if", "we", "do", "n't", "need", "to", "modify", "or", "configure", "it", "."], "path": "pichiliani/CoArgoUML/tree/master/v0.24/fonte/src/argouml-app/src/org/argouml/configuration/Configuration.java", "idx": 2446}
{"memberVariables": {}, "code": ["boolean", "function", "(", "byte", "[", "]", "bytes", ",", "int", "off", ",", "int", "len", ")", "{", "int", "end", "=", "off", "+", "len", ";", "checkPositionIndexes", "(", "off", ",", "end", ",", "bytes", ".", "length", ")", ";", "for", "(", "int", "i", "=", "off", ";", "i", "<", "end", ";", "i", "++", ")", "{", "if", "(", "bytes", "[", "i", "]", "<", "0", ")", "{", "return", "isWellFormedSlowPath", "(", "bytes", ",", "i", ",", "end", ")", ";", "}", "}", "return", "true", ";", "}"], "memberFunctions": {"encodedLength": [["int", "CharSequence sequence"]], "isWellFormedSlowPath": [["boolean", "byte[] bytes", "int off", "int end"]], "unpairedSurrogateMsg": [["String", "int i"]], "encodedLengthGeneral": [["int", "CharSequence sequence", "int start"]]}, "className": "Utf8", "renamed": ["boolean", "function", "(", "byte", "[", "]", "arg0", ",", "int", "arg1", ",", "int", "arg2", ")", "{", "int", "loc0", "=", "arg1", "+", "arg2", ";", "checkPositionIndexes", "(", "arg1", ",", "loc0", ",", "arg0", ".", "length", ")", ";", "for", "(", "int", "loc1", "=", "arg1", ";", "loc1", "<", "loc0", ";", "loc1", "++", ")", "{", "if", "(", "arg0", "[", "loc1", "]", "<", "0", ")", "{", "return", "isWellFormedSlowPath", "(", "arg0", ",", "loc1", ",", "loc0", ")", ";", "}", "}", "return", "true", ";", "}"], "nl": "Returns whether the given byte array slice is a well-formed UTF-8 byte sequence, as defined by {@link #isWellFormed(byte[])}. Note that this can be false even when  {@code isWellFormed(bytes)} is true.", "nlToks": ["Returns", "whether", "the", "given", "byte", "array", "slice", "is", "a", "well-formed", "UTF-8", "byte", "sequence", ",", "as", "defined", "by", "-LCB-", "@link", "#isWellFormed", "-LRB-", "byte", "-LSB-", "-RSB-", "-RRB-", "-RCB-", ".", "Note", "that", "this", "can", "be", "false", "even", "when", "-LCB-", "@code", "isWellFormed", "-LRB-", "bytes", "-RRB-", "-RCB-", "is", "true", "."], "path": "hazendaz/guava/tree/master/guava/src/com/google/common/base/Utf8.java", "idx": 2447}
{"memberVariables": {"name=\"default.kerberos-client\"": "String", "callbackHandler": "CallbackHandler", "contextName": "String", "wssConfig=WSSConfig.getNewInstance()": "WSSConfig", "isUsernameServiceNameForm": "boolean", "requestCredentialDelegation": "boolean", "useDelegatedCredential": "boolean", "LOG=LogUtils.getL7dLogger(KerberosClient.class)": "Logger", "serviceName": "String"}, "code": ["void", "function", "(", "CallbackHandler", "callbackHandler", ")", "{", "this", ".", "callbackHandler", "=", "callbackHandler", ";", "}"], "memberFunctions": {"isUseDelegatedCredential": [["boolean"]], "isRequestCredentialDelegation": [["boolean"]], "getServiceName": [["String"]], "setRequestCredentialDelegation": [["void", "boolean requestCredentialDelegation"]], "setUseDelegatedCredential": [["void", "boolean useDelegatedCredential"]], "getBeanName": [["String"]], "setContextName": [["void", "String contextName"]], "setJaasLoginModuleName": [["void", "String jaasLoginModuleName"]], "isUsernameServiceNameForm": [["boolean"]], "getContextName": [["String"]], "setServiceName": [["void", "String serviceName"]], "getCallbackHandler": [["CallbackHandler"]], "requestSecurityToken": [["SecurityToken"]], "setUsernameServiceNameForm": [["void", "boolean usernameServiceNameForm"]], "getJaasLoginModuleName": [["String"]]}, "className": "KerberosClient", "renamed": ["void", "function", "(", "CallbackHandler", "arg0", ")", "{", "this", ".", "callbackHandler", "=", "arg0", ";", "}"], "nl": "Set the CallbackHandler to use with the LoginContext. It can be null.", "nlToks": ["Set", "the", "CallbackHandler", "to", "use", "with", "the", "LoginContext", ".", "It", "can", "be", "null", "."], "path": "primesign/cxf/tree/master/rt/ws/security/src/main/java/org/apache/cxf/ws/security/kerberos/KerberosClient.java", "idx": 2448}
{"memberVariables": {"geneticProfile": "GeneticProfile", "caseIdList=new ArrayList<String>()": "ArrayList<String>", "geneList=new ArrayList<String>()": "ArrayList<String>", "mapFromGeneAndCaseToGeneProperties=new HashMap<String,String>()": "HashMap<String,String>", "matrix": "String[][]"}, "code": ["String", "[", "]", "[", "]", "function", "(", ")", "{", "return", "matrix", ";", "}"], "memberFunctions": {"getValue": [["String", "String geneSymbol", "String caseId"]], "processMatrix": [["void"]], "getCaseIdList": [["ArrayList<String>"]], "getGeneList": [["ArrayList<String>"]], "createKey": [["String", "String geneSymbol", "String caseId"]], "getValueParsed": [["ValueParser", "String geneSymbol", "String caseId", "double zScoreThreshold"]], "getGeneticProfile": [["GeneticProfile"]]}, "className": "ProfileData", "renamed": ["String", "[", "]", "[", "]", "function", "(", ")", "{", "return", "matrix", ";", "}"], "nl": "Gets the Data Matrix.", "nlToks": ["Gets", "the", "Data", "Matrix", "."], "path": "adamabeshouse/cbioportal/tree/master/core/src/main/java/org/mskcc/cbio/portal/model/ProfileData.java", "idx": 2451}
{"memberVariables": {"mUfsCluster": "UnderFileSystemCluster", "mNumWorkers": "int", "mWorkDirectory": "String", "mWorkers": "List<AlluxioWorkerService>", "DEFAULT_WORKER_MEMORY_BYTES=100 * Constants.MB": "long", "LOG=LoggerFactory.getLogger(Constants.LOGGER_TYPE)": "Logger", "DEFAULT_BLOCK_SIZE_BYTES=Constants.KB": "int", "RANDOM_GENERATOR=new Random()": "Random", "mHostname": "String"}, "code": ["void", "function", "(", ")", "{", "mWorkDirectory", "=", "AlluxioTestDirectory", ".", "createTemporaryDirectory", "(", "\"test-cluster\"", ")", ".", "getAbsolutePath", "(", ")", ";", "}"], "memberFunctions": {"setHostname": [["void"]], "start": [["void"]], "getClient": [["FileSystem"]], "setupTest": [["void"]], "stopUFS": [["void"]], "initConfiguration": [["void"]], "stop": [["void"]], "startWorkers": [["void"]], "runWorkers": [["void"]], "startMaster": [["void"]], "reset": [["void"]], "stopFS": [["void"]], "getMaster": [["LocalAlluxioMaster"]]}, "className": "AbstractLocalAlluxioCluster", "renamed": ["void", "function", "(", ")", "{", "mWorkDirectory", "=", "AlluxioTestDirectory", ".", "createTemporaryDirectory", "(", "\"srini_string\"", ")", ".", "getAbsolutePath", "(", ")", ";", "}"], "nl": "Sets Alluxio work directory.", "nlToks": ["Sets", "Alluxio", "work", "directory", "."], "path": "poemlin/alluxio/tree/master/minicluster/src/main/java/alluxio/master/AbstractLocalAlluxioCluster.java", "idx": 2452}
{"memberVariables": {"EMAIL=\"email_address\"": "String"}, "code": ["boolean", "function", "(", "HttpServletRequest", "request", ")", "{", "String", "email", "=", "getEmailId", "(", "request", ")", ";", "if", "(", "email", "!=", "null", ")", "{", "return", "true", ";", "}", "else", "{", "return", "false", ";", "}", "}"], "memberFunctions": {"loginUser": [["void", "String emailAddress", "HttpServletRequest request"]], "logoutUser": [["void", "HttpServletRequest request"]], "getEmailId": [["String", "HttpServletRequest request"]]}, "className": "UserInfo", "renamed": ["boolean", "function", "(", "HttpServletRequest", "arg0", ")", "{", "String", "loc0", "=", "getEmailId", "(", "arg0", ")", ";", "if", "(", "loc0", "!=", "null", ")", "{", "return", "true", ";", "}", "else", "{", "return", "false", ";", "}", "}"], "nl": "Is the User Currently Authenticated?  Determined via Session.", "nlToks": ["Is", "the", "User", "Currently", "Authenticated", "?", "Determined", "via", "Session", "."], "path": "adamabeshouse/cbioportal/tree/master/core/src/main/java/org/mskcc/cbio/portal/util/UserInfo.java", "idx": 2453}
{"memberVariables": {"DECODER=Charset.forName(\"US-ASCII\").newDecoder()": "CharsetDecoder", "LOG=LoggerFactory.getLogger(MinaUtils.class)": "Logger"}, "code": ["String", "function", "(", "final", "ByteBuffer", "buf", ")", "{", "DECODER", ".", "reset", "(", ")", ";", "try", "{", "return", "buf", ".", "getString", "(", "DECODER", ")", ";", "}", "catch", "(", "final", "CharacterCodingException", "e", ")", "{", "LOG", ".", "error", "(", "\"Could not decode: \"", "+", "buf", ",", "e", ")", ";", "return", "StringUtils", ".", "EMPTY", ";", "}", "}"], "memberFunctions": {"splitToByteArrays": [["Collection<byte[]>", "final ByteBuffer buffer", "final int chunkSize"]], "split": [["Collection<ByteBuffer>", "final ByteBuffer buffer", "final int chunkSize"]], "toByteArray": [["byte[]", "final ByteBuffer buf"]], "putUnsignedByte": [["void", "final ByteBuffer bb", "final int value"], ["void", "final ByteBuffer bb", "final int position", "final int value"]], "toAsciiString": [["String", "final ByteBuffer buf"]], "putUnsignedShort": [["void", "final ByteBuffer bb", "final int value"], ["void", "final ByteBuffer bb", "final int position", "final int value"]], "isUdp": [["boolean", "final IoSession session"]], "createBuffer": [["ByteBuffer", "final ByteBuffer buffer"]], "putUnsignedInt": [["void", "final ByteBuffer bb", "final long value"], ["void", "final ByteBuffer bb", "final int position", "final long value"]], "toBuf": [["ByteBuffer", "final String str"]]}, "className": "MinaUtils", "renamed": ["String", "function", "(", "final", "ByteBuffer", "arg0", ")", "{", "DECODER", ".", "reset", "(", ")", ";", "try", "{", "return", "arg0", ".", "getString", "(", "DECODER", ")", ";", "}", "catch", "(", "final", "CharacterCodingException", "loc0", ")", "{", "LOG", ".", "error", "(", "\"srini_string\"", "+", "arg0", ",", "loc0", ")", ";", "return", "StringUtils", ".", "EMPTY", ";", "}", "}"], "nl": "Reads an ASCII string from the buffer.  Reads from the buffer's current position to its limit.", "nlToks": ["Reads", "an", "ASCII", "string", "from", "the", "buffer", ".", "Reads", "from", "the", "buffer", "'s", "current", "position", "to", "its", "limit", "."], "path": "adamfisk/littleshoot-client/tree/master/common/util/mina/src/main/java/org/lastbamboo/common/util/mina/MinaUtils.java", "idx": 2454}
{"memberVariables": {"LOG_MSG=\"Exception caught from SentenceListener\"": "String", "DISPATCH_ALL=\"DISPATCH_ALL\"": "String", "reader": "DataReader", "dataListener": "DataListener", "listeners=new ConcurrentHashMap<String,List<SentenceListener>>()": "ConcurrentMap<String,List<SentenceListener>>", "pauseTimeout=DEFAULT_TIMEOUT": "int", "exceptionListener=null": "ExceptionListener", "thread": "Thread", "LOGGER=Logger.getLogger(SentenceReader.class.getName())": "Logger", "DEFAULT_TIMEOUT=5000": "int"}, "code": ["void", "function", "(", ")", "{", "for", "(", "SentenceListener", "listener", ":", "getSentenceListeners", "(", ")", ")", "{", "try", "{", "listener", ".", "readingStopped", "(", ")", ";", "}", "catch", "(", "Exception", "e", ")", "{", "LOGGER", ".", "log", "(", "Level", ".", "WARNING", ",", "LOG_MSG", ",", "e", ")", ";", "}", "}", "}"], "memberFunctions": {"fireReadingPaused": [["void"]], "fireDataEvent": [["void", "String data"]], "getExceptionListener": [["ExceptionListener"]], "setPauseTimeout": [["void", "int millis"]], "start": [["void"]], "removeSentenceListener": [["void", "SentenceListener listener"]], "registerListener": [["void", "SentenceListener listener", "String type"]], "getSentenceListeners": [["List<SentenceListener>"]], "handleException": [["void", "String msg", "Exception ex"]], "setDataListener": [["void", "DataListener listener"]], "stop": [["void"]], "setInputStream": [["void", "InputStream stream"]], "fireReadingStarted": [["void"]], "fireSentenceEvent": [["void", "Sentence sentence"]], "addSentenceListener": [["void", "SentenceListener listener"], ["void", "SentenceListener sl", "SentenceId type"], ["void", "SentenceListener sl", "String type"]], "getPauseTimeout": [["int"]], "setExceptionListener": [["void", "ExceptionListener exceptionListener"]], "setDatagramSocket": [["void", "DatagramSocket socket"]]}, "className": "SentenceReader", "renamed": ["void", "function", "(", ")", "{", "for", "(", "SentenceListener", "loc0", ":", "getSentenceListeners", "(", ")", ")", "{", "try", "{", "loc0", ".", "readingStopped", "(", ")", ";", "}", "catch", "(", "Exception", "loc1", ")", "{", "LOGGER", ".", "log", "(", "Level", ".", "WARNING", ",", "LOG_MSG", ",", "loc1", ")", ";", "}", "}", "}"], "nl": "Notifies all listeners that data reading has stopped.", "nlToks": ["Notifies", "all", "listeners", "that", "data", "reading", "has", "stopped", "."], "path": "pkoziol/marine-api/tree/master/src/main/java/net/sf/marineapi/nmea/io/SentenceReader.java", "idx": 2455}
{"memberVariables": {}, "code": ["Object", "function", "(", "Object", "instance", ",", "String", "methodName", ",", "Object", "arg", ")", "{", "Object", "[", "]", "args", "=", "new", "Object", "[", "1", "]", ";", "args", "[", "0", "]", "=", "arg", ";", "return", "invokeMethod", "(", "instance", ",", "methodName", ",", "args", ")", ";", "}"], "memberFunctions": {"getValue": [["Object", "Object instance", "String fieldName"]], "getClass": [["Class", "Class parent", "String name"]], "getAllStaticMethods": [["List", "Class entryClass", "String methodName", "Class[] classTypes"]], "getConstructorImpl": [["Constructor", "Class clazz", "Class[] classTypes"]], "getMethodImpl": [["Method", "Class thisClass", "String methodName", "Class[] classTypes"]], "getFieldImpl": [["Field", "Class thisClass", "String fieldName"]], "getClassImpl": [["Class", "Class parent", "String name"]], "setValue": [["void", "Object instance", "String fieldName", "Object value"]], "invokeAllStaticMethods": [["List", "Class clazz", "String methodName", "Object arg"]], "getMethod": [["Method", "Object instance", "String methodName", "Class[] classTypes"]], "invokeConstructor": [["Object", "Class clazz", "Object[] args"], ["Object", "Class clazz", "Object[] args", "Class[] classTypes"]]}, "className": "PrivilegedAccessor", "renamed": ["Object", "function", "(", "Object", "arg0", ",", "String", "arg1", ",", "Object", "arg2", ")", "{", "Object", "[", "]", "loc0", "=", "new", "Object", "[", "1", "]", ";", "loc0", "[", "0", "]", "=", "arg2", ";", "return", "invokeMethod", "(", "arg0", ",", "arg1", ",", "loc0", ")", ";", "}"], "nl": "Calls a method on the given object instance with the given argument.", "nlToks": ["Calls", "a", "method", "on", "the", "given", "object", "instance", "with", "the", "given", "argument", "."], "path": "adamfisk/littleshoot-client/tree/master/client/util/src/main/java/org/lastbamboo/client/util/PrivilegedAccessor.java", "idx": 2456}
{"memberVariables": {"time": "Time"}, "code": ["void", "function", "(", ")", "{", "try", "{", "time", ".", "setHour", "(", "60", ")", ";", "fail", "(", "\"Did not throw exception\"", ")", ";", "}", "catch", "(", "IllegalArgumentException", "e", ")", "{", "}", "}"], "memberFunctions": {"testDateRoundTrip": [["void"]], "testParseTimeWithOneDecimal": [["void"]], "testSetNegativeMinutes": [["void"]], "testFormatTimeWithOneDecimal": [["void"]], "testSetMinutes": [["void"]], "testParseTimeWithoutDecimals": [["void"]], "testGetMinutes": [["void"]], "testParseTimeWithDecimals": [["void"]], "testSetInvalidSeconds": [["void"]], "testSetNegativeHour": [["void"]], "testToDate": [["void"]], "testGetSeconds": [["void"]], "testSetHour": [["void"]], "testGetHour": [["void"]], "testSetSeconds": [["void"]], "testSetTime": [["void"]], "testGetMilliseconds": [["void"]], "testSetNegativeSeconds": [["void"]], "setUp": [["void"]], "testSetInvalidMinutes": [["void"]], "testFormatTimeNoDecimals": [["void"]], "testFormatTimeWithDecimals": [["void"]], "testEquals": [["void"]]}, "className": "TimeTest", "renamed": ["void", "function", "(", ")", "{", "try", "{", "time", ".", "setHour", "(", "60", ")", ";", "fail", "(", "\"srini_string\"", ")", ";", "}", "catch", "(", "IllegalArgumentException", "loc0", ")", "{", "}", "}"], "nl": "Test method for  {@link net.sf.marineapi.nmea.util.Time#setHour(int)}.", "nlToks": ["Test", "method", "for", "-LCB-", "@link", "net.sf.marineapi.nmea.util.Time", "#setHour", "-LRB-", "int", "-RRB-", "-RCB-", "."], "path": "pkoziol/marine-api/tree/master/src/test/java/net/sf/marineapi/nmea/util/TimeTest.java", "idx": 2457}
{"memberVariables": {"log=LoggerFactory.getLogger(BookService.class)": "Logger", "bookRepository": "BookRepository"}, "code": ["Page", "<", "Book", ">", "function", "(", "Pageable", "pageable", ")", "{", "log", ".", "debug", "(", "\"Request to get all Books\"", ")", ";", "Page", "<", "Book", ">", "result", "=", "bookRepository", ".", "findAll", "(", "pageable", ")", ";", "return", "result", ";", "}"], "memberFunctions": {"save": [["Book", "Book book"]], "findOne": [["Book", "String id"]], "delete": [["void", "String id"]]}, "className": "BookService", "renamed": ["Page", "<", "Book", ">", "function", "(", "Pageable", "arg0", ")", "{", "log", ".", "debug", "(", "\"srini_string\"", ")", ";", "Page", "<", "Book", ">", "loc0", "=", "bookRepository", ".", "findAll", "(", "arg0", ")", ";", "return", "loc0", ";", "}"], "nl": "Get all the books.", "nlToks": ["Get", "all", "the", "books", "."], "path": "pigkey/kitchen/tree/master/app/src/main/java/com/kitchen/app/service/BookService.java", "idx": 2458}
{"memberVariables": {"COMPACT_SERIALIZED_SIZE=Block.HEADER_SIZE + CHAIN_WORK_BYTES + 4": "int", "chainWork": "BigInteger", "CHAIN_WORK_BYTES=12": "int", "header": "Block", "serialVersionUID=-6097565241243701771L": "long", "EMPTY_BYTES=new byte[CHAIN_WORK_BYTES]": "byte[]", "height": "int"}, "code": ["StoredBlock", "function", "(", "Block", "block", ")", "{", "BigInteger", "chainWork", "=", "this", ".", "chainWork", ".", "add", "(", "block", ".", "getWork", "(", ")", ")", ";", "int", "height", "=", "this", ".", "height", "+", "1", ";", "return", "new", "StoredBlock", "(", "block", ",", "chainWork", ",", "height", ")", ";", "}"], "memberFunctions": {"getHeight": [["int"]], "getChainWork": [["BigInteger"]], "deserializeCompact": [["StoredBlock", "NetworkParameters params", "ByteBuffer buffer"]], "serializeCompact": [["void", "ByteBuffer buffer"]], "hashCode": [["int"]], "equals": [["boolean", "Object o"]], "moreWorkThan": [["boolean", "StoredBlock other"]], "toString": [["String"]], "getPrev": [["StoredBlock", "BlockStore store"]], "getHeader": [["Block"]]}, "className": "StoredBlock", "renamed": ["StoredBlock", "function", "(", "Block", "arg0", ")", "{", "BigInteger", "loc0", "=", "this", ".", "chainWork", ".", "add", "(", "arg0", ".", "getWork", "(", ")", ")", ";", "int", "loc1", "=", "this", ".", "height", "+", "1", ";", "return", "new", "StoredBlock", "(", "arg0", ",", "loc0", ",", "loc1", ")", ";", "}"], "nl": "Creates a new StoredBlock, calculating the additional fields by adding to the values in this block.", "nlToks": ["Creates", "a", "new", "StoredBlock", ",", "calculating", "the", "additional", "fields", "by", "adding", "to", "the", "values", "in", "this", "block", "."], "path": "1000000000001/bitcoinj/tree/master/core/src/main/java/org/bitcoinj/core/StoredBlock.java", "idx": 2460}
{"memberVariables": {"classnamePrefix": "String", "LOG=Logger.getLogger(ParseState.class)": "Logger", "obsoleteInnerClasses": "Collection", "component": "Object", "anonymousClassCounter": "int", "context": "Context", "classifier": "Object", "obsoleteFeatures": "Collection"}, "code": ["Object", "function", "(", ")", "{", "return", "classifier", ";", "}"], "memberFunctions": {"addClassifierContext": [["void", "Object mClassifier"]], "addPackageContext": [["void", "Object mPackage"]], "removeObsoleteFeatures": [["void"]], "innerClassifier": [["void", "Object mClassifier"]], "addComponent": [["void", "Object c"]], "outerClassifier": [["void"]], "getMethod": [["Object", "String name"]], "getFeature": [["Object", "String name"]], "removeObsoleteInnerClasses": [["void"]], "getAttribute": [["Object", "String name"]], "feature": [["void", "Object feature"]], "getFeatures": [["Collection", "String name"]], "getClassnamePrefix": [["String"]], "getOperation": [["Object", "String name"]], "getComponent": [["Object"]], "anonymousClass": [["String"]], "getContext": [["Context"]]}, "className": "ParseState", "renamed": ["Object", "function", "(", ")", "{", "return", "classifier", ";", "}"], "nl": "Get the current classifier.", "nlToks": ["Get", "the", "current", "classifier", "."], "path": "pichiliani/CoArgoUML/tree/master/v0.24/fonte/src/argouml-app/src/org/argouml/uml/reveng/java/ParseState.java", "idx": 2462}
{"memberVariables": {"repeatList": "Vector", "timeImpl": "TimeField"}, "code": ["void", "function", "(", "Vector", "repeatTimes", ")", "{", "this", ".", "repeatList", "=", "repeatTimes", ";", "}"], "memberFunctions": {"getTime": [["Time"]], "addRepeatField": [["void", "RepeatField repeatField"]], "toString": [["String"]], "getRepeatTimes": [["Vector", "boolean create"]], "setTime": [["void", "Time timeField"]]}, "className": "TimeDescriptionImpl", "renamed": ["void", "function", "(", "Vector", "arg0", ")", "{", "this", ".", "repeatList", "=", "arg0", ";", "}"], "nl": "Returns the list of repeat times (r= fields)  specified in the SessionDescription.", "nlToks": ["Returns", "the", "list", "of", "repeat", "times", "-LRB-", "r", "=", "fields", "-RRB-", "specified", "in", "the", "SessionDescription", "."], "path": "adamfisk/littleshoot-client/tree/master/common/sdp/src/main/java/org/lastbamboo/common/sdp/TimeDescriptionImpl.java", "idx": 2463}
{"memberVariables": {"sawReturn": "boolean", "line=new StringBuilder()": "StringBuilder"}, "code": ["boolean", "function", "(", "boolean", "sawNewline", ")", "{", "String", "separator", "=", "sawReturn", "?", "(", "sawNewline", "?", "\"  \"", ":", "\" \"", ")", ":", "(", "sawNewline", "?", "\" \"", ":", "\"\"", ")", ";", "handleLine", "(", "line", ".", "toString", "(", ")", ",", "separator", ")", ";", "line", "=", "new", "StringBuilder", "(", ")", ";", "sawReturn", "=", "false", ";", "return", "sawNewline", ";", "}"], "memberFunctions": {"add": [["void", "char[] cbuf", "int off", "int len"]], "finish": [["void"]], "handleLine": [["void", "String line", "String end"]]}, "className": "LineBuffer", "renamed": ["boolean", "function", "(", "boolean", "arg0", ")", "{", "String", "loc0", "=", "sawReturn", "?", "(", "arg0", "?", "\"srini_string\"", ":", "\"srini_string\"", ")", ":", "(", "arg0", "?", "\"srini_string\"", ":", "\"srini_string\"", ")", ";", "handleLine", "(", "line", ".", "toString", "(", ")", ",", "loc0", ")", ";", "line", "=", "new", "StringBuilder", "(", ")", ";", "sawReturn", "=", "false", ";", "return", "arg0", ";", "}"], "nl": "Called when a line is complete.", "nlToks": ["Called", "when", "a", "line", "is", "complete", "."], "path": "hazendaz/guava/tree/master/guava/src/com/google/common/io/LineBuffer.java", "idx": 2464}
{"memberVariables": {"SK_CLASSIFIER=new ScopeKindEnum(\"sk_classifier\")": "ScopeKindEnum", "typeName": "java.util.List", "SK_INSTANCE=new ScopeKindEnum(\"sk_instance\")": "ScopeKindEnum", "literalName": "java.lang.String"}, "code": ["java", ".", "lang", ".", "Object", "function", "(", ")", "{", "try", "{", "return", "forName", "(", "literalName", ")", ";", "}", "catch", "(", "java", ".", "lang", ".", "IllegalArgumentException", "e", ")", "{", "throw", "new", "java", ".", "io", ".", "InvalidObjectException", "(", "e", ".", "getMessage", "(", ")", ")", ";", "}", "}"], "memberFunctions": {"forName": [["ScopeKind", "java.lang.String name"]], "refTypeName": [["java.util.List"]], "hashCode": [["int"]], "equals": [["boolean", "java.lang.Object o"]], "toString": [["java.lang.String"]]}, "className": "ScopeKindEnum", "renamed": ["java", ".", "lang", ".", "Object", "function", "(", ")", "{", "try", "{", "return", "forName", "(", "literalName", ")", ";", "}", "catch", "(", "java", ".", "lang", ".", "IllegalArgumentException", "loc0", ")", "{", "throw", "new", "java", ".", "io", ".", "InvalidObjectException", "(", "loc0", ".", "getMessage", "(", ")", ")", ";", "}", "}"], "nl": "Resolves serialized instance of enumeration value.", "nlToks": ["Resolves", "serialized", "instance", "of", "enumeration", "value", "."], "path": "pichiliani/CoArgoUML/tree/master/v0.24/fonte/src/argouml-core-model-mdr/build/java/org/omg/uml/foundation/datatypes/ScopeKindEnum.java", "idx": 2465}
{"memberVariables": {"objectType": "ObjectType"}, "code": ["void", "function", "(", "ObjectType", "objectType", ")", "{", "this", ".", "objectType", "=", "objectType", ";", "}"], "memberFunctions": {"readBlocks": [["List<Object>", "MessageReader reader", "Context context"]], "getObjectType": [["ObjectType"]], "writeBlocks": [["List<Object>", "MessageWriter writer", "Context context"]]}, "className": "TrailingBlocks", "renamed": ["void", "function", "(", "ObjectType", "arg0", ")", "{", "this", ".", "objectType", "=", "arg0", ";", "}"], "nl": "Sets the ObjectType used to read and write the trailing block instances.", "nlToks": ["Sets", "the", "ObjectType", "used", "to", "read", "and", "write", "the", "trailing", "block", "instances", "."], "path": "primesign/cxf/tree/master/rt/databinding/aegis/src/main/java/org/apache/cxf/aegis/type/encoded/TrailingBlocks.java", "idx": 2466}
{"memberVariables": {"lastModifiedTimeStamp": "Timestamp", "fetcherStartTimestamp": "Timestamp", "createTimeStamp": "Timestamp", "serialVersionUID=1L": "long", "batchId": "BigDecimal", "errorMsg": "String", "outcomeType": "OutcomeType", "createdBy": "String", "feedId": "BigDecimal", "testId": "long", "runId": "BigDecimal", "fetcherEndTimeStamp": "Timestamp", "regPclTestResultDetails": "List<RegPCLTestResultDetailsEntity>", "runStatus": "RunStatusType"}, "code": ["void", "function", "(", "Timestamp", "fetcherStartTimestamp", ")", "{", "this", ".", "fetcherStartTimestamp", "=", "fetcherStartTimestamp", ";", "}"], "memberFunctions": {"setLastModifiedTimeStamp": [["void", "Timestamp lastModifiedTimeStamp"]], "setFeedId": [["void", "BigDecimal feedId"]], "getOutcomeType": [["OutcomeType"]], "updateLastModifiedTimeStamp": [["void"]], "updateCreateTimeStamp": [["void"]], "getRunId": [["BigDecimal"]], "setBatchId": [["void", "BigDecimal batchId"]], "getRegPclTestResultDetails": [["List<RegPCLTestResultDetailsEntity>"]], "setTestId": [["void", "long testId"]], "getTestId": [["long"]], "removeRegPclTestResultDetail": [["RegPCLTestResultDetailsEntity", "RegPCLTestResultDetailsEntity regPclTestResultDetail"]], "setRegPclTestResultDetails": [["void", "List<RegPCLTestResultDetailsEntity> regPclTestResultDetails"]], "setErrorMsg": [["void", "String errorMsg"]], "getRunStatus": [["RunStatusType"]], "addRegPclTestResultDetail": [["RegPCLTestResultDetailsEntity", "RegPCLTestResultDetailsEntity regPclTestResultDetail"]], "getErrorMsg": [["String"]], "setRunStatus": [["void", "RunStatusType runStatus"]], "getFetcherEndTimeStamp": [["Timestamp"]], "getLastModifiedTimeStamp": [["Timestamp"]], "getFeedId": [["BigDecimal"]], "setRunId": [["void", "BigDecimal runId"]], "getFetcherStartTimestamp": [["Timestamp"]], "setFetcherEndTimeStamp": [["void", "Timestamp fetcherEndTimeStamp"]], "setCreateTimeStamp": [["void", "Timestamp createTimeStamp"]], "setCreatedBy": [["void", "String createdBy"]], "getCreateTimeStamp": [["Timestamp"]], "getBatchId": [["BigDecimal"]], "setOutcomeType": [["void", "OutcomeType outcomeType"]], "getCreatedBy": [["String"]]}, "className": "RegPCLTestResultEntity", "renamed": ["void", "function", "(", "Timestamp", "arg0", ")", "{", "this", ".", "fetcherStartTimestamp", "=", "arg0", ";", "}"], "nl": "Sets the fetcher start timestamp.", "nlToks": ["Sets", "the", "fetcher", "start", "timestamp", "."], "path": "pkesireddy/portico_fletcher/tree/master/FetcherTesterService/src/main/java/org/ithaka/cm/fetchertester/entity/RegPCLTestResultEntity.java", "idx": 2468}
{"memberVariables": {"interactionType": "String", "experimentTypes": "String", "geneB": "long", "pmids": "String", "geneA": "long", "source": "String"}, "code": ["void", "function", "(", "String", "s", ")", "{", "this", ".", "source", "=", "s", ";", "}"], "memberFunctions": {"toSif": [["String"]], "setExperimentTypes": [["void", "String expTypes"]], "setGeneA": [["void", "long entrezGeneId"]], "setGeneB": [["void", "long entrezGeneID"]], "getInteractionType": [["String"]], "getGeneA": [["long"]], "getGeneB": [["long"]], "setPmids": [["void", "String p"]], "getSource": [["String"]], "toString": [["String"]], "setInteractionType": [["void", "String type"]], "getExperimentTypes": [["String"]], "getPmids": [["String"]]}, "className": "Interaction", "renamed": ["void", "function", "(", "String", "arg0", ")", "{", "this", ".", "source", "=", "arg0", ";", "}"], "nl": "Sets the data source, where this interaction comes from, e.g. REACTOME.", "nlToks": ["Sets", "the", "data", "source", ",", "where", "this", "interaction", "comes", "from", ",", "e.g.", "REACTOME", "."], "path": "adamabeshouse/cbioportal/tree/master/core/src/main/java/org/mskcc/cbio/portal/model/Interaction.java", "idx": 2469}
{"memberVariables": {"comments": "String", "feedId": "String", "testId": "String", "elapsedTime": "String"}, "code": ["boolean", "function", "(", ")", "{", "return", "\"true\"", ".", "equalsIgnoreCase", "(", "comments", ")", ";", "}"], "memberFunctions": {"setFeedId": [["void", "String feedId"]], "setElapsedTime": [["void", "String elapsedTime"]], "getComments": [["String"]], "toString": [["String"]], "getFeedId": [["String"]], "setComments": [["void", "String comments"]], "setTestId": [["void", "String testId"]], "getTestId": [["String"]], "getElapsedTime": [["String"]]}, "className": "PubFilesOperationResp", "renamed": ["boolean", "function", "(", ")", "{", "return", "\"srini_string\"", ".", "equalsIgnoreCase", "(", "comments", ")", ";", "}"], "nl": "Checks if is file down loaded to destination.", "nlToks": ["Checks", "if", "is", "file", "down", "loaded", "to", "destination", "."], "path": "pkesireddy/portico_fletcher/tree/master/FetcherTesterService/src/main/java/org/ithaka/cm/fetchertester/model/PubFilesOperationResp.java", "idx": 2470}
{"memberVariables": {"FIQL=DEFAULT_LANGUAGE": "String", "DEFAULT_LANGUAGE=\"FIQL\"": "String"}, "code": ["SearchConditionBuilder", "function", "(", ")", "{", "return", "instance", "(", "DEFAULT_LANGUAGE", ")", ";", "}"], "memberFunctions": {"query": [["String"]]}, "className": "SearchConditionBuilder", "renamed": ["SearchConditionBuilder", "function", "(", ")", "{", "return", "instance", "(", "DEFAULT_LANGUAGE", ")", ";", "}"], "nl": "Creates instance of builder.", "nlToks": ["Creates", "instance", "of", "builder", "."], "path": "primesign/cxf/tree/master/rt/rs/extensions/search/src/main/java/org/apache/cxf/jaxrs/ext/search/client/SearchConditionBuilder.java", "idx": 2471}
{"memberVariables": {"ignoreExceptions=true": "boolean", "sourceCodeFile": "File", "sourceCodeFilename": "String", "languageVersion": "LanguageVersion", "attributes": "ConcurrentMap<String,Object>", "report=new Report()": "Report"}, "code": ["File", "function", "(", ")", "{", "return", "sourceCodeFile", ";", "}"], "memberFunctions": {"setSourceCodeFile": [["void", "File sourceCodeFile"]], "setLanguageVersion": [["void", "LanguageVersion languageVersion"]], "setAttribute": [["boolean", "String name", "Object value"]], "getLanguageVersion": [["LanguageVersion"]], "getAttribute": [["Object", "String name"]], "isIgnoreExceptions": [["boolean"]], "setSourceCodeFilename": [["void", "String filename"]], "setIgnoreExceptions": [["void", "boolean ignoreExceptions"]], "getReport": [["Report"]], "removeAttribute": [["Object", "String name"]], "getSourceCodeFilename": [["String"]], "setReport": [["void", "Report report"]]}, "className": "RuleContext", "renamed": ["File", "function", "(", ")", "{", "return", "sourceCodeFile", ";", "}"], "nl": "Get the File associated with the current source file.", "nlToks": ["Get", "the", "File", "associated", "with", "the", "current", "source", "file", "."], "path": "adangel/pmd/tree/master/pmd-core/src/main/java/net/sourceforge/pmd/RuleContext.java", "idx": 2472}
{"memberVariables": {"attachinfo": "DataHandler", "name": "String"}, "code": ["void", "function", "(", "DataHandler", "value", ")", "{", "this", ".", "attachinfo", "=", "value", ";", "}"], "memberFunctions": {"setName": [["void", "String value"]], "getName": [["String"]], "getAttachinfo": [["DataHandler"]]}, "className": "XopType", "renamed": ["void", "function", "(", "DataHandler", "arg0", ")", "{", "this", ".", "attachinfo", "=", "arg0", ";", "}"], "nl": "Sets the value of the attachinfo property.", "nlToks": ["Sets", "the", "value", "of", "the", "attachinfo", "property", "."], "path": "primesign/cxf/tree/master/rt/bindings/soap/src/test/java/org/apache/cxf/binding/soap/XopType.java", "idx": 2473}
{"memberVariables": {}, "code": ["void", "function", "(", "LocalAlluxioClusterResource", "localAlluxioClusterResource", ",", "AlluxioURI", "uri", ")", "{", "waitForPersist", "(", "localAlluxioClusterResource", ",", "uri", ",", "15", "*", "Constants", ".", "SECOND_MS", ")", ";", "}"], "memberFunctions": {"randomString": [["String"]], "waitForBlocksToBeFreed": [["void", "final BlockWorker bw", "final Long... blockIds"]]}, "className": "IntegrationTestUtils", "renamed": ["void", "function", "(", "LocalAlluxioClusterResource", "arg0", ",", "AlluxioURI", "arg1", ")", "{", "waitForPersist", "(", "arg0", ",", "arg1", ",", "15", "*", "Constants", ".", "SECOND_MS", ")", ";", "}"], "nl": "Convenience method for calling {@link #waitForPersist(LocalAlluxioClusterResource,AlluxioURI,int)} with a default timeout.", "nlToks": ["Convenience", "method", "for", "calling", "-LCB-", "@link", "#waitForPersist", "-LRB-", "LocalAlluxioClusterResource", ",", "AlluxioURI", ",", "int", "-RRB-", "-RCB-", "with", "a", "default", "timeout", "."], "path": "poemlin/alluxio/tree/master/tests/src/test/java/alluxio/IntegrationTestUtils.java", "idx": 2476}
{"memberVariables": {}, "code": ["void", "function", "(", ")", "{", "System", ".", "out", ".", "println", "(", "\"readFromGameFile\"", ")", ";", "String", "fileName", "=", "\"game_1_001\"", ";", "FileHandler", "instance", "=", "new", "FileHandler", "(", ")", ";", "String", "expResult", "=", "\"Game\"", ";", "String", "result", "=", "instance", ".", "readFromGameFile", "(", "fileName", ")", ".", "getNodeName", "(", ")", ";", "assertEquals", "(", "expResult", ",", "result", ")", ";", "}"], "memberFunctions": {"testReadFromEditorFileForInvalidInput": [["void"]], "setUpClass": [["void"]], "testReadFromEditorFile": [["void"]], "setUp": [["void"]], "tearDownClass": [["void"]], "tearDown": [["void"]]}, "className": "FileHandlerTest", "renamed": ["void", "function", "(", ")", "{", "System", ".", "out", ".", "println", "(", "\"srini_string\"", ")", ";", "String", "loc0", "=", "\"srini_string\"", ";", "FileHandler", "loc1", "=", "new", "FileHandler", "(", ")", ";", "String", "loc2", "=", "\"srini_string\"", ";", "String", "loc3", "=", "loc1", ".", "readFromGameFile", "(", "loc0", ")", ".", "getNodeName", "(", ")", ";", "assertEquals", "(", "loc2", ",", "loc3", ")", ";", "}"], "nl": "Test of readFromGameFile method, of class FileHandler.", "nlToks": ["Test", "of", "readFromGameFile", "method", ",", "of", "class", "FileHandler", "."], "path": "hashinisenaratne/SIFEB/tree/master/Visual Programming Editor/SiFEB_VE/test/com/sifeb/ve/handle/FileHandlerTest.java", "idx": 2477}
{"memberVariables": {"graphName": "String", "user=\"xinyu\"": "String", "ep=new Endpoint()": "Endpoint"}, "code": ["String", "function", "(", "String", "graphName", ",", "String", "sdd", ",", "String", "user", ",", "String", "commitMessage", ",", "String", "branchNameA", ",", "String", "branchNameB", ")", "{", "return", "String", ".", "format", "(", "\"USER \"%s\" %n\"", "+", "\"MESSAGE \"%s\" %n\"", "+", "\"MERGE AUTO GRAPH <%s> SDD <%s> BRANCH \"%s\" INTO \"%s\"\"", ",", "user", ",", "commitMessage", ",", "graphName", ",", "sdd", ",", "branchNameA", ",", "branchNameB", ")", ";", "}"], "memberFunctions": {"createSelectQuery": [["String", "String graphName", "String revision"]], "createCommonMergeQuery": [["String", "String graphName", "String sdd", "String user", "String commitMessage", "String branchNameA", "String branchNameB"]], "setUpBeforeClass": [["void"]], "testCommonMerge": [["void"]], "createMergeWithQuery": [["String", "String graphName", "String sdd", "String user", "String commitMessage", "String branchNameA", "String branchNameB", "String triples"]], "setUp": [["void"]], "testManualMerge": [["void"]], "testAutoMerge": [["void"]], "testCreatedGraph": [["void"]], "createManualMergeQuery": [["String", "String graphName", "String sdd", "String user", "String commitMessage", "String branchNameA", "String branchNameB", "String triples"]]}, "className": "TestThreeWayMerge", "renamed": ["String", "function", "(", "String", "arg0", ",", "String", "arg1", ",", "String", "arg2", ",", "String", "arg3", ",", "String", "arg4", ",", "String", "arg5", ")", "{", "return", "String", ".", "format", "(", "\"srini_string\"", "%", "s", "+", "\"srini_string\"", "%", "s", "+", "\"srini_string\"", "%", "s", "%", "s", ",", "arg2", ",", "arg3", ",", "arg0", ",", "arg1", ",", "arg4", ",", "arg5", ")", ";", "}"], "nl": "Create AUTO-MERGE query.", "nlToks": ["Create", "AUTO-MERGE", "query", "."], "path": "plt-tud/r43ples/tree/master/src/test/java/de/tud/plt/r43ples/test/merge/TestThreeWayMerge.java", "idx": 2478}
{"memberVariables": {"ACTIONS_TO_KILL=TRANSIENT_VAR_PREFIX + \"actions.to.kill\"": "String", "ACTIONS_TO_START=TRANSIENT_VAR_PREFIX + \"actions.to.start\"": "String", "ACTION_ID=\"action.id\"": "String", "TRANSIENT_VAR_PREFIX=\"oozie.workflow.\"": "String", "WORKFLOW_BEAN=TRANSIENT_VAR_PREFIX + \"workflow.bean\"": "String", "ACTIONS_TO_FAIL=TRANSIENT_VAR_PREFIX + \"actions.to.fail\"": "String"}, "code": ["WorkflowStore", "function", "(", "S", "store", ")", "{", "return", "null", ";", "}"], "memberFunctions": {"getInterface": [["Class<? extends Service>"]], "getStartedActions": [["List<WorkflowActionBean>", "WorkflowInstance instance"]], "getActionsToFail": [["List<String>", "WorkflowInstance instance"]], "getActionsToKill": [["List<String>", "WorkflowInstance instance"]], "getWorkflowLibWithNoDB": [["WorkflowLib"]]}, "className": "WorkflowStoreService", "renamed": ["WorkflowStore", "function", "(", "S", "arg0", ")", "{", "return", "null", ";", "}"], "nl": "Return a workflow store instance with an existing transaction.  The workflow store has to be committed and then closed to commit changes, if only close it rolls back.", "nlToks": ["Return", "a", "workflow", "store", "instance", "with", "an", "existing", "transaction", ".", "The", "workflow", "store", "has", "to", "be", "committed", "and", "then", "closed", "to", "commit", "changes", ",", "if", "only", "close", "it", "rolls", "back", "."], "path": "pingpangkuangmo/oozie/tree/master/core/src/main/java/org/apache/oozie/service/WorkflowStoreService.java", "idx": 2479}
{"memberVariables": {"PATH_JOINER=Joiner.on(\"/\")": "Joiner", "parent": "DeterministicKey", "childNumberPath": "ImmutableList<ChildNumber>", "chainCode": "byte[]", "publicAsPoint": "ECPoint", "serialVersionUID=1L": "long", "privateAsFieldElement": "BigInteger"}, "code": ["byte", "[", "]", "function", "(", ")", "{", "return", "chainCode", ";", "}"], "memberFunctions": {"getParent": [["DeterministicKey"]], "getDepth": [["int"]], "getPubPoint": [["ECPoint"]], "serializePrivB58": [["String"]], "toBase58": [["String", "byte[] ser"]], "serializePubB58": [["String"]], "serializePublic": [["byte[]"]], "getPrivKeyBytes33": [["byte[]"]], "getPubOnly": [["DeterministicKey"]], "hasPrivate": [["boolean"]], "addChecksum": [["byte[]", "byte[] input"]], "toECKey": [["ECKey"]], "serialize": [["byte[]", "boolean pub"]], "serializePrivate": [["byte[]"]], "getChildNumber": [["ChildNumber"]], "getIdentifier": [["byte[]"]], "getPath": [["String"]], "getPrivAsFieldElement": [["BigInteger"]], "getPubKeyBytes": [["byte[]"]], "toString": [["String"]], "getFingerprint": [["byte[]"]], "getChildNumberPath": [["ImmutableList<ChildNumber>"]], "getPrivKeyBytes": [["byte[]"]]}, "className": "DeterministicKey", "renamed": ["byte", "[", "]", "function", "(", ")", "{", "return", "chainCode", ";", "}"], "nl": "Returns the chain code associated with this key. See the specification to learn more about chain codes.", "nlToks": ["Returns", "the", "chain", "code", "associated", "with", "this", "key", ".", "See", "the", "specification", "to", "learn", "more", "about", "chain", "codes", "."], "path": "plncoin/plncoin-and/tree/master/plncoinj/core/src/main/java/com/google/bitcoin/crypto/DeterministicKey.java", "idx": 2482}
{"memberVariables": {"isWorkerRunning=false": "boolean", "queue=new ArrayDeque<Runnable>()": "Deque<Runnable>", "executor": "Executor", "internalLock=new Object()": "Object", "suspensions=0": "int", "log=Logger.getLogger(SerializingExecutor.class.getName())": "Logger"}, "code": ["void", "function", "(", ")", "{", "synchronized", "(", "internalLock", ")", "{", "suspensions", "++", ";", "}", "}"], "memberFunctions": {"resume": [["void"]], "executeFirst": [["void", "Runnable task"]], "startQueueWorker": [["void"]], "run": [["void"]], "workOnQueue": [["void"]], "execute": [["void", "Runnable task"]]}, "className": "SerializingExecutor", "renamed": ["void", "function", "(", ")", "{", "synchronized", "(", "internalLock", ")", "{", "suspensions", "++", ";", "}", "}"], "nl": "Suspends the running of tasks until  {@link #resume()} is called. This can be called multipletimes to increase the suspensions count and execution will not continue until  {@link #resume}has been called the same number of times as  {@code suspend} has been.Any task that has already been pulled off the queue for execution will be completed before execution is suspended.", "nlToks": ["Suspends", "the", "running", "of", "tasks", "until", "-LCB-", "@link", "#resume", "-LRB-", "-RRB-", "-RCB-", "is", "called", ".", "This", "can", "be", "called", "multipletimes", "to", "increase", "the", "suspensions", "count", "and", "execution", "will", "not", "continue", "until", "-LCB-", "@link", "#resume", "-RCB-", "has", "been", "called", "the", "same", "number", "of", "times", "as", "-LCB-", "@code", "suspend", "-RCB-", "has", "been.Any", "task", "that", "has", "already", "been", "pulled", "off", "the", "queue", "for", "execution", "will", "be", "completed", "before", "execution", "is", "suspended", "."], "path": "hazendaz/guava/tree/master/guava/src/com/google/common/util/concurrent/SerializingExecutor.java", "idx": 2483}
{"memberVariables": {}, "code": ["Verb", "function", "(", ")", "{", "return", "Verb", ".", "POST", ";", "}"], "memberFunctions": {"getTimestampService": [["TimestampService"]], "getAccessTokenExtractor": [["AccessTokenExtractor"]], "getAccessTokenEndpoint": [["String"]], "createService": [["OAuthService", "OAuthConfig config"]], "getAuthorizationUrl": [["String", "Token requestToken"]], "getSignatureService": [["SignatureService"]], "getBaseStringExtractor": [["BaseStringExtractor"]], "getAccessTokenVerb": [["Verb"]], "getRequestTokenEndpoint": [["String"]], "getRequestTokenExtractor": [["RequestTokenExtractor"]], "getHeaderExtractor": [["HeaderExtractor"]]}, "className": "DefaultApi10a", "renamed": ["Verb", "function", "(", ")", "{", "return", "Verb", ".", "POST", ";", "}"], "nl": "Returns the verb for the request token endpoint (defaults to POST)", "nlToks": ["Returns", "the", "verb", "for", "the", "request", "token", "endpoint", "-LRB-", "defaults", "to", "POST", "-RRB-"], "path": "pnsantos/scribe-java/tree/master/src/main/java/org/scribe/builder/api/DefaultApi10a.java", "idx": 2485}
{"memberVariables": {}, "code": ["UnderFileSystem", "function", "(", ")", "{", "return", "mockUnderFileSystem", "(", "Mockito", ".", "anyString", "(", ")", ")", ";", "}"], "memberFunctions": {}, "className": "ClientMockUtils", "renamed": ["UnderFileSystem", "function", "(", ")", "{", "return", "mockUnderFileSystem", "(", "Mockito", ".", "anyString", "(", ")", ")", ";", "}"], "nl": "Convenience method for mocking the  {@link UnderFileSystem} for any ufsPath.", "nlToks": ["Convenience", "method", "for", "mocking", "the", "-LCB-", "@link", "UnderFileSystem", "-RCB-", "for", "any", "ufsPath", "."], "path": "poemlin/alluxio/tree/master/core/client/src/test/java/alluxio/client/util/ClientMockUtils.java", "idx": 2486}
{"memberVariables": {"addressHeader": "int", "INTERVAL=TARGET_TIMESPAN / TARGET_SPACING": "int", "alertSigningKey": "byte[]", "acceptableAddressCodes": "int[]", "packetMagic": "long", "p2shHeader": "int", "paramSet=Collections.synchronizedList(new ArrayList<NetworkParameters>())": "List<NetworkParameters>", "PROTOCOL_VERSION=70001": "int", "genesisBlock": "Block", "proofOfWorkLimit": "BigInteger", "subsidyDecreaseBlockCount": "int", "port": "int", "MAX_MONEY=new BigInteger(\"21000000\",10).multiply(COIN)": "BigInteger", "TARGET_SPACING=10 * 60": "int", "dnsSeeds": "String[]", "checkpoints=new HashMap<Integer,Sha256Hash>()": "Map<Integer,Sha256Hash>", "SATOSHI_KEY=Hex.decode(\"04fc9702847840aaf195de8442ebecedf5b095cdbb9bc716bda9110971b28a49e0ead8564ff0db22209e0374782c093bb899692d524e9d6a6956e7c5ecbcd68284\")": "byte[]", "interval": "int", "id": "String", "spendableCoinbaseDepth": "int", "dumpedPrivateKeyHeader": "int", "targetTimespan": "int", "TARGET_TIMESPAN=14 * 24 * 60* 60": "int", "BIP16_ENFORCE_TIME=1333238400": "int"}, "code": ["int", "function", "(", "StoredBlock", "cursor", ")", "{", "return", "getInterval", "(", ")", "-", "1", ";", "}"], "memberFunctions": {"regTests": [["NetworkParameters"]], "allowEmptyPeerChain": [["boolean"]], "getDumpedPrivateKeyHeader": [["int"]], "testNet2": [["NetworkParameters"]], "testNet3": [["NetworkParameters"]], "unitTests": [["NetworkParameters"]], "getId": [["String"]], "getAddressHeader": [["int"]], "getAcceptableAddressCodes": [["int[]"]], "prodNet": [["NetworkParameters"]], "fromID": [["NetworkParameters", "String id"]], "getTargetTimespan": [["int"]], "getDnsSeeds": [["String[]"]], "hashCode": [["int"]], "getSpendableCoinbaseDepth": [["int"]], "testNet": [["NetworkParameters"]], "calculateBlockPoWHash": [["Sha256Hash", "Block b"]], "getMaxMoney": [["BigInteger"]], "getParamsFromAddressByte": [["NetworkParameters", "int version"]], "registerParams": [["void", "NetworkParameters params"]], "isCheckpoint": [["boolean", "int height"]], "getP2SHHeader": [["int"]], "getInterval": [["int"]], "getGenesisBlock": [["Block"]], "getSubsidyDecreaseBlockCount": [["int"]], "createGenesis": [["Block", "NetworkParameters n"]], "getPacketMagic": [["long"]], "getPort": [["int"]], "getAlertSigningKey": [["byte[]"]], "equals": [["boolean", "Object other"]], "passesCheckpoint": [["boolean", "int height", "Sha256Hash hash"]], "isAcceptableAddressVersion": [["boolean", "int version"]], "getURIScheme": [["String"]], "getProofOfWorkLimit": [["BigInteger"]]}, "className": "NetworkParameters", "renamed": ["int", "function", "(", "StoredBlock", "arg0", ")", "{", "return", "getInterval", "(", ")", "-", "1", ";", "}"], "nl": "The number of previous blocks to look at when calculating the next Block's difficulty Uses a storedblock cursor as input rather than just returning a constant value", "nlToks": ["The", "number", "of", "previous", "blocks", "to", "look", "at", "when", "calculating", "the", "next", "Block", "'s", "difficulty", "Uses", "a", "storedblock", "cursor", "as", "input", "rather", "than", "just", "returning", "a", "constant", "value"], "path": "plncoin/plncoin-and/tree/master/plncoinj/core/src/main/java/com/google/bitcoin/core/NetworkParameters.java", "idx": 2487}
{"memberVariables": {"dbuf": "ByteBuffer", "BUFFER_SIZE_LOWER_BOUND=4096": "int", "socket": "Socket", "log=LoggerFactory.getLogger(BlockingClient.class)": "org.slf4j.Logger", "BUFFER_SIZE_UPPER_BOUND=65536": "int", "vCloseRequested=false": "boolean"}, "code": ["void", "function", "(", ")", "{", "try", "{", "vCloseRequested", "=", "true", ";", "socket", ".", "close", "(", ")", ";", "}", "catch", "(", "IOException", "e", ")", "{", "throw", "new", "RuntimeException", "(", "e", ")", ";", "}", "}"], "memberFunctions": {"writeBytes": [["void", "byte[] message"]]}, "className": "BlockingClient", "renamed": ["void", "function", "(", ")", "{", "try", "{", "vCloseRequested", "=", "true", ";", "socket", ".", "close", "(", ")", ";", "}", "catch", "(", "IOException", "loc0", ")", "{", "throw", "new", "RuntimeException", "(", "loc0", ")", ";", "}", "}"], "nl": "Closes the connection to the server, triggering the  {@link StreamParser#connectionClosed()}event on the network-handling thread where all callbacks occur.", "nlToks": ["Closes", "the", "connection", "to", "the", "server", ",", "triggering", "the", "-LCB-", "@link", "StreamParser", "#connectionClosed", "-LRB-", "-RRB-", "-RCB-", "event", "on", "the", "network-handling", "thread", "where", "all", "callbacks", "occur", "."], "path": "1000000000001/bitcoinj/tree/master/core/src/main/java/org/bitcoinj/net/BlockingClient.java", "idx": 2488}
{"memberVariables": {"mKeyCount": "int", "BUCKET_SIZE_BYTES=Constants.BYTES_IN_INTEGER + 1": "int", "mBuf": "ByteBuffer", "INDEX_HASHER_SEED=0x1311": "int", "FINGERPRINT_HASHER_SEED=0x7a91": "int", "FINGERPRINT_HASHER=Hashing.murmur3_32(FINGERPRINT_HASHER_SEED)": "HashFunction", "INDEX_HASHER=Hashing.murmur3_32(INDEX_HASHER_SEED)": "HashFunction", "mHashTableBuf": "ByteBuffer", "MAX_PROBES=50": "int", "mNumBuckets": "int"}, "code": ["byte", "function", "(", "byte", "[", "]", "key", ")", "{", "int", "hash", "=", "FINGERPRINT_HASHER", ".", "hashBytes", "(", "key", ")", ".", "asInt", "(", ")", ";", "hash", "=", "(", "hash", ">>", "24", ")", "&", "0xff", ";", "return", "(", "byte", ")", "(", "(", "hash", "==", "0", ")", "?", "1", ":", "hash", ")", ";", "}"], "memberFunctions": {"keyCount": [["int"]], "keyIterator": [["Iterator<ByteBuffer>", "final PayloadReader reader"]], "bucketOffset": [["int", "ByteBuffer key", "PayloadReader reader"]], "createEmptyIndex": [["LinearProbingIndex"]], "loadFromByteArray": [["LinearProbingIndex", "ByteBuffer buffer"]], "byteCount": [["int"]], "get": [["ByteBuffer", "ByteBuffer key", "PayloadReader reader"]], "indexHash": [["int", "byte[] key"], ["int", "ByteBuffer key"]], "nextKey": [["ByteBuffer", "ByteBuffer currentKey", "PayloadReader reader"]], "put": [["boolean", "byte[] key", "byte[] value", "PayloadWriter writer"]], "getBytes": [["byte[]"]]}, "className": "LinearProbingIndex", "renamed": ["byte", "function", "(", "byte", "[", "]", "arg0", ")", "{", "int", "loc0", "=", "FINGERPRINT_HASHER", ".", "hashBytes", "(", "arg0", ")", ".", "asInt", "(", ")", ";", "loc0", "=", "(", "loc0", ">>", "24", ")", "&", "0xff", ";", "return", "(", "byte", ")", "(", "(", "loc0", "==", "0", ")", "?", "1", ":", "loc0", ")", ";", "}"], "nl": "Hashes a key in byte array into a non-zero, one byte fingerprint.", "nlToks": ["Hashes", "a", "key", "in", "byte", "array", "into", "a", "non-zero", ",", "one", "byte", "fingerprint", "."], "path": "poemlin/alluxio/tree/master/keyvalue/client/src/main/java/alluxio/client/keyvalue/LinearProbingIndex.java", "idx": 2490}
{"memberVariables": {"settings": "IStoredSettings", "serverStatus": "ServerStatus", "logger=LoggerFactory.getLogger(getClass())": "Logger", "baseFolder": "File", "timezone": "TimeZone", "settingsModel": "ServerSettings"}, "code": ["File", "function", "(", "String", "fileOrFolder", ")", "{", "return", "com", ".", "gitblit", ".", "utils", ".", "FileUtils", ".", "resolveParameter", "(", "Constants", ".", "baseFolder$", ",", "baseFolder", ",", "fileOrFolder", ")", ";", "}"], "memberFunctions": {"isServingRepositories": [["boolean"]], "isDebugMode": [["boolean"]], "getSettings": [["IStoredSettings"]], "start": [["RuntimeManager"]], "logTimezone": [["void", "String type", "TimeZone zone"]], "updateSettings": [["boolean", "Map<String,String> updatedSettings"]], "getStatus": [["ServerStatus"]], "getSettingsModel": [["ServerSettings"]], "setBaseFolder": [["void", "File folder"]], "stop": [["RuntimeManager"]], "getTimezone": [["TimeZone"]], "getBootDate": [["Date"]], "getBaseFolder": [["File"]]}, "className": "RuntimeManager", "renamed": ["File", "function", "(", "String", "arg0", ")", "{", "return", "com", ".", "gitblit", ".", "utils", ".", "FileUtils", ".", "resolveParameter", "(", "Constants", ".", "baseFolder$", ",", "baseFolder", ",", "arg0", ")", ";", "}"], "nl": "Returns the file object which may have it's base-path determined by environment variables for running on a cloud hosting service. All Gitblit file or folder retrievals are (at least initially) funneled through this method so it is the correct point to globally override/alter filesystem access based on environment or some other indicator.", "nlToks": ["Returns", "the", "file", "object", "which", "may", "have", "it", "'s", "base-path", "determined", "by", "environment", "variables", "for", "running", "on", "a", "cloud", "hosting", "service", ".", "All", "Gitblit", "file", "or", "folder", "retrievals", "are", "-LRB-", "at", "least", "initially", "-RRB-", "funneled", "through", "this", "method", "so", "it", "is", "the", "correct", "point", "to", "globally", "override/alter", "filesystem", "access", "based", "on", "environment", "or", "some", "other", "indicator", "."], "path": "pombreda/gitblit/tree/master/src/main/java/com/gitblit/manager/RuntimeManager.java", "idx": 2492}
{"memberVariables": {"QR": "BlockMatrix64F", "decomp=new QRDecompositionHouseholder_B64()": "QRDecompositionHouseholder_B64"}, "code": ["double", "function", "(", ")", "{", "return", "SpecializedOps", ".", "qualityTriangular", "(", "true", ",", "decomp", ".", "getQR", "(", ")", ")", ";", "}"], "memberFunctions": {"invert": [["void", "BlockMatrix64F A_inv"]], "solve": [["void", "BlockMatrix64F B", "BlockMatrix64F X"]], "modifiesA": [["boolean"]], "setA": [["boolean", "BlockMatrix64F A"]], "modifiesB": [["boolean"]]}, "className": "BlockQrHouseHolderSolver", "renamed": ["double", "function", "(", ")", "{", "return", "SpecializedOps", ".", "qualityTriangular", "(", "true", ",", "decomp", ".", "getQR", "(", ")", ")", ";", "}"], "nl": "Computes the quality using diagonal elements the triangular R matrix in the QR decomposition.", "nlToks": ["Computes", "the", "quality", "using", "diagonal", "elements", "the", "triangular", "R", "matrix", "in", "the", "QR", "decomposition", "."], "path": "adamaulia/efficient-java-matrix-library/tree/master/src/org/ejml/alg/block/linsol/qr/BlockQrHouseHolderSolver.java", "idx": 2494}
{"memberVariables": {"DIR_NAME=\"USBCameraTest\"": "String", "mOutputPath": "String", "mMediaMuxer": "MediaMuxer", "mStatredCount": "int", "DEBUG=true": "boolean", "TAG=\"MediaMuxerWrapper\"": "String", "mDateTimeFormat=new SimpleDateFormat(\"yyyy-MM-dd-HH-mm-ss\",Locale.US)": "SimpleDateFormat", "mIsStarted": "boolean", "mEncoderCount": "int", "mAudioEncoder": "MediaEncoder", "mVideoEncoder": "MediaEncoder"}, "code": ["void", "function", "(", "final", "int", "trackIndex", ",", "final", "ByteBuffer", "byteBuf", ",", "final", "MediaCodec", ".", "BufferInfo", "bufferInfo", ")", "{", "if", "(", "mStatredCount", ">", "0", ")", "mMediaMuxer", ".", "writeSampleData", "(", "trackIndex", ",", "byteBuf", ",", "bufferInfo", ")", ";", "}"], "memberFunctions": {"addTrack": [["int", "final MediaFormat format"]], "prepare": [["void"]], "getDateTimeString": [["String"]], "stop": [["void"]], "addEncoder": [["void", "final MediaEncoder encoder"]], "startRecording": [["void"]], "start": [["boolean"]], "getCaptureFile": [["File", "final String type", "final String ext"]], "isStarted": [["boolean"]], "getOutputPath": [["String"]], "stopRecording": [["void"]]}, "className": "MediaMuxerWrapper", "renamed": ["void", "function", "(", "final", "int", "arg0", ",", "final", "ByteBuffer", "arg1", ",", "final", "MediaCodec", ".", "BufferInfo", "arg2", ")", "{", "if", "(", "mStatredCount", ">", "0", ")", "mMediaMuxer", ".", "writeSampleData", "(", "arg0", ",", "arg1", ",", "arg2", ")", ";", "}"], "nl": "write encoded data to muxer", "nlToks": ["write", "encoded", "data", "to", "muxer"], "path": "princeofdream/USBCamera/tree/master/usbCameraCommon/src/main/java/com/serenegiant/encoder/MediaMuxerWrapper.java", "idx": 2498}
{"memberVariables": {}, "code": ["FilenameFilter", "function", "(", "final", "Filter", "<", "File", ">", "filter", ")", "{", "return", "new", "FilenameFilter", "(", ")", "{", "@", "Override", "public", "boolean", "accept", "(", "File", "dir", ",", "String", "name", ")", "{", "return", "filter", ".", "filter", "(", "new", "File", "(", "dir", ",", "name", ")", ")", ";", "}", "@", "Override", "public", "String", "toString", "(", ")", "{", "return", "filter", ".", "toString", "(", ")", ";", "}", "}", ";", "}"], "memberFunctions": {"filter": [["List<T>", "Filter<T> filter", "Collection<T> collection"]], "buildRegexFilterExcludeOverInclude": [["Filter<String>", "List<String> includeRegexes", "List<String> excludeRegexes"]], "buildRegexFilterIncludeOverExclude": [["Filter<String>", "List<String> includeRegexes", "List<String> excludeRegexes"]], "getDirectoryFilter": [["Filter<File>"]], "getFileExtensionFilter": [["Filter<File>", "String... extensions"]], "fromStringFilter": [["Filter<T>", "final Filter<String> filter"]], "getFileExtensionOrDirectoryFilter": [["Filter<File>", "String... extensions"]], "toNormalizedFileFilter": [["Filter<File>", "final Filter<String> filter"]], "toFileFilter": [["Filter<File>", "final FilenameFilter filter"]]}, "className": "Filters", "renamed": ["FilenameFilter", "function", "(", "final", "Filter", "<", "File", ">", "arg0", ")", "{", "return", "new", "FilenameFilter", "(", ")", "{", "@", "Override", "public", "boolean", "accept", "(", "File", "arg1", ",", "String", "arg2", ")", "{", "return", "arg0", ".", "arg0", "(", "new", "File", "(", "arg1", ",", "arg2", ")", ")", ";", "}", "@", "Override", "public", "String", "toString", "(", ")", "{", "return", "arg0", ".", "toString", "(", ")", ";", "}", "}", ";", "}"], "nl": "Given a File Filter, expose as a FilenameFilter.", "nlToks": ["Given", "a", "File", "Filter", ",", "expose", "as", "a", "FilenameFilter", "."], "path": "adangel/pmd/tree/master/pmd-core/src/main/java/net/sourceforge/pmd/util/filter/Filters.java", "idx": 2499}
{"memberVariables": {"localName": "String", "namespaceUri": "String"}, "code": ["QualifiedName", "function", "(", "String", "value", ")", "{", "return", "valueOf", "(", "value", ",", "XMLUnit", ".", "getXpathNamespaceContext", "(", ")", ")", ";", "}"], "memberFunctions": {"getLocalName": [["String"]], "hashCode": [["int"]], "equals": [["boolean", "Object o"]], "getNamespaceURI": [["String"]], "toString": [["String"]], "parseQNameToString": [["QualifiedName", "String value", "int closingBrace"]], "parsePrefixFormat": [["QualifiedName", "String value", "int colon", "NamespaceContext ctx"]]}, "className": "QualifiedName", "renamed": ["QualifiedName", "function", "(", "String", "arg0", ")", "{", "return", "valueOf", "(", "arg0", ",", "XMLUnit", ".", "getXpathNamespaceContext", "(", ")", ")", ";", "}"], "nl": "Parses strings of the form \"{NS-URI}LOCAL-NAME\" or \"prefix:localName\" as QualifiedNames. When using the prefix-version the prefix must be defined inside the current NamespaceContext.", "nlToks": ["Parses", "strings", "of", "the", "form", "''", "-LCB-", "NS-URI", "-RCB-", "LOCAL-NAME", "''", "or", "``", "prefix", ":", "localName", "''", "as", "QualifiedNames", ".", "When", "using", "the", "prefix-version", "the", "prefix", "must", "be", "defined", "inside", "the", "current", "NamespaceContext", "."], "path": "phbenisc/xmlunit/tree/master/xmlunit-legacy/src/main/java/org/custommonkey/xmlunit/QualifiedName.java", "idx": 2501}
{"memberVariables": {}, "code": ["String", "function", "(", "Attribute", "attribute", ")", "{", "return", "'|''", "+", "attribute", ".", "getStringValue", "(", ")", "+", "'|''", ";", "}"], "memberFunctions": {"constructPredicate": [["String", "Attribute attribute"]]}, "className": "AttributeToolkit", "renamed": ["String", "function", "(", "Attribute", "arg0", ")", "{", "}"], "nl": "formats a value for its usage in XPath expressions", "nlToks": ["formats", "a", "value", "for", "its", "usage", "in", "XPath", "expressions"], "path": "adangel/pmd/tree/master/pmd-core/src/main/java/net/sourceforge/pmd/util/viewer/model/AttributeToolkit.java", "idx": 2502}
{"memberVariables": {"tx": "Transaction", "ti": "TableInfo", "nextblknum": "int", "lhsscan": "Scan", "chunksize": "int", "filesize": "int", "prodscan": "Scan", "rhsscan=null": "Scan"}, "code": ["int", "function", "(", "String", "fldname", ")", "{", "return", "prodscan", ".", "getInt", "(", "fldname", ")", ";", "}"], "memberFunctions": {"next": [["boolean"]], "getVal": [["Constant", "String fldname"]], "useNextChunk": [["boolean"]], "beforeFirst": [["void"]], "getString": [["String", "String fldname"]], "close": [["void"]], "hasField": [["boolean", "String fldname"]]}, "className": "MultiBufferProductScan", "renamed": ["int", "function", "(", "String", "arg0", ")", "{", "return", "prodscan", ".", "getInt", "(", "arg0", ")", ";", "}"], "nl": "Returns the integer value of the specified field. The value is obtained from whichever scan contains the field.", "nlToks": ["Returns", "the", "integer", "value", "of", "the", "specified", "field", ".", "The", "value", "is", "obtained", "from", "whichever", "scan", "contains", "the", "field", "."], "path": "prerit2803/DBMSProject2/tree/master/simpledb/multibuffer/MultiBufferProductScan.java", "idx": 2503}
{"memberVariables": {"headers": "Map<String,String>", "charset": "String", "verb": "Verb", "bodyParams": "ParameterList", "url": "String", "bytePayload=null": "byte[]", "readTimeout=null": "Long", "querystringParams": "ParameterList", "connectionKeepAlive=false": "boolean", "connectTimeout=null": "Long", "CONTENT_LENGTH=\"Content-Length\"": "String", "CONTENT_TYPE=\"Content-Type\"": "String", "connection": "HttpURLConnection", "payload=null": "String", "DEFAULT_CONTENT_TYPE=\"application/x-www-form-urlencoded\"": "String"}, "code": ["String", "function", "(", ")", "{", "return", "url", ";", "}"], "memberFunctions": {"addHeaders": [["void", "HttpURLConnection conn"]], "setCharset": [["void", "String charsetName"]], "getSanitizedUrl": [["String"]], "addBody": [["void", "HttpURLConnection conn", "byte[] content"]], "addHeader": [["void", "String key", "String value"]], "setConnectionKeepAlive": [["void", "boolean connectionKeepAlive"]], "setConnectTimeout": [["void", "int duration", "TimeUnit unit"]], "getByteBodyContents": [["byte[]"]], "getHeaders": [["Map<String,String>"]], "getQueryStringParams": [["ParameterList"]], "setConnection": [["void", "HttpURLConnection connection"]], "createConnection": [["void"]], "getCharset": [["String"]], "addBodyParameter": [["void", "String key", "String value"]], "setReadTimeout": [["void", "int duration", "TimeUnit unit"]], "getCompleteUrl": [["String"]], "getVerb": [["Verb"]], "addPayload": [["void", "String payload"], ["void", "byte[] payload"]], "addQuerystringParameter": [["void", "String key", "String value"]], "toString": [["String"]], "doSend": [["Response"]], "send": [["Response"]], "getBodyContents": [["String"]], "getBodyParams": [["ParameterList"]]}, "className": "Request", "renamed": ["String", "function", "(", ")", "{", "return", "url", ";", "}"], "nl": "Obtains the URL of the HTTP Request.", "nlToks": ["Obtains", "the", "URL", "of", "the", "HTTP", "Request", "."], "path": "pnsantos/scribe-java/tree/master/src/main/java/org/scribe/model/Request.java", "idx": 2504}
{"memberVariables": {"passiveAuth": "boolean", "requestQueryParams=new HashMap<String,String[]>()": "Map<String,String[]>", "serialVersionUID=8131978212432223682L": "long", "commonAuthCallerPath": "String", "forceAuth": "boolean", "type": "String", "requestHeaders=new HashMap<String,String>()": "Map<String,String>", "tenantDomain": "String", "isPost": "boolean", "relyingParty": "String"}, "code": ["void", "function", "(", "String", "relyingParty", ")", "{", "this", ".", "relyingParty", "=", "relyingParty", ";", "}"], "memberFunctions": {"addHeader": [["void", "String key", "String values"]], "getRelyingParty": [["String"]], "getForceAuth": [["boolean"]], "getCommonAuthCallerPath": [["String"]], "getRequestQueryParams": [["Map<String,String[]>"]], "addRequestQueryParam": [["void", "String key", "String[] value"]], "setPost": [["void", "boolean post"]], "setType": [["void", "String type"]], "isPost": [["boolean"]], "setTenantDomain": [["void", "String tenantDomain"]], "appendRequestQueryParams": [["void", "Map<String,String[]> map"]], "getPassiveAuth": [["boolean"]], "getRequestHeaders": [["Map<String,String>"]], "getTenantDomain": [["String"]], "getRequestQueryParam": [["String[]", "String key"]], "getType": [["String"]], "setPassiveAuth": [["void", "boolean passiveAuth"]], "setCommonAuthCallerPath": [["void", "String commonAuthCallerPath"]], "setForceAuth": [["void", "boolean forceAuth"]], "setRequestQueryParams": [["void", "Map<String,String[]> requestQueryParams"]]}, "className": "AuthenticationRequest", "renamed": ["void", "function", "(", "String", "arg0", ")", "{", "this", ".", "relyingParty", "=", "arg0", ";", "}"], "nl": "Set the relying party of the authentication request", "nlToks": ["Set", "the", "relying", "party", "of", "the", "authentication", "request"], "path": "harsha1979/carbon-identity/tree/master/components/authentication-framework/org.wso2.carbon.identity.application.authentication.framework/src/main/java/org/wso2/carbon/identity/application/authentication/framework/model/AuthenticationRequest.java", "idx": 2505}
{"memberVariables": {"variableName": "String", "objectCounter=0": "int", "jsObject": "JSObject", "runtime": "IJavascriptRuntime", "peerRegistry=new WeakHashMap<>()": "Map<JSObject,JavascriptObject>"}, "code": ["T", "function", "(", "String", "key", ",", "Class", "<", "T", ">", "type", ")", "{", "Object", "returnValue", "=", "getProperty", "(", "key", ")", ";", "if", "(", "returnValue", "!=", "null", ")", "{", "return", "(", "T", ")", "returnValue", ";", "}", "else", "{", "return", "null", ";", "}", "}"], "memberFunctions": {"checkInteger": [["Integer", "Object val", "Integer def"]], "checkUndefined": [["Object", "Object val"]], "invokeJavascript": [["Object", "String function"], ["Object", "String function", "Object... args"]], "invokeJavascriptReturnValue": [["T", "String function", "Class<T> returnType"], ["T", "String function", "Class<T> returnType", "Object... args"]], "setProperty": [["void", "String propertyName", "Object propertyValue"], ["void", "String propertyName", "JavascriptObject propertyValue"], ["void", "String propertyName", "JavascriptEnum propertyValue"]], "isMemberDefined": [["boolean", "String member"]], "getNextVariableName": [["String"]], "getVariableName": [["String"]], "checkBoolean": [["Boolean", "Object val", "Boolean def"]], "getJSObject": [["JSObject"]]}, "className": "JavascriptObject", "renamed": ["T", "function", "(", "String", "arg0", ",", "Class", "<", "T", ">", "arg1", ")", "{", "Object", "loc0", "=", "getProperty", "(", "arg0", ")", ";", "if", "(", "loc0", "!=", "null", ")", "{", "return", "(", "T", ")", "loc0", ";", "}", "else", "{", "return", "null", ";", "}", "}"], "nl": "Gets the property and casts to the appropriate type", "nlToks": ["Gets", "the", "property", "and", "casts", "to", "the", "appropriate", "type"], "path": "presly808/GMapsFx/tree/master/src/main/java/com/lynden/gmapsfx/javascript/JavascriptObject.java", "idx": 2507}
{"memberVariables": {"INTERVAL=TARGET_TIMESPAN / TARGET_SPACING": "int", "ID_UNITTESTNET=\"org.bitcoinj.unittest\"": "String", "MAX_COINS=21000000": "long", "p2shHeader": "int", "PROTOCOL_VERSION=70001": "int", "maxTarget": "BigInteger", "TARGET_SPACING=10 * 60": "int", "dnsSeeds": "String[]", "id": "String", "spendableCoinbaseDepth": "int", "dumpedPrivateKeyHeader": "int", "targetTimespan": "int", "TARGET_TIMESPAN=14 * 24 * 60* 60": "int", "PAYMENT_PROTOCOL_ID_MAINNET=\"main\"": "String", "addressHeader": "int", "MAX_MONEY=COIN.multiply(MAX_COINS)": "Coin", "bip32HeaderPriv": "int", "alertSigningKey": "byte[]", "acceptableAddressCodes": "int[]", "bip32HeaderPub": "int", "ID_MAINNET=\"org.bitcoin.production\"": "String", "packetMagic": "long", "SATOSHI_KEY=Utils.HEX.decode(\"04fc9702847840aaf195de8442ebecedf5b095cdbb9bc716bda9110971b28a49e0ead8564ff0db22209e0374782c093bb899692d524e9d6a6956e7c5ecbcd68284\")": "byte[]", "genesisBlock": "Block", "PAYMENT_PROTOCOL_ID_TESTNET=\"test\"": "String", "subsidyDecreaseBlockCount": "int", "port": "int", "ID_TESTNET=\"org.bitcoin.test\"": "String", "checkpoints=new HashMap<Integer,Sha256Hash>()": "Map<Integer,Sha256Hash>", "interval": "int", "ID_REGTEST=\"org.bitcoin.regtest\"": "String", "BIP16_ENFORCE_TIME=1333238400": "int"}, "code": ["String", "[", "]", "function", "(", ")", "{", "return", "dnsSeeds", ";", "}"], "memberFunctions": {"regTests": [["NetworkParameters"]], "allowEmptyPeerChain": [["boolean"]], "getDumpedPrivateKeyHeader": [["int"]], "testNet2": [["NetworkParameters"]], "getBip32HeaderPub": [["int"]], "getBip32HeaderPriv": [["int"]], "testNet3": [["NetworkParameters"]], "unitTests": [["NetworkParameters"]], "getId": [["String"]], "getPaymentProtocolId": [["String"]], "getAddressHeader": [["int"]], "getAcceptableAddressCodes": [["int[]"]], "prodNet": [["NetworkParameters"]], "fromID": [["NetworkParameters", "String id"]], "getTargetTimespan": [["int"]], "hashCode": [["int"]], "getSpendableCoinbaseDepth": [["int"]], "testNet": [["NetworkParameters"]], "isCheckpoint": [["boolean", "int height"]], "getP2SHHeader": [["int"]], "getInterval": [["int"]], "getGenesisBlock": [["Block"]], "getSubsidyDecreaseBlockCount": [["int"]], "createGenesis": [["Block", "NetworkParameters n"]], "getMaxTarget": [["BigInteger"]], "getPacketMagic": [["long"]], "getPort": [["int"]], "getAlertSigningKey": [["byte[]"]], "equals": [["boolean", "Object o"]], "passesCheckpoint": [["boolean", "int height", "Sha256Hash hash"]], "fromPmtProtocolID": [["NetworkParameters", "String pmtProtocolId"]]}, "className": "NetworkParameters", "renamed": ["String", "[", "]", "function", "(", ")", "{", "return", "dnsSeeds", ";", "}"], "nl": "Returns DNS names that when resolved, give IP addresses of active peers.", "nlToks": ["Returns", "DNS", "names", "that", "when", "resolved", ",", "give", "IP", "addresses", "of", "active", "peers", "."], "path": "1000000000001/bitcoinj/tree/master/core/src/main/java/org/bitcoinj/core/NetworkParameters.java", "idx": 2508}
{"memberVariables": {"sequenceNumber=1": "int", "LOG=LoggerFactory.getLogger(SipHeaderFactoryImpl.class)": "Logger"}, "code": ["Map", "<", "String", ",", "String", ">", "function", "(", "final", "String", "name", ",", "final", "String", "value", ")", "{", "final", "Map", "<", "String", ",", "String", ">", "params", "=", "new", "HashMap", "<", "String", ",", "String", ">", "(", ")", ";", "params", ".", "put", "(", "name", ",", "value", ")", ";", "return", "params", ";", "}"], "memberFunctions": {"createHeader": [["SipHeader", "final String name", "final String value"]], "createBranchId": [["String"]], "createExpires": [["SipHeader", "final int millis"]], "createCallIdValue": [["String"]], "createCSeq": [["SipHeader", "final String method"]], "createSupported": [["SipHeader"]], "createCSeqValue": [["String", "final String method"]], "createFrom": [["SipHeader", "final String displayName", "final URI sipUri"]], "createTo": [["SipHeader", "final URI sipUri"], ["SipHeader", "final SipHeader originalTo"]], "createContentLength": [["SipHeader", "final int contentLength"]], "createSentByVia": [["SipHeader", "final InetAddress address"]], "createMaxForwards": [["SipHeader", "final int maxForwards"]], "createContact": [["SipHeader", "final URI contactUri", "final UUID instanceId"]], "createCallId": [["SipHeader"]], "createHeaderValues": [["List<SipHeaderValue>", "final String headerValueString"]], "createTagValue": [["String"]]}, "className": "SipHeaderFactoryImpl", "renamed": ["Map", "<", "String", ",", "String", ">", "function", "(", "final", "String", "arg0", ",", "final", "String", "arg1", ")", "{", "final", "Map", "<", "String", ",", "String", ">", "loc0", "=", "new", "HashMap", "<", "String", ",", "String", ">", "(", ")", ";", "loc0", ".", "put", "(", "arg0", ",", "arg1", ")", ";", "return", "loc0", ";", "}"], "nl": "Generates the parameters map.  This is the complete parameters for the common case where a header only has a single parameter.  Otherwise, calling methods can add additional parameters to the map.", "nlToks": ["Generates", "the", "parameters", "map", ".", "This", "is", "the", "complete", "parameters", "for", "the", "common", "case", "where", "a", "header", "only", "has", "a", "single", "parameter", ".", "Otherwise", ",", "calling", "methods", "can", "add", "additional", "parameters", "to", "the", "map", "."], "path": "adamfisk/littleshoot-client/tree/master/common/sip/stack/src/main/java/org/lastbamboo/common/sip/stack/message/header/SipHeaderFactoryImpl.java", "idx": 2509}
{"memberVariables": {"mInodeTree": "InodeTree", "mPermissionCheckEnabled": "boolean", "mFileSystemSuperGroup": "String"}, "code": ["void", "function", "(", "LockedInodePath", "inodePath", ")", "{", "List", "<", "Inode", "<", "?", ">>", "inodeList", "=", "inodePath", ".", "getInodeList", "(", ")", ";", "String", "user", "=", "getClientUser", "(", ")", ";", "List", "<", "String", ">", "groups", "=", "getGroups", "(", "user", ")", ";", "if", "(", "isPrivilegedUser", "(", "user", ",", "groups", ")", ")", "{", "return", ";", "}", "checkInodeList", "(", "user", ",", "groups", ",", "null", ",", "inodePath", ".", "getUri", "(", ")", ".", "getPath", "(", ")", ",", "inodeList", ",", "true", ")", ";", "}"], "memberFunctions": {"checkPermission": [["void", "Mode.Bits bits", "LockedInodePath inodePath"]], "checkInode": [["void", "String user", "List<String> groups", "Inode inode", "Mode.Bits bits", "String path"]], "checkSetAttributePermission": [["void", "LockedInodePath inodePath", "boolean superuserRequired", "boolean ownerRequired"]], "checkParentPermission": [["void", "Mode.Bits bits", "LockedInodePath inodePath"]], "isPrivilegedUser": [["boolean", "String user", "List<String> groups"]], "checkInodeList": [["void", "String user", "List<String> groups", "Mode.Bits bits", "String path", "List<Inode<?>> inodeList", "boolean checkIsOwner"]], "checkSuperUser": [["void"]], "getClientUser": [["String"]], "getGroups": [["List<String>", "String user"]], "toExceptionMessage": [["String", "String user", "Mode.Bits bits", "String path", "Inode inode"]]}, "className": "PermissionChecker", "renamed": ["void", "function", "(", "LockedInodePath", "arg0", ")", "{", "List", "<", "Inode", "<", "?", ">>", "loc0", "=", "arg0", ".", "getInodeList", "(", ")", ";", "String", "loc1", "=", "getClientUser", "(", ")", ";", "List", "<", "String", ">", "loc2", "=", "getGroups", "(", "loc1", ")", ";", "if", "(", "isPrivilegedUser", "(", "loc1", ",", "loc2", ")", ")", "{", "return", ";", "}", "checkInodeList", "(", "loc1", ",", "loc2", ",", "null", ",", "arg0", ".", "getUri", "(", ")", ".", "getPath", "(", ")", ",", "loc0", ",", "true", ")", ";", "}"], "nl": "Checks whether the client user is the owner of the path.", "nlToks": ["Checks", "whether", "the", "client", "user", "is", "the", "owner", "of", "the", "path", "."], "path": "poemlin/alluxio/tree/master/core/server/src/main/java/alluxio/master/file/PermissionChecker.java", "idx": 2510}
{"memberVariables": {"time": "Time"}, "code": ["void", "function", "(", ")", "{", "Time", "t", "=", "new", "Time", "(", "\"010203.4\"", ")", ";", "assertEquals", "(", "1", ",", "t", ".", "getHour", "(", ")", ")", ";", "assertEquals", "(", "2", ",", "t", ".", "getMinutes", "(", ")", ")", ";", "assertEquals", "(", "3.4", ",", "t", ".", "getSeconds", "(", ")", ",", "0.001", ")", ";", "}"], "memberFunctions": {"testDateRoundTrip": [["void"]], "testSetNegativeMinutes": [["void"]], "testFormatTimeWithOneDecimal": [["void"]], "testSetMinutes": [["void"]], "testParseTimeWithoutDecimals": [["void"]], "testGetMinutes": [["void"]], "testParseTimeWithDecimals": [["void"]], "testSetInvalidSeconds": [["void"]], "testSetNegativeHour": [["void"]], "testToDate": [["void"]], "testGetSeconds": [["void"]], "testSetHour": [["void"]], "testGetHour": [["void"]], "testSetSeconds": [["void"]], "testSetTime": [["void"]], "testGetMilliseconds": [["void"]], "testSetInvalidHour": [["void"]], "testSetNegativeSeconds": [["void"]], "setUp": [["void"]], "testSetInvalidMinutes": [["void"]], "testFormatTimeNoDecimals": [["void"]], "testFormatTimeWithDecimals": [["void"]], "testEquals": [["void"]]}, "className": "TimeTest", "renamed": ["void", "function", "(", ")", "{", "Time", "loc0", "=", "new", "Time", "(", "\"srini_string\"", ")", ";", "assertEquals", "(", "1", ",", "loc0", ".", "getHour", "(", ")", ")", ";", "assertEquals", "(", "2", ",", "loc0", ".", "getMinutes", "(", ")", ")", ";", "assertEquals", "(", "3.4", ",", "loc0", ".", "getSeconds", "(", ")", ",", "0.001", ")", ";", "}"], "nl": "Test method for  {@link net.sf.marineapi.nmea.util.Time(java.lang.String)}.", "nlToks": ["Test", "method", "for", "-LCB-", "@link", "net.sf.marineapi.nmea.util.Time", "-LRB-", "java.lang.String", "-RRB-", "-RCB-", "."], "path": "pkoziol/marine-api/tree/master/src/test/java/net/sf/marineapi/nmea/util/TimeTest.java", "idx": 2512}
{"memberVariables": {"m_socket": "Socket"}, "code": ["Socket", "function", "(", ")", "{", "return", "m_socket", ";", "}"], "memberFunctions": {"accept": [["T", "final OfferAnswerMediaVisitor<T> mediaVisitor"]]}, "className": "OfferAnswerSocketMedia", "renamed": ["Socket", "function", "(", ")", "{", "return", "m_socket", ";", "}"], "nl": "Accessor for the socket.", "nlToks": ["Accessor", "for", "the", "socket", "."], "path": "adamfisk/littleshoot-client/tree/master/common/offer-answer/src/main/java/org/lastbamboo/common/offer/answer/OfferAnswerSocketMedia.java", "idx": 2513}
{"memberVariables": {"ruleSets=new ArrayList<>()": "List<RuleSet>", "ruleChain=new RuleChain()": "RuleChain"}, "code": ["boolean", "function", "(", "Language", "language", ")", "{", "for", "(", "RuleSet", "ruleSet", ":", "ruleSets", ")", "{", "if", "(", "ruleSet", ".", "usesDFA", "(", "language", ")", ")", "{", "return", "true", ";", "}", "}", "return", "false", ";", "}"], "memberFunctions": {"usesTypeResolution": [["boolean", "Language language"]], "apply": [["void", "List<Node> acuList", "RuleContext ctx", "Language language"]], "start": [["void", "RuleContext ctx"]], "getRuleByName": [["Rule", "String ruleName"]], "getAllRuleSets": [["RuleSet[]"]], "usesMetrics": [["boolean", "Language language"]], "getChecksum": [["long"]], "addRuleSet": [["void", "RuleSet ruleSet"]], "ruleCount": [["int"]], "applies": [["boolean", "File file"]], "getRuleSetsIterator": [["Iterator<RuleSet>"]], "end": [["void", "RuleContext ctx"]], "removeDysfunctionalRules": [["void", "Collection<Rule> collector"]], "getAllRules": [["Set<Rule>"]]}, "className": "RuleSets", "renamed": ["boolean", "function", "(", "Language", "arg0", ")", "{", "for", "(", "RuleSet", "loc0", ":", "ruleSets", ")", "{", "if", "(", "loc0", ".", "usesDFA", "(", "arg0", ")", ")", "{", "return", "true", ";", "}", "}", "return", "false", ";", "}"], "nl": "Check if the rules that apply to a source of the given language use DFA.", "nlToks": ["Check", "if", "the", "rules", "that", "apply", "to", "a", "source", "of", "the", "given", "language", "use", "DFA", "."], "path": "adangel/pmd/tree/master/pmd-core/src/main/java/net/sourceforge/pmd/RuleSets.java", "idx": 2514}
{"memberVariables": {"returnEntropy=true": "boolean", "lifetime=60L * 30L": "long", "LOG=LogUtils.getL7dLogger(SCTProvider.class)": "Logger"}, "code": ["boolean", "function", "(", "String", "tokenType", ",", "String", "realm", ")", "{", "return", "STSUtils", ".", "TOKEN_TYPE_SCT_05_02", ".", "equals", "(", "tokenType", ")", "||", "STSUtils", ".", "TOKEN_TYPE_SCT_05_12", ".", "equals", "(", "tokenType", ")", ";", "}"], "memberFunctions": {"isReturnEntropy": [["boolean"]], "setReturnEntropy": [["void", "boolean returnEntropy"]], "getLifetime": [["long"]], "getWSCVersion": [["int", "String tokenType"]], "setLifetime": [["void", "long lifetime"]], "createToken": [["TokenProviderResponse", "TokenProviderParameters tokenParameters"]]}, "className": "SCTProvider", "renamed": ["boolean", "function", "(", "String", "arg0", ",", "String", "arg1", ")", "{", "return", "STSUtils", ".", "TOKEN_TYPE_SCT_05_02", ".", "equals", "(", "arg0", ")", "||", "STSUtils", ".", "TOKEN_TYPE_SCT_05_12", ".", "equals", "(", "arg0", ")", ";", "}"], "nl": "Return true if this TokenProvider implementation is capable of providing a token that corresponds to the given TokenType in a given realm. The realm is ignored in this  token provider.", "nlToks": ["Return", "true", "if", "this", "TokenProvider", "implementation", "is", "capable", "of", "providing", "a", "token", "that", "corresponds", "to", "the", "given", "TokenType", "in", "a", "given", "realm", ".", "The", "realm", "is", "ignored", "in", "this", "token", "provider", "."], "path": "primesign/cxf/tree/master/services/sts/sts-core/src/main/java/org/apache/cxf/sts/token/provider/SCTProvider.java", "idx": 2515}
{"memberVariables": {"propertyName": "String", "contentType": "String"}, "code": ["String", "function", "(", ")", "{", "return", "propertyName", ";", "}"], "memberFunctions": {"getContentType": [["String"]]}, "className": "ContentTypeInfo", "renamed": ["String", "function", "(", ")", "{", "return", "propertyName", ";", "}"], "nl": "Get the name of the message property from which the content type has been extracted.", "nlToks": ["Get", "the", "name", "of", "the", "message", "property", "from", "which", "the", "content", "type", "has", "been", "extracted", "."], "path": "harsha89/wso2-axis2-transports/tree/master/modules/jms/src/main/java/org/apache/axis2/transport/jms/ctype/ContentTypeInfo.java", "idx": 2516}
{"memberVariables": {"UP=new DynamicAction(\"Up\")": "Action", "LEFT=new DynamicAction(\"Left\")": "Action", "RIGHT=new DynamicAction(\"Right\")": "Action", "DOWN=new DynamicAction(\"Down\")": "Action", "state": "int[]"}, "code": ["int", "function", "(", "int", "absPos", ")", "{", "return", "absPos", "/", "3", ";", "}"], "memberFunctions": {"setBoard": [["void", "List<XYLocation> locs"]], "moveGapDown": [["void"]], "getGapPosition": [["int"]], "getAbsPosition": [["int", "int x", "int y"]], "moveGapLeft": [["void"]], "getLocationOf": [["XYLocation", "int val"]], "getYCoord": [["int", "int absPos"]], "getPositionOf": [["int", "int val"]], "getState": [["int[]"]], "moveGapUp": [["void"]], "getValueAt": [["int", "XYLocation loc"], ["int", "int x", "int y"]], "hashCode": [["int"]], "equals": [["boolean", "Object o"]], "setValue": [["void", "int x", "int y", "int val"]], "canMoveGap": [["boolean", "Action where"]], "getPositions": [["List<XYLocation>"]], "toString": [["String"]], "moveGapRight": [["void"]]}, "className": "EightPuzzleBoard", "renamed": ["int", "function", "(", "int", "arg0", ")", "{", "return", "arg0", "/", "3", ";", "}"], "nl": "Note: The graphic representation maps x values on row numbers (x-axis in vertical direction).", "nlToks": ["Note", ":", "The", "graphic", "representation", "maps", "x", "values", "on", "row", "numbers", "-LRB-", "x-axis", "in", "vertical", "direction", "-RRB-", "."], "path": "peterplupo/ia201102/tree/master/trabalho1/aima-core/src/main/java/aima/core/environment/eightpuzzle/EightPuzzleBoard.java", "idx": 2517}
{"memberVariables": {"executorService=Executors.newCachedThreadPool(runnable -> {\n  Thread thread=new Thread(runnable);\n  thread.setDaemon(true);\n  return thread;\n}\n)": "ExecutorService", "CONDITION_SLEEP_IN_MILLIS=10": "long", "SEMAPHORE_LOOPS_COUNT=5": "int", "SEMAPHORE_SLEEP_IN_MILLIS=10": "long"}, "code": ["void", "function", "(", "long", "millis", ",", "Runnable", "runnable", ")", "{", "Future", "<", "Void", ">", "future", "=", "async", "(", "runnable", ")", ";", "waitForMillis", "(", "millis", ",", "future", ")", ";", "}"], "memberFunctions": {"callConditionAndReturnResult": [["boolean", "Callable<Boolean> condition"]], "runOnFxThread": [["void", "Runnable runnable"]], "callCallableAndSetFuture": [["void", "Callable<T> callable", "SettableFuture<T> future"]], "sleepWithException": [["void", "long duration", "TimeUnit timeUnit"]], "waitForAsyncFx": [["void", "long millis", "Runnable runnable"], ["T", "long millis", "Callable<T> callable"]], "sleep": [["void", "long duration", "TimeUnit timeUnit"]], "waitForMillis": [["T", "long millis", "Future<T> future"]], "async": [["Future<Void>", "Runnable runnable"], ["Future<T>", "Callable<T> callable"]], "runOnThread": [["void", "Runnable runnable", "ExecutorService executorService"]], "waitForFxEvents": [["void"], ["void", "int attemptsCount"]], "asyncFx": [["Future<Void>", "Runnable runnable"], ["Future<T>", "Callable<T> callable"]], "blockFxThreadWithSemaphore": [["void"]], "waitFor": [["T", "Future<T> future"], ["T", "long timeout", "TimeUnit timeUnit", "Future<T> future"], ["void", "long timeout", "TimeUnit timeUnit", "Callable<Boolean> condition"], ["void", "long timeout", "TimeUnit timeUnit", "ObservableBooleanValue booleanValue"]]}, "className": "WaitForAsyncUtils", "renamed": ["void", "function", "(", "long", "arg0", ",", "Runnable", "arg1", ")", "{", "Future", "<", "Void", ">", "loc0", "=", "async", "(", "arg1", ")", ";", "waitForMillis", "(", "arg0", ",", "loc0", ")", ";", "}"], "nl": "Runs the given  {@link Runnable} on a new {@link Thread} and waits for it {@code long}milliseconds to finish, otherwise times out with  {@link TimeoutException}.", "nlToks": ["Runs", "the", "given", "-LCB-", "@link", "Runnable", "-RCB-", "on", "a", "new", "-LCB-", "@link", "Thread", "-RCB-", "and", "waits", "for", "it", "-LCB-", "@code", "long", "-RCB-", "milliseconds", "to", "finish", ",", "otherwise", "times", "out", "with", "-LCB-", "@link", "TimeoutException", "-RCB-", "."], "path": "hastebrot/TestFX/tree/master/subprojects/testfx-core/src/main/java/org/testfx/util/WaitForAsyncUtils.java", "idx": 2518}
{"memberVariables": {"defaultValue": "String", "tree": "DecisionTree"}, "code": ["void", "function", "(", "DataSet", "ds", ")", "{", "List", "<", "String", ">", "attributes", "=", "ds", ".", "getNonTargetAttributes", "(", ")", ";", "this", ".", "tree", "=", "decisionTreeLearning", "(", "ds", ",", "attributes", ",", "new", "ConstantDecisonTree", "(", "defaultValue", ")", ")", ";", "}"], "memberFunctions": {"majorityValue": [["ConstantDecisonTree", "DataSet ds"]], "test": [["int[]", "DataSet ds"]], "decisionTreeLearning": [["DecisionTree", "DataSet ds", "List<String> attributeNames", "ConstantDecisonTree defaultTree"]], "allExamplesHaveSameClassification": [["boolean", "DataSet ds"]], "predict": [["String", "Example e"]], "getDecisionTree": [["DecisionTree"]], "chooseAttribute": [["String", "DataSet ds", "List<String> attributeNames"]]}, "className": "DecisionTreeLearner", "renamed": ["void", "function", "(", "DataSet", "arg0", ")", "{", "List", "<", "String", ">", "loc0", "=", "arg0", ".", "getNonTargetAttributes", "(", ")", ";", "this", ".", "tree", "=", "decisionTreeLearning", "(", "arg0", ",", "loc0", ",", "new", "ConstantDecisonTree", "(", "defaultValue", ")", ")", ";", "}"], "nl": "Induces the decision tree from the specified set of examples", "nlToks": ["Induces", "the", "decision", "tree", "from", "the", "specified", "set", "of", "examples"], "path": "peterplupo/ia201102/tree/master/trabalho1/aima-core/src/main/java/aima/core/learning/learners/DecisionTreeLearner.java", "idx": 2519}
{"memberVariables": {"m_listener": "WriteListener", "m_socketChannel": "SocketChannel", "m_selectorManager": "SelectorManager", "m_numQueued": "int", "m_buffers": "Collection", "m_totalBytes": "long", "m_closed": "boolean", "NO_OP_LISTENER=new NoOpWriteListener()": "WriteListener", "m_startTime": "long", "LOG=LoggerFactory.getLogger(WriteHandlerImpl.class)": "Logger", "m_writeBuffers=Collections.synchronizedList(new LinkedList())": "List"}, "code": ["void", "function", "(", ")", "{", "this", ".", "m_selectorManager", ".", "addChannelInterestNow", "(", "this", ".", "m_socketChannel", ",", "SelectionKey", ".", "OP_WRITE", ")", ";", "}"], "memberFunctions": {"getTotalBytes": [["long"]], "disableWriteLater": [["void"]], "onWrite": [["void", "final WriteData data"]], "writeLater": [["void", "final Collection buffers"], ["void", "final ByteBuffer buffer"], ["void", "final ByteBuffer buffer", "final WriteListener listener"]], "writeBuffer": [["boolean", "final ByteBuffer buffer"]], "enableWriteLater": [["void"]], "getBuffers": [["Collection"]], "checkForNull": [["void", "final Collection buffers"]], "getStartTime": [["long"]], "write": [["void", "final ByteBuffer buffer", "final WriteListener listener"], ["void", "final ByteBuffer buffer"], ["void", "final Collection buffers"], ["boolean"]], "close": [["void"]], "getListener": [["WriteListener"]], "getNumQueued": [["int"]]}, "className": "WriteHandlerImpl", "renamed": ["void", "function", "(", ")", "{", "this", ".", "m_selectorManager", ".", "addChannelInterestNow", "(", "this", ".", "m_socketChannel", ",", "SelectionKey", ".", "OP_WRITE", ")", ";", "}"], "nl": "Activates interest in writing from the selector thread.", "nlToks": ["Activates", "interest", "in", "writing", "from", "the", "selector", "thread", "."], "path": "adamfisk/littleshoot-client/tree/master/common/nio/src/main/java/org/lastbamboo/common/nio/WriteHandlerImpl.java", "idx": 2520}
{"memberVariables": {"mBlockSizeBytes": "long", "mWriteType": "WriteType", "mPermission": "Permission", "mTtl": "long", "mLocationPolicy": "FileWriteLocationPolicy"}, "code": ["OutStreamOptions", "function", "(", "long", "ttl", ")", "{", "mTtl", "=", "ttl", ";", "return", "this", ";", "}"], "memberFunctions": {"setBlockSizeBytes": [["OutStreamOptions", "long blockSizeBytes"]], "getUnderStorageType": [["UnderStorageType"]], "getPermission": [["Permission"]], "setLocationPolicy": [["OutStreamOptions", "FileWriteLocationPolicy locationPolicy"]], "getAlluxioStorageType": [["AlluxioStorageType"]], "getLocationPolicy": [["FileWriteLocationPolicy"]], "defaults": [["OutStreamOptions"]], "getBlockSizeBytes": [["long"]], "hashCode": [["int"]], "equals": [["boolean", "Object o"]], "setWriteType": [["OutStreamOptions", "WriteType writeType"]], "toString": [["String"]], "setPermission": [["OutStreamOptions", "Permission perm"]], "getTtl": [["long"]]}, "className": "OutStreamOptions", "renamed": ["OutStreamOptions", "function", "(", "long", "arg0", ")", "{", "mTtl", "=", "arg0", ";", "return", "this", ";", "}"], "nl": "Sets the time to live.", "nlToks": ["Sets", "the", "time", "to", "live", "."], "path": "poemlin/alluxio/tree/master/core/client/src/main/java/alluxio/client/file/options/OutStreamOptions.java", "idx": 2523}
{"memberVariables": {"boundingBox": "BoundingBox", "nodes": "Hashtable<Long,MapNode>", "ways": "Hashtable<Long,MapWay>", "listeners": "ArrayList<MapEventListener>", "nextTrackId": "long", "entityClassifier": "EntityClassifier<EntityViewInfo>", "entityTree": "KDTree", "LOG=Logger.getLogger(\"aimax.osm\")": "Logger", "markers": "ArrayList<MapNode>", "pois": "ArrayList<MapNode>", "tracks": "ArrayList<Track>"}, "code": ["void", "function", "(", "EntityClassifier", "<", "EntityViewInfo", ">", "classifier", ")", "{", "entityClassifier", "=", "classifier", ";", "if", "(", "entityTree", "!=", "null", ")", "{", "applyClassifierAndUpdateTree", "(", "entityTree", ".", "getBoundingBox", "(", ")", ")", ";", "fireMapDataEvent", "(", "new", "MapEvent", "(", "this", ",", "MapEvent", ".", "Type", ".", "MAP_MODIFIED", ")", ")", ";", "}", "}"], "memberFunctions": {"visitEntities": [["void", "EntityVisitor visitor", "BoundingBox vbox", "float scale"]], "getTracks": [["List<Track>"]], "addNode": [["void", "DefaultMapNode node"]], "getWayNodes": [["List<MapNode>", "MapWay way", "float scale"]], "getStatistics": [["Object[][]"]], "getNearestWayNode": [["MapNode", "Position pos", "MapWayFilter filter"]], "setBoundingBox": [["void", "BoundingBox bb"]], "removeMarker": [["void", "MapNode marker"]], "clearTrack": [["void", "String trackName"]], "getVisibleMarkersAndTracks": [["List<MapEntity>", "float scale"]], "getEntityTree": [["KDTree"]], "fireMapDataEvent": [["void", "MapEvent event"]], "getBoundingBox": [["BoundingBox"]], "clearMarkersAndTracks": [["void"]], "getMarkers": [["List<MapNode>"]], "getNodeCount": [["int"]], "compile": [["void"]], "getPlaces": [["List<MapNode>", "String name"]], "createTrack": [["void", "String trackName", "List<Position> positions"]], "getPoiCount": [["int"]], "getWays": [["Collection<MapWay>", "BoundingBox bb"]], "getPois": [["List<MapNode>", "BoundingBox bb"]], "close": [["void"]], "addToTrack": [["void", "String trackName", "Position pos"]], "getTrack": [["Track", "long trackId"], ["Track", "String trackName"]], "clear": [["void"]], "isEmpty": [["boolean"]], "addMapDataEventListener": [["void", "MapEventListener listener"]], "applyClassifierAndUpdateTree": [["void", "BoundingBox bb"]], "getEntityFinder": [["EntityFinder"]], "removeMapDataEventListener": [["void", "MapEventListener listener"]], "getWay": [["MapWay", "long id"]], "getBuilder": [["MapBuilder"]], "getWayCount": [["int"]], "addWay": [["void", "DefaultMapWay way"]], "getNode": [["MapNode", "long id"]], "updateEntityViewInfo": [["void", "MapEntity entity", "boolean addToTree"]], "addMarker": [["MapNode", "float lat", "float lon"]]}, "className": "DefaultMap", "renamed": ["void", "function", "(", "EntityClassifier", "<", "EntityViewInfo", ">", "arg0", ")", "{", "entityClassifier", "=", "arg0", ";", "if", "(", "entityTree", "!=", "null", ")", "{", "applyClassifierAndUpdateTree", "(", "entityTree", ".", "getBoundingBox", "(", ")", ")", ";", "fireMapDataEvent", "(", "new", "MapEvent", "(", "this", ",", "MapEvent", ".", "Type", ".", "MAP_MODIFIED", ")", ")", ";", "}", "}"], "nl": "Provides the data store with an entity classifier. The classifier strongly influences the generation of the entity tree.", "nlToks": ["Provides", "the", "data", "store", "with", "an", "entity", "classifier", ".", "The", "classifier", "strongly", "influences", "the", "generation", "of", "the", "entity", "tree", "."], "path": "peterplupo/ia201102/tree/master/trabalho1/aimax-osm/src/main/java/aimax/osm/data/impl/DefaultMap.java", "idx": 2524}
{"memberVariables": {"hdg": "HDGSentence", "EXAMPLE=\"$HCHDG,123.4,1.2,E,1.2,W\"": "String"}, "code": ["void", "function", "(", ")", "{", "final", "double", "var", "=", "-", "0.1", ";", "hdg", ".", "setVariation", "(", "var", ")", ";", "assertEquals", "(", "var", ",", "hdg", ".", "getVariation", "(", ")", ",", "0.1", ")", ";", "assertTrue", "(", "hdg", ".", "toString", "(", ")", ".", "contains", "(", "\",000.1,W*\"", ")", ")", ";", "}"], "memberFunctions": {"testSetDeviationTooHigh": [["void"]], "testSetHeadingTooHigh": [["void"]], "testIsTrue": [["void"]], "testSetHeading": [["void"]], "testHDGParserTalkerId": [["void"]], "testConstructor": [["void"]], "testSetVariationTooLow": [["void"]], "testGetVariation": [["void"]], "testSetVariationTooHigh": [["void"]], "testSetVariationEast": [["void"]], "testGetDeviation": [["void"]], "testSetDeviationTooLow": [["void"]], "setUp": [["void"]], "testGetHeading": [["void"]], "testSetDeviationEast": [["void"]], "testHDGParserString": [["void"]], "testSetDeviationWest": [["void"]], "testSetHeadingTooLow": [["void"]]}, "className": "HDGTest", "renamed": ["void", "function", "(", ")", "{", "final", "double", "loc0", "=", "-", "0.1", ";", "hdg", ".", "setVariation", "(", "loc0", ")", ";", "assertEquals", "(", "loc0", ",", "hdg", ".", "getVariation", "(", ")", ",", "0.1", ")", ";", "assertTrue", "(", "hdg", ".", "toString", "(", ")", ".", "contains", "(", "\"srini_string\"", ")", ")", ";", "}"], "nl": "Test method for {@link net.sf.marineapi.nmea.parser.HDGParser#setVariation(double)}.", "nlToks": ["Test", "method", "for", "-LCB-", "@link", "net.sf.marineapi.nmea.parser.HDGParser", "#setVariation", "-LRB-", "double", "-RRB-", "-RCB-", "."], "path": "pkoziol/marine-api/tree/master/src/test/java/net/sf/marineapi/nmea/parser/HDGTest.java", "idx": 2525}
{"memberVariables": {"expectedDataUnitId": "Long", "seqNo": "Long", "dataSetId": "Long", "dataUnitId": "Long", "expectedValue": "String", "actualValue": "String", "expectedDataSetId": "Long", "errorCode": "String", "testId": "Long", "failedAttributeName": "String", "srcFileName": "String", "errorMsg": "String"}, "code": ["void", "function", "(", "Long", "dataSetId", ")", "{", "this", ".", "dataSetId", "=", "dataSetId", ";", "}"], "memberFunctions": {"setExpectedValue": [["void", "String expectedValue"]], "getExpectedValue": [["String"]], "getExpectedDataSetId": [["Long"]], "setExpectedDataSetId": [["void", "Long expectedDataSetId"]], "setActualValue": [["void", "String actualValue"]], "getDataSetId": [["Long"]], "setSrcFileName": [["void", "String srcFileName"]], "getExpectedDataUnitId": [["Long"]], "setExpectedDataUnitId": [["void", "Long expectedDataUnitId"]], "getSrcFileName": [["String"]], "getSeqNo": [["Long"]], "getFailedAttributeName": [["String"]], "setTestId": [["void", "Long testId"]], "setFailedAttributeName": [["void", "String failedAttributeName"]], "getTestId": [["Long"]], "setErrorCode": [["void", "String errorCode"]], "getActualValue": [["String"]], "getDataUnitId": [["Long"]], "setSeqNo": [["void", "Long seqNo"]], "setErrorMsg": [["void", "String errorMsg"]], "getErrorCode": [["String"]], "setDataUnitId": [["void", "Long dataUnitId"]], "toString": [["String"]], "getErrorMsg": [["String"]]}, "className": "TestResultDetailsDTO", "renamed": ["void", "function", "(", "Long", "arg0", ")", "{", "this", ".", "dataSetId", "=", "arg0", ";", "}"], "nl": "Sets the data set id.", "nlToks": ["Sets", "the", "data", "set", "id", "."], "path": "pkesireddy/portico_fletcher/tree/master/FetcherTesterService/src/main/java/org/ithaka/cm/fetchertester/model/TestResultDetailsDTO.java", "idx": 2526}
{"memberVariables": {"LOG=LogUtils.getL7dLogger(DefaultConditionsProvider.class)": "Logger", "DEFAULT_MAX_LIFETIME=60L * 60L * 12L": "long", "acceptClientLifetime": "boolean", "lifetime=60L * 30L": "long", "maxLifetime=DEFAULT_MAX_LIFETIME": "long", "failLifetimeExceedance=true": "boolean", "futureTimeToLive=60L": "long"}, "code": ["void", "function", "(", "boolean", "failLifetimeExceedance", ")", "{", "this", ".", "failLifetimeExceedance", "=", "failLifetimeExceedance", ";", "}"], "memberFunctions": {"getFutureTimeToLive": [["long"]], "setFutureTimeToLive": [["void", "long futureTimeToLive"]], "getLifetime": [["long"]], "setMaxLifetime": [["void", "long maxLifetime"]], "setLifetime": [["void", "long lifetime"]], "setAcceptClientLifetime": [["void", "boolean acceptClientLifetime"]], "getConditions": [["ConditionsBean", "TokenProviderParameters providerParameters"]], "isAcceptClientLifetime": [["boolean"]], "extractAddressFromParticipantsEPR": [["String", "Object participants"]], "createAudienceRestrictions": [["List<AudienceRestrictionBean>", "TokenProviderParameters providerParameters"]], "getMaxLifetime": [["long"]], "isFailLifetimeExceedance": [["boolean"]]}, "className": "DefaultConditionsProvider", "renamed": ["void", "function", "(", "boolean", "arg0", ")", "{", "this", ".", "failLifetimeExceedance", "=", "arg0", ";", "}"], "nl": "If requested lifetime exceeds shall it fail (default) or overwrite with maximum lifetime", "nlToks": ["If", "requested", "lifetime", "exceeds", "shall", "it", "fail", "-LRB-", "default", "-RRB-", "or", "overwrite", "with", "maximum", "lifetime"], "path": "primesign/cxf/tree/master/services/sts/sts-core/src/main/java/org/apache/cxf/sts/token/provider/DefaultConditionsProvider.java", "idx": 2527}
{"memberVariables": {"args": "Object[]", "fsm": "FSM", "async": "boolean", "dst": "String", "src": "String", "cancelled=false": "boolean", "name": "String", "error=null": "Exception"}, "code": ["void", "function", "(", ")", "{", "async", "=", "true", ";", "}"], "memberFunctions": {"cancel": [["Exception", "Exception error"]]}, "className": "Event", "renamed": ["void", "function", "(", ")", "{", "async", "=", "true", ";", "}"], "nl": "Can be called in leave_ to do an asynchronous state transition. The current state transition will be on hold in the old state until a final call to Transition is made. This will complete the transition and possibly call the other callbacks.", "nlToks": ["Can", "be", "called", "in", "leave", "_", "to", "do", "an", "asynchronous", "state", "transition", ".", "The", "current", "state", "transition", "will", "be", "on", "hold", "in", "the", "old", "state", "until", "a", "final", "call", "to", "Transition", "is", "made", ".", "This", "will", "complete", "the", "transition", "and", "possibly", "call", "the", "other", "callbacks", "."], "path": "adecaro/fabric/tree/master/core/chaincode/shim/java/src/main/java/org/hyperledger/java/fsm/Event.java", "idx": 2528}
{"memberVariables": {"iConstant": "int", "iTotal=0": "int"}, "code": ["HashCodeBuilder", "function", "(", "char", "value", ")", "{", "iTotal", "=", "iTotal", "*", "iConstant", "+", "value", ";", "return", "this", ";", "}"], "memberFunctions": {"appendSuper": [["HashCodeBuilder", "int superHashCode"]], "toHashCode": [["int"]]}, "className": "HashCodeBuilder", "renamed": ["HashCodeBuilder", "function", "(", "char", "arg0", ")", "{", "iTotal", "=", "iTotal", "*", "iConstant", "+", "arg0", ";", "return", "this", ";", "}"], "nl": " Append a hashCode for a char. ", "nlToks": ["Append", "a", "hashCode", "for", "a", "char", "."], "path": "007slm/citrus/tree/master/common/util/src/main/java/com/alibaba/citrus/util/internal/apache/lang/HashCodeBuilder.java", "idx": 2529}
{"memberVariables": {"reader": "Reader", "dataSourceName": "String"}, "code": ["String", "function", "(", "boolean", "shortNames", ",", "String", "inputFileName", ")", "{", "return", "getDataSourceName", "(", ")", ";", "}"], "memberFunctions": {"getDataSourceName": [["String"]], "toString": [["String"]], "getInputStream": [["InputStream"]], "setDataSourceName": [["void", "String dataSourceName"]]}, "className": "ReaderDataSource", "renamed": ["String", "function", "(", "boolean", "arg0", ",", "String", "arg1", ")", "{", "return", "getDataSourceName", "(", ")", ";", "}"], "nl": "Return the dataSourceName via the  {@link DataSource} Interface method. Both the parameters are ignored ", "nlToks": ["Return", "the", "dataSourceName", "via", "the", "-LCB-", "@link", "DataSource", "-RCB-", "Interface", "method", ".", "Both", "the", "parameters", "are", "ignored"], "path": "adangel/pmd/tree/master/pmd-core/src/main/java/net/sourceforge/pmd/util/datasource/ReaderDataSource.java", "idx": 2530}
{"memberVariables": {"encryptionCryptoProperties": "Object", "bus": "Bus", "signatureCrypto": "Crypto", "signatureProperties=new SignatureProperties()": "SignatureProperties", "LOG=LogUtils.getL7dLogger(StaticSTSProperties.class)": "Logger", "issuer": "String", "encryptionProperties=new EncryptionProperties()": "EncryptionProperties", "callbackHandler": "CallbackHandler", "relationships": "List<Relationship>", "validateUseKey=true": "boolean", "relationshipResolver": "RelationshipResolver", "callbackHandlerClass": "String", "signatureUsername": "String", "encryptionCrypto": "Crypto", "samlRealmCodec": "SAMLRealmCodec", "encryptionUsername": "String", "signatureCryptoProperties": "Object", "identityMapper": "IdentityMapper", "realmParser": "RealmParser"}, "code": ["void", "function", "(", "IdentityMapper", "identityMapper", ")", "{", "this", ".", "identityMapper", "=", "identityMapper", ";", "}"], "memberFunctions": {"getRelationshipResolver": [["RelationshipResolver"]], "getBus": [["Bus"]], "setSamlRealmCodec": [["void", "SAMLRealmCodec samlRealmCodec"]], "getResourceManager": [["ResourceManager"]], "setSignaturePropertiesFile": [["void", "String signaturePropertiesFile"]], "setCallbackHandler": [["void", "CallbackHandler callbackHandler"]], "setEncryptionProperties": [["void", "EncryptionProperties encryptionProperties"]], "getEncryptionProperties": [["EncryptionProperties"]], "isValidateUseKey": [["boolean"]], "setSignatureUsername": [["void", "String signatureUsername"]], "getRelationships": [["List<Relationship>"]], "getSamlRealmCodec": [["SAMLRealmCodec"]], "getEncryptionUsername": [["String"]], "setEncryptionPropertiesFile": [["void", "String encryptionPropertiesFile"]], "setEncryptionUsername": [["void", "String encryptionUsername"]], "setCallbackHandlerClass": [["void", "String callbackHandlerClass"]], "getEncryptionCrypto": [["Crypto"]], "setRelationships": [["void", "List<Relationship> relationships"]], "getSignatureProperties": [["SignatureProperties"]], "setSignatureProperties": [["void", "SignatureProperties signatureProperties"]], "setRealmParser": [["void", "RealmParser realmParser"]], "getIssuer": [["String"]], "setSignatureCryptoProperties": [["void", "Object signatureCryptoProperties"]], "setSignatureCrypto": [["void", "Crypto signatureCrypto"]], "getIdentityMapper": [["IdentityMapper"]], "setValidateUseKey": [["void", "boolean validateUseKey"]], "configureProperties": [["void"]], "setEncryptionCrypto": [["void", "Crypto encryptionCrypto"]], "getRealmParser": [["RealmParser"]], "getSignatureUsername": [["String"]], "getSignatureCrypto": [["Crypto"]], "setIssuer": [["void", "String issuer"]], "getCallbackHandler": [["CallbackHandler"]], "setEncryptionCryptoProperties": [["void", "Object encryptionCryptoProperties"]], "setBus": [["void", "Bus bus"]]}, "className": "StaticSTSProperties", "renamed": ["void", "function", "(", "IdentityMapper", "arg0", ")", "{", "this", ".", "identityMapper", "=", "arg0", ";", "}"], "nl": "Set the IdentityMapper object to use.", "nlToks": ["Set", "the", "IdentityMapper", "object", "to", "use", "."], "path": "primesign/cxf/tree/master/services/sts/sts-core/src/main/java/org/apache/cxf/sts/StaticSTSProperties.java", "idx": 2531}
{"memberVariables": {"decomp": "TridiagonalSimilarDecomposition<DenseMatrix64F>", "computeVectors": "boolean", "helper": "SymmetricQREigenHelper", "diag[]": "double", "values[]": "double", "V": "DenseMatrix64F", "offSaved[]": "double", "eigenvectors[]": "DenseMatrix64F", "vector": "SymmetricQrAlgorithm", "diagSaved[]": "double", "computeVectorsWithValues=false": "boolean", "off[]": "double"}, "code": ["boolean", "function", "(", ")", "{", "diagSaved", "=", "helper", ".", "copyDiag", "(", "diagSaved", ")", ";", "offSaved", "=", "helper", ".", "copyOff", "(", "offSaved", ")", ";", "vector", ".", "setQ", "(", "null", ")", ";", "vector", ".", "setFastEigenvalues", "(", "true", ")", ";", "if", "(", "!", "vector", ".", "process", "(", "-", "1", ",", "null", ",", "null", ")", ")", "return", "false", ";", "values", "=", "helper", ".", "copyEigenvalues", "(", "values", ")", ";", "return", "true", ";", "}"], "memberFunctions": {"getEigenvalue": [["Complex64F", "int index"]], "extractSeparate": [["boolean", "int numCols"]], "getEigenVector": [["DenseMatrix64F", "int index"]], "setMaxIterations": [["void", "int max"]], "getNumberOfEigenvalues": [["int"]], "decompose": [["boolean", "DenseMatrix64F orig"]], "setComputeVectorsWithValues": [["void", "boolean computeVectorsWithValues"]], "extractTogether": [["boolean"]], "inputModified": [["boolean"]]}, "className": "SymmetricQRAlgorithmDecomposition_D64", "renamed": ["boolean", "function", "(", ")", "{", "diagSaved", "=", "helper", ".", "copyDiag", "(", "diagSaved", ")", ";", "offSaved", "=", "helper", ".", "copyOff", "(", "offSaved", ")", ";", "vector", ".", "setQ", "(", "null", ")", ";", "vector", ".", "setFastEigenvalues", "(", "true", ")", ";", "if", "(", "!", "vector", ".", "process", "(", "-", "1", ",", "null", ",", "null", ")", ")", "return", "false", ";", "values", "=", "helper", ".", "copyEigenvalues", "(", "values", ")", ";", "return", "true", ";", "}"], "nl": "Computes eigenvalues only", "nlToks": ["Computes", "eigenvalues", "only"], "path": "adamaulia/efficient-java-matrix-library/tree/master/src/org/ejml/alg/dense/decomposition/eig/SymmetricQRAlgorithmDecomposition_D64.java", "idx": 2532}
{"memberVariables": {"CONFIG_APPLICATION_DAO=\"ApplicationDAO\"": "String", "CONFIG_SAML_DAO=\"SAMLClientDAO\"": "String", "oauthDAOClassName=null": "String", "claimDialect=null": "String", "CONFIG_ELEMENT_SP_MGT=\"ServiceProvidersManagement\"": "String", "CONFIG_OAUTH_OIDC_DAO=\"OAuthOIDCClientDAO\"": "String", "CONFIG_SYSTEM_IDP_DAO=\"SystemIDPDAO\"": "String", "samlDAOClassName=null": "String", "log=LogFactory.getLog(ApplicationMgtSystemConfig.class)": "Log", "appDAOClassName=null": "String", "instance=null": "ApplicationMgtSystemConfig", "systemIDPDAPClassName=null": "String", "CONFIG_CLAIM_DIALECT=\"ClaimDialect\"": "String"}, "code": ["String", "function", "(", ")", "{", "if", "(", "claimDialect", "!=", "null", ")", "{", "return", "claimDialect", ";", "}", "return", "\"http://wso2.org/claims\"", ";", "}"], "memberFunctions": {"getSAMLClientDAO": [["SAMLApplicationDAO"]], "getApplicationDAO": [["ApplicationDAO"]], "getIdentityProviderDAO": [["IdentityProviderDAO"]], "getInstance": [["ApplicationMgtSystemConfig"]], "buildSystemConfiguration": [["void"]], "getOAuthOIDCClientDAO": [["OAuthApplicationDAO"]]}, "className": "ApplicationMgtSystemConfig", "renamed": ["String", "function", "(", ")", "{", "if", "(", "claimDialect", "!=", "null", ")", "{", "return", "claimDialect", ";", "}", "return", "\"srini_string\"", ";", "}"], "nl": "Returns the claim dialect for claim mappings", "nlToks": ["Returns", "the", "claim", "dialect", "for", "claim", "mappings"], "path": "harsha1979/carbon-identity/tree/master/components/application-mgt/org.wso2.carbon.identity.application.mgt/src/main/java/org/wso2/carbon/identity/application/mgt/ApplicationMgtSystemConfig.java", "idx": 2535}
{"memberVariables": {}, "code": ["void", "function", "(", ")", "{", "String", "out", "=", "WebUtils", ".", "convertMsToClockTime", "(", "TimeUnit", ".", "HOURS", ".", "toMillis", "(", "1", ")", ")", ";", "Assert", ".", "assertEquals", "(", "\"0 day(s), 1 hour(s), 0 minute(s), and 0 second(s)\"", ",", "out", ")", ";", "}"], "memberFunctions": {"convertToClockTimeWithOneMinute30Seconds": [["void"]], "convertToClockTimeWithOneDay4Hours10Minutes45SecondsWithStopwatch": [["void"]], "convertToClockTimeWithNegativeValue": [["void"]], "convertToClockTimeWithShortValue": [["void"]], "convertToClockTimeWithOneDay4Hours10Minutes45Seconds": [["void"]], "convertToClockTimeWithOneHour10Minutes45Seconds": [["void"]], "convertToClockTimeWithOneMinute": [["void"]], "convertToClockTimeWithOneSecond": [["void"]], "convertToClockTimeWithOneDay": [["void"]]}, "className": "WebUtilsTest", "renamed": ["void", "function", "(", ")", "{", "String", "loc0", "=", "WebUtils", ".", "convertMsToClockTime", "(", "TimeUnit", ".", "HOURS", ".", "toMillis", "(", "1", ")", ")", ";", "Assert", ".", "assertEquals", "(", "\"srini_string\"", ",", "loc0", ")", ";", "}"], "nl": "Tests the  {@link WebUtils#convertMsToClockTime(long)} method with one hour.", "nlToks": ["Tests", "the", "-LCB-", "@link", "WebUtils", "#convertMsToClockTime", "-LRB-", "long", "-RRB-", "-RCB-", "method", "with", "one", "hour", "."], "path": "poemlin/alluxio/tree/master/core/server/src/test/java/alluxio/web/WebUtilsTest.java", "idx": 2536}
{"memberVariables": {"sourceDocument": "String", "sharedContext": "SharedContext", "DEFAULT_DOTS_PER_PIXEL=1": "int", "outputDevice": "Java2DOutputDevice", "renderingHints": "Map", "NO_HEIGHT=-1": "int", "rendered": "boolean", "root": "Box", "dotsPerPoint": "float", "DEFAULT_IMAGE_TYPE=BufferedImage.TYPE_INT_RGB": "int", "bufferedImageType": "int", "width": "int", "doc": "Document", "outputImage": "BufferedImage", "DEFAULT_HEIGHT=1000": "int", "sourceDocumentBase": "String", "DEFAULT_DOTS_PER_POINT=1": "int", "height": "int"}, "code": ["void", "function", "(", "int", "bufferedImageType", ")", "{", "this", ".", "bufferedImageType", "=", "bufferedImageType", ";", "}"], "memberFunctions": {"loadDocument": [["Document", "final String uri"]], "layout": [["void", "int width"]], "init": [["void", "float dotsPerPoint", "int dotsPerPixel"]], "createBufferedImage": [["BufferedImage", "int width", "int height"]], "setDocument": [["void", "Document doc", "String url", "NamespaceHandler nsh"]], "isHover": [["boolean", "Element e"]], "isFocus": [["boolean", "Element e"]], "setRenderingHints": [["void", "Map hints"]], "isActive": [["boolean", "Element e"]], "getSharedContext": [["SharedContext"]], "getImage": [["BufferedImage"]], "newLayoutContext": [["LayoutContext"]]}, "className": "Java2DRenderer", "renamed": ["void", "function", "(", "int", "arg0", ")", "{", "this", ".", "bufferedImageType", "=", "arg0", ";", "}"], "nl": "Sets the type for the BufferedImage used as output for this renderer; must be one of the values from {@link java.awt.image.BufferedImage} allowed in that class' constructor as a type argument. See docs forthe type parameter in  {@link java.awt.image.BufferedImage#BufferedImage(int,int,int)}. Defaults to RGB with no support for transparency. The type is used when the image is first created, so to change the default type do so before calling  {@link #getImage()}.", "nlToks": ["Sets", "the", "type", "for", "the", "BufferedImage", "used", "as", "output", "for", "this", "renderer", ";", "must", "be", "one", "of", "the", "values", "from", "-LCB-", "@link", "java.awt.image.BufferedImage", "-RCB-", "allowed", "in", "that", "class", "'", "constructor", "as", "a", "type", "argument", ".", "See", "docs", "forthe", "type", "parameter", "in", "-LCB-", "@link", "java.awt.image.BufferedImage", "#BufferedImage", "-LRB-", "int", ",", "int", ",", "int", "-RRB-", "-RCB-", ".", "Defaults", "to", "RGB", "with", "no", "support", "for", "transparency", ".", "The", "type", "is", "used", "when", "the", "image", "is", "first", "created", ",", "so", "to", "change", "the", "default", "type", "do", "so", "before", "calling", "-LCB-", "@link", "#getImage", "-LRB-", "-RRB-", "-RCB-", "."], "path": "plutogeek/flyingsaucer/tree/master/flying-saucer-core/src/main/java/org/xhtmlrenderer/swing/Java2DRenderer.java", "idx": 2538}
{"memberVariables": {"LAST_POS=4": "int", "FIRST_POS=0": "int", "mypage=new Page()": "Page", "logfile": "String", "currentpos": "int", "currentblk": "Block"}, "code": ["void", "function", "(", ")", "{", "setFirstRecordPosition", "(", "FIRST_POS", ")", ";", "setLastRecordPosition", "(", "LAST_POS", ")", ";", "currentpos", "=", "2", "*", "INT_SIZE", ";", "currentblk", "=", "mypage", ".", "append", "(", "logfile", ")", ";", "}"], "memberFunctions": {"getFirstRecordPosition": [["int"]], "iterator": [["ListIterator<BasicLogRecord>"]], "setFirstRecordPosition": [["void", "int pos"]], "flush": [["void", "int lsn"], ["void"]], "size": [["int", "Object val"]], "appendVal": [["void", "Object val"]], "currentLSN": [["int"]], "finalizeRecord": [["void"]], "setLastRecordPosition": [["void", "int pos"]], "getLastRecordPosition": [["int"]], "append": [["int", "Object[] rec"]]}, "className": "LogMgr", "renamed": ["void", "function", "(", ")", "{", "setFirstRecordPosition", "(", "FIRST_POS", ")", ";", "setLastRecordPosition", "(", "LAST_POS", ")", ";", "currentpos", "=", "2", "*", "INT_SIZE", ";", "currentblk", "=", "mypage", ".", "append", "(", "logfile", ")", ";", "}"], "nl": "Clear the current page, and append it to the log file.", "nlToks": ["Clear", "the", "current", "page", ",", "and", "append", "it", "to", "the", "log", "file", "."], "path": "prerit2803/DBMSProject2/tree/master/simpledb/log/LogMgr.java", "idx": 2539}
{"memberVariables": {"settings": "IStoredSettings", "legacyBackingServices": "Map<String,String>", "runtimeManager": "IRuntimeManager", "logger=LoggerFactory.getLogger(getClass())": "Logger", "userService": "IUserService"}, "code": ["List", "<", "UserModel", ">", "function", "(", ")", "{", "List", "<", "UserModel", ">", "users", "=", "userService", ".", "getAllUsers", "(", ")", ";", "return", "users", ";", "}"], "memberFunctions": {"deleteRepositoryRole": [["boolean", "String role"]], "getAllUsernames": [["List<String>"]], "getUserModel": [["UserModel", "char[] cookie"], ["UserModel", "String username"]], "updateUserModel": [["boolean", "UserModel model"], ["boolean", "String username", "UserModel model"]], "getTeamModel": [["TeamModel", "String teamname"]], "updateTeamModel": [["boolean", "TeamModel model"], ["boolean", "String teamname", "TeamModel model"]], "isInternalAccount": [["boolean", "String username"]], "getTeamNamesForRepositoryRole": [["List<String>", "String role"]], "deleteTeam": [["boolean", "String teamname"]], "updateUserModels": [["boolean", "Collection<UserModel> models"]], "getUsernamesForRepositoryRole": [["List<String>", "String role"]], "deleteTeamModel": [["boolean", "TeamModel model"]], "start": [["UserManager"]], "setUserService": [["void", "IUserService userService"]], "createUserService": [["IUserService", "File realmFile"]], "getAllTeams": [["List<TeamModel>"]], "getCookie": [["String", "UserModel model"]], "deleteUserModel": [["boolean", "UserModel model"]], "stop": [["UserManager"]], "deleteUser": [["boolean", "String username"]], "setup": [["void", "IRuntimeManager runtimeManager"]], "renameRepositoryRole": [["boolean", "String oldRole", "String newRole"]], "getAllTeamNames": [["List<String>"]], "updateTeamModels": [["boolean", "Collection<TeamModel> models"]]}, "className": "UserManager", "renamed": ["List", "<", "UserModel", ">", "function", "(", ")", "{", "List", "<", "UserModel", ">", "loc0", "=", "userService", ".", "getAllUsers", "(", ")", ";", "return", "loc0", ";", "}"], "nl": "Returns the list of all users available to the login service.", "nlToks": ["Returns", "the", "list", "of", "all", "users", "available", "to", "the", "login", "service", "."], "path": "pombreda/gitblit/tree/master/src/main/java/com/gitblit/manager/UserManager.java", "idx": 2541}
{"memberVariables": {"mat": "DenseMatrix64F", "eig": "EigenDecomposition<DenseMatrix64F>"}, "code": ["double", "function", "(", ")", "{", "return", "DecompositionFactory", ".", "quality", "(", "mat", ",", "eig", ")", ";", "}"], "memberFunctions": {"getEigenvalue": [["Complex64F", "int index"]], "getEigenVector": [["T", "int index"]], "getEVD": [["EigenDecomposition"]], "getNumberOfEigenvalues": [["int"]], "getIndexMax": [["int"]], "getIndexMin": [["int"]]}, "className": "SimpleEVD", "renamed": ["double", "function", "(", ")", "{", "return", "DecompositionFactory", ".", "quality", "(", "mat", ",", "eig", ")", ";", "}"], "nl": " Computes the quality of the computed decomposition.  A value close to or less than 1e-15 is considered to be within machine precision.   This function must be called before the original matrix has been modified or else it will produce meaningless results. ", "nlToks": ["Computes", "the", "quality", "of", "the", "computed", "decomposition", ".", "A", "value", "close", "to", "or", "less", "than", "1e-15", "is", "considered", "to", "be", "within", "machine", "precision", ".", "This", "function", "must", "be", "called", "before", "the", "original", "matrix", "has", "been", "modified", "or", "else", "it", "will", "produce", "meaningless", "results", "."], "path": "adamaulia/efficient-java-matrix-library/tree/master/src/org/ejml/simple/SimpleEVD.java", "idx": 2542}
{"memberVariables": {}, "code": ["boolean", "function", "(", ")", "{", "return", "isAuthenticationEnabled", "(", ")", "&&", "isAuthorizationEnabled", "(", ")", ";", "}"], "memberFunctions": {"isAuthorizationEnabled": [["boolean"]], "isAuthenticationEnabled": [["boolean"]]}, "className": "SecurityUtils", "renamed": ["boolean", "function", "(", ")", "{", "return", "isAuthenticationEnabled", "(", ")", "&&", "isAuthorizationEnabled", "(", ")", ";", "}"], "nl": "Checks if security is enabled.", "nlToks": ["Checks", "if", "security", "is", "enabled", "."], "path": "poemlin/alluxio/tree/master/core/common/src/main/java/alluxio/util/SecurityUtils.java", "idx": 2543}
{"memberVariables": {"nodeReferenceMap=null": "Map<Node,Integer>", "nextIndex=0": "int", "ctx": "XPathContext", "atAttribute=false": "boolean", "atChild=false": "boolean", "trackNodeReferences=false": "boolean", "levels=new LinkedList<TrackingEntry>()": "LinkedList<TrackingEntry>"}, "code": ["void", "function", "(", "boolean", "yesNo", ")", "{", "this", ".", "trackNodeReferences", "=", "yesNo", ";", "if", "(", "yesNo", ")", "{", "nodeReferenceMap", "=", "new", "HashMap", "<", "Node", ",", "Integer", ">", "(", ")", ";", "}", "}"], "memberFunctions": {"newLevel": [["void"]], "clearTrackedAttribute": [["void"], ["void"]], "indent": [["void"]], "getNodeName": [["String", "Node n"]], "preloadChildren": [["void", "Iterable<Node> nodeList"]], "preloadNodeList": [["void", "NodeList nodeList"]], "toXpathString": [["String"]], "visitedAttribute": [["void", "String visited"]], "trackNode": [["void", "final Node visited", "final String value"]], "trackAttribute": [["void", "QName visited"]], "visited": [["void", "Node node"]], "reset": [["void"], ["void"]], "outdent": [["void"]], "visitedNode": [["void", "Node visited", "String value"]], "preloadChildList": [["void", "List nodeList"]]}, "className": "XpathNodeTracker", "renamed": ["void", "function", "(", "boolean", "arg0", ")", "{", "this", ".", "trackNodeReferences", "=", "arg0", ";", "if", "(", "arg0", ")", "{", "nodeReferenceMap", "=", "new", "HashMap", "<", "Node", ",", "Integer", ">", "(", ")", ";", "}", "}"], "nl": "whether the indices of subsequently tracked nodes should be tracked.", "nlToks": ["whether", "the", "indices", "of", "subsequently", "tracked", "nodes", "should", "be", "tracked", "."], "path": "phbenisc/xmlunit/tree/master/xmlunit-legacy/src/main/java/org/custommonkey/xmlunit/XpathNodeTracker.java", "idx": 2544}
{"memberVariables": {"originalMatrix": "QMatrix", "positions": "List<MatrixPosition>"}, "code": ["int", "function", "(", "MatrixPosition", "position", ")", "{", "return", "originalMatrix", ".", "matrixItemRemainingUtility", "[", "position", ".", "row", "]", "[", "position", ".", "column", "]", ";", "}"], "memberFunctions": {"getItemNames": [["int[]"]], "getItemUtility": [["int", "MatrixPosition position"], ["int", "int row", "int column"]], "getRemainingUtility": [["int", "int row", "int column"]]}, "className": "QMatrixProjection", "renamed": ["int", "function", "(", "MatrixPosition", "arg0", ")", "{", "return", "originalMatrix", ".", "matrixItemRemainingUtility", "[", "arg0", ".", "row", "]", "[", "arg0", ".", "column", "]", ";", "}"], "nl": "Get the local sequence utility for a given cell in the projected q-matrix", "nlToks": ["Get", "the", "local", "sequence", "utility", "for", "a", "given", "cell", "in", "the", "projected", "q-matrix"], "path": "prateek96/Data_Mining_Assignments/tree/master/Assignment_1/Assignment 1.12/QMatrixProjection.java", "idx": 2545}
{"memberVariables": {"hdt": "HDTSentence", "EXAMPLE=\"$HCHDT,90.1,T\"": "String"}, "code": ["void", "function", "(", ")", "{", "hdt", ".", "setHeading", "(", "123.45", ")", ";", "assertEquals", "(", "123.5", ",", "hdt", ".", "getHeading", "(", ")", ",", "0.1", ")", ";", "}"], "memberFunctions": {"testSetHeadingTooHigh": [["void"]], "testIsTrue": [["void"]], "setUp": [["void"]], "testGetHeading": [["void"]], "testSetNegativeHeading": [["void"]], "testConstructor": [["void"]]}, "className": "HDTTest", "renamed": ["void", "function", "(", ")", "{", "hdt", ".", "setHeading", "(", "123.45", ")", ";", "assertEquals", "(", "123.5", ",", "hdt", ".", "getHeading", "(", ")", ",", "0.1", ")", ";", "}"], "nl": "Test method for {@link net.sf.marineapi.nmea.parser.HDTParser#setHeading(double)}.", "nlToks": ["Test", "method", "for", "-LCB-", "@link", "net.sf.marineapi.nmea.parser.HDTParser", "#setHeading", "-LRB-", "double", "-RRB-", "-RCB-", "."], "path": "pkoziol/marine-api/tree/master/src/test/java/net/sf/marineapi/nmea/parser/HDTTest.java", "idx": 2546}
{"memberVariables": {"a": "ReshapeMatrix64F", "index=0": "int", "subRow": "int", "minRow": "int", "minCol": "int", "size": "int", "submatrixStride": "int", "rowMajor": "boolean", "subCol": "int"}, "code": ["int", "function", "(", ")", "{", "return", "index", "-", "1", ";", "}"], "memberFunctions": {"next": [["Double"]], "set": [["void", "double value"]], "isRowMajor": [["boolean"]], "hasNext": [["boolean"]], "remove": [["void"]]}, "className": "MatrixIterator", "renamed": ["int", "function", "(", ")", "{", "return", "index", "-", "1", ";", "}"], "nl": "Which element in the submatrix was returned by next()", "nlToks": ["Which", "element", "in", "the", "submatrix", "was", "returned", "by", "next", "-LRB-", "-RRB-"], "path": "adamaulia/efficient-java-matrix-library/tree/master/src/org/ejml/data/MatrixIterator.java", "idx": 2547}
{"memberVariables": {"CCK_GUARDED=new CallConcurrencyKindEnum(\"cck_guarded\")": "CallConcurrencyKindEnum", "CCK_SEQUENTIAL=new CallConcurrencyKindEnum(\"cck_sequential\")": "CallConcurrencyKindEnum", "typeName": "java.util.List", "CCK_CONCURRENT=new CallConcurrencyKindEnum(\"cck_concurrent\")": "CallConcurrencyKindEnum", "literalName": "java.lang.String"}, "code": ["java", ".", "lang", ".", "String", "function", "(", ")", "{", "return", "literalName", ";", "}"], "memberFunctions": {"readResolve": [["java.lang.Object"]], "forName": [["CallConcurrencyKind", "java.lang.String name"]], "refTypeName": [["java.util.List"]], "hashCode": [["int"]], "equals": [["boolean", "java.lang.Object o"]]}, "className": "CallConcurrencyKindEnum", "renamed": ["java", ".", "lang", ".", "String", "function", "(", ")", "{", "return", "literalName", ";", "}"], "nl": "Returns a string representation of the enumeration value.", "nlToks": ["Returns", "a", "string", "representation", "of", "the", "enumeration", "value", "."], "path": "pichiliani/CoArgoUML/tree/master/v0.24/fonte/src/argouml-core-model-mdr/build/java/org/omg/uml/foundation/datatypes/CallConcurrencyKindEnum.java", "idx": 2549}
{"memberVariables": {"edgeOffset=0": "int", "figure=null": "FigNode", "UPLINK_FACTOR=5": "float", "uplinks=new ArrayList<ClassdiagramNode>()": "List<ClassdiagramNode>", "rank=NORANK": "int", "downlinks=new ArrayList<ClassdiagramNode>()": "List<ClassdiagramNode>", "NORANK=-1": "int", "column=NOCOLUMN": "int", "placementHint=-1": "int", "weight=NOWEIGHT": "float", "NOCOLUMN=-1": "int", "NOWEIGHT=-1": "int"}, "code": ["int", "function", "(", ")", "{", "return", "column", ";", "}"], "memberFunctions": {"getUplinks": [["Vector<ClassdiagramNode>"]], "getLocation": [["Point"]], "isComment": [["boolean"]], "getUpNodes": [["List<ClassdiagramNode>"]], "getWeight": [["float"]], "getFigure": [["FigNode"]], "getDownlinks": [["Vector<ClassdiagramNode>"]], "compareTo": [["int", "Object arg0"]], "setColumn": [["void", "int newColumn"]], "addDownlink": [["void", "ClassdiagramNode newDownlink"]], "setLocation": [["void", "Point newLocation"]], "setEdgeOffset": [["void", "int newOffset"]], "isStandalone": [["boolean"]], "getSubtreeWeight": [["float"]], "calculateWeight": [["float"]], "setRank": [["void", "int newRank"]], "addRank": [["void", "int n"]], "getTypeOrderNumer": [["int"]], "getEdgeOffset": [["int"]], "getRank": [["int"]], "setWeight": [["void", "float w"]], "isPackage": [["boolean"]], "addUplink": [["void", "ClassdiagramNode newUplink"]], "getLevel": [["int"]], "getSize": [["Dimension"]], "setPlacementHint": [["void", "int hint"]], "getPlacementHint": [["int"]], "setFigure": [["void", "FigNode newFigure"]], "getDownNodes": [["List<ClassdiagramNode>"]]}, "className": "ClassdiagramNode", "renamed": ["int", "function", "(", ")", "{", "return", "column", ";", "}"], "nl": "Operation getColumn returns the value of the attribute _column.", "nlToks": ["Operation", "getColumn", "returns", "the", "value", "of", "the", "attribute", "_", "column", "."], "path": "pichiliani/CoArgoUML/tree/master/v0.24/fonte/src/argouml-app/src/org/argouml/uml/diagram/static_structure/layout/ClassdiagramNode.java", "idx": 2552}
{"memberVariables": {"callbackHandler": "CallbackHandler", "LOG=LogUtils.getL7dLogger(SAMLRealm.class)": "Logger", "signatureCrypto": "Crypto", "signatureProperties": "SignatureProperties", "callbackHandlerClass": "String", "signaturePropertiesFile": "String", "signatureAlias": "String", "issuer": "String"}, "code": ["void", "function", "(", "Crypto", "signatureCrypto", ")", "{", "this", ".", "signatureCrypto", "=", "signatureCrypto", ";", "}"], "memberFunctions": {"getIssuer": [["String"]], "getSignatureAlias": [["String"]], "setCallbackHandlerClass": [["void", "String callbackHandlerClass"]], "setIssuer": [["void", "String issuer"]], "getSignatureCrypto": [["Crypto"]], "getCallbackHandler": [["CallbackHandler"]], "getSignatureProperties": [["SignatureProperties"]], "setSignatureAlias": [["void", "String signatureAlias"]], "setSignaturePropertiesFile": [["void", "String signaturePropertiesFile"]], "setSignatureProperties": [["void", "SignatureProperties signatureProperties"]], "setCallbackHandler": [["void", "CallbackHandler callbackHandler"]]}, "className": "SAMLRealm", "renamed": ["void", "function", "(", "Crypto", "arg0", ")", "{", "this", ".", "signatureCrypto", "=", "arg0", ";", "}"], "nl": "Set the signature Crypto object", "nlToks": ["Set", "the", "signature", "Crypto", "object"], "path": "primesign/cxf/tree/master/services/sts/sts-core/src/main/java/org/apache/cxf/sts/token/realm/SAMLRealm.java", "idx": 2553}
{"memberVariables": {"EXAMPLE=\"$GPRMC,120044.567,A,6011.552,N,02501.941,E,000.0,360.0,160705,006.1,E,A*0B\"": "String", "rmc": "RMCParser", "empty": "RMCParser"}, "code": ["void", "function", "(", ")", "{", "final", "double", "cog", "=", "90.55555", ";", "rmc", ".", "setCourse", "(", "cog", ")", ";", "assertTrue", "(", "rmc", ".", "toString", "(", ")", ".", "contains", "(", "\",090.6,\"", ")", ")", ";", "assertEquals", "(", "cog", ",", "rmc", ".", "getCourse", "(", ")", ",", "0.1", ")", ";", "}"], "memberFunctions": {"testSetFaaModeWhenOmitted": [["void"]], "testSetDirectionOfVariationWithInvalidDirection": [["void"]], "testGetCorrectedCourse": [["void"]], "testGetDataStatus": [["void"]], "testConstructor": [["void"]], "testGetTime": [["void"]], "testSetFaaMode": [["void"]], "testSetVariation": [["void"]], "setUp": [["void"]], "testGetMonth": [["void"]], "testGetCourse": [["void"]], "testSetDate": [["void"]], "testGetYear": [["void"]], "testSetDataStatus": [["void"]], "testGetDirectionOfVariation": [["void"]], "testGetDate": [["void"]], "testGetMagneticVariation": [["void"]], "testSetPosition": [["void"]], "testGetPosition": [["void"]], "testSetDirectionOfVariation": [["void"]], "testSetTime": [["void"]], "testGetDay": [["void"]], "testGetSpeed": [["void"]], "testGetFaaMode": [["void"]], "testSetSpeed": [["void"]]}, "className": "RMCTest", "renamed": ["void", "function", "(", ")", "{", "final", "double", "loc0", "=", "90.55555", ";", "rmc", ".", "setCourse", "(", "loc0", ")", ";", "assertTrue", "(", "rmc", ".", "toString", "(", ")", ".", "contains", "(", "\"srini_string\"", ")", ")", ";", "assertEquals", "(", "loc0", ",", "rmc", ".", "getCourse", "(", ")", ",", "0.1", ")", ";", "}"], "nl": "Test method for {@link net.sf.marineapi.nmea.parser.RMCParser#setCourse(double)} .", "nlToks": ["Test", "method", "for", "-LCB-", "@link", "net.sf.marineapi.nmea.parser.RMCParser", "#setCourse", "-LRB-", "double", "-RRB-", "-RCB-", "."], "path": "pkoziol/marine-api/tree/master/src/test/java/net/sf/marineapi/nmea/parser/RMCTest.java", "idx": 2554}
{"memberVariables": {"consoleMode": "boolean", "logger=org.apache.log4j.Logger.getLogger(ProgressMonitor.class)": "org.apache.log4j.Logger", "maxValue": "int", "showProgress": "boolean", "progressMonitor=new ProgressMonitor()": "ProgressMonitor", "log=new StringBuffer()": "StringBuffer", "currentMessage": "String", "debugMessages=new ArrayList<>()": "List<String>", "warnings=new TreeSet<>()": "TreeSet<String>", "curValue": "int", "warningCounts=new HashMap<>()": "HashMap<String,Integer>"}, "code": ["int", "function", "(", ")", "{", "return", "progressMonitor", ".", "maxValue", ";", "}"], "memberFunctions": {"setCurValue": [["void", "int curValue"]], "setConsoleModeAndParseShowProgress": [["void", "String[] args"]], "setShowProgress": [["void", "boolean showProgress"]], "setCurrentMessage": [["void", "String currentMessage"]], "getLog": [["String"]], "logWarning": [["void", "String warning"]], "getWarnings": [["ArrayList<String>"]], "logDebug": [["void", "String debugMessage"]], "getMessages": [["ArrayList<String>"]], "isConsoleMode": [["boolean"]], "getDebugMessages": [["List<String>"]], "setMaxValue": [["void", "int maxValue"]], "incrementCurValue": [["void"]], "isRunningOnServer": [["boolean"]], "getCurrentMessage": [["String"]], "setConsoleMode": [["void", "boolean consoleFlag"]], "getCurValue": [["int"]], "isShowProgress": [["boolean"]], "getPercentComplete": [["double"]]}, "className": "ProgressMonitor", "renamed": ["int", "function", "(", ")", "{", "return", "progressMonitor", ".", "maxValue", ";", "}"], "nl": "Gets Max Value.", "nlToks": ["Gets", "Max", "Value", "."], "path": "adamabeshouse/cbioportal/tree/master/core/src/main/java/org/mskcc/cbio/portal/util/ProgressMonitor.java", "idx": 2556}
{"memberVariables": {"offsetHours=0": "int", "offsetMinutes=0": "int", "seconds=0.0": "double", "minutes=0": "int", "hour=0": "int", "TIME_PATTERN=\"%02d:%02d:%02d%+03d:%02d\"": "String"}, "code": ["void", "function", "(", "Date", "d", ")", "{", "GregorianCalendar", "cal", "=", "new", "GregorianCalendar", "(", ")", ";", "cal", ".", "setTime", "(", "d", ")", ";", "double", "seconds", "=", "cal", ".", "get", "(", "Calendar", ".", "SECOND", ")", "+", "(", "cal", ".", "get", "(", "Calendar", ".", "MILLISECOND", ")", "/", "1000.0", ")", ";", "setHour", "(", "cal", ".", "get", "(", "Calendar", ".", "HOUR_OF_DAY", ")", ")", ";", "setMinutes", "(", "cal", ".", "get", "(", "Calendar", ".", "MINUTE", ")", ")", ";", "setSeconds", "(", "seconds", ")", ";", "}"], "memberFunctions": {"getOffsetHours": [["int"]], "toDate": [["Date", "Date d"]], "toISO8601": [["String"]], "setMinutes": [["void", "int minutes"]], "setHour": [["void", "int hour"]], "getMilliseconds": [["long"]], "setOffsetMinutes": [["void", "int minutes"]], "getMinutes": [["int"]], "getSeconds": [["double"]], "hashCode": [["int"]], "setSeconds": [["void", "double seconds"]], "equals": [["boolean", "final Object obj"]], "getOffsetMinutes": [["int"]], "getHour": [["int"]], "toString": [["String"]], "setOffsetHours": [["void", "int hours"]]}, "className": "Time", "renamed": ["void", "function", "(", "Date", "arg0", ")", "{", "GregorianCalendar", "loc0", "=", "new", "GregorianCalendar", "(", ")", ";", "loc0", ".", "setTime", "(", "arg0", ")", ";", "double", "loc1", "=", "loc0", ".", "get", "(", "Calendar", ".", "SECOND", ")", "+", "(", "loc0", ".", "get", "(", "Calendar", ".", "MILLISECOND", ")", "/", "1000.0", ")", ";", "setHour", "(", "loc0", ".", "get", "(", "Calendar", ".", "HOUR_OF_DAY", ")", ")", ";", "setMinutes", "(", "loc0", ".", "get", "(", "Calendar", ".", "MINUTE", ")", ")", ";", "setSeconds", "(", "loc1", ")", ";", "}"], "nl": "Set the time by  {@link java.util.Date}. The date information of is ignored, only hours, minutes and seconds are relevant. Notice also that time zone offset is not affected by this method because {@link java.util.Date} does not contain zone offset.", "nlToks": ["Set", "the", "time", "by", "-LCB-", "@link", "java.util.Date", "-RCB-", ".", "The", "date", "information", "of", "is", "ignored", ",", "only", "hours", ",", "minutes", "and", "seconds", "are", "relevant", ".", "Notice", "also", "that", "time", "zone", "offset", "is", "not", "affected", "by", "this", "method", "because", "-LCB-", "@link", "java.util.Date", "-RCB-", "does", "not", "contain", "zone", "offset", "."], "path": "pkoziol/marine-api/tree/master/src/main/java/net/sf/marineapi/nmea/util/Time.java", "idx": 2557}
{"memberVariables": {"TAG_OPEN=Pattern.compile(\"\\\\[([^\\\\]/]+[^\\\\]]*)\\\\]\")": "Pattern", "builder": "SpannableStringBuilder", "BULLET_LIST=\"[*]\"": "String", "NUM_LIST=\"[#]\"": "String", "tagStyles": "Map<String,TagStyle>", "TAG_CLOSE=Pattern.compile(\"\\\\[/([^\\\\]/]+)\\\\]\")": "Pattern"}, "code": ["void", "function", "(", "Stack", "<", "Tag", ">", "tags", ")", "{", "while", "(", "!", "tags", ".", "empty", "(", ")", ")", "{", "Tag", "t", "=", "tags", ".", "pop", "(", ")", ";", "t", ".", "end", "=", "builder", ".", "length", "(", ")", ";", "Spannable", "styled", "=", "tagStyles", ".", "get", "(", "t", ".", "tag", ")", ".", "getStyle", "(", "t", ".", "param", ",", "builder", ".", "subSequence", "(", "t", ".", "start", "+", "t", ".", "tagLength", ",", "t", ".", "end", ")", ")", ";", "builder", ".", "replace", "(", "t", ".", "start", ",", "t", ".", "end", ",", "styled", ")", ";", "}", "}"], "memberFunctions": {"parseNumberedList": [["void"]], "openTag": [["int", "Stack<Tag> tags", "Tag tag"]], "parseBulletLists": [["void"]], "getOffset": [["int", "Tag t", "CharSequence styled"]], "parsePlainUrls": [["void"]], "closeTags": [["int", "Stack<Tag> tags", "String tag", "int start"]], "parseHiddenTag": [["int", "Tag t"]], "indexOf": [["int", "SpannableStringBuilder ssb", "String str", "int start"], ["int", "SpannableStringBuilder ssb", "String str"]], "parsebb": [["CharSequence", "String bbText"]]}, "className": "WhatBBParser", "renamed": ["void", "function", "(", "Stack", "<", "Tag", ">", "arg0", ")", "{", "while", "(", "!", "arg0", ".", "empty", "(", ")", ")", "{", "Tag", "loc0", "=", "arg0", ".", "pop", "(", ")", ";", "loc0", ".", "end", "=", "builder", ".", "length", "(", ")", ";", "Spannable", "loc1", "=", "tagStyles", ".", "get", "(", "loc0", ".", "tag", ")", ".", "getStyle", "(", "loc0", ".", "param", ",", "builder", ".", "subSequence", "(", "loc0", ".", "start", "+", "loc0", ".", "tagLength", ",", "loc0", ".", "end", ")", ")", ";", "builder", ".", "replace", "(", "loc0", ".", "start", ",", "loc0", ".", "end", ",", "loc1", ")", ";", "}", "}"], "nl": "Close all tags in the stack and end them at the end of the builder. Used to close any remaining open tags at the end of parsing, since these tags should run to the end of the text", "nlToks": ["Close", "all", "tags", "in", "the", "stack", "and", "end", "them", "at", "the", "end", "of", "the", "builder", ".", "Used", "to", "close", "any", "remaining", "open", "tags", "at", "the", "end", "of", "parsing", ",", "since", "these", "tags", "should", "run", "to", "the", "end", "of", "the", "text"], "path": "philipbjorge/WhatAndroid/tree/master/WhatAndroid/src/main/java/what/whatandroid/comments/WhatBBParser.java", "idx": 2558}
{"memberVariables": {"GBF_SEARCH=4": "int", "ASTAR_SEARCH=5": "int", "instance": "SearchFactory", "UC_SEARCH=3": "int", "GRAPH_SEARCH=1": "int", "HILL_SEARCH=7": "int", "BF_SEARCH=1": "int", "ID_SEARCH=2": "int", "TREE_SEARCH=0": "int", "RBF_SEARCH=6": "int", "DF_SEARCH=0": "int"}, "code": ["String", "[", "]", "function", "(", ")", "{", "return", "new", "String", "[", "]", "{", "\"Depth First\"", ",", "\"Breadth First\"", ",", "\"Iterative Deepening\"", ",", "\"Uniform Cost\"", ",", "\"Greedy Best First\"", ",", "\"A*\"", ",", "\"Recursive Best First\"", ",", "\"Hill Climbing\"", "}", ";", "}"], "memberFunctions": {"getSearchModeNames": [["String[]"]], "getInstance": [["SearchFactory"]], "createSearch": [["Search", "int strategy", "int mode", "HeuristicFunction hf"]]}, "className": "SearchFactory", "renamed": ["String", "[", "]", "function", "(", ")", "{", "return", "new", "String", "[", "]", "{", "\"srini_string\"", ",", "\"srini_string\"", ",", "\"srini_string\"", ",", "\"srini_string\"", ",", "\"srini_string\"", ",", "\"srini_string\"", ",", "\"srini_string\"", ",", "\"srini_string\"", "}", ";", "}"], "nl": "Returns the names of all search strategies, which are supported by this factory. The indices correspond to the parameter values of method {@link #createSearch(int,int,HeuristicFunction)}.", "nlToks": ["Returns", "the", "names", "of", "all", "search", "strategies", ",", "which", "are", "supported", "by", "this", "factory", ".", "The", "indices", "correspond", "to", "the", "parameter", "values", "of", "method", "-LCB-", "@link", "#createSearch", "-LRB-", "int", ",", "int", ",", "HeuristicFunction", "-RRB-", "-RCB-", "."], "path": "peterplupo/ia201102/tree/master/trabalho1/aima-gui/src/main/java/aima/gui/applications/search/map/SearchFactory.java", "idx": 2560}
{"memberVariables": {"predicate": "String", "subject": "String", "object": "String", "objectType": "TripleObjectTypeEnum"}, "code": ["void", "function", "(", "String", "object", ")", "{", "this", ".", "object", "=", "object", ";", "}"], "memberFunctions": {"setObjectType": [["void", "TripleObjectTypeEnum objectType"]], "getSubject": [["String"]], "setSubject": [["void", "String subject"]], "setPredicate": [["void", "String predicate"]], "getObject": [["String"]], "getPredicate": [["String"]], "getObjectType": [["TripleObjectTypeEnum"]]}, "className": "Triple", "renamed": ["void", "function", "(", "String", "arg0", ")", "{", "this", ".", "object", "=", "arg0", ";", "}"], "nl": "Set the object.", "nlToks": ["Set", "the", "object", "."], "path": "plt-tud/r43ples/tree/master/src/main/java/de/tud/plt/r43ples/merging/model/structure/Triple.java", "idx": 2561}
{"memberVariables": {"next": "ValueHolder", "holderTail=holderHead": "ValueHolder", "name": "String", "className": "String", "omitNullValues=false": "boolean", "holderHead=new ValueHolder()": "ValueHolder", "value": "Object"}, "code": ["ToStringHelper", "function", "(", "long", "value", ")", "{", "return", "addHolder", "(", "String", ".", "valueOf", "(", "value", ")", ")", ";", "}"], "memberFunctions": {"add": [["ToStringHelper", "String name", "@Nullable Object value"], ["ToStringHelper", "String name", "boolean value"], ["ToStringHelper", "String name", "char value"], ["ToStringHelper", "String name", "double value"], ["ToStringHelper", "String name", "float value"], ["ToStringHelper", "String name", "int value"], ["ToStringHelper", "String name", "long value"]], "omitNullValues": [["ToStringHelper"]], "addHolder": [["ValueHolder"], ["ToStringHelper", "@Nullable Object value"], ["ToStringHelper", "String name", "@Nullable Object value"]], "firstNonNull": [["T", "@Nullable T first", "@Nullable T second"]], "toStringHelper": [["ToStringHelper", "Object self"], ["ToStringHelper", "Class<?> clazz"], ["ToStringHelper", "String className"]], "toString": [["String"]]}, "className": "MoreObjects", "renamed": ["ToStringHelper", "function", "(", "long", "arg0", ")", "{", "return", "addHolder", "(", "String", ".", "valueOf", "(", "arg0", ")", ")", ";", "}"], "nl": "Adds an unnamed value to the formatted output. It is strongly encouraged to use  {@link #add(String,long)} instead and give value areadable name.", "nlToks": ["Adds", "an", "unnamed", "value", "to", "the", "formatted", "output", ".", "It", "is", "strongly", "encouraged", "to", "use", "-LCB-", "@link", "#add", "-LRB-", "String", ",", "long", "-RRB-", "-RCB-", "instead", "and", "give", "value", "areadable", "name", "."], "path": "hazendaz/guava/tree/master/guava/src/com/google/common/base/MoreObjects.java", "idx": 2563}
{"memberVariables": {"conduitSelector": "ConduitSelector", "requestContext=new HashMap<String,Object>()": "Map<String,Object>", "bus": "Bus", "inInterceptors=new ModCountCopyOnWriteArrayList<Interceptor<? extends Message>>()": "List<Interceptor<? extends Message>>", "synchronousTimeout=60000": "long", "outInterceptors=new ModCountCopyOnWriteArrayList<Interceptor<? extends Message>>()": "List<Interceptor<? extends Message>>", "LOG=LogUtils.getL7dLogger(ClientConfiguration.class)": "Logger", "inFault=new ModCountCopyOnWriteArrayList<Interceptor<? extends Message>>()": "List<Interceptor<? extends Message>>", "responseContext=new HashMap<String,Object>()": "Map<String,Object>", "outFault=new ModCountCopyOnWriteArrayList<Interceptor<? extends Message>>()": "List<Interceptor<? extends Message>>"}, "code": ["HTTPConduit", "function", "(", ")", "{", "Conduit", "conduit", "=", "getConduit", "(", ")", ";", "return", "conduit", "instanceof", "HTTPConduit", "?", "(", "HTTPConduit", ")", "conduit", ":", "null", ";", "}"], "memberFunctions": {"getBus": [["Bus"]], "getOutFaultInterceptors": [["List<Interceptor<? extends Message>>"]], "getEndpoint": [["Endpoint"]], "getSynchronousTimeout": [["long"]], "setConduitSelector": [["void", "ConduitSelector cs"]], "setOutInterceptors": [["void", "List<Interceptor<? extends Message>> interceptors"]], "getInInterceptors": [["List<Interceptor<? extends Message>>"]], "getResponseContext": [["Map<String,Object>"]], "isResponseExpectedForOneway": [["boolean"]], "setOutFaultInterceptors": [["void", "List<Interceptor<? extends Message>> interceptors"]], "getConduit": [["Conduit"]], "setSynchronousTimeout": [["void", "long synchronousTimeout"]], "getConduitSelector": [["ConduitSelector"]], "getInFaultInterceptors": [["List<Interceptor<? extends Message>>"]], "getOutInterceptors": [["List<Interceptor<? extends Message>>"]], "setInInterceptors": [["void", "List<Interceptor<? extends Message>> interceptors"]], "getRequestContext": [["Map<String,Object>"]], "setInFaultInterceptors": [["void", "List<Interceptor<? extends Message>> interceptors"]], "setBus": [["void", "Bus bus"]], "prepareConduitSelector": [["void", "Message message"]]}, "className": "ClientConfiguration", "renamed": ["HTTPConduit", "function", "(", ")", "{", "Conduit", "loc0", "=", "getConduit", "(", ")", ";", "return", "loc0", "instanceof", "HTTPConduit", "?", "(", "HTTPConduit", ")", "loc0", ":", "null", ";", "}"], "nl": "Gets the HTTP conduit responsible for a transport-level communication with the remote service.", "nlToks": ["Gets", "the", "HTTP", "conduit", "responsible", "for", "a", "transport-level", "communication", "with", "the", "remote", "service", "."], "path": "primesign/cxf/tree/master/rt/rs/client/src/main/java/org/apache/cxf/jaxrs/client/ClientConfiguration.java", "idx": 2565}
{"memberVariables": {"mode": "int", "buffer=null": "ByteBuffer", "allocator": "ByteBufferAllocator", "OUTPUT_MODE=1": "int", "INPUT_MODE=0": "int"}, "code": ["int", "function", "(", ")", "{", "setInputMode", "(", ")", ";", "return", "this", ".", "buffer", ".", "remaining", "(", ")", ";", "}"], "memberFunctions": {"expandCapacity": [["void", "int capacity"]], "setOutputMode": [["void"]], "expand": [["void"]], "setInputMode": [["void"]], "hasData": [["boolean"]], "length": [["int"]], "clear": [["void"]], "toString": [["String"]], "getMode": [["int"]], "ensureCapacity": [["void", "int requiredCapacity"]], "capacity": [["int"]]}, "className": "ExpandableBuffer", "renamed": ["int", "function", "(", ")", "{", "setInputMode", "(", ")", ";", "return", "this", ".", "buffer", ".", "remaining", "(", ")", ";", "}"], "nl": "Returns available capacity of this buffer.", "nlToks": ["Returns", "available", "capacity", "of", "this", "buffer", "."], "path": "pritamkhose/open-gpstracker.code/tree/master/external_sources/httpcore-4.1.1/httpcore-nio/src/main/java/org/apache/http/nio/util/ExpandableBuffer.java", "idx": 2567}
{"memberVariables": {"isServerPrincipalPasswordEncrypted=true": "boolean", "serverPrincipalPassword": "String", "trustStores": "String", "allowedRoles": "String", "keyAlias": "String", "privateStore": "String"}, "code": ["String", "function", "(", ")", "{", "if", "(", "keyAlias", "==", "null", ")", "{", "ServerConfiguration", "serverConfig", "=", "ServerConfiguration", ".", "getInstance", "(", ")", ";", "return", "serverConfig", ".", "getFirstProperty", "(", "\"Security.KeyStore.KeyAlias\"", ")", ";", "}", "return", "keyAlias", ";", "}"], "memberFunctions": {"getTrustStores": [["String"]], "setTrustStores": [["void", "String trustStores"]], "getServerPrincipalPassword": [["String"]], "setKeyAlias": [["void", "String keyAlias"]], "setServerPrincipalPassword": [["void", "String serverPrincipalPassword"]], "getPrivateStore": [["String"]], "getAllowedRoles": [["String"]], "setPrivateStore": [["void", "String privateStore"]], "setAllowedRoles": [["void", "String allowedRoles"]], "setServerPrincipalPasswordEncrypted": [["void", "boolean isServerPrincipalPasswordEncrypted"]], "isServerPrincipalPasswordEncrypted": [["boolean"]]}, "className": "SecurityConfigParams", "renamed": ["String", "function", "(", ")", "{", "if", "(", "keyAlias", "==", "null", ")", "{", "ServerConfiguration", "loc0", "=", "ServerConfiguration", ".", "getInstance", "(", ")", ";", "return", "loc0", ".", "getFirstProperty", "(", "\"srini_string\"", ")", ";", "}", "return", "keyAlias", ";", "}"], "nl": "Get the private key alias If the key alias is defined in the Security configuration take it from there otherwise key alias is taken from the Server Configuration", "nlToks": ["Get", "the", "private", "key", "alias", "If", "the", "key", "alias", "is", "defined", "in", "the", "Security", "configuration", "take", "it", "from", "there", "otherwise", "key", "alias", "is", "taken", "from", "the", "Server", "Configuration"], "path": "harsha1979/carbon-identity/tree/master/components/security-mgt/org.wso2.carbon.security.mgt/src/main/java/org/wso2/carbon/security/SecurityConfigParams.java", "idx": 2568}
{"memberVariables": {}, "code": ["float", "function", "(", "double", "topLength", ",", "double", "bottomLength", ",", "double", "height", ")", "{", "return", "(", "float", ")", "(", "(", ".5", "*", "height", ")", "*", "(", "topLength", "+", "bottomLength", ")", ")", ";", "}"], "memberFunctions": {"getLatitudeCircum": [["float", "double latitude", "double earthRadius"]], "getTrapezoidSideLen": [["float", "double topLength", "double bottomLength", "double height"]], "getDistToEquator": [["float", "double latitude", "double earthRadius"]]}, "className": "Util", "renamed": ["float", "function", "(", "double", "arg0", ",", "double", "arg1", ",", "double", "arg2", ")", "{", "return", "(", "float", ")", "(", "(", ".5", "*", "arg2", ")", "*", "(", "arg0", "+", "arg1", ")", ")", ";", "}"], "nl": "Computes the area of a trapezoid. All the lengths should be of the same unit of measure.", "nlToks": ["Computes", "the", "area", "of", "a", "trapezoid", ".", "All", "the", "lengths", "should", "be", "of", "the", "same", "unit", "of", "measure", "."], "path": "pmaserrat/HeatedEarth/tree/master/heated-earth/src/presentation/earth/Util.java", "idx": 2569}
{"memberVariables": {"logger": "Logger", "overrides=new Properties()": "Properties", "removals=new TreeSet<String>()": "Set<String>"}, "code": ["Map", "<", "String", ",", "String", ">", "function", "(", "String", "name", ")", "{", "Map", "<", "String", ",", "String", ">", "map", "=", "new", "LinkedHashMap", "<", "String", ",", "String", ">", "(", ")", ";", "for", "(", "String", "string", ":", "getStrings", "(", "name", ")", ")", "{", "String", "[", "]", "kvp", "=", "string", ".", "split", "(", "\"=\"", ",", "2", ")", ";", "String", "key", "=", "kvp", "[", "0", "]", ";", "String", "value", "=", "kvp", "[", "1", "]", ";", "map", ".", "put", "(", "key", ",", "value", ")", ";", "}", "return", "map", ";", "}"], "memberFunctions": {"read": [["Properties"]], "getFilesize": [["int", "String name", "int defaultValue"], ["long", "String key", "long defaultValue"]], "getSettings": [["Properties"]], "getInteger": [["int", "String name", "int defaultValue"]], "hasSettings": [["boolean", "String key"]], "getString": [["String", "String name", "String defaultValue"]], "removeSetting": [["void", "String key"]], "saveSettings": [["boolean"], ["boolean", "Map<String,String> updatedSettings"]], "getStrings": [["List<String>", "String name"], ["List<String>", "String name", "String separator"]], "overrideSetting": [["void", "String key", "String value"], ["void", "String key", "int value"], ["void", "String key", "boolean value"]], "getLong": [["long", "String name", "long defaultValue"]], "getChar": [["char", "String name", "char defaultValue"]], "getRequiredString": [["String", "String name"]], "getAllKeys": [["List<String>", "String startingWith"]], "merge": [["void", "IStoredSettings settings"]], "getBoolean": [["boolean", "String name", "boolean defaultValue"]], "getIntegers": [["List<Integer>", "String name"], ["List<Integer>", "String name", "String separator"]]}, "className": "IStoredSettings", "renamed": ["Map", "<", "String", ",", "String", ">", "function", "(", "String", "arg0", ")", "{", "Map", "<", "String", ",", "String", ">", "loc0", "=", "new", "LinkedHashMap", "<", "String", ",", "String", ">", "(", ")", ";", "for", "(", "String", "loc1", ":", "getStrings", "(", "arg0", ")", ")", "{", "String", "[", "]", "loc2", "=", "loc1", ".", "split", "(", "\"srini_string\"", ",", "2", ")", ";", "String", "loc3", "=", "loc2", "[", "0", "]", ";", "String", "loc4", "=", "loc2", "[", "1", "]", ";", "loc0", ".", "put", "(", "loc3", ",", "loc4", ")", ";", "}", "return", "loc0", ";", "}"], "nl": "Returns a map of strings from the specified key.", "nlToks": ["Returns", "a", "map", "of", "strings", "from", "the", "specified", "key", "."], "path": "pombreda/gitblit/tree/master/src/main/java/com/gitblit/IStoredSettings.java", "idx": 2570}
{"memberVariables": {"theInstance": "ProjectActions", "removeFromDiagram=new ActionRemoveFromDiagram(Translator.localize(\"action.remove-from-diagram\"))": "ActionRemoveFromDiagram", "redoAction": "AbstractAction", "undoAction": "ActionUndo"}, "code": ["AbstractAction", "function", "(", ")", "{", "return", "undoAction", ";", "}"], "memberFunctions": {"determineRemoveEnabled": [["void"]], "targetSet": [["void", "TargetEvent e"]], "jumpToDiagramShowing": [["void", "List targets"]], "getRedoAction": [["AbstractAction"]], "targetRemoved": [["void", "TargetEvent e"]], "getRemoveFromDiagramAction": [["AbstractAction"]], "setTarget": [["void", "Object o"]], "propertyChange": [["void", "final PropertyChangeEvent evt"]], "getInstance": [["ProjectActions"]], "targetAdded": [["void", "TargetEvent e"]]}, "className": "ProjectActions", "renamed": ["AbstractAction", "function", "(", ")", "{", "return", "undoAction", ";", "}"], "nl": "Get the action that can undo the last user interaction on this project.", "nlToks": ["Get", "the", "action", "that", "can", "undo", "the", "last", "user", "interaction", "on", "this", "project", "."], "path": "pichiliani/CoArgoUML/tree/master/v0.24/fonte/src/argouml-app/src/org/argouml/ui/ProjectActions.java", "idx": 2571}
{"memberVariables": {"events=new ArrayList<SentenceEvent>()": "List<SentenceEvent>", "reader": "SentenceReader", "listeners=new ArrayList<ProviderListener<T>>()": "List<ProviderListener<T>>"}, "code": ["void", "function", "(", "T", "event", ")", "{", "for", "(", "ProviderListener", "<", "T", ">", "listener", ":", "listeners", ")", "{", "listener", ".", "providerUpdate", "(", "event", ")", ";", "}", "}"], "memberFunctions": {"readingStopped": [["void"]], "hasAll": [["boolean", "String... id"]], "createProviderEvent": [["T"]], "isReady": [["boolean"]], "isValid": [["boolean"]], "hasOne": [["boolean", "String... id"]], "readingStarted": [["void"]], "removeListener": [["void", "ProviderListener<T> listener"]], "readingPaused": [["void"]], "reset": [["void"]], "sentenceRead": [["void", "SentenceEvent event"]], "getSentences": [["List<Sentence>"]], "addListener": [["void", "ProviderListener<T> listener"]], "validate": [["boolean"]]}, "className": "AbstractProvider", "renamed": ["void", "function", "(", "T", "arg0", ")", "{", "for", "(", "ProviderListener", "<", "T", ">", "loc0", ":", "listeners", ")", "{", "loc0", ".", "providerUpdate", "(", "arg0", ")", ";", "}", "}"], "nl": "Dispatch the TPV event to all listeners.", "nlToks": ["Dispatch", "the", "TPV", "event", "to", "all", "listeners", "."], "path": "pkoziol/marine-api/tree/master/src/main/java/net/sf/marineapi/provider/AbstractProvider.java", "idx": 2573}
{"memberVariables": {"COLLECTION_INTERFACES_BY_NAMES=new TypeMap(new Class[]{java.util.List.class,java.util.Collection.class,java.util.Map.class,java.util.Set.class})": "TypeMap", "COLLECTION_CLASSES_BY_NAMES=new TypeMap(new Class[]{java.util.ArrayList.class,java.util.LinkedList.class,java.util.Vector.class,java.util.HashMap.class,java.util.LinkedHashMap.class,java.util.TreeMap.class,java.util.TreeSet.class,java.util.HashSet.class,java.util.LinkedHashSet.class,java.util.Hashtable.class})": "TypeMap"}, "code": ["int", "function", "(", "Collection", "<", "String", ">", "source", ",", "Collection", "<", "String", ">", "target", ")", "{", "int", "added", "=", "0", ";", "for", "(", "String", "item", ":", "source", ")", "{", "if", "(", "target", ".", "contains", "(", "item", ")", ")", "{", "continue", ";", "}", "target", ".", "add", "(", "item", ")", ";", "added", "++", ";", "}", "return", "added", ";", "}"], "memberFunctions": {"areEqual": [["boolean", "Object value", "Object otherValue"]], "areSemanticEquals": [["boolean", "T[] a", "T[] b"]], "valuesAreTransitivelyEqual": [["boolean", "Object[] thisArray", "Object[] thatArray"]], "isCollectionType": [["boolean", "String typeName", "boolean includeInterfaces"], ["boolean", "Class<?> clazzType", "boolean includeInterfaces"]], "isEmpty": [["boolean", "Object[] items"]], "isNotEmpty": [["boolean", "Object[] items"]], "getCollectionTypeFor": [["Class<?>", "String shortName"]], "asSet": [["Set<T>", "T[] items"]], "invertedMapFrom": [["Map<V,K>", "Map<K,V> source"]], "arraysAreEqual": [["boolean", "Object value", "Object otherValue"]], "mapFrom": [["Map<K,V>", "K[] keys", "V[] values"]]}, "className": "CollectionUtil", "renamed": ["int", "function", "(", "Collection", "<", "String", ">", "arg0", ",", "Collection", "<", "String", ">", "arg1", ")", "{", "int", "loc0", "=", "0", ";", "for", "(", "String", "loc1", ":", "arg0", ")", "{", "if", "(", "arg1", ".", "contains", "(", "loc1", ")", ")", "{", "continue", ";", "}", "arg1", ".", "add", "(", "loc1", ")", ";", "loc0", "++", ";", "}", "return", "loc0", ";", "}"], "nl": "Add elements from the source to the target as long as they don't already exist there. Return the number of items actually added.", "nlToks": ["Add", "elements", "from", "the", "source", "to", "the", "target", "as", "long", "as", "they", "do", "n't", "already", "exist", "there", ".", "Return", "the", "number", "of", "items", "actually", "added", "."], "path": "adangel/pmd/tree/master/pmd-core/src/main/java/net/sourceforge/pmd/util/CollectionUtil.java", "idx": 2574}
{"memberVariables": {"data": "Map<O,DocumentElement<O>>", "wordCountMultiSet": "int", "name": "String", "count": "IntegerHolder", "object": "T"}, "code": ["void", "function", "(", "O", "word", ")", "{", "DocumentElement", "<", "O", ">", "r", "=", "data", ".", "get", "(", "word", ")", ";", "if", "(", "r", "==", "null", ")", "{", "r", "=", "new", "DocumentElement", "<", "O", ">", "(", "word", ",", "new", "IntegerHolder", "(", "0", ")", ")", ";", "data", ".", "put", "(", "word", ",", "r", ")", ";", "}", "r", ".", "inc", "(", ")", ";", "wordCountMultiSet", "++", ";", "}"], "memberFunctions": {"multiSetSize": [["int"]], "iterator": [["Iterator<DocumentElement<O>>"]], "getObject": [["T"]], "getName": [["String"]], "size": [["int"]], "setWord": [["void", "O word", "int multiplicity"]], "getCount": [["int"]], "inc": [["void"]]}, "className": "Document", "renamed": ["void", "function", "(", "O", "arg0", ")", "{", "DocumentElement", "<", "O", ">", "loc0", "=", "data", ".", "get", "(", "arg0", ")", ";", "if", "(", "loc0", "==", "null", ")", "{", "loc0", "=", "new", "DocumentElement", "<", "O", ">", "(", "arg0", ",", "new", "IntegerHolder", "(", "0", ")", ")", ";", "data", ".", "put", "(", "arg0", ",", "loc0", ")", ";", "}", "loc0", ".", "inc", "(", ")", ";", "wordCountMultiSet", "++", ";", "}"], "nl": "Adds a word to the document.", "nlToks": ["Adds", "a", "word", "to", "the", "document", "."], "path": "pombreda/furia-chan/tree/master/src/main/java/org/kit/furia/Document.java", "idx": 2575}
{"memberVariables": {"handlerClass": "FullyQualifiedClassType", "soapRole": "List<CString>", "initParam": "List<ParamValueType>", "displayName": "List<DisplayNameType>", "soapHeader": "List<XsdQNameType>", "icon": "List<IconType>", "description": "List<DescriptionType>", "handlerName": "CString", "id": "java.lang.String"}, "code": ["void", "function", "(", "FullyQualifiedClassType", "value", ")", "{", "this", ".", "handlerClass", "=", "value", ";", "}"], "memberFunctions": {"getInitParam": [["List<ParamValueType>"]], "getDisplayName": [["List<DisplayNameType>"]], "setHandlerName": [["void", "CString value"]], "setId": [["void", "java.lang.String value"]], "getHandlerName": [["CString"]], "getHandlerClass": [["FullyQualifiedClassType"]], "getId": [["java.lang.String"]], "getSoapRole": [["List<CString>"]], "getDescription": [["List<DescriptionType>"]], "getSoapHeader": [["List<XsdQNameType>"]], "getIcon": [["List<IconType>"]]}, "className": "PortComponentHandlerType", "renamed": ["void", "function", "(", "FullyQualifiedClassType", "arg0", ")", "{", "this", ".", "handlerClass", "=", "arg0", ";", "}"], "nl": "Sets the value of the handlerClass property.", "nlToks": ["Sets", "the", "value", "of", "the", "handlerClass", "property", "."], "path": "primesign/cxf/tree/master/rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/handler/types/PortComponentHandlerType.java", "idx": 2576}
{"memberVariables": {"triples": "HashMap<String,TripleIndividualStructure>", "individualUri": "String"}, "code": ["String", "function", "(", ")", "{", "return", "individualUri", ";", "}"], "memberFunctions": {"removeTriple": [["void", "String identifier"]], "setIndividualUri": [["void", "String individualUri"]], "setTriples": [["void", "HashMap<String,TripleIndividualStructure> triples"]], "getTriples": [["HashMap<String,TripleIndividualStructure>"]], "addTriple": [["void", "String identifier", "TripleIndividualStructure triple"]]}, "className": "IndividualStructure", "renamed": ["String", "function", "(", ")", "{", "return", "individualUri", ";", "}"], "nl": "Get the individual URI.", "nlToks": ["Get", "the", "individual", "URI", "."], "path": "plt-tud/r43ples/tree/master/src/main/java/de/tud/plt/r43ples/merging/model/structure/IndividualStructure.java", "idx": 2578}
{"memberVariables": {"appName=\"JaMuz\"": "String", "logger=null": "Logger"}, "code": ["void", "function", "(", "String", "str", ")", "{", "javax", ".", "swing", ".", "JOptionPane", ".", "showMessageDialog", "(", "null", ",", "str", ",", "appName", ",", "JOptionPane", ".", "INFORMATION_MESSAGE", ")", ";", "}"], "memberFunctions": {"setLogger": [["void", "Logger logger"]], "popupError": [["void", "String str"]], "warning": [["void", "String str"]], "error": [["void", "String str"], ["void", "String str", "Exception ex"], ["void", "Exception ex"], ["void", "String methodName", "String sql", "Exception ex"]]}, "className": "Popup", "renamed": ["void", "function", "(", "String", "arg0", ")", "{", "javax", ".", "swing", ".", "JOptionPane", ".", "showMessageDialog", "(", "null", ",", "arg0", ",", "appName", ",", "JOptionPane", ".", "INFORMATION_MESSAGE", ")", ";", "}"], "nl": "Popup an info to the user (ex: \"Process complete.\")", "nlToks": ["Popup", "an", "info", "to", "the", "user", "-LRB-", "ex", ":", "``", "Process", "complete", ".", "''", "-RRB-"], "path": "phramusca/JaMuz/tree/master/src/jamuz/utils/Popup.java", "idx": 2581}
{"memberVariables": {"formatOff": "int", "isRaw": "boolean", "formatRepeatCount": "int", "format": "String"}, "code": ["int", "function", "(", ")", "{", "return", "format", ".", "length", "(", ")", "-", "formatOff", "+", "formatRepeatCount", ";", "}"], "memberFunctions": {"checkType": [["void", "char asking", "boolean consume"]], "getType": [["char"]], "getLengthFromFormat": [["int", "boolean advance"]], "reset": [["void"]], "toString": [["String"]], "consume": [["void"]], "getIntFromFormat": [["int", "boolean advance"]], "hasLength": [["boolean"]]}, "className": "PackFormatInputStream", "renamed": ["int", "function", "(", ")", "{", "return", "format", ".", "length", "(", ")", "-", "formatOff", "+", "formatRepeatCount", ";", "}"], "nl": "Returns the approximate count of elements left in the format. This method does not account for repeat counts or string length encodings - so should be used as a guide only.", "nlToks": ["Returns", "the", "approximate", "count", "of", "elements", "left", "in", "the", "format", ".", "This", "method", "does", "not", "account", "for", "repeat", "counts", "or", "string", "length", "encodings", "-", "so", "should", "be", "used", "as", "a", "guide", "only", "."], "path": "adamlsd/mongo/tree/master/src/third_party/wiredtiger/lang/java/src/com/wiredtiger/db/PackFormatInputStream.java", "idx": 2583}
{"memberVariables": {"sSEPARATOR=0x00": "byte", "mThrown=ExpectedException.none()": "ExpectedException", "mPlainSaslServer=null": "PlainSaslServer"}, "code": ["void", "function", "(", ")", "{", "mPlainSaslServer", "=", "new", "PlainSaslServer", "(", "new", "MockCallbackHandler", "(", ")", ")", ";", "}"], "memberFunctions": {"authenticationNotComplete": [["void"]], "unauthorizedCallback": [["void"]], "userPasswordReceive": [["void"]], "passwordIsNotSet": [["void"]], "userIsNotSet": [["void"]], "handle": [["void", "Callback[] callbacks"], ["void", "Callback[] callbacks"]], "getUserInfo": [["byte[]", "String user", "String password"]]}, "className": "PlainSaslServerTest", "renamed": ["void", "function", "(", ")", "{", "mPlainSaslServer", "=", "new", "PlainSaslServer", "(", "new", "MockCallbackHandler", "(", ")", ")", ";", "}"], "nl": "Sets up the server before a test runs.", "nlToks": ["Sets", "up", "the", "server", "before", "a", "test", "runs", "."], "path": "poemlin/alluxio/tree/master/core/common/src/test/java/alluxio/security/authentication/PlainSaslServerTest.java", "idx": 2584}
{"memberVariables": {"sequences=new ArrayList<SequenceWithUtility>()": "List<SequenceWithUtility>"}, "code": ["List", "<", "SequenceWithUtility", ">", "function", "(", ")", "{", "return", "sequences", ";", "}"], "memberFunctions": {"printDatabaseStats": [["void"]], "print": [["void"]], "size": [["int"]], "getSequenceIDs": [["Set<Integer>"]], "loadFile": [["void", "String path", "int maximumNumberOfSequences"]], "toString": [["String"]], "addSequence": [["void", "String[] tokens"], ["void", "SequenceWithUtility sequence"]]}, "className": "SequenceDatabaseWithUtility", "renamed": ["List", "<", "SequenceWithUtility", ">", "function", "(", ")", "{", "return", "sequences", ";", "}"], "nl": "Get the sequences from this sequence database.", "nlToks": ["Get", "the", "sequences", "from", "this", "sequence", "database", "."], "path": "prateek96/Data_Mining_Assignments/tree/master/Assignment_1/Assignment-1.11/husrm/SequenceDatabaseWithUtility.java", "idx": 2586}
{"memberVariables": {"NAME=\"name\"": "String", "FAULT=\"fault\"": "String", "MEMBER=\"member\"": "String", "tz": "TimeZone", "values=new ArrayList<>()": "ArrayList<Object>", "VALUE=\"value\"": "String"}, "code": ["Boolean", "function", "(", "int", "index", ")", "{", "Object", "val", "=", "values", ".", "get", "(", "index", ")", ";", "if", "(", "val", "instanceof", "Boolean", ")", "{", "return", "(", "Boolean", ")", "val", ";", "}", "else", "{", "throw", "new", "IllegalStateException", "(", ")", ";", "}", "}"], "memberFunctions": {"getStringValue": [["String", "int index"]], "parseArray": [["ArrayList<Object>", "Node valueNode"]], "getValues": [["List"]], "getStructValue": [["Map<String,Object>", "int index"]], "getDoubleValue": [["Double", "int index"]], "getValueCount": [["int"]], "parse": [["void", "Document doc"]], "getIntegerValue": [["Integer", "int index"]], "parseStruct": [["HashMap<String,Object>", "Node valueNode"]], "getArrayValue": [["List<Object>", "int index"]], "parseValue": [["Object", "Node valueNode"]], "getBinaryValue": [["byte[]", "int index"]], "getDateValue": [["Date", "int index"]]}, "className": "XMLRPCResult", "renamed": ["Boolean", "function", "(", "int", "arg0", ")", "{", "Object", "loc0", "=", "values", ".", "get", "(", "arg0", ")", ";", "if", "(", "loc0", "instanceof", "Boolean", ")", "{", "return", "(", "Boolean", ")", "loc0", ";", "}", "else", "{", "throw", "new", "IllegalStateException", "(", ")", ";", "}", "}"], "nl": "Returns result value as boolean.", "nlToks": ["Returns", "result", "value", "as", "boolean", "."], "path": "petr-panteleyev/java-xmlrpc/tree/master/src/main/java/org/panteleyev/xmlrpc/XMLRPCResult.java", "idx": 2587}
{"memberVariables": {"mobileViewStartY=-1": "int", "activity": "Activity", "displayMetrics": "DisplayMetrics", "enabled=true": "boolean", "mobileViewCurrentPos=-1": "int", "LOG_TAG=\"DRAG-DROP\"": "String", "MOVE_DURATION=150": "int", "activePointerId": "int", "mobileView": "View", "dragging": "boolean", "dragHighlight": "Drawable", "recyclerView": "RecyclerView", "scrollAmount": "int", "downY=-1": "int", "downX=-1": "int"}, "code": ["void", "function", "(", "boolean", "enabled", ")", "{", "this", ".", "enabled", "=", "enabled", ";", "}"], "memberFunctions": {"cancel": [["boolean", "MotionEvent event"]], "onInterceptTouchEvent": [["boolean", "RecyclerView recyclerView", "MotionEvent event"]], "move": [["boolean", "MotionEvent event"]], "onItemDrop": [["void", "RecyclerView recyclerView", "int position"]], "onTouchEvent": [["void", "RecyclerView view", "MotionEvent event"]], "scrollIfNeeded": [["boolean"]], "getViewRawCoords": [["int[]", "View locateView"]], "down": [["boolean", "MotionEvent event"]], "getViewByPosition": [["View", "int position"]], "switchViewsIfNeeded": [["void"]], "doSwitch": [["void", "final View switchView", "final int originalViewPos", "final int switchViewPos"]], "startDrag": [["void"]], "copyViewAsImage": [["ImageView", "View v"]], "reset": [["void"]], "up": [["boolean", "MotionEvent event"]], "onItemSwitch": [["void", "RecyclerView recyclerView", "int from", "int to"]], "setCustomDragHighlight": [["void", "Drawable dragHighlight"]]}, "className": "DragDropTouchListener", "renamed": ["void", "function", "(", "boolean", "arg0", ")", "{", "this", ".", "enabled", "=", "arg0", ";", "}"], "nl": "Enable/disable drag/drop", "nlToks": ["Enable/disable", "drag/drop"], "path": "prashant31191/UltimateRecyclerView/tree/master/UltimateRecyclerView/ultimaterecyclerview/src/main/java/com/marshalchen/ultimaterecyclerview/DragDropTouchListener.java", "idx": 2588}
{"memberVariables": {"FILE_UPLOAD=new CommandHandler(\"FileUpload\")": "CommandHandler", "CREATE_FOLDER=new CommandHandler(\"CreateFolder\")": "CommandHandler", "GET_FOLDERS=new CommandHandler(\"GetFolders\")": "CommandHandler", "GET_FOLDERS_AND_FILES=new CommandHandler(\"GetFoldersAndFiles\")": "CommandHandler", "postCommands=new HashMap<String,CommandHandler>(2)": "Map<String,CommandHandler>", "name": "String", "getCommands=new HashMap<String,CommandHandler>(3)": "Map<String,CommandHandler>", "QUICK_UPLOAD=new CommandHandler(\"QuickUpload\")": "CommandHandler"}, "code": ["CommandHandler", "function", "(", "final", "String", "name", ")", "{", "try", "{", "return", "CommandHandler", ".", "valueOf", "(", "name", ")", ";", "}", "catch", "(", "Exception", "e", ")", "{", "return", "null", ";", "}", "}"], "memberFunctions": {"isValidForPost": [["boolean", "final String name"]], "getName": [["String"]], "valueOf": [["CommandHandler", "final String name"]], "hashCode": [["int"]], "equals": [["boolean", "Object obj"]], "toString": [["String"]], "isValidForGet": [["boolean", "final String name"]]}, "className": "CommandHandler", "renamed": ["CommandHandler", "function", "(", "final", "String", "arg0", ")", "{", "try", "{", "return", "CommandHandler", ".", "valueOf", "(", "arg0", ")", ";", "}", "catch", "(", "Exception", "loc0", ")", "{", "return", "null", ";", "}", "}"], "nl": "A wrapper for  {@link #valueOf(String)}. It returns null instead of throwing an exception.", "nlToks": ["A", "wrapper", "for", "-LCB-", "@link", "#valueOf", "-LRB-", "String", "-RRB-", "-RCB-", ".", "It", "returns", "null", "instead", "of", "throwing", "an", "exception", "."], "path": "pobing/company/tree/master/maxcomy/src/net/fckeditor/handlers/CommandHandler.java", "idx": 2590}
{"memberVariables": {"roleClassifierType=\"prefix\"": "String", "roleClassifier": "String"}, "code": ["void", "function", "(", "String", "roleClassifierType", ")", "{", "this", ".", "roleClassifierType", "=", "roleClassifierType", ";", "}"], "memberFunctions": {"setRoleClassifier": [["void", "String roleClassifier"]], "getRoleClassifierType": [["String"]], "parseRolesFromSubject": [["Set<Principal>", "Principal principal", "Subject subject"]], "getRoleClassifier": [["String"]]}, "className": "DefaultSubjectRoleParser", "renamed": ["void", "function", "(", "String", "arg0", ")", "{", "this", ".", "roleClassifierType", "=", "arg0", ";", "}"], "nl": "Set the Subject Role Classifier Type to use. Currently accepted values are \"prefix\" or  \"classname\". Must be used in conjunction with the SUBJECT_ROLE_CLASSIFIER. The default  value is \"prefix\".", "nlToks": ["Set", "the", "Subject", "Role", "Classifier", "Type", "to", "use", ".", "Currently", "accepted", "values", "are", "``", "prefix", "''", "or", "``", "classname", "''", ".", "Must", "be", "used", "in", "conjunction", "with", "the", "SUBJECT_ROLE_CLASSIFIER", ".", "The", "default", "value", "is", "``", "prefix", "''", "."], "path": "primesign/cxf/tree/master/services/sts/sts-core/src/main/java/org/apache/cxf/sts/token/validator/DefaultSubjectRoleParser.java", "idx": 2591}
{"memberVariables": {"LESS_PATH=CLASSPATH_PREFIX + \"/less/\"": "String", "LESS_JS={\"less-env.js\",\"less.js\",\"less-rtl-plugin.js\",\"less-api.js\"}": "String[]", "lastModified=new HashMap<String,Long>()": "Map<String,Long>", "scope": "Scriptable", "parse": "Function", "CLASSPATH_PREFIX=\"META-INF\"": "String", "PATTERN_THEME_REQUEST=Pattern.compile(\"(.*)/(library\\\\.css|library-RTL\\\\.css|library-parameters\\\\.json)$\")": "Pattern", "config": "FilterConfig", "cache=new HashMap<String,String>()": "Map<String,String>", "PATTERN_THEME_REQUEST_PARTS=Pattern.compile(\"(/resources/(.*)/themes/)([^/]*)/.*\")": "Pattern"}, "code": ["String", "function", "(", "String", "path", ")", "{", "String", "content", "=", "null", ";", "URL", "resource", "=", "LessFilter", ".", "this", ".", "findResource", "(", "path", ")", ";", "if", "(", "resource", "!=", "null", ")", "{", "InputStream", "is", "=", "resource", ".", "openStream", "(", ")", ";", "content", "=", "IOUtils", ".", "toString", "(", "is", ",", "\"UTF-8\"", ")", ";", "IOUtils", ".", "closeQuietly", "(", "is", ")", ";", "}", "return", "content", ";", "}"], "memberFunctions": {"init": [["void", "FilterConfig filterConfig"]], "findResource": [["URL", "String path"]], "compile": [["void", "String sourcePath", "boolean compressCSS", "boolean compressJSON"]], "doFilter": [["void", "ServletRequest request", "ServletResponse response", "FilterChain chain"]], "log": [["void", "String msg"], ["void", "String msg", "Throwable t"]], "destroy": [["void"]], "compileCSS": [["Scriptable", "String input", "String path", "boolean compressCSS", "boolean compressJSON", "String libraryName"]], "getMaxLastModified": [["long", "String[] paths"]]}, "className": "LessFilter", "renamed": ["String", "function", "(", "String", "arg0", ")", "{", "String", "loc0", "=", "null", ";", "URL", "loc1", "=", "LessFilter", ".", "this", ".", "findResource", "(", "arg0", ")", ";", "if", "(", "loc1", "!=", "null", ")", "{", "InputStream", "loc2", "=", "loc1", ".", "openStream", "(", ")", ";", "loc0", "=", "IOUtils", ".", "toString", "(", "loc2", ",", "\"srini_string\"", ")", ";", "IOUtils", ".", "closeQuietly", "(", "loc2", ")", ";", "}", "return", "loc0", ";", "}"], "nl": "loads a resource for the specified path", "nlToks": ["loads", "a", "resource", "for", "the", "specified", "path"], "path": "piejanssens/openui5/tree/master/src/testsuite-utils/src/main/java/com/sap/openui5/LessFilter.java", "idx": 2592}
{"memberVariables": {"proxy": "ServerProxy", "modInstance": "MainRegistry"}, "code": ["void", "function", "(", "FMLInitializationEvent", "event", ")", "{", "proxy", ".", "registerRenders", "(", ")", ";", "}"], "memberFunctions": {"preInit": [["void", "FMLPreInitializationEvent event"]], "postInit": [["void", "FMLPostInitializationEvent event"]]}, "className": "MainRegistry", "renamed": ["void", "function", "(", "FMLInitializationEvent", "arg0", ")", "{", "proxy", ".", "registerRenders", "(", ")", ";", "}"], "nl": "Methods to call during initialization", "nlToks": ["Methods", "to", "call", "during", "initialization"], "path": "pregnantboy/fyp/tree/master/forge/src/main/java/fuzzyMod/MainRegistry.java", "idx": 2593}
{"memberVariables": {}, "code": ["BigInteger", "function", "(", "final", "BigInteger", "a", ",", "final", "BigInteger", "b", ")", "{", "if", "(", "b", ".", "compareTo", "(", "BigInteger", ".", "ZERO", ")", "==", "0", ")", "{", "return", "a", ";", "}", "return", "findGCD", "(", "b", ",", "a", ".", "mod", "(", "b", ")", ")", ";", "}"], "memberFunctions": {"findLCM": [["int", "final int a", "final int b"], ["BigInteger", "final BigInteger ba", "final BigInteger bb"], ["BigInteger", "final List<BigInteger> numbers"]], "correctSize": [["byte[]", "final byte[] array", "final int blockSize", "final boolean removeSignByte"]]}, "className": "AttackerUtility", "renamed": ["BigInteger", "function", "(", "final", "BigInteger", "arg0", ",", "final", "BigInteger", "arg1", ")", "{", "if", "(", "arg1", ".", "compareTo", "(", "BigInteger", ".", "ZERO", ")", "==", "0", ")", "{", "return", "arg0", ";", "}", "return", "findGCD", "(", "arg1", ",", "arg0", ".", "mod", "(", "arg1", ")", ")", ";", "}"], "nl": "Computes the Greatest Common Divisor of two BigIntegers.", "nlToks": ["Computes", "the", "Greatest", "Common", "Divisor", "of", "two", "BigIntegers", "."], "path": "0xwindows/WS-Attacker/tree/master/libs/XML_Encryption_Attack_Library/src/main/java/wsattacker/library/xmlencryptionattack/attackengine/attacker/pkcs1/AttackerUtility.java", "idx": 2594}
{"memberVariables": {"count=0": "Integer", "serialVersionUID=1L": "long", "totalCount": "Integer", "items": "List<T>"}, "code": ["int", "function", "(", ")", "{", "if", "(", "items", "!=", "null", ")", "{", "return", "items", ".", "size", "(", ")", ";", "}", "return", "0", ";", "}"], "memberFunctions": {"addItem": [["void", "T item"]], "setTotalCount": [["void", "Integer totalCount"]], "getItems": [["List<T>"]], "hashCode": [["int"]], "setItems": [["void", "List<T> items"]], "equals": [["boolean", "Object obj"]], "addList": [["void", "List<T> items"]], "getTotalCount": [["Integer"]], "toString": [["String"]], "getCount": [["Integer"]]}, "className": "ItemList", "renamed": ["int", "function", "(", ")", "{", "if", "(", "items", "!=", "null", ")", "{", "return", "items", ".", "size", "(", ")", ";", "}", "return", "0", ";", "}"], "nl": "Size.", "nlToks": ["Size", "."], "path": "pkesireddy/portico_fletcher/tree/master/FetcherTesterService/src/main/java/org/ithaka/cm/fetchertester/model/ItemList.java", "idx": 2595}
{"memberVariables": {"reason": "String", "feedId": "String", "testId": "String", "batchId": "String", "runStatus": "String"}, "code": ["void", "function", "(", "String", "feedId", ")", "{", "this", ".", "feedId", "=", "feedId", ";", "}"], "memberFunctions": {"isFeedRunnable": [["boolean"]], "getReason": [["String"]], "getRunStatus": [["String"]], "setReason": [["void", "String reason"]], "getBatchId": [["String"]], "toString": [["String"]], "getFeedId": [["String"]], "setBatchId": [["void", "String batchId"]], "setTestId": [["void", "String testId"]], "getTestId": [["String"]], "setRunStatus": [["void", "String runStatus"]]}, "className": "FeedConfigResponse", "renamed": ["void", "function", "(", "String", "arg0", ")", "{", "this", ".", "feedId", "=", "arg0", ";", "}"], "nl": "Sets the feed id.", "nlToks": ["Sets", "the", "feed", "id", "."], "path": "pkesireddy/portico_fletcher/tree/master/FetcherTesterService/src/main/java/org/ithaka/cm/fetchertester/model/FeedConfigResponse.java", "idx": 2596}
{"memberVariables": {"_cssText": "String", "rgbColorValue": "RGBColor", "floatValue": "float", "rectValue": "Rect", "counter": "Counter", "primitiveType": "short"}, "code": ["short", "function", "(", ")", "{", "return", "CSSValue", ".", "CSS_PRIMITIVE_VALUE", ";", "}"], "memberFunctions": {"setStringValue": [["void", "short stringType", "String stringValue"]], "getStringValue": [["String"]], "getNewIdentValue": [["FSCssValue", "String identValue"]], "getCssText": [["String"]], "getRectValue": [["Rect"]], "setFloatValue": [["void", "short unitType", "float floatValue"]], "getFloatValue": [["float", "short unitType"]], "getPrimitiveType": [["short"]], "getRGBColorValue": [["RGBColor"]], "toString": [["String"]], "getCounterValue": [["Counter"]], "setCssText": [["void", "String cssText"]]}, "className": "FSCssValue", "renamed": ["short", "function", "(", ")", "{", "return", "CSSValue", ".", "CSS_PRIMITIVE_VALUE", ";", "}"], "nl": "A code defining the type of the value as defined above.", "nlToks": ["A", "code", "defining", "the", "type", "of", "the", "value", "as", "defined", "above", "."], "path": "plutogeek/flyingsaucer/tree/master/flying-saucer-core/src/main/java/org/xhtmlrenderer/css/value/FSCssValue.java", "idx": 2597}
{"memberVariables": {"originalMatrix": "QMatrix", "positions": "List<MatrixPosition>"}, "code": ["int", "function", "(", "MatrixPosition", "position", ")", "{", "return", "originalMatrix", ".", "matrixItemUtility", "[", "position", ".", "row", "]", "[", "position", ".", "column", "]", ";", "}"], "memberFunctions": {"getLocalSequenceUtility": [["int", "MatrixPosition position"]], "getItemNames": [["int[]"]], "getRemainingUtility": [["int", "int row", "int column"]]}, "className": "QMatrixProjection", "renamed": ["int", "function", "(", "MatrixPosition", "arg0", ")", "{", "return", "originalMatrix", ".", "matrixItemUtility", "[", "arg0", ".", "row", "]", "[", "arg0", ".", "column", "]", ";", "}"], "nl": "Get the utility of a cell in the projected q-matrix at a given cell position (row,column)", "nlToks": ["Get", "the", "utility", "of", "a", "cell", "in", "the", "projected", "q-matrix", "at", "a", "given", "cell", "position", "-LRB-", "row", ",", "column", "-RRB-"], "path": "prateek96/Data_Mining_Assignments/tree/master/Assignment_1/Assignment 1.12/QMatrixProjection.java", "idx": 2598}
{"memberVariables": {"repositories=new HashSet<String>()": "Set<String>", "canAdmin": "boolean", "accountType": "AccountType", "preReceiveScripts=new ArrayList<String>()": "List<String>", "postReceiveScripts=new ArrayList<String>()": "List<String>", "name": "String", "permissions=new LinkedHashMap<String,AccessPermission>()": "Map<String,AccessPermission>", "serialVersionUID=1L": "long", "canFork": "boolean", "canCreate": "boolean", "users=new HashSet<String>()": "Set<String>", "mailingLists=new HashSet<String>()": "Set<String>"}, "code": ["void", "function", "(", "String", "role", ")", "{", "AccessPermission", "permission", "=", "AccessPermission", ".", "permissionFromRole", "(", "role", ")", ";", "String", "repository", "=", "AccessPermission", ".", "repositoryFromRole", "(", "role", ")", ".", "toLowerCase", "(", ")", ";", "repositories", ".", "add", "(", "repository", ")", ";", "permissions", ".", "put", "(", "repository", ",", "permission", ")", ";", "}"], "memberFunctions": {"canDeleteRef": [["boolean", "RepositoryModel repository"]], "hasRepositoryPermission": [["boolean", "String name"]], "canCreateRef": [["boolean", "RepositoryModel repository"]], "addRepositoryPermissions": [["void", "Collection<String> roles"]], "canClone": [["boolean", "RepositoryModel repository"]], "addUser": [["void", "String name"]], "canPush": [["boolean", "RepositoryModel repository"]], "compareTo": [["int", "TeamModel o"]], "hasUser": [["boolean", "String name"]], "addUsers": [["void", "Collection<String> names"]], "getRepositoryPermissions": [["List<RegistrantAccessPermission>"]], "canView": [["boolean", "RepositoryModel repository"]], "canRewindRef": [["boolean", "RepositoryModel repository"]], "removeUser": [["void", "String name"]], "hasExplicitRepositoryPermission": [["boolean", "String name"]], "canAccess": [["boolean", "RepositoryModel repository", "AccessRestrictionType ifRestriction", "AccessPermission requirePermission"]], "setRepositoryPermission": [["void", "String repository", "AccessPermission permission"]], "isLocalTeam": [["boolean"]], "removeRepositoryPermission": [["AccessPermission", "String name"]], "toString": [["String"]], "addMailingLists": [["void", "Collection<String> addresses"]], "getRepositoryPermission": [["RegistrantAccessPermission", "RepositoryModel repository"]]}, "className": "TeamModel", "renamed": ["void", "function", "(", "String", "arg0", ")", "{", "AccessPermission", "loc0", "=", "AccessPermission", ".", "permissionFromRole", "(", "arg0", ")", ";", "String", "loc1", "=", "AccessPermission", ".", "repositoryFromRole", "(", "arg0", ")", ".", "toLowerCase", "(", ")", ";", "repositories", ".", "add", "(", "loc1", ")", ";", "permissions", ".", "put", "(", "loc1", ",", "loc0", ")", ";", "}"], "nl": "Adds a repository permission to the team.  Role may be formatted as:   myrepo.git (this is implicitly RW+)  RW+:myrepo.git ", "nlToks": ["Adds", "a", "repository", "permission", "to", "the", "team", ".", "Role", "may", "be", "formatted", "as", ":", "myrepo.git", "-LRB-", "this", "is", "implicitly", "RW", "+", "-RRB-", "RW", "+", ":", "myrepo.git"], "path": "pombreda/gitblit/tree/master/src/main/java/com/gitblit/models/TeamModel.java", "idx": 2601}
{"memberVariables": {}, "code": ["List", "<", "T", ">", "function", "(", "List", "<", "T", ">", "l", ",", "T", "o", ")", "{", "l", ".", "add", "(", "o", ")", ";", "return", "l", ";", "}"], "memberFunctions": {"firstOrElse": [["T", "Collection<U> l", "V alt"]], "equals": [["boolean", "Collection<T> a", "Collection<U> b"]], "nonNullList": [["List<T>", "List<T> l"]], "list": [["List<T>"], ["List<T>", "T o"], ["List<T>", "T o1", "T o2"], ["List<T>", "T o1", "T o2", "T o3"], ["List<T>", "T o1", "T o2", "T o3", "T o4"]], "map": [["List<U>", "List<T> l", "Transformation<T,U> t"]], "pairs": [["Iterator<Pair<T,T>>", "Collection<T> l"]]}, "className": "CollectionUtil", "renamed": ["List", "<", "T", ">", "function", "(", "List", "<", "T", ">", "arg0", ",", "T", "arg1", ")", "{", "arg0", ".", "add", "(", "arg1", ")", ";", "return", "arg0", ";", "}"], "nl": "Append  {@code o} to {@code l}, returning  {@code l}.", "nlToks": ["Append", "-LCB-", "@code", "o", "-RCB-", "to", "-LCB-", "@code", "l", "-RCB-", ",", "returning", "-LCB-", "@code", "l", "-RCB-", "."], "path": "polyglot-compiler/polyglot/tree/master/src/polyglot/util/CollectionUtil.java", "idx": 2603}
{"memberVariables": {"COMPACT_SERIALIZED_SIZE=Block.HEADER_SIZE + CHAIN_WORK_BYTES + 4": "int", "chainWork": "BigInteger", "CHAIN_WORK_BYTES=12": "int", "header": "Block", "serialVersionUID=-6097565241243701771L": "long", "EMPTY_BYTES=new byte[CHAIN_WORK_BYTES]": "byte[]", "height": "int"}, "code": ["boolean", "function", "(", "StoredBlock", "other", ")", "{", "return", "chainWork", ".", "compareTo", "(", "other", ".", "chainWork", ")", ">", "0", ";", "}"], "memberFunctions": {"getHeight": [["int"]], "getChainWork": [["BigInteger"]], "deserializeCompact": [["StoredBlock", "NetworkParameters params", "ByteBuffer buffer"]], "build": [["StoredBlock", "Block block"]], "serializeCompact": [["void", "ByteBuffer buffer"]], "hashCode": [["int"]], "equals": [["boolean", "Object other"]], "toString": [["String"]], "getPrev": [["StoredBlock", "BlockStore store"]], "getHeader": [["Block"]]}, "className": "StoredBlock", "renamed": ["boolean", "function", "(", "StoredBlock", "arg0", ")", "{", "return", "chainWork", ".", "compareTo", "(", "arg0", ".", "chainWork", ")", ">", "0", ";", "}"], "nl": "Returns true if this objects chainWork is higher than the others.", "nlToks": ["Returns", "true", "if", "this", "objects", "chainWork", "is", "higher", "than", "the", "others", "."], "path": "plncoin/plncoin-and/tree/master/plncoinj/core/src/main/java/com/google/bitcoin/core/StoredBlock.java", "idx": 2605}
{"memberVariables": {"contentUrl": "Uri", "ref": "String", "peopleIds": "List<String>", "placeId": "String"}, "code": ["String", "function", "(", ")", "{", "return", "this", ".", "placeId", ";", "}"], "memberFunctions": {"readUnmodifiableStringList": [["List<String>", "final Parcel in"]], "setContentUrl": [["E", "final Uri contentUrl"]], "setRef": [["E", "final String ref"]], "readFrom": [["E", "final P content"]], "getRef": [["String"]], "getContentUrl": [["Uri"]], "setPlaceId": [["E", "final String placeId"]], "getPeopleIds": [["List<String>"]], "setPeopleIds": [["E", "final List<String> peopleIds"]], "describeContents": [["int"]], "writeToParcel": [["void", "final Parcel out", "final int flags"]]}, "className": "ShareContent", "renamed": ["String", "function", "(", ")", "{", "return", "this", ".", "placeId", ";", "}"], "nl": "The Id for a place to tag with this content.", "nlToks": ["The", "Id", "for", "a", "place", "to", "tag", "with", "this", "content", "."], "path": "adament67/testproject/tree/master/Android Projects/studio/EstiloRobe/facebook/src/main/java/com/facebook/share/model/ShareContent.java", "idx": 2606}
{"memberVariables": {}, "code": ["void", "function", "(", "boolean", "flag", ")", "{", "}"], "memberFunctions": {"output": [["void", "SessionDescription sd", "OutputStream out"]], "setEncoding": [["void", "String enc"]], "setTypedTime": [["void", "boolean flag"]]}, "className": "SdpEncoderImpl", "renamed": ["void", "function", "(", "boolean", "arg0", ")", "{", "}"], "nl": "Specifies whether to generate \"a=rtpmap:\" attributes for static RTP/AVP format strings. This is recommended but makes messages bigger. The default is not to write such attributes.", "nlToks": ["Specifies", "whether", "to", "generate", "``", "a", "=", "rtpmap", ":", "''", "attributes", "for", "static", "RTP/AVP", "format", "strings", ".", "This", "is", "recommended", "but", "makes", "messages", "bigger", ".", "The", "default", "is", "not", "to", "write", "such", "attributes", "."], "path": "adamfisk/littleshoot-client/tree/master/common/sdp/src/main/java/org/lastbamboo/common/sdp/SdpEncoderImpl.java", "idx": 2608}
{"memberVariables": {"DECODER=Charset.forName(\"US-ASCII\").newDecoder()": "CharsetDecoder", "LOG=LoggerFactory.getLogger(MinaUtils.class)": "Logger"}, "code": ["ByteBuffer", "function", "(", "final", "String", "str", ")", "{", "try", "{", "final", "byte", "[", "]", "bytes", "=", "str", ".", "getBytes", "(", "\"US-ASCII\"", ")", ";", "return", "ByteBuffer", ".", "wrap", "(", "bytes", ")", ";", "}", "catch", "(", "final", "UnsupportedEncodingException", "e", ")", "{", "LOG", ".", "error", "(", "\"Bad encoding?\"", ",", "e", ")", ";", "return", "ByteBuffer", ".", "allocate", "(", "0", ")", ";", "}", "}"], "memberFunctions": {"splitToByteArrays": [["Collection<byte[]>", "final ByteBuffer buffer", "final int chunkSize"]], "split": [["Collection<ByteBuffer>", "final ByteBuffer buffer", "final int chunkSize"]], "toByteArray": [["byte[]", "final ByteBuffer buf"]], "putUnsignedByte": [["void", "final ByteBuffer bb", "final int value"], ["void", "final ByteBuffer bb", "final int position", "final int value"]], "toAsciiString": [["String", "final ByteBuffer buf"]], "putUnsignedShort": [["void", "final ByteBuffer bb", "final int value"], ["void", "final ByteBuffer bb", "final int position", "final int value"]], "isUdp": [["boolean", "final IoSession session"]], "getString": [["String", "final ByteBuffer buf"]], "createBuffer": [["ByteBuffer", "final ByteBuffer buffer"]], "putUnsignedInt": [["void", "final ByteBuffer bb", "final long value"], ["void", "final ByteBuffer bb", "final int position", "final long value"]]}, "className": "MinaUtils", "renamed": ["ByteBuffer", "function", "(", "final", "String", "arg0", ")", "{", "try", "{", "final", "byte", "[", "]", "loc0", "=", "arg0", ".", "getBytes", "(", "\"srini_string\"", ")", ";", "return", "ByteBuffer", ".", "wrap", "(", "loc0", ")", ";", "}", "catch", "(", "final", "UnsupportedEncodingException", "loc0", ")", "{", "LOG", ".", "error", "(", "\"srini_string\"", ",", "loc0", ")", ";", "return", "ByteBuffer", ".", "allocate", "(", "0", ")", ";", "}", "}"], "nl": "Converts the specified  {@link String} to a {@link ByteBuffer}.  The string encoding is assumed to be ASCII.", "nlToks": ["Converts", "the", "specified", "-LCB-", "@link", "String", "-RCB-", "to", "a", "-LCB-", "@link", "ByteBuffer", "-RCB-", ".", "The", "string", "encoding", "is", "assumed", "to", "be", "ASCII", "."], "path": "adamfisk/littleshoot-client/tree/master/common/util/mina/src/main/java/org/lastbamboo/common/util/mina/MinaUtils.java", "idx": 2609}
{"memberVariables": {"WORKER_CAPACITY_BYTES=Constants.MB": "int", "mBlockWorkerClient": "BlockWorkerClient", "mBlockMasterClient": "BlockMasterClient", "sManuallySchedule=new ManuallyScheduleHeartbeat(HeartbeatContext.WORKER_BLOCK_SYNC)": "ManuallyScheduleHeartbeat", "mFileSystem=null": "FileSystem", "mLocalAlluxioClusterResource": "LocalAlluxioClusterResource"}, "code": ["DataServerMessage", "function", "(", "final", "BlockInfo", "block", ")", "{", "return", "request", "(", "block", ",", "0", ",", "-", "1", ")", ";", "}"], "memberFunctions": {"multiRead": [["void"]], "getFirstBlockInfo": [["BlockInfo", "AlluxioURI uri"]], "read": [["void"]], "readThroughClientNonExistent": [["void"]], "data": [["Collection<Object[]>"]], "readRemotely": [["ByteBuffer", "RemoteBlockReader client", "BlockInfo block", "int length"]], "before": [["void"]], "readPartialTest1": [["void"]], "readPartialTest2": [["void"]], "tooLargeOffset": [["void"]], "assertValid": [["void", "final DataServerMessage msg", "final ByteBuffer expectedData", "final long blockId", "final long offset", "final long length"], ["void", "final DataServerMessage msg", "final int expectedSize", "final long blockId", "final long offset", "final long length"]], "readThroughClient": [["void"]], "lengthTooSmall": [["void"]], "assertError": [["void", "final DataServerMessage msg", "final long blockId"]], "readMultiFiles": [["void"]], "after": [["void"]], "negativeOffset": [["void"]], "readTooLarge": [["void"]]}, "className": "DataServerIntegrationTest", "renamed": ["DataServerMessage", "function", "(", "final", "BlockInfo", "arg0", ")", "{", "return", "request", "(", "arg0", ",", "0", ",", "-", "1", ")", ";", "}"], "nl": "Requests a block from the server. This call will read the full block.", "nlToks": ["Requests", "a", "block", "from", "the", "server", ".", "This", "call", "will", "read", "the", "full", "block", "."], "path": "poemlin/alluxio/tree/master/tests/src/test/java/alluxio/worker/DataServerIntegrationTest.java", "idx": 2612}
{"memberVariables": {"expires": "Date", "data": "byte[]", "transformedTokenIdentifier": "String", "created": "Date", "unattachedReference": "Element", "secret": "byte[]", "securityContext": "SecurityContext", "tokenHash": "int", "token": "Element", "crypto": "Crypto", "principal": "Principal", "serialVersionUID=3820740387121650613L": "long", "wsuId": "String", "issuerAddress": "String", "encrKeySha1Value": "String", "id": "String", "x509cert": "X509Certificate", "BOOTSTRAP_TOKEN_ID=\"bootstrap_security_token_id\"": "String", "tokenType": "String", "attachedReference": "Element", "properties": "Map<String,Object>", "key": "Key"}, "code": ["boolean", "function", "(", ")", "{", "if", "(", "expires", "!=", "null", ")", "{", "Date", "rightNow", "=", "new", "Date", "(", ")", ";", "if", "(", "expires", ".", "before", "(", "rightNow", ")", ")", "{", "return", "true", ";", "}", "}", "return", "false", ";", "}"], "memberFunctions": {"setAttachedReference": [["void", "Element attachedReference"]], "getTokenType": [["String"]], "setProperties": [["void", "Map<String,Object> properties"]], "setExpires": [["void", "Date expires"]], "getIssuerAddress": [["String"]], "setSHA1": [["void", "String sha"]], "getId": [["String"]], "setX509Certificate": [["void", "X509Certificate cert", "Crypto cpt"]], "getTransformedTokenIdentifier": [["String"]], "setTokenHash": [["void", "int hash"]], "setPrincipal": [["void", "Principal principal"]], "getPrincipal": [["Principal"]], "getIdFromSTR": [["String", "Element str"]], "setId": [["void", "String id"]], "setIssuerAddress": [["void", "String issuerAddress"]], "getData": [["byte[]"]], "setKey": [["void", "Key key"]], "setTokenType": [["void", "String s"]], "getKey": [["Key"]], "setData": [["void", "byte[] data"]], "getProperties": [["Map<String,Object>"]], "setTransformedTokenIdentifier": [["void", "String transformedTokenIdentifier"]], "getTokenHash": [["int"]], "getCreated": [["Date"]], "getUnattachedReference": [["Element"]], "processLifeTime": [["void", "Element lifetimeElem"]], "setUnattachedReference": [["void", "Element unattachedReference"]], "setSecurityContext": [["void", "SecurityContext securityContext"]], "getCrypto": [["Crypto"]], "getSecret": [["byte[]"]], "setToken": [["void", "Element token"]], "setSecret": [["void", "byte[] secret"]], "getX509Certificate": [["X509Certificate"]], "getToken": [["Element"]], "isAboutToExpire": [["boolean", "long secondsToExpiry"]], "setWsuId": [["void", "String wsuId"]], "getExpires": [["Date"]], "getWsuId": [["String"]], "cloneElement": [["Element", "Element el"]], "getAttachedReference": [["Element"]], "getSHA1": [["String"]], "getSecurityContext": [["SecurityContext"]]}, "className": "SecurityToken", "renamed": ["boolean", "function", "(", ")", "{", "if", "(", "expires", "!=", "null", ")", "{", "Date", "loc0", "=", "new", "Date", "(", ")", ";", "if", "(", "expires", ".", "before", "(", "loc0", ")", ")", "{", "return", "true", ";", "}", "}", "return", "false", ";", "}"], "nl": "Return whether this SecurityToken is expired or not", "nlToks": ["Return", "whether", "this", "SecurityToken", "is", "expired", "or", "not"], "path": "primesign/cxf/tree/master/rt/ws/security/src/main/java/org/apache/cxf/ws/security/tokenstore/SecurityToken.java", "idx": 2613}
{"memberVariables": {"NULL_ESCAPER=new CharEscaper(){\n  @Override public String escape(  String string){\n    return checkNotNull(string);\n  }\n  @Override protected char[] escape(  char c){\n    return null;\n  }\n}\n": "Escaper", "replacementMap=new HashMap<Character,String>()": "Map<Character,String>", "safeMax=Character.MAX_VALUE": "char", "unsafeReplacement=null": "String", "safeMin=Character.MIN_VALUE": "char"}, "code": ["Builder", "function", "(", "@", "Nullable", "String", "unsafeReplacement", ")", "{", "this", ".", "unsafeReplacement", "=", "unsafeReplacement", ";", "return", "this", ";", "}"], "memberFunctions": {"nullEscaper": [["Escaper"]], "build": [["Escaper"]], "addEscape": [["Builder", "char c", "String replacement"]], "builder": [["Builder"]], "setSafeRange": [["Builder", "char safeMin", "char safeMax"]], "stringOrNull": [["String", "char[] in"]], "asUnicodeEscaper": [["UnicodeEscaper", "Escaper escaper"]], "escape": [["String", "String string"], ["char[]", "char c"]], "computeReplacement": [["String", "CharEscaper escaper", "char c"], ["String", "UnicodeEscaper escaper", "int cp"]], "wrap": [["UnicodeEscaper", "final CharEscaper escaper"]]}, "className": "Escapers", "renamed": ["Builder", "function", "(", "@", "Nullable", "String", "arg0", ")", "{", "this", ".", "unsafeReplacement", "=", "arg0", ";", "return", "this", ";", "}"], "nl": "Sets the replacement string for any characters outside the 'safe' range that have no explicit replacement. If  {@code unsafeReplacement} is {@code null} then no replacement will occur, ifit is  {@code \"\"} then the unsafe characters are removed from the output.", "nlToks": ["Sets", "the", "replacement", "string", "for", "any", "characters", "outside", "the", "`", "safe", "'", "range", "that", "have", "no", "explicit", "replacement", ".", "If", "-LCB-", "@code", "unsafeReplacement", "-RCB-", "is", "-LCB-", "@code", "null", "-RCB-", "then", "no", "replacement", "will", "occur", ",", "ifit", "is", "-LCB-", "@code", "''", "''", "-RCB-", "then", "the", "unsafe", "characters", "are", "removed", "from", "the", "output", "."], "path": "hazendaz/guava/tree/master/guava/src/com/google/common/escape/Escapers.java", "idx": 2614}
{"memberVariables": {"LOG=LoggerFactory.getLogger(Constants.LOGGER_TYPE)": "Logger"}, "code": ["boolean", "function", "(", "final", "Callable", "<", "Boolean", ">", "example", ")", "{", "boolean", "result", ";", "try", "{", "result", "=", "example", ".", "call", "(", ")", ";", "}", "catch", "(", "Exception", "e", ")", "{", "LOG", ".", "error", "(", "\"Exception running test: \"", "+", "example", ",", "e", ")", ";", "result", "=", "false", ";", "}", "CliUtils", ".", "printPassInfo", "(", "result", ")", ";", "return", "result", ";", "}"], "memberFunctions": {"printPassInfo": [["void", "boolean pass"]]}, "className": "CliUtils", "renamed": ["boolean", "function", "(", "final", "Callable", "<", "Boolean", ">", "arg0", ")", "{", "boolean", "loc0", ";", "try", "{", "loc0", "=", "arg0", ".", "call", "(", ")", ";", "}", "catch", "(", "Exception", "loc1", ")", "{", "LOG", ".", "error", "(", "\"srini_string\"", "+", "arg0", ",", "loc1", ")", ";", "loc0", "=", "false", ";", "}", "CliUtils", ".", "printPassInfo", "(", "loc0", ")", ";", "return", "loc0", ";", "}"], "nl": "Runs an example.", "nlToks": ["Runs", "an", "example", "."], "path": "poemlin/alluxio/tree/master/examples/src/main/java/alluxio/cli/CliUtils.java", "idx": 2615}
{"memberVariables": {"tx": "Transaction", "ti": "TableInfo", "slotsize": "int", "currentblk": "Block"}, "code": ["Block", "function", "(", "int", "flag", ")", "{", "return", "tx", ".", "append", "(", "ti", ".", "fileName", "(", ")", ",", "new", "BTPageFormatter", "(", "ti", ",", "flag", ")", ")", ";", "}"], "memberFunctions": {"insertDir": [["void", "int slot", "Constant val", "int blknum"]], "getChildNum": [["int", "int slot"]], "insert": [["void", "int slot"]], "delete": [["void", "int slot"]], "split": [["Block", "int splitpos", "int flag"]], "transferRecs": [["void", "int slot", "BTreePage dest"]], "fldpos": [["int", "int slot", "String fldname"]], "getNumRecs": [["int"]], "slotpos": [["int", "int slot"]], "close": [["void"]], "getFlag": [["int"]], "setVal": [["void", "int slot", "String fldname", "Constant val"]], "getDataRid": [["RID", "int slot"]], "getVal": [["Constant", "int slot", "String fldname"]], "setFlag": [["void", "int val"]], "insertLeaf": [["void", "int slot", "Constant val", "RID rid"]], "getString": [["String", "int slot", "String fldname"]], "setInt": [["void", "int slot", "String fldname", "int val"]], "getInt": [["int", "int slot", "String fldname"]], "setString": [["void", "int slot", "String fldname", "String val"]], "getDataVal": [["Constant", "int slot"]], "copyRecord": [["void", "int from", "int to"]], "isFull": [["boolean"]], "setNumRecs": [["void", "int n"]], "findSlotBefore": [["int", "Constant searchkey"]]}, "className": "BTreePage", "renamed": ["Block", "function", "(", "int", "arg0", ")", "{", "return", "tx", ".", "append", "(", "ti", ".", "fileName", "(", ")", ",", "new", "BTPageFormatter", "(", "ti", ",", "arg0", ")", ")", ";", "}"], "nl": "Appends a new block to the end of the specified B-tree file, having the specified flag value.", "nlToks": ["Appends", "a", "new", "block", "to", "the", "end", "of", "the", "specified", "B-tree", "file", ",", "having", "the", "specified", "flag", "value", "."], "path": "prerit2803/DBMSProject2/tree/master/simpledb/index/btree/BTreePage.java", "idx": 2618}
{"memberVariables": {"xStartPos": "float", "lModelAmbient": "FloatBuffer", "zPos": "float", "yPos": "float", "MOVE_FORWARD_SPEED=0.25f": "float", "yStartPos": "float", "walkbiasangle": "float", "walkbias": "float", "BULLET_INTERVAL=0": "int", "bulletTime": "long", "MAX_BULLETS": "int", "ROTATE_SPEED=1.0f": "float", "monsters": "Monster[]", "xPos": "float", "MOVE_BACKWARD_SPEED=0.3f": "float", "MAX_MONSTERS=30": "int", "lightPosition": "FloatBuffer", "whiteLight": "FloatBuffer", "monstersLiving": "boolean[]", "heading=0.0f": "float", "STRAFE_SPEED=0.3f": "float", "zStartPos": "float", "bullets": "ArrayList<Bullet>"}, "code": ["boolean", "function", "(", ")", "{", "for", "(", "int", "i", "=", "0", ";", "i", "<", "monsters", ".", "length", ";", "i", "++", ")", "{", "if", "(", "monstersLiving", "[", "i", "]", ")", "{", "return", "false", ";", "}", "}", "return", "false", ";", "}"], "memberFunctions": {"turnRight": [["void"]], "restart": [["void"]], "start": [["void"]], "update": [["void"]], "fireBullet": [["void"]], "walkForwards": [["void"]], "renderFloor": [["void", "float x", "float y", "float z", "float width", "float length"]], "walkBackwards": [["void"]], "strafeLeft": [["void"]], "LoadFromFile": [["Level", "String filename"]], "strafeRight": [["void"]], "renderWalls": [["void", "float x", "float y", "float z", "float height", "float width", "float length"]], "turnLeft": [["void"]], "ReadFromXML": [["Level", "Element element"]], "render": [["void"]]}, "className": "Level", "renamed": ["boolean", "function", "(", ")", "{", "for", "(", "int", "loc0", "=", "0", ";", "loc0", "<", "monsters", ".", "length", ";", "loc0", "++", ")", "{", "if", "(", "monstersLiving", "[", "loc0", "]", ")", "{", "return", "false", ";", "}", "}", "return", "false", ";", "}"], "nl": "Check whether finished", "nlToks": ["Check", "whether", "finished"], "path": "philipwhiuk/3D-FPS-Game-Engine/tree/master/src/fps3d/Level.java", "idx": 2619}
{"memberVariables": {"defaultPass=null": "String", "lockObject=new Object()": "Object", "defaultHost=\"127.0.0.1\"": "String", "defaultUser=\"msf\"": "String", "defaultSsl=false": "boolean", "ssl": "boolean", "sout": "OutputStream", "callCache=new HashMap()": "Map", "password": "String", "port": "int", "rpcToken": "String", "host": "String", "sin": "InputStream", "disableDb=false": "boolean", "connection": "Socket", "defaultPort=55553": "int", "username": "String"}, "code": ["void", "function", "(", ")", "{", "super", ".", "finalize", "(", ")", ";", "connection", ".", "close", "(", ")", ";", "}"], "memberFunctions": {"disconnect": [["void"]], "cacheExecute": [["Object", "String methodName", "Object[] params"]], "execute": [["Object", "String methodName", "Object... params"]], "readResp": [["Object"]], "reconnect": [["void"]], "writeCall": [["void", "String methname", "Object[] params"]], "setup": [["void", "String username", "char[] password", "String host", "int port", "boolean ssl"]], "toString": [["String"]], "startRpcConn": [["Task", "final MainFrame mainFrame"]], "getConn": [["RpcConnection", "String username", "char[] password", "String host", "int port", "boolean ssl"]], "getData": [["byte[]", "Map received"]], "connect": [["void"]], "exec": [["Object", "String methname", "Object[] params"]]}, "className": "RpcConnection", "renamed": ["void", "function", "(", ")", "{", "super", ".", "finalize", "(", ")", ";", "connection", ".", "close", "(", ")", ";", "}"], "nl": "Destructor cleans up.", "nlToks": ["Destructor", "cleans", "up", "."], "path": "porkkana/msfgui/tree/master/src/msfgui/rpc/RpcConnection.java", "idx": 2621}
{"memberVariables": {"LOG=LogFactory.getLog(JdbcUtil.class)": "Log", "activeConnectionCount=new HashMap<String,Integer>()": "Map<String,Integer>", "ds": "DataSource"}, "code": ["void", "function", "(", "Class", "clazz", ",", "Connection", "con", ")", "{", "closeConnection", "(", "clazz", ".", "getName", "(", ")", ",", "con", ")", ";", "}"], "memberFunctions": {"getDataSource": [["DataSource"]], "readLongFromResultSet": [["Long", "ResultSet rs", "String column"]], "logMessage": [["void", "String message"]], "disableForeignKeyCheck": [["void", "Connection con"]], "initDataSource": [["DataSource"]], "readIntegerFromResultSet": [["Integer", "ResultSet rs", "String column"]], "enableForeignKeyCheck": [["void", "Connection con"]], "setDataSource": [["void", "DataSource value"]], "getDbConnection": [["Connection", "Class clazz"], ["Connection", "String requester"]], "closeAll": [["void", "ResultSet rs"], ["void", "Class clazz", "Connection con", "PreparedStatement ps", "ResultSet rs"], ["void", "String requester", "Connection con", "ResultSet rs"], ["void", "Class clazz", "Connection con", "ResultSet rs"]], "readDoubleFromResultSet": [["Double", "ResultSet rs", "String column"]]}, "className": "JdbcUtil", "renamed": ["void", "function", "(", "Class", "arg0", ",", "Connection", "arg1", ")", "{", "closeConnection", "(", "arg0", ".", "getName", "(", ")", ",", "arg1", ")", ";", "}"], "nl": "Frees Database Connection.", "nlToks": ["Frees", "Database", "Connection", "."], "path": "adamabeshouse/cbioportal/tree/master/core/src/main/java/org/mskcc/cbio/portal/dao/JdbcUtil.java", "idx": 2623}
{"memberVariables": {"serialVersionUID=-1469694589163385689L": "long", "roles=new LinkedList<String>()": "List<String>", "id": "String", "properties=new HashMap<String,String>()": "Map<String,String>", "login": "String"}, "code": ["List", "<", "String", ">", "function", "(", ")", "{", "return", "roles", ";", "}"], "memberFunctions": {"getLogin": [["String"]], "setLogin": [["void", "String login"]], "getProperties": [["Map<String,String>"]], "setProperties": [["void", "Map<String,String> properties"]], "setId": [["void", "String id"]], "getId": [["String"]], "setRoles": [["void", "List<String> roles"]]}, "className": "UserSubject", "renamed": ["List", "<", "String", ">", "function", "(", ")", "{", "return", "roles", ";", "}"], "nl": "Return the optional list of user roles which may have  been captured during the authentication process", "nlToks": ["Return", "the", "optional", "list", "of", "user", "roles", "which", "may", "have", "been", "captured", "during", "the", "authentication", "process"], "path": "primesign/cxf/tree/master/rt/rs/security/oauth-parent/oauth2/src/main/java/org/apache/cxf/rs/security/oauth2/common/UserSubject.java", "idx": 2625}
{"memberVariables": {"mMode": "Mode", "mOwner": "String", "FILE_UMASK=new Mode(Constants.FILE_DIR_PERMISSION_DIFF)": "Mode", "mGroup": "String"}, "code": ["Permission", "function", "(", "Mode", "umask", ")", "{", "mMode", "=", "mMode", ".", "applyUMask", "(", "umask", ")", ";", "return", "this", ";", "}"], "memberFunctions": {"applyFileUMask": [["Permission"]], "setOwnerFromThriftClient": [["Permission"]], "defaults": [["Permission"]], "setOwnerFromLoginModule": [["Permission"]], "hashCode": [["int"]], "getGroup": [["String"]], "equals": [["boolean", "Object o"]], "toString": [["String"]], "getMode": [["Mode"]], "getOwner": [["String"]], "applyDirectoryUMask": [["Permission"]]}, "className": "Permission", "renamed": ["Permission", "function", "(", "Mode", "arg0", ")", "{", "mMode", "=", "mMode", ".", "applyUMask", "(", "arg0", ")", ";", "return", "this", ";", "}"], "nl": "Applies umask to the mode bits.", "nlToks": ["Applies", "umask", "to", "the", "mode", "bits", "."], "path": "poemlin/alluxio/tree/master/core/common/src/main/java/alluxio/security/authorization/Permission.java", "idx": 2626}
{"memberVariables": {"mob": "EntityMobWithInventory", "ticker": "int", "world": "World", "fin": "FuzzyInterpreter", "futa": "FuzzyTasker", "player": "EntityPlayer"}, "code": ["void", "function", "(", ")", "{", "futa", ".", "nextStep", "(", ")", ";", "}"], "memberFunctions": {"setInputs": [["void"]], "setAction": [["boolean", "String action"]], "printInputs": [["void"]]}, "className": "FuzzyBrain", "renamed": ["void", "function", "(", ")", "{", "futa", ".", "nextStep", "(", ")", ";", "}"], "nl": "Calls nextStep method in Fuzzy Tasker.", "nlToks": ["Calls", "nextStep", "method", "in", "Fuzzy", "Tasker", "."], "path": "pregnantboy/fyp/tree/master/forge/src/main/java/fuzzyMod/fuzzyLogic/FuzzyBrain.java", "idx": 2627}
{"memberVariables": {"item": "Integer", "sumRutils=0": "long", "sumIutils=0": "long", "elements=new ArrayList<Element>()": "List<Element>"}, "code": ["int", "function", "(", ")", "{", "return", "elements", ".", "size", "(", ")", ";", "}"], "memberFunctions": {"addElement": [["void", "Element element"]]}, "className": "UtilityList", "renamed": ["int", "function", "(", ")", "{", "return", "elements", ".", "size", "(", ")", ";", "}"], "nl": "Get the support of the itemset represented by this utility-list", "nlToks": ["Get", "the", "support", "of", "the", "itemset", "represented", "by", "this", "utility-list"], "path": "prateek96/Data_Mining_Assignments/tree/master/Assignment_1/Assignment-1.8/EIHI Modify/src/eihi/UtilityList.java", "idx": 2629}
{"memberVariables": {"ourInstance=new GeneralMotorCon()": "GeneralMotorCon", "spin90Time=3000": "int", "TAG=\"GMC\"": "String", "batLvl=0": "int", "threadTimer=0": "long", "spinSpeed=2": "int", "cmd": "CommandManager", "hoverTime=2000": "int", "speed=10": "int", "spin90Speed=50": "int", "drone": "ARDrone", "spinTime=50": "int"}, "code": ["void", "function", "(", ")", "{", "SpaceXGUI", ".", "getInstance", "(", ")", ".", "appendToConsole", "(", "TAG", ",", "\" - Right\"", ")", ";", "cmd", ".", "goRight", "(", "5", ")", ".", "doFor", "(", "1000", ")", ";", "cmd", ".", "hover", "(", ")", ".", "doFor", "(", "hoverTime", ")", ";", "}"], "memberFunctions": {"spin90Left": [["void"]], "spinRight": [["void"]], "takeoff": [["void"]], "forward": [["void", "int time"]], "spinLeft": [["void"]], "lowerAltitude": [["void"]], "spin90Right": [["void"]], "landing": [["void"]], "setDrone": [["void", "ARDrone drone"]], "left": [["void"]], "backward": [["void", "int time"]], "getInstance": [["GeneralMotorCon"]], "setBatLvl": [["void", "int batLvl"]], "waitFor": [["void", "int millis"]], "getBatLvl": [["int"]], "onStop": [["void"]], "raiseAltitude": [["void"]]}, "className": "GeneralMotorCon", "renamed": ["void", "function", "(", ")", "{", "SpaceXGUI", ".", "getInstance", "(", ")", ".", "appendToConsole", "(", "TAG", ",", "\"srini_string\"", ")", ";", "cmd", ".", "goRight", "(", "5", ")", ".", "doFor", "(", "1000", ")", ";", "cmd", ".", "hover", "(", ")", ".", "doFor", "(", "hoverTime", ")", ";", "}"], "nl": "Right Move the drone a little to the right", "nlToks": ["Right", "Move", "the", "drone", "a", "little", "to", "the", "right"], "path": "02343Gruppe2/02343_Ardrone/tree/master/src/algo/GeneralMotorCon.java", "idx": 2631}
{"memberVariables": {"functions": "Map<String,Method>", "current=new ThreadLocal<ELEvaluator>()": "ThreadLocal<ELEvaluator>", "context": "Context", "evaluator=new ExpressionEvaluatorImpl()": "ExpressionEvaluator", "vars": "Map<String,Object>"}, "code": ["ELEvaluator", "function", "(", ")", "{", "return", "current", ".", "get", "(", ")", ";", "}"], "memberFunctions": {"setVariables": [["void", "Map<String,Object> vars"]], "resolveFunction": [["Method", "String prefix", "String name"]], "addFunction": [["void", "String prefix", "String functionName", "Method method"]], "resolveVariable": [["Object", "String name"]], "setVariable": [["void", "String name", "Object value"], ["void", "String name", "Object value"]], "getVariable": [["Object", "String name"], ["Object", "String name"]], "getContext": [["Context"]], "evaluate": [["T", "String expr", "Class<T> clazz"]]}, "className": "ELEvaluator", "renamed": ["ELEvaluator", "function", "(", ")", "{", "return", "current", ".", "get", "(", ")", ";", "}"], "nl": "If within the scope of a EL evaluation call, it gives access to the ELEvaluator instance performing the EL evaluation.  This is useful for EL function methods to get access to the variables of the Evaluator. Because of this, ELEvaluator variables can be used to pass context to EL function methods (which must be static methods). ", "nlToks": ["If", "within", "the", "scope", "of", "a", "EL", "evaluation", "call", ",", "it", "gives", "access", "to", "the", "ELEvaluator", "instance", "performing", "the", "EL", "evaluation", ".", "This", "is", "useful", "for", "EL", "function", "methods", "to", "get", "access", "to", "the", "variables", "of", "the", "Evaluator", ".", "Because", "of", "this", ",", "ELEvaluator", "variables", "can", "be", "used", "to", "pass", "context", "to", "EL", "function", "methods", "-LRB-", "which", "must", "be", "static", "methods", "-RRB-", "."], "path": "pingpangkuangmo/oozie/tree/master/core/src/main/java/org/apache/oozie/util/ELEvaluator.java", "idx": 2632}
{"memberVariables": {"dbDirectory": "File", "isNew": "boolean", "openFiles=new HashMap<String,FileChannel>()": "Map<String,FileChannel>"}, "code": ["boolean", "function", "(", ")", "{", "return", "isNew", ";", "}"], "memberFunctions": {"read": [["void", "Block blk", "ByteBuffer bb"]], "size": [["int", "String filename"]], "write": [["void", "Block blk", "ByteBuffer bb"]], "getFile": [["FileChannel", "String filename"]], "append": [["Block", "String filename", "ByteBuffer bb"]]}, "className": "FileMgr", "renamed": ["boolean", "function", "(", ")", "{", "return", "isNew", ";", "}"], "nl": "Returns a boolean indicating whether the file manager had to create a new database directory.", "nlToks": ["Returns", "a", "boolean", "indicating", "whether", "the", "file", "manager", "had", "to", "create", "a", "new", "database", "directory", "."], "path": "prerit2803/DBMSProject2/tree/master/simpledb/file/FileMgr.java", "idx": 2634}
{"memberVariables": {"serialVersionUID=0": "long", "predicate": "Predicate<T>", "defaultValue": "V", "f": "Function<A,? extends B>", "g": "Function<B,C>", "supplier": "Supplier<T>", "map": "Map<K,? extends V>", "value": "E"}, "code": ["Function", "<", "Object", ",", "E", ">", "function", "(", "@", "Nullable", "E", "value", ")", "{", "return", "new", "ConstantFunction", "<", "E", ">", "(", "value", ")", ";", "}"], "memberFunctions": {"forPredicate": [["Function<T,Boolean>", "Predicate<T> predicate"]], "forSupplier": [["Function<Object,T>", "Supplier<T> supplier"]], "apply": [["String", "Object o"], ["Object", "@Nullable Object o"], ["V", "@Nullable K key"], ["V", "@Nullable K key"], ["C", "@Nullable A a"], ["Boolean", "@Nullable T t"], ["E", "@Nullable Object from"], ["T", "@Nullable Object input"]], "compose": [["Function<A,C>", "Function<B,C> g", "Function<A,? extends B> f"]], "identity": [["Function<E,E>"]], "hashCode": [["int"], ["int"], ["int"], ["int"], ["int"], ["int"]], "equals": [["boolean", "@Nullable Object o"], ["boolean", "@Nullable Object o"], ["boolean", "@Nullable Object obj"], ["boolean", "@Nullable Object obj"], ["boolean", "@Nullable Object obj"], ["boolean", "@Nullable Object obj"]], "toStringFunction": [["Function<Object,String>"]], "toString": [["String"], ["String"], ["String"], ["String"], ["String"], ["String"], ["String"], ["String"]], "forMap": [["Function<K,V>", "Map<K,V> map"], ["Function<K,V>", "Map<K,? extends V> map", "@Nullable V defaultValue"]]}, "className": "Functions", "renamed": ["Function", "<", "Object", ",", "E", ">", "function", "(", "@", "Nullable", "E", "arg0", ")", "{", "return", "new", "ConstantFunction", "<", "E", ">", "(", "arg0", ")", ";", "}"], "nl": "Returns a function that ignores its input and always returns  {@code value}. Java 8 users: use the lambda expression  {@code o -> value} instead.", "nlToks": ["Returns", "a", "function", "that", "ignores", "its", "input", "and", "always", "returns", "-LCB-", "@code", "value", "-RCB-", ".", "Java", "8", "users", ":", "use", "the", "lambda", "expression", "-LCB-", "@code", "o", "-", ">", "value", "-RCB-", "instead", "."], "path": "hazendaz/guava/tree/master/guava/src/com/google/common/base/Functions.java", "idx": 2635}
{"memberVariables": {"identifier": "String", "wsseValueType": "String", "useKeyIdentifier": "boolean", "useDirectReference": "boolean", "wsse11TokenType": "String"}, "code": ["String", "function", "(", ")", "{", "return", "wsse11TokenType", ";", "}"], "memberFunctions": {"setWsse11TokenType": [["void", "String wsse11TokenType"]], "setWsseValueType": [["void", "String wsseValueType"]], "getIdentifier": [["String"]], "setIdentifier": [["void", "String identifier"]], "setUseDirectReference": [["void", "boolean useDirectReference"]], "isUseKeyIdentifier": [["boolean"]], "getWsseValueType": [["String"]], "isUseDirectReference": [["boolean"]], "setUseKeyIdentifier": [["void", "boolean useKeyIdentifier"]]}, "className": "TokenReference", "renamed": ["String", "function", "(", ")", "{", "return", "wsse11TokenType", ";", "}"], "nl": "Get the wsse11 TokenType attribute", "nlToks": ["Get", "the", "wsse11", "TokenType", "attribute"], "path": "primesign/cxf/tree/master/services/sts/sts-core/src/main/java/org/apache/cxf/sts/token/provider/TokenReference.java", "idx": 2636}
{"memberVariables": {"endDate": "Timestamp", "feedConfigId": "BigDecimal", "resultCode": "String", "serialVersionUID=1L": "long", "resultMessage": "String", "fileCount": "BigDecimal", "maxReceiptDate": "Timestamp", "downloadSize": "BigDecimal", "feedId": "BigDecimal", "configInfo": "String", "runId": "long", "errors": "byte[]", "runStatus": "String", "startDate": "Timestamp"}, "code": ["void", "function", "(", "String", "resultCode", ")", "{", "this", ".", "resultCode", "=", "resultCode", ";", "}"], "memberFunctions": {"getFeedConfigId": [["BigDecimal"]], "getStartDate": [["Timestamp"]], "setFeedId": [["void", "BigDecimal feedId"]], "getResultCode": [["String"]], "setFeedConfigId": [["void", "BigDecimal feedConfigId"]], "setMaxReceiptDate": [["void", "Timestamp maxReceiptDate"]], "getRunId": [["long"]], "getEndDate": [["Timestamp"]], "setErrors": [["void", "byte[] errors"]], "getConfigInfo": [["String"]], "setEndDate": [["void", "Timestamp endDate"]], "getErrors": [["byte[]"]], "setFileCount": [["void", "BigDecimal fileCount"]], "getDownloadSize": [["BigDecimal"]], "getResultMessage": [["String"]], "setResultMessage": [["void", "String resultMessage"]], "getFileCount": [["BigDecimal"]], "getRunStatus": [["String"]], "setRunStatus": [["void", "String runStatus"]], "setStartDate": [["void", "Timestamp startDate"]], "getFeedId": [["BigDecimal"]], "setRunId": [["void", "long runId"]], "getMaxReceiptDate": [["Timestamp"]], "setConfigInfo": [["void", "String configInfo"]], "setDownloadSize": [["void", "BigDecimal downloadSize"]]}, "className": "PCLFetcherRunRecorderEntity", "renamed": ["void", "function", "(", "String", "arg0", ")", "{", "this", ".", "resultCode", "=", "arg0", ";", "}"], "nl": "Sets the result code.", "nlToks": ["Sets", "the", "result", "code", "."], "path": "pkesireddy/portico_fletcher/tree/master/FetcherTesterService/src/main/java/org/ithaka/cm/fetchertester/entity/PCLFetcherRunRecorderEntity.java", "idx": 2637}
{"memberVariables": {"defaultPass=null": "String", "lockObject=new Object()": "Object", "defaultHost=\"127.0.0.1\"": "String", "defaultUser=\"msf\"": "String", "defaultSsl=false": "boolean", "ssl": "boolean", "sout": "OutputStream", "callCache=new HashMap()": "Map", "password": "String", "port": "int", "rpcToken": "String", "host": "String", "sin": "InputStream", "disableDb=false": "boolean", "connection": "Socket", "defaultPort=55553": "int", "username": "String"}, "code": ["RpcConnection", "function", "(", "String", "username", ",", "char", "[", "]", "password", ",", "String", "host", ",", "int", "port", ",", "boolean", "ssl", ")", "{", "RpcConnection", "conn", "=", "new", "MsgRpc", "(", ")", ";", "conn", ".", "setup", "(", "username", ",", "password", ",", "host", ",", "port", ",", "ssl", ")", ";", "return", "conn", ";", "}"], "memberFunctions": {"disconnect": [["void"]], "cacheExecute": [["Object", "String methodName", "Object[] params"]], "execute": [["Object", "String methodName", "Object... params"]], "readResp": [["Object"]], "reconnect": [["void"]], "writeCall": [["void", "String methname", "Object[] params"]], "setup": [["void", "String username", "char[] password", "String host", "int port", "boolean ssl"]], "toString": [["String"]], "finalize": [["void"]], "startRpcConn": [["Task", "final MainFrame mainFrame"]], "getData": [["byte[]", "Map received"]], "connect": [["void"]], "exec": [["Object", "String methname", "Object[] params"]]}, "className": "RpcConnection", "renamed": ["RpcConnection", "function", "(", "String", "arg0", ",", "char", "[", "]", "arg1", ",", "String", "arg2", ",", "int", "arg3", ",", "boolean", "arg4", ")", "{", "RpcConnection", "loc0", "=", "new", "MsgRpc", "(", ")", ";", "loc0", ".", "setup", "(", "arg0", ",", "arg1", ",", "arg2", ",", "arg3", ",", "arg4", ")", ";", "return", "loc0", ";", "}"], "nl": "Creates an RPC connection of the appropriate type and connection details  //@param type     RPC type", "nlToks": ["Creates", "an", "RPC", "connection", "of", "the", "appropriate", "type", "and", "connection", "details", "/", "/", "@param", "type", "RPC", "type"], "path": "porkkana/msfgui/tree/master/src/msfgui/rpc/RpcConnection.java", "idx": 2638}
{"memberVariables": {"uri3=\"not-black\"": "String", "uri1=\"black1\"": "String", "mockRepository": "BlacklistedSiteRepository", "uri2=\"black2\"": "String", "service=new DefaultBlacklistedSiteService()": "DefaultBlacklistedSiteService", "site1": "BlacklistedSite", "site2": "BlacklistedSite", "blackListedSitesSet": "Set<BlacklistedSite>"}, "code": ["void", "function", "(", ")", "{", "Mockito", ".", "when", "(", "mockRepository", ".", "getAll", "(", ")", ")", ".", "thenReturn", "(", "blackListedSitesSet", ")", ";", "assertTrue", "(", "service", ".", "isBlacklisted", "(", "uri1", ")", ")", ";", "assertTrue", "(", "service", ".", "isBlacklisted", "(", "uri2", ")", ")", ";", "Mockito", ".", "verify", "(", "mockRepository", ",", "times", "(", "2", ")", ")", ".", "getAll", "(", ")", ";", "}"], "memberFunctions": {"prepare": [["void"]], "isBlacklisted_no": [["void"]]}, "className": "TestDefaultBlacklistedSiteService", "renamed": ["void", "function", "(", ")", "{", "Mockito", ".", "when", "(", "mockRepository", ".", "getAll", "(", ")", ")", ".", "thenReturn", "(", "blackListedSitesSet", ")", ";", "assertTrue", "(", "service", ".", "isBlacklisted", "(", "uri1", ")", ")", ";", "assertTrue", "(", "service", ".", "isBlacklisted", "(", "uri2", ")", ")", ";", "Mockito", ".", "verify", "(", "mockRepository", ",", "times", "(", "2", ")", ")", ".", "getAll", "(", ")", ";", "}"], "nl": "Test finding blacklisted sites from the repository.", "nlToks": ["Test", "finding", "blacklisted", "sites", "from", "the", "repository", "."], "path": "adilansari/OpenID-Connect-Java-Spring-Server/tree/master/openid-connect-server/src/test/java/org/mitre/openid/connect/service/impl/TestDefaultBlacklistedSiteService.java", "idx": 2641}
{"memberVariables": {"INT_MASK=0xffffffffL": "long"}, "code": ["int", "function", "(", "String", "string", ",", "int", "radix", ")", "{", "checkNotNull", "(", "string", ")", ";", "long", "result", "=", "Long", ".", "parseLong", "(", "string", ",", "radix", ")", ";", "if", "(", "(", "result", "&", "INT_MASK", ")", "!=", "result", ")", "{", "throw", "new", "NumberFormatException", "(", "\"Input \"", "+", "string", "+", "\" in base \"", "+", "radix", "+", "\" is not in the range of an unsigned integer\"", ")", ";", "}", "return", "(", "int", ")", "result", ";", "}"], "memberFunctions": {"compare": [["int", "int a", "int b"], ["int", "int[] left", "int[] right"]], "saturatedCast": [["int", "long value"]], "toLong": [["long", "int value"]], "max": [["int", "int... array"]], "decode": [["int", "String stringValue"]], "min": [["int", "int... array"]], "lexicographicalComparator": [["Comparator<int[]>"]], "checkedCast": [["int", "long value"]], "toString": [["String"], ["String", "int x"], ["String", "int x", "int radix"]], "divide": [["int", "int dividend", "int divisor"]], "join": [["String", "String separator", "int... array"]], "flip": [["int", "int value"]], "remainder": [["int", "int dividend", "int divisor"]]}, "className": "UnsignedInts", "renamed": ["int", "function", "(", "String", "arg0", ",", "int", "arg1", ")", "{", "checkNotNull", "(", "arg0", ")", ";", "long", "loc0", "=", "Long", ".", "parseLong", "(", "arg0", ",", "arg1", ")", ";", "if", "(", "(", "loc0", "&", "INT_MASK", ")", "!=", "loc0", ")", "{", "throw", "new", "NumberFormatException", "(", "\"srini_string\"", "+", "arg0", "+", "\"srini_string\"", "+", "arg1", "+", "\"srini_string\"", ")", ";", "}", "return", "(", "int", ")", "loc0", ";", "}"], "nl": "Returns the unsigned  {@code int} value represented by a string with the given radix.", "nlToks": ["Returns", "the", "unsigned", "-LCB-", "@code", "int", "-RCB-", "value", "represented", "by", "a", "string", "with", "the", "given", "radix", "."], "path": "hazendaz/guava/tree/master/guava/src/com/google/common/primitives/UnsignedInts.java", "idx": 2642}
{"memberVariables": {"QUERY_BY_VALUE=\"AuthorizationCodeEntity.getByValue\"": "String", "code": "String", "QUERY_EXPIRATION_BY_DATE=\"AuthorizationCodeEntity.expirationByDate\"": "String", "PARAM_DATE=\"date\"": "String", "authenticationHolder": "AuthenticationHolderEntity", "expiration": "Date", "id": "Long"}, "code": ["AuthenticationHolderEntity", "function", "(", ")", "{", "return", "authenticationHolder", ";", "}"], "memberFunctions": {"getExpiration": [["Date"]], "setCode": [["void", "String code"]], "setId": [["void", "Long id"]], "getId": [["Long"]], "setAuthenticationHolder": [["void", "AuthenticationHolderEntity authenticationHolder"]], "setExpiration": [["void", "Date expiration"]], "getCode": [["String"]]}, "className": "AuthorizationCodeEntity", "renamed": ["AuthenticationHolderEntity", "function", "(", ")", "{", "return", "authenticationHolder", ";", "}"], "nl": "The authentication in place when this token was created.", "nlToks": ["The", "authentication", "in", "place", "when", "this", "token", "was", "created", "."], "path": "adilansari/OpenID-Connect-Java-Spring-Server/tree/master/openid-connect-common/src/main/java/org/mitre/oauth2/model/AuthorizationCodeEntity.java", "idx": 2643}
{"memberVariables": {"rte": "RTESentence", "EXAMPLE=\"$GPRTE,1,1,c,0,MELIN,RUSKI,KNUDAN*25\"": "String", "empty": "RTESentence"}, "code": ["void", "function", "(", ")", "{", "try", "{", "rte", ".", "setSentenceCount", "(", "-", "1", ")", ";", "fail", "(", "\"Did not throw exception\"", ")", ";", "}", "catch", "(", "IllegalArgumentException", "e", ")", "{", "assertTrue", "(", "e", ".", "getMessage", "(", ")", ".", "contains", "(", "\"cannot be negative\"", ")", ")", ";", "}", "catch", "(", "Exception", "e", ")", "{", "fail", "(", "e", ".", "getMessage", "(", ")", ")", ";", "}", "}"], "memberFunctions": {"testGetWaypointIds": [["void"]], "testIsActiveRoute": [["void"]], "testIsFirst": [["void"]], "testGetSentenceIndex": [["void"]], "testConstructor": [["void"]], "testAddWaypointId": [["void"]], "testGetSentenceCount": [["void"]], "testSetWaypointIds": [["void"]], "testSetRouteId": [["void"]], "testIsWorkingRoute": [["void"]], "testSetSentenceCount": [["void"]], "testGetRouteId": [["void"]], "testSetRouteTypeActive": [["void"]], "setUp": [["void"]], "testIsLast": [["void"]], "testGetWaypointCount": [["void"]], "testSetSentenceIndex": [["void"]], "testSetRouteTypeWorking": [["void"]], "testSetSentenceIndexWithNegativeValue": [["void"]]}, "className": "RTETest", "renamed": ["void", "function", "(", ")", "{", "try", "{", "rte", ".", "setSentenceCount", "(", "-", "1", ")", ";", "fail", "(", "\"srini_string\"", ")", ";", "}", "catch", "(", "IllegalArgumentException", "loc0", ")", "{", "assertTrue", "(", "loc0", ".", "getMessage", "(", ")", ".", "contains", "(", "\"srini_string\"", ")", ")", ";", "}", "catch", "(", "Exception", "loc0", ")", "{", "fail", "(", "loc0", ".", "getMessage", "(", ")", ")", ";", "}", "}"], "nl": "Test method for {@link net.sf.marineapi.nmea.parser.RTEParser#setSentenceCount(int)}.", "nlToks": ["Test", "method", "for", "-LCB-", "@link", "net.sf.marineapi.nmea.parser.RTEParser", "#setSentenceCount", "-LRB-", "int", "-RRB-", "-RCB-", "."], "path": "pkoziol/marine-api/tree/master/src/test/java/net/sf/marineapi/nmea/parser/RTETest.java", "idx": 2644}
{"memberVariables": {"chunks": "List<ScriptChunk>"}, "code": ["Script", "function", "(", "List", "<", "byte", "[", "]", ">", "signatures", ",", "@", "Nullable", "byte", "[", "]", "multisigProgramBytes", ")", "{", "checkArgument", "(", "signatures", ".", "size", "(", ")", "<=", "16", ")", ";", "ScriptBuilder", "builder", "=", "new", "ScriptBuilder", "(", ")", ";", "builder", ".", "smallNum", "(", "0", ")", ";", "for", "(", "byte", "[", "]", "signature", ":", "signatures", ")", "builder", ".", "data", "(", "signature", ")", ";", "if", "(", "multisigProgramBytes", "!=", "null", ")", "builder", ".", "data", "(", "multisigProgramBytes", ")", ";", "return", "builder", ".", "build", "(", ")", ";", "}"], "memberFunctions": {"op": [["ScriptBuilder", "int opcode"], ["ScriptBuilder", "int index", "int opcode"]], "updateScriptWithSignature": [["Script", "Script scriptSig", "byte[] signature", "int targetIndex", "int sigsPrefixCount", "int sigsSuffixCount"]], "createOpReturnScript": [["Script", "byte[] data"]], "data": [["ScriptBuilder", "byte[] data"], ["ScriptBuilder", "int index", "byte[] data"]], "smallNum": [["ScriptBuilder", "int num"], ["ScriptBuilder", "int index", "int num"]], "createRedeemScript": [["Script", "int threshold", "List<ECKey> pubkeys"]], "addChunk": [["ScriptBuilder", "ScriptChunk chunk"], ["ScriptBuilder", "int index", "ScriptChunk chunk"]], "createInputScript": [["Script", "@Nullable TransactionSignature signature", "ECKey pubKey"], ["Script", "@Nullable TransactionSignature signature"]], "createOutputScript": [["Script", "Address to"], ["Script", "ECKey key"]], "createMultiSigInputScript": [["Script", "List<TransactionSignature> signatures"], ["Script", "TransactionSignature... signatures"]], "createMultiSigOutputScript": [["Script", "int threshold", "List<ECKey> pubkeys"]], "build": [["Script"]], "createP2SHMultiSigInputScript": [["Script", "@Nullable List<TransactionSignature> signatures", "Script multisigProgram"]], "createP2SHOutputScript": [["Script", "byte[] hash"], ["Script", "Script redeemScript"], ["Script", "int threshold", "List<ECKey> pubkeys"]]}, "className": "ScriptBuilder", "renamed": ["Script", "function", "(", "List", "<", "byte", "[", "]", ">", "arg0", ",", "@", "Nullable", "byte", "[", "]", "arg1", ")", "{", "checkArgument", "(", "arg0", ".", "size", "(", ")", "<=", "16", ")", ";", "ScriptBuilder", "loc0", "=", "new", "ScriptBuilder", "(", ")", ";", "loc0", ".", "smallNum", "(", "0", ")", ";", "for", "(", "byte", "[", "]", "loc1", ":", "arg0", ")", "loc0", ".", "data", "(", "loc1", ")", ";", "if", "(", "arg1", "!=", "null", ")", "loc0", ".", "data", "(", "arg1", ")", ";", "return", "loc0", ".", "build", "(", ")", ";", "}"], "nl": "Create a program that satisfies an OP_CHECKMULTISIG program, using pre-encoded signatures.  Optionally, appends the script program bytes if spending a P2SH output.", "nlToks": ["Create", "a", "program", "that", "satisfies", "an", "OP_CHECKMULTISIG", "program", ",", "using", "pre-encoded", "signatures", ".", "Optionally", ",", "appends", "the", "script", "program", "bytes", "if", "spending", "a", "P2SH", "output", "."], "path": "1000000000001/bitcoinj/tree/master/core/src/main/java/org/bitcoinj/script/ScriptBuilder.java", "idx": 2646}
{"memberVariables": {}, "code": ["boolean", "function", "(", ")", "{", "return", "!", "Configuration", ".", "getEnum", "(", "PropertyKey", ".", "SECURITY_AUTHENTICATION_TYPE", ",", "AuthType", ".", "class", ")", ".", "equals", "(", "AuthType", ".", "NOSASL", ")", ";", "}"], "memberFunctions": {"isSecurityEnabled": [["boolean"]], "isAuthorizationEnabled": [["boolean"]]}, "className": "SecurityUtils", "renamed": ["boolean", "function", "(", ")", "{", "return", "!", "Configuration", ".", "getEnum", "(", "PropertyKey", ".", "SECURITY_AUTHENTICATION_TYPE", ",", "AuthType", ".", "class", ")", ".", "equals", "(", "AuthType", ".", "NOSASL", ")", ";", "}"], "nl": "Checks if authentication is enabled.", "nlToks": ["Checks", "if", "authentication", "is", "enabled", "."], "path": "poemlin/alluxio/tree/master/core/common/src/main/java/alluxio/util/SecurityUtils.java", "idx": 2647}
{"memberVariables": {"referencedRevisionA": "String", "referencedRevisionLabelA": "String", "referencedRevisionLabelB": "String", "referencedRevisionB": "String", "triple": "Triple", "tripleResolutionState": "SDDTripleStateEnum", "resolutionState": "ResolutionStateEnum"}, "code": ["void", "function", "(", "String", "referencedRevisionLabelB", ")", "{", "this", ".", "referencedRevisionLabelB", "=", "referencedRevisionLabelB", ";", "}"], "memberFunctions": {"getReferencedRevisionLabelB": [["String"]], "setResolutionState": [["void", "ResolutionStateEnum resolutionState"]], "getReferencedRevisionLabelA": [["String"]], "setReferencedRevisionLabelA": [["void", "String referencedRevisionLabelA"]], "getTripleResolutionState": [["SDDTripleStateEnum"]], "getTriple": [["Triple"]], "getReferencedRevisionB": [["String"]], "setTripleResolutionState": [["void", "SDDTripleStateEnum tripleResolutionState"]], "setTriple": [["void", "Triple triple"]], "setReferencedRevisionA": [["void", "String referencedRevisionA"]], "getReferencedRevisionA": [["String"]], "getResolutionState": [["ResolutionStateEnum"]], "setReferencedRevisionB": [["void", "String referencedRevisionB"]]}, "className": "Difference", "renamed": ["void", "function", "(", "String", "arg0", ")", "{", "this", ".", "referencedRevisionLabelB", "=", "arg0", ";", "}"], "nl": "Set the referenced revision label in B.", "nlToks": ["Set", "the", "referenced", "revision", "label", "in", "B."], "path": "plt-tud/r43ples/tree/master/src/main/java/de/tud/plt/r43ples/merging/model/structure/Difference.java", "idx": 2648}
{"memberVariables": {"naturalRanking": "NaturalRanking"}, "code": ["double", "[", "]", "function", "(", "final", "double", "[", "]", "z", ")", "{", "if", "(", "z", "==", "null", ")", "{", "throw", "new", "NullArgumentException", "(", ")", ";", "}", "if", "(", "z", ".", "length", "==", "0", ")", "{", "throw", "new", "NoDataException", "(", ")", ";", "}", "final", "double", "[", "]", "zAbs", "=", "new", "double", "[", "z", ".", "length", "]", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "z", ".", "length", ";", "++", "i", ")", "{", "zAbs", "[", "i", "]", "=", "FastMath", ".", "abs", "(", "z", "[", "i", "]", ")", ";", "}", "return", "zAbs", ";", "}"], "memberFunctions": {"wilcoxonSignedRank": [["double", "final double[] x", "final double[] y"]], "calculateAsymptoticPValue": [["double", "final double Wmin", "final int N"]], "calculateExactPValue": [["double", "final double Wmax", "final int N"]], "wilcoxonSignedRankTest": [["double", "final double[] x", "final double[] y", "final boolean exactPValue"]], "calculateDifferences": [["double[]", "final double[] x", "final double[] y"]], "ensureDataConformance": [["void", "final double[] x", "final double[] y"]]}, "className": "WilcoxonSignedRankTest", "renamed": ["double", "[", "]", "function", "(", "final", "double", "[", "]", "arg0", ")", "{", "if", "(", "arg0", "==", "null", ")", "{", "throw", "new", "NullArgumentException", "(", ")", ";", "}", "if", "(", "arg0", ".", "length", "==", "0", ")", "{", "throw", "new", "NoDataException", "(", ")", ";", "}", "final", "double", "[", "]", "loc0", "=", "new", "double", "[", "arg0", ".", "length", "]", ";", "for", "(", "int", "loc1", "=", "0", ";", "loc1", "<", "arg0", ".", "length", ";", "++", "loc1", ")", "{", "loc0", "[", "loc1", "]", "=", "FastMath", ".", "abs", "(", "arg0", "[", "loc1", "]", ")", ";", "}", "return", "loc0", ";", "}"], "nl": "Calculates |z[i]| for all i", "nlToks": ["Calculates", "|", "z", "-LSB-", "i", "-RSB-", "|", "for", "all", "i"], "path": "adelinosegundo/gene_analytics/tree/master/src/util/gene/signature/tests/WilcoxonSignedRankTest.java", "idx": 2650}
{"memberVariables": {"NULL_ESCAPER=new CharEscaper(){\n  @Override public String escape(  String string){\n    return checkNotNull(string);\n  }\n  @Override protected char[] escape(  char c){\n    return null;\n  }\n}\n": "Escaper", "replacementMap=new HashMap<Character,String>()": "Map<Character,String>", "safeMax=Character.MAX_VALUE": "char", "unsafeReplacement=null": "String", "safeMin=Character.MIN_VALUE": "char"}, "code": ["Builder", "function", "(", "char", "safeMin", ",", "char", "safeMax", ")", "{", "this", ".", "safeMin", "=", "safeMin", ";", "this", ".", "safeMax", "=", "safeMax", ";", "return", "this", ";", "}"], "memberFunctions": {"setUnsafeReplacement": [["Builder", "@Nullable String unsafeReplacement"]], "nullEscaper": [["Escaper"]], "build": [["Escaper"]], "addEscape": [["Builder", "char c", "String replacement"]], "builder": [["Builder"]], "stringOrNull": [["String", "char[] in"]], "asUnicodeEscaper": [["UnicodeEscaper", "Escaper escaper"]], "escape": [["String", "String string"], ["char[]", "char c"]], "computeReplacement": [["String", "CharEscaper escaper", "char c"], ["String", "UnicodeEscaper escaper", "int cp"]], "wrap": [["UnicodeEscaper", "final CharEscaper escaper"]]}, "className": "Escapers", "renamed": ["Builder", "function", "(", "char", "arg0", ",", "char", "arg1", ")", "{", "this", ".", "safeMin", "=", "arg0", ";", "this", ".", "safeMax", "=", "arg1", ";", "return", "this", ";", "}"], "nl": "Sets the safe range of characters for the escaper. Characters in this range that have no explicit replacement are considered 'safe' and remain unescaped in the output. If {@code safeMax < safeMin} then the safe range is empty.", "nlToks": ["Sets", "the", "safe", "range", "of", "characters", "for", "the", "escaper", ".", "Characters", "in", "this", "range", "that", "have", "no", "explicit", "replacement", "are", "considered", "`", "safe", "'", "and", "remain", "unescaped", "in", "the", "output", ".", "If", "-LCB-", "@code", "safeMax", "<", "safeMin", "-RCB-", "then", "the", "safe", "range", "is", "empty", "."], "path": "hazendaz/guava/tree/master/guava/src/com/google/common/escape/Escapers.java", "idx": 2651}
{"memberVariables": {"listeners": "List", "line": "SourceDataLine", "filePath": "String", "playerThread": "Thread", "decoder": "FLACDecoder", "fmt": "AudioFormat", "info": "DataLine.Info"}, "code": ["void", "function", "(", "LineListener", "listener", ")", "{", "listeners", ".", "add", "(", "listener", ")", ";", "}"], "memberFunctions": {"play": [["void"], ["String", "String filePath"]], "processStreamInfo": [["void", "StreamInfo streamInfo"]], "processPCM": [["void", "ByteData pcm"]], "stop": [["void"]], "update": [["void", "LineEvent event"]], "run": [["void"]], "removeListener": [["void", "LineListener listener"]], "decode": [["void", "String inFileName"]]}, "className": "PlayerFlac", "renamed": ["void", "function", "(", "LineListener", "arg0", ")", "{", "listeners", ".", "add", "(", "arg0", ")", ";", "}"], "nl": "add a listener", "nlToks": ["add", "a", "listener"], "path": "phramusca/JaMuz/tree/master/src/jamuz/player/PlayerFlac.java", "idx": 2655}
{"memberVariables": {"timeElapsed": "long", "request": "HttpServletRequest", "messages": "ArrayList", "startTime": "Date", "stopTime": "Date", "parameters": "ArrayList"}, "code": ["long", "function", "(", ")", "{", "return", "timeElapsed", ";", "}"], "memberFunctions": {"getDebugMessages": [["ArrayList"]], "getRequest": [["HttpServletRequest"]], "getCompleteLog": [["String"]], "getParameters": [["ArrayList"]], "startTimer": [["void"]], "logMsg": [["void", "Object caller", "String msg", "String color"], ["void", "Object caller", "String msg"]], "stopTimer": [["void"]], "addParameter": [["void", "int type", "String name", "String value"], ["void", "int type", "String name", "int value"], ["void", "int type", "String name", "boolean value"]]}, "className": "XDebug", "renamed": ["long", "function", "(", ")", "{", "return", "timeElapsed", ";", "}"], "nl": "Gets the total time elapsed (in milliseconds).", "nlToks": ["Gets", "the", "total", "time", "elapsed", "-LRB-", "in", "milliseconds", "-RRB-", "."], "path": "adamabeshouse/cbioportal/tree/master/core/src/main/java/org/mskcc/cbio/portal/util/XDebug.java", "idx": 2657}
{"memberVariables": {"downscalingHint": "DownscaleQuality", "targetHeight": "int", "renderingHint": "Object", "targetWidth": "int"}, "code": ["void", "function", "(", "Graphics2D", "g2", ")", "{", "g2", ".", "setRenderingHints", "(", "getRenderingHints", "(", ")", ")", ";", "}"], "memberFunctions": {"getTargetHeight": [["int"]], "sizeMatches": [["boolean", "int w", "int h"], ["boolean", "Image img"]], "getDownscalingHint": [["DownscaleQuality"]], "setTargetWidth": [["void", "int targetWidth"]], "getRenderingHint": [["Object"]], "setTargetDimensions": [["void", "Dimension dim"]], "getRenderingHints": [["Map"]], "setTargetHeight": [["void", "int targetHeight"]], "getTargetWidth": [["int"]]}, "className": "ScalingOptions", "renamed": ["void", "function", "(", "Graphics2D", "arg0", ")", "{", "arg0", ".", "setRenderingHints", "(", "getRenderingHints", "(", ")", ")", ";", "}"], "nl": "Applies any rendering hints configured for these ScalingOptions to a Graphics2D instance before image operations are called on it. These might be", "nlToks": ["Applies", "any", "rendering", "hints", "configured", "for", "these", "ScalingOptions", "to", "a", "Graphics2D", "instance", "before", "image", "operations", "are", "called", "on", "it", ".", "These", "might", "be"], "path": "plutogeek/flyingsaucer/tree/master/flying-saucer-core/src/main/java/org/xhtmlrenderer/util/ScalingOptions.java", "idx": 2658}
{"memberVariables": {"classnamePrefix": "String", "LOG=Logger.getLogger(ParseState.class)": "Logger", "obsoleteInnerClasses": "Collection", "component": "Object", "anonymousClassCounter": "int", "context": "Context", "classifier": "Object", "obsoleteFeatures": "Collection"}, "code": ["String", "function", "(", ")", "{", "return", "classnamePrefix", ";", "}"], "memberFunctions": {"addClassifierContext": [["void", "Object mClassifier"]], "addPackageContext": [["void", "Object mPackage"]], "removeObsoleteFeatures": [["void"]], "innerClassifier": [["void", "Object mClassifier"]], "addComponent": [["void", "Object c"]], "outerClassifier": [["void"]], "getMethod": [["Object", "String name"]], "getClassifier": [["Object"]], "getFeature": [["Object", "String name"]], "removeObsoleteInnerClasses": [["void"]], "getAttribute": [["Object", "String name"]], "feature": [["void", "Object feature"]], "getFeatures": [["Collection", "String name"]], "getOperation": [["Object", "String name"]], "getComponent": [["Object"]], "anonymousClass": [["String"]], "getContext": [["Context"]]}, "className": "ParseState", "renamed": ["String", "function", "(", ")", "{", "return", "classnamePrefix", ";", "}"], "nl": "Get the current classname prefix.", "nlToks": ["Get", "the", "current", "classname", "prefix", "."], "path": "pichiliani/CoArgoUML/tree/master/v0.24/fonte/src/argouml-app/src/org/argouml/uml/reveng/java/ParseState.java", "idx": 2660}
{"memberVariables": {"LOG=Logger.getLogger(\"aimax.osm\")": "Logger"}, "code": ["void", "function", "(", "File", "file", ",", "MapBuilder", "builder", ")", "{", "try", "{", "parseMap", "(", "createFileStream", "(", "file", ")", ",", "builder", ")", ";", "}", "catch", "(", "FileNotFoundException", "e", ")", "{", "LOG", ".", "warning", "(", "\"File \"", "+", "file", "+", "\" does not exist.\"", ")", ";", "}", "catch", "(", "Exception", "e", ")", "{", "LOG", ".", "warning", "(", "\"The map could not be read. \"", "+", "e", ")", ";", "}", "}"], "memberFunctions": {"fileFormatDescriptions": [["String[]"]], "parseMap": [["void", "InputStream inputStream", "MapBuilder consumer"]], "createFileStream": [["InputStream", "File file"]], "createParser": [["SAXParser"]], "fileFormatExtensions": [["String[]"]], "setFilter": [["void", "BoundingBox bb"], ["void", "EntityClassifier<Boolean> attFilter"]]}, "className": "OsmReader", "renamed": ["void", "function", "(", "File", "arg0", ",", "MapBuilder", "arg1", ")", "{", "try", "{", "parseMap", "(", "createFileStream", "(", "arg0", ")", ",", "arg1", ")", ";", "}", "catch", "(", "FileNotFoundException", "loc0", ")", "{", "LOG", ".", "warning", "(", "\"srini_string\"", "+", "arg0", "+", "\"srini_string\"", ")", ";", "}", "catch", "(", "Exception", "loc0", ")", "{", "LOG", ".", "warning", "(", "\"srini_string\"", "+", "loc0", ")", ";", "}", "}"], "nl": "Reads all data from the file and send it to the sink.", "nlToks": ["Reads", "all", "data", "from", "the", "file", "and", "send", "it", "to", "the", "sink", "."], "path": "peterplupo/ia201102/tree/master/trabalho1/aimax-osm/src/main/java/aimax/osm/reader/OsmReader.java", "idx": 2661}
{"memberVariables": {"NAME=\"name\"": "String", "FAULT=\"fault\"": "String", "MEMBER=\"member\"": "String", "tz": "TimeZone", "values=new ArrayList<>()": "ArrayList<Object>", "VALUE=\"value\"": "String"}, "code": ["byte", "[", "]", "function", "(", "int", "index", ")", "{", "Object", "val", "=", "values", ".", "get", "(", "index", ")", ";", "if", "(", "val", "instanceof", "byte", "[", "]", ")", "{", "return", "(", "byte", "[", "]", ")", "val", ";", "}", "else", "{", "throw", "new", "IllegalStateException", "(", ")", ";", "}", "}"], "memberFunctions": {"getStringValue": [["String", "int index"]], "parseArray": [["ArrayList<Object>", "Node valueNode"]], "getValues": [["List"]], "getStructValue": [["Map<String,Object>", "int index"]], "getDoubleValue": [["Double", "int index"]], "getValueCount": [["int"]], "parse": [["void", "Document doc"]], "getIntegerValue": [["Integer", "int index"]], "getBooleanValue": [["Boolean", "int index"]], "parseStruct": [["HashMap<String,Object>", "Node valueNode"]], "getArrayValue": [["List<Object>", "int index"]], "parseValue": [["Object", "Node valueNode"]], "getDateValue": [["Date", "int index"]]}, "className": "XMLRPCResult", "renamed": ["byte", "[", "]", "function", "(", "int", "arg0", ")", "{", "Object", "loc0", "=", "values", ".", "get", "(", "arg0", ")", ";", "if", "(", "loc0", "instanceof", "byte", "[", "]", ")", "{", "return", "(", "byte", "[", "]", ")", "loc0", ";", "}", "else", "{", "throw", "new", "IllegalStateException", "(", ")", ";", "}", "}"], "nl": "Returns result value as binary data.", "nlToks": ["Returns", "result", "value", "as", "binary", "data", "."], "path": "petr-panteleyev/java-xmlrpc/tree/master/src/main/java/org/panteleyev/xmlrpc/XMLRPCResult.java", "idx": 2662}
{"memberVariables": {"mLockManager": "BlockLockManager", "TEST_BLOCK_ID=9": "long", "mThrown=ExpectedException.none()": "ExpectedException", "TEST_SESSION_ID=2": "long", "mFolder=new TemporaryFolder()": "TemporaryFolder"}, "code": ["void", "function", "(", "final", "BlockLockManager", "manager", ",", "final", "long", "blockId", ")", "{", "Thread", "thread", "=", "new", "Thread", "(", "new", "Runnable", "(", ")", "{", "@", "Override", "public", "void", "run", "(", ")", "{", "manager", ".", "lockBlock", "(", "TEST_SESSION_ID", ",", "blockId", ",", "BlockLockType", ".", "WRITE", ")", ";", "}", "}", ")", ";", "thread", ".", "start", "(", ")", ";", "thread", ".", "join", "(", "200", ")", ";", "Assert", ".", "assertTrue", "(", "thread", ".", "isAlive", "(", ")", ")", ";", "}"], "memberFunctions": {"lockAcrossSessions": [["void"]], "stress": [["void"]], "validateLockIdWithNoRecord": [["void"]], "unlockNonExistingLock": [["void"]], "dontReuseLock": [["void"]], "before": [["void"]], "reuseLock": [["void"]], "readBlocksWrite": [["void"]], "validateLockIdWithWrongBlockId": [["void"]], "setMaxLocks": [["void", "int maxLocks"]], "lockBlock": [["void"]], "grabManyLocks": [["void"]], "validateLockIdWithWrongSessionId": [["void"]], "cleanupSession": [["void"]], "after": [["void"]]}, "className": "BlockLockManagerTest", "renamed": ["void", "function", "(", "final", "BlockLockManager", "arg0", ",", "final", "long", "arg1", ")", "{", "Thread", "loc0", "=", "new", "Thread", "(", "new", "Runnable", "(", ")", "{", "@", "Override", "public", "void", "run", "(", ")", "{", "arg0", ".", "lockBlock", "(", "TEST_SESSION_ID", ",", "arg1", ",", "BlockLockType", ".", "WRITE", ")", ";", "}", "}", ")", ";", "loc0", ".", "start", "(", ")", ";", "loc0", ".", "join", "(", "200", ")", ";", "Assert", ".", "assertTrue", "(", "loc0", ".", "isAlive", "(", ")", ")", ";", "}"], "nl": "Calls  {@link BlockLockManager#lockBlock(long,long,BlockLockType)} and fails if it doesn'thang.", "nlToks": ["Calls", "-LCB-", "@link", "BlockLockManager", "#lockBlock", "-LRB-", "long", ",", "long", ",", "BlockLockType", "-RRB-", "-RCB-", "and", "fails", "if", "it", "does", "n'thang", "."], "path": "poemlin/alluxio/tree/master/core/server/src/test/java/alluxio/worker/block/BlockLockManagerTest.java", "idx": 2663}
{"memberVariables": {"topType": "Type", "v": "List<Type>", "ts": "TypeSystem"}, "code": ["boolean", "function", "(", "Object", "o", ")", "{", "Type", "type", "=", "(", "Type", ")", "o", ";", "boolean", "removed", "=", "false", ";", "for", "(", "Iterator", "<", "Type", ">", "i", "=", "v", ".", "iterator", "(", ")", ";", "i", ".", "hasNext", "(", ")", ";", ")", "{", "Type", "t", "=", "i", ".", "next", "(", ")", ";", "if", "(", "ts", ".", "isSubtype", "(", "t", ",", "type", ")", ")", "{", "removed", "=", "true", ";", "i", ".", "remove", "(", ")", ";", "}", "}", "return", "removed", ";", "}"], "memberFunctions": {"add": [["boolean", "Type type"]], "containsAll": [["boolean", "Collection<?> c"]], "clear": [["void"]], "isEmpty": [["boolean"]], "contains": [["boolean", "Object o"]], "iterator": [["Iterator<Type>"]], "removeAll": [["boolean", "Collection<?> c"]], "size": [["int"]], "addAll": [["boolean", "Collection<? extends Type> c"]], "containsSubtype": [["boolean", "Type type"]], "toArray": [["Object[]"], ["U[]", "U[] a"]], "toString": [["String"]], "retainAll": [["boolean", "Collection<?> c"]]}, "className": "SubtypeSet", "renamed": ["boolean", "function", "(", "Object", "arg0", ")", "{", "Type", "loc0", "=", "(", "Type", ")", "arg0", ";", "boolean", "loc1", "=", "false", ";", "for", "(", "Iterator", "<", "Type", ">", "loc2", "=", "v", ".", "iterator", "(", ")", ";", "loc2", ".", "hasNext", "(", ")", ";", ")", "{", "Type", "loc3", "=", "loc2", ".", "next", "(", ")", ";", "if", "(", "ts", ".", "isSubtype", "(", "loc3", ",", "loc0", ")", ")", "{", "loc1", "=", "true", ";", "loc2", ".", "remove", "(", ")", ";", "}", "}", "return", "loc1", ";", "}"], "nl": "Removes all elements  {@code s} in the set such that {@code s} decends from {@code o}", "nlToks": ["Removes", "all", "elements", "-LCB-", "@code", "s", "-RCB-", "in", "the", "set", "such", "that", "-LCB-", "@code", "s", "-RCB-", "decends", "from", "-LCB-", "@code", "o", "-RCB-"], "path": "polyglot-compiler/polyglot/tree/master/src/polyglot/util/SubtypeSet.java", "idx": 2664}
{"memberVariables": {"mustUnderstand": "List<QName>", "replyTo": "EndpointReferenceType", "faultTo": "EndpointReferenceType", "messageID": "AttributedURIType", "action": "AttributedURIType", "from": "EndpointReferenceType", "namespaceURI": "String", "to": "EndpointReferenceType", "toURIType": "AttributedURIType", "duplicate": "QName", "relatesTo": "RelatesToType"}, "code": ["EndpointReferenceType", "function", "(", ")", "{", "return", "faultTo", ";", "}"], "memberFunctions": {"getMustUnderstand": [["List<QName>"]], "setAction": [["void", "AttributedURIType iri"]], "getReplyTo": [["EndpointReferenceType"]], "exposeAs": [["void", "String uri"]], "setFrom": [["void", "EndpointReferenceType epr"]], "setDuplicate": [["void", "QName dup"]], "getRelatesTo": [["RelatesToType"]], "getTo": [["AttributedURIType"]], "getAction": [["AttributedURIType"]], "setMessageID": [["void", "AttributedURIType iri"]], "getMessageID": [["AttributedURIType"]], "setReplyTo": [["void", "EndpointReferenceType ref"]], "setFaultTo": [["void", "EndpointReferenceType ref"]], "getDuplicate": [["QName"]], "setTo": [["void", "AttributedURIType t"], ["void", "EndpointReferenceType epr"]], "setRelatesTo": [["void", "RelatesToType rel"]], "getToEndpointReference": [["EndpointReferenceType"]], "getNamespaceURI": [["String"]], "toString": [["String"]], "createCompatibleResponseProperties": [["AddressingProperties"]], "getFrom": [["EndpointReferenceType"]]}, "className": "AddressingProperties", "renamed": ["EndpointReferenceType", "function", "(", ")", "{", "return", "faultTo", ";", "}"], "nl": "Accessor for the FaultTo property.", "nlToks": ["Accessor", "for", "the", "FaultTo", "property", "."], "path": "primesign/cxf/tree/master/core/src/main/java/org/apache/cxf/ws/addressing/AddressingProperties.java", "idx": 2665}
{"memberVariables": {"bigIcon": "int", "emojiText": "String", "icon": "int", "name": "String", "type": "Type", "iconPath": "String", "identityCode": "String", "bigIconPath": "String"}, "code": ["void", "function", "(", "String", "name", ")", "{", "this", ".", "name", "=", "name", ";", "}"], "memberFunctions": {"getName": [["String"]], "getIconPath": [["String"]], "getBigIcon": [["int"]], "setBigIcon": [["void", "int dynamicIcon"]], "setType": [["void", "Type type"]], "setIdentityCode": [["void", "String identityCode"]], "getIcon": [["int"]], "getEmojiText": [["String"]], "getBigIconPath": [["String"]], "setIcon": [["void", "int icon"]], "setBigIconPath": [["void", "String bigIconPath"]], "setEmojiText": [["void", "String emojiText"]], "setIconPath": [["void", "String iconPath"]], "getType": [["Type"]], "getIdentityCode": [["String"]], "newEmojiText": [["String", "int codePoint"]]}, "className": "EaseEmojicon", "renamed": ["void", "function", "(", "String", "arg0", ")", "{", "this", ".", "name", "=", "arg0", ";", "}"], "nl": "set name of emoji icon", "nlToks": ["set", "name", "of", "emoji", "icon"], "path": "15109237255/SuperWeChat/tree/master/easeui/src/com/hyphenate/easeui/domain/EaseEmojicon.java", "idx": 2666}
{"memberVariables": {"sequenceNumber": "long", "lastFeedbacktime": "long", "k=2": "long"}, "code": ["void", "function", "(", ")", "{", "k", "++", ";", "lastFeedbacktime", "=", "Util", ".", "getCurrentTime", "(", ")", ";", "}"], "memberFunctions": {"getSequenceNumber": [["long"]], "getK": [["long"]], "hashCode": [["int"]], "equals": [["boolean", "Object obj"]], "toString": [["String"]], "compareTo": [["int", "ReceiverLossListEntry o"]], "getLastFeedbackTime": [["long"]]}, "className": "ReceiverLossListEntry", "renamed": ["void", "function", "(", ")", "{", "k", "++", ";", "lastFeedbacktime", "=", "Util", ".", "getCurrentTime", "(", ")", ";", "}"], "nl": "call once when this seqNo is fed back in NAK", "nlToks": ["call", "once", "when", "this", "seqNo", "is", "fed", "back", "in", "NAK"], "path": "adamfisk/littleshoot-client/tree/master/common/udt/src/main/java/udt/receiver/ReceiverLossListEntry.java", "idx": 2667}
{"memberVariables": {"roleClassifierType=\"prefix\"": "String", "roleClassifier": "String"}, "code": ["void", "function", "(", "String", "roleClassifier", ")", "{", "this", ".", "roleClassifier", "=", "roleClassifier", ";", "}"], "memberFunctions": {"getRoleClassifierType": [["String"]], "parseRolesFromSubject": [["Set<Principal>", "Principal principal", "Subject subject"]], "getRoleClassifier": [["String"]], "setRoleClassifierType": [["void", "String roleClassifierType"]]}, "className": "DefaultSubjectRoleParser", "renamed": ["void", "function", "(", "String", "arg0", ")", "{", "this", ".", "roleClassifier", "=", "arg0", ";", "}"], "nl": "Set the Subject Role Classifier to use. If this value is not specified, then it tries to get roles from the supplied JAAS Subject (if not null) using the DefaultSecurityContext  in cxf-rt-core. Otherwise it uses this value in combination with the  SUBJECT_ROLE_CLASSIFIER_TYPE to get the roles from the Subject.", "nlToks": ["Set", "the", "Subject", "Role", "Classifier", "to", "use", ".", "If", "this", "value", "is", "not", "specified", ",", "then", "it", "tries", "to", "get", "roles", "from", "the", "supplied", "JAAS", "Subject", "-LRB-", "if", "not", "null", "-RRB-", "using", "the", "DefaultSecurityContext", "in", "cxf-rt-core", ".", "Otherwise", "it", "uses", "this", "value", "in", "combination", "with", "the", "SUBJECT_ROLE_CLASSIFIER_TYPE", "to", "get", "the", "roles", "from", "the", "Subject", "."], "path": "primesign/cxf/tree/master/services/sts/sts-core/src/main/java/org/apache/cxf/sts/token/validator/DefaultSubjectRoleParser.java", "idx": 2668}
{"memberVariables": {"INCREASING_BYTES=BufferUtils.getIncreasingByteArray((int)BLOCK_LENGTH)": "byte[]", "BLOCK_LENGTH=100L": "long", "mTestStream": "TestBufferedBlockOutStream", "mThrown=ExpectedException.none()": "ExpectedException"}, "code": ["void", "function", "(", ")", "{", "for", "(", "int", "i", "=", "0", ";", "i", "<", "BLOCK_LENGTH", ";", "i", "++", ")", "{", "mTestStream", ".", "write", "(", "INCREASING_BYTES", "[", "i", "]", ")", ";", "Assert", ".", "assertEquals", "(", "i", "+", "1", ",", "mTestStream", ".", "getWrittenBytes", "(", ")", ")", ";", "}", "Assert", ".", "assertArrayEquals", "(", "INCREASING_BYTES", ",", "Arrays", ".", "copyOfRange", "(", "mTestStream", ".", "getBuffer", "(", ")", ".", "array", "(", ")", ",", "0", ",", "(", "int", ")", "BLOCK_LENGTH", ")", ")", ";", "}"], "memberFunctions": {"byteArrayAtOffset": [["void"]], "byteArrayWrite": [["void"]], "before": [["void"]], "doubleFlush": [["void"]], "writePastBlock": [["void"]], "remaining": [["void"]], "writeToClosed": [["void"]]}, "className": "BufferedBlockOutStreamTest", "renamed": ["void", "function", "(", ")", "{", "for", "(", "int", "loc0", "=", "0", ";", "loc0", "<", "BLOCK_LENGTH", ";", "loc0", "++", ")", "{", "mTestStream", ".", "write", "(", "INCREASING_BYTES", "[", "loc0", "]", ")", ";", "Assert", ".", "assertEquals", "(", "loc0", "+", "1", ",", "mTestStream", ".", "getWrittenBytes", "(", ")", ")", ";", "}", "Assert", ".", "assertArrayEquals", "(", "INCREASING_BYTES", ",", "Arrays", ".", "copyOfRange", "(", "mTestStream", ".", "getBuffer", "(", ")", ".", "array", "(", ")", ",", "0", ",", "(", "int", ")", "BLOCK_LENGTH", ")", ")", ";", "}"], "nl": "Tests writing an increasing byte array one byte at a time.", "nlToks": ["Tests", "writing", "an", "increasing", "byte", "array", "one", "byte", "at", "a", "time", "."], "path": "poemlin/alluxio/tree/master/core/client/src/test/java/alluxio/client/block/BufferedBlockOutStreamTest.java", "idx": 2669}
{"memberVariables": {"mWriter": "ByteBuffer", "mBuffer": "byte[]"}, "code": ["BufferedByteWriter", "function", "(", "byte", "value", ")", "{", "return", "this", ".", "put16", "(", "(", "short", ")", "(", "value", "&", "0xFF", ")", ")", ";", "}"], "memberFunctions": {"put24": [["BufferedByteWriter", "byte value"], ["BufferedByteWriter", "short value"], ["BufferedByteWriter", "int value"]], "putLen8": [["BufferedByteWriter", "byte[] value"]], "putLen16": [["BufferedByteWriter", "byte[] value"]], "toByteArray": [["byte[]"]], "ensureCapacity": [["void", "int required"]], "put64": [["BufferedByteWriter", "byte value"], ["BufferedByteWriter", "short value"], ["BufferedByteWriter", "int value"], ["BufferedByteWriter", "long value"]], "put": [["BufferedByteWriter", "byte[] value"], ["BufferedByteWriter", "byte value"]], "put32": [["BufferedByteWriter", "byte value"], ["BufferedByteWriter", "short value"], ["BufferedByteWriter", "int value"]]}, "className": "BufferedByteWriter", "renamed": ["BufferedByteWriter", "function", "(", "byte", "arg0", ")", "{", "return", "this", ".", "put16", "(", "(", "short", ")", "(", "arg0", "&", "0xFF", ")", ")", ";", "}"], "nl": "Write the given short value (16-bit) in big-endian order to the buffer", "nlToks": ["Write", "the", "given", "short", "value", "-LRB-", "16-bit", "-RRB-", "in", "big-endian", "order", "to", "the", "buffer"], "path": "prathyks/strongswan/tree/master/src/frontends/android/app/src/main/java/org/strongswan/android/utils/BufferedByteWriter.java", "idx": 2671}
{"memberVariables": {"mBucketList": "ConcurrentSkipListSet<TtlBucket>"}, "code": ["void", "function", "(", "InodeFile", "file", ")", "{", "TtlBucket", "bucket", "=", "getBucketContaining", "(", "file", ")", ";", "if", "(", "bucket", "!=", "null", ")", "{", "bucket", ".", "removeFile", "(", "file", ")", ";", "}", "}"], "memberFunctions": {"getExpiredBuckets": [["Set<TtlBucket>", "long time"]], "removeBuckets": [["void", "Set<TtlBucket> buckets"]], "insert": [["void", "InodeFile file"]], "getBucketContaining": [["TtlBucket", "InodeFile file"]]}, "className": "TtlBucketList", "renamed": ["void", "function", "(", "InodeFile", "arg0", ")", "{", "TtlBucket", "loc0", "=", "getBucketContaining", "(", "arg0", ")", ";", "if", "(", "loc0", "!=", "null", ")", "{", "loc0", ".", "removeFile", "(", "arg0", ")", ";", "}", "}"], "nl": "Removes a file from the bucket containing it if the file is in one of the buckets, otherwise, do nothing.  Assume that no file in the buckets has ttl value that equals  {@link Constants#NO_TTL}. If a file with valid ttl value is inserted to the buckets and its ttl value is going to be set to  {@link Constants#NO_TTL} later, be sure to remove the file from the buckets first.", "nlToks": ["Removes", "a", "file", "from", "the", "bucket", "containing", "it", "if", "the", "file", "is", "in", "one", "of", "the", "buckets", ",", "otherwise", ",", "do", "nothing", ".", "Assume", "that", "no", "file", "in", "the", "buckets", "has", "ttl", "value", "that", "equals", "-LCB-", "@link", "Constants", "#NO_TTL", "-RCB-", ".", "If", "a", "file", "with", "valid", "ttl", "value", "is", "inserted", "to", "the", "buckets", "and", "its", "ttl", "value", "is", "going", "to", "be", "set", "to", "-LCB-", "@link", "Constants", "#NO_TTL", "-RCB-", "later", ",", "be", "sure", "to", "remove", "the", "file", "from", "the", "buckets", "first", "."], "path": "poemlin/alluxio/tree/master/core/server/src/main/java/alluxio/master/file/meta/TtlBucketList.java", "idx": 2672}
{"memberVariables": {"fail": "String", "pass": "String", "moduleName": "String", "noRun": "String", "ID": "int", "value": "String", "totalTC": "String"}, "code": ["String", "function", "(", ")", "{", "return", "noRun", ";", "}"], "memberFunctions": {"getPass": [["String"]], "setNoRun": [["void", "String value"]], "getTotalTC": [["String"]], "getID": [["int"]], "setFail": [["void", "String value"]], "getFail": [["String"]], "compareTo": [["int", "Module o"]], "getModuleName": [["String"]], "getValue": [["String"]], "setValue": [["void", "String value"]], "setID": [["void", "int iD"]], "setTotalTC": [["void", "String value"]], "setModuleName": [["void", "String value"]], "setPass": [["void", "String value"]]}, "className": "Module", "renamed": ["String", "function", "(", ")", "{", "return", "noRun", ";", "}"], "nl": "Gets the value of the noRun property.", "nlToks": ["Gets", "the", "value", "of", "the", "noRun", "property", "."], "path": "prabalbsws/selenium_automation/tree/master/src/newpojo/Module.java", "idx": 2673}
{"memberVariables": {"mInodeTree": "InodeTree", "mPermissionCheckEnabled": "boolean", "mFileSystemSuperGroup": "String"}, "code": ["void", "function", "(", "Mode", ".", "Bits", "bits", ",", "LockedInodePath", "inodePath", ")", "{", "if", "(", "!", "mPermissionCheckEnabled", ")", "{", "return", ";", "}", "List", "<", "Inode", "<", "?", ">>", "inodeList", "=", "inodePath", ".", "getInodeList", "(", ")", ";", "String", "user", "=", "getClientUser", "(", ")", ";", "List", "<", "String", ">", "groups", "=", "getGroups", "(", "user", ")", ";", "checkInodeList", "(", "user", ",", "groups", ",", "bits", ",", "inodePath", ".", "getUri", "(", ")", ".", "getPath", "(", ")", ",", "inodeList", ",", "false", ")", ";", "}"], "memberFunctions": {"checkOwner": [["void", "LockedInodePath inodePath"]], "checkInode": [["void", "String user", "List<String> groups", "Inode inode", "Mode.Bits bits", "String path"]], "checkSetAttributePermission": [["void", "LockedInodePath inodePath", "boolean superuserRequired", "boolean ownerRequired"]], "checkParentPermission": [["void", "Mode.Bits bits", "LockedInodePath inodePath"]], "isPrivilegedUser": [["boolean", "String user", "List<String> groups"]], "checkInodeList": [["void", "String user", "List<String> groups", "Mode.Bits bits", "String path", "List<Inode<?>> inodeList", "boolean checkIsOwner"]], "checkSuperUser": [["void"]], "getClientUser": [["String"]], "getGroups": [["List<String>", "String user"]], "toExceptionMessage": [["String", "String user", "Mode.Bits bits", "String path", "Inode inode"]]}, "className": "PermissionChecker", "renamed": ["void", "function", "(", "Mode", ".", "Bits", "arg0", ",", "LockedInodePath", "arg1", ")", "{", "if", "(", "!", "mPermissionCheckEnabled", ")", "{", "return", ";", "}", "List", "<", "Inode", "<", "?", ">>", "loc0", "=", "arg1", ".", "getInodeList", "(", ")", ";", "String", "loc1", "=", "getClientUser", "(", ")", ";", "List", "<", "String", ">", "loc2", "=", "getGroups", "(", "loc1", ")", ";", "checkInodeList", "(", "loc1", ",", "loc2", ",", "arg0", ",", "arg1", ".", "getUri", "(", ")", ".", "getPath", "(", ")", ",", "loc0", ",", "false", ")", ";", "}"], "nl": "Checks whether a user has permission to perform a specific action on a path. This check will pass if the path is invalid.", "nlToks": ["Checks", "whether", "a", "user", "has", "permission", "to", "perform", "a", "specific", "action", "on", "a", "path", ".", "This", "check", "will", "pass", "if", "the", "path", "is", "invalid", "."], "path": "poemlin/alluxio/tree/master/core/server/src/main/java/alluxio/master/file/PermissionChecker.java", "idx": 2674}
{"memberVariables": {"ep=new Endpoint()": "Endpoint", "logger=Logger.getLogger(DatasetGenerationManagement.class)": "Logger"}, "code": ["void", "function", "(", "String", "user", ",", "String", "message", ",", "String", "graphName", ",", "String", "revision", ",", "String", "triples", ")", "{", "String", "query", "=", "String", ".", "format", "(", "\"USER \"%s\" %n\"", "+", "\"MESSAGE \"%s\" %n\"", "+", "\"DELETE DATA { GRAPH <%s> REVISION \"%s\" %n\"", "+", "\" { %n\"", "+", "\"   %s %n\"", "+", "\" } %n\"", "+", "\"}\"", ",", "user", ",", "message", ",", "graphName", ",", "revision", ",", "triples", ")", ";", "ep", ".", "sparql", "(", "MediaType", ".", "TEXT_HTML", ",", "query", ")", ";", "}"], "memberFunctions": {"executeInsertDeleteQuery": [["void", "String user", "String message", "String graphName", "String revision", "String triplesInsert", "String triplesDelete"]], "createNewBranch": [["void", "String user", "String message", "String graphName", "String revision", "String branchName"]], "executeInsertQuery": [["void", "String user", "String message", "String graphName", "String revision", "String triples"]], "executeDeleteWhereQuery": [["void", "String user", "String message", "String graphName", "String revision", "String triples"]]}, "className": "DatasetGenerationManagement", "renamed": ["void", "function", "(", "String", "arg0", ",", "String", "arg1", ",", "String", "arg2", ",", "String", "arg3", ",", "String", "arg4", ")", "{", "String", "loc0", "=", "String", ".", "format", "(", "\"srini_string\"", "%", "s", "+", "\"srini_string\"", "%", "s", "+", "\"srini_string\"", "%", "s", "+", "\"srini_string\"", "+", "\"srini_string\"", "+", "\"srini_string\"", "+", "\"srini_string\"", ",", "arg0", ",", "arg1", ",", "arg2", ",", "arg3", ",", "arg4", ")", ";", "ep", ".", "sparql", "(", "MediaType", ".", "TEXT_HTML", ",", "loc0", ")", ";", "}"], "nl": "Execute DELETE query.", "nlToks": ["Execute", "DELETE", "query", "."], "path": "plt-tud/r43ples/tree/master/src/main/java/de/tud/plt/r43ples/management/DatasetGenerationManagement.java", "idx": 2675}
{"memberVariables": {"mJob": "Job", "mLineageStore": "LineageStore", "mThrown=ExpectedException.none()": "ExpectedException"}, "code": ["void", "function", "(", ")", "{", "long", "id", "=", "1", ";", "mThrown", ".", "expect", "(", "LineageDoesNotExistException", ".", "class", ")", ";", "mThrown", ".", "expectMessage", "(", "ExceptionMessage", ".", "LINEAGE_DOES_NOT_EXIST", ".", "getMessage", "(", "id", ")", ")", ";", "mLineageStore", ".", "deleteLineage", "(", "id", ")", ";", "}"], "memberFunctions": {"before": [["void"]], "deleteLineage": [["void"]], "journalEntrySerialization": [["void"]], "createLineage": [["void"]]}, "className": "LineageStoreTest", "renamed": ["void", "function", "(", ")", "{", "long", "loc0", "=", "1", ";", "mThrown", ".", "expect", "(", "LineageDoesNotExistException", ".", "class", ")", ";", "mThrown", ".", "expectMessage", "(", "ExceptionMessage", ".", "LINEAGE_DOES_NOT_EXIST", ".", "getMessage", "(", "loc0", ")", ")", ";", "mLineageStore", ".", "deleteLineage", "(", "loc0", ")", ";", "}"], "nl": "Tests that an exception is thrown when trying to delete a non-existing lineage via the {@link LineageStore#deleteLineage(long)} method.", "nlToks": ["Tests", "that", "an", "exception", "is", "thrown", "when", "trying", "to", "delete", "a", "non-existing", "lineage", "via", "the", "-LCB-", "@link", "LineageStore", "#deleteLineage", "-LRB-", "long", "-RRB-", "-RCB-", "method", "."], "path": "poemlin/alluxio/tree/master/core/server/src/test/java/alluxio/master/lineage/meta/LineageStoreTest.java", "idx": 2676}
{"memberVariables": {"shutdownInput": "boolean", "netImpl": "ServalNetworkStack", "streaming=true": "boolean", "localServiceID": "ServiceID", "address": "InetAddress", "remoteServiceID": "ServiceID", "fd": "FileDescriptor"}, "code": ["boolean", "function", "(", ")", "{", "return", "false", ";", "}"], "memberFunctions": {"getInetAddress": [["InetAddress"]], "getServiceID": [["ServiceID"]], "setOption": [["void", "int optID", "Object val"]], "available": [["int"]], "getOption": [["Object", "int optID"]], "getInputStream": [["InputStream"]], "listen": [["void", "int backlog"]], "shutdownOutput": [["void"]], "accept": [["void", "ServalSocketImpl newSocket"]], "shutdownInput": [["void"]], "setPerformancePreferences": [["void", "int connectionTime", "int latency", "int bandwidth"]], "bind": [["void", "ServiceID localServiceID", "InetAddress localAddr"], ["void", "ServiceID localServiceID", "InetAddress localAddr", "int bindBits"], ["void", "ServiceID localServiceID", "int bindBits"], ["void", "ServiceID localServiceID"]], "sendUrgentData": [["void", "int value"]], "getLocalServiceID": [["ServiceID"]], "getFileDescriptor": [["FileDescriptor"]], "create": [["void", "boolean isStreaming"]], "getOutputStream": [["OutputStream"]], "toString": [["String"]], "close": [["void"]], "connect": [["void", "String service"], ["void", "ServiceID serviceID", "InetAddress address"], ["void", "ServiceID serviceID"], ["void", "SocketAddress remoteAddr", "int timeout"]]}, "className": "ServalSocketImpl", "renamed": ["boolean", "function", "(", ")", "{", "return", "false", ";", "}"], "nl": "Returns whether the socket supports urgent data or not. Subclasses should override this method.", "nlToks": ["Returns", "whether", "the", "socket", "supports", "urgent", "data", "or", "not", ".", "Subclasses", "should", "override", "this", "method", "."], "path": "princeton-sns/serval/tree/master/src/javasock/java/org/servalarch/net/ServalSocketImpl.java", "idx": 2677}
{"memberVariables": {"handlerClass": "FullyQualifiedClassType", "soapRole": "List<CString>", "initParam": "List<ParamValueType>", "displayName": "List<DisplayNameType>", "soapHeader": "List<XsdQNameType>", "icon": "List<IconType>", "description": "List<DescriptionType>", "handlerName": "CString", "id": "java.lang.String"}, "code": ["CString", "function", "(", ")", "{", "if", "(", "handlerName", "==", "null", ")", "{", "handlerName", "=", "new", "CString", "(", ")", ";", "handlerName", ".", "setValue", "(", "\"\"", ")", ";", "}", "return", "handlerName", ";", "}"], "memberFunctions": {"getInitParam": [["List<ParamValueType>"]], "getDisplayName": [["List<DisplayNameType>"]], "setHandlerClass": [["void", "FullyQualifiedClassType value"]], "setHandlerName": [["void", "CString value"]], "setId": [["void", "java.lang.String value"]], "getHandlerClass": [["FullyQualifiedClassType"]], "getId": [["java.lang.String"]], "getSoapRole": [["List<CString>"]], "getDescription": [["List<DescriptionType>"]], "getSoapHeader": [["List<XsdQNameType>"]], "getIcon": [["List<IconType>"]]}, "className": "PortComponentHandlerType", "renamed": ["CString", "function", "(", ")", "{", "if", "(", "handlerName", "==", "null", ")", "{", "handlerName", "=", "new", "CString", "(", ")", ";", "handlerName", ".", "setValue", "(", "\"srini_string\"", ")", ";", "}", "return", "handlerName", ";", "}"], "nl": "Gets the value of the handlerName property.", "nlToks": ["Gets", "the", "value", "of", "the", "handlerName", "property", "."], "path": "primesign/cxf/tree/master/rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/handler/types/PortComponentHandlerType.java", "idx": 2678}
{"memberVariables": {"connected=false": "boolean"}, "code": ["void", "function", "(", "SshDisconnectedEvent", "ev", ")", "{", "System", ".", "out", ".", "println", "(", "\"Disconnected: \"", "+", "ev", ".", "getHost", "(", ")", "+", "\". Press Enter to exit\"", ")", ";", "connected", "=", "false", ";", "}"], "memberFunctions": {"connected": [["void", "SshConnectedEvent ev"]], "main": [["void", "String[] args"]], "dataReceived": [["void", "SshDataReceivedEvent ev"]]}, "className": "SshExample", "renamed": ["void", "function", "(", "SshDisconnectedEvent", "arg0", ")", "{", "System", ".", "out", ".", "println", "(", "\"srini_string\"", "+", "arg0", ".", "getHost", "(", ")", "+", "\"srini_string\"", ")", ";", "connected", "=", "false", ";", "}"], "nl": "Captures SshDisconnectedEvent", "nlToks": ["Captures", "SshDisconnectedEvent"], "path": "adilraja/ULMAN/tree/master/Prac/src/SshExample.java", "idx": 2680}
{"memberVariables": {"messageNumber": "long", "to": "String", "attachments=Collections.emptyList()": "List<InputStream>", "content": "InputStream"}, "code": ["long", "function", "(", ")", "{", "return", "messageNumber", ";", "}"], "memberFunctions": {"getAttachments": [["List<InputStream>"]], "setAttachments": [["void", "List<InputStream> attaches"]], "setContent": [["void", "InputStream in"]], "setMessageNumber": [["void", "long mn"]], "getContent": [["InputStream"]], "setTo": [["void", "String t"]], "getTo": [["String"]]}, "className": "RMMessage", "renamed": ["long", "function", "(", ")", "{", "return", "messageNumber", ";", "}"], "nl": "Returns the message number of the message within its sequence.", "nlToks": ["Returns", "the", "message", "number", "of", "the", "message", "within", "its", "sequence", "."], "path": "primesign/cxf/tree/master/rt/ws/rm/src/main/java/org/apache/cxf/ws/rm/persistence/RMMessage.java", "idx": 2682}
{"memberVariables": {}, "code": ["List", "<", "String", ">", "function", "(", "CertificateConstraintsType", "certConstraints", ")", "{", "if", "(", "certConstraints", "!=", "null", "&&", "certConstraints", ".", "isSetIssuerDNConstraints", "(", ")", ")", "{", "DNConstraintsType", "constraints", "=", "certConstraints", ".", "getIssuerDNConstraints", "(", ")", ";", "return", "constraints", ".", "getRegularExpression", "(", ")", ";", "}", "return", "java", ".", "util", ".", "Collections", ".", "emptyList", "(", ")", ";", "}"], "memberFunctions": {"createCertConstraints": [["CertConstraints", "CertificateConstraintsType certConstraints"]], "getSubjectConstraints": [["List<String>", "CertificateConstraintsType certConstraints"]], "getSubjectConstraintsCombinator": [["CertConstraints.Combinator", "CertificateConstraintsType certConstraints"]], "getIssuerConstraintsCombinator": [["CertConstraints.Combinator", "CertificateConstraintsType certConstraints"]]}, "className": "CertConstraintsJaxBUtils", "renamed": ["List", "<", "String", ">", "function", "(", "CertificateConstraintsType", "arg0", ")", "{", "if", "(", "arg0", "!=", "null", "&&", "arg0", ".", "isSetIssuerDNConstraints", "(", ")", ")", "{", "DNConstraintsType", "loc0", "=", "arg0", ".", "getIssuerDNConstraints", "(", ")", ";", "return", "loc0", ".", "getRegularExpression", "(", ")", ";", "}", "return", "java", ".", "util", ".", "Collections", ".", "emptyList", "(", ")", ";", "}"], "nl": "Get a List of Strings that corresponds to the issuer regular expression constraints from a JAXB CertificateConstraintsType", "nlToks": ["Get", "a", "List", "of", "Strings", "that", "corresponds", "to", "the", "issuer", "regular", "expression", "constraints", "from", "a", "JAXB", "CertificateConstraintsType"], "path": "primesign/cxf/tree/master/rt/transports/http/src/main/java/org/apache/cxf/transport/https/CertConstraintsJaxBUtils.java", "idx": 2683}
{"memberVariables": {"clientIpAddress": "String", "clientId": "String", "allowedGrantTypes=new LinkedList<String>()": "List<String>", "isConfidential": "boolean", "applicationCertificates=new LinkedList<String>()": "List<String>", "subject": "UserSubject", "redirectUris=new LinkedList<String>()": "List<String>", "registeredScopes=new LinkedList<String>()": "List<String>", "applicationLogoUri": "String", "serialVersionUID=-5550840247125850922L": "long", "applicationDescription": "String", "registeredAudiences=new LinkedList<String>()": "List<String>", "applicationWebUri": "String", "clientSecret": "String", "properties=new HashMap<String,String>()": "Map<String,String>", "applicationName": "String"}, "code": ["void", "function", "(", "List", "<", "String", ">", "registeredAudiences", ")", "{", "this", ".", "registeredAudiences", "=", "registeredAudiences", ";", "}"], "memberFunctions": {"getSubject": [["UserSubject"]], "getApplicationName": [["String"]], "setSubject": [["void", "UserSubject subject"]], "getClientId": [["String"]], "getAllowedGrantTypes": [["List<String>"]], "setApplicationDescription": [["void", "String applicationDescription"]], "setRegisteredScopes": [["void", "List<String> registeredScopes"]], "setProperties": [["void", "Map<String,String> properties"]], "getClientIpAddress": [["String"]], "getApplicationDescription": [["String"]], "setApplicationCertificates": [["void", "List<String> applicationCertificates"]], "getApplicationWebUri": [["String"]], "setApplicationLogoUri": [["void", "String logoPath"]], "setConfidential": [["void", "boolean isConf"]], "getRedirectUris": [["List<String>"]], "setApplicationWebUri": [["void", "String applicationWebUri"]], "setClientIpAddress": [["void", "String clientIpAddress"]], "getApplicationLogoUri": [["String"]], "setClientSecret": [["void", "String id"]], "setAllowedGrantTypes": [["void", "List<String> allowedGrantTypes"]], "isConfidential": [["boolean"]], "getClientSecret": [["String"]], "setApplicationName": [["void", "String applicationName"]], "getProperties": [["Map<String,String>"]], "setRedirectUris": [["void", "List<String> redirectUris"]], "getRegisteredAudiences": [["List<String>"]], "getApplicationCertificates": [["List<String>"]], "setClientId": [["void", "String id"]], "getRegisteredScopes": [["List<String>"]]}, "className": "Client", "renamed": ["void", "function", "(", "List", "<", "String", ">", "arg0", ")", "{", "this", ".", "registeredAudiences", "=", "arg0", ";", "}"], "nl": "Set the list of registered audiences", "nlToks": ["Set", "the", "list", "of", "registered", "audiences"], "path": "primesign/cxf/tree/master/rt/rs/security/oauth-parent/oauth2/src/main/java/org/apache/cxf/rs/security/oauth2/common/Client.java", "idx": 2684}
{"memberVariables": {"chunks": "List<ScriptChunk>"}, "code": ["Script", "function", "(", "List", "<", "TransactionSignature", ">", "signatures", ")", "{", "List", "<", "byte", "[", "]", ">", "sigs", "=", "new", "ArrayList", "<", "byte", "[", "]", ">", "(", "signatures", ".", "size", "(", ")", ")", ";", "for", "(", "TransactionSignature", "signature", ":", "signatures", ")", "{", "sigs", ".", "add", "(", "signature", ".", "encodeToBitcoin", "(", ")", ")", ";", "}", "return", "createMultiSigInputScriptBytes", "(", "sigs", ",", "null", ")", ";", "}"], "memberFunctions": {"op": [["ScriptBuilder", "int opcode"], ["ScriptBuilder", "int index", "int opcode"]], "updateScriptWithSignature": [["Script", "Script scriptSig", "byte[] signature", "int targetIndex", "int sigsPrefixCount", "int sigsSuffixCount"]], "createOpReturnScript": [["Script", "byte[] data"]], "data": [["ScriptBuilder", "byte[] data"], ["ScriptBuilder", "int index", "byte[] data"]], "createMultiSigInputScriptBytes": [["Script", "List<byte[]> signatures"], ["Script", "List<byte[]> signatures", "@Nullable byte[] multisigProgramBytes"]], "smallNum": [["ScriptBuilder", "int num"], ["ScriptBuilder", "int index", "int num"]], "createRedeemScript": [["Script", "int threshold", "List<ECKey> pubkeys"]], "addChunk": [["ScriptBuilder", "ScriptChunk chunk"], ["ScriptBuilder", "int index", "ScriptChunk chunk"]], "createInputScript": [["Script", "@Nullable TransactionSignature signature", "ECKey pubKey"], ["Script", "@Nullable TransactionSignature signature"]], "createOutputScript": [["Script", "Address to"], ["Script", "ECKey key"]], "createMultiSigOutputScript": [["Script", "int threshold", "List<ECKey> pubkeys"]], "build": [["Script"]], "createP2SHMultiSigInputScript": [["Script", "@Nullable List<TransactionSignature> signatures", "Script multisigProgram"]], "createP2SHOutputScript": [["Script", "byte[] hash"], ["Script", "Script redeemScript"], ["Script", "int threshold", "List<ECKey> pubkeys"]]}, "className": "ScriptBuilder", "renamed": ["Script", "function", "(", "List", "<", "TransactionSignature", ">", "arg0", ")", "{", "List", "<", "byte", "[", "]", ">", "loc0", "=", "new", "ArrayList", "<", "byte", "[", "]", ">", "(", "arg0", ".", "size", "(", ")", ")", ";", "for", "(", "TransactionSignature", "loc1", ":", "arg0", ")", "{", "loc0", ".", "add", "(", "loc1", ".", "encodeToBitcoin", "(", ")", ")", ";", "}", "return", "createMultiSigInputScriptBytes", "(", "loc0", ",", "null", ")", ";", "}"], "nl": "Create a program that satisfies an OP_CHECKMULTISIG program.", "nlToks": ["Create", "a", "program", "that", "satisfies", "an", "OP_CHECKMULTISIG", "program", "."], "path": "1000000000001/bitcoinj/tree/master/core/src/main/java/org/bitcoinj/script/ScriptBuilder.java", "idx": 2685}
{"memberVariables": {"INT_MASK=0xffffffffL": "long"}, "code": ["long", "function", "(", "int", "value", ")", "{", "return", "value", "&", "INT_MASK", ";", "}"], "memberFunctions": {"compare": [["int", "int a", "int b"], ["int", "int[] left", "int[] right"]], "saturatedCast": [["int", "long value"]], "max": [["int", "int... array"]], "decode": [["int", "String stringValue"]], "parseUnsignedInt": [["int", "String s"], ["int", "String string", "int radix"]], "min": [["int", "int... array"]], "lexicographicalComparator": [["Comparator<int[]>"]], "checkedCast": [["int", "long value"]], "toString": [["String"], ["String", "int x"], ["String", "int x", "int radix"]], "divide": [["int", "int dividend", "int divisor"]], "join": [["String", "String separator", "int... array"]], "flip": [["int", "int value"]], "remainder": [["int", "int dividend", "int divisor"]]}, "className": "UnsignedInts", "renamed": ["long", "function", "(", "int", "arg0", ")", "{", "return", "arg0", "&", "INT_MASK", ";", "}"], "nl": "Returns the value of the given  {@code int} as a {@code long}, when treated as unsigned.", "nlToks": ["Returns", "the", "value", "of", "the", "given", "-LCB-", "@code", "int", "-RCB-", "as", "a", "-LCB-", "@code", "long", "-RCB-", ",", "when", "treated", "as", "unsigned", "."], "path": "hazendaz/guava/tree/master/guava/src/com/google/common/primitives/UnsignedInts.java", "idx": 2686}
{"memberVariables": {"shutdownInput": "boolean", "netImpl": "ServalNetworkStack", "streaming=true": "boolean", "localServiceID": "ServiceID", "address": "InetAddress", "remoteServiceID": "ServiceID", "fd": "FileDescriptor"}, "code": ["FileDescriptor", "function", "(", ")", "{", "return", "fd", ";", "}"], "memberFunctions": {"getInetAddress": [["InetAddress"]], "getServiceID": [["ServiceID"]], "setOption": [["void", "int optID", "Object val"]], "available": [["int"]], "getOption": [["Object", "int optID"]], "getInputStream": [["InputStream"]], "listen": [["void", "int backlog"]], "shutdownOutput": [["void"]], "accept": [["void", "ServalSocketImpl newSocket"]], "shutdownInput": [["void"]], "setPerformancePreferences": [["void", "int connectionTime", "int latency", "int bandwidth"]], "bind": [["void", "ServiceID localServiceID", "InetAddress localAddr"], ["void", "ServiceID localServiceID", "InetAddress localAddr", "int bindBits"], ["void", "ServiceID localServiceID", "int bindBits"], ["void", "ServiceID localServiceID"]], "sendUrgentData": [["void", "int value"]], "supportsUrgentData": [["boolean"]], "getLocalServiceID": [["ServiceID"]], "create": [["void", "boolean isStreaming"]], "getOutputStream": [["OutputStream"]], "toString": [["String"]], "close": [["void"]], "connect": [["void", "String service"], ["void", "ServiceID serviceID", "InetAddress address"], ["void", "ServiceID serviceID"], ["void", "SocketAddress remoteAddr", "int timeout"]]}, "className": "ServalSocketImpl", "renamed": ["FileDescriptor", "function", "(", ")", "{", "return", "fd", ";", "}"], "nl": "Gets the file descriptor of this socket.", "nlToks": ["Gets", "the", "file", "descriptor", "of", "this", "socket", "."], "path": "princeton-sns/serval/tree/master/src/javasock/java/org/servalarch/net/ServalSocketImpl.java", "idx": 2687}
{"memberVariables": {"siteRepository": "SiteRepository", "log=LoggerFactory.getLogger(SiteService.class)": "Logger"}, "code": ["Site", "function", "(", "String", "host", ")", "{", "log", ".", "debug", "(", "\"Request to get Site : {}\"", ",", "host", ")", ";", "return", "siteRepository", ".", "findByHost", "(", "host", ")", ";", "}"], "memberFunctions": {"save": [["Site", "Site site"]], "findOne": [["Site", "String id"]], "findAll": [["Page<Site>", "Pageable pageable"]], "delete": [["void", "String id"]], "getWebNauAn": [["Site"]]}, "className": "SiteService", "renamed": ["Site", "function", "(", "String", "arg0", ")", "{", "log", ".", "debug", "(", "\"srini_string\"", ",", "arg0", ")", ";", "return", "siteRepository", ".", "findByHost", "(", "arg0", ")", ";", "}"], "nl": "Get one site by id.", "nlToks": ["Get", "one", "site", "by", "id", "."], "path": "pigkey/kitchen/tree/master/app/src/main/java/com/kitchen/app/service/SiteService.java", "idx": 2689}
{"memberVariables": {"sCleanerCleanMethod": "Method", "sByteBufferCleanerMethod": "Method", "LOG=LoggerFactory.getLogger(Constants.LOGGER_TYPE)": "Logger"}, "code": ["ByteBuffer", "function", "(", "int", "start", ",", "int", "len", ")", "{", "return", "ByteBuffer", ".", "wrap", "(", "getIncreasingByteArray", "(", "start", ",", "len", ")", ")", ";", "}"], "memberFunctions": {"equalConstantByteArray": [["boolean", "byte value", "int len", "byte[] arr"]], "fastCopy": [["void", "final ReadableByteChannel src", "final WritableByteChannel dest"]], "cleanDirectBuffer": [["void", "ByteBuffer buffer"]], "sliceByteBuffer": [["ByteBuffer", "ByteBuffer buffer", "int position", "int length"], ["ByteBuffer", "ByteBuffer buffer", "int position"]], "byteToInt": [["int", "byte b"]], "equalIncreasingByteArray": [["boolean", "int len", "byte[] arr"], ["boolean", "int start", "int len", "byte[] arr"]], "equalIncreasingByteBuffer": [["boolean", "int start", "int len", "ByteBuffer buf"]], "getIncreasingByteArray": [["byte[]", "int len"], ["byte[]", "int start", "int len"]], "writeBufferToFile": [["void", "String path", "byte[] buffer"]], "cloneByteBufferList": [["List<ByteBuffer>", "List<ByteBuffer> source"]], "cloneByteBuffer": [["ByteBuffer", "ByteBuffer buf"]], "newByteArrayFromByteBuffer": [["byte[]", "ByteBuffer buf"]], "putIntByteBuffer": [["void", "ByteBuffer buf", "int b"]], "generateNewByteBufferFromThriftRPCResults": [["ByteBuffer", "ByteBuffer data"]], "getIncreasingIntBuffer": [["ByteBuffer", "int len"], ["ByteBuffer", "int start", "int len"]]}, "className": "BufferUtils", "renamed": ["ByteBuffer", "function", "(", "int", "arg0", ",", "int", "arg1", ")", "{", "return", "ByteBuffer", ".", "wrap", "(", "getIncreasingByteArray", "(", "arg0", ",", "arg1", ")", ")", ";", "}"], "nl": "Gets a  {@link ByteBuffer} containing an increasing sequence of bytes starting at the givenvalue.", "nlToks": ["Gets", "a", "-LCB-", "@link", "ByteBuffer", "-RCB-", "containing", "an", "increasing", "sequence", "of", "bytes", "starting", "at", "the", "givenvalue", "."], "path": "poemlin/alluxio/tree/master/core/common/src/main/java/alluxio/util/io/BufferUtils.java", "idx": 2692}
{"memberVariables": {"EXAMPLE=\"$RATTM,11,25.3,13.7,T,7.0,20.0,T,10.1,20.2,N,NAME,Q,,175550.24,A*34\"": "String", "ttm": "TTMParser", "empty": "TTMParser"}, "code": ["void", "function", "(", ")", "{", "ttm", ".", "setStatus", "(", "TargetStatus", ".", "LOST", ")", ";", "assertTrue", "(", "ttm", ".", "toString", "(", ")", ".", "contains", "(", "\",T,\"", ")", ")", ";", "}"], "memberFunctions": {"testGetAcquisitionType": [["void"]], "testGetDistance": [["void"]], "testSetNumber": [["void"]], "testSetDistanceOfCPA": [["void"]], "testConstructor": [["void"]], "testGetTime": [["void"]], "testSetCourse": [["void"]], "testGetName": [["void"]], "testGetNumber": [["void"]], "testGetDistanceOfCPA": [["void"]], "setUp": [["void"]], "testGetCourse": [["void"]], "testSetReferenceTrue": [["void"]], "testSetReferenceFalse": [["void"]], "testSetAcquisitionType": [["void"]], "testSetBearing": [["void"]], "testGetBearing": [["void"]], "testSetDistance": [["void"]], "testSetTimeToCPA": [["void"]], "testSetTime": [["void"]], "testGetSpeed": [["void"]], "testGetStatus": [["void"]], "testGetTimeToCPA": [["void"]], "testSetName": [["void"]], "testSetSpeed": [["void"]]}, "className": "TTMTest", "renamed": ["void", "function", "(", ")", "{", "ttm", ".", "setStatus", "(", "TargetStatus", ".", "LOST", ")", ";", "assertTrue", "(", "ttm", ".", "toString", "(", ")", ".", "contains", "(", "\"srini_string\"", ")", ")", ";", "}"], "nl": "Test method for {@link net.sf.marineapi.nmea.parser.TTMParser#setStatus()} .", "nlToks": ["Test", "method", "for", "-LCB-", "@link", "net.sf.marineapi.nmea.parser.TTMParser", "#setStatus", "-LRB-", "-RRB-", "-RCB-", "."], "path": "pkoziol/marine-api/tree/master/src/test/java/net/sf/marineapi/nmea/parser/TTMTest.java", "idx": 2694}
{"memberVariables": {"SEPARATOR=\"/\"": "String", "serialVersionUID=-1207227692436086387L": "long", "CUR_DIR=\".\"": "String", "WILDCARD=\"*\"": "String", "mUri": "URI", "EMPTY_URI=new AlluxioURI(\"\")": "AlluxioURI"}, "code": ["boolean", "function", "(", "String", "path", ",", "boolean", "slashed", ")", "{", "int", "start", "=", "slashed", "?", "1", ":", "0", ";", "return", "path", ".", "length", "(", ")", ">=", "start", "+", "2", "&&", "(", "!", "slashed", "||", "path", ".", "charAt", "(", "0", ")", "==", "'/'", ")", "&&", "path", ".", "charAt", "(", "start", "+", "1", ")", "==", "':'", "&&", "(", "(", "path", ".", "charAt", "(", "start", ")", ">=", "'A'", "&&", "path", ".", "charAt", "(", "start", ")", "<=", "'Z'", ")", "||", "(", "path", ".", "charAt", "(", "start", ")", ">=", "'a'", "&&", "path", ".", "charAt", "(", "start", ")", "<=", "'z'", ")", ")", ";", "}"], "memberFunctions": {"getParent": [["AlluxioURI"]], "getDepth": [["int"]], "getName": [["String"]], "getScheme": [["String"]], "isRoot": [["boolean"]], "isPathAbsolute": [["boolean"]], "containsWildcard": [["boolean"]], "compareTo": [["int", "AlluxioURI other"]], "getAuthority": [["String"]], "hasScheme": [["boolean"]], "getPort": [["int"]], "getLeadingPath": [["String", "int n"]], "hashCode": [["int"]], "equals": [["boolean", "Object o"]], "getPath": [["String"]], "isAbsolute": [["boolean"]], "getQueryMap": [["Map<String,String>"]], "toString": [["String"]], "join": [["AlluxioURI", "String suffix"], ["AlluxioURI", "AlluxioURI suffix"]], "normalizePath": [["String", "String path"]], "getHost": [["String"]], "hasAuthority": [["boolean"]]}, "className": "AlluxioURI", "renamed": ["boolean", "function", "(", "String", "arg0", ",", "boolean", "arg1", ")", "{", "int", "loc0", "=", "arg1", "?", "1", ":", "0", ";", "return", "arg0", ".", "length", "(", ")", ">=", "loc0", "+", "2", "&&", "(", "!", "arg1", "||", "arg0", ".", "charAt", "(", "0", ")", "==", "'/'", ")", "&&", "arg0", ".", "charAt", "(", "loc0", "+", "1", ")", "==", "':'", "&&", "(", "(", "arg0", ".", "charAt", "(", "loc0", ")", ">=", "'A'", "&&", "arg0", ".", "charAt", "(", "loc0", ")", "<=", "'Z'", ")", "||", "(", "arg0", ".", "charAt", "(", "loc0", ")", ">=", "'a'", "&&", "arg0", ".", "charAt", "(", "loc0", ")", "<=", "'z'", ")", ")", ";", "}"], "nl": "Checks if the path is a windows path. This should be platform independent.", "nlToks": ["Checks", "if", "the", "path", "is", "a", "windows", "path", ".", "This", "should", "be", "platform", "independent", "."], "path": "poemlin/alluxio/tree/master/core/common/src/main/java/alluxio/AlluxioURI.java", "idx": 2695}
{"memberVariables": {}, "code": ["void", "function", "(", "final", "int", "blockLength", ",", "final", "D1Submatrix64F", "A", ",", "final", "D1Submatrix64F", "V", ",", "int", "row", ",", "double", "gamma", ")", "{", "double", "val", "=", "BlockHouseHolder", ".", "innerProdRow", "(", "blockLength", ",", "A", ",", "row", ",", "V", ",", "row", ",", "1", ")", ";", "double", "before", "=", "A", ".", "get", "(", "row", ",", "row", "+", "1", ")", ";", "A", ".", "set", "(", "row", ",", "row", "+", "1", ",", "1", ")", ";", "BlockVectorOps", ".", "add_row", "(", "blockLength", ",", "V", ",", "row", ",", "1", ",", "A", ",", "row", ",", "-", "0.5", "*", "gamma", "*", "val", ",", "V", ",", "row", ",", "row", "+", "1", ",", "A", ".", "col1", "-", "A", ".", "col0", ")", ";", "A", ".", "set", "(", "row", ",", "row", "+", "1", ",", "before", ")", ";", "}"], "memberFunctions": {"tridiagUpperRow": [["void", "final int blockLength", "final D1Submatrix64F A", "final double gammas[]", "final D1Submatrix64F V"]], "multA_u": [["void", "final int blockLength", "final D1Submatrix64F A", "final D1Submatrix64F V", "int row"]], "innerProdRowSymm": [["double", "int blockLength", "D1Submatrix64F A", "int rowA", "D1Submatrix64F B", "int rowB", "int zeroOffset"]], "computeW_row": [["void", "final int blockLength", "final D1Submatrix64F Y", "final D1Submatrix64F W", "final double beta[]", "int betaIndex"]], "applyReflectorsToRow": [["void", "final int blockLength", "final D1Submatrix64F A", "final D1Submatrix64F V", "int row"]], "computeY": [["void", "final int blockLength", "final D1Submatrix64F A", "final D1Submatrix64F V", "int row", "double gamma"]], "computeV_blockVector": [["void", "final int blockLength", "final D1Submatrix64F A", "final double gammas[]", "final D1Submatrix64F V"]]}, "className": "TridiagonalHelper_B64", "renamed": ["void", "function", "(", "final", "int", "arg0", ",", "final", "D1Submatrix64F", "arg1", ",", "final", "D1Submatrix64F", "arg2", ",", "int", "arg3", ",", "double", "arg4", ")", "{", "double", "loc0", "=", "BlockHouseHolder", ".", "innerProdRow", "(", "arg0", ",", "arg1", ",", "arg3", ",", "arg2", ",", "arg3", ",", "1", ")", ";", "double", "loc1", "=", "arg1", ".", "get", "(", "arg3", ",", "arg3", "+", "1", ")", ";", "arg1", ".", "set", "(", "arg3", ",", "arg3", "+", "1", ",", "1", ")", ";", "BlockVectorOps", ".", "add_row", "(", "arg0", ",", "arg2", ",", "arg3", ",", "1", ",", "arg1", ",", "arg3", ",", "-", "0.5", "*", "arg4", "*", "loc0", ",", "arg2", ",", "arg3", ",", "arg3", "+", "1", ",", "arg1", ".", "col1", "-", "arg1", ".", "col0", ")", ";", "arg1", ".", "set", "(", "arg3", ",", "arg3", "+", "1", ",", "loc1", ")", ";", "}"], "nl": " Final computation for a single row of 'v':  v = y -(1/2)&gamma;(y^Tu)u ", "nlToks": ["Final", "computation", "for", "a", "single", "row", "of", "`", "v", "'", ":", "v", "=", "y", "-", "-LRB-", "1/2", "-RRB-", "&", "gamma", ";", "-LRB-", "y", "^", "Tu", "-RRB-", "u"], "path": "adamaulia/efficient-java-matrix-library/tree/master/src/org/ejml/alg/block/decomposition/hessenberg/TridiagonalHelper_B64.java", "idx": 2696}
{"memberVariables": {"headers": "Map<String,String>", "charset": "String", "verb": "Verb", "bodyParams": "ParameterList", "url": "String", "bytePayload=null": "byte[]", "readTimeout=null": "Long", "querystringParams": "ParameterList", "connectionKeepAlive=false": "boolean", "connectTimeout=null": "Long", "CONTENT_LENGTH=\"Content-Length\"": "String", "CONTENT_TYPE=\"Content-Type\"": "String", "connection": "HttpURLConnection", "payload=null": "String", "DEFAULT_CONTENT_TYPE=\"application/x-www-form-urlencoded\"": "String"}, "code": ["String", "function", "(", ")", "{", "return", "url", ".", "replaceAll", "(", "\"|?.*\"", ",", "\"\"", ")", ".", "replace", "(", "\"|:|d{4}\"", ",", "\"\"", ")", ";", "}"], "memberFunctions": {"addHeaders": [["void", "HttpURLConnection conn"]], "setCharset": [["void", "String charsetName"]], "addBody": [["void", "HttpURLConnection conn", "byte[] content"]], "addHeader": [["void", "String key", "String value"]], "setConnectionKeepAlive": [["void", "boolean connectionKeepAlive"]], "setConnectTimeout": [["void", "int duration", "TimeUnit unit"]], "getByteBodyContents": [["byte[]"]], "getHeaders": [["Map<String,String>"]], "getQueryStringParams": [["ParameterList"]], "setConnection": [["void", "HttpURLConnection connection"]], "createConnection": [["void"]], "getCharset": [["String"]], "addBodyParameter": [["void", "String key", "String value"]], "getUrl": [["String"]], "setReadTimeout": [["void", "int duration", "TimeUnit unit"]], "getCompleteUrl": [["String"]], "getVerb": [["Verb"]], "addPayload": [["void", "String payload"], ["void", "byte[] payload"]], "addQuerystringParameter": [["void", "String key", "String value"]], "toString": [["String"]], "doSend": [["Response"]], "send": [["Response"]], "getBodyContents": [["String"]], "getBodyParams": [["ParameterList"]]}, "className": "Request", "renamed": ["String", "function", "(", ")", "{", "return", "url", ".", "replaceAll", "(", "\"srini_string\"", ",", "\"srini_string\"", ")", ".", "replace", "(", "\"srini_string\"", ",", "\"srini_string\"", ")", ";", "}"], "nl": "Returns the URL without the port and the query string part.", "nlToks": ["Returns", "the", "URL", "without", "the", "port", "and", "the", "query", "string", "part", "."], "path": "pnsantos/scribe-java/tree/master/src/main/java/org/scribe/model/Request.java", "idx": 2698}
{"memberVariables": {"taken=new BitSet(64)": "BitSet", "black=new BitSet(64)": "BitSet"}, "code": ["int", "function", "(", ")", "{", "BitSet", "result", "=", "(", "BitSet", ")", "taken", ".", "clone", "(", ")", ";", "result", ".", "andNot", "(", "black", ")", ";", "return", "result", ".", "cardinality", "(", ")", ";", "}"], "memberFunctions": {"countBlack": [["int"]], "move": [["void", "Move m", "OthelloSide turn"]], "set": [["void", "OthelloSide side", "int x", "int y"]], "get": [["boolean", "OthelloSide side", "int x", "int y"]], "checkMove": [["boolean", "Move m", "OthelloSide turn"]], "onBoard": [["boolean", "int x", "int y"]], "copy": [["OthelloBoard"]], "isDone": [["boolean"]], "hasMoves": [["boolean", "OthelloSide side"]], "occupied": [["boolean", "int x", "int y"]]}, "className": "OthelloBoard", "renamed": ["int", "function", "(", ")", "{", "BitSet", "loc0", "=", "(", "BitSet", ")", "taken", ".", "clone", "(", ")", ";", "loc0", ".", "andNot", "(", "black", ")", ";", "return", "loc0", ".", "cardinality", "(", ")", ";", "}"], "nl": "Current count of white stones.", "nlToks": ["Current", "count", "of", "white", "stones", "."], "path": "preethiper/othello/tree/master/java/OthelloBoard.java", "idx": 2700}
{"memberVariables": {"preview": "Book", "QUILL_EXTENSION=\".quill\"": "String", "data=new LinkedList<BookPreview>()": "LinkedList<BookPreview>", "instance": "Bookshelf", "TAG=\"BookPreview\"": "String", "TAG=\"Bookshelf\"": "String", "storage": "Storage", "currentBook": "Book", "uuid": "UUID"}, "code": ["BookPreview", "function", "(", "UUID", "uuid", ")", "{", "for", "(", "BookPreview", "nb", ":", "data", ")", "{", "if", "(", "nb", ".", "getUUID", "(", ")", ".", "equals", "(", "uuid", ")", ")", "return", "nb", ";", "}", "return", "null", ";", "}"], "memberFunctions": {"compare": [["int", "BookPreview lhs", "BookPreview rhs"]], "backup": [["void"], ["void", "File dir"]], "reloadPreview": [["void", "Book book"]], "backupDescription": [["void", "File dir"]], "setCurrentBook": [["void", "BookPreview nb"], ["void", "BookPreview nb", "boolean saveCurrent"]], "assertNoCurrentBook": [["void"]], "importBook": [["void", "File file"]], "getThumbnail": [["Bitmap", "int width", "int height"]], "deleteBook": [["void", "UUID uuid"]], "exportBook": [["void", "UUID uuid", "File file"]], "getTitle": [["String"]], "reload": [["void"]], "getUUID": [["UUID"]], "getBookshelf": [["Bookshelf"]], "newBook": [["void", "String title"]], "sortBookPreviewList": [["void"]], "getCount": [["int"]], "importBookDirectory": [["void", "File dir", "UUID uuid"]], "getSummary": [["String"]], "getCurrentBookPreview": [["BookPreview"]], "deleteFromStorage": [["void"]], "getCurrentBook": [["Book"]], "getLastModifiedTime": [["Time"]], "getBookPreviewList": [["LinkedList<BookPreview>"]], "exportCurrentBook": [["void", "File file"]], "createFirstNotebook": [["void"]], "finalize": [["void", "Storage storage"]], "initialize": [["void", "Storage storage"]]}, "className": "Bookshelf", "renamed": ["BookPreview", "function", "(", "UUID", "arg0", ")", "{", "for", "(", "BookPreview", "loc0", ":", "data", ")", "{", "if", "(", "loc0", ".", "getUUID", "(", ")", ".", "equals", "(", "arg0", ")", ")", "return", "loc0", ";", "}", "return", "null", ";", "}"], "nl": "Return the preview associated with the given UUID", "nlToks": ["Return", "the", "preview", "associated", "with", "the", "given", "UUID"], "path": "praveensubramaniam/android-quill/tree/master/src/com/write/Quill/data/Bookshelf.java", "idx": 2701}
{"memberVariables": {"nodePosition=new HashMap<>()": "Map<T,Integer>", "allNodes=new ArrayList<>()": "List<Node>", "weight": "int", "key": "T"}, "code": ["boolean", "function", "(", ")", "{", "return", "allNodes", ".", "size", "(", ")", "==", "0", ";", "}"], "memberFunctions": {"add": [["void", "int weight", "T key"]], "min": [["T"]], "printPositionMap": [["void"]], "swap": [["void", "Node node1", "Node node2"]], "updatePositionMap": [["void", "T data1", "T data2", "int pos1", "int pos2"]], "getWeight": [["Integer", "T key"]], "extractMinNode": [["Node"]], "printHeap": [["void"]], "main": [["void", "String args[]"]], "extractMin": [["T"]], "decrease": [["void", "T data", "int newWeight"]], "containsData": [["boolean", "T key"]]}, "className": "BinaryMinHeap", "renamed": ["boolean", "function", "(", ")", "{", "return", "allNodes", ".", "size", "(", ")", "==", "0", ";", "}"], "nl": "Checks with heap is empty or not", "nlToks": ["Checks", "with", "heap", "is", "empty", "or", "not"], "path": "piyushbajaj/Java_Tutorial_DS/tree/master/Heap/BinaryMinHeap.java", "idx": 2702}
{"memberVariables": {}, "code": ["DagEngine", "function", "(", ")", "{", "return", "new", "DagEngine", "(", ")", ";", "}"], "memberFunctions": {"init": [["void", "Services services"]], "getInterface": [["Class<? extends Service>"]], "destroy": [["void"]], "getDagEngine": [["DagEngine", "String user", "String authToken"]]}, "className": "DagEngineService", "renamed": ["DagEngine", "function", "(", ")", "{", "return", "new", "DagEngine", "(", ")", ";", "}"], "nl": "Return a Dag engine for a system user (no user, no group).", "nlToks": ["Return", "a", "Dag", "engine", "for", "a", "system", "user", "-LRB-", "no", "user", ",", "no", "group", "-RRB-", "."], "path": "pingpangkuangmo/oozie/tree/master/core/src/main/java/org/apache/oozie/service/DagEngineService.java", "idx": 2703}
{"memberVariables": {}, "code": ["void", "function", "(", ")", "{", "System", ".", "out", ".", "println", "(", "\"getResourceStream\"", ")", ";", "String", "path", "=", "\"\"", ";", "ResourceLoader", "instance", "=", "new", "ResourceLoader", "(", ")", ";", "InputStream", "expResult", "=", "null", ";", "InputStream", "result", "=", "instance", ".", "getResourceStream", "(", "path", ")", ";", "Assert", ".", "assertNotNull", "(", "result", ")", ";", "}"], "memberFunctions": {}, "className": "ResourceLoaderTest", "renamed": ["void", "function", "(", ")", "{", "System", ".", "out", ".", "println", "(", "\"srini_string\"", ")", ";", "String", "loc0", "=", "\"srini_string\"", ";", "ResourceLoader", "loc1", "=", "new", "ResourceLoader", "(", ")", ";", "InputStream", "loc2", "=", "null", ";", "InputStream", "loc3", "=", "loc1", ".", "getResourceStream", "(", "loc0", ")", ";", "Assert", ".", "assertNotNull", "(", "loc3", ")", ";", "}"], "nl": "Test of getResourceStream method, of class ResourceLoader.", "nlToks": ["Test", "of", "getResourceStream", "method", ",", "of", "class", "ResourceLoader", "."], "path": "adangel/pmd/tree/master/pmd-core/src/test/java/net/sourceforge/pmd/util/database/ResourceLoaderTest.java", "idx": 2704}
{"memberVariables": {"comparator": "Comparator<? super T>", "threshold": "T", "k": "int", "buffer": "T[]", "bufferSize": "int"}, "code": ["void", "function", "(", "Iterable", "<", "?", "extends", "T", ">", "elements", ")", "{", "offerAll", "(", "elements", ".", "iterator", "(", ")", ")", ";", "}"], "memberFunctions": {"offer": [["void", "@Nullable T elem"]], "topK": [["List<T>"]], "partition": [["int", "int left", "int right", "int pivotIndex"]], "trim": [["void"]], "swap": [["void", "int i", "int j"]], "least": [["TopKSelector<T>", "int k"], ["TopKSelector<T>", "int k", "Comparator<? super T> comparator"]], "greatest": [["TopKSelector<T>", "int k"], ["TopKSelector<T>", "int k", "Comparator<? super T> comparator"]], "combine": [["TopKSelector<T>", "TopKSelector<T> other"]]}, "className": "TopKSelector", "renamed": ["void", "function", "(", "Iterable", "<", "?", "extends", "T", ">", "arg0", ")", "{", "offerAll", "(", "arg0", ".", "iterator", "(", ")", ")", ";", "}"], "nl": "Adds each member of  {@code elements} as a candidate for the top {@code k} elements. Thisoperation takes amortized linear time in the length of  {@code elements}. If all input data to this  {@code TopKSelector} is in a single {@code Iterable}, prefer  {@link Ordering#leastOf(Iterable,int)}, which provides a simpler API for that use case.", "nlToks": ["Adds", "each", "member", "of", "-LCB-", "@code", "elements", "-RCB-", "as", "a", "candidate", "for", "the", "top", "-LCB-", "@code", "k", "-RCB-", "elements", ".", "Thisoperation", "takes", "amortized", "linear", "time", "in", "the", "length", "of", "-LCB-", "@code", "elements", "-RCB-", ".", "If", "all", "input", "data", "to", "this", "-LCB-", "@code", "TopKSelector", "-RCB-", "is", "in", "a", "single", "-LCB-", "@code", "Iterable", "-RCB-", ",", "prefer", "-LCB-", "@link", "Ordering", "#leastOf", "-LRB-", "Iterable", ",", "int", "-RRB-", "-RCB-", ",", "which", "provides", "a", "simpler", "API", "for", "that", "use", "case", "."], "path": "hazendaz/guava/tree/master/guava/src/com/google/common/collect/TopKSelector.java", "idx": 2706}
{"memberVariables": {"_SignCertificateResponse_QNAME=new QName(\"http://platformlayer.org/auth/v1.0\",\"signCertificateResponse\")": "QName", "_Access_QNAME=new QName(\"http://platformlayer.org/auth/v1.0\",\"access\")": "QName", "_CheckServiceAccessResponse_QNAME=new QName(\"http://platformlayer.org/auth/v1.0\",\"checkServiceAccessResponse\")": "QName", "_SignCertificateRequest_QNAME=new QName(\"http://platformlayer.org/auth/v1.0\",\"signCertificateRequest\")": "QName", "_CertificateChainInfo_QNAME=new QName(\"http://platformlayer.org/auth/v1.0\",\"certificateChainInfo\")": "QName", "_RegistrationRequest_QNAME=new QName(\"http://platformlayer.org/auth/v1.0\",\"registrationRequest\")": "QName", "_User_QNAME=new QName(\"http://platformlayer.org/auth/v1.0\",\"user\")": "QName", "_AuthenticateResponse_QNAME=new QName(\"http://platformlayer.org/auth/v1.0\",\"authenticateResponse\")": "QName", "_CheckServiceAccessRequest_QNAME=new QName(\"http://platformlayer.org/auth/v1.0\",\"checkServiceAccessRequest\")": "QName", "_ValidateTokenResponse_QNAME=new QName(\"http://platformlayer.org/auth/v1.0\",\"validateTokenResponse\")": "QName", "_AuthenticateRequest_QNAME=new QName(\"http://platformlayer.org/auth/v1.0\",\"authenticateRequest\")": "QName", "_Auth_QNAME=new QName(\"http://platformlayer.org/auth/v1.0\",\"auth\")": "QName", "_ValidateAccess_QNAME=new QName(\"http://platformlayer.org/auth/v1.0\",\"validateAccess\")": "QName", "_RegistrationResponse_QNAME=new QName(\"http://platformlayer.org/auth/v1.0\",\"registrationResponse\")": "QName", "_Roles_QNAME=new QName(\"http://platformlayer.org/auth/v1.0\",\"roles\")": "QName"}, "code": ["ProjectValidation", "function", "(", ")", "{", "return", "new", "ProjectValidation", "(", ")", ";", "}"], "memberFunctions": {"createValidateTokenResponse": [["ValidateTokenResponse"], ["JAXBElement<ValidateTokenResponse>", "ValidateTokenResponse value"]], "createCertificateChainInfo": [["CertificateChainInfo"], ["JAXBElement<CertificateChainInfo>", "CertificateChainInfo value"]], "createRoleList": [["RoleList"]], "createCheckServiceAccessRequest": [["CheckServiceAccessRequest"], ["JAXBElement<CheckServiceAccessRequest>", "CheckServiceAccessRequest value"]], "createRole": [["Role"]], "createToken": [["Token"]], "createCheckServiceAccessResponse": [["CheckServiceAccessResponse"], ["JAXBElement<CheckServiceAccessResponse>", "CheckServiceAccessResponse value"]], "createPasswordCredentials": [["PasswordCredentials"]], "createAuthenticateResponse": [["AuthenticateResponse"], ["JAXBElement<AuthenticateResponse>", "AuthenticateResponse value"]], "createValidateAccess": [["ValidateAccess"], ["JAXBElement<ValidateAccess>", "ValidateAccess value"]], "createAuthenticateRequest": [["AuthenticateRequest"], ["JAXBElement<AuthenticateRequest>", "AuthenticateRequest value"]], "createAuth": [["Auth"], ["JAXBElement<Auth>", "Auth value"]], "createCertificateInfo": [["CertificateInfo"]], "createUserValidation": [["UserValidation"]], "createCertificateCredentials": [["CertificateCredentials"]], "createRegistrationResponse": [["RegistrationResponse"], ["JAXBElement<RegistrationResponse>", "RegistrationResponse value"]], "createUser": [["User"], ["JAXBElement<User>", "User value"]], "createRoles": [["JAXBElement<RoleList>", "RoleList value"]], "createRegistrationRequest": [["RegistrationRequest"], ["JAXBElement<RegistrationRequest>", "RegistrationRequest value"]], "createAccess": [["Access"], ["JAXBElement<Access>", "Access value"]], "createSignCertificateResponse": [["SignCertificateResponse"], ["JAXBElement<SignCertificateResponse>", "SignCertificateResponse value"]], "createSignCertificateRequest": [["SignCertificateRequest"], ["JAXBElement<SignCertificateRequest>", "SignCertificateRequest value"]]}, "className": "ObjectFactory", "renamed": ["ProjectValidation", "function", "(", ")", "{", "return", "new", "ProjectValidation", "(", ")", ";", "}"], "nl": "Create an instance of  {@link ProjectValidation }", "nlToks": ["Create", "an", "instance", "of", "-LCB-", "@link", "ProjectValidation", "-RCB-"], "path": "platformlayer/platformlayer/tree/master/auth/client/src/generated/xjc/org/platformlayer/auth/v1/ObjectFactory.java", "idx": 2707}
{"memberVariables": {"DEFAULT_KEY_AND_VALUE_PAIR_SEPARATOR=\",\"": "String", "DEFAULT_KEY_AND_VALUE_SEPARATOR=\":\"": "String"}, "code": ["boolean", "function", "(", "Map", "<", "String", ",", "String", ">", "map", ",", "String", "key", ",", "String", "value", ")", "{", "if", "(", "map", "==", "null", "||", "UtilString", ".", "isEmpty", "(", "key", ")", "||", "UtilString", ".", "isEmpty", "(", "value", ")", ")", "{", "return", "false", ";", "}", "map", ".", "put", "(", "key", ",", "value", ")", ";", "return", "true", ";", "}"], "memberFunctions": {"getKeyByValue": [["K", "Map<K,V> map", "V value"]], "putMapNotNullKeyAndValue": [["boolean", "Map<K,V> map", "K key", "V value"]], "parseKeyAndValueToMap": [["Map<String,String>", "String source", "String keyAndValueSeparator", "String keyAndValuePairSeparator", "boolean ignoreSpace"], ["Map<String,String>", "String source", "boolean ignoreSpace"], ["Map<String,String>", "String source"]], "toJson": [["String", "Map<String,String> map"]], "mapObjectContainName": [["Boolean", "Map<String,Object> mapData", "String strValueName"]], "putMapNotNullKey": [["boolean", "Map<K,V> map", "K key", "V value"]], "mapContainName": [["Boolean", "Map<String,String> mapData", "String strValueName"]], "isEmpty": [["boolean", "Map<K,V> sourceMap"]], "mapStringContainName": [["Boolean", "Map<String,String> mapData", "String strValueName"]], "putMapNotEmptyKey": [["boolean", "Map<String,String> map", "String key", "String value"]], "putMapNotEmptyKeyObject": [["boolean", "Map<String,Object> map", "String key", "String value"]]}, "className": "UtilMap", "renamed": ["boolean", "function", "(", "Map", "<", "String", ",", "String", ">", "arg0", ",", "String", "arg1", ",", "String", "arg2", ")", "{", "if", "(", "arg0", "==", "null", "||", "UtilString", ".", "isEmpty", "(", "arg1", ")", "||", "UtilString", ".", "isEmpty", "(", "arg2", ")", ")", "{", "return", "false", ";", "}", "arg0", ".", "put", "(", "arg1", ",", "arg2", ")", ";", "return", "true", ";", "}"], "nl": "add key-value pair to map, both key and value need not null or empty", "nlToks": ["add", "key-value", "pair", "to", "map", ",", "both", "key", "and", "value", "need", "not", "null", "or", "empty"], "path": "13383848500/dashihui/tree/master/MIT-Afford/app/src/main/java/com/dashihui/afford/util/map/UtilMap.java", "idx": 2708}
{"memberVariables": {"SUBMIT_MINUTES=1": "int", "KB=1024": "long", "MB=KB * 1024": "long", "SUBMIT_DAYS=24 * 60": "int", "SUBMIT_HOURS=60": "int", "PB=TB * 1024": "long", "TB=GB * 1024": "long", "GB=MB * 1024": "long"}, "code": ["Object", "function", "(", "Object", "o1", ",", "Object", "o2", ")", "{", "return", "(", "o1", "!=", "null", ")", "?", "o1", ":", "o2", ";", "}"], "memberFunctions": {"trim": [["String", "String input"]], "concat": [["String", "String s1", "String s2"]], "urlEncode": [["String", "String input"]], "timestamp": [["String"]]}, "className": "ELConstantsFunctions", "renamed": ["Object", "function", "(", "Object", "arg0", ",", "Object", "arg1", ")", "{", "return", "(", "arg0", "!=", "null", ")", "?", "arg0", ":", "arg1", ";", "}"], "nl": "Return the first not null value, or null if both are null. Defined for EL as 'Object firstNotNull(Object, Object)'.", "nlToks": ["Return", "the", "first", "not", "null", "value", ",", "or", "null", "if", "both", "are", "null", ".", "Defined", "for", "EL", "as", "`", "Object", "firstNotNull", "-LRB-", "Object", ",", "Object", "-RRB-", "'", "."], "path": "pingpangkuangmo/oozie/tree/master/core/src/main/java/org/apache/oozie/util/ELConstantsFunctions.java", "idx": 2709}
{"memberVariables": {"projectSecret": "byte[]", "csr": "String", "project": "String"}, "code": ["String", "function", "(", ")", "{", "return", "csr", ";", "}"], "memberFunctions": {"setCsr": [["void", "String value"]], "getProjectSecret": [["byte[]"]], "setProject": [["void", "String value"]], "setProjectSecret": [["void", "byte[] value"]], "getProject": [["String"]]}, "className": "SignCertificateRequest", "renamed": ["String", "function", "(", ")", "{", "return", "csr", ";", "}"], "nl": "Gets the value of the csr property.", "nlToks": ["Gets", "the", "value", "of", "the", "csr", "property", "."], "path": "platformlayer/platformlayer/tree/master/auth/client/src/generated/xjc/org/platformlayer/auth/v1/SignCertificateRequest.java", "idx": 2711}
{"memberVariables": {"TAG_CONTENT_PRINT=\"%s:%s.%s:%d\"": "String", "sIsLogEnabled=true": "boolean", "sApplicationTag=\"Chen\"": "String"}, "code": ["void", "function", "(", "Exception", "exception", ")", "{", "if", "(", "sIsLogEnabled", ")", "{", "Log", ".", "e", "(", "sApplicationTag", ",", "getContent", "(", "getCurrentStackTraceElement", "(", ")", ")", "+", "\" >\"", "+", "exception", ".", "getMessage", "(", ")", ")", ";", "exception", ".", "printStackTrace", "(", ")", ";", "}", "}"], "memberFunctions": {"getCurrentStackTraceElement": [["StackTraceElement"]], "getTagContentPrint": [["String"]], "d": [["void", "String tag", "String msg"], ["void", "String msg"], ["void", "String message", "Object... args"]], "getContent": [["String", "StackTraceElement trace"]], "i": [["void", "String tag", "String msg"], ["void", "String msg"]], "getsApplicationTag": [["String"]], "setsIsLogEnabled": [["void", "boolean sIsLogEnabled"]], "issIsLogEnabled": [["boolean"]], "trace": [["void"]], "v": [["void", "String msg"]], "w": [["void", "String tag", "String msg"], ["void", "String msg"]], "getContents": [["String", "StackTraceElement trace"]], "traceStack": [["void"], ["void", "String tag", "int priority"]], "setsApplicationTag": [["void", "String sApplicationTag"]]}, "className": "URLogs", "renamed": ["void", "function", "(", "Exception", "arg0", ")", "{", "if", "(", "sIsLogEnabled", ")", "{", "Log", ".", "e", "(", "sApplicationTag", ",", "getContent", "(", "getCurrentStackTraceElement", "(", ")", ")", "+", "\"srini_string\"", "+", "arg0", ".", "getMessage", "(", ")", ")", ";", "arg0", ".", "printStackTrace", "(", ")", ";", "}", "}"], "nl": "Send an ERROR log message.", "nlToks": ["Send", "an", "ERROR", "log", "message", "."], "path": "prashant31191/UltimateRecyclerView/tree/master/UltimateRecyclerView/ultimaterecyclerview/src/main/java/com/marshalchen/ultimaterecyclerview/URLogs.java", "idx": 2712}
{"memberVariables": {"recentlyDeniedPermissions": "Set<String>", "accessToken": "AccessToken", "recentlyGrantedPermissions": "Set<String>"}, "code": ["Set", "<", "String", ">", "function", "(", ")", "{", "return", "recentlyGrantedPermissions", ";", "}"], "memberFunctions": {"getRecentlyDeniedPermissions": [["Set<String>"]], "getAccessToken": [["AccessToken"]]}, "className": "LoginResult", "renamed": ["Set", "<", "String", ">", "function", "(", ")", "{", "return", "recentlyGrantedPermissions", ";", "}"], "nl": "Getter for the recently granted permissions.", "nlToks": ["Getter", "for", "the", "recently", "granted", "permissions", "."], "path": "adament67/testproject/tree/master/Android Projects/studio/EstiloRobe/facebook/src/main/java/com/facebook/login/LoginResult.java", "idx": 2713}
{"memberVariables": {"FRIENDLY_FORMAT=MonetaryFormat.FIAT.postfixCode()": "MonetaryFormat", "PLAIN_FORMAT=MonetaryFormat.FIAT.minDecimals(0).repeatOptionalDecimals(1,4).noCode()": "MonetaryFormat", "SMALLEST_UNIT_EXPONENT=4": "int", "value": "long", "currencyCode": "String"}, "code": ["boolean", "function", "(", "Fiat", "other", ")", "{", "return", "compareTo", "(", "other", ")", "<", "0", ";", "}"], "memberFunctions": {"add": [["Fiat", "final Fiat value"]], "signum": [["int"]], "isNegative": [["boolean"]], "getCurrencyCode": [["String"]], "valueOf": [["Fiat", "final String currencyCode", "final long value"]], "subtract": [["Fiat", "final Fiat value"]], "isGreaterThan": [["boolean", "Fiat other"]], "isPositive": [["boolean"]], "smallestUnitExponent": [["int"]], "toPlainString": [["String"]], "compareTo": [["int", "final Fiat other"]], "longValue": [["long"]], "getValue": [["long"]], "toFriendlyString": [["String"]], "divideAndRemainder": [["Fiat[]", "final long divisor"]], "negate": [["Fiat"]], "hashCode": [["int"]], "equals": [["boolean", "final Object o"]], "isZero": [["boolean"]], "divide": [["Fiat", "final long divisor"], ["long", "final Fiat divisor"]], "toString": [["String"]], "multiply": [["Fiat", "final long factor"]], "parseFiat": [["Fiat", "final String currencyCode", "final String str"]]}, "className": "Fiat", "renamed": ["boolean", "function", "(", "Fiat", "arg0", ")", "{", "return", "compareTo", "(", "arg0", ")", "<", "0", ";", "}"], "nl": "Returns true if the monetary value represented by this instance is less than that of the given other Coin, otherwise false.", "nlToks": ["Returns", "true", "if", "the", "monetary", "value", "represented", "by", "this", "instance", "is", "less", "than", "that", "of", "the", "given", "other", "Coin", ",", "otherwise", "false", "."], "path": "1000000000001/bitcoinj/tree/master/core/src/main/java/org/bitcoinj/utils/Fiat.java", "idx": 2714}
{"memberVariables": {"passiveAuth": "boolean", "requestQueryParams=new HashMap<String,String[]>()": "Map<String,String[]>", "serialVersionUID=8131978212432223682L": "long", "commonAuthCallerPath": "String", "forceAuth": "boolean", "type": "String", "requestHeaders=new HashMap<String,String>()": "Map<String,String>", "tenantDomain": "String", "isPost": "boolean", "relyingParty": "String"}, "code": ["void", "function", "(", "String", "type", ")", "{", "this", ".", "type", "=", "type", ";", "}"], "memberFunctions": {"setRelyingParty": [["void", "String relyingParty"]], "addHeader": [["void", "String key", "String values"]], "getRelyingParty": [["String"]], "getForceAuth": [["boolean"]], "getCommonAuthCallerPath": [["String"]], "getRequestQueryParams": [["Map<String,String[]>"]], "addRequestQueryParam": [["void", "String key", "String[] value"]], "setPost": [["void", "boolean post"]], "isPost": [["boolean"]], "setTenantDomain": [["void", "String tenantDomain"]], "appendRequestQueryParams": [["void", "Map<String,String[]> map"]], "getPassiveAuth": [["boolean"]], "getRequestHeaders": [["Map<String,String>"]], "getTenantDomain": [["String"]], "getRequestQueryParam": [["String[]", "String key"]], "getType": [["String"]], "setPassiveAuth": [["void", "boolean passiveAuth"]], "setCommonAuthCallerPath": [["void", "String commonAuthCallerPath"]], "setForceAuth": [["void", "boolean forceAuth"]], "setRequestQueryParams": [["void", "Map<String,String[]> requestQueryParams"]]}, "className": "AuthenticationRequest", "renamed": ["void", "function", "(", "String", "arg0", ")", "{", "this", ".", "type", "=", "arg0", ";", "}"], "nl": "Set the type of the request", "nlToks": ["Set", "the", "type", "of", "the", "request"], "path": "harsha1979/carbon-identity/tree/master/components/authentication-framework/org.wso2.carbon.identity.application.authentication.framework/src/main/java/org/wso2/carbon/identity/application/authentication/framework/model/AuthenticationRequest.java", "idx": 2715}
{"memberVariables": {}, "code": ["String", "function", "(", "String", "text", ")", "{", "return", "CacheUtil", ".", "md5sum", "(", "text", ")", ";", "}"], "memberFunctions": {"deleteAllKeys": [["void"]], "getText": [["String", "String key"]], "purgeOldKeys": [["void", "Date date"]], "cacheText": [["int", "String key", "String text"]]}, "className": "DaoTextCache", "renamed": ["String", "function", "(", "String", "arg0", ")", "{", "return", "CacheUtil", ".", "md5sum", "(", "arg0", ")", ";", "}"], "nl": "Generates an MD5 key for the given text.", "nlToks": ["Generates", "an", "MD5", "key", "for", "the", "given", "text", "."], "path": "adamabeshouse/cbioportal/tree/master/core/src/main/java/org/mskcc/cbio/portal/dao/DaoTextCache.java", "idx": 2716}
{"memberVariables": {"mWriter": "ByteBuffer", "mBuffer": "byte[]"}, "code": ["BufferedByteWriter", "function", "(", "int", "value", ")", "{", "ensureCapacity", "(", "4", ")", ";", "mWriter", ".", "putInt", "(", "value", ")", ";", "return", "this", ";", "}"], "memberFunctions": {"put24": [["BufferedByteWriter", "byte value"], ["BufferedByteWriter", "short value"], ["BufferedByteWriter", "int value"]], "putLen8": [["BufferedByteWriter", "byte[] value"]], "put16": [["BufferedByteWriter", "byte value"], ["BufferedByteWriter", "short value"]], "putLen16": [["BufferedByteWriter", "byte[] value"]], "toByteArray": [["byte[]"]], "ensureCapacity": [["void", "int required"]], "put64": [["BufferedByteWriter", "byte value"], ["BufferedByteWriter", "short value"], ["BufferedByteWriter", "int value"], ["BufferedByteWriter", "long value"]], "put": [["BufferedByteWriter", "byte[] value"], ["BufferedByteWriter", "byte value"]]}, "className": "BufferedByteWriter", "renamed": ["BufferedByteWriter", "function", "(", "int", "arg0", ")", "{", "ensureCapacity", "(", "4", ")", ";", "mWriter", ".", "putInt", "(", "arg0", ")", ";", "return", "this", ";", "}"], "nl": "Write the given int value (32-bit) in big-endian order to the buffer", "nlToks": ["Write", "the", "given", "int", "value", "-LRB-", "32-bit", "-RRB-", "in", "big-endian", "order", "to", "the", "buffer"], "path": "prathyks/strongswan/tree/master/src/frontends/android/app/src/main/java/org/strongswan/android/utils/BufferedByteWriter.java", "idx": 2717}
{"memberVariables": {}, "code": ["String", "function", "(", "Object", "obj", ")", "{", "if", "(", "Model", ".", "getFacade", "(", ")", ".", "isAAttribute", "(", "obj", ")", ")", "{", "if", "(", "!", "Model", ".", "getFacade", "(", ")", ".", "isReadOnly", "(", "obj", ")", ")", "{", "return", "\"final \"", ";", "}", "}", "else", "{", "if", "(", "Model", ".", "getFacade", "(", ")", ".", "isAOperation", "(", "obj", ")", ")", "{", "if", "(", "Model", ".", "getFacade", "(", ")", ".", "isLeaf", "(", "obj", ")", ")", "{", "return", "\"final \"", ";", "}", "}", "}", "return", "\"\"", ";", "}"], "memberFunctions": {"generateParameter": [["String", "Object parameter"]], "generatePath": [["String", "Object modelElement", "Map args"]], "generateVisibility": [["String", "Object o"], ["String", "Object modelElement", "Map args"]], "generateExpression": [["String", "Object expr"]], "generateAbstract": [["String", "Object modelElement", "Map args"]], "generateLeaf": [["String", "Object modelElement", "Map args"]], "generateClassifierRef": [["String", "Object cls"]], "generateScope": [["String", "Object f"]], "generateUninterpreted": [["String", "String un"]]}, "className": "NotationUtilityJava", "renamed": ["String", "function", "(", "Object", "arg0", ")", "{", "if", "(", "Model", ".", "getFacade", "(", ")", ".", "isAAttribute", "(", "arg0", ")", ")", "{", "if", "(", "!", "Model", ".", "getFacade", "(", ")", ".", "isReadOnly", "(", "arg0", ")", ")", "{", "return", "\"srini_string\"", ";", "}", "}", "else", "{", "if", "(", "Model", ".", "getFacade", "(", ")", ".", "isAOperation", "(", "arg0", ")", ")", "{", "if", "(", "Model", ".", "getFacade", "(", ")", ".", "isLeaf", "(", "arg0", ")", ")", "{", "return", "\"srini_string\"", ";", "}", "}", "}", "return", "\"srini_string\"", ";", "}"], "nl": "Generate \"final\" keyword for final operations or attributes.", "nlToks": ["Generate", "``", "final", "''", "keyword", "for", "final", "operations", "or", "attributes", "."], "path": "pichiliani/CoArgoUML/tree/master/v0.24/fonte/src/argouml-app/src/org/argouml/notation/providers/java/NotationUtilityJava.java", "idx": 2719}
{"memberVariables": {"svd": "SingularValueDecomposition<DenseMatrix64F>", "mat": "DenseMatrix64F", "U": "T", "V": "T", "W": "T"}, "code": ["T", "function", "(", ")", "{", "return", "W", ";", "}"], "memberFunctions": {"getV": [["T"]], "getSVD": [["SingularValueDecomposition"]], "getSingleValue": [["double", "int index"]], "rank": [["int"]], "nullSpace": [["SimpleMatrix"]], "nullity": [["int"]], "getU": [["T"]], "quality": [["double"]]}, "className": "SimpleSVD", "renamed": ["T", "function", "(", ")", "{", "return", "W", ";", "}"], "nl": "Returns a diagonal matrix with the singular values.  The singular values are ordered from largest to smallest.", "nlToks": ["Returns", "a", "diagonal", "matrix", "with", "the", "singular", "values", ".", "The", "singular", "values", "are", "ordered", "from", "largest", "to", "smallest", "."], "path": "adamaulia/efficient-java-matrix-library/tree/master/src/org/ejml/simple/SimpleSVD.java", "idx": 2720}
{"memberVariables": {"OPENID_CLAIM_MAPPER_FILE_PATH=\"/openid-claim-mapper.xml\"": "String", "LN_AXSCHEMA=\"AxSchema\"": "String", "instance": "OpenIDClaimMapper", "LN_SREG=\"SReg\"": "String", "LN_OPENID_SCHEMA=\"OpenIDSchema\"": "String", "sregMapping=new HashMap<String,String>()": "HashMap<String,String>", "axMapping=new HashMap<String,String>()": "HashMap<String,String>", "LN_CLAIM_MAPPER=\"ClaimMapper\"": "String", "LN_CLAIM=\"Claim\"": "String"}, "code": ["OpenIDClaimMapper", "function", "(", ")", "{", "if", "(", "instance", "==", "null", ")", "{", "instance", "=", "new", "OpenIDClaimMapper", "(", ")", ";", "}", "return", "instance", ";", "}"], "memberFunctions": {"process": [["void", "String filePath"], ["void", "OMElement initialClaims"]], "getSregMapping": [["HashMap<String,String>"]], "getAxMapping": [["HashMap<String,String>"]]}, "className": "OpenIDClaimMapper", "renamed": ["OpenIDClaimMapper", "function", "(", ")", "{", "if", "(", "instance", "==", "null", ")", "{", "instance", "=", "new", "OpenIDClaimMapper", "(", ")", ";", "}", "return", "instance", ";", "}"], "nl": "Creates and maintains a singleton instance of OpenIDClaimMapper", "nlToks": ["Creates", "and", "maintains", "a", "singleton", "instance", "of", "OpenIDClaimMapper"], "path": "harsha1979/carbon-identity/tree/master/components/identity-core/org.wso2.carbon.identity.core/src/main/java/org/wso2/carbon/identity/core/util/OpenIDClaimMapper.java", "idx": 2721}
{"memberVariables": {"_serializerFactory": "SerializerFactory", "_defaultSerializerFactory": "SerializerFactory", "log=Logger.getLogger(HessianFactory.class.getName())": "Logger", "_freeHessianInput=new HessianFreeList<HessianInput>(32)": "HessianFreeList<HessianInput>", "_freeHessianOutput=new HessianFreeList<HessianOutput>(32)": "HessianFreeList<HessianOutput>", "_freeHessian2Input=new HessianFreeList<Hessian2Input>(32)": "HessianFreeList<Hessian2Input>", "_freeHessian2Output=new HessianFreeList<Hessian2Output>(32)": "HessianFreeList<Hessian2Output>"}, "code": ["void", "function", "(", "Hessian2StreamingInput", "in", ")", "{", "}"], "memberFunctions": {"createHessian2Input": [["Hessian2Input", "InputStream is"]], "createHessian2Output": [["Hessian2Output", "OutputStream os"]], "createHessian2StreamingOutput": [["Hessian2StreamingOutput", "OutputStream os"]], "freeHessian2StreamingOutput": [["void", "Hessian2StreamingOutput out"]], "setSerializerFactory": [["void", "SerializerFactory factory"]], "createHessian2DebugOutput": [["OutputStream", "OutputStream os", "Logger log", "Level level"]], "getSerializerFactory": [["SerializerFactory"]], "createHessian2StreamingInput": [["Hessian2StreamingInput", "InputStream is"]], "freeHessian2Output": [["void", "Hessian2Output out"]], "createHessianOutput": [["HessianOutput", "OutputStream os"]], "createHessianInput": [["HessianInput", "InputStream is"]], "freeHessian2Input": [["void", "Hessian2Input in"]]}, "className": "HessianFactory", "renamed": ["void", "function", "(", "Hessian2StreamingInput", "arg0", ")", "{", "}"], "nl": "Frees a Hessian 2.0 deserializer", "nlToks": ["Frees", "a", "Hessian", "2.0", "deserializer"], "path": "007slm/citrus/tree/master/common/hessian/src/main/java/com/alibaba/citrus/hessian/io/HessianFactory.java", "idx": 2723}
{"memberVariables": {"connected=false": "boolean"}, "code": ["void", "function", "(", "String", "[", "]", "args", ")", "{", "SshExample", "test", "=", "new", "SshExample", "(", ")", ";", "}"], "memberFunctions": {"connected": [["void", "SshConnectedEvent ev"]], "disconnected": [["void", "SshDisconnectedEvent ev"]], "dataReceived": [["void", "SshDataReceivedEvent ev"]]}, "className": "SshExample", "renamed": ["void", "function", "(", "String", "[", "]", "arg0", ")", "{", "SshExample", "loc0", "=", "new", "SshExample", "(", ")", ";", "}"], "nl": "Main method for SshExample", "nlToks": ["Main", "method", "for", "SshExample"], "path": "adilraja/ULMAN/tree/master/Prac/src/SshExample.java", "idx": 2724}
{"memberVariables": {"VocabularySize": "int", "CountofWordsInTwenties": "int", "CountofWordsInThirties": "int", "stopWord": "StopWord", "CountofWordsInTeens": "int"}, "code": ["String", "function", "(", "String", "post", ")", "{", "String", "postWithoutFullStpos", "=", "post", ".", "replaceAll", "(", "\"|.\"", ",", "\" \"", ")", ";", "String", "cleanLine", "=", "postWithoutFullStpos", ".", "replaceAll", "(", "\"[^|w&&[^|s]]\"", ",", "\"\"", ")", ";", "return", "cleanLine", ";", "}"], "memberFunctions": {"updateNaiveBayesMapForSinglePost": [["void", "String[] cleanPostTokens", "HashMap<String,HashMap<String,Integer>> naiveBayesMap", "String ageClass"]], "getCountofWordsInTeens": [["int"]], "setCountofWordsInThirties": [["void", "int countofWordsInThirties"]], "trainNaiveBayes": [["HashMap<String,HashMap<String,Integer>>", "File cleanXmlFolder", "int numberoftraingposts"]], "updateClassWordCount": [["void", "String ageClass"]], "setVocabularySize": [["void", "int vocabularySize"]], "setCountofWordsInTwenties": [["void", "int countofWordsInTwenties"]], "getVocabularySize": [["int"]], "cleanPost": [["String[]", "String post"]], "setCountofWordsInTeens": [["void", "int countofWordsInTeens"]], "getCountofWordsInTwenties": [["int"]], "getCountofWordsInThirties": [["int"]], "updateNaiveBayesMap": [["void", "PersonBlogs pbBlogs", "HashMap<String,HashMap<String,Integer>> naiveBayesMap"]]}, "className": "NaiveBayesTrain", "renamed": ["String", "function", "(", "String", "arg0", ")", "{", "String", "loc0", "=", "arg0", ".", "replaceAll", "(", "\"srini_string\"", ",", "\"srini_string\"", ")", ";", "String", "loc1", "=", "loc0", ".", "replaceAll", "(", "\"srini_string\"", ",", "\"srini_string\"", ")", ";", "return", "loc1", ";", "}"], "nl": "removes all punctuation marks from  a post", "nlToks": ["removes", "all", "punctuation", "marks", "from", "a", "post"], "path": "prap19/Sem3_SourceCode/tree/master/AgeAttribution/src/edu/nlp/ageattr/Baseline/NaiveBayesTrain.java", "idx": 2725}
{"memberVariables": {"abstraction": "Abstraction", "sinkValue": "Value", "sinkStmt": "Stmt"}, "code": ["Abstraction", "function", "(", ")", "{", "return", "this", ".", "abstraction", ";", "}"], "memberFunctions": {"getSinkStmt": [["Stmt"]], "hashCode": [["int"]], "equals": [["boolean", "Object obj"]], "getSinkValue": [["Value"]]}, "className": "AbstractionAtSink", "renamed": ["Abstraction", "function", "(", ")", "{", "return", "this", ".", "abstraction", ";", "}"], "nl": "Gets the abstraction with which the sink has been reached", "nlToks": ["Gets", "the", "abstraction", "with", "which", "the", "sink", "has", "been", "reached"], "path": "0-14N/soot-inflow/tree/master/src/soot/jimple/infoflow/data/AbstractionAtSink.java", "idx": 2726}
{"memberVariables": {"mFiles": "Set<InodeFile>", "sTtlIntervalMs=Configuration.getInt(PropertyKey.MASTER_TTL_CHECKER_INTERVAL_MS)": "long", "mTtlIntervalStartTimeMs": "long"}, "code": ["int", "function", "(", "TtlBucket", "ttlBucket", ")", "{", "long", "startTime1", "=", "getTtlIntervalStartTimeMs", "(", ")", ";", "long", "startTime2", "=", "ttlBucket", ".", "getTtlIntervalStartTimeMs", "(", ")", ";", "if", "(", "startTime1", "<", "startTime2", ")", "{", "return", "-", "1", ";", "}", "if", "(", "startTime1", "==", "startTime2", ")", "{", "return", "0", ";", "}", "return", "1", ";", "}"], "memberFunctions": {"removeFile": [["void", "InodeFile file"]], "getTtlIntervalMs": [["long"]], "hashCode": [["int"]], "equals": [["boolean", "Object o"]], "getFiles": [["Set<InodeFile>"]], "getTtlIntervalStartTimeMs": [["long"]], "getTtlIntervalEndTimeMs": [["long"]], "addFile": [["void", "InodeFile file"]]}, "className": "TtlBucket", "renamed": ["int", "function", "(", "TtlBucket", "arg0", ")", "{", "long", "loc0", "=", "getTtlIntervalStartTimeMs", "(", ")", ";", "long", "loc1", "=", "arg0", ".", "getTtlIntervalStartTimeMs", "(", ")", ";", "if", "(", "loc0", "<", "loc1", ")", "{", "return", "-", "1", ";", "}", "if", "(", "loc0", "==", "loc1", ")", "{", "return", "0", ";", "}", "return", "1", ";", "}"], "nl": "Compares this bucket's TTL interval start time to that of another bucket.", "nlToks": ["Compares", "this", "bucket", "'s", "TTL", "interval", "start", "time", "to", "that", "of", "another", "bucket", "."], "path": "poemlin/alluxio/tree/master/core/server/src/main/java/alluxio/master/file/meta/TtlBucket.java", "idx": 2728}
{"memberVariables": {"defaultDocumentMetadata": "LuceneDocumentMetadata", "extractor": "TikaContentExtractor"}, "code": ["Document", "function", "(", "final", "InputStream", "in", ")", "{", "return", "extractAll", "(", "in", ",", "null", ",", "true", ",", "true", ")", ";", "}"], "memberFunctions": {"getContentField": [["Field", "final LuceneDocumentMetadata documentMetadata", "final String content"]], "getField": [["Field", "final LuceneDocumentMetadata documentMetadata", "final String name", "final String value"]], "extractMetadata": [["Document", "final InputStream in"], ["Document", "final InputStream in", "final LuceneDocumentMetadata documentMetadata"]], "extractAll": [["Document", "final InputStream in", "LuceneDocumentMetadata documentMetadata", "boolean extractContent", "boolean extractMetadata"]], "extractContent": [["Document", "final InputStream in"]]}, "className": "TikaLuceneContentExtractor", "renamed": ["Document", "function", "(", "final", "InputStream", "arg0", ")", "{", "return", "extractAll", "(", "arg0", ",", "null", ",", "true", ",", "true", ")", ";", "}"], "nl": "Extract the content and metadata from the input stream. Depending on media type validation, the detector could be run against input stream in order to ensure that parser supports this type of content.", "nlToks": ["Extract", "the", "content", "and", "metadata", "from", "the", "input", "stream", ".", "Depending", "on", "media", "type", "validation", ",", "the", "detector", "could", "be", "run", "against", "input", "stream", "in", "order", "to", "ensure", "that", "parser", "supports", "this", "type", "of", "content", "."], "path": "primesign/cxf/tree/master/rt/rs/extensions/search/src/main/java/org/apache/cxf/jaxrs/ext/search/tika/TikaLuceneContentExtractor.java", "idx": 2729}
{"memberVariables": {"comparator": "Comparator<? super T>", "threshold": "T", "k": "int", "buffer": "T[]", "bufferSize": "int"}, "code": ["List", "<", "T", ">", "function", "(", ")", "{", "Arrays", ".", "sort", "(", "buffer", ",", "0", ",", "bufferSize", ",", "comparator", ")", ";", "if", "(", "bufferSize", ">", "k", ")", "{", "Arrays", ".", "fill", "(", "buffer", ",", "k", ",", "buffer", ".", "length", ",", "null", ")", ";", "bufferSize", "=", "k", ";", "threshold", "=", "buffer", "[", "k", "-", "1", "]", ";", "}", "return", "Collections", ".", "unmodifiableList", "(", "Arrays", ".", "asList", "(", "Arrays", ".", "copyOf", "(", "buffer", ",", "bufferSize", ")", ")", ")", ";", "}"], "memberFunctions": {"offer": [["void", "@Nullable T elem"]], "partition": [["int", "int left", "int right", "int pivotIndex"]], "trim": [["void"]], "swap": [["void", "int i", "int j"]], "offerAll": [["void", "Iterable<? extends T> elements"], ["void", "Iterator<? extends T> elements"]], "least": [["TopKSelector<T>", "int k"], ["TopKSelector<T>", "int k", "Comparator<? super T> comparator"]], "greatest": [["TopKSelector<T>", "int k"], ["TopKSelector<T>", "int k", "Comparator<? super T> comparator"]], "combine": [["TopKSelector<T>", "TopKSelector<T> other"]]}, "className": "TopKSelector", "renamed": ["List", "<", "T", ">", "function", "(", ")", "{", "Arrays", ".", "sort", "(", "buffer", ",", "0", ",", "bufferSize", ",", "comparator", ")", ";", "if", "(", "bufferSize", ">", "k", ")", "{", "Arrays", ".", "fill", "(", "buffer", ",", "k", ",", "buffer", ".", "length", ",", "null", ")", ";", "bufferSize", "=", "k", ";", "threshold", "=", "buffer", "[", "k", "-", "1", "]", ";", "}", "return", "Collections", ".", "unmodifiableList", "(", "Arrays", ".", "asList", "(", "Arrays", ".", "copyOf", "(", "buffer", ",", "bufferSize", ")", ")", ")", ";", "}"], "nl": "Returns the top  {@code k} elements offered to this {@code TopKSelector}, or all elements if fewer than  {@code k} have been offered, in the order specified by the factory used to createthis  {@code TopKSelector}. The returned list is an unmodifiable copy and will not be affected by further changes to this  {@code TopKSelector}. This method returns in O(k log k) time.", "nlToks": ["Returns", "the", "top", "-LCB-", "@code", "k", "-RCB-", "elements", "offered", "to", "this", "-LCB-", "@code", "TopKSelector", "-RCB-", ",", "or", "all", "elements", "if", "fewer", "than", "-LCB-", "@code", "k", "-RCB-", "have", "been", "offered", ",", "in", "the", "order", "specified", "by", "the", "factory", "used", "to", "createthis", "-LCB-", "@code", "TopKSelector", "-RCB-", ".", "The", "returned", "list", "is", "an", "unmodifiable", "copy", "and", "will", "not", "be", "affected", "by", "further", "changes", "to", "this", "-LCB-", "@code", "TopKSelector", "-RCB-", ".", "This", "method", "returns", "in", "O", "-LRB-", "k", "log", "k", "-RRB-", "time", "."], "path": "hazendaz/guava/tree/master/guava/src/com/google/common/collect/TopKSelector.java", "idx": 2730}
{"memberVariables": {"EXAMPLE=\"$GPZDA,032915,07,08,2004,00,00*4D\"": "String", "zda": "ZDAParser", "empty": "ZDAParser"}, "code": ["void", "function", "(", ")", "{", "Time", "t", "=", "zda", ".", "getTime", "(", ")", ";", "assertNotNull", "(", "t", ")", ";", "assertEquals", "(", "3", ",", "t", ".", "getHour", "(", ")", ")", ";", "assertEquals", "(", "29", ",", "t", ".", "getMinutes", "(", ")", ")", ";", "assertEquals", "(", "15.0", ",", "t", ".", "getSeconds", "(", ")", ",", "0.1", ")", ";", "}"], "memberFunctions": {"testGetYear": [["void"]], "testGetDate": [["void"]], "testGetLocalZoneMinutes": [["void"]], "testSetTimeAndLocalZone": [["void"]], "testConstructor": [["void"]], "testToDate": [["void"]], "testSetLocalZoneMinutes": [["void"]], "testSetLocalZoneHours": [["void"]], "testSetTime": [["void"]], "testGetDay": [["void"]], "setUp": [["void"]], "testGetMonth": [["void"]], "testSetDate": [["void"]], "testGetLocalZoneHours": [["void"]]}, "className": "ZDATest", "renamed": ["void", "function", "(", ")", "{", "Time", "loc0", "=", "zda", ".", "getTime", "(", ")", ";", "assertNotNull", "(", "loc0", ")", ";", "assertEquals", "(", "3", ",", "loc0", ".", "getHour", "(", ")", ")", ";", "assertEquals", "(", "29", ",", "loc0", ".", "getMinutes", "(", ")", ")", ";", "assertEquals", "(", "15.0", ",", "loc0", ".", "getSeconds", "(", ")", ",", "0.1", ")", ";", "}"], "nl": "Test method for  {@link net.sf.marineapi.nmea.parser.ZDAParser#getTime()}.", "nlToks": ["Test", "method", "for", "-LCB-", "@link", "net.sf.marineapi.nmea.parser.ZDAParser", "#getTime", "-LRB-", "-RRB-", "-RCB-", "."], "path": "pkoziol/marine-api/tree/master/src/test/java/net/sf/marineapi/nmea/parser/ZDATest.java", "idx": 2731}
{"memberVariables": {"instance": "Date", "cal": "GregorianCalendar"}, "code": ["void", "function", "(", ")", "{", "assertEquals", "(", "cal", ".", "get", "(", "Calendar", ".", "DAY_OF_MONTH", ")", ",", "instance", ".", "getDay", "(", ")", ")", ";", "}"], "memberFunctions": {"testConstructorWithString": [["void"]], "testSetMonth": [["void"]], "testSetYearThreeDigits": [["void"]], "testConstructor": [["void"]], "testToStringFourDigitYear": [["void"]], "testEqualsAfterInit": [["void"]], "testEqualsWrongType": [["void"]], "testSetYearTwoDigit": [["void"]], "testEqualsWhenChanged": [["void"]], "testToISO8601WithTime": [["void"]], "setUp": [["void"]], "testGetMonth": [["void"]], "testEqualsItself": [["void"]], "testSetYearNegative": [["void"]], "testConstructorWithValues": [["void"]], "testSetDayOutOfBounds": [["void"]], "testGetYear": [["void"]], "testToISO8601WithTimeAndZeroZone": [["void"]], "testToISO8601FourDigitYear": [["void"]], "testSetDay": [["void"]], "testSetYearFourDigit": [["void"]], "testToStringTwoDigitYear": [["void"]], "testToISO8601WithTimeAndPositiveOffset": [["void"]], "testToISO8601TwoDigitYear": [["void"]], "testSetYearFiveDigits": [["void"]], "testToISO8601WithTimeAndNegativeOffset": [["void"]], "testSetMonthOutOfBounds": [["void"]]}, "className": "DateTest", "renamed": ["void", "function", "(", ")", "{", "assertEquals", "(", "cal", ".", "get", "(", "Calendar", ".", "DAY_OF_MONTH", ")", ",", "instance", ".", "getDay", "(", ")", ")", ";", "}"], "nl": "Test method for  {@link net.sf.marineapi.nmea.util.Date#getDay()}.", "nlToks": ["Test", "method", "for", "-LCB-", "@link", "net.sf.marineapi.nmea.util.Date", "#getDay", "-LRB-", "-RRB-", "-RCB-", "."], "path": "pkoziol/marine-api/tree/master/src/test/java/net/sf/marineapi/nmea/util/DateTest.java", "idx": 2732}
{"memberVariables": {"expected": "LanguageVersion", "name": "String", "version": "String", "simpleTerseName": "String", "terseName": "String"}, "code": ["void", "function", "(", ")", "{", "assertEquals", "(", "expected", ",", "LanguageRegistry", ".", "findLanguageVersionByTerseName", "(", "terseName", ")", ")", ";", "}"], "memberFunctions": {"testRegisteredRulesets": [["void"]], "testFindVersionsForLanguageNameAndVersion": [["void"]]}, "className": "AbstractLanguageVersionTest", "renamed": ["void", "function", "(", ")", "{", "assertEquals", "(", "expected", ",", "LanguageRegistry", ".", "findLanguageVersionByTerseName", "(", "terseName", ")", ")", ";", "}"], "nl": "Checks that the expected  {@link LanguageVersion} can be found by thecombination of  {@link #terseName} and {@link #version}.", "nlToks": ["Checks", "that", "the", "expected", "-LCB-", "@link", "LanguageVersion", "-RCB-", "can", "be", "found", "by", "thecombination", "of", "-LCB-", "@link", "#terseName", "-RCB-", "and", "-LCB-", "@link", "#version", "-RCB-", "."], "path": "adangel/pmd/tree/master/pmd-test/src/main/java/net/sourceforge/pmd/AbstractLanguageVersionTest.java", "idx": 2734}
{"memberVariables": {"SPECIAL_REGEX_CHARS=Pattern.compile(\"[{}()\\\\[\\\\].+*?^$\\\\\\\\|]\")": "Pattern"}, "code": ["String", "function", "(", "String", "text", ")", "{", "return", "escape", "(", "text", ")", ".", "replace", "(", "\"|*\"", ",", "\".*\"", ")", ";", "}"], "memberFunctions": {"getAlluxioURIs": [["List<AlluxioURI>", "FileSystem alluxioClient", "AlluxioURI inputURI"], ["List<AlluxioURI>", "FileSystem alluxioClient", "AlluxioURI inputURI", "AlluxioURI parentDir"]], "getFilePath": [["String", "String path"]], "match": [["boolean", "AlluxioURI fileURI", "AlluxioURI patternURI"], ["boolean", "String filePath", "String patternPath"]], "validatePath": [["String", "String path"]], "getFiles": [["List<File>", "String inputPath"], ["List<File>", "String inputPath", "String parent"]], "escape": [["String", "String str"]]}, "className": "AlluxioShellUtils", "renamed": ["String", "function", "(", "String", "arg0", ")", "{", "return", "escape", "(", "arg0", ")", ".", "replace", "(", "\"srini_string\"", ",", "\"srini_string\"", ")", ";", "}"], "nl": "Replaces the wildcards with Java's regex semantics.", "nlToks": ["Replaces", "the", "wildcards", "with", "Java", "'s", "regex", "semantics", "."], "path": "poemlin/alluxio/tree/master/shell/src/main/java/alluxio/shell/AlluxioShellUtils.java", "idx": 2735}
{"memberVariables": {"expDataUnitId": "BigDecimal", "dataUnitId": "BigDecimal", "createTimeStamp": "Timestamp", "actValue": "String", "errorCode": "String", "srcFileName": "String", "errorMsg": "String", "failedAttrib": "String", "expDataSetId": "BigDecimal", "regPclTestResult": "RegPCLTestResultEntity", "dataSetId": "BigDecimal", "id": "RegPCLTestResultDetailsEntityPK", "serialVersionUID=3309870439513279844L": "long", "expValue": "String"}, "code": ["void", "function", "(", "BigDecimal", "expDataUnitId", ")", "{", "this", ".", "expDataUnitId", "=", "expDataUnitId", ";", "}"], "memberFunctions": {"updateCreateTimeStamp": [["void"]], "setActValue": [["void", "String actValue"]], "getDataSetId": [["BigDecimal"]], "getId": [["RegPCLTestResultDetailsEntityPK"]], "setSrcFileName": [["void", "String srcFileName"]], "getRegPclTestResult": [["RegPCLTestResultEntity"]], "setExpValue": [["void", "String expValue"]], "getSrcFileName": [["String"]], "setErrorCode": [["void", "String errorCode"]], "getDataUnitId": [["BigDecimal"]], "setErrorMsg": [["void", "String errorMsg"]], "getErrorCode": [["String"]], "setDataUnitId": [["void", "BigDecimal dataUnitId"]], "setId": [["void", "RegPCLTestResultDetailsEntityPK id"]], "setFailedAttrib": [["void", "String failedAttrib"]], "getExpDataSetId": [["BigDecimal"]], "getErrorMsg": [["String"]], "getActValue": [["String"]], "setRegPclTestResult": [["void", "RegPCLTestResultEntity regPclTestResult"]], "getExpValue": [["String"]], "setCreateTimeStamp": [["void", "Timestamp createTimeStamp"]], "getExpDataUnitId": [["BigDecimal"]], "getCreateTimeStamp": [["Timestamp"]], "getFailedAttrib": [["String"]], "setExpDataSetId": [["void", "BigDecimal expDataSetId"]], "setDataSetId": [["void", "BigDecimal dataSetId"]]}, "className": "RegPCLTestResultDetailsEntity", "renamed": ["void", "function", "(", "BigDecimal", "arg0", ")", "{", "this", ".", "expDataUnitId", "=", "arg0", ";", "}"], "nl": "Sets the exp data unit id.", "nlToks": ["Sets", "the", "exp", "data", "unit", "id", "."], "path": "pkesireddy/portico_fletcher/tree/master/FetcherTesterService/src/main/java/org/ithaka/cm/fetchertester/entity/RegPCLTestResultDetailsEntity.java", "idx": 2736}
{"memberVariables": {"TOP_LEVEL_PACKAGE=new PackageStats()": "PackageStats", "calculator": "OperationMetric"}, "code": ["OperationMetric", "function", "(", ")", "{", "return", "calculator", ";", "}"], "memberFunctions": {"getTopLevelPackageStats": [["PackageStats"]], "get": [["double", "ClassMetricKey key", "ASTClassOrInterfaceDeclaration node"], ["double", "OperationMetricKey key", "ASTMethodOrConstructorDeclaration node"]]}, "className": "Metrics", "renamed": ["OperationMetric", "function", "(", ")", "{", "return", "calculator", ";", "}"], "nl": "Returns the object used to calculate the metric. @return The calculator.", "nlToks": ["Returns", "the", "object", "used", "to", "calculate", "the", "metric", ".", "@return", "The", "calculator", "."], "path": "adangel/pmd/tree/master/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/oom/Metrics.java", "idx": 2737}
{"memberVariables": {"gsv": "GSVSentence", "EXAMPLE=\"$GPGSV,3,2,12,15,56,182,51,17,38,163,47,18,63,058,50,21,53,329,47*73\"": "String", "empty": "GSVSentence"}, "code": ["void", "function", "(", ")", "{", "assertEquals", "(", "2", ",", "gsv", ".", "getSentenceIndex", "(", ")", ")", ";", "}"], "memberFunctions": {"testSetSatelliteCount": [["void"]], "testIsFirst": [["void"]], "testSetSatelliteInfo": [["void"]], "testGetSatelliteCount": [["void"]], "testConstructor": [["void"]], "testGetSatelliteInfo": [["void"]], "testParserGlonassGSV": [["void"]], "testGetSentenceCount": [["void"]], "testGetSatelliteInfoWithEmptyFields": [["void"]], "testSetSentenceCount": [["void"]], "testGetSatelliteInfoWithShortSentence": [["void"]], "setUp": [["void"]], "testIsLast": [["void"]], "testSatelliteInfo": [["void", "SatelliteInfo si", "String id", "int elevation", "int azimuth", "int noise"]]}, "className": "GSVTest", "renamed": ["void", "function", "(", ")", "{", "assertEquals", "(", "2", ",", "gsv", ".", "getSentenceIndex", "(", ")", ")", ";", "}"], "nl": "Test method for {@link net.sf.marineapi.nmea.parser.GSVParser#getSentenceIndex()}.", "nlToks": ["Test", "method", "for", "-LCB-", "@link", "net.sf.marineapi.nmea.parser.GSVParser", "#getSentenceIndex", "-LRB-", "-RRB-", "-RCB-", "."], "path": "pkoziol/marine-api/tree/master/src/test/java/net/sf/marineapi/nmea/parser/GSVTest.java", "idx": 2738}
{"memberVariables": {"siteUrlRepository": "SiteUrlRepository", "EMPTY_PROCEDURE=\"[procedure-empty]\"": "String", "EMPTY_THUMBNAIL=\"[thumbnail-empty]\"": "String", "EMPTY_INGREDIENT_SEARCH=\"[ingredientSearch-empty]\"": "String", "log=LoggerFactory.getLogger(SiteUrlService.class)": "Logger", "parseNotesString=EMPTY_OVERVIEW + \",\" + EMPTY_PREPARATION+ \",\"+ EMPTY_PROCEDURE+ \",\"+ EMPTY_THUMBNAIL+ \",\"+ EMPTY_INGREDIENT_SEARCH+ \",\"+ MULTIPLE": "String", "EMPTY_PREPARATION=\"[preparation-empty]\"": "String", "EMPTY_OVERVIEW=\"[overview-empty]\"": "String", "customSiteUrlRepository": "CustomSiteUrlRepository", "MULTIPLE=\"[multiple]\"": "String"}, "code": ["SiteUrl", "function", "(", "SiteUrl", "siteUrl", ")", "{", "log", ".", "debug", "(", "\"Request to save SiteUrl : {}\"", ",", "siteUrl", ")", ";", "SiteUrl", "result", "=", "siteUrlRepository", ".", "save", "(", "siteUrl", ")", ";", "return", "result", ";", "}"], "memberFunctions": {"isEmptyProcedure": [["boolean", "SiteUrl siteUrl"]], "findBySite": [["Page<SiteUrl>", "Site site", "Pageable pageable"]], "findEmptyProcedure": [["Page<SiteUrl>", "Pageable pageable"]], "findEmptyPreparation": [["Page<SiteUrl>", "Pageable pageable"]], "findOne": [["SiteUrl", "String id"]], "updateParseNote": [["void", "SiteUrl siteUrl", "Dish dish", "boolean isMultipleDish"]], "isMultiple": [["boolean", "SiteUrl siteUrl"]], "findAll": [["Page<SiteUrl>", "Pageable pageable"]], "delete": [["void", "String id"]], "findEmptyOverview": [["Page<SiteUrl>", "Pageable pageable"]], "isEmptyPreparationOrProcedure": [["boolean", "SiteUrl siteUrl"]], "urlExists": [["boolean", "String url"]], "findByUrl": [["SiteUrl", "String url"]], "findByParseNote": [["Page<SiteUrl>", "String parseNote", "Pageable pageable"]], "findMultiple": [["Page<SiteUrl>", "Pageable pageable"]], "removeAllDocuments": [["void"]], "isContentEmpty": [["boolean", "String html"]]}, "className": "SiteUrlService", "renamed": ["SiteUrl", "function", "(", "SiteUrl", "arg0", ")", "{", "log", ".", "debug", "(", "\"srini_string\"", ",", "arg0", ")", ";", "SiteUrl", "loc0", "=", "siteUrlRepository", ".", "save", "(", "arg0", ")", ";", "return", "loc0", ";", "}"], "nl": "Save a siteUrl.", "nlToks": ["Save", "a", "siteUrl", "."], "path": "pigkey/kitchen/tree/master/app/src/main/java/com/kitchen/app/service/SiteUrlService.java", "idx": 2740}
{"memberVariables": {"mData=null": "ByteBuffer", "REQUEST_HEADER_LENGTH=HEADER_PREFIX_LENGTH + 40": "int", "RESPONSE_HEADER_LENGTH=HEADER_PREFIX_LENGTH + 26": "int", "ERROR_RESPONSE_HEADER_LENGTH=HEADER_PREFIX_LENGTH + 2": "int", "mOffset": "long", "mStatus": "RPCResponse.Status", "mLockId=-1L": "long", "mToSendData": "boolean", "mLength": "long", "mBlockId": "long", "HEADER_PREFIX_LENGTH=12": "int", "mSessionId": "long", "mMessageType": "RPCMessage.Type", "mIsMessageReady": "boolean", "mHeader": "ByteBuffer", "LOG=LoggerFactory.getLogger(Constants.LOGGER_TYPE)": "Logger"}, "code": ["DataServerMessage", "function", "(", ")", "{", "DataServerMessage", "ret", "=", "new", "DataServerMessage", "(", "false", ",", "RPCMessage", ".", "Type", ".", "RPC_BLOCK_READ_REQUEST", ")", ";", "ret", ".", "mHeader", "=", "ByteBuffer", ".", "allocate", "(", "REQUEST_HEADER_LENGTH", ")", ";", "return", "ret", ";", "}"], "memberFunctions": {"checkReady": [["void"]], "getOffset": [["long"]], "setLockId": [["void", "long lockId"]], "getStatus": [["RPCResponse.Status"]], "createBlockResponseMessage": [["DataServerMessage", "boolean toSend", "long blockId", "ByteBuffer data"], ["DataServerMessage", "boolean toSend", "long blockId", "long offset", "long len", "ByteBuffer data"]], "finishSending": [["boolean"]], "getLockId": [["long"]], "recv": [["int", "SocketChannel socketChannel"]], "getBlockId": [["long"]], "generateHeader": [["void"]], "getReadOnlyData": [["ByteBuffer"]], "getLength": [["long"]], "isSend": [["void", "boolean isSend"]], "getSessionId": [["long"]], "close": [["void"]], "send": [["void", "SocketChannel socketChannel"]], "isMessageReady": [["boolean"]]}, "className": "DataServerMessage", "renamed": ["DataServerMessage", "function", "(", ")", "{", "DataServerMessage", "loc0", "=", "new", "DataServerMessage", "(", "false", ",", "RPCMessage", ".", "Type", ".", "RPC_BLOCK_READ_REQUEST", ")", ";", "loc0", ".", "mHeader", "=", "ByteBuffer", ".", "allocate", "(", "REQUEST_HEADER_LENGTH", ")", ";", "return", "loc0", ";", "}"], "nl": "Creates a default block request message, just allocates the message header, and no attribute is set. The message is not ready to be sent.", "nlToks": ["Creates", "a", "default", "block", "request", "message", ",", "just", "allocates", "the", "message", "header", ",", "and", "no", "attribute", "is", "set", ".", "The", "message", "is", "not", "ready", "to", "be", "sent", "."], "path": "poemlin/alluxio/tree/master/core/common/src/main/java/alluxio/worker/DataServerMessage.java", "idx": 2741}
{"memberVariables": {"entityManager": "EntityManager"}, "code": ["boolean", "function", "(", ")", "{", "return", "entityManager", ".", "getTransaction", "(", ")", ".", "isActive", "(", ")", ";", "}"], "memberFunctions": {"closeTrx": [["void"]], "getConnection": [["String"]], "contains": [["boolean", "Object entity"]], "isClosed": [["boolean"]], "getFlushMode": [["String"]], "isDetached": [["boolean", "Object o"]], "beginTrx": [["void"]], "getEntityManager": [["EntityManager"]], "commitTrx": [["void"]], "rollbackTrx": [["void"]]}, "className": "Store", "renamed": ["boolean", "function", "(", ")", "{", "return", "entityManager", ".", "getTransaction", "(", ")", ".", "isActive", "(", ")", ";", "}"], "nl": "Check if transaction is active", "nlToks": ["Check", "if", "transaction", "is", "active"], "path": "pingpangkuangmo/oozie/tree/master/core/src/main/java/org/apache/oozie/store/Store.java", "idx": 2742}
{"memberVariables": {"EXAMPLE=\"$RATTM,11,25.3,13.7,T,7.0,20.0,T,10.1,20.2,N,NAME,Q,,175550.24,A*34\"": "String", "ttm": "TTMParser", "empty": "TTMParser"}, "code": ["void", "function", "(", ")", "{", "assertEquals", "(", "20.2", ",", "ttm", ".", "getTimeToCPA", "(", ")", ",", "0.001", ")", ";", "}"], "memberFunctions": {"testGetAcquisitionType": [["void"]], "testGetDistance": [["void"]], "testSetStatus": [["void"]], "testSetNumber": [["void"]], "testSetDistanceOfCPA": [["void"]], "testConstructor": [["void"]], "testGetTime": [["void"]], "testSetCourse": [["void"]], "testGetName": [["void"]], "testGetNumber": [["void"]], "testGetDistanceOfCPA": [["void"]], "setUp": [["void"]], "testGetCourse": [["void"]], "testSetReferenceTrue": [["void"]], "testSetReferenceFalse": [["void"]], "testSetAcquisitionType": [["void"]], "testSetBearing": [["void"]], "testGetBearing": [["void"]], "testSetDistance": [["void"]], "testSetTimeToCPA": [["void"]], "testSetTime": [["void"]], "testGetSpeed": [["void"]], "testGetStatus": [["void"]], "testSetName": [["void"]], "testSetSpeed": [["void"]]}, "className": "TTMTest", "renamed": ["void", "function", "(", ")", "{", "assertEquals", "(", "20.2", ",", "ttm", ".", "getTimeToCPA", "(", ")", ",", "0.001", ")", ";", "}"], "nl": "Test method for {@link net.sf.marineapi.nmea.parser.TTMParser#getTimeToCPA()} .", "nlToks": ["Test", "method", "for", "-LCB-", "@link", "net.sf.marineapi.nmea.parser.TTMParser", "#getTimeToCPA", "-LRB-", "-RRB-", "-RCB-", "."], "path": "pkoziol/marine-api/tree/master/src/test/java/net/sf/marineapi/nmea/parser/TTMTest.java", "idx": 2743}
{"memberVariables": {"connected=false": "boolean"}, "code": ["void", "function", "(", "SshDisconnectedEvent", "ev", ")", "{", "System", ".", "out", ".", "println", "(", "\"Disconnected: \"", "+", "ev", ".", "getHost", "(", ")", "+", "\". Press Enter to exit\"", ")", ";", "connected", "=", "false", ";", "}"], "memberFunctions": {"connected": [["void", "SshConnectedEvent ev"]], "main": [["void", "String[] args"]], "dataReceived": [["void", "SshDataReceivedEvent ev"]]}, "className": "SshExample", "renamed": ["void", "function", "(", "SshDisconnectedEvent", "arg0", ")", "{", "System", ".", "out", ".", "println", "(", "\"srini_string\"", "+", "arg0", ".", "getHost", "(", ")", "+", "\"srini_string\"", ")", ";", "connected", "=", "false", ";", "}"], "nl": "Captures SshDisconnectedEvent", "nlToks": ["Captures", "SshDisconnectedEvent"], "path": "adilraja/ULMAN/tree/master/Prac/src/SshExample.java", "idx": 2745}
{"memberVariables": {"value": "String"}, "code": ["String", "function", "(", ")", "{", "return", "value", ";", "}"], "memberFunctions": {"setValue": [["void", "final String newValue"]], "toString": [["String"]]}, "className": "JavaExpression", "renamed": ["String", "function", "(", ")", "{", "return", "value", ";", "}"], "nl": "Get the Value value.", "nlToks": ["Get", "the", "Value", "value", "."], "path": "primesign/cxf/tree/master/tools/common/src/main/java/org/apache/cxf/tools/common/model/JavaExpression.java", "idx": 2747}
{"memberVariables": {"val": "Constant", "idx": "Index", "ts": "TableScan"}, "code": ["boolean", "function", "(", ")", "{", "boolean", "ok", "=", "idx", ".", "next", "(", ")", ";", "if", "(", "ok", ")", "{", "RID", "rid", "=", "idx", ".", "getDataRid", "(", ")", ";", "ts", ".", "moveToRid", "(", "rid", ")", ";", "}", "return", "ok", ";", "}"], "memberFunctions": {"getInt": [["int", "String fldname"]], "getVal": [["Constant", "String fldname"]], "beforeFirst": [["void"]], "getString": [["String", "String fldname"]], "close": [["void"]], "hasField": [["boolean", "String fldname"]]}, "className": "IndexSelectScan", "renamed": ["boolean", "function", "(", ")", "{", "boolean", "loc0", "=", "idx", ".", "next", "(", ")", ";", "if", "(", "loc0", ")", "{", "RID", "loc1", "=", "idx", ".", "getDataRid", "(", ")", ";", "ts", ".", "moveToRid", "(", "loc1", ")", ";", "}", "return", "loc0", ";", "}"], "nl": "Moves to the next record, which in this case means moving the index to the next record satisfying the selection constant, and returning false if there are no more such index records. If there is a next record, the method moves the  tablescan to the corresponding data record.", "nlToks": ["Moves", "to", "the", "next", "record", ",", "which", "in", "this", "case", "means", "moving", "the", "index", "to", "the", "next", "record", "satisfying", "the", "selection", "constant", ",", "and", "returning", "false", "if", "there", "are", "no", "more", "such", "index", "records", ".", "If", "there", "is", "a", "next", "record", ",", "the", "method", "moves", "the", "tablescan", "to", "the", "corresponding", "data", "record", "."], "path": "prerit2803/DBMSProject2/tree/master/simpledb/index/query/IndexSelectScan.java", "idx": 2748}
{"memberVariables": {"BLOCK_LENGTH=100L": "long", "TEST_FILENAME=\"test_filename.txt\"": "String", "mEOFBlockStream": "UnderStoreBlockInStream", "mFile": "File", "mBlockStream": "UnderStoreBlockInStream", "FILE_LENGTH=2 * BLOCK_LENGTH": "long", "mFolder=new TemporaryFolder()": "TemporaryFolder"}, "code": ["void", "function", "(", ")", "{", "seekInternal", "(", "mEOFBlockStream", ",", "(", "int", ")", "BLOCK_LENGTH", ")", ";", "}"], "memberFunctions": {"singleByteReadInternal": [["void", "UnderStoreBlockInStream inStream", "int startIndex"]], "skipEOF": [["void"]], "seekInternal": [["void", "UnderStoreBlockInStream inStream", "int startIndex"]], "before": [["void"]], "arrayReadInternal": [["void", "UnderStoreBlockInStream inStream", "int startIndex"]], "arrayFullRead": [["void"]], "skip": [["void"]], "seek": [["void"]], "singleByteReadEOF": [["void"]], "arrayFullReadEOF": [["void"]], "skipInternal": [["void", "UnderStoreBlockInStream inStream", "int startIndex"]], "arrayReadEOF": [["void"]], "arrayFullReadInternal": [["void", "UnderStoreBlockInStream inStream", "int startIndex"]], "create": [["InputStream"]], "after": [["void"]], "singleByteRead": [["void"]], "close": [["void"]], "arrayRead": [["void"]]}, "className": "UnderStoreBlockInStreamTest", "renamed": ["void", "function", "(", ")", "{", "seekInternal", "(", "mEOFBlockStream", ",", "(", "int", ")", "BLOCK_LENGTH", ")", ";", "}"], "nl": "Tests the  {@link UnderStoreBlockInStream#seek(long)} method for the last block of the file.", "nlToks": ["Tests", "the", "-LCB-", "@link", "UnderStoreBlockInStream", "#seek", "-LRB-", "long", "-RRB-", "-RCB-", "method", "for", "the", "last", "block", "of", "the", "file", "."], "path": "poemlin/alluxio/tree/master/core/client/src/test/java/alluxio/client/block/UnderStoreBlockInStreamTest.java", "idx": 2749}
{"memberVariables": {"instance": "Date", "cal": "GregorianCalendar"}, "code": ["void", "function", "(", ")", "{", "int", "month", "=", "0", ";", "try", "{", "instance", ".", "setMonth", "(", "month", ")", ";", "fail", "(", "\"Did not throw exception\"", ")", ";", "}", "catch", "(", "IllegalArgumentException", "e", ")", "{", "}", "month", "=", "32", ";", "try", "{", "instance", ".", "setMonth", "(", "month", ")", ";", "fail", "(", "\"Did not throw exception\"", ")", ";", "}", "catch", "(", "IllegalArgumentException", "e", ")", "{", "}", "}"], "memberFunctions": {"testConstructorWithString": [["void"]], "testSetMonth": [["void"]], "testSetYearThreeDigits": [["void"]], "testConstructor": [["void"]], "testToStringFourDigitYear": [["void"]], "testEqualsAfterInit": [["void"]], "testEqualsWrongType": [["void"]], "testSetYearTwoDigit": [["void"]], "testEqualsWhenChanged": [["void"]], "testToISO8601WithTime": [["void"]], "setUp": [["void"]], "testGetMonth": [["void"]], "testEqualsItself": [["void"]], "testSetYearNegative": [["void"]], "testConstructorWithValues": [["void"]], "testSetDayOutOfBounds": [["void"]], "testGetYear": [["void"]], "testToISO8601WithTimeAndZeroZone": [["void"]], "testToISO8601FourDigitYear": [["void"]], "testSetDay": [["void"]], "testSetYearFourDigit": [["void"]], "testToStringTwoDigitYear": [["void"]], "testToISO8601WithTimeAndPositiveOffset": [["void"]], "testToISO8601TwoDigitYear": [["void"]], "testSetYearFiveDigits": [["void"]], "testToISO8601WithTimeAndNegativeOffset": [["void"]], "testGetDay": [["void"]]}, "className": "DateTest", "renamed": ["void", "function", "(", ")", "{", "int", "loc0", "=", "0", ";", "try", "{", "instance", ".", "setMonth", "(", "loc0", ")", ";", "fail", "(", "\"srini_string\"", ")", ";", "}", "catch", "(", "IllegalArgumentException", "loc1", ")", "{", "}", "loc0", "=", "32", ";", "try", "{", "instance", ".", "setMonth", "(", "loc0", ")", ";", "fail", "(", "\"srini_string\"", ")", ";", "}", "catch", "(", "IllegalArgumentException", "loc1", ")", "{", "}", "}"], "nl": "Test method for  {@link net.sf.marineapi.nmea.util.Date#setMonth(int)}.", "nlToks": ["Test", "method", "for", "-LCB-", "@link", "net.sf.marineapi.nmea.util.Date", "#setMonth", "-LRB-", "int", "-RRB-", "-RCB-", "."], "path": "pkoziol/marine-api/tree/master/src/test/java/net/sf/marineapi/nmea/util/DateTest.java", "idx": 2750}
{"memberVariables": {"ITERATIONS=\"iterations\"": "String", "POPULATION_SIZE=\"populationSize\"": "String", "individualLength": "int", "mutationProbability": "double", "finiteAlphabet": "Character[]", "metrics=new Metrics()": "Metrics", "random=new Random()": "Random"}, "code": ["String", "function", "(", "Set", "<", "String", ">", "population", ",", "FitnessFunction", "fitnessFn", ",", "int", "iterations", ")", "{", "String", "bestIndividual", "=", "null", ";", "validatePopulation", "(", "population", ")", ";", "clearInstrumentation", "(", ")", ";", "setPopulationSize", "(", "population", ".", "size", "(", ")", ")", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "iterations", ";", "i", "++", ")", "{", "bestIndividual", "=", "ga", "(", "population", ",", "fitnessFn", ")", ";", "}", "setIterations", "(", "iterations", ")", ";", "return", "bestIndividual", ";", "}"], "memberFunctions": {"randomSelection": [["String", "Set<String> population", "FitnessFunction fitnessFn"]], "mutate": [["String", "String individual"]], "setIterations": [["void", "int cnt"]], "randomOffset": [["int", "int length"]], "retrieveBestIndividual": [["String", "Set<String> population", "FitnessFunction fitnessFn"]], "getMetrics": [["Metrics"]], "getPopulationSize": [["int"]], "reproduce": [["String", "String x", "String y"]], "setPopulationSize": [["void", "int size"]], "getIterations": [["int"]], "validatePopulation": [["void", "Set<String> population"]], "ga": [["String", "Set<String> population", "FitnessFunction fitnessFn"]], "clearInstrumentation": [["void"]]}, "className": "GeneticAlgorithm", "renamed": ["String", "function", "(", "Set", "<", "String", ">", "arg0", ",", "FitnessFunction", "arg1", ",", "int", "arg2", ")", "{", "String", "loc0", "=", "null", ";", "validatePopulation", "(", "arg0", ")", ";", "clearInstrumentation", "(", ")", ";", "setPopulationSize", "(", "arg0", ".", "size", "(", ")", ")", ";", "for", "(", "int", "loc1", "=", "0", ";", "loc1", "<", "arg2", ";", "loc1", "++", ")", "{", "loc0", "=", "ga", "(", "arg0", ",", "arg1", ")", ";", "}", "setIterations", "(", "arg2", ")", ";", "return", "loc0", ";", "}"], "nl": "Returns the best individual in the specified population, according to the specified FITNESS-FN and number of iterations.", "nlToks": ["Returns", "the", "best", "individual", "in", "the", "specified", "population", ",", "according", "to", "the", "specified", "FITNESS-FN", "and", "number", "of", "iterations", "."], "path": "peterplupo/ia201102/tree/master/trabalho1/aima-core/src/main/java/aima/core/search/local/GeneticAlgorithm.java", "idx": 2755}
{"memberVariables": {"rppaValue": "RPPA", "isMutated": "mutations", "gene": "String", "mutationType": "String", "caseId": "String", "cnaValue": "CNA", "geneticEventComparator=null": "GeneticEventComparator", "mrnaValue": "MRNA"}, "code": ["RPPA", "function", "(", ")", "{", "return", "rppaValue", ";", "}"], "memberFunctions": {"isMutated": [["boolean"]], "isRPPADownRegulated": [["boolean"]], "caseCaseId": [["String"]], "getMutationValue": [["mutations"]], "getMrnaValue": [["MRNA"]], "isCnaAmplified": [["boolean"]], "setGeneticEventComparator": [["void", "GeneticEventComparator geneticEventComparator"]], "getGene": [["String"]], "isCnaHeterozygousDeleted": [["boolean"]], "equals": [["boolean", "Object obj"]], "getCnaValue": [["CNA"]], "isMRNADownRegulated": [["boolean"]], "toString": [["String"]], "isRPPAUpRegulated": [["boolean"]], "getMutationType": [["String"]], "isCnaHomozygouslyDeleted": [["boolean"]], "isMRNAUpRegulated": [["boolean"]]}, "className": "GeneticEventImpl", "renamed": ["RPPA", "function", "(", ")", "{", "return", "rppaValue", ";", "}"], "nl": "Gets the RPPA Value.", "nlToks": ["Gets", "the", "RPPA", "Value", "."], "path": "adamabeshouse/cbioportal/tree/master/core/src/main/java/org/mskcc/cbio/portal/model/GeneticEventImpl.java", "idx": 2756}
{"memberVariables": {"OPEN=\"[\"": "String", "expression": "String", "PI=\"processing-instruction()\"": "String", "TEXT=\"text()\"": "String", "type": "short", "EMPTY=\"\"": "String", "uri2Prefix": "Map<String,String>", "attributes=new HashMap<QName,Level>()": "Map<QName,Level>", "path=new LinkedList<Level>()": "Deque<Level>", "SEP=\"/\"": "String", "COMMENT=\"comment()\"": "String", "xpath": "String", "ATTR=\"@\"": "String", "children=new ArrayList<Level>()": "List<Level>", "name": "QName", "CLOSE=\"]\"": "String"}, "code": ["void", "function", "(", "QName", "attribute", ")", "{", "path", ".", "addLast", "(", "path", ".", "getLast", "(", ")", ".", "attributes", ".", "get", "(", "attribute", ")", ")", ";", "}"], "memberFunctions": {"navigateToParent": [["void"]], "getName": [["String", "QName name"], ["QName"], ["QName"]], "appendChildren": [["void", "Iterable<? extends NodeInfo> children"]], "invert": [["Map<String,String>", "Map<String,String> m"]], "addAttribute": [["void", "QName attribute"]], "getType": [["short"], ["short"]], "addAttributes": [["void", "Iterable<? extends QName> attributes"]], "clone": [["XPathContext"], ["Level"]], "add1OrIncrement": [["int", "String name", "Map<String,Integer> map"]], "getXPath": [["String"], ["String", "Iterator<Level> dIterator"]], "navigateToChild": [["void", "int index"]], "setChildren": [["void", "Iterable<? extends NodeInfo> children"]]}, "className": "XPathContext", "renamed": ["void", "function", "(", "QName", "arg0", ")", "{", "path", ".", "addLast", "(", "path", ".", "getLast", "(", ")", ".", "attributes", ".", "get", "(", "arg0", ")", ")", ";", "}"], "nl": "Moves from the current node to the given attribute.", "nlToks": ["Moves", "from", "the", "current", "node", "to", "the", "given", "attribute", "."], "path": "phbenisc/xmlunit/tree/master/xmlunit-core/src/main/java/org/xmlunit/diff/XPathContext.java", "idx": 2758}
{"memberVariables": {"encryptionProperties": "EncryptionProperties", "endpointPatterns=new ArrayList<>()": "Collection<Pattern>", "LOG=LogUtils.getL7dLogger(StaticService.class)": "Logger", "tokenType": "String", "keyType": "String"}, "code": ["EncryptionProperties", "function", "(", ")", "{", "return", "encryptionProperties", ";", "}"], "memberFunctions": {"isAddressInEndpoints": [["boolean", "String address"]], "getTokenType": [["String"]], "setTokenType": [["void", "String tokenType"]], "getKeyType": [["String"]], "setEndpoints": [["void", "List<String> endpoints"]], "setKeyType": [["void", "String keyType"]], "setEncryptionProperties": [["void", "EncryptionProperties encryptionProperties"]]}, "className": "StaticService", "renamed": ["EncryptionProperties", "function", "(", ")", "{", "return", "encryptionProperties", ";", "}"], "nl": "Get the EncryptionProperties to be used to encrypt tokens issued for this service", "nlToks": ["Get", "the", "EncryptionProperties", "to", "be", "used", "to", "encrypt", "tokens", "issued", "for", "this", "service"], "path": "primesign/cxf/tree/master/services/sts/sts-core/src/main/java/org/apache/cxf/sts/service/StaticService.java", "idx": 2759}
{"memberVariables": {"appTestAccounts": "Map<String,JSONObject>", "testApplicationId": "String", "LOG_TAG=\"TestUserManager\"": "String", "testApplicationSecret": "String"}, "code": ["AccessToken", "function", "(", "List", "<", "String", ">", "permissions", ",", "String", "uniqueUserTag", ")", "{", "return", "getAccessTokenForUser", "(", "permissions", ",", "Mode", ".", "SHARED", ",", "uniqueUserTag", ")", ";", "}"], "memberFunctions": {"getTestApplicationId": [["String"]], "getTestApplicationSecret": [["String"]], "getAppAccessToken": [["String"]], "getAccessTokenForPrivateUser": [["AccessToken", "List<String> permissions"]], "getAccessTokenForUser": [["AccessToken", "List<String> permissions", "Mode mode", "String uniqueUserTag"]], "getSharedTestAccountIdentifier": [["String", "List<String> permissions", "String uniqueUserTag"]], "getPermissionsString": [["String", "List<String> permissions"]], "validNameStringFromInteger": [["String", "long i"]], "createTestAccount": [["JSONObject", "List<String> permissions", "Mode mode", "String uniqueUserTag"]], "storeTestAccount": [["void", "JSONObject testAccount"]], "retrieveTestAccountsForAppIfNeeded": [["void"]], "populateTestAccounts": [["void", "JSONArray testAccounts", "JSONObject userAccountsMap"]], "findOrCreateSharedTestAccount": [["JSONObject", "List<String> permissions", "Mode mode", "String uniqueUserTag"]], "findTestAccountMatchingIdentifier": [["JSONObject", "String identifier"]]}, "className": "TestUserManager", "renamed": ["AccessToken", "function", "(", "List", "<", "String", ">", "arg0", ",", "String", "arg1", ")", "{", "return", "getAccessTokenForUser", "(", "arg0", ",", "Mode", ".", "SHARED", ",", "arg1", ")", ";", "}"], "nl": "Gets the access token of the shared test user with the tag for the application with the requested permissions.", "nlToks": ["Gets", "the", "access", "token", "of", "the", "shared", "test", "user", "with", "the", "tag", "for", "the", "application", "with", "the", "requested", "permissions", "."], "path": "adament67/testproject/tree/master/Android Projects/studio/EstiloRobe/facebook/src/main/java/com/facebook/TestUserManager.java", "idx": 2761}
{"memberVariables": {"logger=Logger.getLogger(Closeables.class.getName())": "Logger"}, "code": ["void", "function", "(", "@", "Nullable", "Closeable", "closeable", ",", "boolean", "swallowIOException", ")", "{", "if", "(", "closeable", "==", "null", ")", "{", "return", ";", "}", "try", "{", "closeable", ".", "close", "(", ")", ";", "}", "catch", "(", "IOException", "e", ")", "{", "if", "(", "swallowIOException", ")", "{", "logger", ".", "log", "(", "Level", ".", "WARNING", ",", "\"IOException thrown while closing Closeable.\"", ",", "e", ")", ";", "}", "else", "{", "throw", "e", ";", "}", "}", "}"], "memberFunctions": {"closeQuietly": [["void", "@Nullable InputStream inputStream"], ["void", "@Nullable Reader reader"]]}, "className": "Closeables", "renamed": ["void", "function", "(", "@", "Nullable", "Closeable", "arg0", ",", "boolean", "arg1", ")", "{", "if", "(", "arg0", "==", "null", ")", "{", "return", ";", "}", "try", "{", "arg0", ".", "close", "(", ")", ";", "}", "catch", "(", "IOException", "loc0", ")", "{", "if", "(", "arg1", ")", "{", "logger", ".", "log", "(", "Level", ".", "WARNING", ",", "\"srini_string\"", ",", "loc0", ")", ";", "}", "else", "{", "throw", "loc0", ";", "}", "}", "}"], "nl": "Closes a  {@link Closeable}, with control over whether an  {@code IOException} may be thrown.This is primarily useful in a finally block, where a thrown exception needs to be logged but not propagated (otherwise the original exception will be lost). If  {@code swallowIOException} is true then we never throw {@code IOException} but merely logit. Example:     {@code}public void useStreamNicely() throws IOException  SomeStream stream = new SomeStream(\"foo\"); boolean threw = true; try { // ... code which does something with the stream ... threw = false; } finally { // If an exception occurs, rethrow it only if threw==false: Closeables.close(stream, threw); } }}", "nlToks": ["Closes", "a", "-LCB-", "@link", "Closeable", "-RCB-", ",", "with", "control", "over", "whether", "an", "-LCB-", "@code", "IOException", "-RCB-", "may", "be", "thrown.This", "is", "primarily", "useful", "in", "a", "finally", "block", ",", "where", "a", "thrown", "exception", "needs", "to", "be", "logged", "but", "not", "propagated", "-LRB-", "otherwise", "the", "original", "exception", "will", "be", "lost", "-RRB-", ".", "If", "-LCB-", "@code", "swallowIOException", "-RCB-", "is", "true", "then", "we", "never", "throw", "-LCB-", "@code", "IOException", "-RCB-", "but", "merely", "logit", ".", "Example", ":", "-LCB-", "@code", "-RCB-", "public", "void", "useStreamNicely", "-LRB-", "-RRB-", "throws", "IOException", "SomeStream", "stream", "=", "new", "SomeStream", "-LRB-", "``", "foo", "''", "-RRB-", ";", "boolean", "threw", "=", "true", ";", "try", "-LCB-", "/", "/", "...", "code", "which", "does", "something", "with", "the", "stream", "...", "threw", "=", "false", ";", "-RCB-", "finally", "-LCB-", "/", "/", "If", "an", "exception", "occurs", ",", "rethrow", "it", "only", "if", "threw", "==", "false", ":", "Closeables.close", "-LRB-", "stream", ",", "threw", "-RRB-", ";", "-RCB-", "-RCB-", "-RCB-"], "path": "hazendaz/guava/tree/master/guava/src/com/google/common/io/Closeables.java", "idx": 2763}
{"memberVariables": {"properties=new Properties()": "Properties", "logger=LoggerFactory.getLogger(PropertiesLoader.class)": "Logger"}, "code": ["void", "function", "(", "final", "String", "key", ",", "final", "String", "value", ")", "{", "properties", ".", "setProperty", "(", "key", ",", "value", ")", ";", "}"], "memberFunctions": {"getProperty": [["String", "final String key"]]}, "className": "PropertiesLoader", "renamed": ["void", "function", "(", "final", "String", "arg0", ",", "final", "String", "arg1", ")", "{", "properties", ".", "setProperty", "(", "arg0", ",", "arg1", ")", ";", "}"], "nl": "Setter for a property. If the property already exists, the value will be overridden. Hint: This method is intended as an alternative way to set properties programmatically instead of using the fckeditor.properties. It should never used inside FCKeditor.Java!!!", "nlToks": ["Setter", "for", "a", "property", ".", "If", "the", "property", "already", "exists", ",", "the", "value", "will", "be", "overridden", ".", "Hint", ":", "This", "method", "is", "intended", "as", "an", "alternative", "way", "to", "set", "properties", "programmatically", "instead", "of", "using", "the", "fckeditor.properties", ".", "It", "should", "never", "used", "inside", "FCKeditor.Java", "!!!"], "path": "pobing/company/tree/master/maxcomy/src/net/fckeditor/handlers/PropertiesLoader.java", "idx": 2764}
{"memberVariables": {"_language": "String", "_link": "String", "_rss_link": "String", "_title": "String", "_image": "String", "_items": "List<RSSItem>", "_description": "String"}, "code": ["List", "<", "RSSItem", ">", "function", "(", ")", "{", "return", "this", ".", "_items", ";", "}"], "memberFunctions": {"set_image": [["void", "String _image"]], "getLink": [["String"]], "getLanguage": [["String"]], "getTitle": [["String"]], "setItems": [["void", "List<RSSItem> items"]], "get_image": [["String"]], "getDescription": [["String"]], "getRSSLink": [["String"]]}, "className": "RSSFeed", "renamed": ["List", "<", "RSSItem", ">", "function", "(", ")", "{", "return", "this", ".", "_items", ";", "}"], "nl": "All get methods", "nlToks": ["All", "get", "methods"], "path": "adament67/testproject/tree/master/Android Projects/studio/EstiloRobe/estiloRobe/src/main/java/com/stylist/rssfeed/RSSFeed.java", "idx": 2765}
{"memberVariables": {"limit": "int", "count": "int", "invMap": "Map<Item,Integer>"}, "code": ["void", "function", "(", "Item", "item", ",", "int", "quantity", ")", "{", "if", "(", "!", "this", ".", "isFull", "(", ")", ")", "{", "quantity", "=", "Math", ".", "min", "(", "quantity", ",", "limit", "-", "count", ")", ";", "count", "+=", "quantity", ";", "if", "(", "invMap", ".", "containsKey", "(", "item", ")", ")", "{", "int", "currentQty", "=", "invMap", ".", "get", "(", "item", ")", ";", "quantity", "+=", "currentQty", ";", "}", "invMap", ".", "put", "(", "item", ",", "quantity", ")", ";", "}", "}"], "memberFunctions": {"printInventory": [["void"]], "getItemStacks": [["ItemStack[]"]], "dumpAll": [["void"]], "isFull": [["boolean"]]}, "className": "MobInventory", "renamed": ["void", "function", "(", "Item", "arg0", ",", "int", "arg1", ")", "{", "if", "(", "!", "this", ".", "isFull", "(", ")", ")", "{", "arg1", "=", "Math", ".", "min", "(", "arg1", ",", "limit", "-", "count", ")", ";", "count", "+=", "arg1", ";", "if", "(", "invMap", ".", "containsKey", "(", "arg0", ")", ")", "{", "int", "loc0", "=", "invMap", ".", "get", "(", "arg0", ")", ";", "arg1", "+=", "loc0", ";", "}", "invMap", ".", "put", "(", "arg0", ",", "arg1", ")", ";", "}", "}"], "nl": "Adds an item stack into the inventory", "nlToks": ["Adds", "an", "item", "stack", "into", "the", "inventory"], "path": "pregnantboy/fyp/tree/master/forge/src/main/java/fuzzyMod/inventory/MobInventory.java", "idx": 2767}
{"memberVariables": {"instance": "Date", "cal": "GregorianCalendar"}, "code": ["void", "function", "(", ")", "{", "assertEquals", "(", "cal", ".", "get", "(", "Calendar", ".", "YEAR", ")", ",", "instance", ".", "getYear", "(", ")", ")", ";", "assertEquals", "(", "cal", ".", "get", "(", "Calendar", ".", "MONTH", ")", "+", "1", ",", "instance", ".", "getMonth", "(", ")", ")", ";", "assertEquals", "(", "cal", ".", "get", "(", "Calendar", ".", "DAY_OF_MONTH", ")", ",", "instance", ".", "getDay", "(", ")", ")", ";", "}"], "memberFunctions": {"testConstructorWithString": [["void"]], "testSetMonth": [["void"]], "testSetYearThreeDigits": [["void"]], "testToStringFourDigitYear": [["void"]], "testEqualsAfterInit": [["void"]], "testEqualsWrongType": [["void"]], "testSetYearTwoDigit": [["void"]], "testEqualsWhenChanged": [["void"]], "testToISO8601WithTime": [["void"]], "setUp": [["void"]], "testGetMonth": [["void"]], "testEqualsItself": [["void"]], "testSetYearNegative": [["void"]], "testConstructorWithValues": [["void"]], "testSetDayOutOfBounds": [["void"]], "testGetYear": [["void"]], "testToISO8601WithTimeAndZeroZone": [["void"]], "testToISO8601FourDigitYear": [["void"]], "testSetDay": [["void"]], "testSetYearFourDigit": [["void"]], "testToStringTwoDigitYear": [["void"]], "testToISO8601WithTimeAndPositiveOffset": [["void"]], "testToISO8601TwoDigitYear": [["void"]], "testSetYearFiveDigits": [["void"]], "testToISO8601WithTimeAndNegativeOffset": [["void"]], "testGetDay": [["void"]], "testSetMonthOutOfBounds": [["void"]]}, "className": "DateTest", "renamed": ["void", "function", "(", ")", "{", "assertEquals", "(", "cal", ".", "get", "(", "Calendar", ".", "YEAR", ")", ",", "instance", ".", "getYear", "(", ")", ")", ";", "assertEquals", "(", "cal", ".", "get", "(", "Calendar", ".", "MONTH", ")", "+", "1", ",", "instance", ".", "getMonth", "(", ")", ")", ";", "assertEquals", "(", "cal", ".", "get", "(", "Calendar", ".", "DAY_OF_MONTH", ")", ",", "instance", ".", "getDay", "(", ")", ")", ";", "}"], "nl": "Test method for  {@link net.sf.marineapi.nmea.util.Date#Date()}.", "nlToks": ["Test", "method", "for", "-LCB-", "@link", "net.sf.marineapi.nmea.util.Date", "#Date", "-LRB-", "-RRB-", "-RCB-", "."], "path": "pkoziol/marine-api/tree/master/src/test/java/net/sf/marineapi/nmea/util/DateTest.java", "idx": 2771}
{"memberVariables": {"real_next": "int", "vstack": "Stack<Integer>", "real_stack": "Stack<Symbol>"}, "code": ["int", "function", "(", ")", "{", "if", "(", "vstack", ".", "empty", "(", ")", ")", "throw", "new", "Exception", "(", "\"Internal parser error: top() called on empty virtual stack\"", ")", ";", "return", "vstack", ".", "peek", "(", ")", ".", "intValue", "(", ")", ";", "}"], "memberFunctions": {"pop": [["void"]], "get_from_real": [["void"]], "push": [["void", "int state_num"]], "empty": [["boolean"]]}, "className": "virtual_parse_stack", "renamed": ["int", "function", "(", ")", "{", "if", "(", "vstack", ".", "empty", "(", ")", ")", "throw", "new", "Exception", "(", "\"srini_string\"", ")", ";", "return", "vstack", ".", "peek", "(", ")", ".", "intValue", "(", ")", ";", "}"], "nl": "Return value on the top of the stack (without popping it).", "nlToks": ["Return", "value", "on", "the", "top", "of", "the", "stack", "-LRB-", "without", "popping", "it", "-RRB-", "."], "path": "polyglot-compiler/polyglot/tree/master/tools/java_cup/src/java_cup/runtime/virtual_parse_stack.java", "idx": 2772}
{"memberVariables": {"RADIX=16": "int", "ESCAPE_CHAR='%'": "byte", "PLUS_CHAR='+'": "byte"}, "code": ["String", "function", "(", "String", "baseURI", ")", "{", "int", "idx", "=", "baseURI", ".", "lastIndexOf", "(", "'/'", ")", ";", "String", "result", "=", "baseURI", ";", "if", "(", "idx", "!=", "-", "1", ")", "{", "result", "=", "baseURI", ".", "substring", "(", "0", ",", "idx", ")", ";", "}", "return", "result", ";", "}"], "memberFunctions": {"pathDecode": [["String", "String value"]], "urlDecode": [["String", "String value", "String enc"], ["String", "String value", "String enc", "boolean isPath"], ["String", "String value"]], "digit16": [["int", "final byte b"]], "urlEncode": [["String", "String value"], ["String", "String value", "String enc"]], "parseQueryString": [["Map<String,String>", "String s"]]}, "className": "UrlUtils", "renamed": ["String", "function", "(", "String", "arg0", ")", "{", "int", "loc0", "=", "arg0", ".", "lastIndexOf", "(", "'/'", ")", ";", "String", "loc1", "=", "arg0", ";", "if", "(", "loc0", "!=", "-", "1", ")", "{", "loc1", "=", "arg0", ".", "substring", "(", "0", ",", "loc0", ")", ";", "}", "return", "loc1", ";", "}"], "nl": "Return everything in the path up to the last slash in a URI.", "nlToks": ["Return", "everything", "in", "the", "path", "up", "to", "the", "last", "slash", "in", "a", "URI", "."], "path": "primesign/cxf/tree/master/core/src/main/java/org/apache/cxf/common/util/UrlUtils.java", "idx": 2776}
{"memberVariables": {}, "code": ["void", "function", "(", ")", "{", "SetAttributeOptions", "options", "=", "SetAttributeOptions", ".", "defaults", "(", ")", ";", "Assert", ".", "assertNull", "(", "options", ".", "getPinned", "(", ")", ")", ";", "Assert", ".", "assertNull", "(", "options", ".", "getTtl", "(", ")", ")", ";", "Assert", ".", "assertNull", "(", "options", ".", "getPersisted", "(", ")", ")", ";", "}"], "memberFunctions": {"setOwnerToEmptyShouldFail": [["void"]], "fields": [["void"]], "setGroupToEmptyShouldFail": [["void"]], "equalsTest": [["void"]]}, "className": "SetAttributeOptionsTest", "renamed": ["void", "function", "(", ")", "{", "SetAttributeOptions", "loc0", "=", "SetAttributeOptions", ".", "defaults", "(", ")", ";", "Assert", ".", "assertNull", "(", "loc0", ".", "getPinned", "(", ")", ")", ";", "Assert", ".", "assertNull", "(", "loc0", ".", "getTtl", "(", ")", ")", ";", "Assert", ".", "assertNull", "(", "loc0", ".", "getPersisted", "(", ")", ")", ";", "}"], "nl": "Tests the  {@link SetAttributeOptions#defaults()} method.", "nlToks": ["Tests", "the", "-LCB-", "@link", "SetAttributeOptions", "#defaults", "-LRB-", "-RRB-", "-RCB-", "method", "."], "path": "poemlin/alluxio/tree/master/core/server/src/test/java/alluxio/master/file/options/SetAttributeOptionsTest.java", "idx": 2777}
{"memberVariables": {"i": "int", "ZERO=new ChildNumber(0)": "ChildNumber", "ONE=new ChildNumber(1)": "ChildNumber", "ZERO_HARDENED=new ChildNumber(0,true)": "ChildNumber", "HARDENED_BIT=0x80000000": "int"}, "code": ["int", "function", "(", ")", "{", "return", "i", ";", "}"], "memberFunctions": {"hashCode": [["int"]], "num": [["int"]], "equals": [["boolean", "Object o"]], "i": [["int"]], "hasHardenedBit": [["boolean", "int a"]], "isHardened": [["boolean"]], "toString": [["String"]]}, "className": "ChildNumber", "renamed": ["int", "function", "(", ")", "{", "return", "i", ";", "}"], "nl": "Returns the uint32 encoded form of the path element, including the most significant bit.", "nlToks": ["Returns", "the", "uint32", "encoded", "form", "of", "the", "path", "element", ",", "including", "the", "most", "significant", "bit", "."], "path": "1000000000001/bitcoinj/tree/master/core/src/main/java/org/bitcoinj/crypto/ChildNumber.java", "idx": 2779}
{"memberVariables": {"produceMediaTypes": "List<String>", "bus": "Bus", "consumeMediaTypes": "List<String>", "enableStreaming": "boolean", "BUNDLE=BundleUtils.getBundle(AbstractJAXBProvider.class)": "ResourceBundle", "enableBuffering": "boolean", "LOG=LogUtils.getL7dLogger(AbstractJAXBProvider.class)": "Logger"}, "code": ["void", "function", "(", "List", "<", "String", ">", "types", ")", "{", "produceMediaTypes", "=", "types", ";", "}"], "memberFunctions": {"init": [["void", "List<ClassResourceInfo> resources"]], "getBus": [["Bus"]], "setConsumeMediaTypes": [["void", "List<String> types"]], "setEnableBuffering": [["void", "boolean enableBuf"]], "getEnableStreaming": [["boolean"]], "getProduceMediaTypes": [["List<String>"]], "setEnableStreaming": [["void", "boolean enableStream"]], "setBus": [["void", "Bus b"]], "getConsumeMediaTypes": [["List<String>"]], "getEnableBuffering": [["boolean"]], "isPayloadEmpty": [["boolean", "HttpHeaders headers"], ["boolean", "MultivaluedMap<String,String> headers"]], "reportEmptyContentLength": [["void"]]}, "className": "AbstractConfigurableProvider", "renamed": ["void", "function", "(", "List", "<", "String", ">", "arg0", ")", "{", "produceMediaTypes", "=", "arg0", ";", "}"], "nl": "Sets custom Produces media types; can be used to override static {@link Produces} annotation value set on the provider.", "nlToks": ["Sets", "custom", "Produces", "media", "types", ";", "can", "be", "used", "to", "override", "static", "-LCB-", "@link", "Produces", "-RCB-", "annotation", "value", "set", "on", "the", "provider", "."], "path": "primesign/cxf/tree/master/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/provider/AbstractConfigurableProvider.java", "idx": 2781}
{"memberVariables": {"rawParameters": "String", "hasArgs": "boolean", "params": "HashMap<String,String>", "command": "String", "rawCommand": "String"}, "code": ["boolean", "function", "(", ")", "{", "return", "!", "rawCommand", ".", "isEmpty", "(", ")", ";", "}"], "memberFunctions": {"getExternalArgs": [["String[]"]], "getLong": [["long", "String param"]], "getInt": [["int", "String param"]], "hasArguments": [["boolean"]], "isSet": [["boolean", "String key"]], "getCommand": [["String"]], "getExternalCommand": [["String[]", "String absolutePath"]], "toString": [["String"]], "getString": [["String", "String param"]], "parameters": [["String"]], "getBool": [["boolean", "String param"]], "parseCommand": [["void"]]}, "className": "PoseidonCommand", "renamed": ["boolean", "function", "(", ")", "{", "return", "!", "rawCommand", ".", "isEmpty", "(", ")", ";", "}"], "nl": "Checks if this is a valid command or not. Mainly if its just an empty string", "nlToks": ["Checks", "if", "this", "is", "a", "valid", "command", "or", "not", ".", "Mainly", "if", "its", "just", "an", "empty", "string"], "path": "porkkana/msfgui/tree/master/src/msfgui/emulator/console/PoseidonCommand.java", "idx": 2782}
{"memberVariables": {"mManager": "TransferManager", "BUCKET_PREFIX=\"prefix\"": "String", "mClient": "AmazonS3Client", "DST=\"dst\"": "String", "mS3UnderFileSystem": "S3AUnderFileSystem", "SRC=\"src\"": "String", "ACCOUNT_OWNER=\"account owner\"": "String", "PATH=\"path\"": "String", "BUCKET_NAME=\"bucket\"": "String", "BUCKET_MODE=0": "short"}, "code": ["void", "function", "(", ")", "{", "Mockito", ".", "when", "(", "mClient", ".", "listObjectsV2", "(", "Matchers", ".", "any", "(", "ListObjectsV2Request", ".", "class", ")", ")", ")", ".", "thenThrow", "(", "AmazonClientException", ".", "class", ")", ";", "boolean", "result", "=", "mS3UnderFileSystem", ".", "delete", "(", "PATH", ",", "true", ")", ";", "Assert", ".", "assertFalse", "(", "result", ")", ";", "}"], "memberFunctions": {"renameOnAmazonClientException": [["void"]], "before": [["void"]], "deleteNonRecursiveOnAmazonClientException": [["void"]]}, "className": "S3AUnderFileSystemTest", "renamed": ["void", "function", "(", ")", "{", "Mockito", ".", "when", "(", "mClient", ".", "listObjectsV2", "(", "Matchers", ".", "any", "(", "ListObjectsV2Request", ".", "class", ")", ")", ")", ".", "thenThrow", "(", "AmazonClientException", ".", "class", ")", ";", "boolean", "loc0", "=", "mS3UnderFileSystem", ".", "delete", "(", "PATH", ",", "true", ")", ";", "Assert", ".", "assertFalse", "(", "loc0", ")", ";", "}"], "nl": "Test case for  {@link S3AUnderFileSystem#delete(String,boolean)}.", "nlToks": ["Test", "case", "for", "-LCB-", "@link", "S3AUnderFileSystem", "#delete", "-LRB-", "String", ",", "boolean", "-RRB-", "-RCB-", "."], "path": "poemlin/alluxio/tree/master/underfs/s3a/src/test/java/alluxio/underfs/s3a/S3AUnderFileSystemTest.java", "idx": 2783}
{"memberVariables": {"MAX_FRAME_WIDTH=1200": "int", "TAG=CameraManager.class.getSimpleName()": "String", "requestedFramingRectHeight": "int", "autoFocusManager": "AutoFocusManager", "requestedCameraId=OpenCameraInterface.NO_REQUESTED_CAMERA": "int", "MAX_FRAME_HEIGHT=675": "int", "configManager": "CameraConfigurationManager", "previewCallback": "PreviewCallback", "framingRectInPreview": "Rect", "MIN_FRAME_HEIGHT=240": "int", "context": "Context", "framingRect": "Rect", "initialized": "boolean", "requestedFramingRectWidth": "int", "camera": "OpenCamera", "previewing": "boolean", "MIN_FRAME_WIDTH=240": "int"}, "code": ["void", "function", "(", "int", "cameraId", ")", "{", "requestedCameraId", "=", "cameraId", ";", "}"], "memberFunctions": {"requestPreviewFrame": [["void", "Handler handler", "int message"]], "stopPreview": [["void"]], "startPreview": [["void"]], "isOpen": [["boolean"]], "getFramingRect": [["Rect"]], "setManualFramingRect": [["void", "int width", "int height"]], "findDesiredDimensionInRange": [["int", "int resolution", "int hardMin", "int hardMax"]], "buildLuminanceSource": [["PlanarYUVLuminanceSource", "byte[] data", "int width", "int height"]], "closeDriver": [["void"]], "setTorch": [["void", "boolean newSetting"]], "openDriver": [["void", "SurfaceHolder holder"]], "getFramingRectInPreview": [["Rect"]]}, "className": "CameraManager", "renamed": ["void", "function", "(", "int", "arg0", ")", "{", "requestedCameraId", "=", "arg0", ";", "}"], "nl": "Allows third party apps to specify the camera ID, rather than determine it automatically based on available cameras and their orientation.", "nlToks": ["Allows", "third", "party", "apps", "to", "specify", "the", "camera", "ID", ",", "rather", "than", "determine", "it", "automatically", "based", "on", "available", "cameras", "and", "their", "orientation", "."], "path": "ponsonio/zxing/tree/master/android/src/com/google/zxing/client/android/camera/CameraManager.java", "idx": 2785}
{"memberVariables": {"sCleanerCleanMethod": "Method", "sByteBufferCleanerMethod": "Method", "LOG=LoggerFactory.getLogger(Constants.LOGGER_TYPE)": "Logger"}, "code": ["List", "<", "ByteBuffer", ">", "function", "(", "List", "<", "ByteBuffer", ">", "source", ")", "{", "List", "<", "ByteBuffer", ">", "ret", "=", "new", "ArrayList", "<", ">", "(", "source", ".", "size", "(", ")", ")", ";", "for", "(", "ByteBuffer", "b", ":", "source", ")", "{", "ret", ".", "add", "(", "cloneByteBuffer", "(", "b", ")", ")", ";", "}", "return", "ret", ";", "}"], "memberFunctions": {"equalConstantByteArray": [["boolean", "byte value", "int len", "byte[] arr"]], "getIncreasingByteBuffer": [["ByteBuffer", "int len"], ["ByteBuffer", "int start", "int len"]], "fastCopy": [["void", "final ReadableByteChannel src", "final WritableByteChannel dest"]], "cleanDirectBuffer": [["void", "ByteBuffer buffer"]], "sliceByteBuffer": [["ByteBuffer", "ByteBuffer buffer", "int position", "int length"], ["ByteBuffer", "ByteBuffer buffer", "int position"]], "byteToInt": [["int", "byte b"]], "equalIncreasingByteArray": [["boolean", "int len", "byte[] arr"], ["boolean", "int start", "int len", "byte[] arr"]], "equalIncreasingByteBuffer": [["boolean", "int start", "int len", "ByteBuffer buf"]], "getIncreasingByteArray": [["byte[]", "int len"], ["byte[]", "int start", "int len"]], "writeBufferToFile": [["void", "String path", "byte[] buffer"]], "cloneByteBuffer": [["ByteBuffer", "ByteBuffer buf"]], "newByteArrayFromByteBuffer": [["byte[]", "ByteBuffer buf"]], "putIntByteBuffer": [["void", "ByteBuffer buf", "int b"]], "generateNewByteBufferFromThriftRPCResults": [["ByteBuffer", "ByteBuffer data"]], "getIncreasingIntBuffer": [["ByteBuffer", "int len"], ["ByteBuffer", "int start", "int len"]]}, "className": "BufferUtils", "renamed": ["List", "<", "ByteBuffer", ">", "function", "(", "List", "<", "ByteBuffer", ">", "arg0", ")", "{", "List", "<", "ByteBuffer", ">", "loc0", "=", "new", "ArrayList", "<", ">", "(", "arg0", ".", "size", "(", ")", ")", ";", "for", "(", "ByteBuffer", "loc1", ":", "arg0", ")", "{", "loc0", ".", "add", "(", "cloneByteBuffer", "(", "loc1", ")", ")", ";", "}", "return", "loc0", ";", "}"], "nl": "Clones a list of  {@link ByteBuffer}s.", "nlToks": ["Clones", "a", "list", "of", "-LCB-", "@link", "ByteBuffer", "-RCB-", "s."], "path": "poemlin/alluxio/tree/master/core/common/src/main/java/alluxio/util/io/BufferUtils.java", "idx": 2786}
{"memberVariables": {"actionType": "ActionType", "data": "String", "suggestions": "ArrayList<String>", "to": "String", "filters": "Filters", "CREATOR=new Creator<GameRequestContent>(){\n  public GameRequestContent createFromParcel(  final Parcel in){\n    return new GameRequestContent(in);\n  }\n  public GameRequestContent[] newArray(  final int size){\n    return new GameRequestContent[size];\n  }\n}\n": "Creator<GameRequestContent>", "message": "String", "title": "String", "objectId": "String"}, "code": ["String", "function", "(", ")", "{", "return", "title", ";", "}"], "memberFunctions": {"getActionType": [["ActionType"]], "readFrom": [["Builder", "final GameRequestContent content"], ["Builder", "final Parcel parcel"]], "setData": [["Builder", "final String data"]], "getMessage": [["String"]], "newArray": [["GameRequestContent[]", "final int size"]], "setTitle": [["Builder", "final String title"]], "getTo": [["String"]], "createFromParcel": [["GameRequestContent", "final Parcel in"]], "setObjectId": [["Builder", "String objectId"]], "setMessage": [["Builder", "final String message"]], "describeContents": [["int"]], "getObjectId": [["String"]], "getSuggestions": [["ArrayList<String>"]], "setActionType": [["Builder", "ActionType actionType"]], "build": [["GameRequestContent"]], "setFilters": [["Builder", "Filters filters"]], "getFilters": [["Filters"]], "setTo": [["Builder", "final String to"]], "setSuggestions": [["Builder", "ArrayList<String> suggestions"]], "writeToParcel": [["void", "final Parcel out", "final int flags"]], "getData": [["String"]]}, "className": "GameRequestContent", "renamed": ["String", "function", "(", ")", "{", "return", "title", ";", "}"], "nl": "Gets the optional title for the dialog", "nlToks": ["Gets", "the", "optional", "title", "for", "the", "dialog"], "path": "adament67/testproject/tree/master/Android Projects/studio/EstiloRobe/facebook/src/main/java/com/facebook/share/model/GameRequestContent.java", "idx": 2787}
{"memberVariables": {"vertexLabels": "List<VertexLabelType>", "globalEdgeLookup": "Hashtable<VertexLabelType,Hashtable<VertexLabelType,EdgeLabelType>>"}, "code": ["void", "function", "(", "VertexLabelType", "from", ",", "VertexLabelType", "to", ",", "EdgeLabelType", "el", ")", "{", "Hashtable", "<", "VertexLabelType", ",", "EdgeLabelType", ">", "localEdgeLookup", "=", "checkForNewVertex", "(", "from", ")", ";", "localEdgeLookup", ".", "put", "(", "to", ",", "el", ")", ";", "checkForNewVertex", "(", "to", ")", ";", "}"], "memberFunctions": {"getVertexLabels": [["List<VertexLabelType>"]], "getSuccessors": [["List<VertexLabelType>", "VertexLabelType v"]], "get": [["EdgeLabelType", "VertexLabelType from", "VertexLabelType to"]], "isVertexLabel": [["boolean", "VertexLabelType v"]], "clear": [["void"]], "checkForNewVertex": [["Hashtable<VertexLabelType,EdgeLabelType>", "VertexLabelType v"]], "addVertex": [["void", "VertexLabelType v"]], "remove": [["void", "VertexLabelType from", "VertexLabelType to"]]}, "className": "LabeledGraph", "renamed": ["void", "function", "(", "VertexLabelType", "arg0", ",", "VertexLabelType", "arg1", ",", "EdgeLabelType", "arg2", ")", "{", "Hashtable", "<", "VertexLabelType", ",", "EdgeLabelType", ">", "loc0", "=", "checkForNewVertex", "(", "arg0", ")", ";", "loc0", ".", "put", "(", "arg1", ",", "arg2", ")", ";", "checkForNewVertex", "(", "arg1", ")", ";", "}"], "nl": "Adds a directed labeled edge to the graph. The end points of the edge are specified by vertex labels. New vertices are automatically identified and added to the graph.", "nlToks": ["Adds", "a", "directed", "labeled", "edge", "to", "the", "graph", ".", "The", "end", "points", "of", "the", "edge", "are", "specified", "by", "vertex", "labels", ".", "New", "vertices", "are", "automatically", "identified", "and", "added", "to", "the", "graph", "."], "path": "peterplupo/ia201102/tree/master/trabalho1/aima-core/src/main/java/aima/core/util/datastructure/LabeledGraph.java", "idx": 2790}
{"memberVariables": {}, "code": ["WritableMap", "function", "(", "@", "Nullable", "String", "key", ",", "String", "errorMessage", ")", "{", "WritableMap", "errorMap", "=", "Arguments", ".", "createMap", "(", ")", ";", "errorMap", ".", "putString", "(", "\"message\"", ",", "errorMessage", ")", ";", "if", "(", "key", "!=", "null", ")", "{", "errorMap", ".", "putString", "(", "\"key\"", ",", "key", ")", ";", "}", "return", "errorMap", ";", "}"], "memberFunctions": {"getInvalidValueError": [["WritableMap", "@Nullable String key"]], "getDBError": [["WritableMap", "@Nullable String key"]], "getInvalidKeyError": [["WritableMap", "@Nullable String key"]]}, "className": "AsyncStorageErrorUtil", "renamed": ["WritableMap", "function", "(", "@", "Nullable", "String", "arg0", ",", "String", "arg1", ")", "{", "WritableMap", "loc0", "=", "Arguments", ".", "createMap", "(", ")", ";", "loc0", ".", "putString", "(", "\"srini_string\"", ",", "arg1", ")", ";", "if", "(", "arg0", "!=", "null", ")", "{", "loc0", ".", "putString", "(", "\"srini_string\"", ",", "arg0", ")", ";", "}", "return", "loc0", ";", "}"], "nl": "Create Error object to be passed back to the JS callback.", "nlToks": ["Create", "Error", "object", "to", "be", "passed", "back", "to", "the", "JS", "callback", "."], "path": "plrthink/react-native/tree/master/ReactAndroid/src/main/java/com/facebook/react/modules/storage/AsyncStorageErrorUtil.java", "idx": 2793}
{"memberVariables": {"CONFIG=registerLoggerByName(\"org.xhtmlrenderer.config\")": "String", "MATCH=registerLoggerByName(\"org.xhtmlrenderer.match\")": "String", "RENDER=registerLoggerByName(\"org.xhtmlrenderer.render\")": "String", "CSS_PARSE=registerLoggerByName(\"org.xhtmlrenderer.css-parse\")": "String", "LOGGER_NAMES=new ArrayList(20)": "List", "EXCEPTION=registerLoggerByName(\"org.xhtmlrenderer.exception\")": "String", "loggingEnabled=true": "boolean", "XML_ENTITIES=registerLoggerByName(\"org.xhtmlrenderer.load.xml-entities\")": "String", "JUNIT=registerLoggerByName(\"org.xhtmlrenderer.junit\")": "String", "INIT=registerLoggerByName(\"org.xhtmlrenderer.init\")": "String", "loggerImpl": "XRLogger", "LOAD=registerLoggerByName(\"org.xhtmlrenderer.load\")": "String", "LAYOUT=registerLoggerByName(\"org.xhtmlrenderer.layout\")": "String", "GENERAL=registerLoggerByName(\"org.xhtmlrenderer.general\")": "String", "CASCADE=registerLoggerByName(\"org.xhtmlrenderer.cascade\")": "String", "initPending=true": "boolean"}, "code": ["List", "function", "(", ")", "{", "return", "new", "ArrayList", "(", "LOGGER_NAMES", ")", ";", "}"], "memberFunctions": {"exception": [["void", "String msg"], ["void", "String msg", "Throwable th"]], "getLoggerImpl": [["XRLogger"]], "init": [["void", "String msg"], ["void", "Level level", "String msg"], ["void", "Level level", "String msg", "Throwable th"], ["void"]], "junit": [["void", "String msg"], ["void", "Level level", "String msg"], ["void", "Level level", "String msg", "Throwable th"]], "cssParse": [["void", "String msg"], ["void", "Level level", "String msg"], ["void", "Level level", "String msg", "Throwable th"]], "log": [["void", "String where", "Level level", "String msg"], ["void", "String where", "Level level", "String msg", "Throwable th"]], "cascade": [["void", "String msg"], ["void", "Level level", "String msg"], ["void", "Level level", "String msg", "Throwable th"]], "match": [["void", "String msg"], ["void", "Level level", "String msg"], ["void", "Level level", "String msg", "Throwable th"]], "main": [["void", "String args[]"]], "registerLoggerByName": [["String", "final String loggerName"]], "setLevel": [["void", "String log", "Level level"]], "layout": [["void", "String msg"], ["void", "Level level", "String msg"], ["void", "Level level", "String msg", "Throwable th"]], "setLoggingEnabled": [["void", "boolean loggingEnabled"]], "general": [["void", "String msg"], ["void", "Level level", "String msg"], ["void", "Level level", "String msg", "Throwable th"]], "load": [["void", "String msg"], ["void", "Level level", "String msg"], ["void", "Level level", "String msg", "Throwable th"]], "setLoggerImpl": [["void", "XRLogger loggerImpl"]], "render": [["void", "String msg"], ["void", "Level level", "String msg"], ["void", "Level level", "String msg", "Throwable th"]], "xmlEntities": [["void", "String msg"], ["void", "Level level", "String msg"], ["void", "Level level", "String msg", "Throwable th"]], "isLoggingEnabled": [["boolean"]]}, "className": "XRLog", "renamed": ["List", "function", "(", ")", "{", "return", "new", "ArrayList", "(", "LOGGER_NAMES", ")", ";", "}"], "nl": "Returns a list of all loggers that will be accessed by XRLog. Each entry is a String with a logger name, which can be used to retrieve the logger using the corresponding Logging API; example name might be \"org.xhtmlrenderer.config\"", "nlToks": ["Returns", "a", "list", "of", "all", "loggers", "that", "will", "be", "accessed", "by", "XRLog", ".", "Each", "entry", "is", "a", "String", "with", "a", "logger", "name", ",", "which", "can", "be", "used", "to", "retrieve", "the", "logger", "using", "the", "corresponding", "Logging", "API", ";", "example", "name", "might", "be", "``", "org.xhtmlrenderer.config", "''"], "path": "plutogeek/flyingsaucer/tree/master/flying-saucer-core/src/main/java/org/xhtmlrenderer/util/XRLog.java", "idx": 2794}
{"memberVariables": {"controller": "ActionsController", "jobs": "Hashtable<Long,JobsGroup>"}, "code": ["void", "function", "(", "JobsGroup", "jobsGroup", ",", "Context", "ctx", ",", "boolean", "isMissing", ")", "{", "this", ".", "finishRunningJobs", "(", "ctx", ")", ";", "this", ".", "jobs", ".", "put", "(", "Long", ".", "valueOf", "(", "jobsGroup", ".", "getId", "(", ")", ")", ",", "jobsGroup", ")", ";", "jobsGroup", ".", "run", "(", "this", ",", "isMissing", ")", ";", "}"], "memberFunctions": {"groupFinished": [["void", "JobsGroup jobsGroup", "Context ctx"]], "finishRunningJobs": [["void", "Context ctx"]]}, "className": "JobsQueue", "renamed": ["void", "function", "(", "JobsGroup", "arg0", ",", "Context", "arg1", ",", "boolean", "arg2", ")", "{", "this", ".", "finishRunningJobs", "(", "arg1", ")", ";", "this", ".", "jobs", ".", "put", "(", "Long", ".", "valueOf", "(", "arg0", ".", "getId", "(", ")", ")", ",", "arg0", ")", ";", "arg0", ".", "run", "(", "this", ",", "arg2", ")", ";", "}"], "nl": "Adds a JobsGroup to the queue, and starts immediately to execute jobs on that group. If there was a previously group running, this method finishes that execution first.", "nlToks": ["Adds", "a", "JobsGroup", "to", "the", "queue", ",", "and", "starts", "immediately", "to", "execute", "jobs", "on", "that", "group", ".", "If", "there", "was", "a", "previously", "group", "running", ",", "this", "method", "finishes", "that", "execution", "first", "."], "path": "prey/prey-android-client/tree/master/app/src/main/java/com/prey/actions/observer/JobsQueue.java", "idx": 2795}
{"memberVariables": {"total": "int", "len": "int", "jobs": "List<CoordinatorJobBean>", "start": "int"}, "code": ["int", "function", "(", ")", "{", "return", "start", ";", "}"], "memberFunctions": {"getCoordJobs": [["List<CoordinatorJobBean>"]], "getLen": [["int"]], "getTotal": [["int"]]}, "className": "CoordinatorJobInfo", "renamed": ["int", "function", "(", ")", "{", "return", "start", ";", "}"], "nl": "Return the offset of the workflows being returned.  For pagination purposes.", "nlToks": ["Return", "the", "offset", "of", "the", "workflows", "being", "returned", ".", "For", "pagination", "purposes", "."], "path": "pingpangkuangmo/oozie/tree/master/core/src/main/java/org/apache/oozie/CoordinatorJobInfo.java", "idx": 2796}
{"memberVariables": {"output": "File", "wsdlVersion": "String", "packagePrefixes": "UriPrefixPair[]", "prefix": "String", "catalog": "File", "dependencies[]": "File", "uri": "String", "validate": "String"}, "code": ["void", "function", "(", "UriPrefixPair", "[", "]", "packagePrefixes", ")", "{", "this", ".", "packagePrefixes", "=", "packagePrefixes", ";", "}"], "memberFunctions": {"setWsdlVersion": [["void", "String wsdlVersion"]], "getPrefix": [["String"]], "setValidate": [["void", "String validate"]], "setOutputDir": [["void", "File outputDir"]], "getPackagePrefixes": [["UriPrefixPair[]"]], "getDependencies": [["File[]"]], "setUri": [["void", "String uri"]], "setDependencies": [["void", "File[] dependencies"]], "setCatalog": [["void", "File catalog"]], "getOutputDir": [["File"]], "getCatalog": [["File"]], "getValidate": [["String"]], "setPrefix": [["void", "String prefix"]], "getWsdlVersion": [["String"]], "merge": [["void", "Option other"]], "toString": [["String"]], "getUri": [["String"]], "setOutput": [["void", "File output"]], "getOutput": [["File"]]}, "className": "Option", "renamed": ["void", "function", "(", "UriPrefixPair", "[", "]", "arg0", ")", "{", "this", ".", "packagePrefixes", "=", "arg0", ";", "}"], "nl": "Set the mappings from namespace URI to Javascript name prefixes.", "nlToks": ["Set", "the", "mappings", "from", "namespace", "URI", "to", "Javascript", "name", "prefixes", "."], "path": "primesign/cxf/tree/master/maven-plugins/codegen-plugin/src/main/java/org/apache/cxf/maven_plugin/wsdl2js/Option.java", "idx": 2797}
{"memberVariables": {"testId": "long", "serialVersionUID=1L": "long", "seqId": "long"}, "code": ["void", "function", "(", "long", "seqId", ")", "{", "this", ".", "seqId", "=", "seqId", ";", "}"], "memberFunctions": {"getSeqId": [["long"]], "hashCode": [["int"]], "equals": [["boolean", "Object other"]], "setTestId": [["void", "long testId"]], "getTestId": [["long"]]}, "className": "RegPCLTestResultDetailsEntityPK", "renamed": ["void", "function", "(", "long", "arg0", ")", "{", "this", ".", "seqId", "=", "arg0", ";", "}"], "nl": "Sets the seq id.", "nlToks": ["Sets", "the", "seq", "id", "."], "path": "pkesireddy/portico_fletcher/tree/master/FetcherTesterService/src/main/java/org/ithaka/cm/fetchertester/entity/RegPCLTestResultDetailsEntityPK.java", "idx": 2798}
{"memberVariables": {"VALUE_SEPARATOR=\";\"": "String", "TYPE_VALUE_SEPARATOR=\":\"": "String", "profileData": "ProfileData"}, "code": ["ProfileData", "function", "(", ")", "{", "return", "this", ".", "profileData", ";", "}"], "memberFunctions": {"mergeProfiles": [["void", "HashMap<String,String> map", "ArrayList<ProfileData> profileList", "ArrayList<String> caseList", "ArrayList<String> geneList"]], "createUnion": [["void", "ArrayList<ProfileData> profileList", "ArrayList<String> caseIdList", "ArrayList<String> geneList"]], "determineAlteredStatus": [["String", "ArrayList<ProfileData> profileList", "String gene", "String caseId"]], "createKey": [["String", "String geneSymbol", "String caseId"]]}, "className": "ProfileMerger", "renamed": ["ProfileData", "function", "(", ")", "{", "return", "this", ".", "profileData", ";", "}"], "nl": "Gets the new merged profile data object.", "nlToks": ["Gets", "the", "new", "merged", "profile", "data", "object", "."], "path": "adamabeshouse/cbioportal/tree/master/core/src/main/java/org/mskcc/cbio/portal/util/ProfileMerger.java", "idx": 2799}
{"memberVariables": {}, "code": ["DenseMatrix64F", "function", "(", "DenseMatrix64F", "u", ",", "double", "gamma", ")", "{", "if", "(", "!", "MatrixFeatures", ".", "isVector", "(", "u", ")", ")", "throw", "new", "IllegalArgumentException", "(", "\"u must be a vector\"", ")", ";", "DenseMatrix64F", "Q", "=", "CommonOps", ".", "identity", "(", "u", ".", "getNumElements", "(", ")", ")", ";", "CommonOps", ".", "multAddTransB", "(", "-", "gamma", ",", "u", ",", "u", ",", "Q", ")", ";", "return", "Q", ";", "}"], "memberFunctions": {"subvector": [["void", "RowD1Matrix64F A", "int rowA", "int colA", "int length", "boolean row", "int offsetV", "RowD1Matrix64F v"]], "elementSumSq": [["double", "D1Matrix64F m"]], "diffNormP1": [["double", "D1Matrix64F a", "D1Matrix64F b"]], "pivotMatrix": [["DenseMatrix64F", "DenseMatrix64F ret", "int pivots[]", "int numPivots", "boolean transposed"]], "copyChangeRow": [["DenseMatrix64F", "int order[]", "DenseMatrix64F src", "DenseMatrix64F dst"]], "diffNormF": [["double", "D1Matrix64F a", "D1Matrix64F b"]], "qualityTriangular": [["double", "boolean upper", "D1Matrix64F T"]], "diffNormF_fast": [["double", "D1Matrix64F a", "D1Matrix64F b"]], "addIdentity": [["void", "RowD1Matrix64F A", "RowD1Matrix64F B", "double alpha"]], "diagProd": [["double", "RowD1Matrix64F T"]], "copyTriangle": [["DenseMatrix64F", "DenseMatrix64F src", "DenseMatrix64F dst", "boolean upper"]], "splitIntoVectors": [["DenseMatrix64F[]", "RowD1Matrix64F A", "boolean column"]]}, "className": "SpecializedOps", "renamed": ["DenseMatrix64F", "function", "(", "DenseMatrix64F", "arg0", ",", "double", "arg1", ")", "{", "if", "(", "!", "MatrixFeatures", ".", "isVector", "(", "arg0", ")", ")", "throw", "new", "IllegalArgumentException", "(", "\"srini_string\"", ")", ";", "DenseMatrix64F", "loc0", "=", "CommonOps", ".", "identity", "(", "arg0", ".", "getNumElements", "(", ")", ")", ";", "CommonOps", ".", "multAddTransB", "(", "-", "arg1", ",", "arg0", ",", "arg0", ",", "loc0", ")", ";", "return", "loc0", ";", "}"], "nl": " Creates a reflector from the provided vector and gamma.  Q = I - &gamma; u uT   In practice  {@link org.ejml.alg.dense.mult.VectorVectorMult#householder(double,org.ejml.data.D1Matrix64F,org.ejml.data.D1Matrix64F,org.ejml.data.D1Matrix64F)}  multHouseholder}should be used for performance reasons since there is no need to calculate Q explicitly. ", "nlToks": ["Creates", "a", "reflector", "from", "the", "provided", "vector", "and", "gamma", ".", "Q", "=", "I", "-", "&", "gamma", ";", "u", "uT", "In", "practice", "-LCB-", "@link", "org.ejml.alg.dense.mult.VectorVectorMult", "#householder", "-LRB-", "double", ",", "org.ejml.data.D1Matrix64F", ",", "org.ejml.data.D1Matrix64F", ",", "org.ejml.data.D1Matrix64F", "-RRB-", "-RCB-", "multHouseholder", "-RCB-", "should", "be", "used", "for", "performance", "reasons", "since", "there", "is", "no", "need", "to", "calculate", "Q", "explicitly", "."], "path": "adamaulia/efficient-java-matrix-library/tree/master/src/org/ejml/ops/SpecializedOps.java", "idx": 2800}
{"memberVariables": {"mOwnerBits": "Bits", "mGroupBits": "Bits", "SVALS=values()": "Bits[]", "mOtherBits": "Bits", "mString": "String"}, "code": ["Mode", "function", "(", "Mode", "umask", ")", "{", "return", "new", "Mode", "(", "mOwnerBits", ".", "and", "(", "umask", ".", "mOwnerBits", ".", "not", "(", ")", ")", ",", "mGroupBits", ".", "and", "(", "umask", ".", "mGroupBits", ".", "not", "(", ")", ")", ",", "mOtherBits", ".", "and", "(", "umask", ".", "mOtherBits", ".", "not", "(", ")", ")", ")", ";", "}"], "memberFunctions": {"extractOtherBits": [["Bits", "short mode"]], "tryParseInt": [["boolean", "String value"]], "imply": [["boolean", "Bits that"]], "or": [["Bits", "Bits that"]], "set": [["void", "Bits u", "Bits g", "Bits o"]], "extractOwnerBits": [["Bits", "short mode"]], "setOtherBits": [["void", "Bits bits"]], "getOtherBits": [["Bits"]], "getDefault": [["Mode"]], "createFullAccess": [["Mode"]], "getGroupBits": [["Bits"]], "extractGroupBits": [["Bits", "short mode"]], "getOwnerBits": [["Bits"]], "setOwnerBits": [["void", "Bits bits"]], "not": [["Bits"]], "fromShort": [["void", "short n"]], "and": [["Bits", "Bits that"]], "hashCode": [["int"]], "setGroupBits": [["void", "Bits bits"]], "equals": [["boolean", "Object obj"]], "getUMask": [["Mode"]], "toString": [["String"], ["String"]], "toShort": [["short"]], "createNoAccess": [["Mode"]]}, "className": "Mode", "renamed": ["Mode", "function", "(", "Mode", "arg0", ")", "{", "return", "new", "Mode", "(", "mOwnerBits", ".", "and", "(", "arg0", ".", "mOwnerBits", ".", "not", "(", ")", ")", ",", "mGroupBits", ".", "and", "(", "arg0", ".", "mGroupBits", ".", "not", "(", ")", ")", ",", "mOtherBits", ".", "and", "(", "arg0", ".", "mOtherBits", ".", "not", "(", ")", ")", ")", ";", "}"], "nl": "Creates a new mode by applying the given umask  {@link Mode} to this mode.", "nlToks": ["Creates", "a", "new", "mode", "by", "applying", "the", "given", "umask", "-LCB-", "@link", "Mode", "-RCB-", "to", "this", "mode", "."], "path": "poemlin/alluxio/tree/master/core/common/src/main/java/alluxio/security/authorization/Mode.java", "idx": 2801}
{"memberVariables": {"altitude=0.0": "double", "latitude": "double", "datum=Datum.WGS84": "Datum", "longitude": "double"}, "code": ["Waypoint", "function", "(", "String", "id", ")", "{", "return", "new", "Waypoint", "(", "id", ",", "getLatitude", "(", ")", ",", "getLongitude", "(", ")", ")", ";", "}"], "memberFunctions": {"getLatitudeHemisphere": [["CompassPoint"]], "haversine": [["double", "double lat1", "double lon1", "double lat2", "double lon2"]], "getLongitude": [["double"]], "getAltitude": [["double"]], "isLatitudeNorth": [["boolean"]], "getLatitude": [["double"]], "isLongitudeEast": [["boolean"]], "distanceTo": [["double", "Position pos"]], "setLatitude": [["void", "double latitude"]], "setAltitude": [["void", "double altitude"]], "getLongitudeHemisphere": [["CompassPoint"]], "getDatum": [["Datum"]], "toString": [["String"]], "setLongitude": [["void", "double longitude"]]}, "className": "Position", "renamed": ["Waypoint", "function", "(", "String", "arg0", ")", "{", "return", "new", "Waypoint", "(", "arg0", ",", "getLatitude", "(", ")", ",", "getLongitude", "(", ")", ")", ";", "}"], "nl": "Convenience method for creating a waypoint based in the Position.", "nlToks": ["Convenience", "method", "for", "creating", "a", "waypoint", "based", "in", "the", "Position", "."], "path": "pkoziol/marine-api/tree/master/src/main/java/net/sf/marineapi/nmea/util/Position.java", "idx": 2802}
{"memberVariables": {"testId": "long", "serialVersionUID=1L": "long", "seqId": "long"}, "code": ["void", "function", "(", "long", "testId", ")", "{", "this", ".", "testId", "=", "testId", ";", "}"], "memberFunctions": {"getSeqId": [["long"]], "hashCode": [["int"]], "setSeqId": [["void", "long seqId"]], "equals": [["boolean", "Object other"]], "getTestId": [["long"]]}, "className": "RegPCLTestResultDetailsEntityPK", "renamed": ["void", "function", "(", "long", "arg0", ")", "{", "this", ".", "testId", "=", "arg0", ";", "}"], "nl": "Sets the test id.", "nlToks": ["Sets", "the", "test", "id", "."], "path": "pkesireddy/portico_fletcher/tree/master/FetcherTesterService/src/main/java/org/ithaka/cm/fetchertester/entity/RegPCLTestResultDetailsEntityPK.java", "idx": 2804}
{"memberVariables": {"A=new D1Submatrix64F()": "D1Submatrix64F", "saveW=false": "boolean", "dataW=new BlockMatrix64F(1,1)": "BlockMatrix64F", "dataWTA=new BlockMatrix64F(1,1)": "BlockMatrix64F", "Y=new D1Submatrix64F()": "D1Submatrix64F", "blockLength": "int", "W=new D1Submatrix64F(dataW)": "D1Submatrix64F", "dataA": "BlockMatrix64F", "temp[]=new double[1]": "double", "WTA=new D1Submatrix64F(dataWTA)": "D1Submatrix64F", "gammas[]=new double[1]": "double"}, "code": ["void", "function", "(", "boolean", "saveW", ")", "{", "this", ".", "saveW", "=", "saveW", ";", "}"], "memberFunctions": {"setW": [["void"]], "applyQ": [["void", "BlockMatrix64F B"], ["void", "BlockMatrix64F B", "boolean isIdentity"]], "decompose": [["boolean", "BlockMatrix64F orig"]], "setup": [["void", "BlockMatrix64F orig"]], "getQ": [["BlockMatrix64F", "BlockMatrix64F Q", "boolean compact"]], "getQR": [["BlockMatrix64F"]], "initializeQ": [["BlockMatrix64F", "BlockMatrix64F Q", "int numRows", "int numCols", "int blockLength", "boolean compact"]], "getR": [["BlockMatrix64F", "BlockMatrix64F R", "boolean compact"]], "inputModified": [["boolean"]], "applyQTran": [["void", "BlockMatrix64F B"]], "updateA": [["void", "D1Submatrix64F A"]]}, "className": "QRDecompositionHouseholder_B64", "renamed": ["void", "function", "(", "boolean", "arg0", ")", "{", "this", ".", "saveW", "=", "arg0", ";", "}"], "nl": " Sets if it should internally save the W matrix before performing the decomposition.  Must be set before decomposition the matrix.   Saving W can result in about a 5% savings when solving systems around a height of 5k.  The price is that it needs to save a matrix the size of the input matrix. ", "nlToks": ["Sets", "if", "it", "should", "internally", "save", "the", "W", "matrix", "before", "performing", "the", "decomposition", ".", "Must", "be", "set", "before", "decomposition", "the", "matrix", ".", "Saving", "W", "can", "result", "in", "about", "a", "5", "%", "savings", "when", "solving", "systems", "around", "a", "height", "of", "5k", ".", "The", "price", "is", "that", "it", "needs", "to", "save", "a", "matrix", "the", "size", "of", "the", "input", "matrix", "."], "path": "adamaulia/efficient-java-matrix-library/tree/master/src/org/ejml/alg/block/decomposition/qr/QRDecompositionHouseholder_B64.java", "idx": 2806}
{"memberVariables": {"m_socketChannel": "SocketChannel", "m_selectorManager": "SelectorManager", "LOG=LoggerFactory.getLogger(NioReaderWriter.class)": "Logger", "m_closeListeners=Collections.synchronizedList(new LinkedList())": "List", "m_writeHandler": "WriteHandlerImpl", "m_readHandler": "ReadHandlerImpl", "m_closed=false": "boolean"}, "code": ["void", "function", "(", "final", "ProtocolHandler", "protocolHandler", ")", "{", "this", ".", "m_readHandler", ".", "setProtocolHandler", "(", "protocolHandler", ")", ";", "}"], "memberFunctions": {"handleKey": [["void", "final SelectionKey sk"]], "getLocalSocketAddress": [["InetSocketAddress"]], "getSocketChannel": [["SocketChannel"]], "writeLater": [["void", "final Collection buffers"], ["void", "final ByteBuffer data"], ["void", "final ByteBuffer data", "final WriteListener listener"]], "registerRead": [["void", "final boolean onSelectorThread"]], "notifyCloseListeners": [["void"]], "addCloseListener": [["void", "final CloseListener listener"]], "isClosed": [["boolean"]], "hashCode": [["int"]], "equals": [["boolean", "final Object obj"]], "toString": [["String"]], "close": [["void"]], "write": [["void", "final ByteBuffer buffer"], ["void", "final ByteBuffer buffer", "final WriteListener listener"], ["void", "final Collection buffers"]], "getRemoteSocketAddress": [["InetSocketAddress"]]}, "className": "NioReaderWriter", "renamed": ["void", "function", "(", "final", "ProtocolHandler", "arg0", ")", "{", "this", ".", "m_readHandler", ".", "setProtocolHandler", "(", "arg0", ")", ";", "}"], "nl": "Sets the protocol handler to use for this connection.", "nlToks": ["Sets", "the", "protocol", "handler", "to", "use", "for", "this", "connection", "."], "path": "adamfisk/littleshoot-client/tree/master/common/nio/src/main/java/org/lastbamboo/common/nio/NioReaderWriter.java", "idx": 2807}
{"memberVariables": {"isRaw": "boolean", "valueLen": "int", "format": "PackFormatInputStream", "valueOff": "int", "value": "byte[]"}, "code": ["byte", "[", "]", "function", "(", ")", "{", "if", "(", "!", "isRaw", ")", "{", "format", ".", "checkType", "(", "'U'", ",", "false", ")", ";", "}", "int", "itemLen", "=", "getByteArrayLength", "(", ")", ";", "byte", "[", "]", "unpacked", "=", "new", "byte", "[", "itemLen", "]", ";", "getByteArrayInternal", "(", "itemLen", ",", "unpacked", ",", "0", ",", "itemLen", ")", ";", "return", "unpacked", ";", "}"], "memberFunctions": {"getByteArrayInternal": [["void", "int itemLen", "byte[] dest", "int off", "int destLen"]], "getByteArrayLength": [["int"]], "getByte": [["byte"]], "getShort": [["short"]], "getString": [["String"]], "getLong": [["long"]], "getValue": [["byte[]"]], "getInt": [["int"]], "unpackInt": [["int", "boolean signed"]], "unpackShort": [["short", "boolean signed"]], "getFormat": [["String"]], "getRecord": [["long"]], "unpackLong": [["long", "boolean signed"]]}, "className": "PackInputStream", "renamed": ["byte", "[", "]", "function", "(", ")", "{", "if", "(", "!", "isRaw", ")", "{", "format", ".", "checkType", "(", "'U'", ",", "false", ")", ";", "}", "int", "loc0", "=", "getByteArrayLength", "(", ")", ";", "byte", "[", "]", "loc1", "=", "new", "byte", "[", "loc0", "]", ";", "getByteArrayInternal", "(", "loc0", ",", "loc1", ",", "0", ",", "loc0", ")", ";", "return", "loc1", ";", "}"], "nl": "Retrieves a byte array field from the stream. Creates a new byte array that is the size of the object being retrieved.", "nlToks": ["Retrieves", "a", "byte", "array", "field", "from", "the", "stream", ".", "Creates", "a", "new", "byte", "array", "that", "is", "the", "size", "of", "the", "object", "being", "retrieved", "."], "path": "adamlsd/mongo/tree/master/src/third_party/wiredtiger/lang/java/src/com/wiredtiger/db/PackInputStream.java", "idx": 2808}
{"memberVariables": {"instance=new LogoutRequestSender()": "LogoutRequestSender", "log=LogFactory.getLog(LogoutRequestSender.class)": "Log", "threadPool=Executors.newFixedThreadPool(2)": "ExecutorService", "logoutReqDTO": "SingleLogoutRequestDTO"}, "code": ["LogoutRequestSender", "function", "(", ")", "{", "return", "instance", ";", "}"], "memberFunctions": {"sendLogoutRequests": [["void", "org.wso2.carbon.identity.sso.saml.dto.SingleLogoutRequestDTO[] singleLogoutRequestDTOs"]], "run": [["void"]], "derivePortFromAssertionConsumerURL": [["int", "String assertionConsumerURL"]]}, "className": "LogoutRequestSender", "renamed": ["LogoutRequestSender", "function", "(", ")", "{", "return", "instance", ";", "}"], "nl": "getInstance method of LogoutRequestSender, as it is a singleton", "nlToks": ["getInstance", "method", "of", "LogoutRequestSender", ",", "as", "it", "is", "a", "singleton"], "path": "harsha1979/carbon-identity/tree/master/components/sso-saml/org.wso2.carbon.identity.sso.saml/src/main/java/org/wso2/carbon/identity/sso/saml/logout/LogoutRequestSender.java", "idx": 2811}
{"memberVariables": {"denom=1": "int", "num=1": "int"}, "code": ["int", "function", "(", ")", "{", "return", "num", ";", "}"], "memberFunctions": {"isOne": [["boolean"]], "getScaled": [["int", "int dimension"]], "equals": [["boolean", "TJScalingFactor other"]], "getDenom": [["int"]]}, "className": "TJScalingFactor", "renamed": ["int", "function", "(", ")", "{", "return", "num", ";", "}"], "nl": "Returns numerator", "nlToks": ["Returns", "numerator"], "path": "princeofdream/USBCamera/tree/master/libuvccamera/src/main/jni/libjpeg-turbo-1.5.0/java/org/libjpegturbo/turbojpeg/TJScalingFactor.java", "idx": 2812}
{"memberVariables": {"SEPARATOR=\"/\"": "String", "serialVersionUID=-1207227692436086387L": "long", "CUR_DIR=\".\"": "String", "WILDCARD=\"*\"": "String", "mUri": "URI", "EMPTY_URI=new AlluxioURI(\"\")": "AlluxioURI"}, "code": ["String", "function", "(", ")", "{", "String", "path", "=", "mUri", ".", "getPath", "(", ")", ";", "int", "slash", "=", "path", ".", "lastIndexOf", "(", "SEPARATOR", ")", ";", "return", "path", ".", "substring", "(", "slash", "+", "1", ")", ";", "}"], "memberFunctions": {"getParent": [["AlluxioURI"]], "getDepth": [["int"]], "getScheme": [["String"]], "isRoot": [["boolean"]], "isPathAbsolute": [["boolean"]], "containsWildcard": [["boolean"]], "compareTo": [["int", "AlluxioURI other"]], "getAuthority": [["String"]], "hasScheme": [["boolean"]], "getPort": [["int"]], "getLeadingPath": [["String", "int n"]], "hashCode": [["int"]], "hasWindowsDrive": [["boolean", "String path", "boolean slashed"]], "equals": [["boolean", "Object o"]], "getPath": [["String"]], "isAbsolute": [["boolean"]], "getQueryMap": [["Map<String,String>"]], "toString": [["String"]], "join": [["AlluxioURI", "String suffix"], ["AlluxioURI", "AlluxioURI suffix"]], "normalizePath": [["String", "String path"]], "getHost": [["String"]], "hasAuthority": [["boolean"]]}, "className": "AlluxioURI", "renamed": ["String", "function", "(", ")", "{", "String", "loc0", "=", "mUri", ".", "getPath", "(", ")", ";", "int", "loc1", "=", "loc0", ".", "lastIndexOf", "(", "SEPARATOR", ")", ";", "return", "loc0", ".", "substring", "(", "loc1", "+", "1", ")", ";", "}"], "nl": "Gets the final component of the  {@link AlluxioURI}.", "nlToks": ["Gets", "the", "final", "component", "of", "the", "-LCB-", "@link", "AlluxioURI", "-RCB-", "."], "path": "poemlin/alluxio/tree/master/core/common/src/main/java/alluxio/AlluxioURI.java", "idx": 2813}
{"memberVariables": {}, "code": ["ResultType", "function", "(", "RequestAbstractType", "request", ",", "ResultType", "response", ")", "{", "response", ".", "setRequestId", "(", "request", ".", "getId", "(", ")", ")", ";", "return", "response", ";", "}"], "memberFunctions": {"copyOpaqueClientData": [["ResultType", "RequestAbstractType request", "ResultType response"]], "generateUniqueID": [["String"]], "createResponse": [["ResultType", "RequestAbstractType request"], ["T", "RequestAbstractType request", "T response"]], "copyServiceName": [["ResultType", "RequestAbstractType request", "ResultType response"]]}, "className": "XKMSResponseFactory", "renamed": ["ResultType", "function", "(", "RequestAbstractType", "arg0", ",", "ResultType", "arg1", ")", "{", "arg1", ".", "setRequestId", "(", "arg0", ".", "getId", "(", ")", ")", ";", "return", "arg1", ";", "}"], "nl": "Copies Request ID to response as per XKMS specification http://www.w3.org/TR/xkms2/#XKMS_2_0_Section_1", "nlToks": ["Copies", "Request", "ID", "to", "response", "as", "per", "XKMS", "specification", "http://www.w3.org/TR/xkms2/#XKMS_2_0_Section_1"], "path": "primesign/cxf/tree/master/services/xkms/xkms-service/src/main/java/org/apache/cxf/xkms/service/XKMSResponseFactory.java", "idx": 2814}
{"memberVariables": {"variableName": "String", "objectCounter=0": "int", "jsObject": "JSObject", "runtime": "IJavascriptRuntime", "peerRegistry=new WeakHashMap<>()": "Map<JSObject,JavascriptObject>"}, "code": ["Object", "function", "(", "Object", "val", ")", "{", "if", "(", "val", "instanceof", "String", "&&", "(", "(", "String", ")", "val", ")", ".", "equals", "(", "\"undefined\"", ")", ")", "{", "return", "null", ";", "}", "return", "val", ";", "}"], "memberFunctions": {"checkInteger": [["Integer", "Object val", "Integer def"]], "getProperty": [["Object", "String key"], ["T", "String key", "Class<T> type"]], "invokeJavascript": [["Object", "String function"], ["Object", "String function", "Object... args"]], "invokeJavascriptReturnValue": [["T", "String function", "Class<T> returnType"], ["T", "String function", "Class<T> returnType", "Object... args"]], "setProperty": [["void", "String propertyName", "Object propertyValue"], ["void", "String propertyName", "JavascriptObject propertyValue"], ["void", "String propertyName", "JavascriptEnum propertyValue"]], "isMemberDefined": [["boolean", "String member"]], "getNextVariableName": [["String"]], "getVariableName": [["String"]], "checkBoolean": [["Boolean", "Object val", "Boolean def"]], "getJSObject": [["JSObject"]]}, "className": "JavascriptObject", "renamed": ["Object", "function", "(", "Object", "arg0", ")", "{", "if", "(", "arg0", "instanceof", "String", "&&", "(", "(", "String", ")", "arg0", ")", ".", "equals", "(", "\"srini_string\"", ")", ")", "{", "return", "null", ";", "}", "return", "arg0", ";", "}"], "nl": "JSObject will return the String \"undefined\" at certain times, so we  need to make sure we're not getting a value that looks valid, but isn't.", "nlToks": ["JSObject", "will", "return", "the", "String", "``", "undefined", "''", "at", "certain", "times", ",", "so", "we", "need", "to", "make", "sure", "we", "'re", "not", "getting", "a", "value", "that", "looks", "valid", ",", "but", "is", "n't", "."], "path": "presly808/GMapsFx/tree/master/src/main/java/com/lynden/gmapsfx/javascript/JavascriptObject.java", "idx": 2815}
{"memberVariables": {"view": "HandwriterView", "mRectF=new RectF()": "RectF", "mRect=new Rect()": "Rect"}, "code": ["void", "function", "(", ")", "{", "getPage", "(", ")", ".", "draw", "(", "view", ".", "canvas", ")", ";", "view", ".", "invalidate", "(", ")", ";", "}"], "memberFunctions": {"getOnlyPenInput": [["boolean"]], "getScaledPenThickness": [["float"]], "onTouchEvent": [["boolean", "MotionEvent event"]], "getPage": [["Page"]], "getDoubleTapWhileWriting": [["boolean"]], "getMoveGestureWhileWriting": [["boolean"]], "drawPinchZoomPreview": [["void", "Canvas canvas", "Bitmap bitmap", "float oldX1", "float newX1", "float oldX2", "float newX2", "float oldY1", "float newY1", "float oldY2", "float newY2"]], "destroy": [["void"]], "pinchZoomTransform": [["Transformation", "final Transformation transformation", "float oldX1", "float newX1", "float oldX2", "float newX2", "float oldY1", "float newY1", "float oldY2", "float newY2"]], "draw": [["void", "Canvas canvas", "Bitmap bitmap"]], "useForWriting": [["boolean", "MotionEvent event"]], "pinchZoomScaleFactor": [["float", "float oldX1", "float newX1", "float oldX2", "float newX2", "float oldY1", "float newY1", "float oldY2", "float newY2"]], "useForTouch": [["boolean", "MotionEvent event"]], "interrupt": [["void"]], "getContext": [["Context"]], "getMoveGestureMinDistance": [["int"]]}, "className": "TouchHandlerABC", "renamed": ["void", "function", "(", ")", "{", "getPage", "(", ")", ".", "draw", "(", "view", ".", "canvas", ")", ";", "view", ".", "invalidate", "(", ")", ";", "}"], "nl": "Redraw the page", "nlToks": ["Redraw", "the", "page"], "path": "praveensubramaniam/android-quill/tree/master/src/name/vbraun/view/write/TouchHandlerABC.java", "idx": 2816}
{"memberVariables": {"instance": "PositionParser"}, "code": ["void", "function", "(", ")", "{", "final", "double", "lat", "=", "25", "+", "(", "01.941", "/", "60", ")", ";", "instance", ".", "setLatitude", "(", "0", ",", "lat", ")", ";", "assertTrue", "(", "instance", ".", "toString", "(", ")", ".", "contains", "(", "\",02501.941\"", ")", ")", ";", "assertEquals", "(", "lat", ",", "instance", ".", "parseLatitude", "(", "0", ")", ",", "0.000001", ")", ";", "}"], "memberFunctions": {"testParseHemisphereLat": [["void"]], "testSetPositionValuesSW": [["void"]], "testParseLongitude": [["void"]], "testSetLonHemisphere": [["void"]], "setUp": [["void"]], "testSetLongitude": [["void"]], "testSetLatHemisphere": [["void"]], "testSetPositionValuesNE": [["void"]], "testParseHemisphereLon": [["void"]], "testParseLatitude": [["void"]]}, "className": "PositionParserTest", "renamed": ["void", "function", "(", ")", "{", "final", "double", "loc0", "=", "25", "+", "(", "01.941", "/", "60", ")", ";", "instance", ".", "setLatitude", "(", "0", ",", "loc0", ")", ";", "assertTrue", "(", "instance", ".", "toString", "(", ")", ".", "contains", "(", "\"srini_string\"", ")", ")", ";", "assertEquals", "(", "loc0", ",", "instance", ".", "parseLatitude", "(", "0", ")", ",", "0.000001", ")", ";", "}"], "nl": "Test method for {@link net.sf.marineapi.nmea.parser.PositionParser#setLatitude(int,double)}.", "nlToks": ["Test", "method", "for", "-LCB-", "@link", "net.sf.marineapi.nmea.parser.PositionParser", "#setLatitude", "-LRB-", "int", ",", "double", "-RRB-", "-RCB-", "."], "path": "pkoziol/marine-api/tree/master/src/test/java/net/sf/marineapi/nmea/parser/PositionParserTest.java", "idx": 2819}
{"memberVariables": {"mmHistory=new LinkedList<EditItem>()": "LinkedList<EditItem>", "mTextView": "TextView", "mmMaxHistorySize=-1": "int", "mEditHistory": "EditHistory", "mmAfter": "CharSequence", "mmBefore": "CharSequence", "mIsUndoOrRedo=false": "boolean", "mmPosition=0": "int", "mChangeListener": "EditTextChangeListener", "mBeforeChange": "CharSequence", "mAfterChange": "CharSequence", "mmStart": "int"}, "code": ["void", "function", "(", ")", "{", "mTextView", ".", "removeTextChangedListener", "(", "mChangeListener", ")", ";", "}"], "memberFunctions": {"add": [["void", "EditItem item"]], "getPrevious": [["EditItem"]], "onTextChanged": [["void", "CharSequence s", "int start", "int before", "int count"]], "storePersistentState": [["void", "Editor editor", "String prefix"]], "clear": [["void"]], "getCanRedo": [["boolean"]], "afterTextChanged": [["void", "Editable s"]], "redo": [["void"]], "getNext": [["EditItem"]], "getCanUndo": [["boolean"]], "trimHistory": [["void"]], "restorePersistentState": [["boolean", "SharedPreferences sp", "String prefix"]], "undo": [["void"]], "clearHistory": [["void"]], "beforeTextChanged": [["void", "CharSequence s", "int start", "int count", "int after"]], "doRestorePersistentState": [["boolean", "SharedPreferences sp", "String prefix"]], "setMaxHistorySize": [["void", "int maxHistorySize"], ["void", "int maxHistorySize"]]}, "className": "TextViewUndoRedo", "renamed": ["void", "function", "(", ")", "{", "mTextView", ".", "removeTextChangedListener", "(", "mChangeListener", ")", ";", "}"], "nl": "Disconnect this undo/redo from the text view.", "nlToks": ["Disconnect", "this", "undo/redo", "from", "the", "text", "view", "."], "path": "pola-alper/phonedailer/tree/master/app/src/main/java/com/alper/pola/andoid/phonedailer/TextViewUndoRedo.java", "idx": 2820}
{"memberVariables": {"highLevelChangesRenaming": "HashMap<String,HighLevelChangeRenaming>"}, "code": ["void", "function", "(", "String", "identifier", ",", "HighLevelChangeRenaming", "highLevelChangeRenaming", ")", "{", "this", ".", "highLevelChangesRenaming", ".", "put", "(", "identifier", ",", "highLevelChangeRenaming", ")", ";", "}"], "memberFunctions": {"removeHighLevelChangeRenaming": [["void", "String identifier"]], "getHighLevelChangesRenaming": [["HashMap<String,HighLevelChangeRenaming>"]], "clear": [["void"]], "setHighLevelChangesRenaming": [["void", "HashMap<String,HighLevelChangeRenaming> highLevelChangesRenaming"]]}, "className": "HighLevelChangeModel", "renamed": ["void", "function", "(", "String", "arg0", ",", "HighLevelChangeRenaming", "arg1", ")", "{", "this", ".", "highLevelChangesRenaming", ".", "put", "(", "arg0", ",", "arg1", ")", ";", "}"], "nl": "Add a high level change (renaming). If the difference group identifier already exists the old high level change (renaming) will be overwritten.", "nlToks": ["Add", "a", "high", "level", "change", "-LRB-", "renaming", "-RRB-", ".", "If", "the", "difference", "group", "identifier", "already", "exists", "the", "old", "high", "level", "change", "-LRB-", "renaming", "-RRB-", "will", "be", "overwritten", "."], "path": "plt-tud/r43ples/tree/master/src/main/java/de/tud/plt/r43ples/merging/model/structure/HighLevelChangeModel.java", "idx": 2821}
{"memberVariables": {"fb": "Facebook"}, "code": ["void", "function", "(", "String", "graphPath", ",", "Bundle", "parameters", ",", "RequestListener", "listener", ",", "final", "Object", "state", ")", "{", "request", "(", "graphPath", ",", "parameters", ",", "\"GET\"", ",", "listener", ",", "state", ")", ";", "}"], "memberFunctions": {"onFileNotFoundException": [["void", "FileNotFoundException e", "Object state"]], "logout": [["void", "final Context context", "final RequestListener listener", "final Object state"], ["void", "final Context context", "final RequestListener listener"]], "onComplete": [["void", "String response", "Object state"]], "onIOException": [["void", "IOException e", "Object state"]], "onMalformedURLException": [["void", "MalformedURLException e", "Object state"]], "onFacebookError": [["void", "FacebookError e", "Object state"]]}, "className": "AsyncFacebookRunner", "renamed": ["void", "function", "(", "String", "arg0", ",", "Bundle", "arg1", ",", "RequestListener", "arg2", ",", "final", "Object", "arg3", ")", "{", "request", "(", "arg0", ",", "arg1", ",", "\"srini_string\"", ",", "arg2", ",", "arg3", ")", ";", "}"], "nl": "Make a request to the Facebook Graph API with the given string parameters using an HTTP GET (default method).  See http://developers.facebook.com/docs/api  Note that this method is asynchronous and the callback will be invoked in a background thread; operations that affect the UI will need to be posted to the UI thread or an appropriate handler.  This method is deprecated.  See  {@link Facebook} and {@link com.facebook.Request} for more info.", "nlToks": ["Make", "a", "request", "to", "the", "Facebook", "Graph", "API", "with", "the", "given", "string", "parameters", "using", "an", "HTTP", "GET", "-LRB-", "default", "method", "-RRB-", ".", "See", "http://developers.facebook.com/docs/api", "Note", "that", "this", "method", "is", "asynchronous", "and", "the", "callback", "will", "be", "invoked", "in", "a", "background", "thread", ";", "operations", "that", "affect", "the", "UI", "will", "need", "to", "be", "posted", "to", "the", "UI", "thread", "or", "an", "appropriate", "handler", ".", "This", "method", "is", "deprecated", ".", "See", "-LCB-", "@link", "Facebook", "-RCB-", "and", "-LCB-", "@link", "com.facebook.Request", "-RCB-", "for", "more", "info", "."], "path": "planktons/CrazyHero/tree/master/Assets/Plugins/Android/facebook/src/com/facebook/android/AsyncFacebookRunner.java", "idx": 2823}
{"memberVariables": {"listeners": "List<StateListener>", "DEFAULT_ROTATION=Rotation.NONE": "Rotation", "rotation": "Rotation", "DEFAULT_POWER=0.0": "double", "DEFAULT_DIRECTION=0.5 * Math.PI": "double", "DEFAULT_TEXT=\"\"": "String", "text": "String", "power": "double", "direction": "double"}, "code": ["void", "function", "(", "Rotation", "rotation", ")", "{", "this", ".", "rotation", "=", "rotation", ";", "for", "(", "StateListener", "listener", ":", "this", ".", "listeners", ")", "{", "listener", ".", "onRotationChanged", "(", "this", ".", "rotation", ")", ";", "}", "}"], "memberFunctions": {"getPower": [["double"]], "getDirection": [["double"]], "getText": [["String"]], "getRotation": [["Rotation"]], "reset": [["void"]], "setPower": [["void", "double power"]], "removeListener": [["void", "StateListener listener"]], "setDirection": [["void", "double direction"]], "addListener": [["void", "StateListener listener"]], "setText": [["void", "String text"]]}, "className": "State", "renamed": ["void", "function", "(", "Rotation", "arg0", ")", "{", "this", ".", "rotation", "=", "arg0", ";", "for", "(", "StateListener", "loc0", ":", "this", ".", "listeners", ")", "{", "loc0", ".", "onRotationChanged", "(", "this", ".", "rotation", ")", ";", "}", "}"], "nl": "Sets the rotation.", "nlToks": ["Sets", "the", "rotation", "."], "path": "phpvdb/buffer_bci/tree/master/java/imaginedMovement/nl/dcc/buffer_bci/imaginedMovement/State.java", "idx": 2824}
{"memberVariables": {"match[]": "char", "pattern[]": "char"}, "code": ["int", "function", "(", ")", "{", "return", "pattern", ".", "length", ";", "}"], "memberFunctions": {"addChar": [["boolean", "char c"]], "hasFreePart": [["boolean"]], "reset": [["void"]], "endChar": [["boolean", "char c"]], "getPeekCount": [["int"]]}, "className": "CustomSeparator", "renamed": ["int", "function", "(", ")", "{", "return", "pattern", ".", "length", ";", "}"], "nl": "Returns the length of the matched token. It is not required to be meaningful unless addChar has returned true and hasFreePart returned false or endChar returned true.", "nlToks": ["Returns", "the", "length", "of", "the", "matched", "token", ".", "It", "is", "not", "required", "to", "be", "meaningful", "unless", "addChar", "has", "returned", "true", "and", "hasFreePart", "returned", "false", "or", "endChar", "returned", "true", "."], "path": "pichiliani/CoArgoUML/tree/master/v0.24/fonte/src/argouml-app/src/org/argouml/util/CustomSeparator.java", "idx": 2826}
{"memberVariables": {"mBuffer=null": "ByteBuffer", "LENGTH=5": "int"}, "code": ["void", "function", "(", ")", "{", "mBuffer", "=", "BufferUtils", ".", "getIncreasingByteBuffer", "(", "LENGTH", ")", ";", "}"], "memberFunctions": {"nettyOutput": [["void"]], "length": [["void"]], "readOnlyByteBuffer": [["void"]]}, "className": "DataByteBufferTest", "renamed": ["void", "function", "(", ")", "{", "mBuffer", "=", "BufferUtils", ".", "getIncreasingByteBuffer", "(", "LENGTH", ")", ";", "}"], "nl": "Sets up a new  {@link ByteBuffer} before a test runs.", "nlToks": ["Sets", "up", "a", "new", "-LCB-", "@link", "ByteBuffer", "-RCB-", "before", "a", "test", "runs", "."], "path": "poemlin/alluxio/tree/master/core/server/src/test/java/alluxio/network/protocol/databuffer/DataByteBufferTest.java", "idx": 2828}
{"memberVariables": {"rte": "RTESentence", "EXAMPLE=\"$GPRTE,1,1,c,0,MELIN,RUSKI,KNUDAN*25\"": "String", "empty": "RTESentence"}, "code": ["void", "function", "(", ")", "{", "assertTrue", "(", "rte", ".", "isFirst", "(", ")", ")", ";", "}"], "memberFunctions": {"testGetWaypointIds": [["void"]], "testIsActiveRoute": [["void"]], "testGetSentenceIndex": [["void"]], "testConstructor": [["void"]], "testSetSentenceCountWithNegativeValue": [["void"]], "testAddWaypointId": [["void"]], "testGetSentenceCount": [["void"]], "testSetWaypointIds": [["void"]], "testSetRouteId": [["void"]], "testIsWorkingRoute": [["void"]], "testSetSentenceCount": [["void"]], "testGetRouteId": [["void"]], "testSetRouteTypeActive": [["void"]], "setUp": [["void"]], "testIsLast": [["void"]], "testGetWaypointCount": [["void"]], "testSetSentenceIndex": [["void"]], "testSetRouteTypeWorking": [["void"]], "testSetSentenceIndexWithNegativeValue": [["void"]]}, "className": "RTETest", "renamed": ["void", "function", "(", ")", "{", "assertTrue", "(", "rte", ".", "isFirst", "(", ")", ")", ";", "}"], "nl": "Test method for  {@link net.sf.marineapi.nmea.parser.RTEParser#isFirst()}.", "nlToks": ["Test", "method", "for", "-LCB-", "@link", "net.sf.marineapi.nmea.parser.RTEParser", "#isFirst", "-LRB-", "-RRB-", "-RCB-", "."], "path": "pkoziol/marine-api/tree/master/src/test/java/net/sf/marineapi/nmea/parser/RTETest.java", "idx": 2829}
{"memberVariables": {"_language": "String", "_link": "String", "_rss_link": "String", "_title": "String", "_image": "String", "_items": "List<RSSItem>", "_description": "String"}, "code": ["void", "function", "(", "List", "<", "RSSItem", ">", "items", ")", "{", "this", ".", "_items", "=", "items", ";", "}"], "memberFunctions": {"set_image": [["void", "String _image"]], "getItems": [["List<RSSItem>"]], "getLink": [["String"]], "getLanguage": [["String"]], "getTitle": [["String"]], "get_image": [["String"]], "getDescription": [["String"]], "getRSSLink": [["String"]]}, "className": "RSSFeed", "renamed": ["void", "function", "(", "List", "<", "RSSItem", ">", "arg0", ")", "{", "this", ".", "_items", "=", "arg0", ";", "}"], "nl": "All set methods", "nlToks": ["All", "set", "methods"], "path": "adament67/testproject/tree/master/Android Projects/studio/EstiloRobe/estiloRobe/src/main/java/com/stylist/rssfeed/RSSFeed.java", "idx": 2830}
{"memberVariables": {"interactionType": "String", "experimentTypes": "String", "geneB": "long", "pmids": "String", "geneA": "long", "source": "String"}, "code": ["void", "function", "(", "long", "entrezGeneID", ")", "{", "this", ".", "geneB", "=", "entrezGeneID", ";", "}"], "memberFunctions": {"setSource": [["void", "String s"]], "toSif": [["String"]], "setExperimentTypes": [["void", "String expTypes"]], "setGeneA": [["void", "long entrezGeneId"]], "getInteractionType": [["String"]], "getGeneA": [["long"]], "getGeneB": [["long"]], "setPmids": [["void", "String p"]], "getSource": [["String"]], "toString": [["String"]], "setInteractionType": [["void", "String type"]], "getExperimentTypes": [["String"]], "getPmids": [["String"]]}, "className": "Interaction", "renamed": ["void", "function", "(", "long", "arg0", ")", "{", "this", ".", "geneB", "=", "arg0", ";", "}"], "nl": "Sets Entrez Gene ID for Gene B.", "nlToks": ["Sets", "Entrez", "Gene", "ID", "for", "Gene", "B."], "path": "adamabeshouse/cbioportal/tree/master/core/src/main/java/org/mskcc/cbio/portal/model/Interaction.java", "idx": 2831}
{"memberVariables": {"mWriter": "LocalFileBlockWriter", "mThrown=ExpectedException.none()": "ExpectedException", "mFolder=new TemporaryFolder()": "TemporaryFolder", "TEST_BLOCK_SIZE=1024": "long", "mTestFilePath": "String"}, "code": ["void", "function", "(", ")", "{", "mThrown", ".", "expect", "(", "ClosedChannelException", ".", "class", ")", ";", "ByteBuffer", "buf", "=", "BufferUtils", ".", "getIncreasingByteBuffer", "(", "(", "int", ")", "TEST_BLOCK_SIZE", ")", ";", "Assert", ".", "assertEquals", "(", "TEST_BLOCK_SIZE", ",", "mWriter", ".", "append", "(", "buf", ")", ")", ";", "mWriter", ".", "close", "(", ")", ";", "mWriter", ".", "append", "(", "buf", ")", ";", "}"], "memberFunctions": {"before": [["void"]], "getChannel": [["void"]], "append": [["void"]]}, "className": "LocalFileBlockWriterTest", "renamed": ["void", "function", "(", ")", "{", "mThrown", ".", "expect", "(", "ClosedChannelException", ".", "class", ")", ";", "ByteBuffer", "loc0", "=", "BufferUtils", ".", "getIncreasingByteBuffer", "(", "(", "int", ")", "TEST_BLOCK_SIZE", ")", ";", "Assert", ".", "assertEquals", "(", "TEST_BLOCK_SIZE", ",", "mWriter", ".", "append", "(", "loc0", ")", ")", ";", "mWriter", ".", "close", "(", ")", ";", "mWriter", ".", "append", "(", "loc0", ")", ";", "}"], "nl": "Tests that a  {@link ClosedChannelException} is thrown when trying to append to a channel afterclosing it.", "nlToks": ["Tests", "that", "a", "-LCB-", "@link", "ClosedChannelException", "-RCB-", "is", "thrown", "when", "trying", "to", "append", "to", "a", "channel", "afterclosing", "it", "."], "path": "poemlin/alluxio/tree/master/core/common/src/test/java/alluxio/worker/block/io/LocalFileBlockWriterTest.java", "idx": 2836}
{"memberVariables": {"MAX_SEQUENCE_NUMBER=16777215L": "long"}, "code": ["void", "function", "(", ")", "{", "Assert", ".", "assertEquals", "(", "33554431L", ",", "BlockId", ".", "createBlockId", "(", "1", ",", "BlockId", ".", "getMaxSequenceNumber", "(", ")", ")", ")", ";", "Assert", ".", "assertEquals", "(", "MAX_SEQUENCE_NUMBER", ",", "BlockId", ".", "createBlockId", "(", "0", ",", "BlockId", ".", "getMaxSequenceNumber", "(", ")", ")", ")", ";", "Assert", ".", "assertEquals", "(", "4294967295L", ",", "BlockId", ".", "createBlockId", "(", "255", ",", "BlockId", ".", "getMaxSequenceNumber", "(", ")", ")", ")", ";", "}"], "memberFunctions": {"getMaxSequenceNumber": [["void"]], "createBlockId": [["void"]], "getContainerIdAndSequenceNumber": [["void"]]}, "className": "BlockIdTest", "renamed": ["void", "function", "(", ")", "{", "Assert", ".", "assertEquals", "(", "33554431L", ",", "BlockId", ".", "createBlockId", "(", "1", ",", "BlockId", ".", "getMaxSequenceNumber", "(", ")", ")", ")", ";", "Assert", ".", "assertEquals", "(", "MAX_SEQUENCE_NUMBER", ",", "BlockId", ".", "createBlockId", "(", "0", ",", "BlockId", ".", "getMaxSequenceNumber", "(", ")", ")", ")", ";", "Assert", ".", "assertEquals", "(", "4294967295L", ",", "BlockId", ".", "createBlockId", "(", "255", ",", "BlockId", ".", "getMaxSequenceNumber", "(", ")", ")", ")", ";", "}"], "nl": "Tests that the  {@link BlockId#createBlockId(long,long)} method works correctly when creating ablock with the maximum sequence number.", "nlToks": ["Tests", "that", "the", "-LCB-", "@link", "BlockId", "#createBlockId", "-LRB-", "long", ",", "long", "-RRB-", "-RCB-", "method", "works", "correctly", "when", "creating", "ablock", "with", "the", "maximum", "sequence", "number", "."], "path": "poemlin/alluxio/tree/master/core/common/src/test/java/alluxio/master/block/BlockIdTest.java", "idx": 2837}
{"memberVariables": {"LOG=LoggerFactory.getLogger(YahooSearchTest.class)": "Logger"}, "code": ["void", "function", "(", ")", "{", "LOG", ".", "debug", "(", "\"Running full download tests...\"", ")", ";", "runFullTest", "(", "new", "YahooImageSearcher", "(", "null", ",", "UUID", ".", "randomUUID", "(", ")", ",", "\"ajzgmvnV34GrMcdruY9h3vKb4GD5AZoqfiLXhWfazKWcIkuaWZYlyoCqxrEV\"", ",", "\"hurricane katrina\"", ")", ")", ";", "}"], "memberFunctions": {"verifyResults": [["void", "final Collection results"]], "runJsonTest": [["void", "final String testFilePath", "final JsonRestResultFactory resultFactory", "final int numResults", "final String baseNode", "final String arrayName", "final String countKey"]], "testJsonInputStream": [["void"]], "testHandleInputStream": [["void"]], "runFullTest": [["void", "final RestSearcher searcher"]], "runTest": [["void", "final String testFilePath", "final RestResultFactory factory", "final int numResults"]]}, "className": "YahooSearchTest", "renamed": ["void", "function", "(", ")", "{", "LOG", ".", "debug", "(", "\"srini_string\"", ")", ";", "runFullTest", "(", "new", "YahooImageSearcher", "(", "null", ",", "UUID", ".", "randomUUID", "(", ")", ",", "\"srini_string\"", ",", "\"srini_string\"", ")", ")", ";", "}"], "nl": "This tests everything that the test for the static file above tests, but it also does the full download.", "nlToks": ["This", "tests", "everything", "that", "the", "test", "for", "the", "static", "file", "above", "tests", ",", "but", "it", "also", "does", "the", "full", "download", "."], "path": "adamfisk/littleshoot-client/tree/master/common/searchers/yahoo/src/test/java/org/lastbamboo/common/searchers/yahoo/YahooSearchTest.java", "idx": 2838}
{"memberVariables": {"ext": "ExtensionInfo", "EXPR=0": "int", "DECL=4": "int", "pos": "Position", "MEMB=3": "int", "STMT=1": "int", "TYPE=2": "int", "FILE=5": "int"}, "code": ["Stmt", "function", "(", "String", "fmt", ",", "List", "<", "?", ">", "subst", ")", "{", "return", "(", "Stmt", ")", "parse", "(", "STMT", ",", "fmt", ",", "subst", ".", "toArray", "(", ")", ")", ";", "}"], "memberFunctions": {"parseType": [["TypeNode", "String fmt", "Object... os"], ["TypeNode", "String fmt", "List<?> subst"]], "parseMember": [["ClassMember", "String fmt", "Object... os"], ["ClassMember", "String fmt", "List<?> subst"]], "parser": [["QQParser", "Lexer lexer", "TypeSystem ts", "NodeFactory nf", "ErrorQueue eq"]], "parseDecl": [["ClassDecl", "String fmt", "Object... os"], ["ClassDecl", "String fmt", "List<?> subst"]], "parseFile": [["SourceFile", "String fmt", "Object... os"], ["SourceFile", "String fmt", "List<?> subst"]], "type_position": [["Position", "polyglot.types.TypeObject t"]], "parse": [["Node", "int kind", "String fmt", "Object... subst"]], "lexer": [["Lexer", "String fmt", "Position pos", "Object... subst"]], "parseExpr": [["Expr", "String fmt", "Object... os"], ["Expr", "String fmt", "List<?> subst"]]}, "className": "QQ", "renamed": ["Stmt", "function", "(", "String", "arg0", ",", "List", "<", "?", ">", "arg1", ")", "{", "return", "(", "Stmt", ")", "parse", "(", "STMT", ",", "arg0", ",", "arg1", ".", "toArray", "(", ")", ")", ";", "}"], "nl": "Parse a string into a  {@code Stmt} AST node,applying substitutions.", "nlToks": ["Parse", "a", "string", "into", "a", "-LCB-", "@code", "Stmt", "-RCB-", "AST", "node", ",", "applying", "substitutions", "."], "path": "polyglot-compiler/polyglot/tree/master/src/polyglot/qq/QQ.java", "idx": 2840}
{"memberVariables": {"clientIpAddress": "String", "clientId": "String", "allowedGrantTypes=new LinkedList<String>()": "List<String>", "isConfidential": "boolean", "applicationCertificates=new LinkedList<String>()": "List<String>", "subject": "UserSubject", "redirectUris=new LinkedList<String>()": "List<String>", "registeredScopes=new LinkedList<String>()": "List<String>", "applicationLogoUri": "String", "serialVersionUID=-5550840247125850922L": "long", "applicationDescription": "String", "registeredAudiences=new LinkedList<String>()": "List<String>", "applicationWebUri": "String", "clientSecret": "String", "properties=new HashMap<String,String>()": "Map<String,String>", "applicationName": "String"}, "code": ["List", "<", "String", ">", "function", "(", ")", "{", "return", "redirectUris", ";", "}"], "memberFunctions": {"getSubject": [["UserSubject"]], "getApplicationName": [["String"]], "setSubject": [["void", "UserSubject subject"]], "getClientId": [["String"]], "getAllowedGrantTypes": [["List<String>"]], "setApplicationDescription": [["void", "String applicationDescription"]], "setRegisteredScopes": [["void", "List<String> registeredScopes"]], "setProperties": [["void", "Map<String,String> properties"]], "getClientIpAddress": [["String"]], "getApplicationDescription": [["String"]], "setApplicationCertificates": [["void", "List<String> applicationCertificates"]], "getApplicationWebUri": [["String"]], "setApplicationLogoUri": [["void", "String logoPath"]], "setConfidential": [["void", "boolean isConf"]], "setApplicationWebUri": [["void", "String applicationWebUri"]], "setClientIpAddress": [["void", "String clientIpAddress"]], "getApplicationLogoUri": [["String"]], "setClientSecret": [["void", "String id"]], "setAllowedGrantTypes": [["void", "List<String> allowedGrantTypes"]], "isConfidential": [["boolean"]], "getClientSecret": [["String"]], "setApplicationName": [["void", "String applicationName"]], "getProperties": [["Map<String,String>"]], "setRedirectUris": [["void", "List<String> redirectUris"]], "getRegisteredAudiences": [["List<String>"]], "setRegisteredAudiences": [["void", "List<String> registeredAudiences"]], "getApplicationCertificates": [["List<String>"]], "setClientId": [["void", "String id"]], "getRegisteredScopes": [["List<String>"]]}, "className": "Client", "renamed": ["List", "<", "String", ">", "function", "(", ")", "{", "return", "redirectUris", ";", "}"], "nl": "Gets a list of URIs the AuthorizationService may return the authorization code to", "nlToks": ["Gets", "a", "list", "of", "URIs", "the", "AuthorizationService", "may", "return", "the", "authorization", "code", "to"], "path": "primesign/cxf/tree/master/rt/rs/security/oauth-parent/oauth2/src/main/java/org/apache/cxf/rs/security/oauth2/common/Client.java", "idx": 2843}
{"memberVariables": {"endDate": "Timestamp", "feedConfigId": "BigDecimal", "resultCode": "String", "serialVersionUID=1L": "long", "resultMessage": "String", "fileCount": "BigDecimal", "maxReceiptDate": "Timestamp", "downloadSize": "BigDecimal", "feedId": "BigDecimal", "configInfo": "String", "runId": "long", "errors": "byte[]", "runStatus": "String", "startDate": "Timestamp"}, "code": ["byte", "[", "]", "function", "(", ")", "{", "return", "this", ".", "errors", ";", "}"], "memberFunctions": {"getFeedConfigId": [["BigDecimal"]], "getStartDate": [["Timestamp"]], "setFeedId": [["void", "BigDecimal feedId"]], "getResultCode": [["String"]], "setFeedConfigId": [["void", "BigDecimal feedConfigId"]], "setMaxReceiptDate": [["void", "Timestamp maxReceiptDate"]], "getRunId": [["long"]], "getEndDate": [["Timestamp"]], "setErrors": [["void", "byte[] errors"]], "getConfigInfo": [["String"]], "setEndDate": [["void", "Timestamp endDate"]], "setFileCount": [["void", "BigDecimal fileCount"]], "getDownloadSize": [["BigDecimal"]], "getResultMessage": [["String"]], "setResultMessage": [["void", "String resultMessage"]], "getFileCount": [["BigDecimal"]], "getRunStatus": [["String"]], "setRunStatus": [["void", "String runStatus"]], "setStartDate": [["void", "Timestamp startDate"]], "getFeedId": [["BigDecimal"]], "setResultCode": [["void", "String resultCode"]], "setRunId": [["void", "long runId"]], "getMaxReceiptDate": [["Timestamp"]], "setConfigInfo": [["void", "String configInfo"]], "setDownloadSize": [["void", "BigDecimal downloadSize"]]}, "className": "PCLFetcherRunRecorderEntity", "renamed": ["byte", "[", "]", "function", "(", ")", "{", "return", "this", ".", "errors", ";", "}"], "nl": "Gets the errors.", "nlToks": ["Gets", "the", "errors", "."], "path": "pkesireddy/portico_fletcher/tree/master/FetcherTesterService/src/main/java/org/ithaka/cm/fetchertester/entity/PCLFetcherRunRecorderEntity.java", "idx": 2845}
{"memberVariables": {"log=LogFactory.getLog(AccessControlImpl.class)": "Log"}, "code": ["int", "function", "(", "Object", "o", ",", "Object", "o1", ")", "{", "CancerStudy", "study0", "=", "(", "CancerStudy", ")", "o", ";", "CancerStudy", "study1", "=", "(", "CancerStudy", ")", "o1", ";", "return", "study0", ".", "getName", "(", ")", ".", "compareTo", "(", "study1", ".", "getName", "(", ")", ")", ";", "}"], "memberFunctions": {"getUserDetails": [["UserDetails"]], "getCancerStudies": [["List<CancerStudy>"]], "isAccessibleCancerStudy": [["List<CancerStudy>", "String stableStudyId"]]}, "className": "AccessControlImpl", "renamed": ["int", "function", "(", "Object", "arg0", ",", "Object", "arg1", ")", "{", "CancerStudy", "loc0", "=", "(", "CancerStudy", ")", "arg0", ";", "CancerStudy", "loc1", "=", "(", "CancerStudy", ")", "arg1", ";", "return", "loc0", ".", "getName", "(", ")", ".", "compareTo", "(", "loc1", ".", "getName", "(", ")", ")", ";", "}"], "nl": "Compare two cancer studies.", "nlToks": ["Compare", "two", "cancer", "studies", "."], "path": "adamabeshouse/cbioportal/tree/master/core/src/main/java/org/mskcc/cbio/portal/util/internal/AccessControlImpl.java", "idx": 2846}
{"memberVariables": {}, "code": ["boolean", "function", "(", "String", "host", ",", "String", "domain", ")", "{", "boolean", "match", "=", "host", ".", "equals", "(", "domain", ")", "||", "(", "domain", ".", "startsWith", "(", "\".\"", ")", "&&", "host", ".", "endsWith", "(", "domain", ")", ")", ";", "return", "match", ";", "}"], "memberFunctions": {"match": [["boolean", "final Cookie cookie", "final CookieOrigin origin"]], "parse": [["void", "final SetCookie cookie", "String domain"]], "validate": [["void", "final Cookie cookie", "final CookieOrigin origin"]]}, "className": "RFC2965DomainAttributeHandler", "renamed": ["boolean", "function", "(", "String", "arg0", ",", "String", "arg1", ")", "{", "boolean", "loc0", "=", "arg0", ".", "equals", "(", "arg1", ")", "||", "(", "arg1", ".", "startsWith", "(", "\"srini_string\"", ")", "&&", "arg0", ".", "endsWith", "(", "arg1", ")", ")", ";", "return", "loc0", ";", "}"], "nl": "Performs domain-match as defined by the RFC2965.  Host A's name domain-matches host B's if  their host name strings string-compare equal; or A is a HDN string and has the form NB, where N is a non-empty name string, B has the form .B', and B' is a HDN string.  (So, x.y.com domain-matches .Y.com but not Y.com.) ", "nlToks": ["Performs", "domain-match", "as", "defined", "by", "the", "RFC2965", ".", "Host", "A", "'s", "name", "domain-matches", "host", "B", "'s", "if", "their", "host", "name", "strings", "string-compare", "equal", ";", "or", "A", "is", "a", "HDN", "string", "and", "has", "the", "form", "NB", ",", "where", "N", "is", "a", "non-empty", "name", "string", ",", "B", "has", "the", "form", ".", "B", "'", ",", "and", "B", "'", "is", "a", "HDN", "string", ".", "-LRB-", "So", ",", "x.y.com", "domain-matches", ".", "Y.com", "but", "not", "Y.com", ".", "-RRB-"], "path": "pritamkhose/open-gpstracker.code/tree/master/external_sources/httpclient-4.1.1/httpclient/src/main/java/org/apache/ogt/http/impl/cookie/RFC2965DomainAttributeHandler.java", "idx": 2848}
{"memberVariables": {"LAST_POS=4": "int", "FIRST_POS=0": "int", "mypage=new Page()": "Page", "logfile": "String", "currentpos": "int", "currentblk": "Block"}, "code": ["ListIterator", "<", "BasicLogRecord", ">", "function", "(", ")", "{", "flush", "(", ")", ";", "return", "new", "LogIterator", "(", "currentblk", ")", ";", "}"], "memberFunctions": {"getFirstRecordPosition": [["int"]], "setFirstRecordPosition": [["void", "int pos"]], "flush": [["void", "int lsn"], ["void"]], "size": [["int", "Object val"]], "appendVal": [["void", "Object val"]], "appendNewBlock": [["void"]], "currentLSN": [["int"]], "finalizeRecord": [["void"]], "setLastRecordPosition": [["void", "int pos"]], "getLastRecordPosition": [["int"]], "append": [["int", "Object[] rec"]]}, "className": "LogMgr", "renamed": ["ListIterator", "<", "BasicLogRecord", ">", "function", "(", ")", "{", "flush", "(", ")", ";", "return", "new", "LogIterator", "(", "currentblk", ")", ";", "}"], "nl": "Returns an iterator for the log records, which will be returned in reverse order starting with the most recent.", "nlToks": ["Returns", "an", "iterator", "for", "the", "log", "records", ",", "which", "will", "be", "returned", "in", "reverse", "order", "starting", "with", "the", "most", "recent", "."], "path": "prerit2803/DBMSProject2/tree/master/simpledb/log/LogMgr.java", "idx": 2849}
{"memberVariables": {}, "code": ["GetOfferDetailsResponse", ".", "Return", ".", "DetailOfferData", ".", "Merchant", ".", "Addresses", "function", "(", ")", "{", "return", "new", "GetOfferDetailsResponse", ".", "Return", ".", "DetailOfferData", ".", "Merchant", ".", "Addresses", "(", ")", ";", "}"], "memberFunctions": {"createGetOfferDetailsResponseReturnDetailOfferDataSourceGeos": [["GetOfferDetailsResponse.Return.DetailOfferData.SourceGeos"]], "createGetOfferDetailsResponseReturnDetailOfferDataSeo": [["GetOfferDetailsResponse.Return.DetailOfferData.Seo"]], "createGetOfferDetailsResponseReturnDetailOfferDataTargetGeosGeoCountry": [["GetOfferDetailsResponse.Return.DetailOfferData.TargetGeos.Geo.Country"]], "createGetOfferDetailsResponseReturnDetailOfferDataOfferMediaOfferImageEntry": [["GetOfferDetailsResponse.Return.DetailOfferData.OfferMedia.OfferImage.Entry"]], "createGetOfferDetailsResponseReturnDetailOfferDataTargetGeosGeo": [["GetOfferDetailsResponse.Return.DetailOfferData.TargetGeos.Geo"]], "createGetOfferDetailsResponseReturnDetailOfferDataOfferMedia": [["GetOfferDetailsResponse.Return.DetailOfferData.OfferMedia"]], "createGetOfferDetailsResponseReturnDetailOfferDataFulfillmentPartner": [["GetOfferDetailsResponse.Return.DetailOfferData.FulfillmentPartner"]], "createGetOfferDetailsResponseReturnDetailOfferDataOfferMediaOfferImageEntryValue": [["GetOfferDetailsResponse.Return.DetailOfferData.OfferMedia.OfferImage.Entry.Value"]], "createGetOfferDetailsResponseReturnDetailOfferDataProductsProduct": [["GetOfferDetailsResponse.Return.DetailOfferData.Products.Product"]], "createGetOfferDetailsResponseReturnDetailOfferDataRedemptionAddressesRedemptionAddress": [["GetOfferDetailsResponse.Return.DetailOfferData.RedemptionAddresses.RedemptionAddress"]], "createGetOfferDetailsResponseReturnDetailOfferDataSourceGeosGeoRegion": [["GetOfferDetailsResponse.Return.DetailOfferData.SourceGeos.Geo.Region"]], "createGetOfferDetailsResponseReturnDetailOfferDataTargetGeosGeoCity": [["GetOfferDetailsResponse.Return.DetailOfferData.TargetGeos.Geo.City"]], "createGetOfferDetailsResponseReturnDetailOfferData": [["GetOfferDetailsResponse.Return.DetailOfferData"]], "createGetOfferDetailsResponse": [["GetOfferDetailsResponse"]], "createGetOfferDetailsResponseReturnDetailOfferDataSourceGeosGeoCity": [["GetOfferDetailsResponse.Return.DetailOfferData.SourceGeos.Geo.City"]], "createGetOfferDetailsResponseReturnDetailOfferDataOfferMediaOfferImageEntryValueItem": [["GetOfferDetailsResponse.Return.DetailOfferData.OfferMedia.OfferImage.Entry.Value.Item"]], "createGetOfferDetailsResponseReturnDetailOfferDataProducts": [["GetOfferDetailsResponse.Return.DetailOfferData.Products"]], "createGetOfferDetailsResponseReturnDetailOfferDataOfferMediaOfferImage": [["GetOfferDetailsResponse.Return.DetailOfferData.OfferMedia.OfferImage"]], "createGetOfferDetailsResponseReturnDetailOfferDataRedemptionAddresses": [["GetOfferDetailsResponse.Return.DetailOfferData.RedemptionAddresses"]], "createGetOfferDetailsResponseReturn": [["GetOfferDetailsResponse.Return"]], "createGetOfferDetailsResponseReturnDetailOfferDataSourceGeosGeoCountry": [["GetOfferDetailsResponse.Return.DetailOfferData.SourceGeos.Geo.Country"]], "createGetOfferDetailsResponseReturnDetailOfferDataTargetGeos": [["GetOfferDetailsResponse.Return.DetailOfferData.TargetGeos"]], "createGetOfferDetailsResponseReturnDetailOfferDataTargetGeosGeoRegion": [["GetOfferDetailsResponse.Return.DetailOfferData.TargetGeos.Geo.Region"]], "createGetOfferDetailsResponseReturnDetailOfferDataMerchant": [["GetOfferDetailsResponse.Return.DetailOfferData.Merchant"]], "createGetOfferDetailsResponseReturnDetailOfferDataSourceGeosGeo": [["GetOfferDetailsResponse.Return.DetailOfferData.SourceGeos.Geo"]], "createGetOfferDetailsResponseReturnDetailOfferDataOfferDisplay": [["GetOfferDetailsResponse.Return.DetailOfferData.OfferDisplay"]]}, "className": "ObjectFactory", "renamed": ["GetOfferDetailsResponse", ".", "Return", ".", "DetailOfferData", ".", "Merchant", ".", "Addresses", "function", "(", ")", "{", "return", "new", "GetOfferDetailsResponse", ".", "Return", ".", "DetailOfferData", ".", "Merchant", ".", "Addresses", "(", ")", ";", "}"], "nl": "Create an instance of  {@link GetOfferDetailsResponse.Return.DetailOfferData.Merchant.Addresses }", "nlToks": ["Create", "an", "instance", "of", "-LCB-", "@link", "GetOfferDetailsResponse.Return.DetailOfferData.Merchant.Addresses", "-RCB-"], "path": "priyankgandhi/mastercard/tree/master/eop-openapi-client/src/main/java/com/eop/api/offerdetail/gen/ObjectFactory.java", "idx": 2851}
{"memberVariables": {"BLOCK_SIZE=400": "int", "contents=ByteBuffer.allocateDirect(BLOCK_SIZE)": "ByteBuffer", "filemgr=SimpleDB.fileMgr()": "FileMgr", "INT_SIZE=Integer.SIZE / Byte.SIZE": "int"}, "code": ["Block", "function", "(", "String", "filename", ")", "{", "return", "filemgr", ".", "append", "(", "filename", ",", "contents", ")", ";", "}"], "memberFunctions": {"getInt": [["int", "int offset"]], "setString": [["void", "int offset", "String val"]], "read": [["void", "Block blk"]], "STR_SIZE": [["int", "int n"]], "getString": [["String", "int offset"]], "write": [["void", "Block blk"]], "setInt": [["void", "int offset", "int val"]]}, "className": "Page", "renamed": ["Block", "function", "(", "String", "arg0", ")", "{", "return", "filemgr", ".", "append", "(", "arg0", ",", "contents", ")", ";", "}"], "nl": "Appends the contents of the page to the specified file.", "nlToks": ["Appends", "the", "contents", "of", "the", "page", "to", "the", "specified", "file", "."], "path": "prerit2803/DBMSProject2/tree/master/simpledb/file/Page.java", "idx": 2852}
{"memberVariables": {"actualNumNodes": "int", "expectedNumNodes": "int"}, "code": ["void", "function", "(", "Node", "aNode", ",", "NodeTest", "forTest", ")", "{", "actualNumNodes", "++", ";", "}"], "memberFunctions": {"resetCounter": [["void"]], "noMoreNodes": [["void", "NodeTest forTest"]]}, "className": "CountingNodeTester", "renamed": ["void", "function", "(", "Node", "arg0", ",", "NodeTest", "arg1", ")", "{", "actualNumNodes", "++", ";", "}"], "nl": "A single Node is always valid", "nlToks": ["A", "single", "Node", "is", "always", "valid"], "path": "phbenisc/xmlunit/tree/master/xmlunit-legacy/src/main/java/org/custommonkey/xmlunit/examples/CountingNodeTester.java", "idx": 2854}
{"memberVariables": {"differencesResolutionChanged=0": "int", "conflictsNotApproved=0": "int"}, "code": ["void", "function", "(", "int", "conflictsNotApproved", ")", "{", "this", ".", "conflictsNotApproved", "=", "conflictsNotApproved", ";", "}"], "memberFunctions": {"getDifferencesResolutionChanged": [["int"]], "incrementCounterDifferencesResolutionChanged": [["void"]], "incrementCounterConflictsNotApproved": [["void"]], "setDifferencesResolutionChanged": [["void", "int differencesResolutionChanged"]], "decrementCounterDifferencesResolutionChanged": [["void"]], "getConflictsNotApproved": [["int"]]}, "className": "ReportResult", "renamed": ["void", "function", "(", "int", "arg0", ")", "{", "this", ".", "conflictsNotApproved", "=", "arg0", ";", "}"], "nl": "Set the number of not approved conflicts.", "nlToks": ["Set", "the", "number", "of", "not", "approved", "conflicts", "."], "path": "plt-tud/r43ples/tree/master/src/main/java/de/tud/plt/r43ples/merging/model/structure/ReportResult.java", "idx": 2855}
{"memberVariables": {"vertexLabels": "List<VertexLabelType>", "globalEdgeLookup": "Hashtable<VertexLabelType,Hashtable<VertexLabelType,EdgeLabelType>>"}, "code": ["void", "function", "(", "VertexLabelType", "from", ",", "VertexLabelType", "to", ")", "{", "Hashtable", "<", "VertexLabelType", ",", "EdgeLabelType", ">", "localEdgeLookup", "=", "globalEdgeLookup", ".", "get", "(", "from", ")", ";", "if", "(", "localEdgeLookup", "!=", "null", ")", "localEdgeLookup", ".", "remove", "(", "to", ")", ";", "}"], "memberFunctions": {"set": [["void", "VertexLabelType from", "VertexLabelType to", "EdgeLabelType el"]], "getVertexLabels": [["List<VertexLabelType>"]], "getSuccessors": [["List<VertexLabelType>", "VertexLabelType v"]], "get": [["EdgeLabelType", "VertexLabelType from", "VertexLabelType to"]], "isVertexLabel": [["boolean", "VertexLabelType v"]], "clear": [["void"]], "checkForNewVertex": [["Hashtable<VertexLabelType,EdgeLabelType>", "VertexLabelType v"]], "addVertex": [["void", "VertexLabelType v"]]}, "className": "LabeledGraph", "renamed": ["void", "function", "(", "VertexLabelType", "arg0", ",", "VertexLabelType", "arg1", ")", "{", "Hashtable", "<", "VertexLabelType", ",", "EdgeLabelType", ">", "loc0", "=", "globalEdgeLookup", ".", "get", "(", "arg0", ")", ";", "if", "(", "loc0", "!=", "null", ")", "loc0", ".", "remove", "(", "arg1", ")", ";", "}"], "nl": "Removes an edge from the graph.", "nlToks": ["Removes", "an", "edge", "from", "the", "graph", "."], "path": "peterplupo/ia201102/tree/master/trabalho1/aima-core/src/main/java/aima/core/util/datastructure/LabeledGraph.java", "idx": 2857}
{"memberVariables": {"mob": "EntityMobWithInventory", "attackTarget": "EntityLivingBase", "world": "World", "cooldown": "int", "currCooldown": "int"}, "code": ["void", "function", "(", "double", "moveSpeed", ")", "{", "this", ".", "mob", ".", "getNavigator", "(", ")", ".", "tryMoveToEntityLiving", "(", "attackTarget", ",", "moveSpeed", ")", ";", "}"], "memberFunctions": {"getDistanceSqFromTarget": [["double"]], "nextStep": [["void"]], "hasAttackTarget": [["boolean"]]}, "className": "GenericAttack", "renamed": ["void", "function", "(", "double", "arg0", ")", "{", "this", ".", "mob", ".", "getNavigator", "(", ")", ".", "tryMoveToEntityLiving", "(", "attackTarget", ",", "arg0", ")", ";", "}"], "nl": "Attempts to move the AI to the attack target.", "nlToks": ["Attempts", "to", "move", "the", "AI", "to", "the", "attack", "target", "."], "path": "pregnantboy/fyp/tree/master/forge/src/main/java/fuzzyMod/tasks/GenericAttack.java", "idx": 2859}
{"memberVariables": {"USERS_TYPE=new TypeToken<Collection<UserModel>>(){\n}\n.getType()": "Type", "SETTINGS_TYPE=new TypeToken<Map<String,String>>(){\n}\n.getType()": "Type", "REPOSITORIES_TYPE=new TypeToken<Map<String,RepositoryModel>>(){\n}\n.getType()": "Type", "TEAMS_TYPE=new TypeToken<Collection<TeamModel>>(){\n}\n.getType()": "Type", "LOGGER=LoggerFactory.getLogger(FederationUtils.class)": "Logger"}, "code": ["Map", "<", "String", ",", "String", ">", "function", "(", "FederationModel", "registration", ")", "{", "String", "url", "=", "asLink", "(", "registration", ".", "url", ",", "registration", ".", "token", ",", "FederationRequest", ".", "PULL_SETTINGS", ")", ";", "Map", "<", "String", ",", "String", ">", "settings", "=", "JsonUtils", ".", "retrieveJson", "(", "url", ",", "SETTINGS_TYPE", ")", ";", "return", "settings", ";", "}"], "memberFunctions": {"getRepositories": [["Map<String,RepositoryModel>", "FederationModel registration", "boolean checkExclusions"]], "asLink": [["String", "String sourceURL", "String token", "FederationRequest req"], ["String", "String remoteURL", "FederationToken tokenType", "String token", "FederationRequest req", "String myURL"]], "getScripts": [["Map<String,String>", "FederationModel registration"]], "acknowledgeStatus": [["boolean", "String identification", "FederationModel registration"]], "getUsers": [["List<UserModel>", "FederationModel registration"]], "getFederationRegistrations": [["List<FederationModel>", "IStoredSettings settings"]], "poke": [["boolean", "String remoteUrl"]], "propose": [["FederationProposalResult", "String remoteUrl", "FederationProposal proposal"]], "getTeams": [["List<TeamModel>", "FederationModel registration"]]}, "className": "FederationUtils", "renamed": ["Map", "<", "String", ",", "String", ">", "function", "(", "FederationModel", "arg0", ")", "{", "String", "loc0", "=", "asLink", "(", "arg0", ".", "loc0", ",", "arg0", ".", "token", ",", "FederationRequest", ".", "PULL_SETTINGS", ")", ";", "Map", "<", "String", ",", "String", ">", "loc1", "=", "JsonUtils", ".", "retrieveJson", "(", "loc0", ",", "SETTINGS_TYPE", ")", ";", "return", "loc1", ";", "}"], "nl": "Tries to pull the gitblit server settings from the remote gitblit instance.", "nlToks": ["Tries", "to", "pull", "the", "gitblit", "server", "settings", "from", "the", "remote", "gitblit", "instance", "."], "path": "pombreda/gitblit/tree/master/src/main/java/com/gitblit/utils/FederationUtils.java", "idx": 2860}
{"memberVariables": {}, "code": ["boolean", "function", "(", "CharSequence", "string", ",", "int", "index", ")", "{", "return", "index", ">=", "0", "&&", "index", "<=", "(", "string", ".", "length", "(", ")", "-", "2", ")", "&&", "Character", ".", "isHighSurrogate", "(", "string", ".", "charAt", "(", "index", ")", ")", "&&", "Character", ".", "isLowSurrogate", "(", "string", ".", "charAt", "(", "index", "+", "1", ")", ")", ";", "}"], "memberFunctions": {"nullToEmpty": [["String", "@Nullable String string"]], "padStart": [["String", "String string", "int minLength", "char padChar"]], "commonPrefix": [["String", "CharSequence a", "CharSequence b"]], "isNullOrEmpty": [["boolean", "@Nullable String string"]], "repeat": [["String", "String string", "int count"]], "commonSuffix": [["String", "CharSequence a", "CharSequence b"]], "emptyToNull": [["String", "@Nullable String string"]], "padEnd": [["String", "String string", "int minLength", "char padChar"]]}, "className": "Strings", "renamed": ["boolean", "function", "(", "CharSequence", "arg0", ",", "int", "arg1", ")", "{", "return", "arg1", ">=", "0", "&&", "arg1", "<=", "(", "arg0", ".", "length", "(", ")", "-", "2", ")", "&&", "Character", ".", "isHighSurrogate", "(", "arg0", ".", "charAt", "(", "arg1", ")", ")", "&&", "Character", ".", "isLowSurrogate", "(", "arg0", ".", "charAt", "(", "arg1", "+", "1", ")", ")", ";", "}"], "nl": "True when a valid surrogate pair starts at the given  {@code index} in the given {@code string}. Out-of-range indexes return false.", "nlToks": ["True", "when", "a", "valid", "surrogate", "pair", "starts", "at", "the", "given", "-LCB-", "@code", "index", "-RCB-", "in", "the", "given", "-LCB-", "@code", "string", "-RCB-", ".", "Out-of-range", "indexes", "return", "false", "."], "path": "hazendaz/guava/tree/master/guava/src/com/google/common/base/Strings.java", "idx": 2862}
{"memberVariables": {"mClientSupplier=new Supplier<String>(){\n  @Override public String get(){\n    return getUri();\n  }\n}\n": "Supplier<String>", "mJournalFolder": "String", "mClientPool=new ClientPool(mClientSupplier)": "ClientPool", "mAlluxioMaster": "AlluxioMaster", "mMasterThread": "Thread", "LOG=LoggerFactory.getLogger(Constants.LOGGER_TYPE)": "Logger", "mHostname": "String"}, "code": ["String", "function", "(", ")", "{", "return", "mAlluxioMaster", ".", "getRPCBindHost", "(", ")", ";", "}"], "memberFunctions": {"getInternalMaster": [["AlluxioMaster"]], "getRPCLocalPort": [["int"]], "getWebBindHost": [["String"]], "uniquePath": [["String"]], "start": [["void"]], "getClient": [["FileSystem"]], "kill": [["void"]], "getJournalFolder": [["String"]], "stop": [["void"]], "getWebLocalPort": [["int"]], "get": [["String"]], "isServing": [["boolean"]], "create": [["LocalAlluxioMaster"], ["LocalAlluxioMaster", "final String workDirectory"]], "getAddress": [["InetSocketAddress"]], "clearClients": [["void"]], "getUri": [["String"]]}, "className": "LocalAlluxioMaster", "renamed": ["String", "function", "(", ")", "{", "return", "mAlluxioMaster", ".", "getRPCBindHost", "(", ")", ";", "}"], "nl": "Gets the actual bind hostname on RPC service (used by unit test only).", "nlToks": ["Gets", "the", "actual", "bind", "hostname", "on", "RPC", "service", "-LRB-", "used", "by", "unit", "test", "only", "-RRB-", "."], "path": "poemlin/alluxio/tree/master/minicluster/src/main/java/alluxio/master/LocalAlluxioMaster.java", "idx": 2863}
{"memberVariables": {"NULL_ESCAPER=new CharEscaper(){\n  @Override public String escape(  String string){\n    return checkNotNull(string);\n  }\n  @Override protected char[] escape(  char c){\n    return null;\n  }\n}\n": "Escaper", "replacementMap=new HashMap<Character,String>()": "Map<Character,String>", "safeMax=Character.MAX_VALUE": "char", "unsafeReplacement=null": "String", "safeMin=Character.MIN_VALUE": "char"}, "code": ["String", "function", "(", "UnicodeEscaper", "escaper", ",", "int", "cp", ")", "{", "return", "stringOrNull", "(", "escaper", ".", "escape", "(", "cp", ")", ")", ";", "}"], "memberFunctions": {"setUnsafeReplacement": [["Builder", "@Nullable String unsafeReplacement"]], "nullEscaper": [["Escaper"]], "build": [["Escaper"]], "addEscape": [["Builder", "char c", "String replacement"]], "builder": [["Builder"]], "setSafeRange": [["Builder", "char safeMin", "char safeMax"]], "stringOrNull": [["String", "char[] in"]], "asUnicodeEscaper": [["UnicodeEscaper", "Escaper escaper"]], "escape": [["String", "String string"], ["char[]", "char c"]], "wrap": [["UnicodeEscaper", "final CharEscaper escaper"]]}, "className": "Escapers", "renamed": ["String", "function", "(", "UnicodeEscaper", "arg0", ",", "int", "arg1", ")", "{", "return", "stringOrNull", "(", "arg0", ".", "escape", "(", "arg1", ")", ")", ";", "}"], "nl": "Returns a string that would replace the given character in the specified escaper, or {@code null} if no replacement should be made. This method is intended for use in tests throughthe  {@code EscaperAsserts} class; production users of {@link UnicodeEscaper} should limitthemselves to its public interface.", "nlToks": ["Returns", "a", "string", "that", "would", "replace", "the", "given", "character", "in", "the", "specified", "escaper", ",", "or", "-LCB-", "@code", "null", "-RCB-", "if", "no", "replacement", "should", "be", "made", ".", "This", "method", "is", "intended", "for", "use", "in", "tests", "throughthe", "-LCB-", "@code", "EscaperAsserts", "-RCB-", "class", ";", "production", "users", "of", "-LCB-", "@link", "UnicodeEscaper", "-RCB-", "should", "limitthemselves", "to", "its", "public", "interface", "."], "path": "hazendaz/guava/tree/master/guava/src/com/google/common/escape/Escapers.java", "idx": 2865}
{"memberVariables": {"BUCKET_PREFIX=\"prefix\"": "String", "mClient": "OSSClient", "DST=\"dst\"": "String", "SRC=\"src\"": "String", "mOSSUnderFileSystem": "OSSUnderFileSystem", "PATH=\"path\"": "String", "BUCKET_NAME=\"bucket\"": "String"}, "code": ["void", "function", "(", ")", "{", "Mockito", ".", "when", "(", "mClient", ".", "listObjects", "(", "Matchers", ".", "any", "(", "ListObjectsRequest", ".", "class", ")", ")", ")", ".", "thenThrow", "(", "ServiceException", ".", "class", ")", ";", "boolean", "result", "=", "mOSSUnderFileSystem", ".", "rename", "(", "SRC", ",", "DST", ")", ";", "Assert", ".", "assertFalse", "(", "result", ")", ";", "}"], "memberFunctions": {"before": [["void"]], "deleteNonRecursiveOnServiceException": [["void"]], "deleteRecursiveOnServiceException": [["void"]]}, "className": "OSSUnderFileSystemTest", "renamed": ["void", "function", "(", ")", "{", "Mockito", ".", "when", "(", "mClient", ".", "listObjects", "(", "Matchers", ".", "any", "(", "ListObjectsRequest", ".", "class", ")", ")", ")", ".", "thenThrow", "(", "ServiceException", ".", "class", ")", ";", "boolean", "loc0", "=", "mOSSUnderFileSystem", ".", "rename", "(", "SRC", ",", "DST", ")", ";", "Assert", ".", "assertFalse", "(", "loc0", ")", ";", "}"], "nl": "Test case for  {@link OSSUnderFileSystem#rename(String,String)}.", "nlToks": ["Test", "case", "for", "-LCB-", "@link", "OSSUnderFileSystem", "#rename", "-LRB-", "String", ",", "String", "-RRB-", "-RCB-", "."], "path": "poemlin/alluxio/tree/master/underfs/oss/src/test/java/alluxio/underfs/oss/OSSUnderFileSystemTest.java", "idx": 2866}
{"memberVariables": {"chunks": "List<ScriptChunk>"}, "code": ["ScriptBuilder", "function", "(", "int", "opcode", ")", "{", "return", "op", "(", "chunks", ".", "size", "(", ")", ",", "opcode", ")", ";", "}"], "memberFunctions": {"updateScriptWithSignature": [["Script", "Script scriptSig", "byte[] signature", "int targetIndex", "int sigsPrefixCount", "int sigsSuffixCount"]], "createOpReturnScript": [["Script", "byte[] data"]], "data": [["ScriptBuilder", "byte[] data"], ["ScriptBuilder", "int index", "byte[] data"]], "createMultiSigInputScriptBytes": [["Script", "List<byte[]> signatures"], ["Script", "List<byte[]> signatures", "@Nullable byte[] multisigProgramBytes"]], "smallNum": [["ScriptBuilder", "int num"], ["ScriptBuilder", "int index", "int num"]], "createRedeemScript": [["Script", "int threshold", "List<ECKey> pubkeys"]], "addChunk": [["ScriptBuilder", "ScriptChunk chunk"], ["ScriptBuilder", "int index", "ScriptChunk chunk"]], "createInputScript": [["Script", "@Nullable TransactionSignature signature", "ECKey pubKey"], ["Script", "@Nullable TransactionSignature signature"]], "createOutputScript": [["Script", "Address to"], ["Script", "ECKey key"]], "createMultiSigInputScript": [["Script", "List<TransactionSignature> signatures"], ["Script", "TransactionSignature... signatures"]], "createMultiSigOutputScript": [["Script", "int threshold", "List<ECKey> pubkeys"]], "build": [["Script"]], "createP2SHMultiSigInputScript": [["Script", "@Nullable List<TransactionSignature> signatures", "Script multisigProgram"]], "createP2SHOutputScript": [["Script", "byte[] hash"], ["Script", "Script redeemScript"], ["Script", "int threshold", "List<ECKey> pubkeys"]]}, "className": "ScriptBuilder", "renamed": ["ScriptBuilder", "function", "(", "int", "arg0", ")", "{", "return", "op", "(", "chunks", ".", "size", "(", ")", ",", "arg0", ")", ";", "}"], "nl": "Adds the given opcode to the end of the program.", "nlToks": ["Adds", "the", "given", "opcode", "to", "the", "end", "of", "the", "program", "."], "path": "1000000000001/bitcoinj/tree/master/core/src/main/java/org/bitcoinj/script/ScriptBuilder.java", "idx": 2868}
{"memberVariables": {"mManagerView": "BlockMetadataManagerView", "mTestFolder=new TemporaryFolder()": "TemporaryFolder"}, "code": ["void", "function", "(", ")", "{", "Configuration", ".", "set", "(", "PropertyKey", ".", "WORKER_ALLOCATOR_CLASS", ",", "GreedyAllocator", ".", "class", ".", "getName", "(", ")", ")", ";", "Allocator", "allocator", "=", "Allocator", ".", "Factory", ".", "create", "(", "mManagerView", ")", ";", "Assert", ".", "assertTrue", "(", "allocator", "instanceof", "GreedyAllocator", ")", ";", "}"], "memberFunctions": {"createRoundRobinAllocator": [["void"]], "createMaxFreeAllocator": [["void"]], "before": [["void"]], "createDefaultAllocator": [["void"]], "after": [["void"]]}, "className": "AllocatorFactoryTest", "renamed": ["void", "function", "(", ")", "{", "Configuration", ".", "set", "(", "PropertyKey", ".", "WORKER_ALLOCATOR_CLASS", ",", "GreedyAllocator", ".", "class", ".", "getName", "(", ")", ")", ";", "Allocator", "loc0", "=", "Allocator", ".", "Factory", ".", "create", "(", "mManagerView", ")", ";", "Assert", ".", "assertTrue", "(", "loc0", "instanceof", "GreedyAllocator", ")", ";", "}"], "nl": "Tests the creation of the  {@link GreedyAllocator} via the{@link Allocator.Factory#create(BlockMetadataManagerView)} method.", "nlToks": ["Tests", "the", "creation", "of", "the", "-LCB-", "@link", "GreedyAllocator", "-RCB-", "via", "the", "-LCB-", "@link", "Allocator.Factory", "#create", "-LRB-", "BlockMetadataManagerView", "-RRB-", "-RCB-", "method", "."], "path": "poemlin/alluxio/tree/master/core/server/src/test/java/alluxio/worker/block/allocator/AllocatorFactoryTest.java", "idx": 2870}
{"memberVariables": {"headers": "Map<String,Object>", "body[]": "byte", "deliveryTag": "long", "replyTo": "String", "contentEncoding": "String", "messageId": "String", "correlationId": "String", "soapAction": "String", "contentType": "String"}, "code": ["void", "function", "(", "String", "contentEncoding", ")", "{", "this", ".", "contentEncoding", "=", "contentEncoding", ";", "}"], "memberFunctions": {"getCorrelationId": [["String"]], "getContentEncoding": [["String"]], "setHeaders": [["void", "Map<String,Object> headers"]], "getHeaders": [["Map<String,Object>"]], "getBody": [["byte[]"]], "getReplyTo": [["String"]], "setCorrelationId": [["void", "String correlationId"]], "getDeliveryTag": [["long"]], "setMessageId": [["void", "String messageId"]], "setSoapAction": [["void", "String soapAction"]], "setBody": [["void", "byte[] body"]], "getMessageId": [["String"]], "setReplyTo": [["void", "String replyTo"]], "setDeliveryTag": [["void", "long deliveryTag"]], "getContentType": [["String"]], "setContentType": [["void", "String contentType"]], "getSoapAction": [["String"]]}, "className": "RabbitMQMessage", "renamed": ["void", "function", "(", "String", "arg0", ")", "{", "this", ".", "contentEncoding", "=", "arg0", ";", "}"], "nl": "Set content encoding for the message", "nlToks": ["Set", "content", "encoding", "for", "the", "message"], "path": "harsha89/wso2-axis2-transports/tree/master/modules/rabbitmq/src/main/java/org/apache/axis2/transport/rabbitmq/RabbitMQMessage.java", "idx": 2872}
{"memberVariables": {"sawReturn": "boolean", "line=new StringBuilder()": "StringBuilder"}, "code": ["void", "function", "(", ")", "{", "if", "(", "sawReturn", "||", "line", ".", "length", "(", ")", ">", "0", ")", "{", "finishLine", "(", "false", ")", ";", "}", "}"], "memberFunctions": {"add": [["void", "char[] cbuf", "int off", "int len"]], "finishLine": [["boolean", "boolean sawNewline"]], "handleLine": [["void", "String line", "String end"]]}, "className": "LineBuffer", "renamed": ["void", "function", "(", ")", "{", "if", "(", "sawReturn", "||", "line", ".", "length", "(", ")", ">", "0", ")", "{", "finishLine", "(", "false", ")", ";", "}", "}"], "nl": "Subclasses must call this method after finishing character processing, in order to ensure that any unterminated line in the buffer is passed to  {@link #handleLine}.", "nlToks": ["Subclasses", "must", "call", "this", "method", "after", "finishing", "character", "processing", ",", "in", "order", "to", "ensure", "that", "any", "unterminated", "line", "in", "the", "buffer", "is", "passed", "to", "-LCB-", "@link", "#handleLine", "-RCB-", "."], "path": "hazendaz/guava/tree/master/guava/src/com/google/common/io/LineBuffer.java", "idx": 2873}
{"memberVariables": {"_stack_type": "String", "_name": "String", "_index": "int", "_use_count=0": "int"}, "code": ["void", "function", "(", ")", "{", "_use_count", "++", ";", "}"], "memberFunctions": {"use_count": [["int"]], "stack_type": [["String"]], "name": [["String"]], "is_non_term": [["boolean"]], "index": [["int"]], "toString": [["String"]]}, "className": "symbol", "renamed": ["void", "function", "(", ")", "{", "_use_count", "++", ";", "}"], "nl": "Increment the use count.", "nlToks": ["Increment", "the", "use", "count", "."], "path": "polyglot-compiler/polyglot/tree/master/tools/java_cup/src/java_cup/symbol.java", "idx": 2875}
{"memberVariables": {"fragmentFileName=\"fragments\"": "String", "documents": "File[]", "logger=Logger.getLogger(AbstractFuriaInput.class)": "Logger", "i": "int", "fileFilter=new FragmentsFileFilter()": "FragmentsFileFilter", "directory": "File"}, "code": ["void", "function", "(", ")", "{", "while", "(", "i", "<", "documents", ".", "length", ")", "{", "if", "(", "documents", "[", "i", "]", ".", "isDirectory", "(", ")", ")", "{", "File", "data", "=", "new", "File", "(", "documents", "[", "i", "]", ",", "fragmentFileName", ")", ";", "if", "(", "data", ".", "exists", "(", ")", ")", "{", "break", ";", "}", "}", "i", "++", ";", "}", "}"], "memberFunctions": {"next": [["Document<O>"]], "getDocument": [["Document<O>", "String id", "File fragments"]], "hasNext": [["boolean"]], "directoryOfDirectoriesMode": [["boolean", "File directory"]], "readObjectFromStringLine": [["O", "String data"]], "getDocumentsFromDirectory": [["Iterator<Document<O>>"]], "isParsableLine": [["boolean", "final String line"]], "remove": [["void"]], "accept": [["boolean", "File dir", "String name"]]}, "className": "AbstractFuriaInput", "renamed": ["void", "function", "(", ")", "{", "while", "(", "i", "<", "documents", ".", "length", ")", "{", "if", "(", "documents", "[", "i", "]", ".", "isDirectory", "(", ")", ")", "{", "File", "loc0", "=", "new", "File", "(", "documents", "[", "i", "]", ",", "fragmentFileName", ")", ";", "if", "(", "loc0", ".", "exists", "(", ")", ")", "{", "break", ";", "}", "}", "i", "++", ";", "}", "}"], "nl": "Moves to the next valid document.", "nlToks": ["Moves", "to", "the", "next", "valid", "document", "."], "path": "pombreda/furia-chan/tree/master/src/main/java/org/kit/furia/io/AbstractFuriaInput.java", "idx": 2876}
{"memberVariables": {"NANOCOINS_PER_COIN=100000000": "int", "INTENT_EXTRA_TRANSACTION_HASH=\"transaction_hash\"": "String", "INTENT_EXTRA_TRANSACTION_HASH_OLD=\"transaction_id\"": "String"}, "code": ["void", "function", "(", "final", "Intent", "result", ",", "final", "String", "txHash", ")", "{", "result", ".", "putExtra", "(", "INTENT_EXTRA_TRANSACTION_HASH", ",", "txHash", ")", ";", "result", ".", "putExtra", "(", "INTENT_EXTRA_TRANSACTION_HASH_OLD", ",", "txHash", ")", ";", "}"], "memberFunctions": {"request": [["void", "final Context context", "final String address"], ["void", "final Context context", "final String address", "final long amount"]], "startForResult": [["void", "final Activity activity", "final int requestCode", "final Intent intent"]], "transactionHashFromResult": [["String", "final Intent result"]], "makeIntent": [["Intent", "final String address", "final Long amount"]], "redirectToDownload": [["void", "final Context context"]], "start": [["void", "final Context context", "final Intent intent"]], "requestForResult": [["void", "final Activity activity", "final int requestCode", "final String address"], ["void", "final Activity activity", "final int requestCode", "final String address", "final long amount"]]}, "className": "BitcoinIntegration", "renamed": ["void", "function", "(", "final", "Intent", "arg0", ",", "final", "String", "arg1", ")", "{", "arg0", ".", "putExtra", "(", "INTENT_EXTRA_TRANSACTION_HASH", ",", "arg1", ")", ";", "arg0", ".", "putExtra", "(", "INTENT_EXTRA_TRANSACTION_HASH_OLD", ",", "arg1", ")", ";", "}"], "nl": "Put transaction hash into result intent. Meant for usage by Bitcoin wallet applications.", "nlToks": ["Put", "transaction", "hash", "into", "result", "intent", ".", "Meant", "for", "usage", "by", "Bitcoin", "wallet", "applications", "."], "path": "plncoin/plncoin-and/tree/master/plncoin-android-wallet/integration-android/src/de/schildbach/wallet/integration/android/BitcoinIntegration.java", "idx": 2877}
{"memberVariables": {"order=null": "OrderType"}, "code": ["Iterator", "function", "(", ")", "{", "return", "new", "OrderLineTypeFacade", ".", "Iterator", "(", "order", ".", "getOrderLine", "(", ")", ")", ";", "}"], "memberFunctions": {"getSellerAddress": [["AddressFacade"]], "getBuyerAddress": [["AddressFacade"]], "getSellerName": [["String"]], "getBuyerContact": [["String"]], "getBuyerName": [["String"]], "getSellerParty": [["PartyNameType", "SellerPartyType seller"]], "getLongDate": [["String"]], "getCalendar": [["XMLGregorianCalendar"]]}, "className": "OrderFacade", "renamed": ["Iterator", "function", "(", ")", "{", "return", "new", "OrderLineTypeFacade", ".", "Iterator", "(", "order", ".", "getOrderLine", "(", ")", ")", ";", "}"], "nl": "Returns an iterator over orders line items.", "nlToks": ["Returns", "an", "iterator", "over", "orders", "line", "items", "."], "path": "pmeijer/meta-core/tree/master/meta/DesignDataPackage/tools/jaxb-ri-2.2.6/samples/ubl/src/samples/ubl/report/facade/OrderFacade.java", "idx": 2880}
{"memberVariables": {"checkedFlag": "FolderInfo.CheckedFlag", "artist": "String", "album": "String", "rating": "double", "errorLevel": "int"}, "code": ["void", "function", "(", "FolderInfo", ".", "CheckedFlag", "checkedFlag", ")", "{", "this", ".", "checkedFlag", "=", "checkedFlag", ";", "}"], "memberFunctions": {"getCheckedFlag": [["FolderInfo.CheckedFlag"]], "setArtist": [["void", "String artist"]], "getErrorLevel": [["int"]], "setErrorLevel": [["void", "int errorLevel"]], "getArtist": [["String"]], "setAlbum": [["void", "String album"]], "toString": [["String"]], "setRating": [["void", "double rating"]], "getAlbum": [["String"]], "getRating": [["double"]]}, "className": "DuplicateInfo", "renamed": ["void", "function", "(", "FolderInfo", ".", "CheckedFlag", "arg0", ")", "{", "this", ".", "checkedFlag", "=", "arg0", ";", "}"], "nl": "Set the value of checkedFlag", "nlToks": ["Set", "the", "value", "of", "checkedFlag"], "path": "phramusca/JaMuz/tree/master/src/jamuz/process/check/DuplicateInfo.java", "idx": 2882}
{"memberVariables": {"mVista": "T"}, "code": ["void", "function", "(", "Bundle", "state", ")", "{", "}"], "memberFunctions": {"onDestroy": [["void"]], "onStart": [["void", "T vista"]], "restoreState": [["void", "Bundle state"]], "stop": [["void"]], "start": [["void", "T vista"]], "getVista": [["T"]], "onStop": [["void"]]}, "className": "Presenter", "renamed": ["void", "function", "(", "Bundle", "arg0", ")", "{", "}"], "nl": "Called to ask the  {@link Presenter} to save its current dynamic state, so itcan later be reconstructed in a new instance of its process is restarted.", "nlToks": ["Called", "to", "ask", "the", "-LCB-", "@link", "Presenter", "-RCB-", "to", "save", "its", "current", "dynamic", "state", ",", "so", "itcan", "later", "be", "reconstructed", "in", "a", "new", "instance", "of", "its", "process", "is", "restarted", "."], "path": "ppicas/android-clean-architecture-mvp/tree/master/app/src/main/java/cat/ppicas/framework/ui/Presenter.java", "idx": 2884}
{"memberVariables": {"recoveryMgr": "RecoveryMgr", "myBuffers=new BufferList()": "BufferList", "concurMgr": "ConcurrencyMgr", "END_OF_FILE=-1": "int", "txnum": "int", "nextTxNum=0": "int"}, "code": ["String", "function", "(", "Block", "blk", ",", "int", "offset", ")", "{", "concurMgr", ".", "sLock", "(", "blk", ")", ";", "Buffer", "buff", "=", "myBuffers", ".", "getBuffer", "(", "blk", ")", ";", "return", "buff", ".", "getString", "(", "offset", ")", ";", "}"], "memberFunctions": {"rollback": [["void"]], "getInt": [["int", "Block blk", "int offset"]], "setString": [["void", "Block blk", "int offset", "String val"]], "recover": [["void"]], "pin": [["void", "Block blk"]], "size": [["int", "String filename"]], "commit": [["void"]], "unpin": [["void", "Block blk"]], "nextTxNumber": [["int"]], "append": [["Block", "String filename", "PageFormatter fmtr"]], "setInt": [["void", "Block blk", "int offset", "int newVal"]]}, "className": "Transaction", "renamed": ["String", "function", "(", "Block", "arg0", ",", "int", "arg1", ")", "{", "concurMgr", ".", "sLock", "(", "arg0", ")", ";", "Buffer", "loc0", "=", "myBuffers", ".", "getBuffer", "(", "arg0", ")", ";", "return", "loc0", ".", "getString", "(", "arg1", ")", ";", "}"], "nl": "Returns the string value stored at the specified offset of the specified block. The method first obtains an SLock on the block, then it calls the buffer to retrieve the value.", "nlToks": ["Returns", "the", "string", "value", "stored", "at", "the", "specified", "offset", "of", "the", "specified", "block", ".", "The", "method", "first", "obtains", "an", "SLock", "on", "the", "block", ",", "then", "it", "calls", "the", "buffer", "to", "retrieve", "the", "value", "."], "path": "prerit2803/DBMSProject2/tree/master/simpledb/tx/Transaction.java", "idx": 2885}
{"memberVariables": {"names=new HashMap<Class<? extends Message>,String>()": "Map<Class<? extends Message>,String>", "size": "int", "log=LoggerFactory.getLogger(BitcoinSerializer.class)": "Logger", "parseLazy=false": "boolean", "HEADER_LENGTH=COMMAND_LEN + 4 + 4": "int", "checksum": "byte[]", "header": "byte[]", "params": "NetworkParameters", "COMMAND_LEN=12": "int", "command": "String", "parseRetain=false": "boolean"}, "code": ["BitcoinPacketHeader", "function", "(", "ByteBuffer", "in", ")", "{", "return", "new", "BitcoinPacketHeader", "(", "in", ")", ";", "}"], "memberFunctions": {"seekPastMagicBytes": [["void", "ByteBuffer in"]], "serialize": [["void", "String name", "byte[] message", "OutputStream out"], ["void", "Message message", "OutputStream out"]], "makeMessage": [["Message", "String command", "int length", "byte[] payloadBytes", "byte[] hash", "byte[] checksum"]], "deserializePayload": [["Message", "BitcoinPacketHeader header", "ByteBuffer in"]], "isParseLazyMode": [["boolean"]], "isParseRetainMode": [["boolean"]], "deserialize": [["Message", "ByteBuffer in"]]}, "className": "BitcoinSerializer", "renamed": ["BitcoinPacketHeader", "function", "(", "ByteBuffer", "arg0", ")", "{", "return", "new", "BitcoinPacketHeader", "(", "arg0", ")", ";", "}"], "nl": "Deserializes only the header in case packet meta data is needed before decoding the payload. This method assumes you have already called seekPastMagicBytes()", "nlToks": ["Deserializes", "only", "the", "header", "in", "case", "packet", "meta", "data", "is", "needed", "before", "decoding", "the", "payload", ".", "This", "method", "assumes", "you", "have", "already", "called", "seekPastMagicBytes", "-LRB-", "-RRB-"], "path": "1000000000001/bitcoinj/tree/master/core/src/main/java/org/bitcoinj/core/BitcoinSerializer.java", "idx": 2886}
{"memberVariables": {"languageToRuleChainVisitor=new HashMap<>()": "Map<Language,RuleChainVisitor>"}, "code": ["void", "function", "(", "RuleSet", "ruleSet", ",", "Rule", "rule", ")", "{", "RuleChainVisitor", "visitor", "=", "getRuleChainVisitor", "(", "rule", ".", "getLanguage", "(", ")", ")", ";", "if", "(", "visitor", "!=", "null", ")", "{", "visitor", ".", "add", "(", "ruleSet", ",", "rule", ")", ";", "}", "}"], "memberFunctions": {"getRuleChainVisitor": [["RuleChainVisitor", "Language language"]], "apply": [["void", "List<Node> nodes", "RuleContext ctx", "Language language"]]}, "className": "RuleChain", "renamed": ["void", "function", "(", "RuleSet", "arg0", ",", "Rule", "arg1", ")", "{", "RuleChainVisitor", "loc0", "=", "getRuleChainVisitor", "(", "arg1", ".", "getLanguage", "(", ")", ")", ";", "if", "(", "loc0", "!=", "null", ")", "{", "loc0", ".", "add", "(", "arg0", ",", "arg1", ")", ";", "}", "}"], "nl": "Add the given Rule if it wants to participate in the RuleChain.", "nlToks": ["Add", "the", "given", "Rule", "if", "it", "wants", "to", "participate", "in", "the", "RuleChain", "."], "path": "adangel/pmd/tree/master/pmd-core/src/main/java/net/sourceforge/pmd/RuleChain.java", "idx": 2887}
{"memberVariables": {"character": "Character", "sprite": "String", "id": "int", "triggerType": "TriggerType", "map": "String", "actions": "Array<EventAction>", "layer": "String", "collidable": "boolean"}, "code": ["void", "function", "(", ")", "{", "trigger", "(", "null", ")", ";", "}"], "memberFunctions": {"read": [["void", "Json json", "JsonValue jsonData"]], "setLayer": [["void", "String layer"]], "setActions": [["void", "Array<EventAction> actions"]], "getLayer": [["String"]], "getId": [["int"]], "getActions": [["Array<EventAction>"]], "setSprite": [["void", "String sprite"]], "getMap": [["String"]], "getSprite": [["String"]], "setCollidable": [["void", "boolean collidable"]], "isCollidable": [["boolean"]], "setTriggerType": [["void", "TriggerType triggerType"]], "equals": [["boolean", "Object obj"]], "setMap": [["void", "String map"]], "setId": [["void", "int id"]], "getCharacter": [["Character"]], "setCharacter": [["void", "Character character"]], "getTriggerType": [["TriggerType"]], "write": [["void", "Json json"]]}, "className": "EventInGame", "renamed": ["void", "function", "(", ")", "{", "trigger", "(", "null", ")", ";", "}"], "nl": "Activates the event.", "nlToks": ["Activates", "the", "event", "."], "path": "prativa/shadowstruggles/tree/master/Shadow Struggles/model/br/edu/ifsp/pds/shadowstruggles/model/events/EventInGame.java", "idx": 2888}
{"memberVariables": {"tagList": "OpenTagRegister", "elmId=0": "int"}, "code": ["void", "function", "(", ")", "{", "ASTElement", "elm", "=", "element", "(", "\"a\"", ")", ";", "ASTElement", "elm2", "=", "element", "(", "\"b\"", ")", ";", "ASTElement", "elm3", "=", "element", "(", "\"b\"", ")", ";", "tagList", ".", "openTag", "(", "elm", ")", ";", "tagList", ".", "openTag", "(", "elm2", ")", ";", "tagList", ".", "openTag", "(", "elm3", ")", ";", "tagList", ".", "closeTag", "(", "elm", ")", ";", "assertFalse", "(", "elm", ".", "isUnclosed", "(", ")", ")", ";", "assertTrue", "(", "elm2", ".", "isUnclosed", "(", ")", ")", ";", "assertTrue", "(", "elm3", ".", "isUnclosed", "(", ")", ")", ";", "}"], "memberFunctions": {"openedIsolatedTag": [["void"]], "interleavedTags": [["void"]], "newRegister": [["void"]], "testSimpleNesting": [["void"]], "unopenedTags": [["void"]], "element": [["ASTElement", "String name"]]}, "className": "OpenTagRegisterTest", "renamed": ["void", "function", "(", ")", "{", "ASTElement", "loc0", "=", "element", "(", "\"srini_string\"", ")", ";", "ASTElement", "loc1", "=", "element", "(", "\"srini_string\"", ")", ";", "ASTElement", "loc2", "=", "element", "(", "\"srini_string\"", ")", ";", "tagList", ".", "openTag", "(", "loc0", ")", ";", "tagList", ".", "openTag", "(", "loc1", ")", ";", "tagList", ".", "openTag", "(", "loc2", ")", ";", "tagList", ".", "closeTag", "(", "loc0", ")", ";", "assertFalse", "(", "loc0", ".", "isUnclosed", "(", ")", ")", ";", "assertTrue", "(", "loc1", ".", "isUnclosed", "(", ")", ")", ";", "assertTrue", "(", "loc2", ".", "isUnclosed", "(", ")", ")", ";", "}"], "nl": "&lt;a&gt; &lt;b&gt; &lt;b&gt; &lt;/a&gt;", "nlToks": ["<", "a", ">", "<", "b", ">", "<", "b", ">", "<", "/", "a", ">"], "path": "adangel/pmd/tree/master/pmd-visualforce/src/test/java/net/sourceforge/pmd/lang/vf/ast/OpenTagRegisterTest.java", "idx": 2889}
