void function ( ScriptOrFnNode arg0 ) { int loc0 = - 1 ; collectFuncNodes ( arg0 , loc0 , null ) ; }
Sha256Hash function ( File arg0 ) { FileInputStream loc0 = new FileInputStream ( arg0 ) ; try { return create ( ByteStreams . toByteArray ( loc0 ) ) ; } finally { loc0 . close ( ) ; } }
String function ( Object arg0 , boolean arg1 ) { String loc0 = readObjectID ( arg0 ) ; if ( loc0 == null && arg1 ) { loc0 = createObjectID ( arg0 ) ; } return loc0 ; }
Matcher < T > function ( T arg0 ) { return ComparatorMatcherBuilder . < T > usingNaturalOrdering ( ) . greaterThan ( arg0 ) ; }
int function ( ) { return denom ; }
GenericJSONBuilder function ( String arg0 ) { image = arg0 ; return this ; }
void function ( BundleContext arg0 ) { for ( AutoSIMConnectionConfig loc0 : config . connections ) { environments . deregisterConnectionFactory ( loc0 . name ) ; factories . remove ( loc0 . name ) ; } }
void function ( ) { mTestStream . seek ( 10 ) ; Assert . assertEquals ( 10 , mTestStream . read ( ) ) ; mTestStream . seek ( 2 ) ; Assert . assertEquals ( 2 , mTestStream . read ( ) ) ; mTestStream . seek ( mBlockSize ) ; Assert . assertEquals ( - 1 , mTestStream . read ( ) ) ; }
void function ( ) { final CountDownLatch loc0 = new CountDownLatch ( 1 ) ; WeakReference < Object > loc1 = new WeakReference < Object > ( new Object ( ) { @ Override protected void finalize ( ) { loc0 . countDown ( ) ; } } ) ; await ( loc0 ) ; awaitClear ( loc1 ) ; System . runFinalization ( ) ; }
void function ( ) { mManager = Mockito . mock ( TransferManager . class ) ; Upload loc0 = Mockito . mock ( Upload . class ) ; Mockito . when ( mManager . upload ( Mockito . any ( PutObjectRequest . class ) ) ) . thenReturn ( loc0 ) ; mStream = new S3ADirectOutputStream ( BUCKET_NAME , KEY , mManager ) ; }
String function ( Object arg0 , String arg1 ) { return getDocs ( arg0 , arg1 , "srini_string" , "srini_string" , "srini_string" ) ; }
Level function ( ) { return Level . WARNING ; }
boolean function ( String arg0 ) { return search ( root , arg0 . toCharArray ( ) , 0 ) ; }
void function ( ) { prodscan . close ( ) ; }
Map < String , String > function ( PropertyDTO [ ] arg0 ) { Map < String , String > loc0 = new HashMap < String , String > ( ) ; for ( PropertyDTO loc1 : arg0 ) { if ( loc1 . getValue ( ) != null ) { loc0 . put ( loc1 . getName ( ) , loc1 . getValue ( ) ) ; } } return loc0 ; }
String [ ] function ( String arg0 , Map < String , String > arg1 ) { return getNodes ( arg0 , arg1 , String . class ) ; }
boolean function ( Collection < Source > arg0 ) { return runToGoal ( arg0 , new GoalFactory ( ) { @ Override public Goal getGoal ( Job arg1 ) { return sourceExtension ( ) . getValidationGoal ( arg1 ) ; } } ) ; }
void function ( boolean arg0 ) { ContentResolver loc0 = context . getContentResolver ( ) ; Settings . Secure . setLocationProviderEnabled ( loc0 , LocationManager . GPS_PROVIDER , arg0 ) ; }
boolean function ( View arg0 ) { if ( Build . VERSION . SDK_INT >= VERSION_CODES . JELLY_BEAN_MR1 ) { return arg0 . getLayoutDirection ( ) == View . LAYOUT_DIRECTION_RTL ; } else { return false ; } }
Checklist function ( Object arg0 ) { Checklist loc0 ; java . lang . Class loc1 = arg0 . getClass ( ) ; while ( loc1 != null ) { loc0 = lookupChecklist ( loc1 ) ; if ( loc0 != null ) { return loc0 ; } loc1 = loc1 . getSuperclass ( ) ; } return null ; }
void function ( ) { int loc0 = 0 ; try { instance . setDay ( loc0 ) ; fail ( "srini_string" ) ; } catch ( IllegalArgumentException loc1 ) { } loc0 = 32 ; try { instance . setDay ( loc0 ) ; fail ( "srini_string" ) ; } catch ( IllegalArgumentException loc1 ) { } }
int function ( int arg0 , int arg1 ) { int loc0 = 0 ; return loc0 ; }
Matrix function ( Matrix arg0 ) { return ( transpose ( cofactor ( arg0 ) ) . multiplyByConstant ( 1.0 / determinant ( arg0 ) ) ) ; }
String function ( ) { return thisExitStatus . getExitCode ( ) ; }
boolean function ( Object arg0 ) { return ui . isHover ( ( Element ) arg0 ) ; }
List < AttributeStatementProvider > function ( ) { return attributeStatementProviders ; }
void function ( ) { if ( this . sounds != null ) { for ( Asset loc0 : this . sounds ) { game . getAssets ( ) . unload ( FileMap . resourcesToDirectory . get ( loc0 . assetType ) + loc0 . assetName ) ; } this . sounds = null ; } }
ProjectModel function ( String arg0 , UserModel arg1 ) { for ( ProjectModel loc0 : getProjectModels ( arg1 , true ) ) { if ( loc0 . arg0 . equalsIgnoreCase ( arg0 ) ) { return loc0 ; } } return null ; }
String function ( String arg0 ) { int loc0 = Integer . parseInt ( arg0 , 16 ) ; int loc1 = ( loc0 & 0xFF0000 ) >> 16 ; int loc2 = ( loc0 & 0xFF00 ) >> 8 ; int loc3 = ( loc0 & 0xFF ) ; return getClosestNamedColor ( loc1 , loc2 , loc3 ) ; }
String function ( ) { String loc0 = String . format ( "srini_string" , getSchema ( ) , getType ( ) , getName ( ) , getSuffixFromType ( ) ) ; return loc0 ; }
int function ( ) { return port ; }
Set < String > function ( ) { return jedis . keys ( "srini_string" ) ; }
void function ( ) { mBlocksToMoveIn . clear ( ) ; mBlocksToMoveOut . clear ( ) ; mBlocksToMoveInSize = mBlocksToMoveOutSize = 0L ; }
UserSubject function ( ) { return subject ; }
int function ( boolean arg0 ) { int loc0 = getIntFromFormat ( arg0 ) ; if ( loc0 == 0 ) { loc0 = 1 ; } return loc0 ; }
String function ( ) { return errorMsg ; }
boolean function ( symbol arg0 ) { return _all . containsKey ( arg0 . name ( ) ) ; }
String function ( Node arg0 ) { StringBuilder loc0 = new StringBuilder ( ) ; for ( Node loc1 : new IterableNodeList ( arg0 . getChildNodes ( ) ) ) { if ( loc1 instanceof Text || loc1 instanceof CDATASection ) { String loc2 = loc1 . getNodeValue ( ) ; if ( loc2 != null ) { loc0 . append ( loc2 ) ; } } } return loc0 . toString ( ) ; }
MarshalRegistry function ( Context arg0 ) { MarshalRegistry loc0 = arg0 . getProperty ( MarshalRegistry . class ) ; if ( loc0 == null ) { loc0 = new MarshalRegistry ( ) ; arg0 . setProperty ( loc0 ) ; } return loc0 ; }
List < T > function ( T arg0 , T arg1 ) { List < T > loc0 = new ArrayList < > ( 2 ) ; loc0 . add ( arg0 ) ; loc0 . add ( arg1 ) ; return loc0 ; }
void function ( ParametersMetaData arg0 ) { this . parametersMetaData = arg0 ; }
List < AbstractArgoJPanel > function ( ) { List < AbstractArgoJPanel > loc0 = new ArrayList < AbstractArgoJPanel > ( ) ; loc0 . add ( TestPanel . getInstance ( ) ) ; return loc0 ; }
void function ( byte [ ] arg0 ) { try { if ( arg0 . length != 0 ) { writer . writeStartElement ( "srini_string" ) ; writer . writeCharacters ( new String ( arg0 ) ) ; writer . writeEndElement ( ) ; } } catch ( XMLStreamException loc0 ) { throw new RuntimeException ( loc0 ) ; } }
String function ( ) { return this . isActive ; }
DataServer function ( final InetSocketAddress arg0 , final AlluxioWorkerService arg1 ) { try { return CommonUtils . createNewClassInstance ( Configuration . < DataServer > getClass ( PropertyKey . WORKER_DATA_SERVER_CLASS ) , new Class [ ] { InetSocketAddress . class , AlluxioWorkerService . class } , new Object [ ] { arg0 , arg1 } ) ; } catch ( Exception loc0 ) { throw Throwables . propagate ( loc0 ) ; } }
ECKey function ( ) { for ( ECKey loc0 : keys ) { try { if ( loc0 . getPrivKey ( ) != null ) return loc0 ; } catch ( IllegalStateException loc1 ) { } catch ( ECKey . MissingPrivateKeyException loc1 ) { } } return null ; }
void function ( ) { instrumentation = null ; }
void function ( long arg0 ) { this . maximumKeySize = arg0 ; }
Constant function ( String arg0 ) { if ( ts . hasField ( arg0 ) ) return ts . getVal ( arg0 ) ; else return s . getVal ( arg0 ) ; }
int function ( ) { return bip32HeaderPub ; }
long function ( ) { return value ; }
MenuItem function ( int arg0 ) { if ( mMenuItem != null ) { HoneycombMenuItem . setActionView ( mMenuItem , arg0 ) ; } return this ; }
void function ( ) { notificationController . deletePersistentNotification ( null , mockServerMessage ) ; }
void function ( double arg0 ) { if ( arg0 < 0 || arg0 >= 60 ) { throw new IllegalArgumentException ( "srini_string" ) ; } this . seconds = arg0 ; }
void function ( ServiceID arg0 ) { serviceID = arg0 ; }
int function ( ) { return RECORD_SIZE * numHeaders + FILE_PROLOGUE_BYTES ; }
T function ( ) { return mPayload ; }
String function ( ) { return DateTime . formatUTCtoSqlUTC ( this . addedDate ) ; }
List < DirectedAcyclicGraphNode < T >> function ( ) { return mChildren ; }
View function ( RecyclerView arg0 , View arg1 ) { for ( int loc0 = 0 ; loc0 < arg0 . getChildCount ( ) ; loc0 ++ ) { View loc1 = arg0 . getChildAt ( loc0 ) ; if ( ! itemIsObscuredByHeader ( arg0 , loc1 , arg1 , mOrientationProvider . getOrientation ( arg0 ) ) ) { return loc1 ; } } return null ; }
void function ( List < TestResultDetailsDTO > arg0 ) { this . regTestResultDetailsLst = arg0 ; }
long function ( ) { return this . testId ; }
void function ( ) { Date loc0 = new Date ( ) ; time . setTime ( loc0 ) ; Date loc1 = time . toDate ( loc0 ) ; assertEquals ( loc0 , loc1 ) ; assertEquals ( loc0 . getTime ( ) , loc1 . getTime ( ) ) ; }
void function ( BigDecimal arg0 ) { this . feedConfigId = arg0 ; }
void function ( String arg0 ) { this . writeCompressionType = arg0 ; }
boolean function ( Iterable < Range < C >> arg0 ) { for ( Range < C > loc0 : arg0 ) { if ( ! encloses ( loc0 ) ) { return false ; } } return true ; }
void function ( Map < String , Object > arg0 ) { this . vars . putAll ( arg0 ) ; }
boolean function ( ) { setOutputMode ( ) ; return this . buffer . hasRemaining ( ) ; }
int function ( ) { Object [ ] loc0 = new Object [ ] { SETSTRING , txnum , blk . fileName ( ) , blk . number ( ) , offset , oldval , newval } ; return logMgr . append ( loc0 ) ; }
DataFlowNode function ( Node arg0 ) { return dataFlowHandler . createDataFlowNode ( dataFlow , arg0 ) ; }
User function ( ) { if ( ! SecurityUtils . isAuthenticationEnabled ( ) ) { throw new IOException ( ExceptionMessage . AUTHENTICATION_IS_NOT_ENABLED . getMessage ( ) ) ; } return sUserThreadLocal . get ( ) ; }
boolean function ( String arg0 ) { if ( selectedRecipients . contains ( arg0 ) ) { return false ; } selectedRecipients . add ( arg0 ) ; return true ; }
void function ( ) { File loc0 = new File ( mTestFolder . getRoot ( ) , "srini_string" ) ; mException . expect ( IOException . class ) ; FileUtils . delete ( loc0 . getAbsolutePath ( ) ) ; Assert . fail ( "srini_string" ) ; }
boolean function ( String arg0 , OperationSigMask arg1 ) { for ( OperationSignature loc0 : operations . keySet ( ) ) { if ( arg1 . covers ( loc0 ) ) { if ( operations . get ( loc0 ) . containsKey ( arg0 ) ) { return true ; } } } return false ; }
boolean function ( Collection < UserModel > arg0 ) { return userService . updateUserModels ( arg0 ) ; }
void function ( String arg0 , Throwable arg1 ) { this . config . getServletContext ( ) . log ( this . config . getFilterName ( ) + "srini_string" + arg0 , arg1 ) ; }
void function ( final HttpServletRequest arg0 , final HttpServletResponse arg1 ) { writeResponse ( arg0 , arg1 , "srini_string" ) ; }
void function ( int arg0 ) { progressMonitor . arg0 = arg0 ; }
String function ( ) { return this . m_escapedJson ; }
void function ( NodeTester arg0 , short [ ] arg1 ) { NodeIterator loc0 = documentTraversal . createNodeIterator ( rootNode , NodeFilter . SHOW_ALL , new NodeTypeNodeFilter ( arg1 ) , true ) ; for ( Node loc1 = loc0 . loc1 ( ) ; loc1 != null ; loc1 = loc0 . loc1 ( ) ) { arg0 . testNode ( loc1 , this ) ; } arg0 . noMoreNodes ( this ) ; }
BlockStoreContext function ( InetSocketAddress arg0 ) { BlockStoreContext loc0 = CACHED_CONTEXTS . get ( arg0 ) ; if ( loc0 == null ) { loc0 = new BlockStoreContext ( arg0 ) ; CACHED_CONTEXTS . put ( arg0 , loc0 ) ; } return loc0 ; }
FSImageWriter function ( float arg0 ) { FSImageWriter loc0 = new FSImageWriter ( "srini_string" ) ; loc0 . setWriteCompressionMode ( ImageWriteParam . MODE_EXPLICIT ) ; loc0 . setWriteCompressionType ( "srini_string" ) ; loc0 . setWriteCompressionQuality ( arg0 ) ; return loc0 ; }
String function ( String arg0 ) { arg0 = conditionallyPrependHttp ( arg0 ) ; URL loc0 = new URL ( arg0 ) ; String loc1 = loc0 . getHost ( ) ; String loc2 = loc0 . getPath ( ) ; String loc3 = loc0 . getQuery ( ) ; return OMA_REDIRECT_LINK + SITE_PARAM + "srini_string" + loc1 + loc2 + "srini_string" + loc3 ; }
void function ( Map < String , ThreadingParameters > arg0 ) { threadingParametersMap = arg0 ; }
void function ( Language arg0 , CodeGenerator arg1 ) { if ( currLanguage == null ) { currLanguage = arg0 ; } generators . put ( arg0 , arg1 ) ; ArgoEventPump . fireEvent ( new ArgoGeneratorEvent ( ArgoEventTypes . GENERATOR_ADDED , arg1 ) ) ; LOG . debug ( "srini_string" + arg1 + "srini_string" + arg0 ) ; }
void function ( String arg0 , Object arg1 ) { context . setVariable ( arg0 , arg1 ) ; }
long function ( ) { return index ; }
void function ( ) { if ( bulletTime - System . nanoTime ( ) >= BULLET_INTERVAL && bullets . size ( ) < MAX_BULLETS ) { bullets . add ( new Bullet ( xPos , yPos , zPos , heading ) ) ; } }
GetOfferDetailsResponse . Return . DetailOfferData . OfferDisplay function ( ) { return new GetOfferDetailsResponse . Return . DetailOfferData . OfferDisplay ( ) ; }
long function ( ) { return acknowledgementInterval == null ? 0 : acknowledgementInterval . longValue ( ) ; }
void function ( ) { server . stopAsync ( ) ; server . awaitTerminated ( ) ; }
void function ( int arg0 , String arg1 , Position arg2 ) { StringBuffer loc0 = new StringBuffer ( arg1 . length ( ) + arg0 ) ; for ( int loc1 = 1 ; loc1 < arg0 ; loc1 ++ ) { loc0 . append ( "srini_string" ) ; } loc0 . append ( arg1 ) ; getQueue ( ) . enqueue ( ErrorInfo . DEBUG , loc0 . toString ( ) , arg2 ) ; }
Access function ( ) { return new Access ( ) ; }
void function ( String arg0 ) { this . failedAttributeName = arg0 ; }
List < String > function ( String arg0 ) { List < String > loc0 = CommonUtils . getUnixGroups ( arg0 ) ; return new ArrayList < > ( new LinkedHashSet < > ( loc0 ) ) ; }
void function ( ) { clientSession . getSocket ( ) . flush ( ) ; }
MetadataEditorCompat function ( int arg0 , String arg1 ) { if ( HAS_REMOTE_CONTROL_APIS ) { ( ( RemoteControlClient . MetadataEditor ) mActualMetadataEditor ) . putString ( arg0 , arg1 ) ; } return this ; }
void function ( ) { SpaceXGUI . getInstance ( ) . appendToConsole ( TAG , "srini_string" ) ; cmd . landing ( ) . doFor ( 2000 ) ; }
Builder function ( Map < String , String > arg0 ) { this . metadata = arg0 ; return this ; }
void function ( ) { assertTrue ( rmc . getVariation ( ) < 0 ) ; assertEquals ( CompassPoint . EAST , rmc . getDirectionOfVariation ( ) ) ; }
String function ( String arg0 ) { String loc0 = null ; if ( arg0 != null ) { loc0 = StringEscapeUtils . escapeJavaScript ( arg0 ) . replaceAll ( "srini_string" , "srini_string" ) ; } return loc0 ; }
String function ( ) { return wsseValueType ; }
GenericJSONBuilder function ( String arg0 ) { user_id = arg0 ; return this ; }
List < Resource > function ( ) { return resources ; }
boolean function ( String arg0 ) { return getString ( arg0 , null ) != null ; }
ResourceTypeHandler function ( final String arg0 ) { try { return ResourceTypeHandler . valueOf ( arg0 ) ; } catch ( Exception loc0 ) { return null ; } }
void function ( Notation arg0 ) { unhandled ( arg0 ) ; }
long function ( ) { long loc0 = getTotal ( ) ; if ( loc0 == 0 ) { return 0 ; } return getTotalElapsed ( ) / loc0 ; }
void function ( ) { this . errorLevel = 0 ; }
void function ( ) { try { rmb . setBearing ( - 0.001 ) ; fail ( "srini_string" ) ; } catch ( IllegalArgumentException loc0 ) { assertTrue ( loc0 . getMessage ( ) . contains ( "srini_string" ) ) ; } }
AlluxioURI function ( long arg0 ) { return mFileSystemMaster . getPath ( arg0 ) ; }
int function ( ) { return ( bytes [ 31 ] & 0xFF ) | ( ( bytes [ 30 ] & 0xFF ) << 8 ) | ( ( bytes [ 29 ] & 0xFF ) << 16 ) | ( ( bytes [ 28 ] & 0xFF ) << 24 ) ; }
int function ( ) { return tag ; }
Block function ( ) { return header ; }
FCKeditorConfig function ( ) { return config ; }
Difference function ( ) { return additionDifference ; }
String function ( ) { return version ; }
void function ( ) { Symbol loc0 ; if ( real_next >= real_stack . size ( ) ) return ; loc0 = real_stack . elementAt ( real_stack . size ( ) - 1 - real_next ) ; real_next ++ ; vstack . push ( new Integer ( loc0 . parse_state ) ) ; }
void function ( Object arg0 ) { Assert . assertTrue ( countDownLatch . await ( 1L , TimeUnit . SECONDS ) ) ; try { Assert . assertEquals ( arg0 , future . get ( ) ) ; } catch ( ExecutionException loc0 ) { throw loc0 . getCause ( ) ; } }
void function ( int arg0 ) { this . gisticID = arg0 ; }
long function ( K arg0 , long arg1 ) { return accumulateAndGet ( arg0 , arg1 , Long :: sum ) ; }
void function ( String [ ] arg0 ) { SshExample loc0 = new SshExample ( ) ; }
void function ( AbstractPlugin arg0 ) { arg0 . removePluginObserver ( this ) ; activePlugins . remove ( arg0 ) ; allPlugins . remove ( arg0 ) ; }
List < String > function ( String arg0 ) { return Lists . newArrayList ( arg0 ) ; }
void function ( ServiceID arg0 , int arg1 ) { bind ( arg0 , null , arg1 ) ; }
void function ( ) { System . out . println ( "srini_string" ) ; String loc0 = "srini_string" ; String loc1 = instance . getResponseStringCsv ( ) ; assertEquals ( loc0 , loc1 ) ; }
TextButton function ( TextButton arg0 , float arg1 , float arg2 , float arg3 , float arg4 , Skin arg5 ) { arg0 . setX ( arg1 ) ; arg0 . setY ( arg2 ) ; arg0 . setWidth ( arg3 ) ; arg0 . setHeight ( arg4 ) ; arg0 . getLabel ( ) . setStyle ( new LabelStyle ( arg5 . getFont ( "srini_string" ) , Color . BLACK ) ) ; return arg0 ; }
Sha256Hash function ( ) { return dataHash ; }
void function ( long arg0 ) { format . checkType ( 'r' , true ) ; packLong ( arg0 , true ) ; }
void function ( ) { assertFalse ( hdm . isTrue ( ) ) ; }
void function ( Signature . Visibility ... arg0 ) { visMask . removeAll ( Arrays . asList ( arg0 ) ) ; }
String function ( String arg0 ) { System . out . print ( arg0 ) ; return scanner . nextLine ( ) ; }
Options function ( ) { return new Options ( ) ; }
void function ( ) { vhw . setHeading ( 90.456 ) ; assertEquals ( 90.5 , vhw . getHeading ( ) , 0.1 ) ; }
Variable function ( Variable arg0 , Constraint arg1 ) { List < Variable > loc0 = arg1 . getScope ( ) ; if ( loc0 . size ( ) == 2 ) { if ( arg0 == loc0 . get ( 0 ) ) return loc0 . get ( 1 ) ; else if ( arg0 == loc0 . get ( 1 ) ) return loc0 . get ( 0 ) ; } return null ; }
double function ( ) { return occupancy ; }
java . lang . String function ( ) { return literalName ; }
void function ( Document arg0 , String arg1 ) { panel . setDocument ( arg0 , arg1 ) ; }
String function ( ) { return TodoParser . encode ( item . getHeadline ( ) ) ; }
String function ( ) { StringBuffer loc0 = new StringBuffer ( "srini_string" ) ; for ( Customer loc1 : customers ) { loc0 . append ( "srini_string" + loc1 . getName ( ) + "srini_string" + format ( loc1 . getNumberOfAccounts ( ) , "srini_string" ) + "srini_string" ) ; } return loc0 . toString ( ) ; }
double function ( ) { checkState ( count != 0 ) ; return min ; }
void function ( ) { System . out . println ( "srini_string" ) ; Device loc0 = null ; DeviceBlock loc1 = null ; DeviceBlock loc2 = loc0 . getDeviceBlock ( ) ; assertEquals ( loc1 , loc2 ) ; fail ( "srini_string" ) ; }
void function ( ) { SpaceXGUI . getInstance ( ) . appendToConsole ( TAG , "srini_string" ) ; cmd . down ( speed ) . doFor ( 1000 ) ; cmd . hover ( ) . doFor ( hoverTime ) ; }
void function ( ) { bufferSize = 0 ; }
byte [ ] function ( ) { return alertSigningKey ; }
String function ( Uri arg0 ) { E loc0 = getMatcherEntry ( arg0 ) ; return loc0 . getBaseType ( ) . getType ( ) + "srini_string" + loc0 . getSubType ( ) ; }
void function ( final short arg0 , final OutputStream arg1 ) { arg1 . write ( ( byte ) arg0 ) ; arg1 . write ( ( byte ) ( arg0 >> 8 ) ) ; }
void function ( double arg0 , D1Matrix64F arg1 , D1Matrix64F arg2 , D1Matrix64F arg3 ) { int loc0 = arg1 . getNumElements ( ) ; double loc1 = 0 ; for ( int loc2 = 0 ; loc2 < loc0 ; loc2 ++ ) { loc1 += arg1 . get ( loc2 ) * arg2 . get ( loc2 ) ; } for ( int loc2 = 0 ; loc2 < loc0 ; loc2 ++ ) { arg3 . set ( loc2 , arg2 . get ( loc2 ) + arg0 * arg1 . get ( loc2 ) * loc1 ) ; } }
boolean function ( Repository arg0 , String arg1 , String arg2 , OutputStream arg3 ) { return tar ( CompressorStreamFactory . XZ , arg0 , arg1 , arg2 , arg3 ) ; }
SearchConditionBuilder function ( String arg0 ) { return instance ( arg0 , Collections . < String , String > emptyMap ( ) ) ; }
void function ( Node arg0 , Set < T > arg1 , Class < T > arg2 ) { if ( null != arg0 ) { if ( ( null == arg2 ) || ( arg2 . equals ( arg0 . getClass ( ) ) ) ) { arg1 . add ( ( T ) arg0 ) ; } for ( int loc0 = 0 ; loc0 < arg0 . jjtGetNumChildren ( ) ; loc0 ++ ) { addNodeAndSubnodes ( arg0 . jjtGetChild ( loc0 ) , arg1 , arg2 ) ; } } }
boolean function ( MotionEvent arg0 ) { return ! view . onlyPenInput || ( view . onlyPenInput && ! Hardware . isPenEvent ( arg0 ) ) ; }
void function ( ) { if ( ! mc . getSecurityContext ( ) . isSecure ( ) ) { LOG . warning ( "srini_string" ) ; if ( blockUnsecureRequests ) { throw ExceptionUtils . toBadRequestException ( null , null ) ; } } }
void function ( ) { if ( workerPool != null && ! workerPool . isShutdown ( ) ) { workerPool . shutdown ( ) ; } }
String function ( String arg0 ) { Object loc0 = mMap . get ( arg0 ) ; return loc0 == null ? null : loc0 . toString ( ) ; }
void function ( ByteData arg0 ) { line . write ( arg0 . getData ( ) , 0 , arg0 . getLen ( ) ) ; }
int function ( ) { return sizeOf ( value ) ; }
boolean function ( ) { return parseRetain ; }
void function ( String arg0 ) { this . runStatus = arg0 ; }
void function ( ) { SpaceXGUI . getInstance ( ) . appendToConsole ( TAG , "srini_string" ) ; cmd . setLedsAnimation ( LEDAnimation . BLINK_RED , 3 , ( spinTime / 1000 ) ) ; cmd . spinRight ( spin90Speed ) . doFor ( spin90Time ) ; cmd . hover ( ) . doFor ( hoverTime ) ; }
Map < Long , Integer > function ( ) { Map < Long , Integer > loc0 = new HashMap < > ( ) ; Collection < ClientDetailsEntity > loc1 = clientService . getAllClients ( ) ; for ( ClientDetailsEntity loc2 : loc1 ) { loc0 . put ( loc2 . getId ( ) , 0 ) ; } return loc0 ; }
XPathContext function ( ) { try { XPathContext loc0 = ( XPathContext ) super . clone ( ) ; loc0 . path = new LinkedList < Level > ( ) ; for ( Level loc1 : path ) { loc0 . path . addLast ( loc1 . clone ( ) ) ; } return loc0 ; } catch ( CloneNotSupportedException loc0 ) { throw new RuntimeException ( "srini_string" , loc0 ) ; } }
int function ( byte [ ] arg0 ) { int loc0 = INDEX_HASHER . hashBytes ( arg0 ) . asInt ( ) % mNumBuckets ; return ( loc0 >= 0 ) ? loc0 : - loc0 ; }
void function ( ) { assertTrue ( instance . hasParser ( "srini_string" ) ) ; assertFalse ( instance . hasParser ( "srini_string" ) ) ; }
void function ( String arg0 ) { this . proxiesHeader = arg0 ; }
String function ( ) { return getXPath ( path . descendingIterator ( ) ) ; }
void function ( BigDecimal arg0 ) { this . runId = arg0 ; }
boolean function ( ) { assert _dot_pos <= _the_production . rhs_length ( ) ; return _dot_pos == _the_production . rhs_length ( ) ; }
void function ( ) { CompleteFileOptions loc0 = CompleteFileOptions . defaults ( ) ; Assert . assertEquals ( 0 , loc0 . getUfsLength ( ) ) ; }
Permission function ( final int arg0 ) { return ( Permission ) PERMISSIONS . get ( new Integer ( arg0 ) ) ; }
void function ( ) { cancelled = true ; }
JsonElement function ( Set < String > arg0 ) { return getAsArray ( arg0 , false ) ; }
void function ( ) { assertEquals ( 1.85 , vhw . getSpeedKmh ( ) , 0.01 ) ; }
void function ( ) { }
boolean function ( String arg0 ) { return s1 . hasField ( arg0 ) || s2 . hasField ( arg0 ) ; }
void function ( String arg0 , HttpServletRequest arg1 ) { arg1 . getSession ( ) . setAttribute ( EMAIL , arg0 ) ; }
FullyQualifiedClassType function ( ) { return handlerClass ; }
void function ( String arg0 , String arg1 ) { revisionInformation = RevisionManagement . getRevisionInformation ( arg0 , arg1 ) ; }
int function ( ) { return _size ; }
Spring function ( ) { return mSprings . get ( mControlSpringIndex ) ; }
ExtensionInfo function ( ) { return extensionInfo ; }
void function ( ) { try { empty = new RMBParser ( TalkerId . GP ) ; rmb = new RMBParser ( EXAMPLE ) ; } catch ( Exception loc0 ) { fail ( loc0 . getMessage ( ) ) ; } }
void function ( List < OAuthPermission > arg0 ) { this . scopes = arg0 ; }
Page < Ingredient > function ( Pageable arg0 ) { log . debug ( "srini_string" ) ; Page < Ingredient > loc0 = ingredientRepository . findAll ( arg0 ) ; return loc0 ; }
String function ( int arg0 , String [ ] arg1 ) { try { if ( arg0 < 0 ) { return "srini_string" ; } return arg1 [ arg0 ] . trim ( ) ; } catch ( ArrayIndexOutOfBoundsException loc0 ) { throw new RuntimeException ( "srini_string" + ( arg0 + 1 ) , loc0 ) ; } }
void function ( int arg0 ) { this . timeoutMillis = arg0 ; resetTimeout ( ) ; }
void function ( BoxFolder arg0 , int arg1 ) { String loc0 = "srini_string" ; for ( BoxItem . Info loc1 : arg0 ) { for ( int loc2 = 0 ; loc2 < arg1 ; loc2 ++ ) { loc0 += INDENT_APPEND ; } if ( loc1 instanceof BoxFolder . Info ) { BoxFolder loc2 = ( BoxFolder ) loc1 . getResource ( ) ; listFolder ( loc2 , arg1 + 1 ) ; } } }
void function ( ) { try { vCloseRequested = true ; socket . close ( ) ; } catch ( IOException loc0 ) { throw new RuntimeException ( loc0 ) ; } }
int function ( final MediaFormat arg0 ) { if ( mIsStarted ) throw new IllegalStateException ( "srini_string" ) ; final int loc0 = mMediaMuxer . addTrack ( arg0 ) ; if ( DEBUG ) Log . i ( TAG , "srini_string" + mEncoderCount + "srini_string" + loc0 + "srini_string" + arg0 ) ; return loc0 ; }
float function ( ) { return mFinal ; }
void function ( Map arg0 ) { notEmpty ( arg0 , "srini_string" ) ; }
void function ( ) { notificationController . registerUserSession ( null , mockServerMessage ) ; }
void function ( int arg0 ) { }
int function ( Tag arg0 ) { int loc0 ; loc0 = this . key . compareTo ( arg0 . key ) ; if ( loc0 != 0 ) { return loc0 ; } return this . value . compareTo ( arg0 . value ) ; }
boolean function ( int arg0 , float arg1 ) { if ( mDefaultSpacing == null ) { mDefaultSpacing = newSpacingResultArray ( ) ; } if ( ! FloatUtil . floatsEqual ( mDefaultSpacing [ arg0 ] , arg1 ) ) { mDefaultSpacing [ arg0 ] = arg1 ; return true ; } return false ; }
List < URL > function ( String arg0 , String arg1 ) { return findResources ( arg0 , arg1 , null ) ; }
void function ( QName arg0 ) { Level loc0 = path . getLast ( ) ; loc0 . attributes . put ( arg0 , new Level ( ATTR + getName ( arg0 ) ) ) ; }
ContentTypeInfo function ( Message arg0 ) { for ( ContentTypeRule loc0 : rules ) { ContentTypeInfo loc1 = loc0 . getContentType ( arg0 ) ; if ( loc1 != null ) { return loc1 ; } } return null ; }
GetOfferDetailsResponse . Return . DetailOfferData . FulfillmentPartner function ( ) { return new GetOfferDetailsResponse . Return . DetailOfferData . FulfillmentPartner ( ) ; }
void function ( ItemList < T > arg0 ) { this . items = arg0 ; }
boolean function ( T arg0 ) { if ( ! contains ( arg0 ) ) { return false ; } return mRoots . contains ( mIndex . get ( arg0 ) ) ; }
long function ( String arg0 ) { long loc0 = - 1 ; FileStatus loc1 = getFileStatus ( arg0 ) ; if ( loc1 != null ) { loc0 = loc1 . getLen ( ) ; } return loc0 ; }
void function ( ) { List < String > loc0 = instance . listParsers ( ) ; assertEquals ( SentenceId . values ( ) . length , loc0 . size ( ) ) ; for ( SentenceId loc1 : SentenceId . values ( ) ) { assertTrue ( loc0 . contains ( loc1 . name ( ) ) ) ; } }
long function ( ) { return tStop ; }
int function ( ) { return mStartCount ; }
int function ( ) { return p1 . recordsOutput ( ) * ii . recordsOutput ( ) ; }
List < String > function ( ) { return getStrings ( "srini_string" ) ; }
void function ( ) { events . clear ( ) ; }
void function ( ) { mClientRWLock = new ClientRWLock ( ) ; mReadLock = mClientRWLock . readLock ( ) ; mWriteLock = mClientRWLock . writeLock ( ) ; }
void function ( int arg0 ) { if ( arg0 < 0 || arg0 > 23 ) { throw new IllegalArgumentException ( "srini_string" ) ; } this . hour = arg0 ; }
Evictor function ( BlockMetadataManagerView arg0 , Allocator arg1 ) { try { return CommonUtils . createNewClassInstance ( Configuration . < Evictor > getClass ( PropertyKey . WORKER_EVICTOR_CLASS ) , new Class [ ] { BlockMetadataManagerView . class , Allocator . class } , new Object [ ] { arg0 , arg1 } ) ; } catch ( Exception loc0 ) { throw Throwables . propagate ( loc0 ) ; } }
long function ( ) { return issuedAt ; }
List < E > function ( Iterable < E > arg0 ) { ArrayList < E > loc0 = new ArrayList < E > ( ) ; for ( E loc1 : arg0 ) { loc0 . add ( loc1 ) ; } return loc0 ; }
UserAuthorities function ( final String arg0 ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "srini_string" + arg0 ) ; } Collection < String > loc0 = getUserAuthorities ( arg0 ) ; return ( loc0 . size ( ) > 0 ) ? new UserAuthorities ( arg0 , loc0 ) : null ; }
EigenDecomposition < DenseMatrix64F > function ( int arg0 , boolean arg1 ) { return new SwitchingEigenDecomposition ( arg0 , arg1 , 1e-8 ) ; }
void function ( ComparisonListener arg0 ) { compListeners . add ( arg0 ) ; }
int function ( ) { return mId ; }
Matrix function ( Matrix arg0 ) { Matrix loc0 = new Matrix ( arg0 . getNrows ( ) , arg0 . getNcols ( ) ) ; for ( int loc1 = 0 ; loc1 < arg0 . getNrows ( ) ; loc1 ++ ) { for ( int loc2 = 0 ; loc2 < arg0 . getNcols ( ) ; loc2 ++ ) { loc0 . setValueAt ( loc1 , loc2 , changeSign ( loc1 ) * changeSign ( loc2 ) * determinant ( createSubMatrix ( arg0 , loc1 , loc2 ) ) ) ; } } return loc0 ; }
void function ( boolean arg0 ) { this . cacheTokens = arg0 ; }
boolean function ( final File arg0 , final String arg1 ) { Pattern loc0 = Pattern . compile ( arg1 ) ; Matcher loc1 = loc0 . loc1 ( "srini_string" ) ; FileIterable loc2 = new FileIterable ( arg0 ) ; for ( String loc3 : loc2 ) { loc1 . reset ( loc3 ) ; if ( loc1 . find ( ) ) { return true ; } } return false ; }
ServletConfig function ( ) { return ( this . config ) ; }
Schema function ( ) { return sch ; }
void function ( ) { System . out . println ( "srini_string" ) ; long loc0 = 100L ; instance . setDuration ( loc0 ) ; }
boolean function ( ) { while ( true ) { if ( idx . next ( ) ) { ts . moveToRid ( idx . getDataRid ( ) ) ; return true ; } if ( ! s . next ( ) ) return false ; resetIndex ( ) ; } }
double function ( ) { checkState ( count ( ) != 0 ) ; return sumOfProductsOfDeltas / count ( ) ; }
void function ( ) { assertEquals ( 0 , zda . getLocalZoneMinutes ( ) ) ; }
void function ( String arg0 ) { this . startTime = arg0 ; }
boolean function ( String arg0 ) { return fields ( ) . contains ( arg0 ) ; }
boolean function ( Object arg0 ) { if ( this == arg0 ) { return true ; } if ( ! ( arg0 instanceof TtlBucket ) ) { return false ; } TtlBucket loc0 = ( TtlBucket ) arg0 ; return mTtlIntervalStartTimeMs == loc0 . mTtlIntervalStartTimeMs ; }
int function ( ) { return eig . getNumberOfEigenvalues ( ) ; }
CheckServiceAccessRequest function ( ) { return new CheckServiceAccessRequest ( ) ; }
void function ( String arg0 ) { this . feedId = arg0 ; }
void function ( ) { }
double [ ] function ( ) { return gammasU ; }
Bounds function ( Node arg0 ) { return arg0 . getBoundsInParent ( ) ; }
void function ( MapType arg0 ) { this . mapType = arg0 ; }
int function ( int arg0 , String arg1 ) { if ( arg0 <= 0 ) { throw new IllegalArgumentException ( XLog . format ( "srini_string" , arg1 , arg0 ) ) ; } return arg0 ; }
void function ( ) { String loc0 = "srini_string" ; mThrown . expect ( RuntimeException . class ) ; mThrown . expectMessage ( loc0 + "srini_string" ) ; new CustomAuthenticationProvider ( loc0 ) ; }
void function ( ) { SpringBolt loc0 = new SpringBolt ( TestBean . class , "srini_string" , "srini_string" ) ; loc0 . setScatterOutput ( true ) ; run ( loc0 ) ; verify ( outputCollectorMock ) . ack ( tupleMock ) ; verifyNoMoreInteractions ( outputCollectorMock ) ; }
Escaper function ( ) { return URL_PATH_SEGMENT_ESCAPER ; }
Long function ( ) { return seqNo ; }
BufferedByteWriter function ( byte arg0 ) { ensureCapacity ( 3 ) ; mWriter . putShort ( ( short ) 0 ) ; mWriter . put ( arg0 ) ; return this ; }
void function ( Class arg0 , Connection arg1 , PreparedStatement arg2 , ResultSet arg3 ) { closeAll ( arg0 . getName ( ) , arg1 , arg3 ) ; }
void function ( ClassdiagramNode arg0 ) { uplinks . add ( arg0 ) ; }
void function ( ) { Assert . assertEquals ( TieredBlockStoreTestUtils . TIER_PATH [ TEST_TIER_LEVEL ] . length , mTestTierView . getDirViews ( ) . size ( ) ) ; }
boolean function ( int arg0 ) { return periodsElements [ arg0 ] != null && periodsElements [ arg0 ] . size ( ) != 0 ; }
boolean function ( ) { return ! url . toLowerCase ( ) . startsWith ( "srini_string" ) && ! url . toLowerCase ( ) . startsWith ( "srini_string" ) ; }
Script function ( ECKey arg0 ) { return new ScriptBuilder ( ) . data ( arg0 . getPubKey ( ) ) . op ( OP_CHECKSIG ) . build ( ) ; }
void function ( Cookie [ ] arg0 ) { if ( arg0 != null ) { for ( Cookie loc0 : arg0 ) { this . addCookie ( loc0 ) ; } } }
double function ( ) { return x ; }
String function ( List < T > arg0 ) { StringBuilder loc0 = new StringBuilder ( ) ; for ( T loc1 : arg0 ) { if ( loc0 . length ( ) != 0 ) { loc0 . append ( "srini_string" ) ; } loc0 . append ( loc1 ) ; } return loc0 . toString ( ) ; }
int function ( ) { return _size ; }
int [ ] function ( ) { return originalMatrix . itemNames ; }
void function ( ) { if ( mReadResponse != null ) { mReadResponse . getPayloadDataBuffer ( ) . release ( ) ; mReadResponse = null ; } }
boolean function ( EntityMobWithInventory arg0 ) { if ( theTarget == null ) { return false ; } if ( theTarget . getEntityId ( ) == arg0 . getEntityId ( ) ) { arg0 . setAttackTarget ( null ) ; return false ; } if ( arg0 . getDistanceToEntity ( theTarget ) > 30.0D ) { return false ; } return true ; }
void function ( ) { numExceptional ++ ; double loc0 = 0.05 * numExceptional ; if ( loc0 > 1.0 ) loc0 = 1.0 ; double loc1 = 2.0 * ( rand . nextDouble ( ) - 0.5 ) * loc0 ; performImplicitSingleStep ( loc1 , true ) ; lastExceptional = steps ; }
boolean function ( lalr_item arg0 ) { return _all . containsKey ( arg0 ) ; }
RemoteBlockWriter function ( ) { try { return CommonUtils . createNewClassInstance ( Configuration . < RemoteBlockWriter > getClass ( PropertyKey . USER_BLOCK_REMOTE_WRITER_CLASS ) , null , null ) ; } catch ( Exception loc0 ) { throw Throwables . propagate ( loc0 ) ; } }
boolean function ( double arg0 , double arg1 , double arg2 ) { return arg0 == arg1 ? true : Math . abs ( arg0 - arg1 ) < arg2 ; }
CertificateChainInfo function ( ) { return chain ; }
int function ( ) { return toString ( ) . hashCode ( ) ; }
boolean function ( byte arg0 ) { return arg0 == SPACE || arg0 == HT ; }
EaseUI function ( ) { if ( instance == null ) { instance = new EaseUI ( ) ; } return instance ; }
void function ( Hessian2Output arg0 ) { if ( arg0 == null ) { return ; } arg0 . free ( ) ; _freeHessian2Output . free ( arg0 ) ; }
Date function ( ) { return this . expires ; }
void function ( ) { final RPCMessage loc0 = new RPCBlockReadRequest ( 0 , 0 , 0 , 0 , 0 ) ; mThrown . expect ( IllegalArgumentException . class ) ; mThrown . expectMessage ( ExceptionMessage . NO_RPC_HANDLER . getMessage ( loc0 . getType ( ) ) ) ; mHandler . channelRead0 ( mContext , loc0 ) ; }
File function ( ) { return runtimeManager . getFileOrFolder ( Keys . federation . proposalsFolder , "srini_string" ) ; }
Bus function ( ) { return bus ; }
ELEvaluator function ( Configuration arg0 , String arg1 ) { ELEvaluator loc0 = Services . get ( ) . get ( ELService . class ) . createEvaluator ( arg1 ) ; setConfigToEval ( loc0 , arg0 ) ; return loc0 ; }
double function ( Metrics . ClassMetricKey arg0 , ASTClassOrInterfaceDeclaration arg1 , boolean arg2 ) { Double loc0 = memo . get ( arg0 ) ; if ( ! arg2 && loc0 != null ) { return loc0 ; } ClassMetric loc1 = arg0 . getCalculator ( ) ; double loc2 = loc1 . computeFor ( arg1 , Metrics . getTopLevelPackageStats ( ) ) ; memo . put ( arg0 , loc2 ) ; return loc2 ; }
String function ( ) { return sender ; }
RepositoryCommit function ( String arg0 , String arg1 , RevCommit arg2 ) { RepositoryCommit loc0 = new RepositoryCommit ( arg0 , arg1 , arg2 ) ; return addCommit ( loc0 ) ; }
boolean function ( int arg0 , int arg1 ) { return steps . contains ( new Step ( arg0 , arg1 ) , false ) ; }
void function ( int arg0 ) { format . checkType ( 'i' , true ) ; packLong ( arg0 , true ) ; }
void function ( ) { }
Integer function ( byte [ ] arg0 , TFieldIdEnum arg1 , TFieldIdEnum ... arg2 ) { return ( Integer ) partialDeserializeField ( TType . I32 , arg0 , arg1 , arg2 ) ; }
void function ( int arg0 ) { taskMode = arg0 ; }
Date function ( ) { String loc0 = "srini_string" ; if ( this . request . getHeader ( loc0 ) == null ) return null ; return new Date ( this . request . getDateHeader ( loc0 ) ) ; }
void function ( Collection < String > arg0 ) { after . addAll ( arg0 ) ; }
void function ( String arg0 ) { to = arg0 ; }
void function ( Entity arg0 ) { this . source = arg0 ; }
void function ( ) { mWriter . close ( ) ; Assert . assertTrue ( mOutStream . isClosed ( ) ) ; Assert . assertFalse ( mOutStream . isCanceled ( ) ) ; mWriter . close ( ) ; Assert . assertTrue ( mOutStream . isClosed ( ) ) ; Assert . assertFalse ( mOutStream . isCanceled ( ) ) ; }
MetadataEditorCompat function ( boolean arg0 ) { Object loc0 ; if ( HAS_REMOTE_CONTROL_APIS ) { loc0 = ( ( RemoteControlClient ) mActualRemoteControlClient ) . editMetadata ( arg0 ) ; } else { loc0 = null ; } return new MetadataEditorCompat ( loc0 ) ; }
void function ( PersonBlogs arg0 , HashMap < String , HashMap < String , Integer >> arg1 ) { String loc0 = arg0 . getBloggerAgeClass ( ) ; for ( int loc1 = 0 ; loc1 < arg0 . getPosts ( ) . size ( ) ; loc1 ++ ) { String loc2 = arg0 . getPosts ( ) . get ( loc1 ) ; String [ ] loc3 = NaiveBayesTrain . cleanPost ( loc2 ) ; updateNaiveBayesMapForSinglePost ( loc3 , arg1 , loc0 ) ; } }
String function ( long arg0 , String arg1 ) { return arg1 + "srini_string" + ( System . nanoTime ( ) - arg0 ) + "srini_string" ; }
void function ( final HttpServletRequest arg0 ) { LOG . debug ( getRequestHeaders ( arg0 ) . toString ( ) ) ; }
void function ( boolean arg0 ) { LOG . info ( "srini_string" , mMaster . getName ( ) , mJournal . getCheckpointFilePath ( ) ) ; JournalInputStream loc0 = mReader . getCheckpointInputStream ( ) ; if ( arg0 ) { mMaster . processJournalCheckpoint ( loc0 ) ; } mLatestSequenceNumber = loc0 . getLatestSequenceNumber ( ) ; loc0 . close ( ) ; }
long function ( ) { return mTimeDelta ; }
void function ( byte [ ] arg0 ) { clientSession . getSocket ( ) . doWrite ( arg0 ) ; }
void function ( ) { String [ ] loc0 = { "srini_string" , "srini_string" , "srini_string" , "srini_string" , "srini_string" , "srini_string" } ; instance . setSatelliteIds ( loc0 ) ; String [ ] loc1 = instance . getSatelliteIds ( ) ; assertEquals ( loc0 . length , loc1 . length ) ; int loc2 = 0 ; for ( String loc3 : loc0 ) { assertEquals ( loc3 , loc1 [ loc2 ++ ] ) ; } }
void function ( String arg0 , int arg1 ) { connect ( InetAddress . getByName ( arg0 ) , arg1 ) ; }
long function ( ) { return index ; }
Constant function ( ) { return dataval ; }
void function ( String arg0 ) { this . wsseValueType = arg0 ; }
Map < String , String > function ( Parcel arg0 ) { if ( arg0 == null ) { return null ; } int loc0 = arg0 . readInt ( ) ; if ( loc0 == - 1 ) { return null ; } Map < String , String > loc1 = new HashMap < String , String > ( ) ; for ( int loc2 = 0 ; loc2 < loc0 ; loc2 ++ ) { String loc3 = arg0 . readString ( ) ; loc1 . put ( loc3 , arg0 . readString ( ) ) ; } return loc1 ; }
void function ( DenseMatrix64F arg0 , DenseMatrix64F arg1 , double arg2 ) { final int loc0 = param . getNumElements ( ) ; arg0 . set ( arg1 ) ; for ( int loc1 = 0 ; loc1 < loc0 ; loc1 ++ ) { arg0 . set ( loc1 , loc1 , arg0 . get ( loc1 , loc1 ) + arg2 ) ; } }
void function ( ComplexNode arg0 ) { this . singleNestedComplexNode = arg0 ; }
BoxFolder function ( String arg0 ) { return this . getFolder ( rootFolder , arg0 ) ; }
void function ( String arg0 ) { this . units = arg0 ; }
int function ( ) { return i ; }
void function ( String arg0 ) { webEngine . load ( arg0 ) ; }
void function ( PropertyChangeListener arg0 ) { propertyChangeSupport . addPropertyChangeListener ( arg0 ) ; }
String function ( ) { return xmiId ; }
boolean function ( ActivityRequest arg0 ) { if ( arg0 == null ) { return false ; } if ( arg0 . getFeedId ( ) == null ) { return false ; } return arg0 . getConfigProperties ( ) != null ; }
boolean function ( ) { return mCheckpointRead && ( mCheckpointOpenedTime == mCheckpointLastModifiedTime ) ; }
void function ( ) { Time loc0 = rmc . getTime ( ) ; assertNotNull ( loc0 ) ; assertEquals ( 12 , loc0 . getHour ( ) ) ; assertEquals ( 0 , loc0 . getMinutes ( ) ) ; assertEquals ( 44.567 , loc0 . getSeconds ( ) , 0.001 ) ; }
void function ( ) { }
void function ( ) { handleCharacterData ( ) ; listener . processGroupEnd ( ) ; groupDepth -- ; }
void function ( ) { File loc0 = storage . getBackupDir ( ) ; if ( loc0 == null ) return ; backup ( loc0 ) ; }
void function ( Constant arg0 , RID arg1 ) { beforeFirst ( arg0 ) ; DirEntry loc0 = leaf . insert ( arg1 ) ; leaf . close ( ) ; if ( loc0 == null ) return ; BTreeDir loc1 = new BTreeDir ( rootblk , dirTi , tx ) ; DirEntry loc2 = loc1 . insert ( loc0 ) ; if ( loc2 != null ) loc1 . makeNewRoot ( loc2 ) ; loc1 . close ( ) ; }
Map < Class < ? > , String > function ( ) { Map < Class < ? > , String > loc0 = new HashMap < > ( ) ; loc0 . putAll ( PRIMITIVE_TYPE_NAMES . asInverseWithShortName ( ) ) ; loc0 . putAll ( TYPES_BY_NAME . asInverseWithShortName ( ) ) ; return loc0 ; }
void function ( boolean arg0 ) { this . returnEntropy = arg0 ; }
String function ( ) { return this . request . getMethod ( ) ; }
int function ( ) { return ++ generatedClassSerial ; }
int function ( ) { return _index ; }
String function ( String arg0 ) { return selectile ( arg0 , new ArrayList < > ( ) , "srini_string" ) ; }
String function ( final HttpParams arg0 ) { if ( arg0 == null ) { throw new IllegalArgumentException ( "srini_string" ) ; } String loc0 = ( String ) arg0 . getParameter ( CoreProtocolPNames . HTTP_CONTENT_CHARSET ) ; if ( loc0 == null ) { loc0 = HTTP . DEFAULT_CONTENT_CHARSET ; } return loc0 ; }
void function ( int arg0 ) { if ( arg0 < 0 ) { arg0 += 65536 ; } processCharacter ( ( char ) arg0 ) ; skipBytes = state . unicodeAlternateSkipCount ; }
void function ( ) { acitivityController . registerUserSession ( null , mockServerMessage ) ; }
void function ( MessageWriter arg0 , String arg1 ) { if ( arg1 == null ) { throw new NullPointerException ( "srini_string" ) ; } writeAttribute ( arg0 , SOAP_ENCODING_REF_1_1 , arg1 ) ; }
String function ( ) { return this . content ; }
void function ( Config arg0 ) { this . config = arg0 ; }
Integer function ( ) { return this . _id ; }
BrowseOffersResponse . Return function ( ) { return new BrowseOffersResponse . Return ( ) ; }
Builder function ( final String arg0 ) { this . objectType = arg0 ; return this ; }
Script function ( byte [ ] arg0 ) { checkArgument ( arg0 . length == 20 ) ; return new ScriptBuilder ( ) . op ( OP_HASH160 ) . data ( arg0 ) . op ( OP_EQUAL ) . build ( ) ; }
String function ( ) { return getOAuthServerConfiguration ( ) . getOpenIDConnectUserInfoEndpointAccessTokenValidator ( ) ; }
ResourceTypeHandler function ( final String arg0 ) { ResourceTypeHandler loc0 = getResourceType ( arg0 ) ; return loc0 == null ? FILE : loc0 ; }
void function ( Double arg0 ) { mPendingQueue . add ( arg0 ) ; runIfIdle ( ) ; }
JPanel function ( ) { return uiStack . getLastElement ( ) ; }
LinearSolver < DenseMatrix64F > function ( boolean arg0 , boolean arg1 ) { QRColPivDecompositionHouseholderColumn_D64 loc0 = new QRColPivDecompositionHouseholderColumn_D64 ( ) ; if ( arg1 ) return new SolvePseudoInverseQrp ( loc0 , arg0 ) ; else return new LinearSolverQrpHouseCol ( loc0 , arg0 ) ; }
List < String > function ( ) { return acceptedC14nAlgorithms ; }
BigDecimal function ( ) { return this . successorId ; }
String function ( ) { return feedId ; }
List < NotationName > function ( ) { return Collections . unmodifiableList ( notations ) ; }
void function ( byte [ ] arg0 , int arg1 , int arg2 ) { format . checkType ( 'U' , false ) ; getByteArrayInternal ( getByteArrayLength ( ) , arg0 , arg1 , arg2 ) ; }
boolean function ( String arg0 ) { boolean loc0 = false ; for ( Card loc1 : enemyHandCards ) { if ( loc1 . getName ( ) . equals ( arg0 ) ) { loc0 = true ; } } return loc0 ; }
String function ( ) { return this . receiptDateType ; }
void function ( int arg0 ) { for ( int loc0 = 0 ; loc0 < arg0 ; loc0 ++ ) { blockFxThreadWithSemaphore ( ) ; sleep ( SEMAPHORE_SLEEP_IN_MILLIS , MILLISECONDS ) ; } }
long function ( ) { return lifetime ; }
boolean function ( String arg0 ) { return this . json . has ( arg0 ) ; }
void function ( ) { canvas . setForegroundColor ( color ) ; canvas . fillCircle ( xPosition , yPosition , diameter ) ; }
void function ( ) { initializeModelImplementation ( "srini_string" ) ; }
int function ( final int arg0 , final int arg1 ) { short loc0 = hi16 ( arg1 ) ; short loc1 = lo16 ( arg1 ) ; loc0 += ( ( loc1 << 2 ) + 0 ^ loc1 ) + ( arg0 ^ ( loc1 >>> 3 ) ) + 1 ; loc1 += ( ( loc0 << 2 ) + 2 ^ loc0 ) + ( arg0 ^ ( loc0 >>> 3 ) ) + 3 ; return result ( loc0 , loc1 ) ; }
Object function ( String arg0 ) { return parameters . get ( arg0 ) ; }
String function ( ) { return this . createdBy ; }
boolean function ( ) { if ( shortmine . isBuilding ( ) || longmine . isBuilding ( ) || smallfarm . isBuilding ( ) || largefarm . isBuilding ( ) || smallhouse . isBuilding ( ) || largehouse . isBuilding ( ) ) { return true ; } return false ; }
int function ( ) { checkState ( isOpCode ( ) ) ; return Script . decodeFromOpN ( opcode ) ; }
Book function ( Book arg0 ) { log . debug ( "srini_string" , arg0 ) ; Book loc0 = bookRepository . save ( arg0 ) ; return loc0 ; }
void function ( ) { URLConnection loc0 = null ; url = new URL ( composeURL ( "srini_string" ) ) ; loc0 = url . openConnection ( ) ; loc0 . connect ( ) ; DataInputStream loc1 = new DataInputStream ( new BufferedInputStream ( loc0 . getInputStream ( ) ) ) ; }
void function ( TreeModel arg0 ) { if ( goRules . contains ( arg0 ) ) { return ; } goRules . add ( arg0 ) ; }
void function ( String arg0 ) { this . resultMessage = arg0 ; }
long function ( ) { checkReady ( ) ; return mSessionId ; }
void function ( ) { Assert . assertEquals ( "srini_string" , new Mode ( ( short ) 0777 ) . toString ( ) ) ; Assert . assertEquals ( "srini_string" , new Mode ( ( short ) 0640 ) . toString ( ) ) ; Assert . assertEquals ( "srini_string" , new Mode ( ( short ) 0600 ) . toString ( ) ) ; Assert . assertEquals ( "srini_string" , new Mode ( ( short ) 0000 ) . toString ( ) ) ; }
void function ( double arg0 , DenseMatrix64F arg1 , DenseMatrix64F arg2 , DenseMatrix64F arg3 ) { int loc0 = arg2 . getNumElements ( ) ; int loc1 = 0 ; for ( int loc2 = 0 ; loc2 < loc0 ; loc2 ++ ) { double loc3 = arg2 . data [ loc2 ] ; for ( int loc4 = 0 ; loc4 < loc0 ; loc4 ++ ) { arg1 . data [ loc1 ++ ] += arg0 * loc3 * arg3 . data [ loc4 ] ; } } }
void function ( ) { Sentence loc0 = factory . createParser ( HDGTest . EXAMPLE ) ; assertNull ( event ) ; instance . sentenceRead ( new SentenceEvent ( this , loc0 ) ) ; assertNotNull ( event ) ; assertEquals ( 123.4 , event . getHeading ( ) , 0.1 ) ; assertFalse ( event . isTrue ( ) ) ; }
void function ( String arg0 ) { this . c14nAlgorithm = arg0 ; }
Response function ( String arg0 ) { return Response . serverError ( ) . entity ( arg0 ) . build ( ) ; }
Iterable < E > function ( final Iterable arg0 ) { return map ( arg0 , new Mapper < Object , E > ( ) { public E apply ( Object arg1 ) { return ( E ) arg1 ; } } ) ; }
Map < String , Object > function ( ) { return responseContext ; }
Sha256Hash function ( byte [ ] arg0 ) { try { MessageDigest loc0 = MessageDigest . getInstance ( "srini_string" ) ; return new Sha256Hash ( loc0 . loc0 ( arg0 ) ) ; } catch ( NoSuchAlgorithmException loc0 ) { throw new RuntimeException ( loc0 ) ; } }
T function ( Class < T > arg0 ) { return ( T ) services . get ( arg0 ) ; }
int function ( ) { return row ; }
String function ( ) { String loc0 = "srini_string" ; try { loc0 = address . getPostalZone ( ) . getValue ( ) ; } catch ( NullPointerException loc1 ) { } return loc0 ; }
void function ( String arg0 , String arg1 , Exception arg2 ) { popupError ( Inter . get ( "srini_string" ) + "srini_string" + arg0 + "srini_string" + arg1 + "srini_string" + arg2 . toString ( ) ) ; }
void function ( String arg0 ) { _specificityC ++ ; addCondition ( Condition . createLangCondition ( arg0 ) ) ; }
long function ( JSONObject arg0 , String arg1 ) { Long loc0 = ( Long ) arg0 . get ( arg1 ) ; return ( loc0 != null ) ? loc0 : 0 ; }
void function ( String arg0 ) { this . experimentTypes = arg0 ; }
PasswordCredentials function ( ) { return passwordCredentials ; }
String function ( ) { return reason ; }
void function ( ) { CheckMatrixMultShape loc0 = new CheckMatrixMultShape ( MatrixMatrixMult . class ) ; loc0 . checkAll ( ) ; }
void function ( ) { for ( int loc0 = 0 ; loc0 < PROPS . size ( ) ; loc0 ++ ) ( ( AbstractSettings ) PROPS . get ( loc0 ) ) . revertToDefault ( ) ; }
void function ( ArgoDiagramAppearanceEvent arg0 , ArgoDiagramAppearanceEventListener arg1 ) { switch ( arg0 . getEventType ( ) ) { case ArgoEventTypes . DIAGRAM_FONT_CHANGED : arg1 . diagramFontChanged ( arg0 ) ; break ; default : LOG . error ( "srini_string" + arg0 . getEventType ( ) ) ; break ; } }
boolean function ( int arg0 ) { double loc0 = Math . abs ( diag [ arg0 ] ) + Math . abs ( diag [ arg0 + 1 ] ) ; return ( Math . abs ( off [ arg0 ] ) <= loc0 * UtilEjml . EPS ) ; }
void function ( InputStream arg0 ) { BufferedReader loc0 = new BufferedReader ( new InputStreamReader ( arg0 ) ) ; while ( true ) { String loc1 = loc0 . readLine ( ) ; if ( loc1 == null ) break ; System . out . println ( "srini_string" + loc1 ) ; } System . out . println ( ) ; }
boolean function ( Message arg0 ) { return Boolean . TRUE . equals ( arg0 . get ( Message . PARTIAL_RESPONSE_MESSAGE ) ) ; }
void function ( OutputFieldsDeclarer arg0 ) { String loc0 = getOutputStreamId ( ) ; Fields loc1 = new Fields ( outputFields ) ; logger . info ( "srini_string" , new Object [ ] { this , loc1 , loc0 } ) ; arg0 . declareStream ( loc0 , loc1 ) ; }
void function ( ) { for ( int loc0 = 0 ; loc0 < TieredBlockStoreTestUtils . TIER_PATH [ TEST_TIER_LEVEL ] . length ; loc0 ++ ) { Assert . assertEquals ( loc0 , mTestTierView . getDirView ( loc0 ) . getDirViewIndex ( ) ) ; } }
Document function ( ) { DOMResult loc0 = new DOMResult ( ) ; transformTo ( loc0 ) ; return ( Document ) loc0 . getNode ( ) ; }
URI function ( ) { return this . uri ; }
T function ( ) { try { return acquire ( 100 , TimeUnit . DAYS ) ; } catch ( TimeoutException loc0 ) { throw Throwables . propagate ( loc0 ) ; } }
void function ( ) { if ( mIn != null ) { mIn . close ( ) ; } if ( mOut != null ) { mOut . close ( ) ; } }
int function ( ) { return column ; }
void function ( byte [ ] arg0 ) { if ( arg0 . length != mixednumber . length ) throw new IllegalArgumentException ( "srini_string" ) ; for ( int loc0 = 0 ; loc0 < mixednumber . length ; loc0 ++ ) mixednumber [ loc0 ] ^= arg0 [ loc0 ] ; }
double function ( Metrics . OperationMetricKey arg0 , ASTMethodOrConstructorDeclaration arg1 , boolean arg2 ) { QualifiedName loc0 = arg1 . getQualifiedName ( ) ; ClassStats loc1 = getClassStats ( loc0 , false ) ; return loc1 == null ? Double . NaN : loc1 . compute ( arg0 , arg1 , loc0 . getOperation ( ) , arg2 ) ; }
void function ( ) { runTest ( "srini_string" , new YahooImageFactory ( null ) , 763 ) ; }
void function ( String arg0 ) { if ( ALIAS_PATTERN . matcher ( arg0 ) . matches ( ) ) { arg0 = arg0 . substring ( ALIAS_PREFIX . length ( ) ) ; StrongSwanApplication . getContext ( ) . deleteFile ( FILE_PREFIX + arg0 ) ; } }
void function ( AuthType arg0 ) { if ( arg0 != AuthType . SIMPLE && arg0 != AuthType . CUSTOM ) { throw new UnsupportedOperationException ( "srini_string" + arg0 . getAuthName ( ) + "srini_string" ) ; } }
void function ( MediaRouter arg0 ) { if ( mActualRemoteControlClient != null ) { arg0 . addRemoteControlClient ( mActualRemoteControlClient ) ; } }
void function ( ) { initializeModelImplementation ( "srini_string" ) ; }
boolean function ( ) { return ( mob . getPositionVector ( ) . distanceTo ( buildingSpot ) < 1 ) ; }
long function ( ) { return k ; }
int function ( ) { return _size ; }
String [ ] function ( ) { if ( Build . VERSION . SDK_INT < Build . VERSION_CODES . LOLLIPOP ) { return new String [ ] { Build . CPU_ABI , Build . CPU_ABI2 } ; } else { return LollipopSysdeps . getSupportedAbis ( ) ; } }
void function ( ) { server . stop ( ) ; }
Map < String , String > function ( ) { return headers ; }
void function ( String arg0 ) { for ( Iterator loc0 = resourceExtensions . iterator ( ) ; loc0 . hasNext ( ) ; ) { String loc1 = ( String ) loc0 . next ( ) ; if ( loc1 . equals ( arg0 ) ) { resourceExtensions . remove ( loc1 ) ; break ; } } }
SearchFactory function ( ) { if ( instance == null ) instance = new SearchFactory ( ) ; return instance ; }
void function ( ) { System . out . println ( "srini_string" ) ; ComPortController . listComPorts ( ) ; fail ( "srini_string" ) ; }
void function ( ) { String loc0 = CustomAuthenticationProviderTest . class . getName ( ) ; mThrown . expect ( RuntimeException . class ) ; mThrown . expectMessage ( loc0 + "srini_string" ) ; new CustomAuthenticationProvider ( loc0 ) ; }
void function ( String arg0 ) { this . errorDescription = arg0 ; }
boolean function ( String arg0 ) { return prodscan . hasField ( arg0 ) ; }
boolean function ( String arg0 ) { return ! findSinkByMethodSignature ( arg0 ) . isEmpty ( ) ; }
void function ( ) { URL loc0 = ClassLoader . getSystemResource ( "srini_string" ) ; PSTFile loc1 = new PSTFile ( new File ( loc0 . toURI ( ) ) ) ; Assert . assertEquals ( "srini_string" , loc1 . getMessageStore ( ) . isPasswordProtected ( ) , false ) ; }
void function ( String arg0 , double arg1 , int arg2 ) { Point2D loc0 = new Point2D ( - Math . sin ( arg2 * Math . PI / 180.0 ) * arg1 , Math . cos ( arg2 * Math . PI / 180.0 ) * arg1 ) ; links . addVertex ( arg0 ) ; locationPositions . put ( arg0 , loc0 ) ; }
List < String > function ( ) { return mnemonicCode ; }
int function ( String arg0 ) { return offsets . get ( arg0 ) ; }
void function ( BundleContext arg0 ) { for ( AutoSIMDeviceConfig loc0 : config . devices ) { environments . deregisterConnectionFactory ( loc0 . name ) ; factories . remove ( loc0 . name ) ; } }
boolean function ( long arg0 ) { return mOutputFileIndex . containsKey ( arg0 ) ; }
RepeatStatus function ( StepContribution arg0 , ChunkContext arg1 ) { JobExitStatus loc0 = fetcherExecutionContextImpl . captureSourceMetadata ( ) ; arg0 . setExitStatus ( loc0 . getExitStatus ( ) ) ; return RepeatStatus . FINISHED ; }
int function ( ) { final View loc0 = findOneVisibleChild ( layoutManager . getChildCount ( ) - 1 , - 1 , false , true ) ; return loc0 == null ? RecyclerView . NO_POSITION : recyclerView . getChildAdapterPosition ( loc0 ) ; }
String function ( ConfigurationKey arg0 , String arg1 ) { return config . getString ( arg0 , arg1 ) ; }
int function ( Buffer arg0 , int arg1 , String arg2 , String arg3 ) { Block loc0 = arg0 . block ( ) ; if ( isTempBlock ( loc0 ) ) return - 1 ; else return new SetStringRecord ( txnum , loc0 , arg1 , arg2 , arg3 ) . writeToLog ( ) ; }
GenericJSONBuilder function ( String arg0 ) { place_name = arg0 ; return this ; }
DiffBuilder function ( ) { ignoreComments = true ; return this ; }
ResponseEntity < Void > function ( @ PathVariable String arg0 ) { log . debug ( "srini_string" , arg0 ) ; dishCollectionService . delete ( arg0 ) ; return ResponseEntity . ok ( ) . headers ( HeaderUtil . createEntityDeletionAlert ( "srini_string" , arg0 . toString ( ) ) ) . build ( ) ; }
CategoricalDistribution function ( RandomVariable [ ] arg0 , AssignmentProposition [ ] arg1 , BayesianNetwork arg2 , int arg3 ) { double [ ] loc0 = new double [ ProbUtil . expectedSizeOfCategoricalDistribution ( arg0 ) ] ; for ( int loc1 = 0 ; loc1 < arg3 ; loc1 ++ ) { Pair < Map < RandomVariable , Object > , Double > loc2 = weightedSample ( arg2 , arg1 ) ; loc0 [ ProbUtil . indexOf ( arg0 , loc2 . getFirst ( ) ) ] += loc2 . getSecond ( ) ; } return new ProbabilityTable ( loc0 , arg0 ) . normalize ( ) ; }
int function ( Object arg0 ) { int loc0 = _prime ; int loc1 = hashCode ( arg0 ) % loc0 ; final Object [ ] loc2 = _keys ; while ( true ) { Object loc3 = loc2 [ loc1 ] ; if ( loc3 == null ) { return NULL ; } else if ( loc3 == arg0 ) { return _values [ loc1 ] ; } loc1 = ( loc1 + 1 ) % loc0 ; } }
byte [ ] function ( ) { int loc0 = getByteArrayLength ( ) ; byte [ ] loc1 = new byte [ loc0 ] ; getByteArrayInternal ( loc0 , loc1 , 0 , loc0 ) ; return loc1 ; }
SAMLSSOReqValidationResponseDTO function ( String arg0 ) { SPInitLogoutRequestProcessor loc0 = new SPInitLogoutRequestProcessor ( ) ; SAMLSSOReqValidationResponseDTO loc1 = loc0 . process ( null , arg0 , null ) ; return loc1 ; }
void function ( PropertyChangeListener arg0 , Object arg1 ) { addElementListener ( arg0 , arg1 ) ; }
long function ( ) { return tStart ; }
RegistrationRequest function ( ) { return new RegistrationRequest ( ) ; }
boolean function ( Object arg0 , SuffixFilter [ ] arg1 ) { if ( ! ( arg0 instanceof File ) ) { return false ; } String loc0 = ( ( File ) arg0 ) . getName ( ) ; if ( arg1 != null ) { for ( int loc1 = 0 ; loc1 < arg1 . length ; loc1 ++ ) { if ( loc0 . endsWith ( arg1 [ loc1 ] . getSuffix ( ) ) ) { return true ; } } } return false ; }
Crypto function ( ) { return signatureCrypto ; }
void function ( ) { maxMemory = 0 ; }
void function ( File arg0 ) { this . sourceCodeFile = arg0 ; }
void function ( Node arg0 ) { closed . removeValue ( arg0 , false ) ; }
String function ( ) { return new String ( _messageBody , _encoding ) ; }
void function ( Path arg0 , int [ ] arg1 ) { model . moveCharacter ( arg0 , arg1 ) ; }
boolean function ( ) { return ignoreExceptions ; }
int function ( int arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { StringBuilder loc2 = new StringBuilder ( ) ; for ( String loc3 : components ) { if ( loc2 . length ( ) > 0 ) { loc2 . append ( DELIMITER_STRING ) ; } loc2 . append ( loc3 ) ; } loc0 ^= loc2 . toString ( ) . length ( ) ; } return loc0 ; }
void function ( Map < String , List < String >> arg0 ) { for ( String loc0 : arg0 . keySet ( ) ) { SortedSet < String > loc1 = get ( loc0 ) ; if ( loc1 == null ) { loc1 = new TreeSet < String > ( ) ; put ( loc0 , loc1 ) ; } loc1 . addAll ( arg0 . get ( loc0 ) ) ; } }
int function ( ) { int loc0 = 0 ; for ( Constant loc1 : vals . values ( ) ) loc0 += loc1 . hashCode ( ) ; return loc0 ; }
int function ( int arg0 , int arg1 ) { int loc0 = 0 ; return loc0 ; }
String function ( ) { return transformedTokenIdentifier ; }
void function ( String arg0 ) { this . loadedInCats = arg0 ; }
int function ( ) { return this . decisions ; }
String function ( Date arg0 ) { return formatUTC ( arg0 , DateTimeFormat . SQL , true ) ; }
int function ( ) { return mSize ; }
void function ( ) { final Preferences loc0 = Preferences . userRoot ( ) ; loc0 . putDouble ( PrefKeys . LAST_VERSION , getVersion ( ) ) ; }
String function ( ) { return host ; }
RepositoryCommit function ( RepositoryCommit arg0 ) { if ( commits . add ( arg0 ) ) { authorCount = - 1 ; return arg0 ; } return null ; }
void function ( ) { assertEquals ( cal . get ( Calendar . MONTH ) + 1 , instance . getMonth ( ) ) ; }
int function ( ) { TableInfo loc0 = new TableInfo ( "srini_string" , schema ( ) ) ; int loc1 = BLOCK_SIZE / loc0 . recordLength ( ) ; int loc2 = si . recordsOutput ( ) / loc1 ; return HashIndex . searchCost ( loc2 , loc1 ) ; }
void function ( List < Node > arg0 , RuleContext arg1 , Language arg2 ) { RuleChainVisitor loc0 = getRuleChainVisitor ( arg2 ) ; if ( loc0 != null ) { loc0 . visitAll ( arg0 , arg1 ) ; } }
Builder function ( ) { return new Builder ( ) . fromAddressPair ( this ) ; }
void function ( int arg0 , String arg1 ) { if ( errorElement == null ) { errorElement = document . createElement ( "srini_string" ) ; document . getDocumentElement ( ) . appendChild ( errorElement ) ; } errorElement . setAttribute ( "srini_string" , String . valueOf ( arg0 ) ) ; if ( Utils . isNotEmpty ( arg1 ) ) errorElement . setAttribute ( "srini_string" , arg1 ) ; }
void function ( final String arg0 ) { this . instanceName = arg0 ; }
boolean function ( Combination arg0 ) { if ( configurations . containsKey ( arg0 . toString ( ) ) ) { return configurations . get ( arg0 . toString ( ) ) ; } return false ; }
void function ( boolean arg0 ) { progressMonitor . consoleMode = arg0 ; }
boolean function ( StringBuilder arg0 , String arg1 , String arg2 ) { String loc0 = HTTPTransportUtils . getRawQueryStringParameter ( arg1 , arg2 ) ; if ( loc0 == null ) { return false ; } if ( arg0 . length ( ) > 0 ) { arg0 . append ( '&' ) ; } arg0 . append ( loc0 ) ; return true ; }
Object function ( String arg0 , Scriptable arg1 ) { if ( arg0 . equals ( "srini_string" ) ) return new Integer ( dim ) ; return NOT_FOUND ; }
Vector function ( ) { return new Vector ( newFeatures ) ; }
ClassStats function ( String arg0 , boolean arg1 ) { if ( arg1 && ! nestedClasses . containsKey ( arg0 ) ) { nestedClasses . put ( arg0 , new ClassStats ( ) ) ; } return nestedClasses . get ( arg0 ) ; }
void function ( String arg0 ) { this . gene = arg0 ; }
void function ( String arg0 ) { if ( ! containsLocation ( arg0 ) ) { resourceLocations . add ( arg0 ) ; } }
void function ( JournalEntry arg0 ) { if ( mIsClosed ) { throw new IOException ( ExceptionMessage . JOURNAL_WRITE_AFTER_CLOSE . getMessage ( ) ) ; } mJournal . getJournalFormatter ( ) . serialize ( arg0 . toBuilder ( ) . setSequenceNumber ( mNextEntrySequenceNumber ++ ) . build ( ) , mOutputStream ) ; }
boolean function ( byte arg0 ) { return HTTP_CONTROLS [ arg0 ] ; }
void function ( final String arg0 , final CookieSpecFactory arg1 ) { if ( arg0 == null ) { throw new IllegalArgumentException ( "srini_string" ) ; } if ( arg1 == null ) { throw new IllegalArgumentException ( "srini_string" ) ; } registeredSpecs . put ( arg0 . toLowerCase ( Locale . ENGLISH ) , arg1 ) ; }
BoundingBox function ( BoundingBox arg0 ) { latMin = Math . max ( latMin , arg0 . latMin ) ; lonMin = Math . max ( lonMin , arg0 . lonMin ) ; latMax = Math . min ( latMax , arg0 . latMax ) ; lonMax = Math . min ( lonMax , arg0 . lonMax ) ; return this ; }
ExtensionMechanismsHelper function ( ) { return impl ; }
GeneralRange < T > function ( Comparator < ? super T > arg0 , @ Nullable T arg1 , BoundType arg2 , @ Nullable T arg3 , BoundType arg4 ) { return new GeneralRange < T > ( arg0 , true , arg1 , arg2 , true , arg3 , arg4 ) ; }
void function ( InputStream arg0 , RuleSets arg1 , RuleContext arg2 ) { try { processSourceCode ( new InputStreamReader ( arg0 , configuration . getSourceEncoding ( ) ) , arg1 , arg2 ) ; } catch ( UnsupportedEncodingException loc0 ) { throw new PMDException ( "srini_string" + loc0 . getMessage ( ) ) ; } }
void function ( ) { String loc0 = "srini_string" ; client . setClientId ( loc0 ) ; service . clearApprovedSitesForClient ( client ) ; Mockito . when ( repository . getByClientId ( loc0 ) ) . thenReturn ( new HashSet < ApprovedSite > ( ) ) ; Mockito . verify ( repository , never ( ) ) . remove ( any ( ApprovedSite . class ) ) ; }
void function ( String arg0 , String arg1 ) { mapping . put ( arg0 , arg1 ) ; try { writer . setPrefix ( arg0 , arg1 ) ; } catch ( XMLStreamException loc0 ) { throw new SAXException ( loc0 ) ; } }
ClassLoader function ( ClassLoader arg0 , Class < ? > [ ] arg1 ) { if ( canSeeAllInterfaces ( arg0 , arg1 ) ) { return arg0 ; } ProxyClassLoader loc0 = new ProxyClassLoader ( arg0 , arg1 ) ; for ( Class < ? > loc1 : arg1 ) { loc0 . addLoader ( loc1 . getClassLoader ( ) ) ; } return loc0 ; }
void function ( ) { mTestStream = new TestBufferedBlockOutStream ( 1L , BLOCK_LENGTH , BlockStoreContext . get ( ) ) ; }
Constant function ( String arg0 ) { if ( sch . type ( arg0 ) == INTEGER ) return new IntConstant ( rf . getInt ( arg0 ) ) ; else return new StringConstant ( rf . getString ( arg0 ) ) ; }
NodeVisitor function ( Node arg0 , Node arg1 ) { return enter ( arg1 ) ; }
ThreadFactoryBuilder function ( ThreadFactory arg0 ) { this . backingThreadFactory = checkNotNull ( arg0 ) ; return this ; }
Vector < ClassdiagramNode > function ( ) { return new Vector < ClassdiagramNode > ( downlinks ) ; }
Long function ( ) { return testId ; }
String function ( Object arg0 ) { if ( arg0 instanceof Fig ) { arg0 = ( ( Fig ) arg0 ) . getOwner ( ) ; } if ( arg0 == null ) return null ; if ( arg0 instanceof CommentEdge ) { return ( String ) ( ( CommentEdge ) arg0 ) . getUUID ( ) ; } return Model . getFacade ( ) . getUUID ( arg0 ) ; }
long function ( String arg0 , long arg1 ) { String loc0 = getString ( arg0 , null ) ; if ( StringUtils . isEmpty ( loc0 ) ) { return arg1 ; } return com . gitblit . utils . FileUtils . convertSizeToLong ( loc0 , arg1 ) ; }
String function ( String arg0 ) { StringBuffer loc0 = new StringBuffer ( ) ; int loc1 = arg0 . length ( ) ; for ( int loc2 = 0 ; loc2 < loc1 ; loc2 ++ ) { int loc3 = arg0 . charAt ( loc2 ) ; append ( loc0 , loc3 ) ; } return loc0 . toString ( ) ; }
Timestamp function ( ) { return this . createdDate ; }
ELEvaluator function ( Element arg0 , SyncCoordAction arg1 , Configuration arg2 ) { return createInstancesELEvaluator ( "srini_string" , arg0 , arg1 , arg2 ) ; }
QName function ( ) { return qname ; }
void function ( TransformerFactory arg0 ) { factory = arg0 ; }
int function ( ) { return mix ( gen . getAndIncrement ( ) ) ; }
void function ( Exchange arg0 ) { }
Executor function ( ) { return new Executor ( ) { @ Override public void execute ( Runnable arg0 ) { MoreExecutors . newThread ( serviceName ( ) , arg0 ) . start ( ) ; } } ; }
void function ( ) { rmb . setOriginId ( "srini_string" ) ; assertTrue ( rmb . toString ( ) . contains ( "srini_string" ) ) ; assertEquals ( "srini_string" , rmb . getOriginId ( ) ) ; }
Object function ( String arg0 ) { for ( Object loc0 : obsoleteFeatures ) { if ( arg0 . equals ( Model . getFacade ( ) . getName ( loc0 ) ) ) { return loc0 ; } } return null ; }
void function ( AbstractDosPlugin arg0 ) { String loc0 = arg0 . getVersion ( ) ; assertTrue ( loc0 . length ( ) > 0 ) ; }
Object function ( String arg0 ) { for ( Object loc0 : obsoleteFeatures ) { if ( Model . getFacade ( ) . isAAttribute ( loc0 ) && arg0 . equals ( Model . getFacade ( ) . getName ( loc0 ) ) ) { return loc0 ; } } return null ; }
Timestamp function ( ) { return this . endDate ; }
String function ( String arg0 , String arg1 , String arg2 , String arg3 , String arg4 , String arg5 , String arg6 ) { return String . format ( "srini_string" % s + "srini_string" % s + "srini_string" % s % s + "srini_string" + "srini_string" , arg2 , arg3 , arg0 , arg1 , arg4 , arg5 , arg6 ) ; }
String function ( ) { return applicationDescription ; }
void function ( ) { double loc0 = instance . getVerticalDOP ( ) ; assertEquals ( 1.0 , loc0 , 0.001 ) ; }
String function ( ) { return code ; }
void function ( ) { time . setMinutes ( 30 ) ; assertEquals ( 30 , time . getMinutes ( ) ) ; }
SignatureProperties function ( ) { return signatureProperties ; }
long function ( K arg0 , long arg1 , LongBinaryOperator arg2 ) { checkNotNull ( arg2 ) ; return getAndUpdate ( arg0 , oldValue -> arg2 . applyAsLong ( oldValue , arg1 ) ) ; }
void function ( Object arg0 ) { }
Method function ( final String arg0 ) { return getMethod ( arg0 , false ) ; }
void function ( String arg0 , Exception arg1 ) { if ( sIsLogEnabled ) { Log . e ( sApplicationTag , getContent ( getCurrentStackTraceElement ( ) ) + "srini_string" + arg1 . getMessage ( ) + "srini_string" + arg1 . getStackTrace ( ) + "srini_string" + arg0 ) ; arg1 . printStackTrace ( ) ; } }
void function ( ) { ASTElement loc0 = element ( "srini_string" ) ; ASTElement loc1 = element ( "srini_string" ) ; tagList . openTag ( loc0 ) ; tagList . openTag ( loc1 ) ; tagList . closeTag ( loc0 ) ; assertFalse ( loc0 . isUnclosed ( ) ) ; assertTrue ( loc1 . isUnclosed ( ) ) ; }
void function ( String arg0 ) { this . srcFileName = arg0 ; }
IConfigurationFactory function ( ) { return SINGLETON ; }
boolean function ( ) { if ( s2 . next ( ) ) return true ; else { s2 . beforeFirst ( ) ; return s2 . next ( ) && s1 . next ( ) ; } }
V function ( ) { return value ; }
int function ( ) { return xPosition ; }
long function ( byte [ ] arg0 ) { long loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0 . length ; ++ loc1 ) { loc0 += 255 & arg0 [ loc1 ] ; } return loc0 ; }
void function ( final Collection arg0 ) { if ( CollectionUtils . exists ( arg0 , PredicateUtils . nullPredicate ( ) ) ) { throw new NullPointerException ( "srini_string" ) ; } }
void function ( ) { RPCFileReadRequest loc0 = new RPCFileReadRequest ( TEMP_UFS_FILE_ID , - 1 , LENGTH ) ; assertInvalid ( loc0 ) ; }
boolean function ( char arg0 ) { return arg0 == ( char ) tok . ttype ; }
void function ( boolean arg0 , String arg1 ) { if ( ! arg0 ) { throw new IllegalArgumentException ( arg1 ) ; } }
void function ( ) { Whitebox . setInternalState ( LoginUser . class , "srini_string" , ( String ) null ) ; }
List < T > function ( List < T > arg0 ) { if ( arg0 != null ) return arg0 ; return Collections . emptyList ( ) ; }
URI function ( final URI arg0 , final HttpHost arg1 ) { return rewriteURI ( arg0 , arg1 , false ) ; }
void function ( ) { mListeners . clear ( ) ; }
IJavascriptRuntime function ( ) { if ( runtime == null ) { runtime = new JavascriptRuntime ( ) ; } return runtime ; }
Date function ( ) { return serverStatus . bootDate ; }
void function ( String arg0 ) { this . name = arg0 ; }
void function ( ) { assertEquals ( - 1.2 , hdg . getVariation ( ) , 0.1 ) ; }
StoredPaymentChannelClientStates function ( Wallet arg0 ) { return ( StoredPaymentChannelClientStates ) arg0 . getExtensions ( ) . get ( EXTENSION_ID ) ; }
void function ( ) { Cache < K , V > loc0 = getOpenIDCache ( ) ; if ( loc0 != null ) { loc0 . removeAll ( ) ; } }
void function ( String arg0 ) { this . loginName = arg0 ; }
void function ( ) { assertEquals ( Datum . WGS84 , instance . getDatum ( ) ) ; }
void function ( Source arg0 ) { if ( arg0 != null && ( arg0 . getSystemId ( ) == null || arg0 . getSystemId ( ) . length ( ) == 0 ) ) { arg0 . setSystemId ( getDefaultSystemId ( ) ) ; } }
List function ( ) { return newFeatures ; }
void function ( final OpenIDRememberMeDO arg0 ) { cache . updateTokenData ( arg0 ) ; Thread loc0 = new Thread ( ) { @ Override public void run ( ) { try { dao . updateTokenData ( arg0 ) ; } catch ( Exception e ) { log . error ( "srini_string" , e ) ; } } } ; loc0 . start ( ) ; }
void function ( ) { serverSocket . close ( ) ; }
void function ( int arg0 ) { this . lane_id = arg0 ; }
void function ( DefaultMapNode arg0 ) { nodes . put ( arg0 . getId ( ) , arg0 ) ; }
CommitModel function ( ) { return commitModel ; }
void function ( ) { char loc0 = RequestInput . getChar ( "srini_string" ) ; System . out . println ( "srini_string" + loc0 ) ; }
boolean function ( File arg0 ) { return config . load ( arg0 ) ; }
void function ( List < Interceptor < ? extends Message >> arg0 ) { inInterceptors = arg0 ; }
void function ( ConfigurationKey arg0 , boolean arg1 ) { config . setBoolean ( arg0 , arg1 ) ; }
String function ( ) { return mSubjectSecondary ; }
Object function ( ) { return source ; }
void function ( DAVTransaction arg0 , DAVResource arg1 ) { try { arg1 . delete ( ) ; arg0 . setStatus ( 204 ) ; } catch ( DAVMultiStatus loc0 ) { loc0 . write ( arg0 ) ; } }
void function ( String arg0 ) { this . tenantDomain = arg0 ; }
void function ( ) { Assert . assertEquals ( mTestDir . getCapacityBytes ( ) , mTestDirView . getCapacityBytes ( ) ) ; }
String function ( ) { if ( uniqueName == null ) { return null ; } String loc0 = PersistenceManager . getInstance ( ) . getProjectBaseName ( project ) ; if ( uniqueName . length ( ) > 0 ) { loc0 += "srini_string" + uniqueName ; } if ( ! loc0 . endsWith ( getZipFileExtension ( ) ) ) { loc0 += getZipFileExtension ( ) ; } return loc0 ; }
void function ( int arg0 ) { this . peakStart = arg0 ; }
void function ( ) { long loc0 = mLockManager . lockBlock ( TEST_SESSION_ID , TEST_BLOCK_ID , BlockLockType . READ ) ; long loc1 = mLockManager . lockBlock ( TEST_SESSION_ID , TEST_BLOCK_ID , BlockLockType . READ ) ; Assert . assertNotEquals ( loc0 , loc1 ) ; }
char [ ] function ( final byte [ ] arg0 ) { final int loc0 = arg0 . length ; final char [ ] loc1 = new char [ loc0 << 1 ] ; for ( int loc2 = 0 , loc3 = 0 ; loc2 < loc0 ; loc2 ++ ) { loc1 [ loc3 ++ ] = CHARS [ ( 0xF0 & arg0 [ loc2 ] ) >>> 4 ] ; loc1 [ loc3 ++ ] = CHARS [ 0x0F & arg0 [ loc2 ] ] ; } return loc1 ; }
void function ( ) { assertTrue ( mwv . isTrue ( ) ) ; mwv . setTrue ( false ) ; assertFalse ( mwv . isTrue ( ) ) ; }
int function ( ) { return maxUpdateRetries ; }
void function ( int arg0 , PlayerTickEvent arg1 ) { if ( playerList . containsKey ( arg0 ) ) { if ( playerList . get ( arg0 ) [ 0 ] < 1 ) { runPlayer ( arg0 , arg1 ) ; } playerList . put ( arg0 , new int [ ] { playerList . get ( arg0 ) [ 0 ] - 1 , playerList . get ( arg0 ) [ 1 ] } ) ; } else { playerList . put ( arg0 , new int [ ] { 1200 , 0 } ) ; } }
void function ( long arg0 ) { this . deliveryTag = arg0 ; }
StoredClientChannel function ( Sha256Hash arg0 , Sha256Hash arg1 ) { lock . lock ( ) ; try { Set < StoredClientChannel > loc0 = mapChannels . get ( arg0 ) ; for ( StoredClientChannel loc1 : loc0 ) { if ( loc1 . contract . getHash ( ) . equals ( arg1 ) ) return loc1 ; } return null ; } finally { lock . unlock ( ) ; } }
void function ( ViewGroup arg0 , int arg1 , Object arg2 ) { destroyItem ( ( View ) arg0 , arg1 , arg2 ) ; }
void function ( ExceptionListener arg0 ) { this . exceptionListener = arg0 ; }
void function ( ) { model . triggerEvent ( ) ; }
String function ( ) { return caseId ; }
int function ( String arg0 ) { if ( isWindows ( ) ) { throw new UnsupportedOperationException ( "srini_string" ) ; } Filestat loc0 = getFilestat ( arg0 ) ; if ( loc0 == null ) return - 1 ; return loc0 . mode ; }
String function ( ) { return emojiText ; }
int function ( ) { return dimension ; }
void function ( String arg0 ) { this . checksumType = arg0 ; }
Set < T > function ( Class < T > arg0 , Set < JspNode > arg1 ) { Set < T > loc0 = new HashSet < > ( ) ; for ( Node loc1 : arg1 ) { if ( arg0 . equals ( loc1 . getClass ( ) ) ) { loc0 . add ( ( T ) loc1 ) ; } } return loc0 ; }
void function ( ) { rte . setSentenceCount ( 3 ) ; assertEquals ( 3 , rte . getSentenceCount ( ) ) ; }
void function ( Crypto arg0 ) { this . encryptionCrypto = arg0 ; }
int function ( int arg0 , int arg1 ) { return originalMatrix . matrixItemUtility [ arg0 ] [ arg1 ] ; }
void function ( String arg0 , IndividualStructure arg1 ) { this . individualStructures . put ( arg0 , arg1 ) ; }
Context function ( ) { return context ; }
SDDTripleStateEnum function ( ) { return tripleStateA ; }
void function ( PropertyDTO [ ] arg0 , String arg1 ) { UserStoreMgtDataKeeper . userStoreManagers . put ( arg1 , convertArrayToMap ( arg0 ) ) ; }
void function ( JavaMailSender arg0 ) { this . mailSender = arg0 ; }
boolean function ( ScriptableObject arg0 ) { if ( arg0 . getParentScope ( ) != null ) { throw new IllegalArgumentException ( ) ; } if ( this == arg0 . associateValue ( AKEY , this ) ) { return true ; } return false ; }
void function ( Bus arg0 ) { if ( bus != null ) { bus = arg0 ; } }
void function ( ) { DenseMatrix64F loc0 = new DenseMatrix64F ( 7 , 5 ) ; assertEquals ( 5 , loc0 . getNumCols ( ) ) ; assertEquals ( 7 , loc0 . getNumRows ( ) ) ; assertEquals ( 7 * 5 , loc0 . data . length ) ; }
void function ( ) { assertEquals ( 2005 , rmc . getDate ( ) . getYear ( ) ) ; }
void function ( String arg0 ) { this . geneList = arg0 ; }
List < Role > function ( ) { if ( roles == null ) { roles = new ArrayList < Role > ( ) ; } return this . roles ; }
void function ( String arg0 ) { this . referencedRevisionA = arg0 ; }
void function ( IParserEvent arg0 ) { IParserEventHandler loc0 = new UprHandler ( handler ) ; loc0 . handleEvent ( arg0 ) ; handlerStack . push ( handler ) ; handler = loc0 ; }
BigDecimal function ( ) { return this . downloadSize ; }
void function ( ) { DenseMatrix64F loc0 = new DenseMatrix64F ( 5 , 5 , true , 0 , 0 , 0 , 0 , 1 , 1 , 0 , 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 0 , 1 , 0 ) ; if ( ! extractor . process ( loc0 ) ) { throw new RuntimeException ( "srini_string" ) ; } assertEquals ( 5 , extractor . getNumberOfEigenvalues ( ) ) ; }
void function ( AbstractSettings arg0 ) { PROPS . add ( arg0 ) ; }
IParserEvent function ( StringEvent arg0 ) { StringEvent loc0 = ( StringEvent ) events . removeLast ( ) ; StringEvent loc1 = new StringEvent ( loc0 . getString ( ) + arg0 . getString ( ) ) ; return loc1 ; }
boolean function ( ) { if ( getTimeoutDate ( ) != null ) { Date loc0 = new Date ( ) ; if ( loc0 . after ( getTimeoutDate ( ) ) ) { return true ; } else { return false ; } } else { return false ; } }
NameValuePair function ( final String arg0 , final String arg1 ) { return new BasicNameValuePair ( arg0 , arg1 ) ; }
String function ( byte [ ] arg0 , String arg1 ) { try { return new String ( arg0 , arg1 ) ; } catch ( UnsupportedEncodingException loc0 ) { throw new RuntimeException ( "srini_string" = "srini_string" ) ; } }
void function ( short arg0 ) { format . checkType ( 'h' , true ) ; packLong ( arg0 , true ) ; }
EmailTemplateDTO function ( int arg0 ) { EmailTemplateDTO loc0 = null ; if ( arg0 <= templates . length ) { loc0 = templates [ arg0 ] ; } return loc0 ; }
JSONArray function ( List < ? extends JsonWorkflowAction > arg0 ) { JSONArray loc0 = new JSONArray ( ) ; for ( JsonWorkflowAction loc1 : arg0 ) { loc0 . add ( loc1 . toJSONObject ( ) ) ; } return loc0 ; }
Class < ? > function ( String arg0 ) { Class < ? > loc0 = COLLECTION_CLASSES_BY_NAMES . typeFor ( arg0 ) ; if ( loc0 != null ) { return loc0 ; } return COLLECTION_INTERFACES_BY_NAMES . typeFor ( arg0 ) ; }
EndpointReferenceType function ( QName arg0 ) { EndpointReferenceType loc0 = null ; for ( EndpointResolver loc1 : resolvers ) { loc0 = loc1 . mint ( arg0 ) ; if ( loc0 != null ) { break ; } } return loc0 ; }
void function ( byte [ ] arg0 , int arg1 , int arg2 ) { checkBoundary ( arg0 , arg1 , 4 ) ; arg0 [ arg1 ++ ] = ( byte ) ( 0xff & ( arg2 >> 24 ) ) ; arg0 [ arg1 ++ ] = ( byte ) ( 0xff & ( arg2 >> 16 ) ) ; arg0 [ arg1 ++ ] = ( byte ) ( 0xff & ( arg2 >> 8 ) ) ; arg0 [ arg1 ] = ( byte ) ( 0xff & arg2 ) ; }
void function ( ) { SpaceXGUI . getInstance ( ) . appendToConsole ( TAG , "srini_string" ) ; cmd . setLedsAnimation ( LEDAnimation . BLINK_ORANGE , 3 , ( spinTime / 1000 ) ) ; cmd . spinLeft ( spin90Speed ) . doFor ( spin90Time ) ; cmd . hover ( ) . doFor ( hoverTime ) ; }
Measurements function ( ) { if ( singleton == null ) { singleton = new Measurements ( measurementproperties ) ; } return singleton ; }
JaxbBuilder function ( final Marshaller arg0 ) { this . marshaller = arg0 ; return this ; }
void function ( List < String > arg0 ) { this . acceptedKeyWrapAlgorithms = arg0 ; }
boolean function ( String arg0 , String arg1 ) { try { UserStoreManager loc0 = IdentityTenantUtil . getRealm ( null , arg0 ) . getUserStoreManager ( ) ; return loc0 . authenticate ( arg0 , arg1 ) ; } catch ( Exception loc0 ) { log . error ( "srini_string" , loc0 ) ; return false ; } }
boolean function ( long arg0 ) { synchronized ( mLock ) { return mPersistedFiles . contains ( arg0 ) ; } }
AdjustableLinearSolver function ( ) { return new AdjLinearSolverQr ( ) ; }
EndpointImplFactory function ( ) { return singleton ; }
void function ( ) { mThrown . expect ( IndexOutOfBoundsException . class ) ; int loc0 = TieredBlockStoreTestUtils . TIER_PATH [ TEST_TIER_LEVEL ] . length ; Assert . assertEquals ( loc0 , mTestTierView . getDirView ( loc0 ) . getDirViewIndex ( ) ) ; }
boolean function ( Map < K , V > arg0 ) { return ( arg0 == null || arg0 . size ( ) == 0 ) ; }
List < T > function ( Class < T > arg0 ) { List < T > loc0 = new ArrayList < > ( ) ; Node loc1 = jjtGetParent ( ) ; while ( loc1 != null ) { if ( loc1 . getClass ( ) == arg0 ) { loc0 . add ( ( T ) loc1 ) ; } loc1 = loc1 . jjtGetParent ( ) ; } return loc0 ; }
int function ( long arg0 ) { checkArgument ( ( arg0 >> Integer . SIZE ) == 0 , "srini_string" , arg0 ) ; return ( int ) arg0 ; }
void function ( double arg0 [ ] , double [ ] arg1 , int arg2 ) { for ( int loc0 = arg2 - 1 ; loc0 >= 0 ; loc0 -- ) { double loc1 = arg1 [ loc0 ] ; int loc2 = loc0 * arg2 + loc0 + 1 ; for ( int loc3 = loc0 + 1 ; loc3 < arg2 ; loc3 ++ ) { loc1 -= arg0 [ loc2 ++ ] * arg1 [ loc3 ] ; } arg1 [ loc0 ] = loc1 / arg0 [ loc0 * arg2 + loc0 ] ; } }
boolean function ( final String arg0 ) { return ! ( "srini_string" . equals ( arg0 . trim ( ) ) || ( arg0 . startsWith ( "srini_string" ) ) ) ; }
DeterministicKey function ( ) { return get ( rootPath , false , false ) ; }
TriConsumer < X , Y , Z > function ( TriConsumer < ? super X , ? super Y , ? super Z > arg0 ) { Objects . requireNonNull ( arg0 ) ; return ( x , y , z ) -> { accept ( x , y , z ) ; arg0 . accept ( x , y , z ) ; } ; }
Function < E , E > function ( ) { return ( Function < E , E > ) IdentityFunction . INSTANCE ; }
void function ( byte [ ] arg0 ) { this . challenge = ( ( byte [ ] ) arg0 ) ; }
void function ( String arg0 , Named arg1 ) { if ( arg0 == null || arg1 == null ) { throw new InternalCompilerError ( "srini_string" ) ; } if ( Report . should_report ( TOPICS , 3 ) ) Report . report ( 3 , "srini_string" + arg0 + "srini_string" + arg1 + "srini_string" ) ; table . put ( arg0 , arg1 ) ; }
void function ( String arg0 ) { await ( arg0 ) ; schedule ( arg0 ) ; await ( arg0 ) ; }
Matcher < T > function ( T arg0 ) { return ComparatorMatcherBuilder . < T > usingNaturalOrdering ( ) . lessThan ( arg0 ) ; }
void function ( XCommand < ? > arg0 ) { queue ( arg0 , 0 ) ; }
void function ( String arg0 ) { try ( LockResource loc0 = new LockResource ( sLock ) ) { while ( ! sTimers . containsKey ( arg0 ) ) { sCondition . await ( ) ; } } }
void function ( final String arg0 ) { valid = false ; setInvalidationMessage ( arg0 ) ; }
int function ( String arg0 ) { byte [ ] loc0 = arg0 . getBytes ( ) ; int loc1 = loc0 . length ; int loc2 = 5381 ; for ( int loc3 = 0 ; loc3 < loc1 ; loc3 ++ ) { loc2 = ( ( loc2 << 5 ) + loc2 ) + loc0 [ loc3 ] ; } return loc2 ; }
String function ( ) { return destination ; }
void function ( int arg0 ) { waitFor ( arg0 ) ; }
String [ ] function ( ) { try { return stub . getIssuersOfSAMLServiceProviders ( ) ; } catch ( RemoteException loc0 ) { log . error ( "srini_string" , loc0 ) ; throw new AxisFault ( loc0 . getMessage ( ) , loc0 ) ; } }
Object function ( String arg0 ) { return this . attributes . remove ( arg0 ) ; }
void function ( ) { doAction ( step ) ; step ++ ; JPanel loc0 = makePanel ( step ) ; if ( loc0 != null ) { panels . add ( loc0 ) ; } started = true ; if ( item != null ) { item . changed ( ) ; } }
void function ( ) { Date loc0 = new Date ( ) ; assertTrue ( loc0 . equals ( instance ) ) ; Date loc1 = new Date ( 2010 , 6 , 15 ) ; Date loc2 = new Date ( 2010 , 6 , 15 ) ; assertTrue ( loc1 . equals ( loc2 ) ) ; }
void function ( int arg0 ) { Node loc0 = new Node ( arg0 ) ; if ( head == null ) { head = loc0 ; return ; } Node loc1 = head ; while ( loc1 . next != null ) { loc1 = loc1 . next ; } loc1 . next = loc0 ; return ; }
Array < Asset > function ( ) { Array < Asset > loc0 = null ; return loc0 ; }
void function ( ) { }
double function ( ) { return this . power ; }
String function ( ) { return referencedRevisionLabelB ; }
String function ( ) { return graph . toString ( ) ; }
void function ( SentenceListener arg0 , String arg1 ) { registerListener ( arg0 , arg1 ) ; }
ListenableFuture < PaymentIncrementAck > function ( Coin arg0 ) { return channelClient . incrementPayment ( arg0 , null ) ; }
String function ( String arg0 ) { int loc0 = arg0 . lastIndexOf ( '.' ) ; return loc0 >= 0 ? arg0 . substring ( 0 , loc0 ) : "srini_string" ; }
void function ( ) { Mockito . when ( userInfoRepository . getByUsername ( adminUsername ) ) . thenReturn ( userInfoAdmin ) ; UserInfo loc0 = service . getByUsername ( adminUsername ) ; assertEquals ( loc0 . getSub ( ) , adminSub ) ; }
boolean function ( Scan arg0 ) { for ( Term loc0 : terms ) if ( ! loc0 . isSatisfied ( arg0 ) ) return false ; return true ; }
void function ( int arg0 ) { int loc0 = arg0 - basePort - 1 ; if ( ! allocated [ loc0 ] ) { throw new IllegalStateException ( "srini_string" ) ; } allocated [ loc0 ] = false ; }
XHTMLPanel function ( ) { return panel ; }
void function ( List < String > arg0 , List < String > arg1 , Map < String , String > arg2 ) { for ( String loc0 : arg0 ) { for ( String loc1 : arg1 ) { String loc2 = createKey ( loc0 , loc1 ) ; arg2 . put ( loc2 , "srini_string" ) ; } } }
void function ( long arg0 , int arg1 , ServiceInfo [ ] arg2 ) { }
void function ( ) { try { writer . writeStartElement ( "srini_string" ) ; } catch ( XMLStreamException loc0 ) { throw new RuntimeException ( loc0 ) ; } }
double function ( DenseMatrix64F arg0 , DenseMatrix64F arg1 ) { double loc0 = VectorVectorMult . innerProd ( arg1 , arg1 ) ; double loc1 = VectorVectorMult . innerProdA ( arg1 , arg0 , arg1 ) ; return loc1 / loc0 ; }
boolean function ( ActivityRequest arg0 ) { if ( arg0 == null ) { return false ; } if ( arg0 . getDelayerFileAttributesExtractorStrategy ( ) == null ) { return false ; } if ( arg0 . getFeedId ( ) == null ) { return false ; } return arg0 . getConfigProperties ( ) != null ; }
ModuleConfiguration function ( String arg0 ) { Properties loc0 = getModuleProperties ( arg0 ) ; List < Subscription > loc1 = buildSubscriptionList ( arg0 , loc0 ) ; return new ModuleConfiguration ( getModuleProperties ( arg0 ) , loc1 ) ; }
void function ( ) { }
double function ( ) { BlockPos loc0 = getNextBlock ( 1 ) ; if ( loc0 == null ) { return 9999 ; } else { return Math . sqrt ( mob . getDistanceSqToCenter ( loc0 ) ) ; } }
boolean function ( ) { playlists = new HashMap < > ( ) ; return getDb ( ) . getPlaylists ( playlists ) ; }
void function ( ) { SimpleDB . bufferMgr ( ) . flushAll ( txnum ) ; recoveryMgr . recover ( ) ; }
void function ( String arg0 ) { this . password = arg0 ; }
String function ( ) { return signatureUsername ; }
void function ( String arg0 ) { log . debug ( "srini_string" , arg0 ) ; ingredientRepository . delete ( arg0 ) ; }
void function ( ) { try { createTextureAtlas ( ) ; } catch ( IOException loc0 ) { Gdx . app . error ( LOG , "srini_string" , loc0 ) ; } loadTextureAtlas ( ) ; loadTextures ( ) ; loadSounds ( ) ; loadMaps ( ) ; }
int function ( ) { return children == null ? 1 : 1 + Math . max ( children [ 0 ] . depth ( ) , children [ 1 ] . depth ( ) ) ; }
void function ( Range < K > arg0 , V arg1 ) { throw new UnsupportedOperationException ( ) ; }
double [ ] function ( ) { return gammasV ; }
void function ( ) { }
void function ( ) { }
ToStringHelper function ( double arg0 ) { return addHolder ( String . valueOf ( arg0 ) ) ; }
void function ( ) { PermissionTicket loc0 = permissionService . createTicket ( rs1 , scopes1 ) ; assertNotNull ( loc0 . getTicket ( ) ) ; }
void function ( ) { if ( ! snake . isAlive ) this . gui . setTitle ( "srini_string" ) ; if ( ! border . isAlive ) this . gui . setTitle ( "srini_string" ) ; if ( gameElements . size ( ) == 2 ) { snake . isAlive = false ; gui . setTitle ( "srini_string" ) ; } }
T function ( ) { Node loc0 = extractMinNode ( ) ; return loc0 . key ; }
void function ( ) { Assert . assertEquals ( NetworkAddressUtils . getFqdnHost ( new InetSocketAddress ( "srini_string" , 0 ) ) , "srini_string" ) ; Assert . assertEquals ( NetworkAddressUtils . getFqdnHost ( new WorkerNetAddress ( ) . setHost ( "srini_string" ) ) , "srini_string" ) ; }
double function ( ) { checkState ( count ( ) != 0 ) ; return sumOfProductsOfDeltas / count ( ) ; }
void function ( ArrayList < String > arg0 , ArrayList < Integer > arg1 ) { ArrayList < Map . Entry < String , Int >> loc0 = new ArrayList < Map . Entry < String , Int >> ( _wordFrequency . entrySet ( ) ) ; Collections . sort ( loc0 , new ComparatorFrequency ( ) ) ; for ( Map . Entry < String , Int > loc1 : loc0 ) { arg0 . add ( loc1 . getKey ( ) ) ; arg1 . add ( loc1 . getValue ( ) . value ) ; } }
ThreadFactoryBuilder function ( int arg0 ) { checkArgument ( arg0 >= Thread . MIN_PRIORITY , "srini_string" , arg0 , Thread . MIN_PRIORITY ) ; checkArgument ( arg0 <= Thread . MAX_PRIORITY , "srini_string" , arg0 , Thread . MAX_PRIORITY ) ; this . priority = arg0 ; return this ; }
String function ( String arg0 ) { String loc0 = arg0 ; if ( loc0 . endsWith ( "srini_string" ) ) { loc0 = loc0 . substring ( 0 , loc0 . length ( ) - 1 ) ; } return getContextURL ( ) + loc0 ; }
void function ( Attributes arg0 ) { attributes = new AttributesImpl ( arg0 ) ; }
Object function ( Class < ? > arg0 ) { return ( arg0 == null || arg0 == ScriptRuntime . ScriptableClass || arg0 == ScriptRuntime . FunctionClass ) ? this : obj . getDefaultValue ( arg0 ) ; }
byte [ ] function ( ) { return value ; }
String function ( String arg0 ) { return _uriResolver . resolve ( arg0 ) ; }
String function ( ) { return this . source ; }
Document function ( String arg0 , Document arg1 ) { DOMResult loc0 = new DOMResult ( ) ; performTransform ( getCopyTransformation ( arg0 ) , arg1 , loc0 ) ; return ( Document ) loc0 . getNode ( ) ; }
int function ( byte [ ] arg0 , File arg1 ) { try { FileOutputStream loc0 = new FileOutputStream ( arg1 ) ; loc0 . write ( arg0 ) ; loc0 . close ( ) ; } catch ( java . io . IOException loc0 ) { return - 1 ; } return 1 ; }
void function ( ) { assertEquals ( 360.0 , vtg . getTrueCourse ( ) , 0.001 ) ; }
int function ( int arg0 ) { return ( arg0 * num + denom - 1 ) / denom ; }
Scriptable function ( ) { if ( type != SCOPE_PROVIDER ) Kit . codeBug ( ) ; if ( scope == null ) Kit . codeBug ( ) ; return scope ; }
void function ( File arg0 ) { setFolders ( arg0 ) ; setFiles ( arg0 ) ; }
HashMap < String , GeneticProfile > function ( ) { return getDefaultGeneticProfileMap ( true , true ) ; }
String function ( String arg0 ) { if ( ! arg0 . endsWith ( "srini_string" ) ) { arg0 = arg0 + "srini_string" ; } if ( ! arg0 . startsWith ( "srini_string" ) ) { arg0 = "srini_string" + arg0 ; } return arg0 ; }
Page < DishCollection > function ( Pageable arg0 ) { log . debug ( "srini_string" ) ; Page < DishCollection > loc0 = dishCollectionRepository . findAll ( arg0 ) ; return loc0 ; }
GetPrice function ( ) { return new GetPrice ( ) ; }
int function ( ) { return keyIdentifierType ; }
long function ( ) { return this . dataUnitId ; }
void function ( BlockMatrix64F arg0 ) { applyQ ( arg0 , false ) ; }
void function ( lalr_item arg0 ) { not_null ( arg0 ) ; hashcode_cache = null ; _all . remove ( arg0 ) ; }
TreeNode function ( TreeNode arg0 , int arg1 ) { if ( arg0 == null || arg0 . value == arg1 ) { return arg0 ; } if ( arg1 < arg0 . value ) { return find ( arg0 . left , arg1 ) ; } else { return find ( arg0 . right , arg1 ) ; } }
double function ( RowD1Matrix64F arg0 ) { double loc0 = 1.0 ; int loc1 = Math . min ( arg0 . numRows , arg0 . numCols ) ; for ( int loc2 = 0 ; loc2 < loc1 ; loc2 ++ ) { loc0 *= arg0 . unsafe_get ( loc2 , loc2 ) ; } return loc0 ; }
String function ( BufferedReader arg0 ) { StringBuffer loc0 = new StringBuffer ( ) ; String loc1 ; while ( ( loc1 = arg0 . readLine ( ) ) != null ) { loc0 . append ( loc1 + "srini_string" ) ; } arg0 . close ( ) ; return loc0 . toString ( ) ; }
String function ( @ Nullable String arg0 ) { return ( arg0 == null ) ? "srini_string" : arg0 ; }
Expression function ( ) { return newval ; }
BufferedByteWriter function ( short arg0 ) { return put64 ( arg0 & 0xFFFFL ) ; }
String function ( ) { return contentType ; }
boolean function ( ) { return parseLazy ; }
void function ( boolean arg0 ) { this . validateUseKey = arg0 ; }
void function ( Long arg0 ) { this . dataSetId = arg0 ; }
float function ( ) { return dotsPerDeg ; }
boolean function ( Object arg0 ) { if ( arg0 instanceof Type ) { Type loc0 = ( Type ) arg0 ; for ( Type loc1 : v ) { if ( ts . isSubtype ( loc0 , loc1 ) ) { return true ; } } } return false ; }
void function ( ServiceID arg0 , int arg1 , int arg2 , InetAddress arg3 ) { }
String function ( ) { return getWorkflow ( ) . getUser ( ) ; }
ProjectActions function ( ) { if ( theInstance == null ) { theInstance = new ProjectActions ( ) ; } return theInstance ; }
void function ( O arg0 , int arg1 ) { assert data . get ( arg0 ) == null ; data . put ( arg0 , new DocumentElement < O > ( arg0 , new IntegerHolder ( arg1 ) ) ) ; wordCountMultiSet += arg1 ; }
Image function ( ) { if ( _image != null && _image . isDisposed ( ) ) { SWTFSImage loc0 = ( SWTFSImage ) _uac . getImageResource ( _uri ) . getImage ( ) ; if ( loc0 == null ) { _image = null ; } else { _image = loc0 . _image ; } } return _image ; }
void function ( ) { double loc0 = rmc . getCourse ( ) + rmc . getVariation ( ) ; assertEquals ( loc0 , rmc . getCorrectedCourse ( ) , 0.001 ) ; }
View function ( ) { if ( mMenuItem != null ) { return HoneycombMenuItem . getActionView ( mMenuItem ) ; } return null ; }
void function ( ) { final double loc0 = 1.98765 ; instance . setHorizontalDOP ( loc0 ) ; assertEquals ( loc0 , instance . getHorizontalDOP ( ) , 0.1 ) ; }
Character function ( ShadowStruggles arg0 ) { RpgMap loc0 = new RpgMap ( map , layer , SettingsDAO . getSettings ( ) . defaultTileLayer ) ; Character loc1 = new Character ( x , y , width , height , loc0 ) ; return loc1 ; }
String function ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0 . length ( ) ; loc1 ++ ) { loc0 ^= ( byte ) arg0 . charAt ( loc1 ) ; } return String . format ( "srini_string" , loc0 ) ; }
void function ( Node arg0 ) { closed . add ( arg0 ) ; }
void function ( long arg0 ) { sleepMs ( null , arg0 ) ; }
T function ( byte [ ] arg0 , Class < T > arg1 ) { try { T loc0 = ( T ) ReflectionUtils . newInstance ( arg1 , null ) ; loc0 . readFields ( new DataInputStream ( new ByteArrayInputStream ( arg0 ) ) ) ; return loc0 ; } catch ( IOException loc0 ) { throw new RuntimeException ( loc0 ) ; } }
ConfigurationKey function ( String arg0 , String arg1 , String arg2 ) { return new ConfigurationKeyImpl ( arg0 , arg1 , arg2 ) ; }
void function ( ) { for ( Iterator loc0 = _imageCache . values ( ) . iterator ( ) ; loc0 . hasNext ( ) ; ) { ImageResource loc1 = ( ImageResource ) loc0 . next ( ) ; ( ( SWTFSImage ) loc1 . getImage ( ) ) . getImage ( ) . dispose ( ) ; } _imageCache . clear ( ) ; }
void function ( ) { Mockito . when ( mClient . listObjects ( Matchers . any ( ListObjectsRequest . class ) ) ) . thenThrow ( ServiceException . class ) ; boolean loc0 = mOSSUnderFileSystem . delete ( PATH , true ) ; Assert . assertFalse ( loc0 ) ; }
SourceFile function ( String arg0 , List < ? > arg1 ) { return ( SourceFile ) parse ( FILE , arg0 , arg1 . toArray ( ) ) ; }
int function ( ByteBuffer arg0 ) { byte [ ] loc0 = BufferUtils . newByteArrayFromByteBuffer ( arg0 ) ; return indexHash ( loc0 ) ; }
String function ( ) { return relativeFullPath ; }
boolean function ( Language arg0 ) { for ( RuleSet loc0 : ruleSets ) { if ( loc0 . usesTypeResolution ( arg0 ) ) { return true ; } } return false ; }
void function ( String arg0 ) { this . build = arg0 ; }
Bitmap function ( Bitmap arg0 ) { Bitmap loc0 = Bitmap . createScaledBitmap ( arg0 , getDims ( ) [ 0 ] , getDims ( ) [ 1 ] , true ) ; return loc0 ; }
JWSAlgorithm function ( JsonObject arg0 , String arg1 ) { String loc0 = getAsString ( arg0 , arg1 ) ; if ( loc0 != null ) { return JWSAlgorithm . parse ( loc0 ) ; } else { return null ; } }
byte [ ] function ( List < String > arg0 , String arg1 ) { String loc0 = Joiner . on ( ' ' ) . join ( arg0 ) ; String loc1 = "srini_string" + arg1 ; return PBKDF2SHA512 . derive ( loc0 , loc1 , PBKDF2_ROUNDS , 64 ) ; }
void function ( String arg0 ) { this . testData = arg0 ; }
void function ( ) { this . m_turnClient . connect ( ) ; }
void function ( final Activity arg0 , final int arg1 , final String arg2 ) { final Intent loc0 = makeIntent ( arg2 , null ) ; startForResult ( arg0 , arg1 , loc0 ) ; }
void function ( ) { final double loc0 = 40.66666 ; rmb . setVelocity ( loc0 ) ; assertTrue ( rmb . toString ( ) . contains ( "srini_string" ) ) ; assertEquals ( loc0 , rmb . getVelocity ( ) , 0.1 ) ; }
BiAdAdapterSwitcher function ( final int arg0 ) { listview . setDefaultOnRefreshListener ( new SwipeRefreshLayout . OnRefreshListener ( ) { @ Override public void onRefresh ( ) { new Handler ( ) . postDelayed ( refresh_default , arg0 ) ; } } ) ; return this ; }
void function ( ) { Map < String , Long > loc0 = ImmutableMap . of ( "srini_string" , 5000L , "srini_string" , 60000L ) ; Assert . assertEquals ( loc0 , mBlockStoreMeta . getCapacityBytesOnTiers ( ) ) ; }
Integer function ( ) { return cn . getExitStatus ( ) ; }
Proxy function ( final HTTPClientPolicy arg0 , final String arg1 ) { if ( arg0 . isSetNonProxyHosts ( ) ) { Pattern loc0 = PatternBuilder . build ( arg0 . getNonProxyHosts ( ) ) ; if ( loc0 . matcher ( arg1 ) . matches ( ) ) { return Proxy . NO_PROXY ; } } return createProxy ( arg0 ) ; }
void function ( TBase arg0 , byte [ ] arg1 , int arg2 , int arg3 ) { try { trans_ . reset ( arg1 , arg2 , arg3 ) ; arg0 . read ( protocol_ ) ; } finally { trans_ . clear ( ) ; protocol_ . reset ( ) ; } }
void function ( Exception arg0 , String arg1 ) { if ( sIsLogEnabled ) { Log . e ( sApplicationTag , getContent ( getCurrentStackTraceElement ( ) ) + "srini_string" + arg0 . getMessage ( ) + "srini_string" + arg0 . getStackTrace ( ) + "srini_string" + arg1 ) ; arg0 . printStackTrace ( ) ; } }
String function ( ) { return signatureAlias ; }
void function ( ) { testEventProperties . put ( Notification . NOTIFICATION_KEY_APPLICATION , "srini_string" ) ; notificationController . handleEvent ( new Event ( Notification . NOTIFICATION_TOPIC_BROADCAST , testEventProperties ) ) ; }
String function ( KeyStroke arg0 ) { if ( arg0 != null ) { return getModifiersText ( arg0 . getModifiers ( ) ) + KeyEventUtils . getKeyText ( arg0 . getKeyCode ( ) ) ; } else { return "srini_string" ; } }
void function ( String arg0 ) { this . charset = arg0 ; }
ClientDetailsEntity function ( String arg0 ) { JsonElement loc0 = parser . parse ( arg0 ) ; return parse ( loc0 ) ; }
Builder function ( String arg0 ) { this . portId = arg0 ; return this ; }
void function ( ) { rte . setRouteType ( RouteType . WORKING ) ; assertTrue ( rte . isWorkingRoute ( ) ) ; assertFalse ( rte . isActiveRoute ( ) ) ; }
void function ( ) { for ( Action loc0 : actions ) { loc0 . update ( ) ; } }
int function ( ) { return id ; }
HexDigest function ( ) { return HexDigest . createFromDigestBytes ( getDigestBytes ( ) ) ; }
ProctorResult function ( @ Nonnull final Identifiers arg0 , @ Nonnull final Map < String , Object > arg1 , @ Nonnull final Map < String , Integer > arg2 ) { return determineTestGroups ( arg0 , arg1 , arg2 , Collections . < String > emptyList ( ) ) ; }
Date function ( String arg0 ) { if ( arg0 == null ) return null ; SimpleDateFormat loc0 = new SimpleDateFormat ( FORMAT_ISO , LOCALE ) ; loc0 . setTimeZone ( TIMEZONE ) ; try { return loc0 . parse ( arg0 ) ; } catch ( ParseException loc1 ) { return null ; } }
boolean function ( ) { return ( this . errorLevel > 1 ) ; }
void function ( ) { ttm . setTimeToCPA ( 15.0 ) ; assertTrue ( ttm . toString ( ) . contains ( "srini_string" ) ) ; }
void function ( final ReadableByteChannel arg0 , final WritableByteChannel arg1 ) { final ByteBuffer loc0 = ByteBuffer . allocateDirect ( 16 * 1024 ) ; while ( arg0 . read ( loc0 ) != - 1 ) { loc0 . flip ( ) ; arg1 . write ( loc0 ) ; loc0 . compact ( ) ; } loc0 . flip ( ) ; while ( loc0 . hasRemaining ( ) ) { arg1 . write ( loc0 ) ; } }
String function ( Object arg0 , String arg1 ) { return nsh . getAttributeValue ( ( Element ) arg0 , arg1 ) ; }
void function ( String arg0 ) { this . album = arg0 ; }
FiltersType function ( ) { return cipherSuiteFilters ; }
MemoryLogger function ( ) { return instance ; }
void function ( ) { try { vtg . setMagneticCourse ( - 0.001 ) ; fail ( "srini_string" ) ; } catch ( IllegalArgumentException loc0 ) { assertTrue ( loc0 . getMessage ( ) . contains ( "srini_string" ) ) ; } catch ( Exception loc0 ) { fail ( loc0 . getMessage ( ) ) ; } }
boolean function ( Map < String , Object > arg0 , String arg1 ) { if ( arg0 == null || arg1 == null ) { return false ; } else { return isFalse ( arg0 . get ( arg1 ) ) ; } }
void function ( ) { XMLUnit . setIgnoreWhitespace ( true ) ; XMLUnit . setNormalize ( true ) ; Config . readConfig ( "srini_string" ) ; }
String function ( ) { return val ; }
void function ( String arg0 ) { PROPS . put ( KEY , arg0 ) ; loadValue ( arg0 ) ; }
String function ( Fig arg0 ) { Fig loc0 = arg0 . getEnclosingFig ( ) ; if ( loc0 == null ) { return null ; } return getId ( loc0 ) ; }
Sha256Hash function ( File arg0 ) { FileInputStream loc0 = new FileInputStream ( arg0 ) ; try { return create ( ByteStreams . toByteArray ( loc0 ) ) ; } finally { loc0 . close ( ) ; } }
boolean function ( Connection arg0 ) { if ( arg0 . getMetaData ( ) . getDriverName ( ) . toLowerCase ( ) . contains ( DBType . MySQL . name ( ) . toLowerCase ( ) ) ) { return true ; } return false ; }
Class < ? extends Service > function ( ) { return UUIDService . class ; }
void function ( ) { System . out . println ( "srini_string" ) ; HTTPDirectConnection loc0 = new HTTPDirectConnection ( this . URI ) ; this . urlConn = loc0 . getURLConnection ( ) ; }
Date function ( String arg0 ) { return parseUTC ( arg0 , DateTimeFormat . SQL ) ; }
void function ( String arg0 ) { this . name = arg0 ; }
void function ( ) { byte [ ] loc0 = new byte [ 10 ] ; mStream . write ( loc0 ) ; mStream . close ( ) ; Mockito . verify ( mLocalOutputStream ) . write ( loc0 , 0 , loc0 . length ) ; }
void function ( ) { Sentence loc0 = instance . createParser ( BODTest . EXAMPLE ) ; assertNotNull ( loc0 ) ; assertTrue ( loc0 instanceof Sentence ) ; assertTrue ( loc0 instanceof BODSentence ) ; assertTrue ( loc0 instanceof BODParser ) ; assertEquals ( BODTest . EXAMPLE , loc0 . toSentence ( ) ) ; }
void function ( StateListener arg0 ) { this . listeners . add ( arg0 ) ; }
void function ( Project arg0 ) { if ( currentProject == arg0 ) { currentProject = null ; } arg0 . remove ( ) ; }
boolean function ( ) { return StringUtils . contains ( content , "srini_string" ) ; }
void function ( Element arg0 , ReplacedElement arg1 , String arg2 , final int arg3 , final int arg4 ) { if ( imageComponents == null ) { imageComponents = new HashMap ( ) ; } CacheKey loc0 = new CacheKey ( arg0 , arg2 , arg3 , arg4 ) ; imageComponents . put ( loc0 , arg1 ) ; }
void function ( String arg0 ) { this . errorMsg = arg0 ; }
List < String > function ( ) { List < String > loc0 = new ArrayList < String > ( ) ; for ( FederationToken loc1 : FederationToken . values ( ) ) { loc0 . add ( getFederationToken ( loc1 ) ) ; } for ( String loc1 : settings . getStrings ( Keys . federation . sets ) ) { loc0 . add ( getFederationToken ( loc1 ) ) ; } return loc0 ; }
void function ( EaseUser arg0 ) { SuperWeChatDBManager . getInstance ( ) . saveContact ( arg0 ) ; }
int function ( ) { return p2shHeader ; }
int function ( int arg0 ) { return getStep ( arg0 ) . y ; }
List < String > function ( ) { return DEFAULT_SCHEME_PRIORITY ; }
void function ( ) { LogManager . shutdown ( ) ; XLog . Info . reset ( ) ; XLogStreamer . Filter . reset ( ) ; }
DirectionsLeg [ ] function ( double arg0 , double arg1 , double arg2 , double arg3 ) { DirectionsRoute [ ] loc0 = DirectionsApi . newRequest ( mapsClient . getContext ( ) ) . origin ( new LatLng ( arg0 , arg1 ) ) . destination ( new LatLng ( arg2 , arg3 ) ) . mode ( TravelMode . WALKING ) . await ( ) ; if ( null != loc0 ) { return loc0 [ 0 ] . legs ; } return new DirectionsLeg [ 0 ] ; }
String function ( ) { return propName ; }
Message function ( Message arg0 ) { return arg0 ; }
Filters function ( ) { return this . filters ; }
String function ( String arg0 , Document arg1 ) { try { return engine . evaluate ( arg0 , new DOMSource ( arg1 ) ) ; } catch ( XMLUnitException loc0 ) { throw new XpathException ( loc0 . getCause ( ) ) ; } }
void function ( ) { links . clear ( ) ; }
java . lang . Object function ( ) { try { return forName ( literalName ) ; } catch ( java . lang . IllegalArgumentException loc0 ) { throw new java . io . InvalidObjectException ( loc0 . getMessage ( ) ) ; } }
void function ( String arg0 , DifferenceGroup arg1 ) { this . differenceGroups . put ( arg0 , arg1 ) ; }
JSONWriter function ( ) { beforeValue ( ) ; mWriter . write ( JSON . LSQUARE ) ; mStack . push ( mState ) ; mState = new State ( ARRAY ) ; return this ; }
void function ( ) { double loc0 = instance . getHorizontalDOP ( ) ; assertEquals ( 1.6 , loc0 , 0.001 ) ; }
void function ( ResourceBundle arg0 ) { Set < Object > loc0 = new HashSet < Object > ( ) ; for ( Enumeration loc1 = arg0 . getKeys ( ) ; loc1 . hasMoreElements ( ) ; ) { Object loc2 = loc1 . nextElement ( ) ; Assert . assertTrue ( "srini_string" = "srini_string" + arg0 . getClass ( ) . getName ( ) , ! loc0 . contains ( loc2 ) ) ; loc0 . add ( loc2 ) ; } }
String function ( ) { return logPath ; }
int function ( String arg0 , OutputStream arg1 ) { return encoder . decode ( arg0 , arg1 ) ; }
boolean function ( Object arg0 ) { if ( arg0 == null ) { return false ; } return Boolean . FALSE . equals ( arg0 ) || "srini_string" . equalsIgnoreCase ( arg0 . toString ( ) ) ; }
int function ( ) { return _all . size ( ) ; }
void function ( ) { try { dataStore . flushEvents ( ) ; if ( monitor != null ) { monitor . clientFlushedEvents ( - 1 , System . currentTimeMillis ( ) ) ; } } catch ( final DataException loc0 ) { loc0 . printStackTrace ( ) ; } }
Thread function ( ) { return this . waiter ; }
void function ( InputStream arg0 ) { if ( arg0 != null ) arg0 . close ( ) ; }
void function ( ) { RPCFileWriteRequest loc0 = new RPCFileWriteRequest ( TEMP_UFS_FILE_ID , - 1 , LENGTH , null ) ; assertInvalid ( loc0 ) ; }
java . util . List function ( ) { return typeName ; }
BufferedImage function ( int arg0 , int arg1 ) { BufferedImage loc0 = ImageUtil . createCompatibleBufferedImage ( arg0 , arg1 , BufferedImage . TYPE_INT_RGB ) ; ImageUtil . clearImage ( loc0 ) ; return loc0 ; }
File function ( ) { File loc0 = null ; try { loc0 = File . createTempFile ( "srini_string" , null ) ; loc0 . delete ( ) ; if ( ! loc0 . mkdir ( ) ) { return null ; } return loc0 ; } catch ( IOException loc1 ) { LOG . error ( "srini_string" , loc1 ) ; return null ; } }
void function ( Date arg0 ) { this . fetcherStartTimeStamp = arg0 ; }
float function ( ) { return ( ( float ) setFoundFragments ) / ( ( float ) setFragmentsCount ) ; }
int function ( ) { return yPosition ; }
void function ( String arg0 ) { this . id = arg0 ; }
boolean function ( T arg0 ) { return nodePosition . containsKey ( arg0 ) ; }
InetAddress function ( final SipHeaderValue arg0 ) { final String loc0 = arg0 . getBaseValue ( ) ; final String loc1 = StringUtils . substringAfterLast ( loc0 , "srini_string" ) ; return InetAddress . getByName ( loc1 ) ; }
String function ( ) { return elem2 ; }
void function ( ) { Time loc0 = new Time ( 1 , 2 , 3.4 ) ; instance . setTime ( loc0 ) ; assertTrue ( instance . toString ( ) . contains ( "srini_string" ) ) ; }
boolean function ( final ByteBufferExt arg0 ) { final int loc0 = arg0 . position ( ) + RudpConstants . CHECKSUM_INDEX ; final UInt loc1 = arg0 . getUInt ( loc0 ) ; final UInt loc2 = new UIntImpl ( 0 ) ; arg0 . putUInt ( loc0 , loc2 ) ; final UInt loc3 = getChecksum ( arg0 ) ; return loc1 . equals ( loc3 ) ; }
List < Vertice > function ( Grafo arg0 ) { return obterVerticesOrdenados ( arg0 . getVertices ( ) ) ; }
void function ( Item arg0 ) { this . mob . setCurrentItemOrArmor ( 0 , new ItemStack ( arg0 ) ) ; }
ListStatusOptions function ( LoadMetadataType arg0 ) { mLoadMetadataType = arg0 ; return this ; }
AbstractPlugin function ( String arg0 ) { for ( AbstractPlugin loc0 : plugins ) { if ( loc0 . getName ( ) . equals ( arg0 ) ) { return loc0 ; } } return null ; }
void function ( boolean arg0 ) { if ( ! arg0 ) { inclusive_time = System . currentTimeMillis ( ) - inclusive_time ; } exclusive_time = System . currentTimeMillis ( ) - exclusive_time ; }
void function ( ) { mThrown . expect ( BlockDoesNotExistException . class ) ; mThrown . expectMessage ( ExceptionMessage . BLOCK_META_NOT_FOUND . getMessage ( TEST_BLOCK_ID ) ) ; mMetaManagerView . getBlockMeta ( TEST_BLOCK_ID ) ; }
Permission function ( ) { mMode = mMode . applyUMask ( Mode . getUMask ( ) ) . applyUMask ( FILE_UMASK ) ; return this ; }
String function ( String arg0 ) { String loc0 ; try { loc0 = URLEncoder . encode ( arg0 , UTF8_CHARSET ) . replace ( "srini_string" , "srini_string" ) . replace ( "srini_string" , "srini_string" ) . replace ( "srini_string" , "srini_string" ) ; } catch ( UnsupportedEncodingException loc1 ) { loc0 = arg0 ; } return loc0 ; }
void function ( String arg0 ) { File loc0 = new File ( arg0 ) ; com . google . common . io . Files . createParentDirs ( loc0 ) ; if ( ! loc0 . createNewFile ( ) ) { throw new IOException ( "srini_string" + arg0 ) ; } }
void function ( ) { assertEquals ( 7 , rmc . getDate ( ) . getMonth ( ) ) ; }
void function ( Document arg0 ) { this . doc = arg0 ; eval ( ) ; }
USAddress function ( ) { return billTo ; }
void function ( ) { String loc0 = "srini_string" ; when ( mHttpConMock . getOutputStream ( ) ) . thenThrow ( new IOException ( loc0 ) ) ; mThrown . expect ( IOException . class ) ; mThrown . expectMessage ( loc0 ) ; new SwiftOutputStream ( mHttpConMock ) . close ( ) ; }
byte [ ] function ( ) { return secret ; }
symbol function ( ) { return _on_symbol ; }
void function ( DAVTransaction arg0 , DAVResource arg1 ) { arg0 . setHeader ( "srini_string" , arg1 . getContentType ( ) ) ; arg0 . setHeader ( "srini_string" , DAVProcessor . METHODS ) ; arg0 . setStatus ( 200 ) ; }
boolean function ( Object arg0 ) { if ( ! ( arg0 instanceof Decision ) ) { return false ; } return ( ( Decision ) arg0 ) . getName ( ) . equals ( getName ( ) ) ; }
AddressingProperties function ( Message arg0 , boolean arg1 , boolean arg2 ) { return org . apache . cxf . ws . addressing . ContextUtils . retrieveMAPs ( arg0 , arg1 , arg2 ) ; }
GetOfferDetailsResponse . Return . DetailOfferData . Products . Product function ( ) { return new GetOfferDetailsResponse . Return . DetailOfferData . Products . Product ( ) ; }
void function ( ) { acitivityController . deregisterUserSession ( null , mockServerMessage ) ; }
void function ( ) { wireParser . closeConnection ( ) ; }
boolean function ( Authentication arg0 , Serializable arg1 , String arg2 , Object arg3 ) { throw new UnsupportedOperationException ( ) ; }
void function ( String [ ] arg0 ) { Locale . setDefault ( Locale . US ) ; OsmViewerPlusApp loc0 = new OsmViewerPlusApp ( arg0 ) ; loc0 . getFrame ( ) . readMap ( DataResource . getULMFileResource ( ) ) ; loc0 . showFrame ( ) ; }
void function ( ) { assertEquals ( 7.0 , ttm . getSpeed ( ) , 0.001 ) ; }
void function ( ) { System . out . println ( "srini_string" ) ; Device loc0 = null ; ArrayList < Capability > loc1 = null ; ArrayList < Capability > loc2 = loc0 . getCapabilities ( ) ; assertEquals ( loc1 , loc2 ) ; fail ( "srini_string" ) ; }
Position function ( Position arg0 , Position arg1 ) { if ( ! isComparable ( arg0 , arg1 ) ) return null ; if ( arg0 . endLine > arg1 . endLine ) return arg0 ; if ( arg0 . endLine == arg1 . endLine && arg0 . endColumn >= arg1 . endColumn ) return arg0 ; return arg1 ; }
void function ( String arg0 ) { this . transformedTokenIdentifier = arg0 ; }
List < VertexLabelType > function ( ) { return vertexLabels ; }
void function ( ) { assertTrue ( rte . isActiveRoute ( ) ) ; }
float function ( ) { return ( float ) Position . getDistKM ( latMax , lonMin , latMin , lonMin ) ; }
void function ( ) { final double loc0 = 180.000001 ; try { hdg . setDeviation ( loc0 ) ; fail ( "srini_string" ) ; } catch ( IllegalArgumentException loc1 ) { } catch ( Exception loc1 ) { fail ( loc1 . getMessage ( ) ) ; } }
boolean function ( ) { return mConnected ; }
Calendar function ( String arg0 ) { return getCalendar ( arg0 , DateUtils . getTimeZone ( "srini_string" ) ) ; }
void function ( ) { DataNettyBuffer loc0 = new DataNettyBuffer ( mBuffer , LENGTH ) ; Assert . assertEquals ( LENGTH , loc0 . getLength ( ) ) ; }
void function ( String arg0 ) { this . testId = arg0 ; }
void function ( ) { assertEquals ( 1.2 , hdg . getDeviation ( ) , 0.1 ) ; }
void function ( ) { System . out . println ( "srini_string" ) ; LogEntryInterval loc0 = new LogEntryInterval ( ) ; int loc1 = 0 ; int loc2 = loc0 . getNumberRequests ( ) ; assertEquals ( loc1 , loc2 ) ; }
void function ( char [ ] arg0 , int arg1 , int arg2 ) { while ( arg1 < arg2 ) { char loc0 = arg0 [ arg1 ] ; arg0 [ arg1 ] = arg0 [ arg2 ] ; arg0 [ arg2 ] = loc0 ; arg1 ++ ; arg2 -- ; } }
void function ( ) { Assert . assertEquals ( Mode . Bits . WRITE_EXECUTE , Mode . Bits . WRITE . or ( Mode . Bits . EXECUTE ) ) ; Assert . assertEquals ( Mode . Bits . READ_EXECUTE , Mode . Bits . READ . or ( Mode . Bits . EXECUTE ) ) ; Assert . assertEquals ( Mode . Bits . READ_WRITE , Mode . Bits . WRITE . or ( Mode . Bits . READ ) ) ; }
void function ( Intent arg0 , int arg1 ) { activity . startActivityForResult ( arg0 , arg1 ) ; }
double function ( DenseMatrix64F arg0 , DenseMatrix64F arg1 , DenseMatrix64F arg2 ) { func . compute ( arg0 , arg1 , temp0 ) ; double loc0 = diffNormF ( temp0 , arg2 ) ; return loc0 * loc0 / ( double ) arg1 . numRows ; }
DAVResource function ( URI arg0 ) { if ( arg0 == null ) return factory . getResource ( this , this . root ) ; if ( ! arg0 . isAbsolute ( ) ) arg0 = this . base . resolve ( arg0 ) . normalize ( ) ; return factory . getResource ( this , new File ( arg0 ) . getAbsoluteFile ( ) ) ; }
void function ( String arg0 ) { if ( isRunningOnServer ( ) ) return ; progressMonitor . arg0 = arg0 ; progressMonitor . log . append ( arg0 + "srini_string" ) ; if ( progressMonitor . consoleMode ) { System . out . println ( arg0 ) ; } }
boolean function ( Pattern arg0 , String arg1 ) { if ( arg1 != null && ! "srini_string" . equals ( arg1 ) ) { Matcher loc0 = arg0 . loc0 ( arg1 ) ; if ( loc0 . find ( ) ) { return true ; } } return false ; }
boolean function ( UserModel arg0 ) { return userService . updateUserModel ( arg0 ) ; }
void function ( String arg0 ) { UnderFileSystemUtils . deleteDir ( arg0 ) ; }
String function ( File arg0 ) { BufferedReader loc0 = new BufferedReader ( new FileReader ( arg0 ) ) ; return readFile ( loc0 ) ; }
void function ( ) { testEventProperties . put ( ActivityEvent . ID_KEY , "srini_string" ) ; acitivityController . handleEvent ( new Event ( ActivityEvent . EVENT_TOPIC , testEventProperties ) ) ; }
String function ( Class < ? > arg0 ) { String loc0 = SHORT_NAMES_BY_TYPE . get ( arg0 ) ; return loc0 == null ? arg0 . getName ( ) : loc0 ; }
AccessibilityRecordCompat function ( AccessibilityEvent arg0 , int arg1 ) { return new AccessibilityRecordCompat ( IMPL . getRecord ( arg0 , arg1 ) ) ; }
QRDecomposition < DenseMatrix64F > function ( int arg0 , int arg1 ) { return new QRDecompositionHouseholderColumn_D64 ( ) ; }
void function ( byte [ ] arg0 ) { _messageBody = arg0 ; }
MenuItem function ( OnMenuItemClickListener arg0 ) { mMenuItem . setOnMenuItemClickListener ( arg0 ) ; return this ; }
void function ( ) { assertTrue ( vhw . getTalkerId ( ) == TalkerId . VW ) ; assertTrue ( SentenceId . valueOf ( vhw . getSentenceId ( ) ) == SentenceId . VHW ) ; }
void function ( ) { LOG . trace ( "srini_string" ) ; this . m_protocolHandler . handleMessages ( this . m_readBuffer , this . m_inetSocketAddress ) ; this . m_readBuffer . clear ( ) ; }
double function ( ) { checkState ( count > 1 ) ; if ( isNaN ( sumOfSquaresOfDeltas ) ) { return NaN ; } return ensureNonNegative ( sumOfSquaresOfDeltas ) / ( count - 1 ) ; }
Object function ( String arg0 ) { for ( Object loc0 : obsoleteFeatures ) { if ( Model . getFacade ( ) . isAMethod ( loc0 ) && arg0 . equals ( Model . getFacade ( ) . getName ( loc0 ) ) ) { return loc0 ; } } return null ; }
void function ( final HttpParams arg0 , boolean arg1 ) { if ( arg0 == null ) { throw new IllegalArgumentException ( "srini_string" ) ; } arg0 . setBooleanParameter ( CoreConnectionPNames . TCP_NODELAY , arg1 ) ; }
boolean function ( final HttpServletRequest arg0 ) { return ( arg0 == null ) ? false : check ( arg0 . getHeader ( "srini_string" ) ) ; }
void function ( AbstractReportNode arg0 ) { childNodes . add ( 0 , arg0 ) ; arg0 . parentNode = this ; }
boolean function ( ) { return bufferSize == 0 ; }
Function < Object , T > function ( Supplier < T > arg0 ) { return new SupplierFunction < T > ( arg0 ) ; }
void function ( ) { final double loc0 = 359.9 ; hdg . setHeading ( loc0 ) ; assertEquals ( loc0 , hdg . getHeading ( ) , 0.1 ) ; }
StorageTierView function ( StorageTierView arg0 ) { int loc0 = arg0 . getTierViewOrdinal ( ) + 1 ; if ( loc0 < mTierViews . size ( ) ) { return mTierViews . get ( loc0 ) ; } return null ; }
void function ( final String arg0 ) { final File loc0 = new File ( "srini_string" ) ; loc0 . delete ( ) ; final OutputStream loc1 = new FileOutputStream ( loc0 ) ; final Reader loc2 = new StringReader ( arg0 ) ; IOUtils . copy ( loc2 , loc1 ) ; loc1 . flush ( ) ; loc1 . close ( ) ; loc2 . close ( ) ; }
void function ( THashSet < String > arg0 ) { mWhitelist . addAll ( arg0 ) ; }
int function ( String arg0 ) { if ( p1 . schema ( ) . hasField ( arg0 ) ) return p1 . distinctValues ( arg0 ) ; else return p2 . distinctValues ( arg0 ) ; }
File function ( File arg0 ) { try { return arg0 . getCanonicalFile ( ) ; } catch ( IOException loc0 ) { return arg0 . getAbsoluteFile ( ) ; } }
int function ( ) { return pref_group_len ; }
double function ( D1Matrix64F arg0 ) { double loc0 = 0 ; int loc1 = arg0 . getNumElements ( ) ; for ( int loc2 = 0 ; loc2 < loc1 ; loc2 ++ ) { double loc3 = arg0 . get ( loc2 ) ; loc0 += loc3 * loc3 ; } return Math . sqrt ( loc0 ) ; }
double function ( D1Matrix64F arg0 ) { double loc0 = 0 ; int loc1 = arg0 . getNumElements ( ) ; for ( int loc2 = 0 ; loc2 < loc1 ; loc2 ++ ) { double loc3 = arg0 . data [ loc2 ] ; loc0 += loc3 * loc3 ; } return loc0 ; }
boolean function ( Message arg0 ) { Boolean loc0 = ( Boolean ) arg0 . get ( Message . REQUESTOR_ROLE ) ; return loc0 != null && loc0 . booleanValue ( ) ; }
String function ( ) { return fldname ; }
void function ( String arg0 , String arg1 , List < String > arg2 ) { List < File > loc0 = new ArrayList < > ( ) ; for ( String loc1 : arg2 ) { File loc2 = new File ( loc1 ) ; loc0 . add ( loc2 ) ; } this . saveFiles ( arg0 , arg1 , loc0 ) ; }
boolean function ( ActivityRequest arg0 ) { if ( arg0 == null ) { return false ; } if ( arg0 . getFeedId ( ) == null ) { return false ; } return arg0 . getConfigProperties ( ) != null ; }
byte [ ] function ( byte [ ] arg0 , int arg1 ) { return decompress ( arg0 , 0 , arg1 ) ; }
void function ( String arg0 ) { String [ ] loc0 = arg0 . replaceAll ( "srini_string" , "srini_string" ) . toLowerCase ( ) . split ( "srini_string" ) ; for ( int loc1 = 0 ; loc1 < loc0 . length ; loc1 ++ ) { String loc2 = loc0 [ loc1 ] ; incrementTermCount ( loc2 ) ; } }
AdaptableHeuristicFunction function ( Object arg0 , Map arg1 ) { this . goal = arg0 ; this . map = arg1 ; return this ; }
int function ( ) { return this . emptyAnnotationRejects ; }
void function ( ) { mTestStream . setWrittenBytes ( BLOCK_LENGTH ) ; Assert . assertEquals ( 0L , mTestStream . remaining ( ) ) ; mTestStream . setWrittenBytes ( 40L ) ; Assert . assertEquals ( BLOCK_LENGTH - 40L , mTestStream . remaining ( ) ) ; mTestStream . setWrittenBytes ( 0L ) ; Assert . assertEquals ( BLOCK_LENGTH , mTestStream . remaining ( ) ) ; }
List < StorageTierView > function ( String arg0 ) { int loc0 = getTierView ( arg0 ) . getTierViewOrdinal ( ) ; return mTierViews . subList ( loc0 + 1 , mTierViews . size ( ) ) ; }
DeterministicKey function ( ) { if ( ! hasPrivate ( ) ) return this ; final DeterministicKey loc0 = getParent ( ) == null ? null : getParent ( ) . getPubOnly ( ) ; return new DeterministicKey ( getChildNumberPath ( ) , getChainCode ( ) , getPubPoint ( ) , null , loc0 ) ; }
Future < ? > function ( ) { RecomputePlan loc0 = mPlanner . loc0 ( ) ; if ( loc0 != null && ! loc0 . isEmpty ( ) ) { return mRecomputeLauncherService . submit ( new RecomputeLauncher ( loc0 ) ) ; } return Futures . < Void > immediateFuture ( null ) ; }
void function ( final String arg0 , final PropertyChangeListener arg1 ) { m_PropertyChangeSupport . removePropertyChangeListener ( arg0 , arg1 ) ; }
String function ( ) { return withExceptionHandling ( new Trans < String > ( ) { public String transform ( ) { return transformation . transformToString ( ) ; } } ) ; }
ArrayList function ( ) { return parameters ; }
BigDecimal function ( ) { return this . fileSize ; }
void function ( String arg0 , String arg1 ) { switch ( arg0 ) { case "srini_string" : if ( addBackgroundColor ( arg1 ) ) { properties . put ( arg0 , arg1 ) ; } break ; case "srini_string" : if ( addWidth ( arg1 ) ) { properties . put ( arg0 , arg1 ) ; } break ; } }
StatSource function ( int arg0 ) { if ( arg0 > 0 ) { return this . statSources . get ( arg0 ) ; } else { return null ; } }
void function ( HttpRequest arg0 , HttpResponse arg1 ) { }
void function ( Node arg0 ) { List < Node > loc0 = nodeNameToNodes . get ( arg0 . toString ( ) ) ; if ( loc0 != null ) { loc0 . add ( arg0 ) ; } }
long function ( ) { return this . testId ; }
void function ( short arg0 ) { format . checkType ( 'h' , true ) ; packLong ( arg0 , true ) ; }
TransactionOutputChanges function ( ) { return txOutChanges ; }
void function ( String arg0 ) { this . callbackHandlerClass = arg0 ; LOG . fine ( "srini_string" + arg0 ) ; }
int function ( ) { return this . peakEnd - this . peakStart ; }
void function ( String arg0 ) { tree = parseTree ( arg0 ) ; mapS = new HashMap < MTDFragmentAST , Tuple > ( ) ; mapN = new HashMap < String , IntegerHolder > ( ) ; decorate ( tree , new IntegerHolder ( 0 ) ) ; }
void function ( THashSet < String > arg0 ) { mBlacklist . addAll ( arg0 ) ; }
BigDecimal function ( ) { return this . expDataSetId ; }
void function ( String arg0 ) { this . errorMsg = arg0 ; }
MetadataEditorCompat function ( int arg0 , Bitmap arg1 ) { if ( HAS_REMOTE_CONTROL_APIS ) { ( ( RemoteControlClient . MetadataEditor ) mActualMetadataEditor ) . putBitmap ( arg0 , arg1 ) ; } return this ; }
String function ( String arg0 ) { return getWorkflow ( ) . getWorkflowInstance ( ) . getVar ( arg0 + WorkflowInstance . NODE_VAR_SEPARATOR + ACTION_EXTERNAL_ID ) ; }
String function ( ConfigurationKey arg0 ) { return getString ( arg0 , "srini_string" ) ; }
int function ( ) { int loc0 = 0 ; if ( format . available ( ) == 1 ) { loc0 = valueLen - valueOff ; } else { loc0 = unpackInt ( false ) ; } return loc0 ; }
String function ( int arg0 ) { if ( arg0 == 0 ) { return "srini_string" ; } else if ( arg0 == 1 ) { return "srini_string" ; } else { return "srini_string" ; } }
void function ( ) { hdm . setHeading ( 123.45 ) ; assertEquals ( 123.5 , hdm . getHeading ( ) , 0.1 ) ; }
void function ( T arg0 ) { if ( position >= max ) { position = 0 ; haveOverflow = true ; } if ( circularArray . size ( ) > position ) { circularArray . remove ( position ) ; } circularArray . add ( position , arg0 ) ; position ++ ; }
void function ( ) { mMasterThread . start ( ) ; }
void function ( String arg0 ) { this . identifier = arg0 ; }
void function ( byte [ ] arg0 , int arg1 , int arg2 ) { if ( arg1 + arg2 > arg0 . length ) { throw new ArrayIndexOutOfBoundsException ( ) ; } }
void function ( ) { mWriteLock . lock ( ) ; Assert . assertFalse ( mWriteLock . tryLock ( ) ) ; }
Long function ( ) { return testId ; }
List < String > function ( ) { return log ; }
void function ( ) { assertEquals ( - 6.1 , rmc . getVariation ( ) , 0.001 ) ; }
int function ( Date arg0 , boolean arg1 ) { return minutesAgo ( arg0 , System . currentTimeMillis ( ) , arg1 ) ; }
File function ( Context arg0 ) { File loc0 = getLibsDirectory ( arg0 ) ; if ( ! loc0 . isDirectory ( ) && ! loc0 . mkdirs ( ) ) { throw new RuntimeException ( "srini_string" ) ; } return loc0 ; }
Set < String > function ( final ResourceTypeHandler arg0 ) { return extensionsDenied . get ( arg0 ) ; }
void function ( ) { RPCFileReadResponse loc0 = new RPCFileReadResponse ( TEMP_UFS_FILE_ID , OFFSET , LENGTH , null , STATUS ) ; int loc1 = loc0 . getEncodedLength ( ) ; loc0 . encode ( mBuffer ) ; Assert . assertEquals ( loc1 , mBuffer . readableBytes ( ) ) ; }
String function ( String arg0 , Object ... arg1 ) { return String . format ( Locale . ROOT , arg0 , arg1 ) ; }
List < T > function ( T arg0 , T arg1 , T arg2 ) { List < T > loc0 = new ArrayList < > ( 3 ) ; loc0 . add ( arg0 ) ; loc0 . add ( arg1 ) ; loc0 . add ( arg2 ) ; return loc0 ; }
void function ( Class < ? > arg0 , Object arg1 ) { isInstanceOf ( arg0 , arg1 , "srini_string" ) ; }
Definition function ( Server arg0 ) { Service loc0 = arg0 . getEndpoint ( ) . getService ( ) ; ServiceWSDLBuilder loc1 = new ServiceWSDLBuilder ( bus , loc0 . getServiceInfos ( ) . get ( 0 ) ) ; loc1 . setUseSchemaImports ( false ) ; return loc1 . build ( ) ; }
String function ( String arg0 ) { return getList ( arg0 ) . get ( 0 ) ; }
boolean function ( ) { long loc0 = System . currentTimeMillis ( ) ; for ( SentenceEvent loc1 : events ) { long loc2 = loc0 - loc1 . getTimeStamp ( ) ; if ( loc2 > 1000 ) { return false ; } } return isValid ( ) ; }
void function ( ) { NoFileAssertListener loc0 = new NoFileAssertListener ( 1 ) ; cpd . setCpdListener ( loc0 ) ; cpd . add ( new File ( "srini_string" + BASE_TEST_RESOURCE_PATH , "srini_string" ) ) ; loc0 . verify ( ) ; }
Method function ( Class arg0 , Method arg1 ) { return ReflectionUtils . findMethod ( arg0 , arg1 . getName ( ) , arg1 . getParameterTypes ( ) ) ; }
void function ( Map < K , V > arg0 , Parcel arg1 , int arg2 ) { if ( arg0 != null ) { arg1 . writeInt ( arg0 . size ( ) ) ; for ( Entry < K , V > loc0 : arg0 . entrySet ( ) ) { arg1 . writeParcelable ( loc0 . getKey ( ) , arg2 ) ; arg1 . writeParcelable ( loc0 . getValue ( ) , arg2 ) ; } } else { arg1 . writeInt ( - 1 ) ; } }
String function ( ) { return title ; }
void function ( Timestamp arg0 ) { this . modifiedDate = arg0 ; }
boolean function ( ) { return false ; }
boolean function ( final String arg0 , final Map arg1 ) { if ( arg1 == null ) { return false ; } Object loc0 = arg1 . get ( arg0 ) ; if ( ! ( loc0 instanceof Boolean ) ) { return false ; } return ( ( Boolean ) loc0 ) . booleanValue ( ) ; }
ListenableFuture < PaymentChannelClientConnection > function ( ) { return channelOpenFuture ; }
String function ( ) { return "srini_string" ; }
Timestamp function ( ) { return this . modifiedDate ; }
void function ( final int arg0 , final byte [ ] arg1 , final int arg2 ) { arg1 [ arg2 ] = ( byte ) arg0 ; arg1 [ arg2 + 1 ] = ( byte ) ( arg0 >> 8 ) ; arg1 [ arg2 + 2 ] = ( byte ) ( arg0 >> 16 ) ; arg1 [ arg2 + 3 ] = ( byte ) ( arg0 >> 24 ) ; }
void function ( String arg0 , Bundle arg1 , RequestListener arg2 , final Object arg3 ) { request ( arg0 , arg1 , "srini_string" , arg2 , arg3 ) ; }
ServiceBuilder function ( Class < ? extends Api > arg0 ) { this . api = createApi ( arg0 ) ; return this ; }
boolean function ( CSSPrimitiveValue arg0 ) { short loc0 = 0 ; loc0 = ( ( CSSPrimitiveValue ) arg0 ) . getPrimitiveType ( ) ; return isAbsoluteUnit ( loc0 ) ; }
boolean function ( ) { return ( System . getProperty ( "srini_string" ) != null ) ; }
void function ( ) { assertEquals ( 25.0 , instance . getLongitude ( ) , 0.0000001 ) ; }
void function ( ) { RPCFileReadRequest loc0 = new RPCFileReadRequest ( TEMP_UFS_FILE_ID , OFFSET , LENGTH ) ; assertValid ( loc0 ) ; loc0 = new RPCFileReadRequest ( TEMP_UFS_FILE_ID , OFFSET , 0 ) ; assertValid ( loc0 ) ; }
boolean function ( StoredBlock arg0 ) { return chainWork . compareTo ( arg0 . chainWork ) > 0 ; }
void function ( ) { dataSetFieldColumnMapping = fetcherRegDataUnitVerifier . buildFieldAndColumnMapping ( new PCLDataSetEntity ( ) ) ; }
void function ( ) { if ( connection != null && connection . isOpen ( ) ) { try { connection . close ( ) ; } catch ( IOException loc0 ) { handleException ( "srini_string" , loc0 ) ; } finally { connection = null ; } } }
Sha256Hash function ( ) { return hash ; }
void function ( ) { ASTElement loc0 = element ( "srini_string" ) ; ASTElement loc1 = element ( "srini_string" ) ; ASTElement loc2 = element ( "srini_string" ) ; tagList . openTag ( loc0 ) ; tagList . openTag ( loc1 ) ; tagList . openTag ( loc2 ) ; tagList . closeTag ( loc0 ) ; assertFalse ( loc0 . isUnclosed ( ) ) ; assertTrue ( loc1 . isUnclosed ( ) ) ; assertTrue ( loc2 . isUnclosed ( ) ) ; }
void function ( char arg0 [ ] , int arg1 , int arg2 ) { try { writer . writeCharacters ( arg0 , arg1 , arg2 ) ; } catch ( XMLStreamException loc0 ) { throw new SAXException ( loc0 ) ; } }
HashCodeBuilder function ( Object [ ] arg0 ) { if ( arg0 == null ) { iTotal = iTotal * iConstant ; } else { for ( Object loc0 : arg0 ) { append ( loc0 ) ; } } return this ; }
void function ( String arg0 ) { this . filepath = arg0 ; }
void function ( ) { _sharedContext . flushFonts ( ) ; ( ( SWTReplacedElementFactory ) _sharedContext . getReplacedElementFactory ( ) ) . clean ( ) ; UserAgentCallback loc0 = _sharedContext . getUac ( ) ; if ( loc0 instanceof NaiveUserAgent ) { ( ( NaiveUserAgent ) loc0 ) . disposeCache ( ) ; } }
String function ( ) { String loc0 = uniqueName ; if ( loc0 != null ) { if ( ! loc0 . endsWith ( getZipFileExtension ( ) ) ) { loc0 += getZipFileExtension ( ) ; } } return loc0 ; }
long function ( ) { return this . value ; }
boolean function ( ) { return THIS . equals ( image ) || SUPER . equals ( image ) ; }
void function ( ) { Time loc0 = ttm . getTime ( ) ; assertNotNull ( loc0 ) ; assertEquals ( 17 , loc0 . getHour ( ) ) ; assertEquals ( 55 , loc0 . getMinutes ( ) ) ; assertEquals ( 50.24 , loc0 . getSeconds ( ) , 0.001 ) ; }
String function ( ) { return string1 ; }
void function ( String arg0 ) { this . userName = arg0 ; }
void function ( ) { this . m_markedForRemoval = true ; }
boolean function ( Object arg0 ) { return isLink ( arg0 ) && uac . isVisited ( nsh . getLinkUri ( ( Element ) arg0 ) ) ; }
Object function ( String arg0 ) { return webEngine . executeScript ( arg0 ) ; }
Result function ( ResultLevel arg0 ) { Result loc0 = new Result ( ) ; for ( ResultEntry loc1 : this . log ) { if ( loc1 . getLevel ( ) . compareTo ( arg0 ) <= 0 ) { loc0 . add ( loc1 ) ; } } return loc0 ; }
double function ( OperationMetricKey arg0 , ASTMethodOrConstructorDeclaration arg1 ) { return TOP_LEVEL_PACKAGE . compute ( arg0 , arg1 , false ) ; }
void function ( final PropertyChangeListener arg0 , Object arg1 , PropertyChangeEvent arg2 ) { if ( Model . getUmlFactory ( ) . isRemoved ( arg1 ) ) { LOG . warn ( "srini_string" + arg1 ) ; return ; } cleanListener ( arg0 , arg1 ) ; initialiseListener ( arg0 , arg1 ) ; }
LinearSolver < DenseMatrix64F > function ( int arg0 , int arg1 ) { if ( arg0 == arg1 ) return linear ( arg0 ) ; else return leastSquares ( arg0 , arg1 ) ; }
Long function ( ) { return dataSetId ; }
void function ( Timestamp arg0 ) { this . modifiedDate = arg0 ; }
void function ( ) { initInternal ( "srini_string" ) ; }
long function ( byte [ ] arg0 , int arg1 , int arg2 ) { long loc0 = 0 ; int loc1 = Math . min ( arg2 , 8 ) ; for ( int loc2 = 0 ; loc2 < loc1 ; loc2 ++ ) { loc0 |= ( arg0 [ arg1 + loc2 ] & 0xFFL ) << ( loc2 * 8 ) ; } return loc0 ; }
int function ( ConfigurationKey arg0 , int arg1 ) { return config . getInteger ( arg0 , arg1 ) ; }
void function ( ) { progressMonitor . curValue ++ ; }
Collection < Edge > function ( Node arg0 ) { return graph . getIncidentEdges ( arg0 ) ; }
HttpHost function ( ) { InetSocketAddress loc0 = localServer . getServiceAddress ( ) ; return new HttpHost ( loc0 . getHostName ( ) , loc0 . getPort ( ) , "srini_string" ) ; }
String function ( ) { return namespaceURI ; }
void function ( @ PathVariable long arg0 ) { repository . delete ( arg0 ) ; }
int function ( String arg0 ) { return si . distinctValues ( arg0 ) ; }
void function ( long arg0 ) { while ( ! session . isShutdown ( ) && ! haveAcknowledgementFor ( arg0 ) ) { waitForSeqAckLatch . set ( new CountDownLatch ( 1 ) ) ; waitForSeqAckLatch . get ( ) . await ( 10 , TimeUnit . MILLISECONDS ) ; } }
void function ( ) { RPCFileWriteRequest loc0 = new RPCFileWriteRequest ( TEMP_UFS_FILE_ID , OFFSET , LENGTH , null ) ; int loc1 = loc0 . getEncodedLength ( ) ; loc0 . encode ( mBuffer ) ; Assert . assertEquals ( loc1 , mBuffer . readableBytes ( ) ) ; }
SpringChain function ( ) { return new SpringChain ( ) ; }
boolean function ( String arg0 ) { File loc0 = new File ( arg0 ) ; if ( loc0 . exists ( ) ) { return true ; } return false ; }
String function ( ) { return this . checksumType ; }
void function ( AbstractDosPlugin arg0 ) { String loc0 = arg0 . getName ( ) ; assertTrue ( loc0 . length ( ) > 0 ) ; }
long function ( ) { return inactivityTimeout == null ? 0 : inactivityTimeout . longValue ( ) ; }
ELEvaluator function ( Date arg0 , Configuration arg1 ) { ELEvaluator loc0 = Services . get ( ) . get ( ELService . class ) . createEvaluator ( "srini_string" ) ; setConfigToEval ( loc0 , arg1 ) ; SyncCoordAction loc1 = new SyncCoordAction ( ) ; loc1 . setNominalTime ( arg0 ) ; CoordELFunctions . configureEvaluator ( loc0 , null , loc1 ) ; return loc0 ; }
Sentence function ( String arg0 ) { String loc0 = SentenceId . parseStr ( arg0 ) ; return createParserImpl ( loc0 , arg0 ) ; }
TimestampService function ( ) { return new TimestampServiceImpl ( ) ; }
void function ( String arg0 ) { this . lastVersion = arg0 ; }
void function ( InputStream arg0 ) { }
void function ( boolean arg0 ) { this . verifyProofOfPossession = arg0 ; }
PolicyPublisher function ( ) { return policyPublisher ; }
Options function ( ) { return options ; }
void function ( ARDrone arg0 ) { this . drone = arg0 ; this . cmd = this . drone . getCommandManager ( ) ; }
void function ( T arg0 , String arg1 , BitmapDisplayConfig arg2 , long arg3 , long arg4 ) { }
void function ( ErrorQueue arg0 ) { Report . arg0 = arg0 ; }
void function ( Stylesheet arg0 ) { this . stylesheet = arg0 ; }
Auth function ( ) { return auth ; }
void function ( final JSONObject arg0 , final String arg1 , final Long arg2 ) { try { arg0 . put ( arg1 , arg2 ) ; } catch ( final JSONException loc0 ) { LOG . warn ( "srini_string" , loc0 ) ; } }
boolean function ( View arg0 , AccessibilityEvent arg1 ) { return IMPL . dispatchPopulateAccessibilityEvent ( DEFAULT_DELEGATE , arg0 , arg1 ) ; }
Optional < String > function ( String arg0 ) { int loc0 = Integer . parseInt ( arg0 , 16 ) ; int loc1 = ( loc0 & 0xFF0000 ) >> 16 ; int loc2 = ( loc0 & 0xFF00 ) >> 8 ; int loc3 = ( loc0 & 0xFF ) ; return getNamedColor ( loc1 , loc2 , loc3 ) ; }
Schema function ( ) { return sch ; }
Long function ( ) { return batchId ; }
void function ( String arg0 , String arg1 , Double arg2 ) { links . set ( arg0 , arg1 , arg2 ) ; }
void function ( String arg0 , int arg1 ) { addField ( arg0 , VARCHAR , arg1 ) ; }
void function ( Collection arg0 , String arg1 ) { if ( CollectionUtils . isEmpty ( arg0 ) ) { throw new IllegalArgumentException ( arg1 ) ; } }
void function ( ) { mClient = Mockito . mock ( AmazonS3Client . class ) ; mManager = Mockito . mock ( TransferManager . class ) ; mS3UnderFileSystem = new S3AUnderFileSystem ( new AlluxioURI ( "srini_string" ) , mClient , BUCKET_NAME , BUCKET_PREFIX , BUCKET_MODE , ACCOUNT_OWNER , mManager ) ; }
int function ( ) { return blockSize ; }
boolean function ( CSSName arg0 ) { return cascadedProperties . get ( arg0 ) != null ; }
boolean function ( ) { if ( errorCode != 0 ) { return true ; } return false ; }
OutputStream function ( ) { return this . response . getOutputStream ( ) ; }
String function ( ) { StringBuilder loc0 = new StringBuilder ( ) ; for ( String loc1 : log ) { loc0 . append ( loc1 ) . append ( ( "srini_string" ) ) ; } return loc0 . toString ( ) . trim ( ) ; }
int function ( ) { return 8 * y + x ; }
void function ( Scan arg0 ) { Constant loc0 = arg0 . getVal ( fldname ) ; if ( loc0 . compareTo ( val ) > 0 ) val = loc0 ; }
boolean function ( ) { return StringUtils . contains ( content , "srini_string" ) || StringUtils . contains ( content , "srini_string" ) ; }
U2FService function ( ) { if ( u2FService == null ) { synchronized ( U2FService . class ) { if ( u2FService == null ) { u2FService = new U2FService ( ) ; return u2FService ; } else { return u2FService ; } } } else { return u2FService ; } }
ResponseEntity < DishCollection > function ( @ PathVariable String arg0 ) { log . debug ( "srini_string" , arg0 ) ; DishCollection loc0 = dishCollectionService . findOne ( arg0 ) ; return Optional . ofNullable ( loc0 ) . map ( result -> new ResponseEntity < > ( result , HttpStatus . OK ) ) . orElse ( new ResponseEntity < > ( HttpStatus . NOT_FOUND ) ) ; }
Script function ( TransactionSignature arg0 ) { return new ScriptBuilder ( ) . data ( arg0 . encodeToBitcoin ( ) ) . build ( ) ; }
void function ( ) { Mockito . when ( mockServerConfig . getIssuer ( ) ) . thenReturn ( "srini_string" ) ; RegisteredClient loc0 = service . getClientConfiguration ( mockServerConfig ) ; assertThat ( loc0 , is ( nullValue ( ) ) ) ; }
Builder function ( String arg0 ) { this . id = arg0 ; return this ; }
void function ( Boolean arg0 ) { this . accountNonExpired = arg0 ; }
String function ( Object arg0 ) { return nsh . getLang ( ( Element ) arg0 ) ; }
AbstractAction function ( ) { return redoAction ; }
Collection < Device > function ( ) { return devices . values ( ) ; }
void function ( Boolean arg0 ) { this . accountNonLocked = arg0 ; }
List < Station > function ( ) { return stationDao . find ( ) . asList ( ) ; }
void function ( ) { for ( Block loc0 : pins ) { Buffer loc1 = buffers . get ( loc0 ) ; bufferMgr . unpin ( loc1 ) ; } buffers . clear ( ) ; pins . clear ( ) ; }
void function ( String arg0 ) { if ( this . debug ) this . doLog ( arg0 , null ) ; }
boolean function ( ) { return settings . getBoolean ( Keys . git . enableGitServlet , true ) || ( settings . getInteger ( Keys . git . daemonPort , 0 ) > 0 ) || ( settings . getInteger ( Keys . git . sshPort , 0 ) > 0 ) ; }
void function ( byte [ ] arg0 ) { this . addByteArray ( arg0 , 0 , arg0 . length ) ; }
HashMap < String , GeneticProfile > function ( ) { return getDefaultGeneticProfileMap ( false , true ) ; }
String function ( ) { return executionEndDateTime ; }
void function ( ) { assertEquals ( 11 , ttm . getNumber ( ) ) ; }
Mode function ( ) { return applyUMask ( getUMask ( ) ) ; }
int function ( ReceiverLossListEntry arg0 ) { return ( int ) ( sequenceNumber - arg0 . sequenceNumber ) ; }
void function ( long arg0 , TimeUnit arg1 ) { if ( arg1 == null ) { throw new IllegalArgumentException ( "srini_string" ) ; } poolLock . lock ( ) ; try { idleConnHandler . closeIdleConnections ( arg1 . toMillis ( arg0 ) ) ; } finally { poolLock . unlock ( ) ; } }
void function ( IRtfListener arg0 ) { arg0 . processBinaryBytes ( data ) ; }
void function ( ) { assertEquals ( 13.7 , ttm . getBearing ( ) , 0.001 ) ; }
boolean function ( int arg0 ) { AbstractPlugin loc0 = getByIndex ( arg0 ) ; return remove ( loc0 ) ; }
Map < Class < ? extends Annotation > , Collection < Class < ? >>> function ( Collection < String > arg0 , List < Class < ? extends Annotation >> arg1 ) { return findClasses ( arg0 , arg1 , null ) ; }
void function ( java . io . ObjectOutputStream arg0 ) { arg0 . defaultWriteObject ( ) ; int loc0 = loc0 ( ) ; arg0 . writeInt ( loc0 ) ; for ( int loc1 = 0 ; loc1 < loc0 ; loc1 ++ ) { arg0 . writeDouble ( get ( loc1 ) ) ; } }
void function ( Date arg0 ) { this . fetcherEndTimeStamp = arg0 ; }
String function ( ) { return user ; }
void function ( final String arg0 ) { UnderFileSystem loc0 = UnderFileSystem . get ( arg0 ) ; OutputStream loc1 = loc0 . create ( arg0 ) ; loc1 . close ( ) ; }
void function ( ) { if ( with_the_ad ) { withad . notifyDataSetChanged ( ) ; } else { noad . notifyDataSetChanged ( ) ; } }
BufferedImage function ( ) { if ( coverArtImage != null ) { if ( image == null ) { try { image = ImageIO . read ( coverArtImage . getLargeThumbnail ( ) ) ; } catch ( IOException loc0 ) { Popup . error ( loc0 ) ; } } } return image ; }
CertificateInfo function ( ) { return new CertificateInfo ( ) ; }
SharedContext function ( ) { return panel . getSharedContext ( ) ; }
ApplicationManagementService function ( ) { return ApplicationManagementServiceImpl . getInstance ( ) ; }
void function ( ) { locks = null ; }
BufferedByteWriter function ( byte [ ] arg0 ) { ensureCapacity ( 2 + arg0 . length ) ; mWriter . putShort ( ( short ) arg0 . length ) ; mWriter . put ( arg0 ) ; return this ; }
int function ( int arg0 ) { if ( arg0 < 253 ) return 1 ; else if ( arg0 < 65536 ) return 3 ; return 5 ; }
CoordinatorEngine function ( String arg0 , String arg1 ) { return new CoordinatorEngine ( arg0 , arg1 ) ; }
Coin function ( final int arg0 , final int arg1 ) { checkArgument ( arg1 < 100 ) ; checkArgument ( arg1 >= 0 ) ; checkArgument ( arg0 >= 0 ) ; final Coin loc0 = COIN . multiply ( arg0 ) . add ( CENT . multiply ( arg1 ) ) ; checkArgument ( loc0 . compareTo ( NetworkParameters . MAX_MONEY ) <= 0 ) ; return loc0 ; }
void function ( URL arg0 ) { openUrl ( arg0 . toString ( ) ) ; }
Position function ( polyglot . types . TypeObject arg0 ) { Position loc0 = arg0 . position ( ) ; if ( loc0 == null ) loc0 = Position . compilerGenerated ( 0 ) ; return loc0 ; }
Integer function ( ) { return errorCode ; }
void function ( int arg0 ) { tokenHash = arg0 ; }
DiffBuilder function ( Object arg0 ) { testSource = getSource ( arg0 ) ; return this ; }
String function ( ) { return id ; }
EndpointReferenceType function ( EndpointInfo arg0 , Bus arg1 ) { return getTargetReference ( arg0 , null , arg1 ) ; }
RoleList function ( ) { return new RoleList ( ) ; }
void function ( Object arg0 , String arg1 , Object arg2 ) { Field loc0 ; if ( arg0 instanceof Class ) loc0 = getFieldImpl ( ( Class ) arg0 , arg1 ) ; else loc0 = getFieldImpl ( arg0 . getClass ( ) , arg1 ) ; loc0 . setAccessible ( true ) ; loc0 . set ( arg0 , arg2 ) ; }
byte [ ] function ( ) { return scriptBytes ; }
boolean function ( Object arg0 ) { return ui . isActive ( ( Element ) arg0 ) ; }
void function ( String arg0 ) { try { processWriter . write ( arg0 + "srini_string" ) ; processWriter . flush ( ) ; } catch ( IOException loc0 ) { loc0 . printStackTrace ( ) ; } }
void function ( ContextFactory arg0 ) { dim . attachTo ( arg0 ) ; }
void function ( ) { this . parent . remove ( this . credential . toString ( ) ) ; parent = null ; }
boolean function ( String arg0 ) { if ( arg0 . startsWith ( userRepoPrefix ) ) return true ; return false ; }
boolean function ( String arg0 ) { mIPv6Matcher = mIPv6Pattern . matcher ( arg0 ) ; try { return mIPv6Matcher . matches ( ) ; } catch ( Exception loc0 ) { Log . loc0 ( Constants . TAG , "srini_string" , loc0 ) ; return true ; } }
MapMaker function ( ) { return setKeyStrength ( Strength . WEAK ) ; }
void function ( ) { DenseMatrix64F loc0 = RandomMatrices . createRandom ( 5 , 5 , rand ) ; checkItAll ( loc0 ) ; }
String function ( ) { return pmids ; }
ResultEntry function ( int arg0 ) { return log . get ( arg0 ) ; }
ConfigurationKey function ( String arg0 , String arg1 , String arg2 , String arg3 ) { return new ConfigurationKeyImpl ( arg0 , arg1 , arg2 , arg3 ) ; }
String function ( ) { return "srini_string" + fldname ; }
long function ( ) { final long loc0 = System . currentTimeMillis ( ) ; final long loc1 = loc0 - this . m_startTime ; return loc1 ; }
void function ( ) { assertEquals ( 2 , time . getMinutes ( ) ) ; }
Set < String > function ( ) { return jedis . keys ( "srini_string" ) ; }
Site function ( String arg0 ) { log . debug ( "srini_string" , arg0 ) ; Site loc0 = siteRepository . findOne ( arg0 ) ; return loc0 ; }
ResultFunction function ( ) { return resultFunction ; }
String function ( Date arg0 ) { return timeAgo ( arg0 , false ) ; }
void function ( String arg0 ) { try { throw new Exception ( arg0 ) ; } catch ( Exception loc0 ) { loc0 . printStackTrace ( ) ; System . exit ( 0 ) ; } }
void function ( ) { funcObjects = new ObjArray ( ) ; functionVarMappings = new ArrayList ( ) ; }
void function ( HttpServletRequest arg0 ) { arg0 . getSession ( ) . removeAttribute ( EMAIL ) ; }
int function ( String arg0 ) { try { if ( arg0 . equals ( "srini_string" ) || arg0 . equals ( "srini_string" ) ) { return - 1 ; } else { return Integer . parseInt ( arg0 ) ; } } catch ( Exception loc0 ) { throw new IllegalArgumentException ( "srini_string" + arg0 ) ; } }
String function ( ) { return mainMethodClassName ; }
byte function ( final int arg0 ) { assert arg0 >= 0 ; assert arg0 < 8 ; return ( byte ) ( 1 << arg0 ) ; }
NotationProvider function ( int arg0 , Object arg1 ) { NotationName loc0 = Notation . findNotation ( currentLanguage ) ; return getNotationProvider ( arg0 , arg1 , loc0 ) ; }
void function ( String arg0 , byte [ ] arg1 ) { try { fos = new FileOutputStream ( arg0 ) ; fos . write ( arg1 ) ; fos . close ( ) ; } catch ( Exception loc0 ) { System . err . println ( "srini_string" + arg0 + "srini_string" + loc0 . toString ( ) ) ; } System . out . println ( "srini_string" + arg0 ) ; }
void function ( DirectedAcyclicGraphNode < T > arg0 ) { Preconditions . checkState ( mChildren . contains ( arg0 ) ) ; mChildren . remove ( arg0 ) ; }
Object function ( Object arg0 , String arg1 , Object [ ] arg2 ) { Class [ ] loc0 = null ; if ( arg2 != null ) { loc0 = new Class [ arg2 . length ] ; for ( int loc1 = 0 ; loc1 < arg2 . length ; loc1 ++ ) { if ( arg2 [ loc1 ] != null ) loc0 [ loc1 ] = arg2 [ loc1 ] . getClass ( ) ; } } return invokeMethod ( arg0 , arg1 , arg2 , loc0 ) ; }
void function ( String arg0 , OperationSignature arg1 ) { if ( ! operations . containsKey ( arg1 ) ) { operations . put ( arg1 , new HashMap < String , OperationStats > ( ) ) ; } operations . get ( arg1 ) . put ( arg0 , new OperationStats ( arg0 ) ) ; }
Script function ( List < byte [ ] > arg0 ) { checkArgument ( arg0 . size ( ) <= 16 ) ; ScriptBuilder loc0 = new ScriptBuilder ( ) ; loc0 . smallNum ( 0 ) ; for ( byte [ ] loc1 : arg0 ) loc0 . data ( loc1 ) ; return loc0 . build ( ) ; }
void function ( ) { try { time . setHour ( - 1 ) ; fail ( "srini_string" ) ; } catch ( IllegalArgumentException loc0 ) { } }
UntypedItem function ( PlatformLayerKey arg0 , Tag arg1 , String arg2 , Format arg3 ) { return platformLayerClient . putItemByTag ( arg0 , arg1 , arg2 , arg3 ) ; }
void function ( ) { RPCBlockReadRequest loc0 = new RPCBlockReadRequest ( BLOCK_ID , OFFSET , LENGTH , LOCK_ID , SESSION_ID ) ; int loc1 = loc0 . getEncodedLength ( ) ; loc0 . encode ( mBuffer ) ; Assert . assertEquals ( loc1 , mBuffer . readableBytes ( ) ) ; }
int function ( ) { return offset ; }
ArrayList < String > function ( ) { Map < String , Double > loc0 = this . evaluate ( ) ; return sortByValue ( loc0 ) ; }
String function ( MessageReader arg0 ) { String loc0 = readAttributeValue ( arg0 , SOAP_ENCODING_REF_1_2 ) ; if ( loc0 == null ) { loc0 = readAttributeValue ( arg0 , SOAP_ENCODING_REF_1_1 ) ; } return loc0 ; }
String function ( ) { return Util . selectRandomlyFromList ( getLocations ( ) ) ; }
ShareOpenGraphObject function ( final String arg0 ) { final Object loc0 = this . bundle . get ( arg0 ) ; return ( loc0 instanceof ShareOpenGraphObject ? ( ShareOpenGraphObject ) loc0 : null ) ; }
void function ( ) { if ( connectedHandler != null ) connectedHandler . close ( ) ; }
Date function ( String arg0 , String arg1 ) { if ( arg0 == null ) return null ; ParsePosition loc0 = new ParsePosition ( 0 ) ; SimpleDateFormat loc1 = new SimpleDateFormat ( arg1 ) ; Date loc2 = loc1 . parse ( arg0 , loc0 ) ; return loc2 ; }
boolean function ( ) { return selected ; }
void function ( Object arg0 ) { mArray . add ( arg0 ) ; }
boolean function ( String arg0 , String arg1 ) { return userService . renameRepositoryRole ( arg0 , arg1 ) ; }
void function ( BundleContext arg0 ) { for ( AutoSIMConnectionConfig loc0 : config . connections ) { environments . deregisterConnectionFactory ( loc0 . name ) ; factories . remove ( loc0 . name ) ; } }
void function ( int arg0 ) { unifiedBreak ( arg0 , 1 , "srini_string" , 1 ) ; }
void function ( ) { CollisionDJBX33X loc0 = new CollisionDJBX33X ( ) ; int loc1 = loc0 . hashForth ( "srini_string" ) ; assertEquals ( 998537770 , loc1 ) ; System . out . println ( "srini_string" + ( loc0 . hashForth ( "srini_string" ) ) ) ; }
void function ( ) { EntityAttributeManager . instance ( ) . clearHash ( ) ; nodes . clear ( ) ; ways . clear ( ) ; pois . clear ( ) ; markers . clear ( ) ; tracks . clear ( ) ; entityTree = null ; boundingBox = null ; fireMapDataEvent ( new MapEvent ( this , MapEvent . Type . MAP_CLEARED ) ) ; }
boolean function ( ) { return this . results . isEmpty ( ) ; }
void function ( int arg0 , int arg1 ) { if ( initialized ) { framingRect = getFramingRect ( ) ; Log . d ( TAG , "srini_string" + framingRect ) ; framingRectInPreview = null ; } else { requestedFramingRectWidth = arg0 ; requestedFramingRectHeight = arg1 ; } }
String function ( ) { return this . token ; }
Map < String , String > function ( String arg0 ) { return null ; }
int function ( ) { long loc0 = getTime ( ) ; int loc1 = ( int ) ( loc0 - lastFrame ) ; lastFrame = loc0 ; return loc1 ; }
boolean function ( DenseMatrix64F arg0 ) { blockA . reshape ( arg0 . numRows , arg0 . numCols , false ) ; BlockMatrixOps . convert ( arg0 , blockA ) ; return alg . setA ( blockA ) ; }
T function ( T arg0 , long arg1 ) { if ( isHealthy ( arg0 ) ) { return arg0 ; } else { LOG . info ( "srini_string" , arg0 ) ; remove ( arg0 ) ; closeResource ( arg0 ) ; return acquire ( arg1 - mClock . millis ( ) , TimeUnit . MILLISECONDS ) ; } }
void function ( ) { assertEquals ( Units . METER , mwv . getSpeedUnit ( ) ) ; }
void function ( ) { ResourceSet loc0 = new ResourceSet ( ) ; loc0 . setId ( 1L ) ; resourceSetService . saveNew ( loc0 ) ; }
void function ( ) { System . out . println ( fis . getFunctionBlock ( null ) . getVariables ( ) . toString ( ) ) ; }
void function ( String arg0 ) { addField ( arg0 , INTEGER , 0 ) ; }
int function ( ) { return url . hashCode ( ) ; }
Set < String > function ( ) { return Collections . unmodifiableSet ( instances . keySet ( ) ) ; }
void function ( ) { mStream . flush ( ) ; mStream . close ( ) ; Mockito . verify ( mLocalOutputStream ) . flush ( ) ; }
void function ( ) { throw new UnsupportedOperationException ( ) ; }
Class function ( Class arg0 , String arg1 ) { Class loc0 = getClassImpl ( arg0 , arg1 ) ; return loc0 ; }
LocalAlluxioMaster function ( final String arg0 ) { UnderFileSystemUtils . mkdirIfNotExists ( arg0 ) ; return new LocalAlluxioMaster ( ) ; }
void function ( ) { ByteBuffer . setUseDirectBuffers ( false ) ; ByteBuffer . setAllocator ( new SimpleByteBufferAllocator ( ) ) ; }
ConditionsProvider function ( ) { return conditionsProvider ; }
void function ( ) { if ( blk != null ) { tx . unpin ( blk ) ; blk = null ; } }
void function ( String arg0 ) { this . tokenId = arg0 ; }
String function ( ) { String loc0 = "srini_string" ; try { loc0 = address . getCountrySubentityCode ( ) . getValue ( ) ; } catch ( NullPointerException loc1 ) { } return loc0 ; }
void function ( Lock arg0 , long arg1 ) { arg0 . unlock ( ) ; releaseBlockLockIfUnused ( arg1 ) ; }
double function ( ) { final String loc0 = System . getProperty ( "srini_string" , "srini_string" ) ; return Double . parseDouble ( loc0 ) ; }
void function ( ) { long loc0 = 1 ; mThrown . expect ( BlockDoesNotExistException . class ) ; mThrown . expectMessage ( ExceptionMessage . LOCK_RECORD_NOT_FOUND_FOR_LOCK_ID . getMessage ( loc0 ) ) ; mLockManager . unlockBlock ( loc0 ) ; }
String function ( ) { return this . checksumType ; }
void function ( int arg0 ) { String loc0 ; String loc2 = String . valueOf ( arg0 ) ; loc0 = "srini_string" + channel ; loc0 = loc0 + "srini_string" ; loc0 = loc0 + loc2 ; try { runUrl ( loc0 ) ; } catch ( IOException loc1 ) { loc1 . printStackTrace ( ) ; } }
void function ( ) { System . out . println ( "srini_string" ) ; Device loc0 = null ; int loc1 = 0 ; int loc2 = loc0 . getAddress ( ) ; assertEquals ( loc1 , loc2 ) ; fail ( "srini_string" ) ; }
long function ( ) { return maxLifetime ; }
RouteCalculator function ( ) { return new RouteCalculator ( ) ; }
void function ( String arg0 , String arg1 ) { Files . setPosixFilePermissions ( Paths . get ( arg0 ) , PosixFilePermissions . fromString ( arg1 ) ) ; }
void function ( InputStream arg0 ) { if ( reader . isRunning ( ) ) { stop ( ) ; } reader = new DefaultDataReader ( arg0 , this ) ; }
void function ( ) { try { connection . close ( ) ; } catch ( SQLException loc0 ) { Jamuz . getLogger ( ) . log ( Level . SEVERE , "srini_string" , loc0 ) ; } }
List < Date > function ( ) { if ( dates == null ) { dates = new ArrayList < Date > ( ) ; } return this . dates ; }
void function ( float arg0 , float arg1 , float arg2 , float arg3 , float arg4 , float arg5 ) { glPushMatrix ( ) ; glBegin ( GL_QUADS ) ; glColor3f ( 0.39f , 0.39f , 0.39f ) ; glVertex3f ( arg0 , arg1 , - arg2 ) ; glVertex3f ( arg0 + arg4 , arg1 , - ( arg2 + arg5 ) ) ; glVertex3f ( arg0 + arg4 , arg1 + arg3 , - ( arg2 + arg5 ) ) ; glVertex3f ( arg0 , arg1 + arg3 , - arg2 ) ; glEnd ( ) ; glPopMatrix ( ) ; }
void function ( ) { initInternal ( "srini_string" ) ; Localizer . addResource ( "srini_string" , "srini_string" ) ; }
String function ( String arg0 ) { String loc0 = cleanPath ( arg0 ) ; String loc1 = FilenameUtils . getName ( loc0 ) ; String loc2 = loc0 . substring ( 0 , loc0 . length ( ) - loc1 . length ( ) - 1 ) ; if ( loc2 . isEmpty ( ) ) { return AlluxioURI . SEPARATOR ; } return loc2 ; }
void function ( TrustManager [ ] arg0 ) { trustManagers = arg0 ; }
void function ( EndpointReferenceType arg0 ) { replyTo = arg0 ; }
String function ( Date arg0 ) { SimpleDateFormat loc0 = new SimpleDateFormat ( "srini_string" ) ; loc0 . setTimeZone ( TimeZone . getTimeZone ( "srini_string" ) ) ; return loc0 . format ( arg0 ) ; }
void function ( RowHeaderType arg0 , ColumnHeaderType arg1 , ValueType arg2 ) { rows . get ( arg0 ) . put ( arg1 , arg2 ) ; }
void function ( List < String > arg0 ) { this . acceptedSignatureAlgorithms = arg0 ; }
void function ( ) { System . out . println ( "srini_string" ) ; String loc0 = "srini_string" ; instance . setResponseString ( loc0 ) ; }
Map < String , String > function ( ) { return this . namespaceMap ; }
void function ( ) { assertEquals ( FaaMode . AUTOMATIC , rmc . getMode ( ) ) ; }
void function ( ) { assertEquals ( Direction . RIGHT , rmb . getSteerTo ( ) ) ; }
int function ( ) { return ii . recordsOutput ( ) ; }
String function ( ) { return msg ; }
int function ( ) { return priority ; }
String function ( String arg0 ) { String loc0 = getPrefix ( arg0 ) ; if ( loc0 == null ) { do { loc0 = NS_PREFIX_PREFIX + nsPrefixCount ++ ; } while ( getURI ( loc0 ) != null ) ; add ( loc0 , arg0 ) ; } return loc0 ; }
Actual function ( Actual arg0 ) { return arg0 ; }
BrowseOffersResponse . Return . OfferData . OfferMedia . OfferImage . Entry . Value function ( ) { return new BrowseOffersResponse . Return . OfferData . OfferMedia . OfferImage . Entry . Value ( ) ; }
void function ( ) { try { rte . setSentenceIndex ( - 1 ) ; fail ( "srini_string" ) ; } catch ( IllegalArgumentException loc0 ) { assertTrue ( loc0 . getMessage ( ) . contains ( "srini_string" ) ) ; } catch ( Exception loc0 ) { fail ( loc0 . getMessage ( ) ) ; } }
void function ( ) { step -- ; if ( step < 0 ) step = 0 ; undoAction ( step ) ; if ( item != null ) item . changed ( ) ; }
float function ( MotionEvent arg0 , int arg1 ) { return IMPL . getX ( arg0 , arg1 ) ; }
long function ( ) { return mDir . getCommittedBytes ( ) ; }
void function ( ) { long loc0 = new Random ( ) . nextLong ( ) ; CompleteFileOptions loc1 = CompleteFileOptions . defaults ( ) ; loc1 . setUfsLength ( loc0 ) ; CompleteFileTOptions loc2 = loc1 . toThrift ( ) ; Assert . assertEquals ( loc0 , loc2 . getUfsLength ( ) ) ; }
ClassLoader function ( ) { return getClassLoader ( ClassHelper . class ) ; }
Wrapper function ( Class < ? > arg0 ) { while ( ClassGenerator . isDynamicClass ( arg0 ) ) arg0 = arg0 . getSuperclass ( ) ; if ( arg0 == Object . class ) return OBJECT_WRAPPER ; Wrapper loc0 = WRAPPER_MAP . get ( arg0 ) ; if ( loc0 == null ) { loc0 = makeWrapper ( arg0 ) ; WRAPPER_MAP . put ( arg0 , loc0 ) ; } return loc0 ; }
Scan function ( ) { Scan loc0 = p . open ( ) ; return new ProjectScan ( loc0 , schema . fields ( ) ) ; }
void function ( int arg0 ) { this . grado = arg0 ; }
Response function ( RestUtils . RestCallable < T > arg0 ) { try { return createResponse ( arg0 . call ( ) ) ; } catch ( Exception loc0 ) { LOG . error ( "srini_string" , loc0 ) ; return createErrorResponse ( loc0 . getMessage ( ) ) ; } }
void function ( ) { try { instance . setYear ( 10000 ) ; fail ( "srini_string" ) ; } catch ( IllegalArgumentException loc1 ) { } }
QualifiedName function ( ASTConstructorDeclaration arg0 ) { ASTClassOrInterfaceDeclaration loc0 = arg0 . getFirstParentOfType ( ASTClassOrInterfaceDeclaration . class ) ; return makeOperationOf ( loc0 . getQualifiedName ( ) , loc0 . getImage ( ) , arg0 . getFirstDescendantOfType ( ASTFormalParameters . class ) ) ; }
void function ( ApplicationManagementService arg0 ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "srini_string" ) ; } OAuth2ServiceComponentHolder . setApplicationMgtService ( null ) ; }
List < String > function ( CertificateConstraintsType arg0 ) { if ( arg0 != null && arg0 . isSetSubjectDNConstraints ( ) ) { DNConstraintsType loc0 = arg0 . getSubjectDNConstraints ( ) ; return loc0 . getRegularExpression ( ) ; } return java . util . Collections . emptyList ( ) ; }
void function ( ) { notificationController . deregisterUserSession ( null , mockServerMessage ) ; }
TiledMap function ( String arg0 , String arg1 ) { TiledMap loc0 = null ; if ( this . rpgMaps != null && FileMap . resourcesToDirectory . containsKey ( arg1 ) ) { loc0 = game . getAssets ( ) . get ( FileMap . resourcesToDirectory . get ( arg1 ) + arg0 + "srini_string" , TiledMap . class ) ; } return loc0 ; }
boolean function ( Collection arg0 , Collection arg1 ) { if ( isEmpty ( arg0 ) || isEmpty ( arg1 ) ) { return false ; } for ( Object loc0 : arg1 ) { if ( arg0 . contains ( loc0 ) ) { return true ; } } return false ; }
void function ( ) { assertEquals ( CompassPoint . NORTH , instance . getLatitudeHemisphere ( ) ) ; }
PasswordCredentials function ( ) { return new PasswordCredentials ( ) ; }
void function ( ) { final ViolationNode loc0 = createViolationNode ( "srini_string" , 1 , 1 , 5 , 15 , "srini_string" ) ; final ViolationNode loc1 = createViolationNode ( "srini_string" , 1 , 1 , 7 , 15 , "srini_string" ) ; assertFalse ( "srini_string" , loc0 . equalsNode ( loc1 ) ) ; }
BigDecimal function ( ) { return this . expDataUnitId ; }
void function ( ) { assertTrue ( instance . equals ( instance ) ) ; }
void function ( List < RegPCLTestResultDetailsEntity > arg0 ) { this . regPclTestResultDetails = arg0 ; }
void function ( ) { try { time . setMinutes ( 60 ) ; fail ( "srini_string" ) ; } catch ( IllegalArgumentException loc0 ) { } }
T function ( ) { return allNodes . get ( 0 ) . key ; }
String function ( ) { String loc0 = name ; if ( loc0 . equalsIgnoreCase ( "srini_string" ) ) { loc0 = loc0 . toUpperCase ( ) ; } if ( version == null || version . equals ( "srini_string" ) ) { return loc0 ; } return loc0 + "srini_string" + version ; }
TopKSelector < T > function ( int arg0 ) { return greatest ( arg0 , Ordering . natural ( ) ) ; }
void function ( String arg0 , XKMSCacheToken arg1 ) { cache . put ( new Element ( arg0 , arg1 , false ) ) ; }
Bundle function ( ) { return ( Bundle ) this . bundle . clone ( ) ; }
int function ( ) { return quality ; }
String function ( ) { return album ; }
void function ( int arg0 ) { if ( arg0 < - 13 || arg0 > 13 ) { throw new IllegalArgumentException ( "srini_string" ) ; } this . offsetHours = arg0 ; }
InetSocketAddress [ ] function ( long arg0 , TimeUnit arg1 ) { try { return allPeers ( ) ; } catch ( UnknownHostException loc0 ) { throw new PeerDiscoveryException ( loc0 ) ; } }
void function ( Source arg0 ) { sources . add ( arg0 ) ; validator . setSchemaSources ( sources . toArray ( new Source [ 0 ] ) ) ; }
void function ( final TMXTiledMap arg0 , final int arg1 ) { this . mGlobalTileID = arg1 ; this . mTextureRegion = arg0 . getTextureRegionFromGlobalTileID ( arg1 ) ; }
void function ( Piloto arg0 ) { Comando loc0 = null ; try { loc0 = arg0 . proximoComando ( ) ; loc0 . ejecutar ( this . getPartida ( ) ) ; } catch ( Exception loc1 ) { this . notificarObservadoresException ( arg0 , loc0 , loc1 ) ; } }
void function ( boolean arg0 ) { this . timeoutEnabled = arg0 ; resetTimeout ( ) ; }
Coin function ( ) { return value ; }
Items function ( ) { return items ; }
String function ( String arg0 ) { Map < String , String > loc0 = this . createParameterMap ( arg0 ) ; return this . sign ( loc0 ) ; }
Node function ( ) { return node ; }
void function ( ) { long loc0 = 1 ; mThrown . expect ( BlockDoesNotExistException . class ) ; mThrown . expectMessage ( ExceptionMessage . LOCK_RECORD_NOT_FOUND_FOR_LOCK_ID . getMessage ( loc0 ) ) ; mLockManager . validateLock ( TEST_SESSION_ID , TEST_BLOCK_ID , loc0 ) ; }
ServiceBuilder function ( String arg0 ) { Preconditions . checkNotNull ( arg0 , "srini_string" ) ; this . callback = arg0 ; return this ; }
void function ( ExtensionInfo arg0 , ClassDecl arg1 ) { ClassType loc0 = arg1 . type ( ) ; EfgClassInfo loc1 = get ( loc0 ) ; if ( loc1 == null ) { loc1 = new EfgClassInfo ( arg0 , EfgClassInfo . State . AUTO , arg1 . position ( ) , loc0 ) ; factoryMappings . put ( loc0 , loc1 ) ; } loc1 . addAuto ( arg1 ) ; }
String function ( ) { return id ; }
void function ( Iterable < Range < C >> arg0 ) { for ( Range < C > loc0 : arg0 ) { remove ( loc0 ) ; } }
String function ( ) { return testId ; }
boolean function ( final MoverDState < DsT > arg0 ) { final MoverDState . VisitorAdapter < Boolean , DsT > loc0 = new MoverDState . VisitorAdapter < Boolean , DsT > ( Boolean . FALSE ) { @ Override public Boolean visitDownloading ( final Downloading < DsT > downloadingState ) { return Boolean . TRUE ; } } ; return arg0 . accept ( loc0 ) . booleanValue ( ) ; }
SessionFactory function ( ) { LOG . debug ( "srini_string" ) ; final SchemaExport loc0 = new SchemaExport ( this . m_config ) ; if ( this . m_createTables ) { loc0 . create ( false , true ) ; } return this . m_config . buildSessionFactory ( ) ; }
void function ( String arg0 ) { this . uri = arg0 ; }
Texture function ( String arg0 , String arg1 ) { Texture loc0 = null ; if ( this . textures != null && FileMap . resourcesToDirectory . containsKey ( arg1 ) ) { loc0 = game . getAssets ( ) . get ( FileMap . resourcesToDirectory . get ( arg1 ) + arg0 + "srini_string" , Texture . class ) ; } return loc0 ; }
boolean function ( ) { return getExpiration ( ) == null ? false : System . currentTimeMillis ( ) > getExpiration ( ) . getTime ( ) ; }
String function ( String arg0 ) { if ( s1 . hasField ( arg0 ) ) return s1 . getString ( arg0 ) ; else return s2 . getString ( arg0 ) ; }
void function ( String arg0 ) { namespaceURI = arg0 ; }
String function ( ) { return _stack_type ; }
String function ( ) { return mUri . getPath ( ) ; }
boolean function ( int arg0 , Sha256Hash arg1 ) { Sha256Hash loc0 = checkpoints . get ( arg0 ) ; return loc0 == null || loc0 . equals ( arg1 ) ; }
void function ( byte [ ] arg0 ) { handleEvent ( new BinaryBytesEvent ( arg0 ) ) ; }
int function ( int arg0 ) { try { if ( ! StringUtils . isEmpty ( currentValue ) ) { return Integer . parseInt ( currentValue . trim ( ) ) ; } } catch ( NumberFormatException loc0 ) { } return arg0 ; }
void function ( DirectedAcyclicGraphNode < T > arg0 ) { mParents . add ( arg0 ) ; }
void function ( String arg0 ) { this . response . setContentType ( arg0 ) ; }
String function ( ) { return testId ; }
void function ( Source arg0 ) { styleSheet = arg0 ; }
File function ( final String arg0 , final String arg1 ) { final File loc0 = new File ( Environment . getExternalStoragePublicDirectory ( arg0 ) , DIR_NAME ) ; Log . d ( TAG , "srini_string" + loc0 . toString ( ) ) ; loc0 . mkdirs ( ) ; if ( loc0 . canWrite ( ) ) { return new File ( loc0 , getDateTimeString ( ) + arg1 ) ; } return null ; }
String function ( InputStream arg0 ) { BufferedReader loc0 = new BufferedReader ( new InputStreamReader ( arg0 ) ) ; StringBuffer loc1 = new StringBuffer ( ) ; String loc2 = loc0 . readLine ( ) ; while ( loc2 != null ) { loc1 . append ( loc2 ) ; loc1 . append ( "srini_string" ) ; loc2 = loc0 . readLine ( ) ; } return loc1 . toString ( ) ; }
void function ( PropPanelFactory arg0 ) { ppfactories . remove ( arg0 ) ; }
void function ( ) { this . m_selectorManager . addChannelInterestLater ( this . m_socketChannel , SelectionKey . OP_WRITE ) ; }
void function ( ) { String loc0 = WebUtils . convertMsToClockTime ( TimeUnit . MINUTES . toMillis ( 1 ) ) ; Assert . assertEquals ( "srini_string" , loc0 ) ; }
void function ( TerminalDevice arg0 ) { repository . save ( arg0 ) ; }
boolean function ( ) { return ( this . errorLevel > 0 ) ; }
void function ( ) { mClient = Mockito . mock ( OSSClient . class ) ; mOSSUnderFileSystem = new OSSUnderFileSystem ( new AlluxioURI ( "srini_string" ) , mClient , BUCKET_NAME , BUCKET_PREFIX ) ; }
void function ( ) { if ( currentblk != null ) tx . unpin ( currentblk ) ; currentblk = null ; }
EndpointReferenceType function ( ) { return from ; }
String function ( ) { String loc0 ; loc0 = "srini_string" + on_symbol ( ) . name ( ) + "srini_string" ; loc0 += _to_state . index ( ) ; loc0 += "srini_string" ; return loc0 ; }
String function ( final Element arg0 , final String arg1 , final String arg2 ) { final NodeList loc0 = arg0 . getElementsByTagName ( arg1 ) ; final Element loc1 = ( Element ) loc0 . item ( 0 ) ; if ( loc1 == null ) { return StringUtils . EMPTY ; } return loc1 . getAttribute ( arg2 ) ; }
Object function ( ) { return mClassifier ; }
void function ( String arg0 ) { this . url = arg0 ; }
int function ( ) { return text . length ( ) ; }
void function ( ) { m_sipProxy . start ( ) ; m_turnServer . start ( ) ; try { synchronized ( this ) { wait ( ) ; } } catch ( InterruptedException loc0 ) { loc0 . printStackTrace ( ) ; } }
void function ( SshDataReceivedEvent arg0 ) { System . out . println ( "srini_string" ) ; System . out . print ( arg0 . getData ( ) ) ; }
Integer function ( T arg0 ) { Integer loc0 = counter . get ( arg0 ) ; if ( loc0 == null ) { return 0 ; } return loc0 ; }
GenericJSONBuilder function ( double arg0 , double arg1 ) { lng = arg0 ; lat = arg1 ; return this ; }
XYLocation function ( ) { return north ( ) ; }
Collection < GrantedAuthority > function ( ) { return this . grantedAuthorities ; }
void function ( DenseMatrix64F arg0 ) { this . seed = arg0 ; }
GetOfferDetailsResponse . Return . DetailOfferData . OfferMedia . OfferImage . Entry . Value . Item function ( ) { return new GetOfferDetailsResponse . Return . DetailOfferData . OfferMedia . OfferImage . Entry . Value . Item ( ) ; }
Named function ( String arg0 ) { try { return head . find ( arg0 ) ; } catch ( NoClassException loc0 ) { return tail . find ( arg0 ) ; } }
void function ( final ResourceTypeHandler arg0 , final String arg1 ) { if ( arg1 != null ) { extensionsDenied . put ( arg0 , Utils . getSet ( arg1 ) ) ; extensionsAllowed . get ( arg0 ) . clear ( ) ; } }
void function ( String arg0 ) { putId ( arg0 , ttl ) ; }
DomainRestoreInfo function ( CSP arg0 ) { DomainRestoreInfo loc0 = new DomainRestoreInfo ( ) ; FIFOQueue < Variable > loc1 = new FIFOQueue < Variable > ( ) ; for ( Variable loc2 : arg0 . getVariables ( ) ) loc1 . add ( loc2 ) ; reduceDomains ( loc1 , arg0 , loc0 ) ; return loc0 . compactify ( ) ; }
double function ( ) { return altitude ; }
List < Object > function ( int arg0 ) { Object loc0 = values . get ( arg0 ) ; if ( loc0 instanceof List ) { return ( List ) loc0 ; } else { throw new IllegalStateException ( ) ; } }
boolean function ( ) { Assert . assertNotNull ( instance ) ; return instance . mHasPenDigitizer ; }
void function ( boolean arg0 , Parcel arg1 ) { arg1 . writeInt ( arg0 ? 1 : 0 ) ; }
void function ( EndpointResolver arg0 ) { resolvers . remove ( arg0 ) ; }
PrintStream function ( ) { return debugGui . getConsole ( ) . getErr ( ) ; }
int function ( ) { return getInterval ( ) - 1 ; }
ComplexNode function ( ) { return new ComplexNode ( ) ; }
void function ( ArrayList < CanonicalGene > arg0 ) { this . genes_in_ROI = arg0 ; }
void function ( final Callable < ? > arg0 , int arg1 ) { Future < ? > loc0 = WaitForAsyncUtils . asyncFx ( arg0 ) ; WaitForAsyncUtils . waitFor ( arg1 , TimeUnit . SECONDS , loc0 ) ; WaitForAsyncUtils . waitForFxEvents ( ) ; }
void function ( String arg0 ) { log . add ( arg0 ) ; }
int function ( ) { return 0xCafe123 ; }
byte [ ] function ( ) { return m_byteArray ; }
void function ( BigDecimal arg0 ) { this . fileCount = arg0 ; }
int function ( ) { return step * 100 / getNumSteps ( ) ; }
BrowseOffersResponse . Return . OfferData . Geo . Region function ( ) { return new BrowseOffersResponse . Return . OfferData . Geo . Region ( ) ; }
int function ( ) { return defaultPort ; }
void function ( ) { for ( Item loc0 : invMap . keySet ( ) ) { System . out . println ( loc0 . getUnlocalizedName ( ) + "srini_string" + invMap . get ( loc0 ) ) ; } }
void function ( long arg0 ) { this . length = new FileSizeComparable ( arg0 ) ; }
LanguageVersion function ( File arg0 ) { return getDefaultLanguageVersionForFile ( arg0 . getName ( ) ) ; }
void function ( ) { System . out . println ( "srini_string" ) ; Device loc0 = null ; Image loc1 = null ; Image loc2 = loc0 . getImage ( ) ; assertEquals ( loc1 , loc2 ) ; fail ( "srini_string" ) ; }
int function ( ) { return - 1 ; }
Builder function ( ) { return new Builder ( ) . fromNetworkSegment ( this ) ; }
void function ( ) { System . out . println ( "srini_string" ) ; int loc0 = 0 ; LogEntryInterval loc1 = new LogEntryInterval ( ) ; loc1 . setNumberRequests ( loc0 ) ; }
Reader function ( String arg0 , int arg1 ) { return new InputStreamReader ( getResourceAsStream ( arg0 , arg1 ) ) ; }
void function ( ) { DataNettyBuffer loc0 = new DataNettyBuffer ( mBuffer , LENGTH ) ; ByteBuffer loc1 = loc0 . getReadOnlyByteBuffer ( ) ; Assert . assertTrue ( loc1 . isReadOnly ( ) ) ; Assert . assertEquals ( mBuffer . nioBuffer ( ) , loc1 ) ; }
boolean function ( String arg0 ) { return false ; }
void function ( Object arg0 , Json arg1 , ArrayList < String > arg2 ) { Field [ ] loc0 = arg0 . getClass ( ) . getFields ( ) ; for ( Field loc1 : loc0 ) { if ( ! arg2 . contains ( loc1 . getName ( ) ) ) { System . out . println ( "srini_string" + loc1 . getName ( ) ) ; arg1 . writeValue ( loc1 . getName ( ) , loc1 . get ( arg0 ) ) ; } } }
List < MeanValue > function ( ) { return Collections . unmodifiableList ( metrics ) ; }
void function ( ) { AttackModel loc0 = new AttackModel ( ) ; ChartObject loc1 = new ChartObject ( loc0 ) ; JFreeChart loc2 = loc1 . createOverlaidChart ( ) ; assertNotNull ( "srini_string" , loc2 ) ; }
int function ( CharSequence arg0 , int arg1 ) { int loc0 = 0 ; int loc1 = arg0 . length ( ) ; int loc2 = arg1 ; if ( loc2 < loc1 ) { char loc3 = arg0 . charAt ( loc2 ) ; while ( isDigit ( loc3 ) && loc2 < loc1 ) { loc0 ++ ; loc2 ++ ; if ( loc2 < loc1 ) { loc3 = arg0 . charAt ( loc2 ) ; } } } return loc0 ; }
int function ( ) { return x ; }
void function ( Long arg0 ) { this . testId = arg0 ; }
void function ( View arg0 , AccessibilityEvent arg1 ) { IMPL . onInitializeAccessibilityEvent ( DEFAULT_DELEGATE , arg0 , arg1 ) ; }
int function ( boolean arg0 ) { int loc0 = 0 ; int loc1 ; for ( loc1 = 0 ; Character . isDigit ( format . charAt ( formatOff + loc1 ) ) ; loc1 ++ ) { loc0 *= 10 ; loc0 += Character . digit ( format . charAt ( formatOff + loc1 ) , 10 ) ; } if ( arg0 ) { formatOff += loc1 ; } return loc0 ; }
String function ( ) { return this . actValue ; }
EaseUserProfileProvider function ( ) { return userProvider ; }
void function ( int arg0 ) { this . value = arg0 ; }
void function ( ) { testEventProperties . put ( Notification . NOTIFICATION_KEY_TITLE , null ) ; notificationController . handleEvent ( new Event ( Notification . NOTIFICATION_TOPIC_BROADCAST , testEventProperties ) ) ; }
String function ( ) { return moduleName ; }
boolean function ( Class < ? > arg0 ) { return WRAPPER_TO_PRIMITIVE_TYPE . containsKey ( checkNotNull ( arg0 ) ) ; }
void function ( DenseMatrix64F arg0 ) { double loc0 = normF ( arg0 ) ; if ( loc0 == 0 ) return ; int loc1 = arg0 . getNumElements ( ) ; for ( int loc2 = 0 ; loc2 < loc1 ; loc2 ++ ) { arg0 . div ( loc2 , loc0 ) ; } }
String function ( ) { al = new ArrayList < String > ( ) ; traverse ( root , "srini_string" ) ; return "srini_string" + al ; }
ExceptionListener function ( ) { return exceptionListener ; }
void function ( ) { mHostname = NetworkAddressUtils . getLocalHostName ( 100 ) ; }
void function ( BattlePlatform arg0 , Image arg1 , float arg2 ) { }
Map < String , String > function ( ) { return this . attributes ; }
BigDecimal function ( ) { return this . feedId ; }
Complex64F function ( int arg0 ) { return eig . getEigenvalue ( arg0 ) ; }
CoordinatorStore function ( ) { try { return new CoordinatorStore ( false ) ; } catch ( Exception loc0 ) { throw new StoreException ( ErrorCode . E0600 , loc0 . getMessage ( ) , loc0 ) ; } }
long function ( ) { return index ; }
Script function ( byte [ ] arg0 ) { checkArgument ( arg0 . length <= 40 ) ; return new ScriptBuilder ( ) . op ( OP_RETURN ) . arg0 ( arg0 ) . build ( ) ; }
Class < ? extends Service > function ( ) { return SchedulerService . class ; }
void function ( String arg0 ) { try { idPMgtStub . deleteIdP ( arg0 ) ; } catch ( Exception loc0 ) { log . error ( "srini_string" , loc0 ) ; throw new Exception ( "srini_string" ) ; } }
boolean function ( ) { return debugGui . isVisible ( ) ; }
Document function ( String arg0 ) { return stringToDom ( arg0 , false ) ; }
int function ( long arg0 ) { if ( arg0 <= 0 ) { return 0 ; } else if ( arg0 >= ( 1L << 32 ) ) { return - 1 ; } else { return ( int ) arg0 ; } }
java . lang . String function ( ) { return literalName ; }
void function ( ) { ServerConfiguration loc0 = service . getServerConfiguration ( "srini_string" ) ; assertThat ( loc0 , is ( nullValue ( ) ) ) ; }
void function ( String arg0 , IdentityProvider arg1 ) { try { idPMgtStub . updateIdP ( arg0 , arg1 ) ; } catch ( Exception loc0 ) { log . error ( "srini_string" , loc0 ) ; throw new Exception ( loc0 . getMessage ( ) ) ; } }
boolean function ( final HttpParams arg0 ) { if ( arg0 == null ) { throw new IllegalArgumentException ( "srini_string" ) ; } return arg0 . getBooleanParameter ( INTEREST_OPS_QUEUEING , false ) ; }
void function ( String arg0 ) { try { stub . setGlobalPolicyAlgorithm ( arg0 ) ; } catch ( Exception loc0 ) { handleException ( loc0 . getMessage ( ) , loc0 ) ; } }
long function ( ) { return packetMagic ; }
Map < String , String > function ( ) { Map < String , String > loc0 = new LinkedHashMap < String , String > ( ) ; for ( String loc1 : getStrings ( ) ) { String [ ] loc2 = loc1 . split ( "srini_string" , 2 ) ; String loc3 = loc2 [ 0 ] ; String loc4 = loc2 [ 1 ] ; loc0 . put ( loc3 , loc4 ) ; } return loc0 ; }
IssuerServiceResponse function ( HttpServletRequest arg0 ) { return new IssuerServiceResponse ( getIssuer ( ) , null , null ) ; }
Delegator function ( ) { try { return this . getClass ( ) . newInstance ( ) ; } catch ( Exception loc0 ) { throw Context . throwAsScriptRuntimeEx ( loc0 ) ; } }
BigInteger function ( ) { DHPublicKey loc0 = ( DHPublicKey ) keyPair . getPublic ( ) ; return loc0 . getY ( ) ; }
long function ( ) { return geneA ; }
String function ( Repository arg0 , String arg1 , String arg2 ) { String loc0 = StringUtils . escapeForHtml ( arg2 , false ) ; loc0 = processTextRegex ( arg0 , arg1 , loc0 ) ; return StringUtils . breakLinesForHtml ( loc0 ) ; }
Double function ( String arg0 , String arg1 ) { return links . get ( arg0 , arg1 ) ; }
JsonElement function ( Set < String > arg0 , boolean arg1 ) { if ( ! arg1 && arg0 != null && arg0 . isEmpty ( ) ) { return JsonNull . INSTANCE ; } else { return gson . toJsonTree ( arg0 , new TypeToken < Set < String >> ( ) { } . getType ( ) ) ; } }
void function ( Context arg0 , View arg1 ) { if ( arg1 == null ) return ; InputMethodManager loc0 = ( InputMethodManager ) arg0 . getSystemService ( Context . INPUT_METHOD_SERVICE ) ; loc0 . showSoftInput ( arg1 , 0 ) ; }
Timestamp function ( ) { return this . receiptDate ; }
ConduitSelector function ( ) { return conduitSelector ; }
SpringChain function ( int arg0 , int arg1 , int arg2 , int arg3 ) { return new SpringChain ( arg0 , arg1 , arg2 , arg3 ) ; }
GenericJSONBuilder function ( int arg0 ) { loc_radius = arg0 ; return this ; }
Map < Variable , Term > function ( FOLNode arg0 , FOLNode arg1 ) { return unify ( arg0 , arg1 , new LinkedHashMap < Variable , Term > ( ) ) ; }
String function ( @ Nonnull PublicKey arg0 ) { return getKeyHash ( arg0 , "srini_string" ) ; }
void function ( ) { this . map = ShadowStruggles . getInstance ( ) . getTiledMap ( mapName ) ; this . tileLayer = ( TiledMapTileLayer ) map . getLayers ( ) . get ( tileLayerString ) ; }
Document function ( Source arg0 ) { Document loc0 = tryExtractDocFromDOMSource ( arg0 ) ; return loc0 != null ? loc0 : toDocument ( arg0 , DocumentBuilderFactory . newInstance ( ) ) ; }
String function ( String arg0 ) { return "srini_string" + arg0 + "srini_string" ; }
void function ( BundleContext arg0 ) { for ( AutoSIMConnectionConfig loc0 : config . connections ) { environments . deregisterConnectionFactory ( loc0 . name ) ; factories . remove ( loc0 . name ) ; } }
boolean function ( String arg0 ) { AbstractPlugin loc0 = getByName ( arg0 ) ; return remove ( loc0 ) ; }
production function ( ) { return _the_production ; }
void function ( ) { System . out . println ( "srini_string" ) ; Device loc0 = null ; String loc1 = "srini_string" ; String loc2 = loc0 . toString ( ) ; assertEquals ( loc1 , loc2 ) ; fail ( "srini_string" ) ; }
List < String > function ( ) { return getChangedRefs ( Constants . R_TAGS ) ; }
Object function ( String arg0 ) { return this . json . get ( arg0 ) ; }
void function ( int arg0 ) { recordedMovement [ 4 ] = recordedMovement [ 3 ] ; recordedMovement [ 3 ] = recordedMovement [ 2 ] ; recordedMovement [ 2 ] = recordedMovement [ 1 ] ; recordedMovement [ 1 ] = recordedMovement [ 0 ] ; recordedMovement [ 0 ] = arg0 ; }
void function ( ) { Preconditions . checkState ( mNettyBuf != null ) ; Preconditions . checkState ( mNettyBuf . refCnt ( ) == 1 , "srini_string" , mNettyBuf . refCnt ( ) ) ; Preconditions . checkState ( mNettyBuf . release ( ) , "srini_string" ) ; }
void function ( ) { skipInternal ( mBlockStream , 0 ) ; }
BookPreview function ( Book arg0 ) { return getPreview ( arg0 . getUUID ( ) ) ; }
String function ( ) { int loc0 = getHour ( ) ; int loc1 = getMinutes ( ) ; int loc2 = ( int ) Math . floor ( getSeconds ( ) ) ; int loc3 = getOffsetHours ( ) ; int loc4 = getOffsetMinutes ( ) ; return String . format ( TIME_PATTERN , loc0 , loc1 , loc2 , loc3 , loc4 ) ; }
void function ( String arg0 ) { this . feedId = arg0 ; }
void function ( ) { Object loc0 = new String ( "srini_string" ) ; Object loc1 = new Double ( 123 ) ; assertFalse ( instance . equals ( loc0 ) ) ; assertFalse ( instance . equals ( loc1 ) ) ; }
AppStatus function ( ) { return status ; }
void function ( ) { final ViolationNode loc0 = createViolationNode ( "srini_string" , 1 , 1 , 5 , 15 , "srini_string" ) ; final ViolationNode loc1 = createViolationNode ( "srini_string" , 1 , 1 , 5 , 15 , "srini_string" ) ; assertFalse ( "srini_string" , loc0 . equalsNode ( loc1 ) ) ; }
DataTypesHelper function ( ) { return impl ; }
void function ( int arg0 ) { this . numRows = arg0 ; }
void function ( String arg0 ) { this . errorMsg = arg0 ; }
void function ( ) { for ( int loc0 = 0 ; loc0 < 10000000 ; loc0 ++ ) { } }
Locale [ ] function ( ) { return new Locale [ ] { Locale . ENGLISH , Locale . FRENCH , new Locale ( "srini_string" , "srini_string" ) , Locale . GERMAN , Locale . ITALIAN , new Locale ( "srini_string" , "srini_string" ) , new Locale ( "srini_string" , "srini_string" ) , new Locale ( "srini_string" , "srini_string" ) , Locale . CHINESE , Locale . UK } ; }
Instrumentation function ( ) { return instrumentation ; }
int function ( ) { return ( int ) ( System . currentTimeMillis ( ) - lastMark ) ; }
String function ( ) { return pclFeedId ; }
int function ( ) { return elem3 ; }
String function ( ) { return "srini_string" + "srini_string" + "srini_string" + "srini_string" + "srini_string" ; }
void function ( ) { head = reverse ( head ) ; }
OpenFileOptions function ( CreateFileOptions arg0 ) { if ( arg0 . getAlluxioStorageType ( ) . isStore ( ) ) { return OpenFileOptions . defaults ( ) . setReadType ( ReadType . CACHE ) ; } return OpenFileOptions . defaults ( ) . setReadType ( ReadType . NO_CACHE ) ; }
Element function ( ) { return m_KeyInfoEl ; }
void function ( AddressingProperties arg0 , Message arg1 , boolean arg2 , boolean arg3 ) { org . apache . cxf . ws . addressing . ContextUtils . storeMAPs ( arg0 , arg1 , arg2 , arg3 ) ; }
String function ( Context arg0 ) { return arg0 . getPackageName ( ) + RELOAD_APP_ACTION_SUFFIX ; }
void function ( ) { String loc0 = RequestInput . getString ( "srini_string" , "srini_string" , "srini_string" , "srini_string" ) ; System . out . println ( "srini_string" + loc0 ) ; }
String function ( ) { return getWorkflow ( ) . getGroup ( ) ; }
void function ( String arg0 ) { this . moduleName = arg0 ; }
void function ( T arg0 ) { if ( checkDuplicate ( arg0 ) ) { throw new IllegalStateException ( "srini_string" + arg0 ) ; } free ( arg0 ) ; }
void function ( String arg0 ) { this . correlationId = arg0 ; }
void function ( ) { String loc0 = "srini_string" ; String loc1 = "srini_string" ; mPlainSaslServer . evaluateResponse ( getUserInfo ( loc0 , loc1 ) ) ; Assert . assertEquals ( loc0 , mPlainSaslServer . getAuthorizationID ( ) ) ; }
void function ( ) { handleEvent ( GROUP_END ) ; state = stack . pop ( ) ; }
Scan function ( ) { Scan loc0 = p . open ( ) ; List < TempTable > loc1 = splitIntoRuns ( loc0 ) ; loc0 . close ( ) ; while ( loc1 . size ( ) > 2 ) loc1 = doAMergeIteration ( loc1 ) ; return new SortScan ( loc1 , comp ) ; }
boolean function ( ) { if ( mSubject . isReadOnly ( ) ) { throw new LoginException ( "srini_string" ) ; } if ( mUser != null ) { mSubject . getPrincipals ( ) . remove ( mUser ) ; } return true ; }
String function ( ) { return postId ; }
boolean function ( int arg0 ) { for ( int loc0 : getAcceptableAddressCodes ( ) ) { if ( arg0 == loc0 ) return true ; } return false ; }
boolean function ( boolean arg0 ) { boolean loc0 = this . appendSemicolon ; this . appendSemicolon = arg0 ; return loc0 ; }
void function ( ) { rmc . setMode ( FaaMode . SIMULATED ) ; assertEquals ( FaaMode . SIMULATED , rmc . getMode ( ) ) ; rmc . setMode ( FaaMode . ESTIMATED ) ; assertEquals ( FaaMode . ESTIMATED , rmc . getMode ( ) ) ; }
void function ( int arg0 ) { currentslot = arg0 ; }
String function ( String arg0 ) { if ( lhs . isFieldName ( ) && lhs . asFieldName ( ) . equals ( arg0 ) && rhs . isFieldName ( ) ) return rhs . asFieldName ( ) ; else if ( rhs . isFieldName ( ) && rhs . asFieldName ( ) . equals ( arg0 ) && lhs . isFieldName ( ) ) return lhs . asFieldName ( ) ; else return null ; }
void function ( String arg0 ) { this . actValue = arg0 ; }
DiffBuilder function ( ) { normalizeWhitespace = true ; return this ; }
ClaimDTO function ( String arg0 ) { RegistryBasedTrustedServiceStore loc0 = new RegistryBasedTrustedServiceStore ( ) ; return loc0 . getTrustedServiceClaims ( arg0 ) ; }
boolean function ( final String arg0 , final boolean arg1 ) { return this . bundle . getBoolean ( arg0 , arg1 ) ; }
boolean function ( ArrayList < String > arg0 ) { String loc0 = arg0 . get ( 0 ) ; String loc1 = arg0 . get ( 1 ) ; if ( this . logLevels == null || this . logLevels . containsKey ( loc0 . toUpperCase ( ) ) ) { Matcher loc2 = filterPattern . matcher ( loc1 ) ; return loc2 . matches ( ) ; } else { return false ; } }
BufferedByteWriter function ( byte arg0 ) { return put32 ( arg0 & 0xFF ) ; }
AuthenticationHolderEntity function ( ) { return authenticationHolder ; }
void function ( ) { Iterator < AbstractPlugin > loc0 = allPlugins . iterator ( ) ; while ( loc0 . hasNext ( ) ) { AbstractPlugin loc1 = ( AbstractPlugin ) loc0 . next ( ) ; loc1 . removePluginObserver ( this ) ; activePlugins . remove ( loc1 ) ; loc0 . remove ( ) ; } }
void function ( float arg0 ) { weight = arg0 ; }
void function ( InetSocketAddress arg0 , Channel arg1 ) { Preconditions . checkArgument ( NETTY_CHANNEL_POOL_MAP . containsKey ( arg0 ) ) ; NETTY_CHANNEL_POOL_MAP . get ( arg0 ) . release ( arg1 ) ; }
String function ( ) { return systemId ; }
E function ( final String arg0 , final ArrayList < ShareOpenGraphObject > arg1 ) { this . bundle . putParcelableArrayList ( arg0 , arg1 ) ; return ( E ) this ; }
URIBuilder function ( final String arg0 ) { this . fragment = arg0 ; this . encodedFragment = null ; return this ; }
void function ( long arg0 ) { this . keySize = arg0 ; }
void function ( ) { mSessionTimeoutMs = Configuration . getInt ( PropertyKey . WORKER_SESSION_TIMEOUT_MS ) ; }
Map < SpringConfig , String > function ( ) { return Collections . unmodifiableMap ( mSpringConfigMap ) ; }
String function ( ) { SimpleDateFormat loc0 = new SimpleDateFormat ( "srini_string" ) ; loc0 . setTimeZone ( TimeZone . getTimeZone ( "srini_string" ) ) ; return loc0 . format ( new Date ( ) ) ; }
void function ( ) { this . m_storedDirectoryContents = this . m_newDirectoryContents ; }
void function ( String arg0 , String arg1 ) { addTablesSQL ( arg0 , null , null , arg1 ) ; }
void function ( ) { individualStructures . clear ( ) ; }
LanguageVersion function ( ) { return this . languageVersion ; }
SignatureProperties function ( ) { return signatureProperties ; }
Predicate function ( ) { return pred ; }
boolean function ( DenseMatrix64F arg0 ) { return MatrixFeatures . isDiagonalPositive ( arg0 ) ; }
void function ( final ByteBuffer arg0 , final int arg1 , final long arg2 ) { arg0 . putInt ( arg1 , ( int ) ( arg2 & 0xffffffffL ) ) ; }
void function ( UserSubject arg0 ) { this . subject = arg0 ; }
void function ( boolean arg0 ) { dim . setBreakOnExceptions ( arg0 ) ; debugGui . getMenubar ( ) . getBreakOnExceptions ( ) . setSelected ( arg0 ) ; }
float function ( int arg0 ) { return originLat - arg0 / dotsPerDeg ; }
USAddress function ( ) { return new USAddress ( ) ; }
void function ( ) { }
JSONObject function ( int arg0 ) { Object loc0 = mArray . get ( arg0 ) ; return loc0 == null ? null : loc0 instanceof JSONObject ? ( JSONObject ) loc0 : null ; }
double function ( DenseMatrix64F arg0 ) { PermuteArray loc0 = new PermuteArray ( arg0 . numCols ) ; double loc1 = 0 ; int loc2 [ ] = loc0 . next ( ) ; while ( loc2 != null ) { double loc3 = 1 ; for ( int loc4 = 0 ; loc4 < arg0 . numRows ; loc4 ++ ) { loc3 *= arg0 . get ( loc4 , loc2 [ loc4 ] ) ; } loc1 += loc0 . sgn ( ) * loc3 ; loc2 = loc0 . next ( ) ; } return loc1 ; }
Dish function ( SiteUrl arg0 ) { return dishRepository . findBySiteUrl ( arg0 ) ; }
String function ( ) { return ( new java . rmi . server . UID ( ) ) . toString ( ) ; }
void function ( ) { flushed = true ; }
void function ( long arg0 , int arg1 , ServiceInfo [ ] arg2 ) { }
List < String > function ( ) { return registeredScopes ; }
void function ( File arg0 ) { try { traverseDir ( arg0 , new FileAction ( ) { public void act ( File arg1 ) { arg1 . delete ( ) ; } } ) ; } catch ( IOException loc0 ) { LOG . error ( "srini_string" , loc0 ) ; } }
String function ( ) { return operation ; }
void function ( ) { valid = true ; }
void function ( ) { Collections . shuffle ( this . pilotos ) ; for ( Piloto loc0 : this . getPilotos ( ) ) { this . runTurno ( loc0 ) ; } this . notificarObservadoresRondaTerminada ( this . rondas . incrementAndGet ( ) ) ; }
String function ( ) { final String loc0 = this . getOriginalPath ( ) ; if ( ! loc0 . endsWith ( "srini_string" ) ) return loc0 ; return loc0 . substring ( 0 , loc0 . length ( ) - 1 ) ; }
void function ( ) { long loc0 = 1 ; long loc1 = IdUtils . createFileId ( loc0 ) ; Assert . assertNotEquals ( - 1 , loc1 ) ; }
List < PropertyDescriptor < ? >> function ( ) { return new ArrayList < > ( propertyDescriptors ) ; }
InputStream function ( ) { return new ReaderInputStream ( reader ) ; }
void function ( String arg0 ) { this . failedAttrib = arg0 ; }
void function ( Profile arg0 ) { getManager ( ) . registerProfile ( arg0 ) ; }
boolean function ( Method arg0 , Method arg1 , Map < TypeVariable , Type > arg2 ) { if ( isResolvedTypeMatch ( arg1 , arg0 , arg2 ) ) { return true ; } Method loc0 = findGenericDeclaration ( arg0 ) ; return ( loc0 != null && isResolvedTypeMatch ( loc0 , arg1 , arg2 ) ) ; }
void function ( ) { canvas . setForegroundColor ( color ) ; canvas . fillCircle ( xPosition , yPosition , diameter ) ; }
Object function ( String arg0 ) { if ( ! vars . containsKey ( arg0 ) ) { throw new ELException ( XLog . format ( "srini_string" , arg0 ) ) ; } return vars . get ( arg0 ) ; }
void function ( ) { final Path loc0 = new Path ( "srini_string" ) ; final String loc1 = HadoopUtils . getPathWithoutScheme ( loc0 ) ; Assert . assertFalse ( "srini_string" . equals ( loc1 ) ) ; }
int function ( ) { return xPosition ; }
float function ( short arg0 ) { return floatValue ; }
void function ( long arg0 , long arg1 ) { if ( mBlocksToMoveIn . add ( arg0 ) ) { mBlocksToMoveInSize += arg1 ; } }
WSDLCorbaFactory function ( ) { String loc0 = findFactoryImplName ( ) ; return newInstance ( loc0 ) ; }
Set < String > function ( ) { return atMeGroupList ; }
PropertyDescriptor function ( String arg0 , Object arg1 ) { for ( PropertyDescriptor loc0 : propertyDescriptorsFor ( arg1 , null ) ) { if ( loc0 . getName ( ) . equals ( arg0 ) ) { return loc0 ; } } return null ; }
void function ( int arg0 ) { if ( arg0 < 0 || arg0 > 59 ) { throw new IllegalArgumentException ( "srini_string" ) ; } this . minutes = arg0 ; }
String function ( ) { return PLAIN_FORMAT . format ( this ) . toString ( ) ; }
void function ( JPanel arg0 ) { uiStack . addToStack ( arg0 ) ; }
boolean function ( ) { return defaultNillable ; }
List < SAXParseException > function ( Source arg0 ) { try { return problemToExceptionList ( validator . validateInstance ( arg0 ) . getProblems ( ) ) ; } catch ( XMLUnitException loc0 ) { throw new XMLUnitRuntimeException ( loc0 . getMessage ( ) , loc0 . getCause ( ) ) ; } }
DiffBuilder function ( final ComparisonListener ... arg0 ) { this . differenceListeners . addAll ( Arrays . asList ( arg0 ) ) ; return this ; }
void function ( ConduitSelector arg0 ) { this . conduitSelector = arg0 ; }
FaultMode function ( Message arg0 ) { if ( arg0 != null && arg0 . getExchange ( ) != null && arg0 == arg0 . getExchange ( ) . getOutFaultMessage ( ) ) { FaultMode loc0 = arg0 . get ( FaultMode . class ) ; if ( null != loc0 ) { return loc0 ; } else { return FaultMode . RUNTIME_FAULT ; } } return null ; }
void function ( Context arg0 , View arg1 ) { if ( arg1 == null ) return ; InputMethodManager loc0 = ( InputMethodManager ) arg0 . getSystemService ( Context . INPUT_METHOD_SERVICE ) ; loc0 . hideSoftInputFromWindow ( arg1 . getWindowToken ( ) , 0 ) ; }
BigDecimal function ( ) { return this . runId ; }
String function ( ) { return tenantDomain ; }
Rect function ( ) { return rectValue ; }
List < Playlist > function ( ) { List loc0 = new ArrayList ( playlists . values ( ) ) ; Collections . sort ( loc0 ) ; return loc0 ; }
void function ( String arg0 , String arg1 , String arg2 , String arg3 ) { try { Class . forName ( arg3 ) . newInstance ( ) ; con = DriverManager . getConnection ( arg0 , arg1 , arg2 ) ; Documents . createDb ( ) ; } catch ( Exception loc0 ) { throw new MoxieException ( loc0 ) ; } }
void function ( CString arg0 ) { this . paramName = arg0 ; }
boolean function ( String arg0 ) { return false ; }
String function ( String arg0 ) { if ( arg0 == null ) throw new NullPointerException ( ) ; return DAVRepository . class . getName ( ) + "srini_string" + arg0 ; }
void function ( Object arg0 ) { _out . writeStreamingObject ( arg0 ) ; }
void function ( ) { if ( canTestSymLinks ) { NoFileAssertListener loc0 = new NoFileAssertListener ( 1 ) ; cpd . setCpdListener ( loc0 ) ; cpd . add ( new File ( BASE_TEST_RESOURCE_PATH , "srini_string" ) ) ; cpd . add ( new File ( BASE_TEST_RESOURCE_PATH , "srini_string" ) ) ; loc0 . verify ( ) ; } }
void function ( ) { mGenerator . setNextContainerId ( TEST_ID ) ; Assert . assertEquals ( TEST_ID , mGenerator . getNewContainerId ( ) ) ; Assert . assertEquals ( TEST_ID + 1 , mGenerator . getNewContainerId ( ) ) ; Assert . assertEquals ( TEST_ID + 2 , mGenerator . getNewContainerId ( ) ) ; }
void function ( ) { checkRankNUpdate ( N , N - 2 ) ; checkRankNUpdate ( N * 2 + 1 , N - 2 ) ; checkRankNUpdate ( N - 1 , N - 2 ) ; }
void function ( ) { when ( mockServerSession . getId ( ) ) . thenReturn ( null ) ; notificationController . registerUserSession ( mockServerSession , mockServerMessage ) ; }
Rectangle function ( ) { if ( panel . getPreferredSize ( ) != null ) { return new Rectangle ( 0 , 0 , ( int ) panel . getPreferredSize ( ) . getWidth ( ) , ( int ) panel . getPreferredSize ( ) . getHeight ( ) ) ; } else { return new Rectangle ( 0 , 0 , panel . getWidth ( ) , panel . getHeight ( ) ) ; } }
DenseMatrix64F function ( ) { return QR ; }
InputStream function ( String arg0 ) { InputStream loc0 = loadResourceAsStream ( arg0 , ResourceLoader . class . getClassLoader ( ) ) ; if ( loc0 == null ) { throw new RuleSetNotFoundException ( "srini_string" + arg0 + "srini_string" ) ; } return loc0 ; }
int function ( ) { int loc0 = 0 ; try { loc0 = lineItem . getLineItem ( ) . getQuantity ( ) . getValue ( ) . intValue ( ) ; } catch ( NullPointerException loc1 ) { } return loc0 ; }
void function ( String arg0 ) { this . cytoband = arg0 ; }
ValidateAccess function ( ) { return new ValidateAccess ( ) ; }
String function ( HttpServletRequest arg0 ) { String loc0 = arg0 . getParameter ( WebService . FORMAT ) ; return loc0 == null ? loc0 : loc0 . toLowerCase ( ) ; }
DishCollection function ( DishCollection arg0 ) { log . debug ( "srini_string" , arg0 ) ; DishCollection loc0 = dishCollectionRepository . save ( arg0 ) ; return loc0 ; }
Sha256Hash function ( byte [ ] arg0 ) { return new Sha256Hash ( Utils . doubleDigest ( arg0 ) ) ; }
void function ( ) { }
String function ( ) { return fromCalendar ( GregorianCalendar . getInstance ( ) ) ; }
DiffBuilder function ( final Object arg0 ) { final Source loc0 = getSource ( arg0 ) ; return new DiffBuilder ( loc0 ) ; }
void function ( final JSONObject arg0 , final String arg1 , final Collection arg2 ) { try { arg0 . put ( arg1 , arg2 ) ; } catch ( final JSONException loc0 ) { LOG . warn ( "srini_string" , loc0 ) ; } }
T function ( ) { return V ; }
String function ( ) { return mAlias ; }
void function ( final String [ ] arg0 ) { LOG . debug ( "srini_string" ) ; final TurnLauncher loc0 = new TurnLauncher ( ) ; LOG . debug ( "srini_string" ) ; try { loc0 . start ( ) ; LOG . debug ( "srini_string" ) ; } catch ( final Throwable loc1 ) { LOG . error ( "srini_string" , loc1 ) ; } }
void function ( byte [ ] arg0 ) { this . projectSecret = ( ( byte [ ] ) arg0 ) ; }
String function ( Date arg0 , DateFormatType arg1 ) { String loc0 = null ; SimpleDateFormat loc1 = new SimpleDateFormat ( arg1 . valueOf ( ) ) ; loc0 = loc1 . format ( arg0 ) ; return loc0 ; }
int function ( SymmetricQrAlgorithm arg0 , double arg1 , double arg2 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0 . getNumberOfEigenvalues ( ) ; loc1 ++ ) { double loc2 = arg0 . getEigenvalue ( loc1 ) ; if ( Math . abs ( loc2 - arg1 ) <= arg2 ) { loc0 ++ ; } } return loc0 ; }
BasicNameManager function ( ServiceInfo arg0 ) { BasicNameManager loc0 = new BasicNameManager ( ) ; loc0 . initialize ( arg0 , null ) ; return loc0 ; }
ConfigurationHandler function ( ) { return handler ; }
FederationProposal function ( String arg0 ) { List < FederationProposal > loc0 = getPendingFederationProposals ( ) ; for ( FederationProposal loc1 : loc0 ) { if ( loc1 . arg0 . equals ( arg0 ) ) { return loc1 ; } } return null ; }
void function ( String arg0 ) { this . _cssText = arg0 ; }
void function ( ) { blk = new Block ( blk . fileName ( ) , blk . number ( ) - 1 ) ; pg . read ( blk ) ; currentrec = pg . getInt ( LogMgr . LAST_POS ) ; }
Object function ( String arg0 ) { Object loc0 = new InitialContext ( ) . lookup ( arg0 ) ; Method loc1 = loc0 . getClass ( ) . getMethod ( "srini_string" , new Class [ 0 ] ) ; return loc1 . invoke ( loc0 , new Object [ 0 ] ) ; }
List < String > function ( ) { return acceptedEncryptionAlgorithms ; }
void function ( BundleContext arg0 ) { for ( AutoSIMConnectionConfig loc0 : config . connections ) { environments . deregisterConnectionFactory ( loc0 . name ) ; factories . remove ( loc0 . name ) ; } }
String function ( String [ ] arg0 , Object [ ] [ ] arg1 ) { return of ( arg0 , arg1 , Borders . FULL ) ; }
Node function ( ) { return target ; }
ActivityGraphsHelper function ( ) { return impl ; }
void function ( ) { String loc0 = WebUtils . convertMsToClockTime ( TimeUnit . SECONDS . toMillis ( 1 ) ) ; Assert . assertEquals ( "srini_string" , loc0 ) ; }
java . lang . String function ( ) { return literalName ; }
List < ClassdiagramNode > function ( ) { return downlinks ; }
String function ( ) { return runtimeDir ; }
boolean function ( boolean arg0 ) { if ( ! StringUtils . isEmpty ( currentValue ) ) { return Boolean . parseBoolean ( currentValue . trim ( ) ) ; } return arg0 ; }
void function ( SeekBar arg0 ) { int loc0 = arg0 . getProgress ( ) ; if ( loc0 < arg0 . getMax ( ) ) { arg0 . setProgress ( loc0 + 1 ) ; } else { arg0 . setProgress ( loc0 - 1 ) ; } arg0 . setProgress ( loc0 ) ; }
void function ( ) { assertEquals ( 1 , time . getHour ( ) ) ; }
Date function ( DatePicker arg0 ) { int loc0 = arg0 . getDayOfMonth ( ) ; int loc1 = arg0 . getMonth ( ) ; int loc2 = arg0 . getYear ( ) ; Calendar loc3 = Calendar . getInstance ( ) ; loc3 . set ( loc2 , loc1 , loc0 ) ; return loc3 . getTime ( ) ; }
void function ( Timestamp arg0 ) { this . createdDate = arg0 ; }
boolean function ( Collection < Assertion > arg0 , Collection < Assertion > arg1 ) { if ( null == arg1 || arg1 . isEmpty ( ) ) { return true ; } for ( Assertion loc0 : arg1 ) { if ( ! contains ( arg0 , loc0 ) ) { return false ; } } return true ; }
NodeVisitor function ( Node arg0 ) { return this ; }
XsdStringType function ( ) { return paramValue ; }
ConfigSetupType function ( String arg0 ) { try { return valueOf ( arg0 . toUpperCase ( ) ) ; } catch ( IllegalArgumentException loc0 ) { FetcherTesterRestSvcManager . LOGGER . error ( "srini_string" , loc0 ) ; throw new FetcherTesterServiceException ( "srini_string" + arg0 , loc0 ) ; } }
int function ( ViewConfiguration arg0 ) { return IMPL . getScaledPagingTouchSlop ( arg0 ) ; }
TypeNode function ( String arg0 , Object ... arg1 ) { return ( TypeNode ) parse ( TYPE , arg0 , arg1 ) ; }
void function ( ) { try { rmb . setSteerTo ( null ) ; fail ( "srini_string" ) ; } catch ( IllegalArgumentException loc0 ) { assertTrue ( loc0 . getMessage ( ) . contains ( "srini_string" ) ) ; } catch ( Exception loc0 ) { fail ( loc0 . getMessage ( ) ) ; } }
void function ( ) { if ( connectedHandler != null ) connectedHandler . close ( ) ; }
void function ( final PropertyChangeListener arg0 ) { m_PropertyChangeSupport . addPropertyChangeListener ( arg0 ) ; }
Client function ( ) { return client ; }
String function ( AccessibilityServiceInfo arg0 ) { return IMPL . getDescription ( arg0 ) ; }
void function ( Locale arg0 ) { Locale . setDefault ( arg0 ) ; bundles = new HashMap < String , ResourceBundle > ( ) ; }
Script function ( @ Nullable TransactionSignature arg0 , ECKey arg1 ) { byte [ ] loc0 = arg1 . getPubKey ( ) ; byte [ ] loc1 = arg0 != null ? arg0 . encodeToBitcoin ( ) : new byte [ ] { } ; return new ScriptBuilder ( ) . data ( loc1 ) . data ( loc0 ) . build ( ) ; }
Timestamp function ( ) { return this . receiptDate ; }
void function ( boolean arg0 ) { this . enforceKnownIssuer = arg0 ; }
ValidateAccess function ( ) { return access ; }
void function ( ) { ApplicationVersion . init ( VERSION ) ; }
void function ( RID arg0 ) { moveTo ( arg0 . blockNumber ( ) ) ; rp . moveToId ( arg0 . id ( ) ) ; }
void function ( WalkDirection arg0 ) { viewer . moveCharacter2d ( arg0 ) ; }
BlockWorkerClient function ( WorkerNetAddress arg0 ) { Preconditions . checkNotNull ( arg0 , ExceptionMessage . NO_WORKER_AVAILABLE . getMessage ( ) ) ; long loc0 = IdUtils . getRandomNonNegativeLong ( ) ; return new RetryHandlingBlockWorkerClient ( arg0 , loc0 ) ; }
String function ( ) { return this . failedAttrib ; }
void function ( Map < String , Object > arg0 ) { this . headers = arg0 ; }
int function ( ) { return super . hashCode ( ) ; }
ValidatedItemDTO [ ] function ( String arg0 , boolean arg1 ) { try { return stub . validateAuthnRequest ( arg0 , arg1 ) ; } catch ( RemoteException loc0 ) { log . error ( "srini_string" , loc0 ) ; throw new AxisFault ( loc0 . getMessage ( ) , loc0 ) ; } }
Sha256Hash function ( Block arg0 ) { return arg0 . getHash ( ) ; }
void function ( String arg0 , String arg1 ) { com . google . common . io . Files . move ( new File ( arg0 ) , new File ( arg1 ) ) ; }
List < JsonCoordinatorAction > function ( JSONArray arg0 ) { List < JsonCoordinatorAction > loc0 = new ArrayList < JsonCoordinatorAction > ( ) ; for ( Object loc1 : arg0 ) { loc0 . add ( new JsonCoordinatorAction ( ( JSONObject ) loc1 ) ) ; } return loc0 ; }
void function ( ) { md5Cache . clear ( ) ; }
String function ( ) { return this . inactivationReasonType ; }
void function ( String arg0 , Exception arg1 ) { log . error ( arg0 , arg1 ) ; throw new AxisFault ( arg0 , arg1 ) ; }
ByteBuffer function ( int arg0 , int arg1 ) { ByteBuffer loc0 = ByteBuffer . allocate ( arg1 * 4 ) ; for ( int loc1 = 0 ; loc1 < arg1 ; loc1 ++ ) { loc0 . putInt ( arg0 + loc1 ) ; } loc0 . flip ( ) ; return loc0 ; }
int function ( ) { return lane_id ; }
boolean function ( String arg0 ) { if ( arg0 . length ( ) == 0 || ! Character . isJavaIdentifierStart ( arg0 . charAt ( 0 ) ) ) { return false ; } for ( int loc0 = 1 ; loc0 < arg0 . length ( ) ; loc0 ++ ) { if ( ! Character . isJavaIdentifierPart ( arg0 . charAt ( loc0 ) ) ) { return false ; } } return true ; }
boolean function ( ) { return config . loadDefault ( ) ; }
void function ( List < Double > arg0 ) { profits . add ( arg0 ) ; }
long function ( ) { return index ; }
InStreamOptions function ( long arg0 ) { mSeekBufferSizeBytes = arg0 ; return this ; }
String function ( ) { return formatUTC ( new Date ( ) , DateTimeFormat . SQL , false ) ; }
void function ( T arg0 ) { Integer loc0 = counter . get ( arg0 ) ; if ( loc0 == null ) { counter . put ( arg0 , 1 ) ; } else { counter . put ( arg0 , loc0 + 1 ) ; } }
void function ( List < TestResultDTO > arg0 ) { this . testResultLst = arg0 ; }
Scriptable function ( Context arg0 , Scriptable arg1 , Object arg2 , Class < ? > arg3 ) { Scriptable loc0 ; loc0 = new NativeJavaObject ( arg1 , arg2 , arg3 ) ; return loc0 ; }
String function ( ) { return mTierAlias ; }
PaymentChannelServerState function ( Wallet arg0 , TransactionBroadcaster arg1 ) { if ( state == null ) state = new PaymentChannelServerState ( this , arg0 , arg1 ) ; checkArgument ( arg0 == state . arg0 ) ; return state ; }
String function ( XmlSchemaAttribute arg0 , boolean arg1 ) { if ( arg1 ) { String loc0 = getPrefix ( arg0 . getQName ( ) . getNamespaceURI ( ) ) ; collect ( loc0 , arg0 . getQName ( ) . getNamespaceURI ( ) ) ; return loc0 + "srini_string" + arg0 . getName ( ) ; } return arg0 . getName ( ) ; }
Scan function ( ) { TempTable loc0 = copyRecordsFrom ( rhs ) ; TableInfo loc1 = loc0 . getTableInfo ( ) ; Scan loc2 = lhs . open ( ) ; return new MultiBufferProductScan ( loc2 , loc1 , tx ) ; }
void function ( boolean arg0 ) { _highPriority = arg0 ; }
ServerSession function ( String arg0 ) { return userSessionMap . get ( arg0 ) ; }
String function ( ) { return applicationDescription ; }
List < String > function ( ) { return links . getVertexLabels ( ) ; }
Constant function ( String arg0 ) { if ( groupfields . contains ( arg0 ) ) return groupval . getVal ( arg0 ) ; for ( AggregationFn loc0 : aggfns ) if ( loc0 . fieldName ( ) . equals ( arg0 ) ) return loc0 . value ( ) ; throw new RuntimeException ( "srini_string" + arg0 + "srini_string" ) ; }
String function ( ) { return testData ; }
LocalAlluxioClusterResource function ( PropertyKey arg0 , Object arg1 ) { mConfiguration . put ( arg0 , arg1 . toString ( ) ) ; return this ; }
String function ( String arg0 , String ... arg1 ) { if ( StringUtils . isEmpty ( arg0 ) || isValidOverBlackListPatterns ( arg0 , arg1 ) ) { return arg0 ; } throw new IdentityValidationException ( msgSection1 + String . format ( msgSection3 , getPatternString ( arg1 ) ) ) ; }
Schema function ( ) { return srcplan . schema ( ) ; }
Result function ( List < String > arg0 ) { Result loc0 = new Result ( ) ; for ( ResultEntry loc1 : this . log ) { if ( arg0 . contains ( loc1 . getSource ( ) ) ) { loc0 . add ( loc1 ) ; } } return loc0 ; }
Map < T , String > function ( Set < T > arg0 ) { Map < T , String > loc0 = new HashMap < T , String > ( ) ; for ( T loc1 : arg0 ) { Color loc2 = tintColor ( getRandomColor ( ) , FIXED_TINT_FACTOR ) ; loc0 . put ( loc1 , getColorString ( loc2 ) ) ; } return loc0 ; }
void function ( ) { setPopulationSize ( 0 ) ; setIterations ( 0 ) ; }
void function ( Document arg0 , Element arg1 ) { Element loc0 = arg0 . createElement ( "srini_string" ) ; arg1 . appendChild ( loc0 ) ; for ( SourceSinkDomPair loc1 : this . document . getDomainAssignment ( ) ) writeSourceSinkDomPair ( loc1 , arg0 , loc0 ) ; }
int function ( ) { return values . size ( ) ; }
String function ( ) { return "srini_string" ; }
void function ( Object arg0 , String arg1 , String arg2 ) { Class loc0 = arg0 . getClass ( ) ; XDebugMessage loc1 = new XDebugMessage ( loc0 . getName ( ) , arg1 , arg2 ) ; messages . add ( loc1 ) ; }
MetadataEditorCompat function ( int arg0 , long arg1 ) { if ( HAS_REMOTE_CONTROL_APIS ) { ( ( RemoteControlClient . MetadataEditor ) mActualMetadataEditor ) . putLong ( arg0 , arg1 ) ; } return this ; }
void function ( ) { SpaceXGUI . getInstance ( ) . appendToConsole ( TAG , "srini_string" ) ; cmd . setLedsAnimation ( LEDAnimation . BLINK_RED , 3 , ( spinTime / 1000 ) ) ; cmd . spinLeft ( spinSpeed ) . doFor ( spinTime ) ; cmd . hover ( ) . doFor ( hoverTime ) ; }
ResponseEntity < Ingredient > function ( @ PathVariable String arg0 ) { log . debug ( "srini_string" , arg0 ) ; Ingredient loc0 = ingredientService . findOne ( arg0 ) ; return Optional . ofNullable ( loc0 ) . map ( result -> new ResponseEntity < > ( result , HttpStatus . OK ) ) . orElse ( new ResponseEntity < > ( HttpStatus . NOT_FOUND ) ) ; }
void function ( Element arg0 ) { unhandled ( arg0 ) ; }
String function ( ResultSet arg0 , String arg1 ) { return getStringValue ( arg0 , arg1 , true ) ; }
String function ( String arg0 ) { int loc0 = arg0 . lastIndexOf ( '.' ) ; return ( loc0 < 0 ) ? "srini_string" : arg0 . substring ( 0 , loc0 ) ; }
boolean function ( Object arg0 ) { return internalEquals ( arg0 ) || internalEqualsNext ( arg0 ) ; }
String function ( ) { String loc0 = "srini_string" ; try { loc0 = lineItem . getLineItem ( ) . getItem ( ) . getSellersItemIdentification ( ) . getID ( ) . getValue ( ) ; } catch ( NullPointerException loc1 ) { } return loc0 ; }
void function ( int arg0 ) { state . unicodeAlternateSkipCount = arg0 ; }
void function ( final TextureRegion arg0 ) { this . mTextureRegion = arg0 ; }
void function ( ) { Assert . assertEquals ( TieredBlockStoreTestUtils . getDefaultTotalCapacityBytes ( ) , mBlockStoreMeta . getCapacityBytes ( ) ) ; }
String function ( ) { while ( lines . peek ( ) == null ) { cbuf . clear ( ) ; int loc0 = ( reader != null ) ? reader . loc0 ( buf , 0 , buf . length ) : readable . loc0 ( cbuf ) ; if ( loc0 == - 1 ) { lineBuf . finish ( ) ; break ; } lineBuf . add ( buf , 0 , loc0 ) ; } return lines . poll ( ) ; }
void function ( ) { gsv . setSentenceCount ( 1 ) ; assertEquals ( 1 , gsv . getSentenceCount ( ) ) ; gsv . setSentenceCount ( 2 ) ; assertEquals ( 2 , gsv . getSentenceCount ( ) ) ; }
void function ( String arg0 ) { this . iconPath = arg0 ; }
boolean function ( ) { return ( this . properties . getProxy ( ) != null && this . properties . getProxy ( ) . getAuth ( ) != null && this . properties . getProxy ( ) . getAuth ( ) . getUsername ( ) != null && this . properties . getProxy ( ) . getAuth ( ) . getPassword ( ) != null ) ; }
void function ( IRtfSource arg0 , IRtfListener arg1 ) { handler = new DefaultEventHandler ( arg1 ) ; IRtfParser loc0 = new RawRtfParser ( ) ; loc0 . parse ( arg0 , this ) ; }
Result function ( String arg0 ) { Result loc0 = new Result ( ) ; for ( ResultEntry loc1 : this . log ) { if ( loc1 . getSource ( ) . equals ( arg0 ) ) { loc0 . add ( loc1 ) ; } } return loc0 ; }
void function ( ) { double loc0 = NormOps . conditionP2 ( unzeroMatrix ) ; assertEquals ( 2.1655 , loc0 , 1e-3 ) ; checkUncountable ( NormOps . conditionP2 ( zeroMatrix ) ) ; }
void function ( ) { Mockito . when ( mClient . listObjects ( Matchers . any ( ListObjectsRequest . class ) ) ) . thenThrow ( ServiceException . class ) ; boolean loc0 = mOSSUnderFileSystem . delete ( PATH , false ) ; Assert . assertFalse ( loc0 ) ; }
List < Language > function ( File arg0 ) { return getLanguagesForFile ( arg0 . getName ( ) ) ; }
B function ( Method ... arg0 ) { return suppressing ( Arrays . asList ( arg0 ) ) ; }
void function ( AudioManager arg0 , RemoteControlClientCompat arg1 ) { if ( ! sHasRemoteControlAPIs ) { return ; } arg0 . registerRemoteControlClient ( ( RemoteControlClient ) arg1 . getActualRemoteControlClientObject ( ) ) ; }
long function ( ) { return messagesSent ; }
lalr_item function ( ) { lalr_item loc0 ; if ( _all . values ( ) . size ( ) == 0 ) return null ; loc0 = iterator ( ) . next ( ) ; remove ( loc0 ) ; return loc0 ; }
URI function ( ) { return theURI ; }
void function ( String arg0 ) { this . config . getServletContext ( ) . log ( this . config . getFilterName ( ) + "srini_string" + arg0 ) ; }
String function ( ) { return null ; }
void function ( ) { GSVSentence loc0 = new GSVParser ( "srini_string" ) ; List < SatelliteInfo > loc1 = loc0 . getSatelliteInfo ( ) ; assertEquals ( 2 , loc1 . size ( ) ) ; testSatelliteInfo ( loc1 . get ( 0 ) , "srini_string" , 56 , 182 , 51 ) ; testSatelliteInfo ( loc1 . get ( 1 ) , "srini_string" , 38 , 163 , 47 ) ; }
void function ( ) { DataByteBuffer loc0 = new DataByteBuffer ( mBuffer , LENGTH ) ; Object loc1 = loc0 . getNettyOutput ( ) ; Assert . assertTrue ( loc1 instanceof ByteBuf || loc1 instanceof FileRegion ) ; }
boolean function ( ) { return loggingEnabled ; }
RegisteredClient function ( ServerConfiguration arg0 ) { return clients . get ( arg0 . getIssuer ( ) ) ; }
String function ( String arg0 ) { String loc0 = arg0 ; int loc1 = arg0 . lastIndexOf ( '.' ) ; if ( loc1 != - 1 ) { loc0 = arg0 . substring ( 0 , loc1 ) ; } return loc0 ; }
boolean function ( String arg0 , FieldSigMask arg1 ) { for ( FieldSignature loc0 : fields . keySet ( ) ) { if ( arg1 . covers ( loc0 ) ) { if ( fields . get ( loc0 ) . contains ( arg0 ) ) { return true ; } } } return false ; }
void function ( TreePath arg0 ) { Object loc0 = arg0 . getLastPathComponent ( ) ; TreePath loc1 = arg0 . getParentPath ( ) ; if ( loc1 == null ) { fireChildrenChanged ( arg0 , null , null ) ; } else { Object loc2 = loc1 . getLastPathComponent ( ) ; fireChildChanged ( loc1 , getIndexOfChild ( loc2 , loc0 ) , loc0 ) ; } }
void function ( long arg0 , int arg1 , ServiceInfoStat [ ] arg2 ) { }
void function ( String arg0 ) { this . testId = arg0 ; }
void function ( ) { final Iterator < IoSession > loc0 = this . m_connections . values ( ) . iterator ( ) ; while ( loc0 . hasNext ( ) ) { final IoSession loc1 = loc0 . next ( ) ; loc1 . close ( ) ; loc0 . remove ( ) ; } }
JSONArray function ( List < ? extends JsonWorkflowJob > arg0 ) { JSONArray loc0 = new JSONArray ( ) ; if ( arg0 != null ) { for ( JsonWorkflowJob loc1 : arg0 ) { loc0 . add ( loc1 . toJSONObject ( ) ) ; } } return loc0 ; }
boolean function ( ) { return ( mrnaValue == MRNA . DOWNREGULATED ) ; }
Verb function ( ) { return Verb . POST ; }
DeleteLineageOptions function ( boolean arg0 ) { mCascade = arg0 ; return this ; }
boolean function ( ) { return ( mrnaValue == MRNA . UPREGULATED ) ; }
int function ( ) { return getWorkflow ( ) . getRun ( ) ; }
void function ( DeterministicKey arg0 ) { ImmutableList < ChildNumber > loc0 = arg0 . getPath ( ) ; final DeterministicKey loc1 = arg0 . getParent ( ) ; if ( loc1 != null ) lastChildNumbers . put ( loc1 . getPath ( ) , arg0 . getChildNumber ( ) ) ; keys . put ( loc0 , arg0 ) ; }
List < TestResultDTO > function ( ) { return testResultLst ; }
EncryptedKeyElement function ( ) { return m_EncryptedKeyElement ; }
void function ( String arg0 ) { failedImages . add ( arg0 ) ; }
void function ( boolean arg0 ) { isCurrentScenario = arg0 ; }
void function ( File arg0 ) { Scanner loc0 = new Scanner ( arg0 ) ; loc0 . useDelimiter ( "srini_string" ) ; while ( loc0 . hasNext ( ) ) { _ignoreWords . add ( loc0 . next ( ) ) ; } loc0 . close ( ) ; }
void function ( String arg0 ) { this . checksum = arg0 ; }
void function ( final Result arg0 ) { withExceptionHandling ( new Trans < Object > ( ) { public Object transform ( ) { transformation . transformTo ( arg0 ) ; return null ; } } ) ; }
boolean function ( Node arg0 ) { boolean loc0 = graph . removeVertex ( arg0 ) ; if ( loc0 ) { nodesByIds . remove ( arg0 . getId ( ) ) ; } return loc0 ; }
void function ( RuleSet arg0 ) { ruleSets . add ( arg0 ) ; ruleChain . add ( arg0 ) ; }
void function ( XmlCursor arg0 , ObjArray arg1 ) { javax . xml . namespace . QName loc0 = arg0 . getName ( ) ; String loc1 = loc0 . getNamespaceURI ( ) ; Set loc2 = ( Set ) uriToPrefix . get ( loc1 ) ; if ( loc2 == null || loc2 . size ( ) == 0 ) { undeclared . add ( loc1 ) ; if ( arg1 != null ) arg1 . add ( new Namespace ( lib , loc1 ) ) ; } }
GetOfferDetailsResponse . Return . DetailOfferData function ( ) { return new GetOfferDetailsResponse . Return . DetailOfferData ( ) ; }
Supplier < T > function ( Supplier < T > arg0 ) { return new ThreadSafeSupplier < T > ( Preconditions . checkNotNull ( arg0 ) ) ; }
Matrix function ( CategoricalDistribution arg0 ) { double [ ] loc0 = arg0 . getValues ( ) ; return new Matrix ( loc0 , loc0 . length ) ; }
List < Node > function ( ) { return evaluationResults ; }
boolean function ( ) { return services != null ; }
void function ( int arg0 ) { if ( mWriter . remaining ( ) >= arg0 ) { return ; } byte [ ] loc0 = new byte [ ( mBuffer . length + arg0 ) * 2 ] ; System . arraycopy ( mBuffer , 0 , loc0 , 0 , mWriter . position ( ) ) ; mBuffer = loc0 ; ByteBuffer loc1 = ByteBuffer . wrap ( loc0 ) ; loc1 . position ( mWriter . position ( ) ) ; mWriter = loc1 ; }
String function ( ) { if ( ! matchStringConstant ( ) ) throw new BadSyntaxException ( ) ; String loc0 = tok . sval ; nextToken ( ) ; return loc0 ; }
boolean function ( Integer arg0 ) { return graph . addNode ( arg0 ) ; }
List < String > function ( ) { return produceMediaTypes ; }
Message function ( String arg0 ) { Object loc0 ; try { loc0 = JSONValue . parseWithException ( arg0 ) ; } catch ( ParseException loc1 ) { throw new ParserException ( "srini_string" + loc1 . toString ( ) + "srini_string" + arg0 + "srini_string" ) ; } return parseJSONValueToMessage ( loc0 ) ; }
void function ( DenseMatrix64F arg0 ) { UBV = arg0 ; m = UBV . numRows ; n = UBV . numCols ; min = Math . min ( m , n ) ; int loc0 = Math . loc0 ( m , n ) ; if ( b . length < loc0 + 1 ) { b = new double [ loc0 + 1 ] ; u = new double [ loc0 + 1 ] ; } if ( gammasU . length < m ) { gammasU = new double [ m ] ; } if ( gammasV . length < n ) { gammasV = new double [ n ] ; } }
String function ( ) { if ( label ( ) != null ) return label ( ) + "srini_string" ; else return "srini_string" ; }
String function ( MediaInfo arg0 , int arg1 ) { Uri loc0 = getImageUri ( arg0 , arg1 ) ; if ( loc0 != null ) { return loc0 . toString ( ) ; } return null ; }
long function ( ) { return totalElapsed . get ( ) ; }
String function ( BufferedReader arg0 ) { String loc0 = arg0 . readLine ( ) ; while ( loc0 != null && loc0 . trim ( ) . startsWith ( "srini_string" ) ) { loc0 = arg0 . readLine ( ) ; } return loc0 ; }
void function ( ) { final double loc0 = 95.56789 ; vtg . setMagneticCourse ( loc0 ) ; assertTrue ( vtg . toString ( ) . contains ( "srini_string" ) ) ; assertEquals ( loc0 , vtg . getMagneticCourse ( ) , 0.1 ) ; }
void function ( MessageContext arg0 ) { mc = arg0 ; }
int function ( ) { return Objects . hashCode ( mTtlIntervalStartTimeMs ) ; }
double function ( int arg0 ) { return W . get ( arg0 , arg0 ) ; }
RuleSet [ ] function ( ) { return ruleSets . toArray ( new RuleSet [ ruleSets . size ( ) ] ) ; }
int function ( String arg0 ) { try { return Integer . parseInt ( params . get ( arg0 ) ) ; } catch ( Exception loc0 ) { return - 1 ; } }
boolean function ( Bits arg0 ) { if ( arg0 != null ) { return ( ordinal ( ) & arg0 . ordinal ( ) ) == arg0 . ordinal ( ) ; } return false ; }
void function ( ) { }
void function ( String arg0 ) { this . isActive = arg0 ; }
String function ( ) { String loc0 = pg . getString ( pos ) ; pos += STR_SIZE ( loc0 . length ( ) ) ; return loc0 ; }
CascadedStyle function ( IdentValue arg0 ) { CSSPrimitiveValue loc0 = new PropertyValue ( arg0 ) ; List loc1 = Collections . singletonList ( new PropertyDeclaration ( CSSName . DISPLAY , loc0 , true , StylesheetInfo . USER ) ) ; return new CascadedStyle ( loc1 . iterator ( ) ) ; }
String function ( ) { if ( title == null ) { title = avoidNull ( xmlParser . getTitle ( ) ) ; } return title ; }
int function ( Object arg0 ) { int loc0 = _mask ; int loc1 = System . identityHashCode ( arg0 ) % loc0 & loc0 ; Object [ ] loc2 = _keys ; while ( true ) { Object loc3 = loc2 [ loc1 ] ; if ( loc3 == null ) return NULL ; else if ( loc3 == arg0 ) return _values [ loc1 ] ; loc1 = ( loc1 + 1 ) % loc0 ; } }
int function ( ) { return placementHint ; }
URI function ( QName arg0 ) { for ( ServiceContractResolver loc0 : resolvers ) { URI loc1 = loc0 . getContractLocation ( arg0 ) ; if ( null != loc1 ) { return loc1 ; } } return null ; }
boolean function ( ) { return ! ( hasMoves ( OthelloSide . BLACK ) || hasMoves ( OthelloSide . WHITE ) ) ; }
void function ( ) { System . out . println ( "srini_string" ) ; ResourceBundle loc0 = ResourceBundle . getBundle ( DBType . class . getPackage ( ) . getName ( ) + "srini_string" ) ; Properties loc1 = testProperties ; Properties loc2 = DBType . getResourceBundleAsProperties ( loc0 ) ; Assert . assertEquals ( loc1 , loc2 ) ; }
void function ( Runnable arg0 ) { synchronized ( internalLock ) { queue . add ( arg0 ) ; } startQueueWorker ( ) ; }
void function ( Date arg0 ) { this . expires = arg0 ; }
int function ( ) { return priority ; }
int function ( int arg0 , int arg1 ) { return ( int ) ( toLong ( arg0 ) / toLong ( arg1 ) ) ; }
Type function ( Type arg0 ) { return getSingleTypeParameter ( arg0 , 0 ) ; }
AegisType function ( AegisContext arg0 , Object arg1 , java . lang . reflect . Type arg2 ) { if ( arg2 == null ) { return getWriteTypeStandalone ( arg0 , arg1 , ( AegisType ) null ) ; } else { return arg0 . getTypeMapping ( ) . getTypeCreator ( ) . createType ( arg2 ) ; } }
Identifier function ( ) { return reliableEndpoint . getManager ( ) . getIdGenerator ( ) . generateSequenceIdentifier ( ) ; }
int function ( String arg0 ) { return p . distinctValues ( arg0 ) ; }
byte function ( ByteBuffer arg0 ) { byte [ ] loc0 = BufferUtils . newByteArrayFromByteBuffer ( arg0 ) ; return fingerprintHash ( loc0 ) ; }
void function ( ) { setMaxLocks ( 1 ) ; final BlockLockManager loc0 = new BlockLockManager ( ) ; long loc1 = loc0 . lockBlock ( TEST_SESSION_ID , 1 , BlockLockType . READ ) ; loc0 . lockBlock ( TEST_SESSION_ID , 1 , BlockLockType . READ ) ; loc0 . unlockBlock ( loc1 ) ; lockExpectingHang ( loc0 , 2 ) ; }
String function ( String arg0 , int arg1 , char arg2 ) { checkNotNull ( arg0 ) ; if ( arg0 . length ( ) >= arg1 ) { return arg0 ; } StringBuilder loc0 = new StringBuilder ( arg1 ) ; for ( int loc1 = arg0 . length ( ) ; loc1 < arg1 ; loc1 ++ ) { loc0 . append ( arg2 ) ; } loc0 . append ( arg0 ) ; return loc0 . toString ( ) ; }
boolean function ( ) { Assert . assertNotNull ( instance ) ; return instance . mHasPressureSensor ; }
void function ( int arg0 , int arg1 , int arg2 , int arg3 ) { matrixItemUtility [ arg0 ] [ arg1 ] = arg2 ; matrixItemRemainingUtility [ arg0 ] [ arg1 ] = arg3 ; }
void function ( ) { this . errorLevel = this . errorLevelFolder ; }
String function ( int arg0 , String [ ] arg1 ) { try { if ( arg1 [ arg0 ] . length ( ) == 0 ) { return NA_STRING ; } else { return arg1 [ arg0 ] ; } } catch ( ArrayIndexOutOfBoundsException loc0 ) { return NA_STRING ; } }
void function ( Long arg0 ) { this . expectedDataUnitId = arg0 ; }
void function ( Object arg0 ) { if ( arg0 == null ) throw new internal_error ( "srini_string" ) ; }
void function ( ) { if ( savePending . getAndSet ( true ) ) return ; executor . schedule ( saver , delay , delayTimeUnit ) ; }
void function ( ) { checkSymmRankNMinus_U ( N , N - 2 ) ; checkSymmRankNMinus_U ( N * 2 + 1 , N - 2 ) ; checkSymmRankNMinus_U ( N - 1 , N - 2 ) ; }
boolean function ( Goal arg0 ) { return job ( ) != null && job ( ) == arg0 . job ( ) ; }
String function ( ) { return workflowImplId ; }
void function ( boolean arg0 ) { this . ignoreExceptions = arg0 ; }
String function ( String arg0 , String ... arg1 ) { if ( StringUtils . isEmpty ( arg0 ) || isValidOverWhiteListPatterns ( arg0 , arg1 ) ) { return arg0 ; } throw new IdentityValidationException ( msgSection1 + String . format ( msgSection2 , getPatternString ( arg1 ) ) ) ; }
void function ( ) { final double loc0 = 7.75 ; mwv . setSpeed ( loc0 ) ; assertEquals ( loc0 , mwv . getSpeed ( ) , 0.1 ) ; }
long function ( ) { return delay ; }
void function ( ) { assertEquals ( 25.0 , instance . getLongitude ( ) , 0.0000001 ) ; instance . setLongitude ( 180.0 ) ; assertEquals ( 180 , instance . getLongitude ( ) , 0.0000001 ) ; assertEquals ( CompassPoint . EAST , instance . getLongitudeHemisphere ( ) ) ; }
Iterable < T > function ( final Iterable < T > arg0 , final Predicate < ? super T > arg1 ) { return new Iterable < T > ( ) { @ Override public Iterator < T > iterator ( ) { return new FilteringIterator < T > ( arg0 . iterator ( ) , arg1 ) ; } } ; }
List < CoordinatorActionBean > function ( ) { return actions ; }
void function ( @ ModelAttribute Schedule arg0 ) { repository . save ( arg0 ) ; }
void function ( long arg0 , Runnable arg1 ) { Future < Void > loc0 = asyncFx ( arg1 ) ; waitForMillis ( arg0 , loc0 ) ; }
void function ( Logger arg0 ) { Popup . arg0 = arg0 ; }
void function ( ) { time . setSeconds ( 45.12345 ) ; assertEquals ( 45.12345 , time . getSeconds ( ) , 0.001 ) ; }
ByteBuffer function ( int arg0 ) { return getIncreasingIntBuffer ( 0 , arg0 ) ; }
Sentence function ( TalkerId arg0 , String arg1 ) { if ( arg0 == null ) { throw new IllegalArgumentException ( "srini_string" ) ; } return createParserImpl ( arg1 , arg0 ) ; }
void function ( BigDecimal arg0 ) { this . feedId = arg0 ; }
void function ( ) { RPCBlockReadResponse loc0 = new RPCBlockReadResponse ( BLOCK_ID , OFFSET , LENGTH , null , STATUS ) ; loc0 . encode ( mBuffer ) ; RPCBlockReadResponse loc1 = RPCBlockReadResponse . decode ( mBuffer ) ; assertValid ( BLOCK_ID , OFFSET , LENGTH , STATUS , loc0 ) ; assertValid ( BLOCK_ID , OFFSET , LENGTH , STATUS , loc1 ) ; }
double function ( ) { double loc0 = 0.0 ; try { loc0 = getTheItemPrice ( ) . getPriceAmount ( ) . getValue ( ) . doubleValue ( ) ; } catch ( NullPointerException loc1 ) { } return loc0 ; }
AtomicLongMap < K > function ( ) { return new AtomicLongMap < K > ( new ConcurrentHashMap < > ( ) ) ; }
void function ( boolean arg0 ) { XRLog . arg0 = arg0 ; }
boolean function ( long arg0 , EvictionPlan arg1 , BlockMetadataManager arg2 ) { Preconditions . checkNotNull ( arg1 ) ; return blocksInTheSameDir ( arg1 , arg2 ) && requestSpaceSatisfied ( arg0 , arg1 , arg2 ) ; }
GetOfferDetailsResponse . Return function ( ) { return new GetOfferDetailsResponse . Return ( ) ; }
Element function ( InputStream arg0 ) { ParamChecker . notNull ( arg0 , "srini_string" ) ; SAXBuilder loc0 = createSAXBuilder ( ) ; Document loc1 = loc0 . build ( arg0 ) ; return loc1 . getRootElement ( ) ; }
JobLauncher function ( ) { synchJobLauncher = new SimpleJobLauncher ( ) ; synchJobLauncher . setJobRepository ( jobRepository ) ; return synchJobLauncher ; }
void function ( Object [ ] arg0 ) { notEmpty ( arg0 , "srini_string" ) ; }
boolean function ( ) { return useKeyIdentifier ; }
Enumeration function ( Object arg0 ) { return new IteratorEnumeration ( gen2 ( arg0 ) ) ; }
boolean function ( ) { System . out . println ( count + "srini_string" + limit ) ; return count >= limit ; }
String function ( ) { return canonicalForm ; }
Project function ( ) { return makeEmptyProject ( true ) ; }
String function ( Table arg0 , DBType arg1 ) { return Schema . generateCreateTableScript ( arg0 , arg1 , TABLE_COLUMNS . get ( arg0 ) ) ; }
String function ( ) { return _uriResolver . getBaseUri ( ) ; }
void function ( ) { if ( ! ThreadContext . peek ( ) . isEmpty ( ) ) { ThreadContext . pop ( ) ; } }
void function ( ) { Mode loc0 = new Mode ( Mode . getDefault ( ) ) ; Assert . assertEquals ( Mode . Bits . ALL , loc0 . getOwnerBits ( ) ) ; Assert . assertEquals ( Mode . Bits . ALL , loc0 . getGroupBits ( ) ) ; Assert . assertEquals ( Mode . Bits . ALL , loc0 . getOtherBits ( ) ) ; Assert . assertEquals ( 0777 , loc0 . toShort ( ) ) ; }
String function ( ) { return elem1 ; }
void function ( RepeatField arg0 ) { if ( arg0 == null ) throw new NullPointerException ( "srini_string" ) ; this . repeatList . add ( arg0 ) ; }
IConfigurationFactory function ( ) { return ConfigurationFactory . getInstance ( ) ; }
boolean function ( byte [ ] arg0 , int arg1 , int arg2 ) { int loc0 = arg1 + arg2 ; checkPositionIndexes ( arg1 , loc0 , arg0 . length ) ; for ( int loc1 = arg1 ; loc1 < loc0 ; loc1 ++ ) { if ( arg0 [ loc1 ] < 0 ) { return isWellFormedSlowPath ( arg0 , loc1 , loc0 ) ; } } return true ; }
void function ( CallbackHandler arg0 ) { this . callbackHandler = arg0 ; }
String [ ] [ ] function ( ) { return matrix ; }
void function ( ) { mWorkDirectory = AlluxioTestDirectory . createTemporaryDirectory ( "srini_string" ) . getAbsolutePath ( ) ; }
boolean function ( HttpServletRequest arg0 ) { String loc0 = getEmailId ( arg0 ) ; if ( loc0 != null ) { return true ; } else { return false ; } }
String function ( final ByteBuffer arg0 ) { DECODER . reset ( ) ; try { return arg0 . getString ( DECODER ) ; } catch ( final CharacterCodingException loc0 ) { LOG . error ( "srini_string" + arg0 , loc0 ) ; return StringUtils . EMPTY ; } }
void function ( ) { for ( SentenceListener loc0 : getSentenceListeners ( ) ) { try { loc0 . readingStopped ( ) ; } catch ( Exception loc1 ) { LOGGER . log ( Level . WARNING , LOG_MSG , loc1 ) ; } } }
Object function ( Object arg0 , String arg1 , Object arg2 ) { Object [ ] loc0 = new Object [ 1 ] ; loc0 [ 0 ] = arg2 ; return invokeMethod ( arg0 , arg1 , loc0 ) ; }
void function ( ) { try { time . setHour ( 60 ) ; fail ( "srini_string" ) ; } catch ( IllegalArgumentException loc0 ) { } }
Page < Book > function ( Pageable arg0 ) { log . debug ( "srini_string" ) ; Page < Book > loc0 = bookRepository . findAll ( arg0 ) ; return loc0 ; }
StoredBlock function ( Block arg0 ) { BigInteger loc0 = this . chainWork . add ( arg0 . getWork ( ) ) ; int loc1 = this . height + 1 ; return new StoredBlock ( arg0 , loc0 , loc1 ) ; }
Object function ( ) { return classifier ; }
void function ( Vector arg0 ) { this . repeatList = arg0 ; }
boolean function ( boolean arg0 ) { String loc0 = sawReturn ? ( arg0 ? "srini_string" : "srini_string" ) : ( arg0 ? "srini_string" : "srini_string" ) ; handleLine ( line . toString ( ) , loc0 ) ; line = new StringBuilder ( ) ; sawReturn = false ; return arg0 ; }
java . lang . Object function ( ) { try { return forName ( literalName ) ; } catch ( java . lang . IllegalArgumentException loc0 ) { throw new java . io . InvalidObjectException ( loc0 . getMessage ( ) ) ; } }
void function ( ObjectType arg0 ) { this . objectType = arg0 ; }
void function ( Timestamp arg0 ) { this . fetcherStartTimestamp = arg0 ; }
void function ( String arg0 ) { this . source = arg0 ; }
boolean function ( ) { return "srini_string" . equalsIgnoreCase ( comments ) ; }
SearchConditionBuilder function ( ) { return instance ( DEFAULT_LANGUAGE ) ; }
File function ( ) { return sourceCodeFile ; }
void function ( DataHandler arg0 ) { this . attachinfo = arg0 ; }
void function ( LocalAlluxioClusterResource arg0 , AlluxioURI arg1 ) { waitForPersist ( arg0 , arg1 , 15 * Constants . SECOND_MS ) ; }
void function ( ) { System . out . println ( "srini_string" ) ; String loc0 = "srini_string" ; FileHandler loc1 = new FileHandler ( ) ; String loc2 = "srini_string" ; String loc3 = loc1 . readFromGameFile ( loc0 ) . getNodeName ( ) ; assertEquals ( loc2 , loc3 ) ; }
String function ( String arg0 , String arg1 , String arg2 , String arg3 , String arg4 , String arg5 ) { return String . format ( "srini_string" % s + "srini_string" % s + "srini_string" % s % s , arg2 , arg3 , arg0 , arg1 , arg4 , arg5 ) ; }
WorkflowStore function ( S arg0 ) { return null ; }
byte [ ] function ( ) { return chainCode ; }
void function ( ) { synchronized ( internalLock ) { suspensions ++ ; } }
Verb function ( ) { return Verb . POST ; }
UnderFileSystem function ( ) { return mockUnderFileSystem ( Mockito . anyString ( ) ) ; }
int function ( StoredBlock arg0 ) { return getInterval ( ) - 1 ; }
void function ( ) { try { vCloseRequested = true ; socket . close ( ) ; } catch ( IOException loc0 ) { throw new RuntimeException ( loc0 ) ; } }
byte function ( byte [ ] arg0 ) { int loc0 = FINGERPRINT_HASHER . hashBytes ( arg0 ) . asInt ( ) ; loc0 = ( loc0 >> 24 ) & 0xff ; return ( byte ) ( ( loc0 == 0 ) ? 1 : loc0 ) ; }
File function ( String arg0 ) { return com . gitblit . utils . FileUtils . resolveParameter ( Constants . baseFolder$ , baseFolder , arg0 ) ; }
double function ( ) { return SpecializedOps . qualityTriangular ( true , decomp . getQR ( ) ) ; }
void function ( final int arg0 , final ByteBuffer arg1 , final MediaCodec . BufferInfo arg2 ) { if ( mStatredCount > 0 ) mMediaMuxer . writeSampleData ( arg0 , arg1 , arg2 ) ; }
FilenameFilter function ( final Filter < File > arg0 ) { return new FilenameFilter ( ) { @ Override public boolean accept ( File arg1 , String arg2 ) { return arg0 . arg0 ( new File ( arg1 , arg2 ) ) ; } @ Override public String toString ( ) { return arg0 . toString ( ) ; } } ; }
QualifiedName function ( String arg0 ) { return valueOf ( arg0 , XMLUnit . getXpathNamespaceContext ( ) ) ; }
String function ( Attribute arg0 ) { }
int function ( String arg0 ) { return prodscan . getInt ( arg0 ) ; }
String function ( ) { return url ; }
void function ( String arg0 ) { this . relyingParty = arg0 ; }
T function ( String arg0 , Class < T > arg1 ) { Object loc0 = getProperty ( arg0 ) ; if ( loc0 != null ) { return ( T ) loc0 ; } else { return null ; } }
String [ ] function ( ) { return dnsSeeds ; }
Map < String , String > function ( final String arg0 , final String arg1 ) { final Map < String , String > loc0 = new HashMap < String , String > ( ) ; loc0 . put ( arg0 , arg1 ) ; return loc0 ; }
void function ( LockedInodePath arg0 ) { List < Inode < ? >> loc0 = arg0 . getInodeList ( ) ; String loc1 = getClientUser ( ) ; List < String > loc2 = getGroups ( loc1 ) ; if ( isPrivilegedUser ( loc1 , loc2 ) ) { return ; } checkInodeList ( loc1 , loc2 , null , arg0 . getUri ( ) . getPath ( ) , loc0 , true ) ; }
void function ( ) { Time loc0 = new Time ( "srini_string" ) ; assertEquals ( 1 , loc0 . getHour ( ) ) ; assertEquals ( 2 , loc0 . getMinutes ( ) ) ; assertEquals ( 3.4 , loc0 . getSeconds ( ) , 0.001 ) ; }
Socket function ( ) { return m_socket ; }
boolean function ( Language arg0 ) { for ( RuleSet loc0 : ruleSets ) { if ( loc0 . usesDFA ( arg0 ) ) { return true ; } } return false ; }
boolean function ( String arg0 , String arg1 ) { return STSUtils . TOKEN_TYPE_SCT_05_02 . equals ( arg0 ) || STSUtils . TOKEN_TYPE_SCT_05_12 . equals ( arg0 ) ; }
String function ( ) { return propertyName ; }
int function ( int arg0 ) { return arg0 / 3 ; }
void function ( long arg0 , Runnable arg1 ) { Future < Void > loc0 = async ( arg1 ) ; waitForMillis ( arg0 , loc0 ) ; }
void function ( DataSet arg0 ) { List < String > loc0 = arg0 . getNonTargetAttributes ( ) ; this . tree = decisionTreeLearning ( arg0 , loc0 , new ConstantDecisonTree ( defaultValue ) ) ; }
void function ( ) { this . m_selectorManager . addChannelInterestNow ( this . m_socketChannel , SelectionKey . OP_WRITE ) ; }
OutStreamOptions function ( long arg0 ) { mTtl = arg0 ; return this ; }
void function ( EntityClassifier < EntityViewInfo > arg0 ) { entityClassifier = arg0 ; if ( entityTree != null ) { applyClassifierAndUpdateTree ( entityTree . getBoundingBox ( ) ) ; fireMapDataEvent ( new MapEvent ( this , MapEvent . Type . MAP_MODIFIED ) ) ; } }
void function ( ) { final double loc0 = - 0.1 ; hdg . setVariation ( loc0 ) ; assertEquals ( loc0 , hdg . getVariation ( ) , 0.1 ) ; assertTrue ( hdg . toString ( ) . contains ( "srini_string" ) ) ; }
void function ( Long arg0 ) { this . dataSetId = arg0 ; }
void function ( boolean arg0 ) { this . failLifetimeExceedance = arg0 ; }
void function ( ) { async = true ; }
HashCodeBuilder function ( char arg0 ) { iTotal = iTotal * iConstant + arg0 ; return this ; }
String function ( boolean arg0 , String arg1 ) { return getDataSourceName ( ) ; }
void function ( IdentityMapper arg0 ) { this . identityMapper = arg0 ; }
boolean function ( ) { diagSaved = helper . copyDiag ( diagSaved ) ; offSaved = helper . copyOff ( offSaved ) ; vector . setQ ( null ) ; vector . setFastEigenvalues ( true ) ; if ( ! vector . process ( - 1 , null , null ) ) return false ; values = helper . copyEigenvalues ( values ) ; return true ; }
String function ( ) { if ( claimDialect != null ) { return claimDialect ; } return "srini_string" ; }
void function ( ) { String loc0 = WebUtils . convertMsToClockTime ( TimeUnit . HOURS . toMillis ( 1 ) ) ; Assert . assertEquals ( "srini_string" , loc0 ) ; }
void function ( int arg0 ) { this . bufferedImageType = arg0 ; }
void function ( ) { setFirstRecordPosition ( FIRST_POS ) ; setLastRecordPosition ( LAST_POS ) ; currentpos = 2 * INT_SIZE ; currentblk = mypage . append ( logfile ) ; }
List < UserModel > function ( ) { List < UserModel > loc0 = userService . getAllUsers ( ) ; return loc0 ; }
double function ( ) { return DecompositionFactory . quality ( mat , eig ) ; }
boolean function ( ) { return isAuthenticationEnabled ( ) && isAuthorizationEnabled ( ) ; }
void function ( boolean arg0 ) { this . trackNodeReferences = arg0 ; if ( arg0 ) { nodeReferenceMap = new HashMap < Node , Integer > ( ) ; } }
int function ( MatrixPosition arg0 ) { return originalMatrix . matrixItemRemainingUtility [ arg0 . row ] [ arg0 . column ] ; }
void function ( ) { hdt . setHeading ( 123.45 ) ; assertEquals ( 123.5 , hdt . getHeading ( ) , 0.1 ) ; }
int function ( ) { return index - 1 ; }
java . lang . String function ( ) { return literalName ; }
int function ( ) { return column ; }
void function ( Crypto arg0 ) { this . signatureCrypto = arg0 ; }
void function ( ) { final double loc0 = 90.55555 ; rmc . setCourse ( loc0 ) ; assertTrue ( rmc . toString ( ) . contains ( "srini_string" ) ) ; assertEquals ( loc0 , rmc . getCourse ( ) , 0.1 ) ; }
int function ( ) { return progressMonitor . maxValue ; }
void function ( Date arg0 ) { GregorianCalendar loc0 = new GregorianCalendar ( ) ; loc0 . setTime ( arg0 ) ; double loc1 = loc0 . get ( Calendar . SECOND ) + ( loc0 . get ( Calendar . MILLISECOND ) / 1000.0 ) ; setHour ( loc0 . get ( Calendar . HOUR_OF_DAY ) ) ; setMinutes ( loc0 . get ( Calendar . MINUTE ) ) ; setSeconds ( loc1 ) ; }
void function ( Stack < Tag > arg0 ) { while ( ! arg0 . empty ( ) ) { Tag loc0 = arg0 . pop ( ) ; loc0 . end = builder . length ( ) ; Spannable loc1 = tagStyles . get ( loc0 . tag ) . getStyle ( loc0 . param , builder . subSequence ( loc0 . start + loc0 . tagLength , loc0 . end ) ) ; builder . replace ( loc0 . start , loc0 . end , loc1 ) ; } }
String [ ] function ( ) { return new String [ ] { "srini_string" , "srini_string" , "srini_string" , "srini_string" , "srini_string" , "srini_string" , "srini_string" , "srini_string" } ; }
void function ( String arg0 ) { this . object = arg0 ; }
ToStringHelper function ( long arg0 ) { return addHolder ( String . valueOf ( arg0 ) ) ; }
HTTPConduit function ( ) { Conduit loc0 = getConduit ( ) ; return loc0 instanceof HTTPConduit ? ( HTTPConduit ) loc0 : null ; }
int function ( ) { setInputMode ( ) ; return this . buffer . remaining ( ) ; }
String function ( ) { if ( keyAlias == null ) { ServerConfiguration loc0 = ServerConfiguration . getInstance ( ) ; return loc0 . getFirstProperty ( "srini_string" ) ; } return keyAlias ; }
float function ( double arg0 , double arg1 , double arg2 ) { return ( float ) ( ( .5 * arg2 ) * ( arg0 + arg1 ) ) ; }
Map < String , String > function ( String arg0 ) { Map < String , String > loc0 = new LinkedHashMap < String , String > ( ) ; for ( String loc1 : getStrings ( arg0 ) ) { String [ ] loc2 = loc1 . split ( "srini_string" , 2 ) ; String loc3 = loc2 [ 0 ] ; String loc4 = loc2 [ 1 ] ; loc0 . put ( loc3 , loc4 ) ; } return loc0 ; }
AbstractAction function ( ) { return undoAction ; }
void function ( T arg0 ) { for ( ProviderListener < T > loc0 : listeners ) { loc0 . providerUpdate ( arg0 ) ; } }
int function ( Collection < String > arg0 , Collection < String > arg1 ) { int loc0 = 0 ; for ( String loc1 : arg0 ) { if ( arg1 . contains ( loc1 ) ) { continue ; } arg1 . add ( loc1 ) ; loc0 ++ ; } return loc0 ; }
void function ( O arg0 ) { DocumentElement < O > loc0 = data . get ( arg0 ) ; if ( loc0 == null ) { loc0 = new DocumentElement < O > ( arg0 , new IntegerHolder ( 0 ) ) ; data . put ( arg0 , loc0 ) ; } loc0 . inc ( ) ; wordCountMultiSet ++ ; }
void function ( FullyQualifiedClassType arg0 ) { this . handlerClass = arg0 ; }
String function ( ) { return individualUri ; }
void function ( String arg0 ) { javax . swing . JOptionPane . showMessageDialog ( null , arg0 , appName , JOptionPane . INFORMATION_MESSAGE ) ; }
int function ( ) { return format . length ( ) - formatOff + formatRepeatCount ; }
void function ( ) { mPlainSaslServer = new PlainSaslServer ( new MockCallbackHandler ( ) ) ; }
List < SequenceWithUtility > function ( ) { return sequences ; }
Boolean function ( int arg0 ) { Object loc0 = values . get ( arg0 ) ; if ( loc0 instanceof Boolean ) { return ( Boolean ) loc0 ; } else { throw new IllegalStateException ( ) ; } }
void function ( boolean arg0 ) { this . enabled = arg0 ; }
CommandHandler function ( final String arg0 ) { try { return CommandHandler . valueOf ( arg0 ) ; } catch ( Exception loc0 ) { return null ; } }
void function ( String arg0 ) { this . roleClassifierType = arg0 ; }
String function ( String arg0 ) { String loc0 = null ; URL loc1 = LessFilter . this . findResource ( arg0 ) ; if ( loc1 != null ) { InputStream loc2 = loc1 . openStream ( ) ; loc0 = IOUtils . toString ( loc2 , "srini_string" ) ; IOUtils . closeQuietly ( loc2 ) ; } return loc0 ; }
void function ( FMLInitializationEvent arg0 ) { proxy . registerRenders ( ) ; }
BigInteger function ( final BigInteger arg0 , final BigInteger arg1 ) { if ( arg1 . compareTo ( BigInteger . ZERO ) == 0 ) { return arg0 ; } return findGCD ( arg1 , arg0 . mod ( arg1 ) ) ; }
int function ( ) { if ( items != null ) { return items . size ( ) ; } return 0 ; }
void function ( String arg0 ) { this . feedId = arg0 ; }
short function ( ) { return CSSValue . CSS_PRIMITIVE_VALUE ; }
int function ( MatrixPosition arg0 ) { return originalMatrix . matrixItemUtility [ arg0 . row ] [ arg0 . column ] ; }
void function ( String arg0 ) { AccessPermission loc0 = AccessPermission . permissionFromRole ( arg0 ) ; String loc1 = AccessPermission . repositoryFromRole ( arg0 ) . toLowerCase ( ) ; repositories . add ( loc1 ) ; permissions . put ( loc1 , loc0 ) ; }
List < T > function ( List < T > arg0 , T arg1 ) { arg0 . add ( arg1 ) ; return arg0 ; }
boolean function ( StoredBlock arg0 ) { return chainWork . compareTo ( arg0 . chainWork ) > 0 ; }
String function ( ) { return this . placeId ; }
void function ( boolean arg0 ) { }
ByteBuffer function ( final String arg0 ) { try { final byte [ ] loc0 = arg0 . getBytes ( "srini_string" ) ; return ByteBuffer . wrap ( loc0 ) ; } catch ( final UnsupportedEncodingException loc0 ) { LOG . error ( "srini_string" , loc0 ) ; return ByteBuffer . allocate ( 0 ) ; } }
DataServerMessage function ( final BlockInfo arg0 ) { return request ( arg0 , 0 , - 1 ) ; }
boolean function ( ) { if ( expires != null ) { Date loc0 = new Date ( ) ; if ( expires . before ( loc0 ) ) { return true ; } } return false ; }
Builder function ( @ Nullable String arg0 ) { this . unsafeReplacement = arg0 ; return this ; }
boolean function ( final Callable < Boolean > arg0 ) { boolean loc0 ; try { loc0 = arg0 . call ( ) ; } catch ( Exception loc1 ) { LOG . error ( "srini_string" + arg0 , loc1 ) ; loc0 = false ; } CliUtils . printPassInfo ( loc0 ) ; return loc0 ; }
Block function ( int arg0 ) { return tx . append ( ti . fileName ( ) , new BTPageFormatter ( ti , arg0 ) ) ; }
boolean function ( ) { for ( int loc0 = 0 ; loc0 < monsters . length ; loc0 ++ ) { if ( monstersLiving [ loc0 ] ) { return false ; } } return false ; }
void function ( ) { super . finalize ( ) ; connection . close ( ) ; }
void function ( Class arg0 , Connection arg1 ) { closeConnection ( arg0 . getName ( ) , arg1 ) ; }
List < String > function ( ) { return roles ; }
Permission function ( Mode arg0 ) { mMode = mMode . applyUMask ( arg0 ) ; return this ; }
void function ( ) { futa . nextStep ( ) ; }
int function ( ) { return elements . size ( ) ; }
void function ( ) { SpaceXGUI . getInstance ( ) . appendToConsole ( TAG , "srini_string" ) ; cmd . goRight ( 5 ) . doFor ( 1000 ) ; cmd . hover ( ) . doFor ( hoverTime ) ; }
ELEvaluator function ( ) { return current . get ( ) ; }
boolean function ( ) { return isNew ; }
Function < Object , E > function ( @ Nullable E arg0 ) { return new ConstantFunction < E > ( arg0 ) ; }
String function ( ) { return wsse11TokenType ; }
void function ( String arg0 ) { this . resultCode = arg0 ; }
RpcConnection function ( String arg0 , char [ ] arg1 , String arg2 , int arg3 , boolean arg4 ) { RpcConnection loc0 = new MsgRpc ( ) ; loc0 . setup ( arg0 , arg1 , arg2 , arg3 , arg4 ) ; return loc0 ; }
void function ( ) { Mockito . when ( mockRepository . getAll ( ) ) . thenReturn ( blackListedSitesSet ) ; assertTrue ( service . isBlacklisted ( uri1 ) ) ; assertTrue ( service . isBlacklisted ( uri2 ) ) ; Mockito . verify ( mockRepository , times ( 2 ) ) . getAll ( ) ; }
int function ( String arg0 , int arg1 ) { checkNotNull ( arg0 ) ; long loc0 = Long . parseLong ( arg0 , arg1 ) ; if ( ( loc0 & INT_MASK ) != loc0 ) { throw new NumberFormatException ( "srini_string" + arg0 + "srini_string" + arg1 + "srini_string" ) ; } return ( int ) loc0 ; }
AuthenticationHolderEntity function ( ) { return authenticationHolder ; }
void function ( ) { try { rte . setSentenceCount ( - 1 ) ; fail ( "srini_string" ) ; } catch ( IllegalArgumentException loc0 ) { assertTrue ( loc0 . getMessage ( ) . contains ( "srini_string" ) ) ; } catch ( Exception loc0 ) { fail ( loc0 . getMessage ( ) ) ; } }
Script function ( List < byte [ ] > arg0 , @ Nullable byte [ ] arg1 ) { checkArgument ( arg0 . size ( ) <= 16 ) ; ScriptBuilder loc0 = new ScriptBuilder ( ) ; loc0 . smallNum ( 0 ) ; for ( byte [ ] loc1 : arg0 ) loc0 . data ( loc1 ) ; if ( arg1 != null ) loc0 . data ( arg1 ) ; return loc0 . build ( ) ; }
boolean function ( ) { return ! Configuration . getEnum ( PropertyKey . SECURITY_AUTHENTICATION_TYPE , AuthType . class ) . equals ( AuthType . NOSASL ) ; }
void function ( String arg0 ) { this . referencedRevisionLabelB = arg0 ; }
double [ ] function ( final double [ ] arg0 ) { if ( arg0 == null ) { throw new NullArgumentException ( ) ; } if ( arg0 . length == 0 ) { throw new NoDataException ( ) ; } final double [ ] loc0 = new double [ arg0 . length ] ; for ( int loc1 = 0 ; loc1 < arg0 . length ; ++ loc1 ) { loc0 [ loc1 ] = FastMath . abs ( arg0 [ loc1 ] ) ; } return loc0 ; }
Builder function ( char arg0 , char arg1 ) { this . safeMin = arg0 ; this . safeMax = arg1 ; return this ; }
void function ( LineListener arg0 ) { listeners . add ( arg0 ) ; }
long function ( ) { return timeElapsed ; }
void function ( Graphics2D arg0 ) { arg0 . setRenderingHints ( getRenderingHints ( ) ) ; }
String function ( ) { return classnamePrefix ; }
void function ( File arg0 , MapBuilder arg1 ) { try { parseMap ( createFileStream ( arg0 ) , arg1 ) ; } catch ( FileNotFoundException loc0 ) { LOG . warning ( "srini_string" + arg0 + "srini_string" ) ; } catch ( Exception loc0 ) { LOG . warning ( "srini_string" + loc0 ) ; } }
byte [ ] function ( int arg0 ) { Object loc0 = values . get ( arg0 ) ; if ( loc0 instanceof byte [ ] ) { return ( byte [ ] ) loc0 ; } else { throw new IllegalStateException ( ) ; } }
void function ( final BlockLockManager arg0 , final long arg1 ) { Thread loc0 = new Thread ( new Runnable ( ) { @ Override public void run ( ) { arg0 . lockBlock ( TEST_SESSION_ID , arg1 , BlockLockType . WRITE ) ; } } ) ; loc0 . start ( ) ; loc0 . join ( 200 ) ; Assert . assertTrue ( loc0 . isAlive ( ) ) ; }
boolean function ( Object arg0 ) { Type loc0 = ( Type ) arg0 ; boolean loc1 = false ; for ( Iterator < Type > loc2 = v . iterator ( ) ; loc2 . hasNext ( ) ; ) { Type loc3 = loc2 . next ( ) ; if ( ts . isSubtype ( loc3 , loc0 ) ) { loc1 = true ; loc2 . remove ( ) ; } } return loc1 ; }
EndpointReferenceType function ( ) { return faultTo ; }
void function ( String arg0 ) { this . name = arg0 ; }
void function ( ) { k ++ ; lastFeedbacktime = Util . getCurrentTime ( ) ; }
void function ( String arg0 ) { this . roleClassifier = arg0 ; }
void function ( ) { for ( int loc0 = 0 ; loc0 < BLOCK_LENGTH ; loc0 ++ ) { mTestStream . write ( INCREASING_BYTES [ loc0 ] ) ; Assert . assertEquals ( loc0 + 1 , mTestStream . getWrittenBytes ( ) ) ; } Assert . assertArrayEquals ( INCREASING_BYTES , Arrays . copyOfRange ( mTestStream . getBuffer ( ) . array ( ) , 0 , ( int ) BLOCK_LENGTH ) ) ; }
BufferedByteWriter function ( byte arg0 ) { return this . put16 ( ( short ) ( arg0 & 0xFF ) ) ; }
void function ( InodeFile arg0 ) { TtlBucket loc0 = getBucketContaining ( arg0 ) ; if ( loc0 != null ) { loc0 . removeFile ( arg0 ) ; } }
String function ( ) { return noRun ; }
void function ( Mode . Bits arg0 , LockedInodePath arg1 ) { if ( ! mPermissionCheckEnabled ) { return ; } List < Inode < ? >> loc0 = arg1 . getInodeList ( ) ; String loc1 = getClientUser ( ) ; List < String > loc2 = getGroups ( loc1 ) ; checkInodeList ( loc1 , loc2 , arg0 , arg1 . getUri ( ) . getPath ( ) , loc0 , false ) ; }
void function ( String arg0 , String arg1 , String arg2 , String arg3 , String arg4 ) { String loc0 = String . format ( "srini_string" % s + "srini_string" % s + "srini_string" % s + "srini_string" + "srini_string" + "srini_string" + "srini_string" , arg0 , arg1 , arg2 , arg3 , arg4 ) ; ep . sparql ( MediaType . TEXT_HTML , loc0 ) ; }
void function ( ) { long loc0 = 1 ; mThrown . expect ( LineageDoesNotExistException . class ) ; mThrown . expectMessage ( ExceptionMessage . LINEAGE_DOES_NOT_EXIST . getMessage ( loc0 ) ) ; mLineageStore . deleteLineage ( loc0 ) ; }
boolean function ( ) { return false ; }
CString function ( ) { if ( handlerName == null ) { handlerName = new CString ( ) ; handlerName . setValue ( "srini_string" ) ; } return handlerName ; }
void function ( SshDisconnectedEvent arg0 ) { System . out . println ( "srini_string" + arg0 . getHost ( ) + "srini_string" ) ; connected = false ; }
long function ( ) { return messageNumber ; }
List < String > function ( CertificateConstraintsType arg0 ) { if ( arg0 != null && arg0 . isSetIssuerDNConstraints ( ) ) { DNConstraintsType loc0 = arg0 . getIssuerDNConstraints ( ) ; return loc0 . getRegularExpression ( ) ; } return java . util . Collections . emptyList ( ) ; }
void function ( List < String > arg0 ) { this . registeredAudiences = arg0 ; }
Script function ( List < TransactionSignature > arg0 ) { List < byte [ ] > loc0 = new ArrayList < byte [ ] > ( arg0 . size ( ) ) ; for ( TransactionSignature loc1 : arg0 ) { loc0 . add ( loc1 . encodeToBitcoin ( ) ) ; } return createMultiSigInputScriptBytes ( loc0 , null ) ; }
long function ( int arg0 ) { return arg0 & INT_MASK ; }
FileDescriptor function ( ) { return fd ; }
Site function ( String arg0 ) { log . debug ( "srini_string" , arg0 ) ; return siteRepository . findByHost ( arg0 ) ; }
ByteBuffer function ( int arg0 , int arg1 ) { return ByteBuffer . wrap ( getIncreasingByteArray ( arg0 , arg1 ) ) ; }
void function ( ) { ttm . setStatus ( TargetStatus . LOST ) ; assertTrue ( ttm . toString ( ) . contains ( "srini_string" ) ) ; }
boolean function ( String arg0 , boolean arg1 ) { int loc0 = arg1 ? 1 : 0 ; return arg0 . length ( ) >= loc0 + 2 && ( ! arg1 || arg0 . charAt ( 0 ) == '/' ) && arg0 . charAt ( loc0 + 1 ) == ':' && ( ( arg0 . charAt ( loc0 ) >= 'A' && arg0 . charAt ( loc0 ) <= 'Z' ) || ( arg0 . charAt ( loc0 ) >= 'a' && arg0 . charAt ( loc0 ) <= 'z' ) ) ; }
void function ( final int arg0 , final D1Submatrix64F arg1 , final D1Submatrix64F arg2 , int arg3 , double arg4 ) { double loc0 = BlockHouseHolder . innerProdRow ( arg0 , arg1 , arg3 , arg2 , arg3 , 1 ) ; double loc1 = arg1 . get ( arg3 , arg3 + 1 ) ; arg1 . set ( arg3 , arg3 + 1 , 1 ) ; BlockVectorOps . add_row ( arg0 , arg2 , arg3 , 1 , arg1 , arg3 , - 0.5 * arg4 * loc0 , arg2 , arg3 , arg3 + 1 , arg1 . col1 - arg1 . col0 ) ; arg1 . set ( arg3 , arg3 + 1 , loc1 ) ; }
String function ( ) { return url . replaceAll ( "srini_string" , "srini_string" ) . replace ( "srini_string" , "srini_string" ) ; }
int function ( ) { BitSet loc0 = ( BitSet ) taken . clone ( ) ; loc0 . andNot ( black ) ; return loc0 . cardinality ( ) ; }
BookPreview function ( UUID arg0 ) { for ( BookPreview loc0 : data ) { if ( loc0 . getUUID ( ) . equals ( arg0 ) ) return loc0 ; } return null ; }
boolean function ( ) { return allNodes . size ( ) == 0 ; }
DagEngine function ( ) { return new DagEngine ( ) ; }
void function ( ) { System . out . println ( "srini_string" ) ; String loc0 = "srini_string" ; ResourceLoader loc1 = new ResourceLoader ( ) ; InputStream loc2 = null ; InputStream loc3 = loc1 . getResourceStream ( loc0 ) ; Assert . assertNotNull ( loc3 ) ; }
void function ( Iterable < ? extends T > arg0 ) { offerAll ( arg0 . iterator ( ) ) ; }
ProjectValidation function ( ) { return new ProjectValidation ( ) ; }
boolean function ( Map < String , String > arg0 , String arg1 , String arg2 ) { if ( arg0 == null || UtilString . isEmpty ( arg1 ) || UtilString . isEmpty ( arg2 ) ) { return false ; } arg0 . put ( arg1 , arg2 ) ; return true ; }
Object function ( Object arg0 , Object arg1 ) { return ( arg0 != null ) ? arg0 : arg1 ; }
String function ( ) { return csr ; }
void function ( Exception arg0 ) { if ( sIsLogEnabled ) { Log . e ( sApplicationTag , getContent ( getCurrentStackTraceElement ( ) ) + "srini_string" + arg0 . getMessage ( ) ) ; arg0 . printStackTrace ( ) ; } }
Set < String > function ( ) { return recentlyGrantedPermissions ; }
boolean function ( Fiat arg0 ) { return compareTo ( arg0 ) < 0 ; }
void function ( String arg0 ) { this . type = arg0 ; }
String function ( String arg0 ) { return CacheUtil . md5sum ( arg0 ) ; }
BufferedByteWriter function ( int arg0 ) { ensureCapacity ( 4 ) ; mWriter . putInt ( arg0 ) ; return this ; }
String function ( Object arg0 ) { if ( Model . getFacade ( ) . isAAttribute ( arg0 ) ) { if ( ! Model . getFacade ( ) . isReadOnly ( arg0 ) ) { return "srini_string" ; } } else { if ( Model . getFacade ( ) . isAOperation ( arg0 ) ) { if ( Model . getFacade ( ) . isLeaf ( arg0 ) ) { return "srini_string" ; } } } return "srini_string" ; }
T function ( ) { return W ; }
OpenIDClaimMapper function ( ) { if ( instance == null ) { instance = new OpenIDClaimMapper ( ) ; } return instance ; }
void function ( Hessian2StreamingInput arg0 ) { }
void function ( String [ ] arg0 ) { SshExample loc0 = new SshExample ( ) ; }
String function ( String arg0 ) { String loc0 = arg0 . replaceAll ( "srini_string" , "srini_string" ) ; String loc1 = loc0 . replaceAll ( "srini_string" , "srini_string" ) ; return loc1 ; }
Abstraction function ( ) { return this . abstraction ; }
int function ( TtlBucket arg0 ) { long loc0 = getTtlIntervalStartTimeMs ( ) ; long loc1 = arg0 . getTtlIntervalStartTimeMs ( ) ; if ( loc0 < loc1 ) { return - 1 ; } if ( loc0 == loc1 ) { return 0 ; } return 1 ; }
Document function ( final InputStream arg0 ) { return extractAll ( arg0 , null , true , true ) ; }
List < T > function ( ) { Arrays . sort ( buffer , 0 , bufferSize , comparator ) ; if ( bufferSize > k ) { Arrays . fill ( buffer , k , buffer . length , null ) ; bufferSize = k ; threshold = buffer [ k - 1 ] ; } return Collections . unmodifiableList ( Arrays . asList ( Arrays . copyOf ( buffer , bufferSize ) ) ) ; }
void function ( ) { Time loc0 = zda . getTime ( ) ; assertNotNull ( loc0 ) ; assertEquals ( 3 , loc0 . getHour ( ) ) ; assertEquals ( 29 , loc0 . getMinutes ( ) ) ; assertEquals ( 15.0 , loc0 . getSeconds ( ) , 0.1 ) ; }
void function ( ) { assertEquals ( cal . get ( Calendar . DAY_OF_MONTH ) , instance . getDay ( ) ) ; }
void function ( ) { assertEquals ( expected , LanguageRegistry . findLanguageVersionByTerseName ( terseName ) ) ; }
String function ( String arg0 ) { return escape ( arg0 ) . replace ( "srini_string" , "srini_string" ) ; }
void function ( BigDecimal arg0 ) { this . expDataUnitId = arg0 ; }
OperationMetric function ( ) { return calculator ; }
void function ( ) { assertEquals ( 2 , gsv . getSentenceIndex ( ) ) ; }
SiteUrl function ( SiteUrl arg0 ) { log . debug ( "srini_string" , arg0 ) ; SiteUrl loc0 = siteUrlRepository . save ( arg0 ) ; return loc0 ; }
DataServerMessage function ( ) { DataServerMessage loc0 = new DataServerMessage ( false , RPCMessage . Type . RPC_BLOCK_READ_REQUEST ) ; loc0 . mHeader = ByteBuffer . allocate ( REQUEST_HEADER_LENGTH ) ; return loc0 ; }
boolean function ( ) { return entityManager . getTransaction ( ) . isActive ( ) ; }
void function ( ) { assertEquals ( 20.2 , ttm . getTimeToCPA ( ) , 0.001 ) ; }
void function ( SshDisconnectedEvent arg0 ) { System . out . println ( "srini_string" + arg0 . getHost ( ) + "srini_string" ) ; connected = false ; }
String function ( ) { return value ; }
boolean function ( ) { boolean loc0 = idx . next ( ) ; if ( loc0 ) { RID loc1 = idx . getDataRid ( ) ; ts . moveToRid ( loc1 ) ; } return loc0 ; }
void function ( ) { seekInternal ( mEOFBlockStream , ( int ) BLOCK_LENGTH ) ; }
void function ( ) { int loc0 = 0 ; try { instance . setMonth ( loc0 ) ; fail ( "srini_string" ) ; } catch ( IllegalArgumentException loc1 ) { } loc0 = 32 ; try { instance . setMonth ( loc0 ) ; fail ( "srini_string" ) ; } catch ( IllegalArgumentException loc1 ) { } }
String function ( Set < String > arg0 , FitnessFunction arg1 , int arg2 ) { String loc0 = null ; validatePopulation ( arg0 ) ; clearInstrumentation ( ) ; setPopulationSize ( arg0 . size ( ) ) ; for ( int loc1 = 0 ; loc1 < arg2 ; loc1 ++ ) { loc0 = ga ( arg0 , arg1 ) ; } setIterations ( arg2 ) ; return loc0 ; }
RPPA function ( ) { return rppaValue ; }
void function ( QName arg0 ) { path . addLast ( path . getLast ( ) . attributes . get ( arg0 ) ) ; }
EncryptionProperties function ( ) { return encryptionProperties ; }
AccessToken function ( List < String > arg0 , String arg1 ) { return getAccessTokenForUser ( arg0 , Mode . SHARED , arg1 ) ; }
void function ( @ Nullable Closeable arg0 , boolean arg1 ) { if ( arg0 == null ) { return ; } try { arg0 . close ( ) ; } catch ( IOException loc0 ) { if ( arg1 ) { logger . log ( Level . WARNING , "srini_string" , loc0 ) ; } else { throw loc0 ; } } }
void function ( final String arg0 , final String arg1 ) { properties . setProperty ( arg0 , arg1 ) ; }
List < RSSItem > function ( ) { return this . _items ; }
void function ( Item arg0 , int arg1 ) { if ( ! this . isFull ( ) ) { arg1 = Math . min ( arg1 , limit - count ) ; count += arg1 ; if ( invMap . containsKey ( arg0 ) ) { int loc0 = invMap . get ( arg0 ) ; arg1 += loc0 ; } invMap . put ( arg0 , arg1 ) ; } }
void function ( ) { assertEquals ( cal . get ( Calendar . YEAR ) , instance . getYear ( ) ) ; assertEquals ( cal . get ( Calendar . MONTH ) + 1 , instance . getMonth ( ) ) ; assertEquals ( cal . get ( Calendar . DAY_OF_MONTH ) , instance . getDay ( ) ) ; }
int function ( ) { if ( vstack . empty ( ) ) throw new Exception ( "srini_string" ) ; return vstack . peek ( ) . intValue ( ) ; }
String function ( String arg0 ) { int loc0 = arg0 . lastIndexOf ( '/' ) ; String loc1 = arg0 ; if ( loc0 != - 1 ) { loc1 = arg0 . substring ( 0 , loc0 ) ; } return loc1 ; }
void function ( ) { SetAttributeOptions loc0 = SetAttributeOptions . defaults ( ) ; Assert . assertNull ( loc0 . getPinned ( ) ) ; Assert . assertNull ( loc0 . getTtl ( ) ) ; Assert . assertNull ( loc0 . getPersisted ( ) ) ; }
int function ( ) { return i ; }
void function ( List < String > arg0 ) { produceMediaTypes = arg0 ; }
boolean function ( ) { return ! rawCommand . isEmpty ( ) ; }
void function ( ) { Mockito . when ( mClient . listObjectsV2 ( Matchers . any ( ListObjectsV2Request . class ) ) ) . thenThrow ( AmazonClientException . class ) ; boolean loc0 = mS3UnderFileSystem . delete ( PATH , true ) ; Assert . assertFalse ( loc0 ) ; }
void function ( int arg0 ) { requestedCameraId = arg0 ; }
List < ByteBuffer > function ( List < ByteBuffer > arg0 ) { List < ByteBuffer > loc0 = new ArrayList < > ( arg0 . size ( ) ) ; for ( ByteBuffer loc1 : arg0 ) { loc0 . add ( cloneByteBuffer ( loc1 ) ) ; } return loc0 ; }
String function ( ) { return title ; }
void function ( VertexLabelType arg0 , VertexLabelType arg1 , EdgeLabelType arg2 ) { Hashtable < VertexLabelType , EdgeLabelType > loc0 = checkForNewVertex ( arg0 ) ; loc0 . put ( arg1 , arg2 ) ; checkForNewVertex ( arg1 ) ; }
WritableMap function ( @ Nullable String arg0 , String arg1 ) { WritableMap loc0 = Arguments . createMap ( ) ; loc0 . putString ( "srini_string" , arg1 ) ; if ( arg0 != null ) { loc0 . putString ( "srini_string" , arg0 ) ; } return loc0 ; }
List function ( ) { return new ArrayList ( LOGGER_NAMES ) ; }
void function ( JobsGroup arg0 , Context arg1 , boolean arg2 ) { this . finishRunningJobs ( arg1 ) ; this . jobs . put ( Long . valueOf ( arg0 . getId ( ) ) , arg0 ) ; arg0 . run ( this , arg2 ) ; }
int function ( ) { return start ; }
void function ( UriPrefixPair [ ] arg0 ) { this . packagePrefixes = arg0 ; }
void function ( long arg0 ) { this . seqId = arg0 ; }
ProfileData function ( ) { return this . profileData ; }
DenseMatrix64F function ( DenseMatrix64F arg0 , double arg1 ) { if ( ! MatrixFeatures . isVector ( arg0 ) ) throw new IllegalArgumentException ( "srini_string" ) ; DenseMatrix64F loc0 = CommonOps . identity ( arg0 . getNumElements ( ) ) ; CommonOps . multAddTransB ( - arg1 , arg0 , arg0 , loc0 ) ; return loc0 ; }
Mode function ( Mode arg0 ) { return new Mode ( mOwnerBits . and ( arg0 . mOwnerBits . not ( ) ) , mGroupBits . and ( arg0 . mGroupBits . not ( ) ) , mOtherBits . and ( arg0 . mOtherBits . not ( ) ) ) ; }
Waypoint function ( String arg0 ) { return new Waypoint ( arg0 , getLatitude ( ) , getLongitude ( ) ) ; }
void function ( long arg0 ) { this . testId = arg0 ; }
void function ( boolean arg0 ) { this . saveW = arg0 ; }
void function ( final ProtocolHandler arg0 ) { this . m_readHandler . setProtocolHandler ( arg0 ) ; }
byte [ ] function ( ) { if ( ! isRaw ) { format . checkType ( 'U' , false ) ; } int loc0 = getByteArrayLength ( ) ; byte [ ] loc1 = new byte [ loc0 ] ; getByteArrayInternal ( loc0 , loc1 , 0 , loc0 ) ; return loc1 ; }
LogoutRequestSender function ( ) { return instance ; }
int function ( ) { return num ; }
String function ( ) { String loc0 = mUri . getPath ( ) ; int loc1 = loc0 . lastIndexOf ( SEPARATOR ) ; return loc0 . substring ( loc1 + 1 ) ; }
ResultType function ( RequestAbstractType arg0 , ResultType arg1 ) { arg1 . setRequestId ( arg0 . getId ( ) ) ; return arg1 ; }
Object function ( Object arg0 ) { if ( arg0 instanceof String && ( ( String ) arg0 ) . equals ( "srini_string" ) ) { return null ; } return arg0 ; }
void function ( ) { getPage ( ) . draw ( view . canvas ) ; view . invalidate ( ) ; }
void function ( ) { final double loc0 = 25 + ( 01.941 / 60 ) ; instance . setLatitude ( 0 , loc0 ) ; assertTrue ( instance . toString ( ) . contains ( "srini_string" ) ) ; assertEquals ( loc0 , instance . parseLatitude ( 0 ) , 0.000001 ) ; }
void function ( ) { mTextView . removeTextChangedListener ( mChangeListener ) ; }
void function ( String arg0 , HighLevelChangeRenaming arg1 ) { this . highLevelChangesRenaming . put ( arg0 , arg1 ) ; }
void function ( String arg0 , Bundle arg1 , RequestListener arg2 , final Object arg3 ) { request ( arg0 , arg1 , "srini_string" , arg2 , arg3 ) ; }
void function ( Rotation arg0 ) { this . rotation = arg0 ; for ( StateListener loc0 : this . listeners ) { loc0 . onRotationChanged ( this . rotation ) ; } }
int function ( ) { return pattern . length ; }
void function ( ) { mBuffer = BufferUtils . getIncreasingByteBuffer ( LENGTH ) ; }
void function ( ) { assertTrue ( rte . isFirst ( ) ) ; }
void function ( List < RSSItem > arg0 ) { this . _items = arg0 ; }
void function ( long arg0 ) { this . geneB = arg0 ; }
void function ( ) { mThrown . expect ( ClosedChannelException . class ) ; ByteBuffer loc0 = BufferUtils . getIncreasingByteBuffer ( ( int ) TEST_BLOCK_SIZE ) ; Assert . assertEquals ( TEST_BLOCK_SIZE , mWriter . append ( loc0 ) ) ; mWriter . close ( ) ; mWriter . append ( loc0 ) ; }
void function ( ) { Assert . assertEquals ( 33554431L , BlockId . createBlockId ( 1 , BlockId . getMaxSequenceNumber ( ) ) ) ; Assert . assertEquals ( MAX_SEQUENCE_NUMBER , BlockId . createBlockId ( 0 , BlockId . getMaxSequenceNumber ( ) ) ) ; Assert . assertEquals ( 4294967295L , BlockId . createBlockId ( 255 , BlockId . getMaxSequenceNumber ( ) ) ) ; }
void function ( ) { LOG . debug ( "srini_string" ) ; runFullTest ( new YahooImageSearcher ( null , UUID . randomUUID ( ) , "srini_string" , "srini_string" ) ) ; }
Stmt function ( String arg0 , List < ? > arg1 ) { return ( Stmt ) parse ( STMT , arg0 , arg1 . toArray ( ) ) ; }
List < String > function ( ) { return redirectUris ; }
byte [ ] function ( ) { return this . errors ; }
int function ( Object arg0 , Object arg1 ) { CancerStudy loc0 = ( CancerStudy ) arg0 ; CancerStudy loc1 = ( CancerStudy ) arg1 ; return loc0 . getName ( ) . compareTo ( loc1 . getName ( ) ) ; }
boolean function ( String arg0 , String arg1 ) { boolean loc0 = arg0 . equals ( arg1 ) || ( arg1 . startsWith ( "srini_string" ) && arg0 . endsWith ( arg1 ) ) ; return loc0 ; }
ListIterator < BasicLogRecord > function ( ) { flush ( ) ; return new LogIterator ( currentblk ) ; }
GetOfferDetailsResponse . Return . DetailOfferData . Merchant . Addresses function ( ) { return new GetOfferDetailsResponse . Return . DetailOfferData . Merchant . Addresses ( ) ; }
Block function ( String arg0 ) { return filemgr . append ( arg0 , contents ) ; }
void function ( Node arg0 , NodeTest arg1 ) { actualNumNodes ++ ; }
void function ( int arg0 ) { this . conflictsNotApproved = arg0 ; }
void function ( VertexLabelType arg0 , VertexLabelType arg1 ) { Hashtable < VertexLabelType , EdgeLabelType > loc0 = globalEdgeLookup . get ( arg0 ) ; if ( loc0 != null ) loc0 . remove ( arg1 ) ; }
void function ( double arg0 ) { this . mob . getNavigator ( ) . tryMoveToEntityLiving ( attackTarget , arg0 ) ; }
Map < String , String > function ( FederationModel arg0 ) { String loc0 = asLink ( arg0 . loc0 , arg0 . token , FederationRequest . PULL_SETTINGS ) ; Map < String , String > loc1 = JsonUtils . retrieveJson ( loc0 , SETTINGS_TYPE ) ; return loc1 ; }
boolean function ( CharSequence arg0 , int arg1 ) { return arg1 >= 0 && arg1 <= ( arg0 . length ( ) - 2 ) && Character . isHighSurrogate ( arg0 . charAt ( arg1 ) ) && Character . isLowSurrogate ( arg0 . charAt ( arg1 + 1 ) ) ; }
String function ( ) { return mAlluxioMaster . getRPCBindHost ( ) ; }
String function ( UnicodeEscaper arg0 , int arg1 ) { return stringOrNull ( arg0 . escape ( arg1 ) ) ; }
void function ( ) { Mockito . when ( mClient . listObjects ( Matchers . any ( ListObjectsRequest . class ) ) ) . thenThrow ( ServiceException . class ) ; boolean loc0 = mOSSUnderFileSystem . rename ( SRC , DST ) ; Assert . assertFalse ( loc0 ) ; }
ScriptBuilder function ( int arg0 ) { return op ( chunks . size ( ) , arg0 ) ; }
void function ( ) { Configuration . set ( PropertyKey . WORKER_ALLOCATOR_CLASS , GreedyAllocator . class . getName ( ) ) ; Allocator loc0 = Allocator . Factory . create ( mManagerView ) ; Assert . assertTrue ( loc0 instanceof GreedyAllocator ) ; }
void function ( String arg0 ) { this . contentEncoding = arg0 ; }
void function ( ) { if ( sawReturn || line . length ( ) > 0 ) { finishLine ( false ) ; } }
void function ( ) { _use_count ++ ; }
void function ( ) { while ( i < documents . length ) { if ( documents [ i ] . isDirectory ( ) ) { File loc0 = new File ( documents [ i ] , fragmentFileName ) ; if ( loc0 . exists ( ) ) { break ; } } i ++ ; } }
void function ( final Intent arg0 , final String arg1 ) { arg0 . putExtra ( INTENT_EXTRA_TRANSACTION_HASH , arg1 ) ; arg0 . putExtra ( INTENT_EXTRA_TRANSACTION_HASH_OLD , arg1 ) ; }
Iterator function ( ) { return new OrderLineTypeFacade . Iterator ( order . getOrderLine ( ) ) ; }
void function ( FolderInfo . CheckedFlag arg0 ) { this . checkedFlag = arg0 ; }
void function ( Bundle arg0 ) { }
String function ( Block arg0 , int arg1 ) { concurMgr . sLock ( arg0 ) ; Buffer loc0 = myBuffers . getBuffer ( arg0 ) ; return loc0 . getString ( arg1 ) ; }
BitcoinPacketHeader function ( ByteBuffer arg0 ) { return new BitcoinPacketHeader ( arg0 ) ; }
void function ( RuleSet arg0 , Rule arg1 ) { RuleChainVisitor loc0 = getRuleChainVisitor ( arg1 . getLanguage ( ) ) ; if ( loc0 != null ) { loc0 . add ( arg0 , arg1 ) ; } }
void function ( ) { trigger ( null ) ; }
void function ( ) { ASTElement loc0 = element ( "srini_string" ) ; ASTElement loc1 = element ( "srini_string" ) ; ASTElement loc2 = element ( "srini_string" ) ; tagList . openTag ( loc0 ) ; tagList . openTag ( loc1 ) ; tagList . openTag ( loc2 ) ; tagList . closeTag ( loc0 ) ; assertFalse ( loc0 . isUnclosed ( ) ) ; assertTrue ( loc1 . isUnclosed ( ) ) ; assertTrue ( loc2 . isUnclosed ( ) ) ; }
